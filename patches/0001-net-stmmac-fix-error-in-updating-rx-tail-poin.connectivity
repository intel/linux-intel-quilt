From 0bcab299403547b994edf858ad7812a22a3cdae3 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Wed, 31 Jul 2019 13:55:13 +0800
Subject: [PATCH 01/52] net: stmmac: fix error in updating rx tail pointer to
 last free entry

DMA_CH(#i)_RxDesc_Tail_Pointer points to an offset from the base and
indicates the location of the last valid descriptor.

The change introduced by "net: stmmac: Update RX Tail Pointer to last
free entry" incorrectly update the RxDesc_Tail_Pointer and causes
Rx operation to freeze. The issue is explained as follow:-

Say, cur_rx=1 and dirty_rx=0, then dirty=1 and entry=0 before
the loop inside stmmac_rx_refill() is entered. Inside the loop,
Rx buffer[entry=0] is rightfully refilled and entry++ (now, entry=1).
Upon the loop condition check "dirty-- > 0", the condition is false
because dirty=0.

Now, dirty_rx=entry(=1) and it is used to update the Rx Tail Pointer
instead of "0" because only Rx buffer[entry=0] is refilled.

So, fix this by tracking the index of the most recently refilled Rx
buffer by using "last_refill". Since there the loop can also bail
out pre-maturely, we only update the Rx Tail Pointer if 'last_refill'
is valid.

Fixes: 	858a31ffc3d9 net: stmmac: Update RX Tail Pointer to last free entry

Change-Id: I75eaad74978cc04be27d9237ffe467160a53c899
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac_main.c | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index fd54c7c87485..5b00ad957607 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -3273,6 +3273,7 @@ static inline void stmmac_rx_refill(struct stmmac_priv *priv, u32 queue)
 	struct stmmac_rx_queue *rx_q = &priv->rx_queue[queue];
 	int len, dirty = stmmac_rx_dirty(priv, queue);
 	unsigned int entry = rx_q->dirty_rx;
+	unsigned int last_refill = entry;
 
 	len = DIV_ROUND_UP(priv->dma_buf_sz, PAGE_SIZE) * PAGE_SIZE;
 
@@ -3309,13 +3310,16 @@ static inline void stmmac_rx_refill(struct stmmac_priv *priv, u32 queue)
 
 		dma_wmb();
 		stmmac_set_rx_owner(priv, p, use_rx_wd);
-
+		last_refill = entry;
 		entry = STMMAC_GET_ENTRY(entry, DMA_RX_SIZE);
 	}
-	rx_q->dirty_rx = entry;
-	rx_q->rx_tail_addr = rx_q->dma_rx_phy +
-			    (rx_q->dirty_rx * sizeof(struct dma_desc));
-	stmmac_set_rx_tail_ptr(priv, priv->ioaddr, rx_q->rx_tail_addr, queue);
+	if (last_refill != entry) {
+		rx_q->dirty_rx = entry;
+		rx_q->rx_tail_addr = rx_q->dma_rx_phy +
+				     (last_refill * sizeof(struct dma_desc));
+		stmmac_set_rx_tail_ptr(priv, priv->ioaddr,
+				       rx_q->rx_tail_addr, queue);
+	}
 }
 
 /**
-- 
2.17.1

