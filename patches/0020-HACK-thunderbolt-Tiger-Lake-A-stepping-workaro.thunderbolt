From aaa2fdbacb8f58b38b9a3e14692a780479e9a102 Mon Sep 17 00:00:00 2001
From: Mika Westerberg <mika.westerberg@linux.intel.com>
Date: Tue, 17 Sep 2019 23:12:47 +0300
Subject: [PATCH 20/20] HACK: thunderbolt: Tiger Lake A stepping workarounds

Tiger Lake A steppings misses the correct USB4 version field so hack it
around here. It also does not have ADP_USB3_CS_4 register implemented so
we hard-code 10G USB 3.x link.

Not for upstreaming.

Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---
 drivers/thunderbolt/nhi_ops.c |  4 +++-
 drivers/thunderbolt/tb.h      | 10 +++++++++-
 drivers/thunderbolt/usb4.c    | 22 ++++++++++++++++++++--
 3 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/drivers/thunderbolt/nhi_ops.c b/drivers/thunderbolt/nhi_ops.c
index 96da07e88c52..80bd496148aa 100644
--- a/drivers/thunderbolt/nhi_ops.c
+++ b/drivers/thunderbolt/nhi_ops.c
@@ -127,7 +127,9 @@ static int icl_nhi_suspend(struct tb_nhi *nhi)
 	if (icl_nhi_is_device_connected(nhi))
 		return 0;
 
-	if (tb_switch_is_icm(tb->root_switch)) {
+	/* TGL A step does not have PREPARE_FOR_RESET implemented */
+	if (tb_switch_is_icm(tb->root_switch) &&
+	    !tb_switch_is_tiger_lake_astep(tb->root_switch)) {
 		/*
 		 * If there is no device connected we need to perform
 		 * both: a handshake through LC mailbox and force power
diff --git a/drivers/thunderbolt/tb.h b/drivers/thunderbolt/tb.h
index 50d3eb9d3d61..60d7fdd479d9 100644
--- a/drivers/thunderbolt/tb.h
+++ b/drivers/thunderbolt/tb.h
@@ -790,6 +790,13 @@ static inline bool tb_switch_is_tiger_lake(const struct tb_switch *sw)
 	return false;
 }
 
+/* This is hack for TGL A step and should be removed */
+static bool tb_switch_is_tiger_lake_astep(const struct tb_switch *sw)
+{
+	return sw->config.thunderbolt_version != USB4_VERSION_1_0 &&
+		tb_switch_is_tiger_lake(sw);
+}
+
 /**
  * tb_switch_is_usb4() - Is the switch USB4 compliant
  * @sw: Switch to check
@@ -798,7 +805,8 @@ static inline bool tb_switch_is_tiger_lake(const struct tb_switch *sw)
  */
 static inline bool tb_switch_is_usb4(const struct tb_switch *sw)
 {
-	return sw->config.thunderbolt_version == USB4_VERSION_1_0;
+	return sw->config.thunderbolt_version == USB4_VERSION_1_0 ||
+	       tb_switch_is_tiger_lake_astep(sw);
 }
 
 /**
diff --git a/drivers/thunderbolt/usb4.c b/drivers/thunderbolt/usb4.c
index c1f6e044811b..f3c91ddbeb37 100644
--- a/drivers/thunderbolt/usb4.c
+++ b/drivers/thunderbolt/usb4.c
@@ -1436,6 +1436,10 @@ int usb4_usb3_port_max_link_rate(struct tb_port *port)
 	if (!tb_port_is_usb3_down(port) && !tb_port_is_usb3_up(port))
 		return -EINVAL;
 
+	/* TGL A step does not have this register implemented so hard-code 10G */
+	if (tb_switch_is_tiger_lake_astep(port->sw))
+		return 10000;
+
 	ret = tb_port_read(port, &val, TB_CFG_PORT,
 			   port->cap_adap + ADP_USB3_CS_4, 1);
 	if (ret)
@@ -1460,6 +1464,10 @@ int usb4_usb3_port_actual_link_rate(struct tb_port *port)
 	if (!tb_port_is_usb3_down(port) && !tb_port_is_usb3_up(port))
 		return -EINVAL;
 
+	/* TGL A step does not have this register implemented so hard-code 10G */
+	if (tb_switch_is_tiger_lake_astep(port->sw))
+		return 10000;
+
 	ret = tb_port_read(port, &val, TB_CFG_PORT,
 			   port->cap_adap + ADP_USB3_CS_4, 1);
 	if (ret)
@@ -1607,10 +1615,20 @@ static int usb4_usb3_port_read_consumed_bandwidth(struct tb_port *port,
 	scale &= ADP_USB3_CS_3_SCALE_MASK;
 
 	bw = val & ADP_USB3_CS_1_CUBW_MASK;
-	*upstream_bw = usb3_bw_to_mbps(bw, scale);
+	/*
+	 * TGL A step has a bug that prevents reporting consumed
+	 * bandwidth so hardcode 1 Gb/s here.
+	 */
+	if (!bw && tb_switch_is_tiger_lake_astep(port->sw))
+		*upstream_bw = 1000;
+	else
+		*upstream_bw = usb3_bw_to_mbps(bw, scale);
 
 	bw = (val & ADP_USB3_CS_1_CDBW_MASK) >> ADP_USB3_CS_1_CDBW_SHIFT;
-	*downstream_bw = usb3_bw_to_mbps(bw, scale);
+	if (!bw && tb_switch_is_tiger_lake_astep(port->sw))
+		*downstream_bw = 1000;
+	else
+		*downstream_bw = usb3_bw_to_mbps(bw, scale);
 
 	return 0;
 }
-- 
2.27.0

