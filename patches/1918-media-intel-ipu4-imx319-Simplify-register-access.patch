From 004597614e0b76c655394c947c3c38f37375bcce Mon Sep 17 00:00:00 2001
From: Tianshu Qiu <tian.shu.qiu@intel.com>
Date: Wed, 16 May 2018 11:12:11 +0800
Subject: [PATCH 1918/2328] media: intel-ipu4: imx319: Simplify register access

Message for Open Source:
Simplify register access

Message for Internal:
[Issue/Feature] Sensor i2c control
[Root Cause/Changes] Simplify register access

Change-Id: I952f1fbeba7326c446a09b36ee5ba04b77046f87
Signed-off-by: Tianshu Qiu <tian.shu.qiu@intel.com>
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 drivers/media/i2c/imx319.c | 43 +++++++++++++------------------------------
 1 file changed, 13 insertions(+), 30 deletions(-)

diff --git a/drivers/media/i2c/imx319.c b/drivers/media/i2c/imx319.c
index bb6c086..05740d4 100644
--- a/drivers/media/i2c/imx319.c
+++ b/drivers/media/i2c/imx319.c
@@ -1,6 +1,7 @@
 // SPDX-License_Identifier: GPL-2.0
 // Copyright (C) 2018 Intel Corporation
 
+#include <asm/unaligned.h>
 #include <linux/acpi.h>
 #include <linux/i2c.h>
 #include <linux/module.h>
@@ -9,7 +10,6 @@
 #include <media/v4l2-device.h>
 #include <media/v4l2-event.h>
 
-
 #define IMX319_REG_MODE_SELECT		0x0100
 #define IMX319_MODE_STANDBY		0x00
 #define IMX319_MODE_STREAMING		0x01
@@ -1755,32 +1755,31 @@ static int imx319_read_reg(struct imx319 *imx319, u16 reg, u32 len, u32 *val)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(&imx319->sd);
 	struct i2c_msg msgs[2];
-	u8 *data_be_p;
+	u8 addr_buf[2];
+	u8 data_buf[4] = { 0 };
 	int ret;
-	u32 data_be = 0;
-	u16 reg_addr_be = cpu_to_be16(reg);
 
 	if (len > 4)
 		return -EINVAL;
 
-	data_be_p = (u8 *)&data_be;
+	put_unaligned_be16(reg, addr_buf);
 	/* Write register address */
 	msgs[0].addr = client->addr;
 	msgs[0].flags = 0;
-	msgs[0].len = 2;
-	msgs[0].buf = (u8 *)&reg_addr_be;
+	msgs[0].len = ARRAY_SIZE(addr_buf);
+	msgs[0].buf = addr_buf;
 
 	/* Read data from register */
 	msgs[1].addr = client->addr;
 	msgs[1].flags = I2C_M_RD;
 	msgs[1].len = len;
-	msgs[1].buf = &data_be_p[4 - len];
+	msgs[1].buf = &data_buf[4 - len];
 
 	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
 	if (ret != ARRAY_SIZE(msgs))
 		return -EIO;
 
-	*val = be32_to_cpu(data_be);
+	*val = get_unaligned_be32(data_buf);
 
 	return 0;
 }
@@ -1789,23 +1788,13 @@ static int imx319_read_reg(struct imx319 *imx319, u16 reg, u32 len, u32 *val)
 static int imx319_write_reg(struct imx319 *imx319, u16 reg, u32 len, u32 val)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(&imx319->sd);
-	int buf_i, val_i;
-	u8 buf[6], *val_p;
+	u8 buf[6];
 
 	if (len > 4)
 		return -EINVAL;
 
-	buf[0] = reg >> 8;
-	buf[1] = reg & 0xff;
-
-	val = cpu_to_be32(val);
-	val_p = (u8 *)&val;
-	buf_i = 2;
-	val_i = 4 - len;
-
-	while (val_i < 4)
-		buf[buf_i++] = val_p[val_i++];
-
+	put_unaligned_be16(reg, buf);
+	put_unaligned_be32(val << (8 * (4 - len)), buf + 2);
 	if (i2c_master_send(client, buf, len + 2) != len + 2)
 		return -EIO;
 
@@ -1836,12 +1825,6 @@ static int imx319_write_regs(struct imx319 *imx319,
 	return 0;
 }
 
-static int imx319_write_reg_list(struct imx319 *imx319,
-				  const struct imx319_reg_list *r_list)
-{
-	return imx319_write_regs(imx319, r_list->regs, r_list->num_of_regs);
-}
-
 /* Open sub-device */
 static int imx319_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 {
@@ -2121,7 +2104,7 @@ static int imx319_start_streaming(struct imx319 *imx319)
 
 	/* Global Setting */
 	reg_list = &imx319_global_setting;
-	ret = imx319_write_reg_list(imx319, reg_list);
+	ret = imx319_write_regs(imx319, reg_list->regs, reg_list->num_of_regs);
 	if (ret) {
 		dev_err(&client->dev, "%s failed to set global settings\n",
 			__func__);
@@ -2130,7 +2113,7 @@ static int imx319_start_streaming(struct imx319 *imx319)
 
 	/* Apply default values of current mode */
 	reg_list = &imx319->cur_mode->reg_list;
-	ret = imx319_write_reg_list(imx319, reg_list);
+	ret = imx319_write_regs(imx319, reg_list->regs, reg_list->num_of_regs);
 	if (ret) {
 		dev_err(&client->dev, "%s failed to set mode\n", __func__);
 		return ret;
-- 
2.7.4

