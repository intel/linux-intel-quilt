From eaf02decd825cc3735367d5a92f686d60208f0c0 Mon Sep 17 00:00:00 2001
From: wu xia <xia.wu@intel.com>
Date: Mon, 19 Sep 2016 18:38:18 +0300
Subject: [PATCH 1440/2345] v4l: subdev: compat: Implement
 VIDIOC_SUBDEV_[GS]_ROUTING

Implement compat IOCTL handling for
VIDIOC_SUBDEV_G_ROUTING and
VIDIOC_SUBDEV_S_ROUTING IOCTLs.

Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
Signed-off-by: Jouni Ukkonen <jouni.ukkonen@intel.com>
Signed-off-by: Samu Onkalo <samu.onkalo@intel.com>
Signed-off-by: wu xia <xia.wu@intel.com>
---
 drivers/media/v4l2-core/v4l2-compat-ioctl32.c | 66 +++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/drivers/media/v4l2-core/v4l2-compat-ioctl32.c b/drivers/media/v4l2-core/v4l2-compat-ioctl32.c
index cb15cbf..27b69f4 100644
--- a/drivers/media/v4l2-core/v4l2-compat-ioctl32.c
+++ b/drivers/media/v4l2-core/v4l2-compat-ioctl32.c
@@ -942,6 +942,54 @@ static int put_v4l2_event32(struct v4l2_event __user *kp,
 	return 0;
 }
 
+struct v4l2_subdev_routing32 {
+	compat_caddr_t routes;
+	__u32 num_routes;
+	__u32 reserved[5];
+};
+
+static int get_v4l2_subdev_routing(struct v4l2_subdev_routing *kp,
+				   struct v4l2_subdev_routing32 __user *up)
+{
+	compat_caddr_t p;
+
+	if (!access_ok(VERIFY_READ, up, sizeof(*up)) ||
+	    get_user(p, &up->routes) ||
+	    get_user(kp->num_routes, &up->num_routes) ||
+	    !access_ok(VERIFY_READ, up->reserved, sizeof(*up->reserved)) ||
+	    kp->num_routes > U32_MAX / sizeof(*kp->routes))
+		return -EFAULT;
+
+	kp->routes = compat_ptr(p);
+
+	if (!access_ok(VERIFY_READ, kp->routes,
+		       kp->num_routes * (u32)sizeof(*kp->routes)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int put_v4l2_subdev_routing(struct v4l2_subdev_routing *kp,
+				   struct v4l2_subdev_routing32 __user *up)
+{
+	struct v4l2_subdev_route __user *uroutes;
+	compat_caddr_t p;
+
+	if (!access_ok(VERIFY_WRITE, up, sizeof(*up)) ||
+	    get_user(p, &up->routes) ||
+	    put_user(kp->num_routes, &up->num_routes) ||
+	    !access_ok(VERIFY_WRITE, up->reserved, sizeof(*up->reserved)))
+		return -EFAULT;
+
+	uroutes = compat_ptr(p);
+
+	if (!access_ok(VERIFY_WRITE, uroutes,
+		       kp->num_routes * sizeof(*kp->routes)))
+		return -EFAULT;
+
+	return 0;
+}
+
 struct v4l2_edid32 {
 	__u32 pad;
 	__u32 start_block;
@@ -1007,6 +1055,8 @@ static int put_v4l2_edid32(struct v4l2_edid __user *kp,
 #define VIDIOC_STREAMOFF32	_IOW ('V', 19, s32)
 #define VIDIOC_G_INPUT32	_IOR ('V', 38, s32)
 #define VIDIOC_S_INPUT32	_IOWR('V', 39, s32)
+#define VIDIOC_SUBDEV_G_ROUTING32 _IOWR('V', 38, struct v4l2_subdev_routing32)
+#define VIDIOC_SUBDEV_S_ROUTING32 _IOWR('V', 39, struct v4l2_subdev_routing32)
 #define VIDIOC_G_OUTPUT32	_IOR ('V', 46, s32)
 #define VIDIOC_S_OUTPUT32	_IOWR('V', 47, s32)
 
@@ -1051,6 +1101,8 @@ static long do_video_ioctl(struct file *file, unsigned int cmd, unsigned long ar
 	case VIDIOC_STREAMOFF32: cmd = VIDIOC_STREAMOFF; break;
 	case VIDIOC_G_INPUT32: cmd = VIDIOC_G_INPUT; break;
 	case VIDIOC_S_INPUT32: cmd = VIDIOC_S_INPUT; break;
+	case VIDIOC_SUBDEV_G_ROUTING32: cmd = VIDIOC_SUBDEV_G_ROUTING; break;
+	case VIDIOC_SUBDEV_S_ROUTING32: cmd = VIDIOC_SUBDEV_S_ROUTING; break;
 	case VIDIOC_G_OUTPUT32: cmd = VIDIOC_G_OUTPUT; break;
 	case VIDIOC_S_OUTPUT32: cmd = VIDIOC_S_OUTPUT; break;
 	case VIDIOC_CREATE_BUFS32: cmd = VIDIOC_CREATE_BUFS; break;
@@ -1078,6 +1130,14 @@ static long do_video_ioctl(struct file *file, unsigned int cmd, unsigned long ar
 		compatible_arg = 0;
 		break;
 
+	case VIDIOC_SUBDEV_G_ROUTING:
+	case VIDIOC_SUBDEV_S_ROUTING:
+		err = alloc_userspace(sizeof(struct v4l2_subdev_routing), 0, &up_native);
+                if (!err)
+                        err = get_v4l2_subdev_routing(up_native, up);
+		compatible_arg = 0;
+		break;
+
 	case VIDIOC_G_EDID:
 	case VIDIOC_S_EDID:
 		err = alloc_userspace(sizeof(struct v4l2_edid), 0, &up_native);
@@ -1205,6 +1265,12 @@ static long do_video_ioctl(struct file *file, unsigned int cmd, unsigned long ar
 		if (put_v4l2_edid32(up_native, up))
 			err = -EFAULT;
 		break;
+	case VIDIOC_SUBDEV_G_ROUTING:
+	case VIDIOC_SUBDEV_S_ROUTING:
+		err = alloc_userspace(sizeof(struct v4l2_subdev_routing), 0, &up_native);
+                if (!err)
+                        err = put_v4l2_subdev_routing(up_native, up);
+		break;
 	}
 	if (err)
 		return err;
-- 
2.7.4

