From a522636df11d6ee270ae0a3cc3f3a53bf8aff3e2 Mon Sep 17 00:00:00 2001
From: Weifeng Voon <weifeng.voon@intel.com>
Date: Fri, 8 Mar 2019 22:52:58 +0800
Subject: [PATCH 25/26] net: stmmac: change the intr status check logic

This change is to accommodate interrupt mode(INTM) MODE1.
As the NIS status bit is not asserted for any RI/TI events.

Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_lib.c  | 106 +++++++++---------
 1 file changed, 53 insertions(+), 53 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
index 2cce2d140d4b..a2009a8dd060 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
@@ -153,82 +153,82 @@ int dwmac4_dma_interrupt(void __iomem *ioaddr,
 		}
 	}
 	/* TX/RX NORMAL interrupts */
-	if (likely(intr_status & DMA_CHAN_STATUS_NIS)) {
+	if (likely(intr_status & DMA_CHAN_STATUS_NIS))
 		x->normal_irq_n++;
-		if (likely(intr_status & DMA_CHAN_STATUS_RI)) {
-			u32 value;
-
-			value = readl(ioaddr + DMA_CHAN_INTR_ENA(chan));
-			/* to schedule NAPI on real RIE event. */
-			if (likely(value & DMA_CHAN_INTR_ENA_RIE)) {
-				x->rx_normal_irq_n++;
-				switch (chan) {
-				case 0x0:
-					x->q0_rx_irq_n++;
-					break;
-				case 0x1:
-					x->q1_rx_irq_n++;
-					break;
-				case 0x2:
-					x->q2_rx_irq_n++;
-					break;
-				case 0x3:
-					x->q3_rx_irq_n++;
-					break;
-				case 0x4:
-					x->q4_rx_irq_n++;
-					break;
-				case 0x5:
-					x->q5_rx_irq_n++;
-					break;
-				case 0x6:
-					x->q6_rx_irq_n++;
-					break;
-				case 0x7:
-					x->q7_rx_irq_n++;
-					break;
-				default:
-					break;
-				}
-				ret |= handle_rx;
-			}
-		}
-		if (likely(intr_status & (DMA_CHAN_STATUS_TI |
-					  DMA_CHAN_STATUS_TBU))) {
-			x->tx_normal_irq_n++;
+
+	if (likely(intr_status & DMA_CHAN_STATUS_RI)) {
+		u32 value;
+
+		value = readl(ioaddr + DMA_CHAN_INTR_ENA(chan));
+		/* to schedule NAPI on real RIE event. */
+		if (likely(value & DMA_CHAN_INTR_ENA_RIE)) {
+			x->rx_normal_irq_n++;
 			switch (chan) {
 			case 0x0:
-				x->q0_tx_irq_n++;
+				x->q0_rx_irq_n++;
 				break;
 			case 0x1:
-				x->q1_tx_irq_n++;
+				x->q1_rx_irq_n++;
 				break;
 			case 0x2:
-				x->q2_tx_irq_n++;
+				x->q2_rx_irq_n++;
 				break;
 			case 0x3:
-				x->q3_tx_irq_n++;
+				x->q3_rx_irq_n++;
 				break;
 			case 0x4:
-				x->q4_tx_irq_n++;
+				x->q4_rx_irq_n++;
 				break;
 			case 0x5:
-				x->q5_tx_irq_n++;
+				x->q5_rx_irq_n++;
 				break;
 			case 0x6:
-				x->q6_tx_irq_n++;
+				x->q6_rx_irq_n++;
 				break;
 			case 0x7:
-				x->q7_tx_irq_n++;
+				x->q7_rx_irq_n++;
 				break;
 			default:
 				break;
 			}
-			ret |= handle_tx;
+			ret |= handle_rx;
+		}
+	}
+	if (likely(intr_status & (DMA_CHAN_STATUS_TI |
+				  DMA_CHAN_STATUS_TBU))) {
+		x->tx_normal_irq_n++;
+		switch (chan) {
+		case 0x0:
+			x->q0_tx_irq_n++;
+			break;
+		case 0x1:
+			x->q1_tx_irq_n++;
+			break;
+		case 0x2:
+			x->q2_tx_irq_n++;
+			break;
+		case 0x3:
+			x->q3_tx_irq_n++;
+			break;
+		case 0x4:
+			x->q4_tx_irq_n++;
+			break;
+		case 0x5:
+			x->q5_tx_irq_n++;
+			break;
+		case 0x6:
+			x->q6_tx_irq_n++;
+			break;
+		case 0x7:
+			x->q7_tx_irq_n++;
+			break;
+		default:
+			break;
 		}
-		if (unlikely(intr_status & DMA_CHAN_STATUS_ERI))
-			x->rx_early_irq++;
+		ret |= handle_tx;
 	}
+	if (unlikely(intr_status & DMA_CHAN_STATUS_ERI))
+		x->rx_early_irq++;
 
 	writel(intr_status & intr_en, ioaddr + DMA_CHAN_STATUS(chan));
 	return ret;
-- 
2.17.1

