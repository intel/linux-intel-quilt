From df5a6f8d500134b20d8253cb50b206a8fb42d746 Mon Sep 17 00:00:00 2001
From: "Panwar, Ashish" <ashish.panwar@intel.com>
Date: Wed, 20 Jan 2016 19:19:21 +0530
Subject: [PATCH 078/292] ASoC: Intel: Skylake: Handler for firmware log buffer
 status notification

We copy half of the firmware log buffer on this notification. We
figure which half of trace buffer to copy based on the write pointer.

Change-Id: I32d8f47b5eaed3d35b4d2a0761bf4878f0c14d97
Signed-off-by: Panwar, Ashish <ashish.panwar@intel.com>
Reviewed-on:
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>

ASoC: Intel: Skylake: Update FW Trace logs feature to new interface

FW trace logs feature has been changed according to a new
implementation from the firmware.
1. Core Mask has been updated to support 4 cores
2. Read and Write pointers of the trace buffer are moved to the
   base of the Trace window of the FW
This patch contains the related driver changes

ASoC: Intel: Skylake: Fix FW logging data corruption

As per the new logging scheme introduced in latest firmware,
the log buffer read/write pointers are located at the base
of the log buffer for each core. Hence, while reading log data
during buffer wrap around, the data count needs to be decremented
to skip these pointers. This patch fixes the issue.
---
 sound/soc/intel/skylake/skl-sst-ipc.c | 46 ++++++++++++++++++++++++++-
 1 file changed, 45 insertions(+), 1 deletion(-)

diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 9f3ce73593ae..c7a67b0f5606 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -19,9 +19,9 @@
 #include "skl.h"
 #include "skl-sst-dsp.h"
 #include "skl-sst-ipc.h"
+#include "skl-fwlog.h"
 #include "sound/hdaudio_ext.h"
 
-
 #define IPC_IXC_STATUS_BITS		24
 
 /* Global Message - Generic */
@@ -53,6 +53,10 @@
 #define IPC_MSG_DIR(x)			(((x) & IPC_MSG_DIR_MASK) \
 					<< IPC_MSG_DIR_SHIFT)
 /* Global Notification Message */
+#define IPC_GLB_NOTIFY_CORE_SHIFT	12
+#define IPC_GLB_NOTIFY_CORE_MASK	0xF
+#define IPC_GLB_NOTIFY_CORE_ID(x)	(((x) >> IPC_GLB_NOTIFY_CORE_SHIFT) \
+					& IPC_GLB_NOTIFY_CORE_MASK)
 #define IPC_GLB_NOTIFY_TYPE_SHIFT	16
 #define IPC_GLB_NOTIFY_TYPE_MASK	0xFF
 #define IPC_GLB_NOTIFY_TYPE(x)		(((x) >> IPC_GLB_NOTIFY_TYPE_SHIFT) \
@@ -349,6 +353,42 @@ static struct ipc_message *skl_ipc_reply_get_msg(struct sst_generic_ipc *ipc,
 
 }
 
+static void
+skl_process_log_buffer(struct sst_dsp *sst, struct skl_ipc_header header)
+{
+	int core, size;
+	u32 *ptr;
+	u8 __iomem *base;
+	u32 write, read;
+
+	core = IPC_GLB_NOTIFY_CORE_ID(header.primary);
+	if (!(BIT(core) & sst->trace_wind.flags)) {
+		dev_err(sst->dev, "Logging is disabled on dsp %d\n", core);
+		return;
+	}
+	skl_dsp_get_log_buff(sst, core);
+	size = sst->trace_wind.size/sst->trace_wind.nr_dsp;
+	base = (u8 __iomem *)sst->trace_wind.addr;
+	/* move to the source dsp tracing window */
+	base += (core * size);
+	ptr = (u32 *) base;
+	read = ptr[0];
+	write = ptr[1];
+	if (write > read) {
+		skl_dsp_write_log(sst, (base + 8 + read),
+					core, (write - read));
+		/* read pointer */
+		ptr[0] += write - read;
+	} else {
+		skl_dsp_write_log(sst, (base + 8 + read),
+					core, size - 8 - read);
+		skl_dsp_write_log(sst, (base + 8),
+					core, write);
+		ptr[0] = write;
+	}
+	skl_dsp_put_log_buff(sst, core);
+}
+
 int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 		struct skl_ipc_header header)
 {
@@ -371,6 +411,10 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 			wake_up(&skl->boot_wait);
 			break;
 
+		case IPC_GLB_NOTIFY_LOG_BUFFER_STATUS:
+			skl_process_log_buffer(skl->dsp, header);
+			break;
+
 		case IPC_GLB_NOTIFY_PHRASE_DETECTED:
 			dev_dbg(ipc->dev, "***** Phrase Detected **********\n");
 
-- 
2.21.0

