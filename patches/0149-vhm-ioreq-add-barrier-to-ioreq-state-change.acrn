From 3c82221f9d0aaf2312022c2dbaa62fbc3ad5b831 Mon Sep 17 00:00:00 2001
From: Yin Fengwei <fengwei.yin@intel.com>
Date: Thu, 5 Sep 2019 07:30:10 +0800
Subject: [PATCH 149/150] vhm: ioreq: add barrier to ioreq state change

According to Linux kernel doc Documentation/atomic_t.txt, atomic
None-RMW APIs (atomic_set/read) doesn't make sure memory operation
order.

In our ioreq state update code, there is order requirement because
we use ioreq state as flag to decide the further operation to ioreq
on differnt core. We use atomic_set_release instead of atomic_set
base on this.

Another change is reset the client id related with ioreq after the
ioreq processing is complete.

Signed-off-by: Min He <min.he@intel.com>
Signed-off-by: Yin Fengwei <fengwei.yin@intel.com>
---
 drivers/vhm/vhm_ioreq.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/drivers/vhm/vhm_ioreq.c b/drivers/vhm/vhm_ioreq.c
index b853df8c3765..afead7f94732 100644
--- a/drivers/vhm/vhm_ioreq.c
+++ b/drivers/vhm/vhm_ioreq.c
@@ -743,8 +743,8 @@ static int ioreq_complete_request(unsigned long vmid, int vcpu,
 	bool polling_mode;
 
 	polling_mode = vhm_req->completion_polling;
-	smp_mb();
-	atomic_set(&vhm_req->processed, REQ_STATE_COMPLETE);
+	vhm_req->client = -1;
+	atomic_set_release(&vhm_req->processed, REQ_STATE_COMPLETE);
 	/*
 	 * In polling mode, HV will poll ioreqs' completion.
 	 * Once marked the ioreq as REQ_STATE_COMPLETE, hypervisor side
@@ -982,7 +982,8 @@ int acrn_ioreq_distribute_request(struct vhm_vm *vm)
 				return -EINVAL;
 			} else {
 				req->client = client->id;
-				atomic_set(&req->processed, REQ_STATE_PROCESSING);
+				atomic_set_release(&req->processed,
+						REQ_STATE_PROCESSING);
 				set_bit(i, client->ioreqs_map);
 				acrn_ioreq_put_client(client);
 			}
-- 
2.17.1

