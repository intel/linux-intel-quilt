From de9caa09b04c96ae01e805af60156def8ed57536 Mon Sep 17 00:00:00 2001
From: Pankaj Bharadiya <pankaj.laxminarayan.bharadiya@intel.com>
Date: Tue, 19 Dec 2017 15:45:28 +0530
Subject: [PATCH 0853/2328] Revert "ASoC: Intel: Skylake: Create SSP BE dais
 dynamically"

This reverts commit daac6549d8c1f404e2e3093dc13675a2cefc7e82.

SSP5 BE DAI is not getting populated from NHLT hence revert this
patch for now.

Change-Id: I2392692252ed1f5aea744bc88f930e7ed4c09984
Signed-off-by: Pankaj Bharadiya <pankaj.laxminarayan.bharadiya@intel.com>
---
 sound/soc/intel/skylake/skl-nhlt.c |  36 --------
 sound/soc/intel/skylake/skl-pcm.c  | 177 +++++++++++++++++++++++++------------
 sound/soc/intel/skylake/skl.h      |   1 -
 3 files changed, 120 insertions(+), 94 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-nhlt.c b/sound/soc/intel/skylake/skl-nhlt.c
index ac09ad9..99a8bc0 100644
--- a/sound/soc/intel/skylake/skl-nhlt.c
+++ b/sound/soc/intel/skylake/skl-nhlt.c
@@ -308,39 +308,3 @@ void skl_nhlt_remove_sysfs(struct skl *skl)
 
 	sysfs_remove_file(&dev->kobj, &dev_attr_platform_id.attr);
 }
-
-static bool is_vbus_id_exist(struct skl *skl, int vbus_id)
-{
-	bool ret = false;
-	int i;
-
-	for (i = 0; i < skl->nhlt->endpoint_count; i++) {
-		if (vbus_id == skl->grp_cnt.vbus_id[i])
-			return true;
-	}
-	return ret;
-}
-
-/*
- * This function gets endpoint count and vbus_id for the specific link type
- *  passed as parameter.
- */
-void skl_nhlt_get_ep_cnt(struct skl *skl, int link_type)
-{
-	struct nhlt_endpoint *epnt = (struct nhlt_endpoint *) skl->nhlt->desc;
-	int i;
-
-	skl->grp_cnt.cnt = 0;
-	memset(skl->grp_cnt.vbus_id, 0xff,
-		(sizeof(int) * skl->nhlt->endpoint_count));
-
-	for (i = 0; i < skl->nhlt->endpoint_count; i++) {
-
-		if (epnt->linktype == link_type) {
-			if (!is_vbus_id_exist(skl, epnt->virtual_bus_id))
-				skl->grp_cnt.vbus_id[skl->grp_cnt.cnt++] =
-						epnt->virtual_bus_id;
-		}
-		epnt = (struct nhlt_endpoint *)((u8 *)epnt + epnt->length);
-	}
-}
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index c02f899..2f51d6c 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1108,6 +1108,126 @@ static struct snd_soc_dai_driver skl_fe_dai[] = {
 /* BE cpu dais and compress dais*/
 static struct snd_soc_dai_driver skl_platform_dai[] = {
 {
+	.name = "SSP0 Pin",
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.stream_name = "ssp0 Tx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.stream_name = "ssp0 Rx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+},
+{
+	.name = "SSP1 Pin",
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.stream_name = "ssp1 Tx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.stream_name = "ssp1 Rx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+},
+{
+	.name = "SSP2 Pin",
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.stream_name = "ssp2 Tx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.stream_name = "ssp2 Rx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+},
+{
+	.name = "SSP3 Pin",
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.stream_name = "ssp3 Tx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.stream_name = "ssp3 Rx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+},
+{
+	.name = "SSP4 Pin",
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.stream_name = "ssp4 Tx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.stream_name = "ssp4 Rx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+},
+{
+	.name = "SSP5 Pin",
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.stream_name = "ssp5 Tx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.stream_name = "ssp5 Rx",
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S32_LE,
+	},
+},
+{
 	.name = "iDisp1 Pin",
 	.ops = &skl_link_dai_ops,
 	.playback = {
@@ -1882,24 +2002,6 @@ static const struct snd_soc_component_driver skl_component = {
 	.num_controls	= ARRAY_SIZE(skl_controls),
 };
 
-static struct snd_soc_dai_driver ssp_dai_info = {
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			   SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			   SNDRV_PCM_FMTBIT_S32_LE,
-	},
-};
-
 /*
  * mod param to decide during platform registration whether
  * if FE dai and FE dai links will come from topology or not.
@@ -1916,18 +2018,10 @@ int skl_platform_register(struct device *dev)
 	int skl_num_fe_dai = ARRAY_SIZE(skl_fe_dai);
 	int skl_num_dai = ARRAY_SIZE(skl_platform_dai);
 	struct snd_soc_dai_driver *skl_dais;
-	int i, index;
 
 	INIT_LIST_HEAD(&skl->ppl_list);
 	INIT_LIST_HEAD(&skl->bind_list);
 
-	skl->grp_cnt.vbus_id = devm_kcalloc(dev, skl->nhlt->endpoint_count,
-						sizeof(int), GFP_KERNEL);
-	if (!skl->grp_cnt.vbus_id)
-		return -ENOMEM;
-
-	skl_nhlt_get_ep_cnt(skl, NHLT_LINK_SSP);
-
 	ret = snd_soc_register_platform(dev, &skl_platform_drv);
 	if (ret) {
 		dev_err(dev, "soc platform registration failed %d\n", ret);
@@ -1936,9 +2030,6 @@ int skl_platform_register(struct device *dev)
 
 	skl_total_dai = (dynamic_dai ? skl_num_dai : skl_num_fe_dai +
 			 skl_num_dai);
-
-	skl_total_dai += skl->grp_cnt.cnt;
-
 	skl_dais = devm_kcalloc(dev, skl_total_dai, sizeof(*skl_dais),
 				GFP_KERNEL);
 	if (!skl_dais) {
@@ -1948,34 +2039,6 @@ int skl_platform_register(struct device *dev)
 
 	memcpy(skl_dais, skl_platform_dai, sizeof(skl_platform_dai));
 
-	for (i = 0; i < skl->grp_cnt.cnt; i++) {
-		index = skl_num_dai + i;
-
-		memcpy(&skl_dais[index], &ssp_dai_info, sizeof(ssp_dai_info));
-
-		skl_dais[index].name = kasprintf(GFP_KERNEL, "SSP%d Pin",
-				skl->grp_cnt.vbus_id[i]);
-		if (!skl_dais[index].name)
-			return -ENOMEM;
-
-		skl_dais[index].playback.stream_name = kasprintf(GFP_KERNEL,
-				"ssp%d Tx", skl->grp_cnt.vbus_id[i]);
-		if (!skl_dais[index].playback.stream_name) {
-			kfree(skl_dais[index].name);
-			return -ENOMEM;
-		}
-
-		skl_dais[index].capture.stream_name = kasprintf(GFP_KERNEL,
-				"ssp%d Rx", skl->grp_cnt.vbus_id[i]);
-		if (!skl_dais[index].capture.stream_name) {
-			kfree(skl_dais[index].name);
-			kfree(skl_dais[index].playback.stream_name);
-			return -ENOMEM;
-		}
-	}
-
-	skl_num_dai +=  skl->grp_cnt.cnt;
-
 	if (!dynamic_dai)
 		memcpy(&skl_dais[skl_num_dai], skl_fe_dai,
 						sizeof(skl_fe_dai));
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 5fa63d5..4278b34 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -170,7 +170,6 @@ int skl_platform_unregister(struct device *dev);
 int skl_platform_register(struct device *dev);
 
 int skl_get_nhlt_version(struct device *dev);
-void skl_nhlt_get_ep_cnt(struct skl *skl, int link_type);
 struct nhlt_acpi_table *skl_nhlt_init(struct device *dev);
 void skl_nhlt_free(struct nhlt_acpi_table *addr);
 struct nhlt_specific_cfg *skl_get_ep_blob(struct skl *skl, u32 instance,
-- 
2.7.4

