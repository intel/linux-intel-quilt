From c3792f771546d87eb6e5a3e7aadfd8f55bc8a853 Mon Sep 17 00:00:00 2001
From: Cezary Rojewski <cezary.rojewski@intel.com>
Date: Wed, 6 Mar 2019 21:26:46 +0100
Subject: [PATCH 044/154] ASoC: Intel: Skylake: Define strsplit_u32 input
 parsing helper

SKL provides functionality for interacting with DSP over debugfs. To
improve and streamline input to payload parsing, strsplit_u32 helper
method has been defined. Said method tokenizes specified input given the
delimiters into sequence of DWORDs for further handling.

Change-Id: I5abc1c2faaa56430c21998bb27a2cff05ffca2cd
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c | 55 +++++++++++++++++++++++++++++
 1 file changed, 55 insertions(+)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 00bc44085901..139189a1e2b5 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -28,6 +28,61 @@ struct skl_debug {
 	u8 fw_read_buff[FW_REG_BUF];
 };
 
+/**
+ * strsplit_u32 - Split string into sequence of u32 tokens
+ * @buf:	String to split into tokens.
+ * @delim:	String containing delimiter characters.
+ * @tkns:	Returned u32 sequence pointer.
+ * @num_tkns:	Returned number of tokens obtained.
+ */
+static int
+strsplit_u32(char **buf, const char *delim, u32 **tkns, size_t *num_tkns)
+{
+	char *s;
+	u32 *data, *tmp;
+	size_t count = 0;
+	size_t max_count = 32;
+	int ret = 0;
+
+	*tkns = NULL;
+	*num_tkns = 0;
+	data = kcalloc(max_count, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	while ((s = strsep(buf, delim)) != NULL) {
+		ret = kstrtouint(s, 0, (data + count));
+		if (ret)
+			goto exit;
+		if (++count >= max_count) {
+			max_count *= 2;
+			tmp = kcalloc(max_count, sizeof(*data), GFP_KERNEL);
+			if (!tmp) {
+				ret = -ENOMEM;
+				goto exit;
+			}
+
+			memcpy(tmp, data, count * sizeof(*data));
+			kfree(data);
+			data = tmp;
+		}
+	}
+
+	if (!count)
+		goto exit;
+	*tkns = kcalloc(count, sizeof(*data), GFP_KERNEL);
+	if (*tkns == NULL) {
+		ret = -ENOMEM;
+		goto exit;
+	}
+	memcpy(*tkns, data, count * sizeof(*data));
+	*num_tkns = count;
+
+exit:
+	kfree(data);
+	return ret;
+}
+
 static ssize_t skl_print_pins(struct skl_module_pin *m_pin, char *buf,
 				int max_pin, ssize_t size, bool direction)
 {
-- 
2.17.1

