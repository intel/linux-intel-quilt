From 80dfcea4a02c6fe6b0b7dee89b1db20c14c7bf9d Mon Sep 17 00:00:00 2001
From: Chang Ying <ying.chang@intel.com>
Date: Thu, 23 Mar 2017 04:24:07 +0800
Subject: [PATCH 0904/2328] drm/i915/gvt: add cmd parser and mmio handler for
 BXT

Change-Id: I7d19bc90ef25ff1b354880a9ce0f768a9be6aaf5
Signed-off-by: Chang Ying <ying.chang@intel.com>
Reviewed-by: He, Min <min.he@intel.com>
Reviewed-by: Jiang, Fei <fei.jiang@intel.com>
Reviewed-by: Dong, Eddie <eddie.dong@intel.com>
Tested-by: Dong, Eddie <eddie.dong@intel.com>
---
 drivers/gpu/drm/i915/gvt/cmd_parser.c |  5 +++
 drivers/gpu/drm/i915/gvt/handlers.c   | 67 +++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/intel_gvt.c      |  2 ++
 3 files changed, 74 insertions(+)

diff --git a/drivers/gpu/drm/i915/gvt/cmd_parser.c b/drivers/gpu/drm/i915/gvt/cmd_parser.c
index 7a42c5a..e2c1b89 100644
--- a/drivers/gpu/drm/i915/gvt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/gvt/cmd_parser.c
@@ -173,6 +173,8 @@ struct decode_info {
 #define OP_MEDIA_GATEWAY_STATE                  OP_3D_MEDIA(0x2, 0x0, 0x3)
 #define OP_MEDIA_STATE_FLUSH                    OP_3D_MEDIA(0x2, 0x0, 0x4)
 
+#define OP_MEDIA_POOL_STATE                     OP_3D_MEDIA(0x2, 0x0, 0x5)
+
 #define OP_MEDIA_OBJECT                         OP_3D_MEDIA(0x2, 0x1, 0x0)
 #define OP_MEDIA_OBJECT_PRT                     OP_3D_MEDIA(0x2, 0x1, 0x2)
 #define OP_MEDIA_OBJECT_WALKER                  OP_3D_MEDIA(0x2, 0x1, 0x3)
@@ -2284,6 +2286,9 @@ static struct cmd_info cmd_info[] = {
 	{"GPGPU_WALKER", OP_GPGPU_WALKER, F_LEN_VAR, R_RCS, D_ALL,
 		0, 8, NULL},
 
+	{"MEDIA_POOL_STATE", OP_MEDIA_POOL_STATE, F_LEN_VAR, R_RCS, D_ALL, 0, 16,
+		NULL},
+
 	{"MEDIA_VFE_STATE", OP_MEDIA_VFE_STATE, F_LEN_VAR, R_RCS, D_ALL, 0, 16,
 		NULL},
 
diff --git a/drivers/gpu/drm/i915/gvt/handlers.c b/drivers/gpu/drm/i915/gvt/handlers.c
index d862d20..7fe36a3 100755
--- a/drivers/gpu/drm/i915/gvt/handlers.c
+++ b/drivers/gpu/drm/i915/gvt/handlers.c
@@ -3048,6 +3048,73 @@ static int init_bxt_mmio_info(struct intel_gvt *gvt)
 	MMIO_D(_PLANE_KEYMSK_1(PIPE_C), D_BXT);
 
 	MMIO_D(0x44500, D_BXT);
+
+	MMIO_D(GEN8_GTCR, D_SKL_PLUS);
+	MMIO_D(_MMIO(0x206c), D_SKL_PLUS);
+
+	MMIO_D(GEN7_SAMPLER_INSTDONE, D_SKL_PLUS);
+	MMIO_D(GEN7_ROW_INSTDONE, D_SKL_PLUS);
+	MMIO_D(GEN8_FAULT_TLB_DATA0, D_SKL_PLUS);
+	MMIO_D(GEN8_FAULT_TLB_DATA1, D_SKL_PLUS);
+	MMIO_D(ERROR_GEN6, D_SKL_PLUS);
+	MMIO_D(DONE_REG, D_SKL_PLUS);
+	MMIO_D(EIR, D_SKL_PLUS);
+	MMIO_D(_MMIO(0x2024), D_SKL_PLUS);
+	MMIO_D(_MMIO(0x4194), D_SKL_PLUS);
+	MMIO_D(_MMIO(0x4294), D_SKL_PLUS);
+	MMIO_D(_MMIO(0x4494), D_SKL_PLUS);
+
+	MMIO_RING_D(RING_PSMI_CTL, D_SKL_PLUS);
+	MMIO_RING_D(RING_DMA_FADD, D_SKL_PLUS);
+	MMIO_RING_D(RING_DMA_FADD_UDW, D_SKL_PLUS);
+	MMIO_RING_D(RING_IPEHR, D_SKL_PLUS);
+	MMIO_RING_D(RING_INSTPS, D_SKL_PLUS);
+	MMIO_RING_D(RING_BBADDR_UDW, D_SKL_PLUS);
+	MMIO_RING_D(RING_BBSTATE, D_SKL_PLUS);
+
+#define RING_REG(base) (base + 0x64)
+	MMIO_RING_D(RING_REG, D_SKL_PLUS);
+#undef RING_REG
+
+	MMIO_D(RING_INSTDONE(BLT_RING_BASE), D_SKL_PLUS);
+	MMIO_D(RING_INSTDONE(GEN6_BSD_RING_BASE), D_SKL_PLUS);
+	MMIO_D(RING_INSTDONE(VEBOX_RING_BASE), D_SKL_PLUS);
+
+	MMIO_D(PLANE_KEYMAX(PIPE_A, 0), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYMAX(PIPE_B, 0), D_SKL_PLUS);
+
+	MMIO_D(PLANE_KEYMAX(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_POS(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYVAL(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYMSK(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_OFFSET(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_SIZE(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_STRIDE(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYMAX(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_POS(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYVAL(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYMSK(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_OFFSET(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_SIZE(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_STRIDE(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYMAX(PIPE_C, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_POS(PIPE_C, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYVAL(PIPE_C, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_KEYMSK(PIPE_C, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_OFFSET(PIPE_C, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_SIZE(PIPE_C, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_STRIDE(PIPE_C, 2), D_SKL_PLUS);
+
+	MMIO_D(PLANE_CTL(PIPE_B, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_SURF(PIPE_A, 2), D_SKL_PLUS);
+	MMIO_D(PLANE_SURF(PIPE_B, 2), D_SKL_PLUS);
+
+	MMIO_D(_MMIO(0x162128), D_SKL_PLUS);
+	MMIO_D(GEN9_CSFE_CHICKEN1_RCS, D_SKL_PLUS);
+	MMIO_F(SOFT_SCRATCH(0), 16 * 4, 0, 0, 0, D_SKL_PLUS, NULL, NULL);
+	//TOOD:this line caused compiler error, comment it
+//	MMIO_D(HOST2GUC_INTERRUPT, D_SKL_PLUS);
+
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/i915/intel_gvt.c b/drivers/gpu/drm/i915/intel_gvt.c
index c17ed0e..52e35d8 100644
--- a/drivers/gpu/drm/i915/intel_gvt.c
+++ b/drivers/gpu/drm/i915/intel_gvt.c
@@ -47,6 +47,8 @@ static bool is_supported_device(struct drm_i915_private *dev_priv)
 		return true;
 	if (IS_KABYLAKE(dev_priv))
 		return true;
+	if (IS_BROXTON(dev_priv))
+		return true;
 	return false;
 }
 
-- 
2.7.4

