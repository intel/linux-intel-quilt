From 9eb739ac5d8d236bc0e5add50d0fea6ea5134655 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Amadeusz=20S=C5=82awi=C5=84ski?=
 <amadeuszx.slawinski@linux.intel.com>
Date: Wed, 28 Aug 2019 16:01:45 +0200
Subject: [PATCH 187/193] FIX_COMMIT_MESSAGE ASoC: Intel: Skylake: Refactor API
 for assigning private IDs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Driver assigns private IDs to modules on creation. Used IDs were encoded
by masking 128 bits (128 possible values) and we also kept back
reference to instance.

This results in unnecessary duplication of data, as we have bitfield and
table with assignments.

Take chance to refactor whole thing to simplify it into two dimensional
table, first index being which module we operate on and second being
private id. Table will be keeping instance id in it or -1 to mark unused
private id.

While we rewrite everything migrate to using information from Modules
Info IPC call.

Change-Id: Ic643351959b9470f0bb24917a9626d1d48956c95
Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Reviewed-on:
Reviewed-by: Rojewski, Cezary <cezary.rojewski@intel.com>
Tested-by: Rojewski, Cezary <cezary.rojewski@intel.com>
---
 sound/soc/intel/skylake/skl-sst.c      |   8 ++
 sound/soc/intel/skylake/skl-topology.c | 153 ++++++++++++-------------
 sound/soc/intel/skylake/skl-topology.h |   3 +
 sound/soc/intel/skylake/skl.h          |   1 +
 4 files changed, 85 insertions(+), 80 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-sst.c b/sound/soc/intel/skylake/skl-sst.c
index 5ff7311a1bf4..45fb4094f9be 100644
--- a/sound/soc/intel/skylake/skl-sst.c
+++ b/sound/soc/intel/skylake/skl-sst.c
@@ -18,6 +18,7 @@
 #include "../common/sst-dsp-priv.h"
 #include "../common/sst-ipc.h"
 #include "skl.h"
+#include "skl-topology.h"
 
 #define SKL_BASEFW_TIMEOUT	300
 #define SKL_INIT_TIMEOUT	1000
@@ -656,6 +657,12 @@ int skl_sst_init_fw(struct skl_dev *skl)
 		goto exit;
 	}
 
+	ret = skl_init_pvt_id(skl);
+	if (ret < 0) {
+		dev_err(dev, "Failed to init private IDs: %d\n", ret);
+		goto exit;
+	}
+
 	skl->is_first_boot = false;
 exit:
 	skl->ipc.ops.check_dsp_lp_on = lp_check;
@@ -676,6 +683,7 @@ void skl_sst_dsp_cleanup(struct skl_dev *skl)
 		release_firmware(pdata->fw);
 	skl_clear_module_table(dsp);
 
+	skl_free_pvt_id(skl);
 	kfree(skl->fw_modules_info);
 
 	list_del_init(&skl->module_list);
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 1859afbe06a7..67ea0fc0dac3 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -310,72 +310,62 @@ static u32 linear_gain[] = {
 static void skl_init_single_module_pipe(struct snd_soc_dapm_widget *w,
 						struct skl_dev *skl);
 
-static int skl_get_pvtid_map(struct uuid_module *module, int instance_id)
+int skl_init_pvt_id(struct skl_dev *skl)
 {
-	int pvt_id;
+	struct skl_modules_info *fmi = skl->fw_modules_info;
+	int i, j;
 
-	for (pvt_id = 0; pvt_id < module->max_instance; pvt_id++) {
-		if (module->instance_id[pvt_id] == instance_id)
-			return pvt_id;
-	}
-	return -EINVAL;
-}
+	skl->module_instance = kcalloc(fmi->count, sizeof(int *), GFP_KERNEL);
+	if (!skl->module_instance)
+		return -ENOMEM;
 
-static int skl_get_pvt_instance_id_map(struct skl_dev *skl,
-				int module_id, int instance_id)
-{
-	struct uuid_module *module;
+	for (i = 0; i < fmi->count; i++) {
+		int max_count;
 
-	list_for_each_entry(module, &skl->module_list, list) {
-		if (module->id == module_id)
-			return skl_get_pvtid_map(module, instance_id);
+		max_count = fmi->module_entry[i].instance_max_count;
+		skl->module_instance[i] = kcalloc(max_count,
+				sizeof(int), GFP_KERNEL);
+		if (!skl->module_instance[i])
+			goto err;
+		for (j = 0; j < max_count; j++)
+			skl->module_instance[i][j] = -1;
 	}
 
-	return -EINVAL;
+	return 0;
+err:
+	for (i--; i >= 0; i--)
+		kfree(skl->module_instance[i]);
+	kfree(skl->module_instance);
+
+	return -ENOMEM;
 }
+EXPORT_SYMBOL_GPL(skl_init_pvt_id);
 
-static inline int skl_getid_32(struct uuid_module *module, u64 *val,
-				int word1_mask, int word2_mask)
+void skl_free_pvt_id(struct skl_dev *skl)
 {
-	int index, max_inst, pvt_id;
-	u32 mask_val;
-
-	max_inst =  module->max_instance;
-	mask_val = (u32)(*val >> word1_mask);
-
-	if (mask_val != 0xffffffff) {
-		index = ffz(mask_val);
-		pvt_id = index + word1_mask + word2_mask;
-		if (pvt_id <= (max_inst - 1)) {
-			*val |= 1ULL << (index + word1_mask);
-			return pvt_id;
-		}
-	}
+	int i;
 
-	return -EINVAL;
+	for (i = skl->fw_modules_info->count; i >= 0; i--)
+		kfree(skl->module_instance[i]);
+	kfree(skl->module_instance);
 }
+EXPORT_SYMBOL_GPL(skl_free_pvt_id);
 
-static inline int skl_pvtid_128(struct uuid_module *module)
+static int skl_get_pvt_instance_id_map(struct skl_dev *skl,
+		int module_id, int instance_id)
 {
-	int j, i, word1_mask, word2_mask = 0, pvt_id;
-
-	for (j = 0; j < MAX_INSTANCE_BUFF; j++) {
-		word1_mask = 0;
-
-		for (i = 0; i < 2; i++) {
-			pvt_id = skl_getid_32(module, &module->pvt_id[j],
-						word1_mask, word2_mask);
-			if (pvt_id >= 0)
-				return pvt_id;
+	struct skl_modules_info *fmi = skl->fw_modules_info;
+	int i, pvt_id;
 
-			word1_mask += 32;
-			if ((word1_mask + word2_mask) >= module->max_instance)
-				return -EINVAL;
+	for (i = 0; i < fmi->count; i++) {
+		struct skl_module_entry *me = &fmi->module_entry[i];
+		if (me->module_id == module_id) {
+			int max_count = me->instance_max_count;
+			for (pvt_id = 0; pvt_id < max_count; pvt_id++)
+				if (skl->module_instance[i][pvt_id]
+						== instance_id)
+					return pvt_id;
 		}
-
-		word2_mask += 64;
-		if (word2_mask >= module->max_instance)
-			return -EINVAL;
 	}
 
 	return -EINVAL;
@@ -385,27 +375,31 @@ static inline int skl_pvtid_128(struct uuid_module *module)
  * skl_get_pvt_id: generate a private id for use as module id
  *
  * @skl: driver context
- * @uuid_mod: module's uuid
+ * @uuid: module's uuid
  * @instance_id: module's instance id
  *
- * This generates a 128 bit private unique id for a module TYPE so that
- * module instance is unique
+ * This generates a private unique id for a module TYPE so that
+ * module instance is unique and assigns this instance to private id
  */
-static int skl_get_pvt_id(struct skl_dev *skl, guid_t *uuid_mod, int instance_id)
+static int skl_get_pvt_id(struct skl_dev *skl, guid_t *uuid, int instance_id)
 {
-	struct uuid_module *module;
-	int pvt_id;
-
-	list_for_each_entry(module, &skl->module_list, list) {
-		if (guid_equal(uuid_mod, &module->uuid)) {
-			pvt_id = skl_pvtid_128(module);
-			if (pvt_id >= 0) {
-				module->instance_id[pvt_id] = instance_id;
+	struct skl_modules_info *fmi = skl->fw_modules_info;
+	int max_count = 0;
+	int i, mod_id;
+
+	for (i = 0; i < fmi->count; i++)
+		if (guid_equal(&fmi->module_entry[i].uuid, uuid)) {
+			max_count = fmi->module_entry[i].instance_max_count;
+			mod_id = i;
+			break;
+		}
 
-				return pvt_id;
-			}
+	/* max_count > 0  =>  we found our module, so we can loop */
+	for (i = 0; i < max_count; i++)
+		if (skl->module_instance[mod_id][i] == -1) {
+			skl->module_instance[mod_id][i] = instance_id;
+			return i;
 		}
-	}
 
 	return -EINVAL;
 }
@@ -414,27 +408,26 @@ static int skl_get_pvt_id(struct skl_dev *skl, guid_t *uuid_mod, int instance_id
  * skl_put_pvt_id: free up the private id allocated
  *
  * @skl: driver context
- * @uuid_mod: module's uuid
+ * @uuid: module's uuid
  * @pvt_id: module pvt id
  *
- * This frees a 128 bit private unique id previously generated
+ * This frees a private unique id previously assigned
  */
-static int skl_put_pvt_id(struct skl_dev *skl, guid_t *uuid_mod, int *pvt_id)
+static int skl_put_pvt_id(struct skl_dev *skl, guid_t *uuid, int *pvt_id)
 {
+	struct skl_modules_info *fmi = skl->fw_modules_info;
+	int mod_id = -1;
 	int i;
-	struct uuid_module *module;
-
-	list_for_each_entry(module, &skl->module_list, list) {
-		if (guid_equal(uuid_mod, &module->uuid)) {
-			if (*pvt_id != 0)
-				i = (*pvt_id) / 64;
-			else
-				i = 0;
 
-			module->pvt_id[i] &= ~(1 << (*pvt_id));
-			*pvt_id = -1;
-			return 0;
+	for (i = 0; i < fmi->count; i++)
+		if (guid_equal(&fmi->module_entry[i].uuid, uuid)) {
+			mod_id = i;
+			break;
 		}
+
+	if (mod_id >= 0 && *pvt_id >= 0) {
+		skl->module_instance[mod_id][*pvt_id] = -1;
+		return 0;
 	}
 
 	return -EINVAL;
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 01cc5f99e077..0ff3ce0b30a2 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -368,6 +368,9 @@ struct skl_module_cfg *skl_tplg_fe_get_cpr_module(
 int skl_tplg_update_pipe_params(struct device *dev,
 		struct skl_module_cfg *mconfig, struct skl_pipe_params *params);
 
+int skl_init_pvt_id(struct skl_dev *skl);
+void skl_free_pvt_id(struct skl_dev *skl);
+
 void skl_tplg_d0i3_get(struct skl_dev *skl, enum d0i3_capability caps);
 void skl_tplg_d0i3_put(struct skl_dev *skl, enum d0i3_capability caps);
 
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 7d3acebd29d6..8c0dfb8b3260 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -165,6 +165,7 @@ struct skl_dev {
 	struct skl_fw_cfg fw_cfg;
 	struct skl_hw_cfg hw_cfg;
 	struct skl_modules_info *fw_modules_info;
+	int **module_instance;
 
 	/* Is firmware loaded */
 	bool fw_loaded;
-- 
2.17.1

