From 21fb22370988919d6ab58a2b63f34ab5377b2516 Mon Sep 17 00:00:00 2001
From: Ding Yunliang <yunliang.ding@intel.com>
Date: Tue, 22 May 2018 11:07:44 +0800
Subject: [PATCH 1945/2345] media: intel-ipu4: fix i386 build warnings

Message for Open Source:
Fixed warnings when build with i386 support:

make ARCH=i386

ipu-fw-com.c:280:24: warning: cast from pointer to integer of
different size_t [-Wpointer-to-int-cast]
ipu-buttress.c:868:37: warning: right shift count >= width of type
[-Wshift-count-overflow]
libintel-ipu4.c: warning: comparison between enum
ipu_fw_isys_resolution_info and enum ia_css_isys_resolution_info
[-Wenum-compare]
__udivdi3 [drivers/media/pci/intel/ipu4/intel-ipu4.ko] undefined!
...

Message for Internal:
[Issue/Feature] same as above.
[Root Cause/Changes] same as above.

Change-Id: I16bad5dae05fe78c5630565f5f4cb682467c34bc
Signed-off-by: Ding Yunliang <yunliang.ding@intel.com>
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 drivers/media/pci/intel/ipu-buttress.c             |  12 +-
 drivers/media/pci/intel/ipu-dma.c                  |   3 +-
 drivers/media/pci/intel/ipu-fw-com.c               |  11 +-
 drivers/media/pci/intel/ipu-fw-isys.c              | 333 +++++++++++++++++++++
 drivers/media/pci/intel/ipu-isys-queue.c           |   6 +-
 drivers/media/pci/intel/ipu-isys-video.c           |   4 +-
 drivers/media/pci/intel/ipu-isys.c                 |   2 +-
 drivers/media/pci/intel/ipu-wrapper.c              |  48 +--
 .../media/pci/intel/ipu4/ipu4-css/libintel-ipu4.c  |   6 +-
 drivers/media/pci/intel/ipu4/ipu4-isys-csi2.c      |  10 +-
 drivers/media/pci/intel/ipu4/ipu4-psys.c           |   6 +-
 drivers/media/pci/intel/ipu4/ipu4p-isys-csi2.c     |  10 +-
 12 files changed, 400 insertions(+), 51 deletions(-)

diff --git a/drivers/media/pci/intel/ipu-buttress.c b/drivers/media/pci/intel/ipu-buttress.c
index 0f128f3..21f6462 100644
--- a/drivers/media/pci/intel/ipu-buttress.c
+++ b/drivers/media/pci/intel/ipu-buttress.c
@@ -862,10 +862,10 @@ int ipu_buttress_authenticate(struct ipu_device *isp)
 	 * Write address of FIT table to FW_SOURCE register
 	 * Let's use fw address. I.e. not using FIT table yet
 	 */
-	data = (u32)isp->pkg_dir_dma_addr;
+	data = lower_32_bits(isp->pkg_dir_dma_addr);
 	writel(data, isp->base + BUTTRESS_REG_FW_SOURCE_BASE_LO);
 
-	data = (u32)(isp->pkg_dir_dma_addr >> 32);
+	data = upper_32_bits(isp->pkg_dir_dma_addr);
 	writel(data, isp->base + BUTTRESS_REG_FW_SOURCE_BASE_HI);
 
 	/*
@@ -1499,6 +1499,7 @@ DEFINE_SIMPLE_ATTRIBUTE(ipu_buttress_start_tsc_sync_fops, NULL,
 
 u64 ipu_buttress_tsc_ticks_to_ns(u64 ticks)
 {
+	u64 ns = ticks * 10000;
 	/*
 	 * TSC clock frequency is 19.2MHz,
 	 * converting TSC tick count to ns is calculated by:
@@ -1506,7 +1507,9 @@ u64 ipu_buttress_tsc_ticks_to_ns(u64 ticks)
 	 *    = ticks * 1000 000 000 / 19200000Hz
 	 *    = ticks * 10000 / 192 ns
 	 */
-	return ticks * 10000 / 192;
+	do_div(ns, 192);
+
+	return ns;
 }
 EXPORT_SYMBOL_GPL(ipu_buttress_tsc_ticks_to_ns);
 
@@ -1534,7 +1537,8 @@ static int ipu_buttress_psys_force_freq_set(void *data, u64 val)
 		    val > BUTTRESS_MAX_FORCE_PS_FREQ))
 		return -EINVAL;
 
-	isp->buttress.psys_force_ratio = val / BUTTRESS_PS_FREQ_STEP;
+	do_div(val, BUTTRESS_PS_FREQ_STEP);
+	isp->buttress.psys_force_ratio = val;
 
 	if (isp->buttress.psys_force_ratio)
 		ipu_buttress_set_psys_ratio(isp,
diff --git a/drivers/media/pci/intel/ipu-dma.c b/drivers/media/pci/intel/ipu-dma.c
index 2e261e7..2d27780 100644
--- a/drivers/media/pci/intel/ipu-dma.c
+++ b/drivers/media/pci/intel/ipu-dma.c
@@ -376,7 +376,8 @@ static int ipu_dma_map_sg(struct device *dev, struct scatterlist *sglist,
 		int rval;
 
 		dev_dbg(dev, "mapping entry %d: iova 0x%8.8x,phy 0x%16.16llx\n",
-			i, iova_addr << PAGE_SHIFT, page_to_phys(sg_page(sg)));
+			i, iova_addr << PAGE_SHIFT,
+			(unsigned long long)page_to_phys(sg_page(sg)));
 		rval = iommu_map(mmu->dmap->domain, iova_addr << PAGE_SHIFT,
 				 page_to_phys(sg_page(sg)),
 				 PAGE_ALIGN(sg->length), 0);
diff --git a/drivers/media/pci/intel/ipu-fw-com.c b/drivers/media/pci/intel/ipu-fw-com.c
index cedd757..8a50634 100644
--- a/drivers/media/pci/intel/ipu-fw-com.c
+++ b/drivers/media/pci/intel/ipu-fw-com.c
@@ -273,11 +273,11 @@ void *ipu_fw_com_prepare(struct ipu_fw_com_cfg *cfg,
 	ctx->specific_vied_addr = ctx->dma_addr + offset;
 	offset += roundup(cfg->specific_size, 8);
 
-	ctx->ibuf_host_addr = (u64)(ctx->dma_buffer + offset);
+	ctx->ibuf_host_addr = (uintptr_t)(ctx->dma_buffer + offset);
 	ctx->ibuf_vied_addr = ctx->dma_addr + offset;
 	offset += sizeinput;
 
-	ctx->obuf_host_addr = (u64)(ctx->dma_buffer + offset);
+	ctx->obuf_host_addr = (uintptr_t)(ctx->dma_buffer + offset);
 	ctx->obuf_vied_addr = ctx->dma_addr + offset;
 	offset += sizeoutput;
 
@@ -415,7 +415,7 @@ void *ipu_send_get_token(struct ipu_fw_com_context *ctx, int q_nbr)
 
 	index = curr_index(q_dmem, DIR_SEND);
 
-	return (void *)q->host_address + (index * q->token_size);
+	return (void *)(unsigned long)q->host_address + (index * q->token_size);
 }
 EXPORT_SYMBOL_GPL(ipu_send_get_token);
 
@@ -424,7 +424,8 @@ void ipu_send_put_token(struct ipu_fw_com_context *ctx, int q_nbr)
 	struct sys_queue *q = &ctx->input_queue[q_nbr];
 	void __iomem *q_dmem = ctx->dmem_addr + q->wr_reg * 4;
 	int index = curr_index(q_dmem, DIR_SEND);
-	void *addr = (void *)q->host_address + (index * q->token_size);
+	void *addr = (void *)(unsigned long)q->host_address +
+				(index * q->token_size);
 
 	clflush_cache_range(addr, q->token_size);
 
@@ -454,7 +455,7 @@ void *ipu_recv_get_token(struct ipu_fw_com_context *ctx, int q_nbr)
 	if (packets <= 0)
 		return NULL;
 
-	addr = (void *)q->host_address + (rd * q->token_size);
+	addr = (void *)(unsigned long)q->host_address + (rd * q->token_size);
 	clflush_cache_range(addr, q->token_size);
 
 	return addr;
diff --git a/drivers/media/pci/intel/ipu-fw-isys.c b/drivers/media/pci/intel/ipu-fw-isys.c
index e52f2af..8ccc175 100644
--- a/drivers/media/pci/intel/ipu-fw-isys.c
+++ b/drivers/media/pci/intel/ipu-fw-isys.c
@@ -90,6 +90,339 @@ const char send_msg_types[N_IPU_FW_ISYS_SEND_TYPE][32] = {
 	"STREAM_CLOSE"
 };
 
+#ifndef CONFIG_VIDEO_INTEL_IPU_FW_LIB
+static int handle_proxy_response(struct ipu_isys *isys, unsigned int req_id)
+{
+	struct ipu_fw_isys_proxy_resp_info_abi *resp;
+	int rval = -EIO;
+
+	resp = (struct ipu_fw_isys_proxy_resp_info_abi *)
+	    ipu_recv_get_token(isys->fwcom, IPU_BASE_PROXY_RECV_QUEUES);
+	if (!resp)
+		return 1;
+
+	dev_dbg(&isys->adev->dev,
+		"Proxy response: id 0x%x, error %d, details %d\n",
+		resp->request_id, resp->error_info.error,
+		resp->error_info.error_details);
+
+	if (req_id == resp->request_id)
+		rval = 0;
+
+	ipu_recv_put_token(isys->fwcom, IPU_BASE_PROXY_RECV_QUEUES);
+	return rval;
+}
+
+/* Simple blocking proxy send function */
+int ipu_fw_isys_send_proxy_token(struct ipu_isys *isys,
+				 unsigned int req_id,
+				 unsigned int index,
+				 unsigned int offset, u32 value)
+{
+	struct ipu_fw_com_context *ctx = isys->fwcom;
+	struct ipu_fw_proxy_send_queue_token *token;
+	unsigned int timeout = 1000;
+	int rval = -EBUSY;
+
+	dev_dbg(&isys->adev->dev,
+		"proxy send token: req_id 0x%x, index %d, offset 0x%x, value 0x%x\n",
+		req_id, index, offset, value);
+
+	mutex_lock(&isys->mutex);
+	token = ipu_send_get_token(ctx, IPU_BASE_PROXY_SEND_QUEUES);
+	if (!token)
+		goto leave;
+
+	token->request_id = req_id;
+	token->region_index = index;
+	token->offset = offset;
+	token->value = value;
+	ipu_send_put_token(ctx, IPU_BASE_PROXY_SEND_QUEUES);
+
+	/* Currently proxy doesn't support irq based service. Poll */
+	do {
+		usleep_range(100, 110);
+		rval = handle_proxy_response(isys, req_id);
+		if (!rval)
+			break;
+		if (rval == -EIO) {
+			dev_err(&isys->adev->dev,
+				"Proxy response received with unexpected id\n");
+			break;
+		}
+		timeout--;
+	} while (rval && timeout);
+
+	if (!timeout)
+		dev_err(&isys->adev->dev, "Proxy response timed out\n");
+leave:
+	mutex_unlock(&isys->mutex);
+	return rval;
+}
+
+int
+ipu_fw_isys_complex_cmd(struct ipu_isys *isys,
+			const unsigned int stream_handle,
+			void *cpu_mapped_buf,
+			dma_addr_t dma_mapped_buf,
+			size_t size, enum ipu_fw_isys_send_type send_type)
+{
+	struct ipu_fw_com_context *ctx = isys->fwcom;
+	struct ipu_fw_send_queue_token *token;
+
+	if (send_type >= N_IPU_FW_ISYS_SEND_TYPE)
+		return -EINVAL;
+
+	dev_dbg(&isys->adev->dev, "send_token: %s\n",
+		send_msg_types[send_type]);
+
+	/*
+	 * Time to flush cache in case we have some payload. Not all messages
+	 * have that
+	 */
+	if (cpu_mapped_buf)
+		clflush_cache_range(cpu_mapped_buf, size);
+
+	token = ipu_send_get_token(ctx,
+				   stream_handle + IPU_BASE_MSG_SEND_QUEUES);
+	if (!token)
+		return -EBUSY;
+
+	token->payload = dma_mapped_buf;
+	token->buf_handle = (unsigned long)cpu_mapped_buf;
+	token->send_type = send_type;
+
+	ipu_send_put_token(ctx, stream_handle + IPU_BASE_MSG_SEND_QUEUES);
+
+	return 0;
+}
+
+int ipu_fw_isys_simple_cmd(struct ipu_isys *isys,
+			   const unsigned int stream_handle,
+			   enum ipu_fw_isys_send_type send_type)
+{
+	return ipu_fw_isys_complex_cmd(isys, stream_handle, NULL, 0, 0,
+				       send_type);
+}
+
+int ipu_fw_isys_close(struct ipu_isys *isys)
+{
+	struct device *dev = &isys->adev->dev;
+	int timeout = IPU_ISYS_TURNOFF_TIMEOUT;
+	int rval;
+	unsigned long flags;
+
+	/*
+	 * Stop the isys fw. Actual close takes
+	 * some time as the FW must stop its actions including code fetch
+	 * to SP icache.
+	 */
+	spin_lock_irqsave(&isys->power_lock, flags);
+	rval = ipu_fw_com_close(isys->fwcom);
+	spin_unlock_irqrestore(&isys->power_lock, flags);
+	if (rval)
+		dev_err(dev, "Device close failure: %d\n", rval);
+
+	/* release probably fails if the close failed. Let's try still */
+	do {
+		usleep_range(IPU_ISYS_TURNOFF_DELAY_US,
+			     2 * IPU_ISYS_TURNOFF_DELAY_US);
+		rval = ipu_fw_com_release(isys->fwcom, 0);
+		timeout--;
+	} while (rval != 0 && timeout);
+
+	/* Spin lock to wait the interrupt handler to be finished */
+	spin_lock_irqsave(&isys->power_lock, flags);
+	if (!rval)
+		isys->fwcom = NULL;	/* No further actions needed */
+	else
+		dev_err(dev, "Device release time out %d\n", rval);
+	spin_unlock_irqrestore(&isys->power_lock, flags);
+	return rval;
+}
+
+void ipu_fw_isys_cleanup(struct ipu_isys *isys)
+{
+	ipu_fw_com_release(isys->fwcom, 1);
+	isys->fwcom = NULL;
+}
+
+static void start_sp(struct ipu_bus_device *adev)
+{
+	struct ipu_isys *isys = ipu_bus_get_drvdata(adev);
+	void __iomem *spc_regs_base = isys->pdata->base +
+	    isys->pdata->ipdata->hw_variant.spc_offset;
+	u32 val = 0;
+
+	val |= IPU_ISYS_SPC_STATUS_START |
+	    IPU_ISYS_SPC_STATUS_RUN |
+	    IPU_ISYS_SPC_STATUS_CTRL_ICACHE_INVALIDATE;
+	val |= isys->icache_prefetch ? IPU_ISYS_SPC_STATUS_ICACHE_PREFETCH : 0;
+
+	writel(val, spc_regs_base + IPU_ISYS_REG_SPC_STATUS_CTRL);
+}
+
+static int query_sp(struct ipu_bus_device *adev)
+{
+	struct ipu_isys *isys = ipu_bus_get_drvdata(adev);
+	void __iomem *spc_regs_base = isys->pdata->base +
+	    isys->pdata->ipdata->hw_variant.spc_offset;
+	u32 val = readl(spc_regs_base + IPU_ISYS_REG_SPC_STATUS_CTRL);
+
+	/* return true when READY == 1, START == 0 */
+	val &= IPU_ISYS_SPC_STATUS_READY | IPU_ISYS_SPC_STATUS_START;
+
+	return val == IPU_ISYS_SPC_STATUS_READY;
+}
+
+int ipu_fw_isys_init(struct ipu_isys *isys, unsigned int num_streams)
+{
+	int retry = IPU_ISYS_OPEN_RETRY;
+	int num_in_message_queues = clamp_t(unsigned int, num_streams, 1,
+					    IPU_ISYS_NUM_STREAMS);
+	int num_out_message_queues = 1;
+	int type_proxy = IPU_FW_ISYS_QUEUE_TYPE_PROXY;
+	int type_dev = IPU_FW_ISYS_QUEUE_TYPE_DEV;
+	int type_msg = IPU_FW_ISYS_QUEUE_TYPE_MSG;
+	int base_dev_send = IPU_BASE_DEV_SEND_QUEUES;
+	int base_msg_send = IPU_BASE_MSG_SEND_QUEUES;
+	int base_msg_recv = IPU_BASE_MSG_RECV_QUEUES;
+
+	struct ia_css_syscom_queue_config
+	    input_queue_cfg[IPU_N_MAX_SEND_QUEUES];
+	struct ia_css_syscom_queue_config
+	    output_queue_cfg[IPU_N_MAX_RECV_QUEUES];
+
+	struct ipu_fw_com_cfg fwcom = {
+		.input = input_queue_cfg,
+		.output = output_queue_cfg,
+		.cell_start = start_sp,
+		.cell_ready = query_sp,
+	};
+
+	struct ipu_fw_isys_fw_config isys_fw_cfg = {
+		.num_send_queues[IPU_FW_ISYS_QUEUE_TYPE_PROXY] =
+		    IPU_N_MAX_PROXY_SEND_QUEUES,
+		.num_send_queues[IPU_FW_ISYS_QUEUE_TYPE_DEV] =
+		    IPU_N_MAX_DEV_SEND_QUEUES,
+		.num_send_queues[IPU_FW_ISYS_QUEUE_TYPE_MSG] =
+		    num_in_message_queues,
+		.num_recv_queues[IPU_FW_ISYS_QUEUE_TYPE_PROXY] =
+		    IPU_N_MAX_PROXY_RECV_QUEUES,
+		/* Common msg/dev return queue */
+		.num_recv_queues[IPU_FW_ISYS_QUEUE_TYPE_DEV] = 0,
+		.num_recv_queues[IPU_FW_ISYS_QUEUE_TYPE_MSG] =
+		    num_out_message_queues,
+	};
+	struct device *dev = &isys->adev->dev;
+	int rval, i;
+
+	fwcom.num_input_queues =
+	    isys_fw_cfg.num_send_queues[type_proxy] +
+	    isys_fw_cfg.num_send_queues[type_dev] +
+	    isys_fw_cfg.num_send_queues[type_msg];
+
+	fwcom.num_output_queues =
+	    isys_fw_cfg.num_recv_queues[type_proxy] +
+	    isys_fw_cfg.num_recv_queues[type_dev] +
+	    isys_fw_cfg.num_recv_queues[type_msg];
+
+	/*
+	 * SRAM partitioning. Initially equal partitioning is set
+	 * TODO: Fine tune the partitining based on the stream pixel load
+	 */
+	for (i = 0; i < IPU_NOF_SRAM_BLOCKS_MAX; i++) {
+		if (i < num_in_message_queues)
+			isys_fw_cfg.buffer_partition.num_gda_pages[i] =
+			    (IPU_DEVICE_GDA_NR_PAGES *
+			     IPU_DEVICE_GDA_VIRT_FACTOR) /
+			    num_in_message_queues;
+		else
+			isys_fw_cfg.buffer_partition.num_gda_pages[i] = 0;
+	}
+
+	/* FW assumes proxy interface at fwcom queue 0 */
+	for (i = 0; i < isys_fw_cfg.num_send_queues[type_proxy]; i++) {
+		input_queue_cfg[i].token_size =
+		    sizeof(struct ipu_fw_proxy_send_queue_token);
+		input_queue_cfg[i].queue_size = IPU_ISYS_SIZE_PROXY_SEND_QUEUE;
+	}
+
+	for (i = 0; i < isys_fw_cfg.num_send_queues[type_dev]; i++) {
+		input_queue_cfg[base_dev_send + i].token_size =
+		    sizeof(struct ipu_fw_send_queue_token);
+		input_queue_cfg[base_dev_send + i].queue_size =
+		    IPU_DEV_SEND_QUEUE_SIZE;
+	}
+
+	for (i = 0; i < isys_fw_cfg.num_send_queues[type_msg]; i++) {
+		input_queue_cfg[base_msg_send + i].token_size =
+		    sizeof(struct ipu_fw_send_queue_token);
+		input_queue_cfg[base_msg_send + i].queue_size =
+		    IPU_ISYS_SIZE_SEND_QUEUE;
+	}
+
+	for (i = 0; i < isys_fw_cfg.num_recv_queues[type_proxy]; i++) {
+		output_queue_cfg[i].token_size =
+		    sizeof(struct ipu_fw_proxy_resp_queue_token);
+		output_queue_cfg[i].queue_size = IPU_ISYS_SIZE_PROXY_RECV_QUEUE;
+	}
+	/* There is no recv DEV queue */
+	for (i = 0; i < isys_fw_cfg.num_recv_queues[type_msg]; i++) {
+		output_queue_cfg[base_msg_recv + i].token_size =
+		    sizeof(struct ipu_fw_resp_queue_token);
+		output_queue_cfg[base_msg_recv + i].queue_size =
+		    IPU_ISYS_SIZE_RECV_QUEUE;
+	}
+
+	fwcom.dmem_addr = isys->pdata->ipdata->hw_variant.dmem_offset;
+	fwcom.specific_addr = &isys_fw_cfg;
+	fwcom.specific_size = sizeof(isys_fw_cfg);
+
+	isys->fwcom = ipu_fw_com_prepare(&fwcom, isys->adev, isys->pdata->base);
+	if (!isys->fwcom) {
+		dev_err(dev, "isys fw com prepare failed\n");
+		return -EIO;
+	}
+
+	rval = ipu_fw_com_open(isys->fwcom);
+	if (rval) {
+		dev_err(dev, "isys fw com open failed %d\n", rval);
+		return rval;
+	}
+
+	do {
+		usleep_range(IPU_ISYS_OPEN_TIMEOUT_US,
+			     IPU_ISYS_OPEN_TIMEOUT_US + 10);
+		rval = ipu_fw_com_ready(isys->fwcom);
+		if (!rval)
+			break;
+		retry--;
+	} while (retry > 0);
+
+	if (!retry && rval) {
+		dev_err(dev, "isys port open ready failed %d\n", rval);
+		ipu_fw_isys_close(isys);
+	}
+
+	return rval;
+}
+
+struct ipu_fw_isys_resp_info_abi *ipu_fw_isys_get_resp(void *context,
+						       unsigned int queue,
+						       struct
+						       ipu_fw_isys_resp_info_abi
+						       *response)
+{
+	return (struct ipu_fw_isys_resp_info_abi *)
+	    ipu_recv_get_token(context, queue);
+}
+
+void ipu_fw_isys_put_resp(void *context, unsigned int queue)
+{
+	ipu_recv_put_token(context, queue);
+}
+#endif
 
 void ipu_fw_isys_set_params(struct ipu_fw_isys_stream_cfg_data_abi *stream_cfg)
 {
diff --git a/drivers/media/pci/intel/ipu-isys-queue.c b/drivers/media/pci/intel/ipu-isys-queue.c
index 8936d5b..d716e13 100644
--- a/drivers/media/pci/intel/ipu-isys-queue.c
+++ b/drivers/media/pci/intel/ipu-isys-queue.c
@@ -671,7 +671,7 @@ static int ipu_isys_stream_start(struct ipu_isys_pipeline *ip,
 					buf, to_dma_addr(msg),
 					sizeof(*buf),
 					IPU_FW_ISYS_SEND_TYPE_STREAM_CAPTURE);
-		ipu_put_fw_mgs_buffer(pipe_av->isys, (u64) buf);
+		ipu_put_fw_mgs_buffer(pipe_av->isys, (uintptr_t) buf);
 	} while (!WARN_ON(rval));
 
 	return 0;
@@ -796,7 +796,7 @@ static void __buf_queue(struct vb2_buffer *vb, bool force)
 				       buf, to_dma_addr(msg),
 				       sizeof(*buf),
 				       IPU_FW_ISYS_SEND_TYPE_STREAM_CAPTURE);
-	ipu_put_fw_mgs_buffer(pipe_av->isys, (u64) buf);
+	ipu_put_fw_mgs_buffer(pipe_av->isys, (uintptr_t) buf);
 	/*
 	 * FIXME: mark the buffers in the buffer list if the queue
 	 * operation fails.
@@ -1374,7 +1374,7 @@ ipu_isys_req_dispatch(struct media_device *mdev,
 				       ip->stream_handle,
 				       set, dma_addr, sizeof(*set),
 				       IPU_FW_ISYS_SEND_TYPE_STREAM_CAPTURE);
-	ipu_put_fw_mgs_buffer(pipe_av->isys, (u64) set);
+	ipu_put_fw_mgs_buffer(pipe_av->isys, (uintptr_t) set);
 
 	WARN_ON(rval);
 }
diff --git a/drivers/media/pci/intel/ipu-isys-video.c b/drivers/media/pci/intel/ipu-isys-video.c
index dac46e8..4c2870d 100644
--- a/drivers/media/pci/intel/ipu-isys-video.c
+++ b/drivers/media/pci/intel/ipu-isys-video.c
@@ -1148,7 +1148,7 @@ static int start_stream_firmware(struct ipu_isys_video *av,
 				       to_dma_addr(msg),
 				       sizeof(*stream_cfg),
 				       IPU_FW_ISYS_SEND_TYPE_STREAM_OPEN);
-	ipu_put_fw_mgs_buffer(av->isys, (u64) stream_cfg);
+	ipu_put_fw_mgs_buffer(av->isys, (uintptr_t) stream_cfg);
 
 	if (rval < 0) {
 		dev_err(dev, "can't open stream (%d)\n", rval);
@@ -1203,7 +1203,7 @@ static int start_stream_firmware(struct ipu_isys_video *av,
 				buf, to_dma_addr(msg),
 				sizeof(*buf),
 				IPU_FW_ISYS_SEND_TYPE_STREAM_START_AND_CAPTURE);
-		ipu_put_fw_mgs_buffer(av->isys, (u64) buf);
+		ipu_put_fw_mgs_buffer(av->isys, (uintptr_t) buf);
 	} else {
 		rval = ipu_fw_isys_simple_cmd(av->isys,
 					ip->stream_handle,
diff --git a/drivers/media/pci/intel/ipu-isys.c b/drivers/media/pci/intel/ipu-isys.c
index 3f73067..0f82167 100644
--- a/drivers/media/pci/intel/ipu-isys.c
+++ b/drivers/media/pci/intel/ipu-isys.c
@@ -1124,7 +1124,7 @@ void ipu_cleanup_fw_msg_bufs(struct ipu_isys *isys)
 void ipu_put_fw_mgs_buffer(struct ipu_isys *isys, u64 data)
 {
 	struct isys_fw_msgs *msg;
-	u64 *ptr = (u64 *) data;
+	u64 *ptr = (u64 *)(unsigned long)data;
 
 	if (!ptr)
 		return;
diff --git a/drivers/media/pci/intel/ipu-wrapper.c b/drivers/media/pci/intel/ipu-wrapper.c
index 736f15d..a10c410 100644
--- a/drivers/media/pci/intel/ipu-wrapper.c
+++ b/drivers/media/pci/intel/ipu-wrapper.c
@@ -265,7 +265,7 @@ void shared_memory_free(int mmid, u64 addr)
 	struct my_css_memory_buffer_item *buf = NULL;
 	unsigned long flags;
 
-	if ((void *)addr == &alloc_cookie)
+	if ((void *)(unsigned long)addr == &alloc_cookie)
 		return;
 
 	might_sleep();
@@ -305,7 +305,7 @@ u32 shared_memory_map(int ssid, int mmid, u64 addr)
 	struct my_css_memory_buffer_item *buf = NULL;
 	unsigned long flags;
 
-	if ((void *)addr == &alloc_cookie)
+	if ((void *)(unsigned long)addr == &alloc_cookie)
 		return 0;
 
 	spin_lock_irqsave(&mine->lock, flags);
@@ -340,9 +340,9 @@ void shared_memory_store_8(int mmid, u64 addr, u8 data)
 		"access: %s: Enter addr = 0x%llx data = 0x%x\n",
 		__func__, addr, data);
 
-	*((u8 *) addr) = data;
+	*((u8 *)(unsigned long) addr) = data;
 	/*Invalidate the cache lines to flush the content to ddr. */
-	clflush_cache_range((void *)addr, sizeof(u8));
+	clflush_cache_range((void *)(unsigned long)addr, sizeof(u8));
 }
 
 /**
@@ -355,9 +355,9 @@ void shared_memory_store_16(int mmid, u64 addr, u16 data)
 		"access: %s: Enter addr = 0x%llx data = 0x%x\n",
 		__func__, addr, data);
 
-	*((u16 *) addr) = data;
+	*((u16 *)(unsigned long) addr) = data;
 	/*Invalidate the cache lines to flush the content to ddr. */
-	clflush_cache_range((void *)addr, sizeof(u16));
+	clflush_cache_range((void *)(unsigned long) addr, sizeof(u16));
 }
 
 /**
@@ -370,9 +370,9 @@ void shared_memory_store_32(int mmid, u64 addr, u32 data)
 		"access: %s: Enter addr = 0x%llx data = 0x%x\n",
 		__func__, addr, data);
 
-	*((u32 *) addr) = data;
+	*((u32 *)(unsigned long) addr) = data;
 	/* Invalidate the cache lines to flush the content to ddr. */
-	clflush_cache_range((void *)addr, sizeof(u32));
+	clflush_cache_range((void *)(unsigned long) addr, sizeof(u32));
 }
 
 /**
@@ -382,7 +382,7 @@ void shared_memory_store_32(int mmid, u64 addr, u32 data)
 void shared_memory_store(int mmid, u64 addr, const void *data, size_t bytes)
 {
 	dev_dbg(get_mem_sub_system(mmid)->dev,
-		"access: %s: Enter addr = 0x%lx bytes = 0x%lx\n", __func__,
+		"access: %s: Enter addr = 0x%lx bytes = 0x%zx\n", __func__,
 		(unsigned long)addr, bytes);
 
 	if (!data) {
@@ -390,14 +390,14 @@ void shared_memory_store(int mmid, u64 addr, const void *data, size_t bytes)
 			"%s: data ptr is null\n", __func__);
 	} else {
 		const u8 *pdata = data;
-		u8 *paddr = (u8 *) addr;
+		u8 *paddr = (u8 *)(unsigned long)addr;
 		size_t i = 0;
 
 		for (; i < bytes; ++i)
 			*paddr++ = *pdata++;
 
 		/* Invalidate the cache lines to flush the content to ddr. */
-		clflush_cache_range((void *)addr, bytes);
+		clflush_cache_range((void *)(unsigned long) addr, bytes);
 	}
 }
 
@@ -408,11 +408,11 @@ void shared_memory_store(int mmid, u64 addr, const void *data, size_t bytes)
 void shared_memory_zero(int mmid, u64 addr, size_t bytes)
 {
 	dev_dbg(get_mem_sub_system(mmid)->dev,
-		"access: %s: Enter addr = 0x%llx data = 0x%lx\n",
-		__func__, addr, bytes);
+		"access: %s: Enter addr = 0x%llx data = 0x%zx\n",
+		__func__, (unsigned long long)addr, bytes);
 
-	memset((void *)addr, 0, bytes);
-	clflush_cache_range((void *)addr, bytes);
+	memset((void *)(unsigned long)addr, 0, bytes);
+	clflush_cache_range((void *)(unsigned long)addr, bytes);
 }
 
 /**
@@ -427,8 +427,8 @@ u8 shared_memory_load_8(int mmid, u64 addr)
 		"access: %s: Enter addr = 0x%llx\n", __func__, addr);
 
 	/* Invalidate the cache lines to flush the content to ddr. */
-	clflush_cache_range((void *)addr, sizeof(u8));
-	data = *(u8 *) addr;
+	clflush_cache_range((void *)(unsigned long)addr, sizeof(u8));
+	data = *(u8 *)(unsigned long) addr;
 	return data;
 }
 
@@ -444,8 +444,8 @@ u16 shared_memory_load_16(int mmid, u64 addr)
 		"access: %s: Enter addr = 0x%llx\n", __func__, addr);
 
 	/* Invalidate the cache lines to flush the content to ddr. */
-	clflush_cache_range((void *)addr, sizeof(u16));
-	data = *(u16 *) addr;
+	clflush_cache_range((void *)(unsigned long)addr, sizeof(u16));
+	data = *(u16 *)(unsigned long)addr;
 	return data;
 }
 
@@ -461,8 +461,8 @@ u32 shared_memory_load_32(int mmid, u64 addr)
 		"access: %s: Enter addr = 0x%llx\n", __func__, addr);
 
 	/* Invalidate the cache lines to flush the content to ddr. */
-	clflush_cache_range((void *)addr, sizeof(u32));
-	data = *(u32 *) addr;
+	clflush_cache_range((void *)(unsigned long)addr, sizeof(u32));
+	data = *(u32 *)(unsigned long)addr;
 	return data;
 }
 
@@ -473,7 +473,7 @@ u32 shared_memory_load_32(int mmid, u64 addr)
 void shared_memory_load(int mmid, u64 addr, void *data, size_t bytes)
 {
 	dev_dbg(get_mem_sub_system(mmid)->dev,
-		"access: %s: Enter addr = 0x%lx bytes = 0x%lx\n", __func__,
+		"access: %s: Enter addr = 0x%lx bytes = 0x%zx\n", __func__,
 		(unsigned long)addr, bytes);
 
 	if (!data) {
@@ -482,11 +482,11 @@ void shared_memory_load(int mmid, u64 addr, void *data, size_t bytes)
 
 	} else {
 		u8 *pdata = data;
-		u8 *paddr = (u8 *) addr;
+		u8 *paddr = (u8 *)(unsigned long)addr;
 		size_t i = 0;
 
 		/* Invalidate the cache lines to flush the content to ddr. */
-		clflush_cache_range((void *)addr, bytes);
+		clflush_cache_range((void *)(unsigned long)addr, bytes);
 		for (; i < bytes; ++i)
 			*pdata++ = *paddr++;
 	}
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/libintel-ipu4.c b/drivers/media/pci/intel/ipu4/ipu4-css/libintel-ipu4.c
index c0e5ec8..74047ca 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/libintel-ipu4.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/libintel-ipu4.c
@@ -277,8 +277,7 @@ static void isa_cfg_abi_to_api(const struct ipu_fw_isys_isa_cfg_abi *abi,
 {
 	unsigned int i;
 
-	for (i = 0; i < min(N_IPU_FW_ISYS_RESOLUTION_INFO,
-			    N_IA_CSS_ISYS_RESOLUTION_INFO); i++)
+	for (i = 0; i < N_IA_CSS_ISYS_RESOLUTION_INFO; i++)
 		resolution_abi_to_api(&abi->isa_res[i], &api->isa_res[i]);
 
 	api->blc_enabled = abi->cfg.blc;
@@ -312,8 +311,7 @@ static void stream_cfg_abi_to_api(struct ipu_fw_isys_stream_cfg_data_abi *abi,
 	api->isl_use = abi->isl_use;
 	api->compfmt = abi->compfmt;
 	isa_cfg_abi_to_api(&abi->isa_cfg, &api->isa_cfg);
-	for (i = 0; i < min(N_IPU_FW_ISYS_CROPPING_LOCATION,
-			    N_IA_CSS_ISYS_CROPPING_LOCATION); i++)
+	for (i = 0; i < N_IA_CSS_ISYS_CROPPING_LOCATION; i++)
 		cropping_abi_to_api(&abi->crop[i], &api->crop[i]);
 
 	api->send_irq_sof_discarded = abi->send_irq_sof_discarded;
diff --git a/drivers/media/pci/intel/ipu4/ipu4-isys-csi2.c b/drivers/media/pci/intel/ipu4/ipu4-isys-csi2.c
index 7f51d99..0c9392d 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-isys-csi2.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-isys-csi2.c
@@ -312,7 +312,9 @@ static u64 tunit_time_to_us(struct ipu_isys *isys, u64 time)
 	struct ipu_bus_device *adev = to_ipu_bus_device(isys->adev->iommu);
 	u64 isys_clk = IS_FREQ_SOURCE / adev->ctrl->divisor / 1000000;
 
-	return time / isys_clk;
+	do_div(time, isys_clk);
+
+	return time;
 }
 
 static int update_timer_base(struct ipu_isys *isys)
@@ -558,8 +560,12 @@ static u64 tsc_time_to_tunit_time(struct ipu_isys *isys,
 	struct ipu_bus_device *adev = to_ipu_bus_device(isys->adev->iommu);
 	u64 isys_clk = IS_FREQ_SOURCE / adev->ctrl->divisor / 100000;
 	u64 tsc_clk = IPU_BUTTRESS_TSC_CLK / 100000;
+	u64 tunit_time;
+
+	tunit_time = (tsc_time - tsc_base) * isys_clk;
+	do_div(tunit_time, tsc_clk);
 
-	return (tsc_time - tsc_base) * isys_clk / tsc_clk + tunit_base;
+	return tunit_time + tunit_base;
 }
 
 /* Extract the timestamp from trace message.
diff --git a/drivers/media/pci/intel/ipu4/ipu4-psys.c b/drivers/media/pci/intel/ipu4/ipu4-psys.c
index d183008..1f6227c 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-psys.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-psys.c
@@ -592,7 +592,7 @@ static int ipu_psys_config_legacy_pg(struct ipu_psys_kcmd *kcmd)
 		}
 	}
 
-	ipu_fw_psys_pg_set_token(kcmd, (u64) kcmd);
+	ipu_fw_psys_pg_set_token(kcmd, (uintptr_t) kcmd);
 
 	ret = ipu_fw_psys_pg_submit(kcmd);
 	if (ret) {
@@ -715,7 +715,7 @@ int ipu_psys_kcmd_new(struct ipu_psys_command *cmd, struct ipu_psys_fh *fh)
 
 	pg_size = ipu_fw_psys_pg_get_size(kcmd);
 	if (pg_size > kcmd->kpg->pg_size) {
-		dev_dbg(&psys->adev->dev, "pg size mismatch %lu %lu\n",
+		dev_dbg(&psys->adev->dev, "pg size mismatch %zu %zu\n",
 			pg_size, kcmd->kpg->pg_size);
 		ret = -EINVAL;
 		goto error;
@@ -759,7 +759,7 @@ void ipu_psys_handle_events(struct ipu_psys *psys)
 			break;
 
 		error = false;
-		kcmd = (struct ipu_psys_kcmd *)event.token;
+		kcmd = (struct ipu_psys_kcmd *)(unsigned long)event.token;
 		error = IS_ERR_OR_NULL(kcmd) ? true : false;
 
 		dev_dbg(&psys->adev->dev, "psys received event status:%d\n",
diff --git a/drivers/media/pci/intel/ipu4/ipu4p-isys-csi2.c b/drivers/media/pci/intel/ipu4/ipu4p-isys-csi2.c
index 51592ed..934db9e 100644
--- a/drivers/media/pci/intel/ipu4/ipu4p-isys-csi2.c
+++ b/drivers/media/pci/intel/ipu4/ipu4p-isys-csi2.c
@@ -223,7 +223,9 @@ static u64 tunit_time_to_us(struct ipu_isys *isys, u64 time)
 	struct ipu_bus_device *adev = to_ipu_bus_device(isys->adev->iommu);
 	u64 isys_clk = IS_FREQ_SOURCE / adev->ctrl->divisor / 1000000;
 
-	return time / isys_clk;
+	do_div(time, isys_clk);
+
+	return time;
 }
 
 static u64 tsc_time_to_tunit_time(struct ipu_isys *isys,
@@ -232,8 +234,12 @@ static u64 tsc_time_to_tunit_time(struct ipu_isys *isys,
 	struct ipu_bus_device *adev = to_ipu_bus_device(isys->adev->iommu);
 	u64 isys_clk = IS_FREQ_SOURCE / adev->ctrl->divisor / 100000;
 	u64 tsc_clk = IPU_BUTTRESS_TSC_CLK / 100000;
+	u64 tunit_time;
+
+	tunit_time = (tsc_time - tsc_base) * isys_clk;
+	do_div(tunit_time, tsc_clk);
 
-	return (tsc_time - tsc_base) * isys_clk / tsc_clk + tunit_base;
+	return tunit_time + tunit_base;
 }
 
 /* Extract the timestamp from trace message.
-- 
2.7.4

