From 36691e64520856a3edf2c0ee690bed25704317d0 Mon Sep 17 00:00:00 2001
From: Zhao Yakui <yakui.zhao@intel.com>
Date: Tue, 16 Oct 2018 13:38:18 +0800
Subject: [PATCH 097/144] Kernel/Acrn: Use HYPERVISOR_CALLBACK_VECTOR for Acrn
 upcall vector

Linux kernel uses the HYPERVISOR_CALLBACK_VECTOR for hypervisor upcall vector.
And it is already used for Xen and HyperV.
After Acrn hypervisor is detected, it will also use this defined vector as notify
vector to kernel.

Other minor fix: The X2APIC is exported by checking boot_cpu_has(X86_FEATURE_X2APIC)
The x86_hyper_acrn is changed to __initconst.
The EXPORT_SYMBOL is removed for x86_hyper_acrn

Tracked-on: https://github.com/projectacrn/acrn-hypervisor/issues/1325
Signed-off-by: Zhao Yakui <yakui.zhao@intel.com>
---
 arch/x86/include/asm/acrnhyper.h | 18 ++++++++++++++++++
 arch/x86/kernel/cpu/acrn.c       | 30 +++++++++++++++++++++++-------
 2 files changed, 41 insertions(+), 7 deletions(-)
 create mode 100644 arch/x86/include/asm/acrnhyper.h

diff --git a/arch/x86/include/asm/acrnhyper.h b/arch/x86/include/asm/acrnhyper.h
new file mode 100644
index 000000000000..ed87f41b8f87
--- /dev/null
+++ b/arch/x86/include/asm/acrnhyper.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_X86_ACRNHYPER_H
+#define _ASM_X86_ACRNHYPER_H
+
+#include <linux/types.h>
+#include <linux/atomic.h>
+#include <linux/nmi.h>
+#include <asm/io.h>
+
+#ifdef CONFIG_ACRN_GUEST
+/* ACRN Hypervisor callback */
+void acrn_hv_callback_vector(void);
+
+void acrn_setup_intr_irq(void (*handler)(void));
+void acrn_remove_intr_irq(void);
+#endif
+
+#endif
diff --git a/arch/x86/kernel/cpu/acrn.c b/arch/x86/kernel/cpu/acrn.c
index 676022e71791..e0408f933d04 100644
--- a/arch/x86/kernel/cpu/acrn.c
+++ b/arch/x86/kernel/cpu/acrn.c
@@ -14,7 +14,12 @@
 #include <asm/apic.h>
 #include <asm/desc.h>
 #include <asm/hypervisor.h>
+#include <asm/acrnhyper.h>
+#include <asm/irq_vectors.h>
 #include <asm/irq_regs.h>
+#include <asm/desc.h>
+#include <asm/apic.h>
+#include <asm/cpufeature.h>
 
 static uint32_t __init acrn_detect(void)
 {
@@ -29,16 +34,13 @@ static void __init acrn_init_platform(void)
 
 static bool acrn_x2apic_available(void)
 {
-	/*
-	 * x2apic is not supported for now. Future enablement will have to check
-	 * X86_FEATURE_X2APIC to determine whether x2apic is supported in the
-	 * guest.
-	 */
-	return false;
+	return boot_cpu_has(X86_FEATURE_X2APIC);
 }
 
 static void (*acrn_intr_handler)(void);
-
+/*
+ * Handler for ACRN_HV_CALLBACK.
+ */
 __visible void __irq_entry acrn_hv_vector_handler(struct pt_regs *regs)
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
@@ -51,7 +53,9 @@ __visible void __irq_entry acrn_hv_vector_handler(struct pt_regs *regs)
 	 * HYPERVISOR_CALLBACK_VECTOR.
 	 */
 	entering_ack_irq();
+#ifdef CONFIG_X86
 	inc_irq_stat(irq_hv_callback_count);
+#endif
 
 	if (acrn_intr_handler)
 		acrn_intr_handler();
@@ -60,6 +64,16 @@ __visible void __irq_entry acrn_hv_vector_handler(struct pt_regs *regs)
 	set_irq_regs(old_regs);
 }
 
+void acrn_setup_intr_irq(void (*handler)(void))
+{
+	acrn_intr_handler = handler;
+}
+
+void acrn_remove_intr_irq(void)
+{
+	acrn_intr_handler = NULL;
+}
+
 const __initconst struct hypervisor_x86 x86_hyper_acrn = {
 	.name                   = "ACRN",
 	.detect                 = acrn_detect,
@@ -67,3 +81,5 @@ const __initconst struct hypervisor_x86 x86_hyper_acrn = {
 	.init.init_platform     = acrn_init_platform,
 	.init.x2apic_available  = acrn_x2apic_available,
 };
+EXPORT_SYMBOL(acrn_setup_intr_irq);
+EXPORT_SYMBOL(acrn_remove_intr_irq);
-- 
2.22.0.545.g9c9b961d7e

