From 32ca06d5306cc591562d08f340d54af4ae7e9fa6 Mon Sep 17 00:00:00 2001
From: "Tan, Tee Min" <tee.min.tan@intel.com>
Date: Thu, 11 Jul 2019 19:21:28 +0800
Subject: [PATCH 062/104] net: stmmac: introduce external trigger hw
 timestamping

This adds support for External Trigger hardware timestamping.
While interrupt has been fired, ptp_time will being read and store
in ptp_clock_event with type of PTP_CLOCK_EXTTS.

1) Enable external trigger (auxts)
   # echo <index> <enable> /sys/class/ptp/ptpX/extts_enable

Signed-off-by: Tan, Tee Min
---
 drivers/net/ethernet/stmicro/stmmac/dwmac4.h  |  1 +
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  5 +++-
 .../ethernet/stmicro/stmmac/stmmac_hwtstamp.c | 30 +++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |  4 +++
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  2 ++
 .../net/ethernet/stmicro/stmmac/stmmac_ptp.c  | 20 +++++++++++++
 include/linux/stmmac.h                        |  2 ++
 7 files changed, 63 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4.h b/drivers/net/ethernet/stmicro/stmmac/dwmac4.h
index b0845b7447b8..dbe3c1a5cd36 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4.h
@@ -248,6 +248,7 @@ enum power_event {
 #define GMAC_TIMESTAMP_AUXTSTRIG	BIT(2)
 #define GMAC_TIMESTAMP_ATSNS_MASK	GENMASK(29, 25)
 #define GMAC_TIMESTAMP_ATSNS_SHIFT	25
+#define GMAC_TIMESTAMP_ATSSTM		BIT(24)
 
 /*  MTL registers */
 #define MTL_OPERATION_MODE		0x00000c00
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 08425f3f5861..5c65304a2e64 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -565,6 +565,7 @@ struct stmmac_serdes_ops {
 	stmmac_do_callback(__priv, serdes, speed_mode_2500, __args)
 
 struct mii_bus;
+struct stmmac_priv;
 
 /* PTP and HW Timer helpers */
 struct stmmac_hwtimestamp {
@@ -579,6 +580,7 @@ struct stmmac_hwtimestamp {
 	void (*get_arttime)(struct mii_bus *mii, int intel_adhoc_addr,
 			    u64 *art_time);
 	void (*get_ptptime)(void __iomem *ioaddr, u64 *ptp_time);
+	void (*tstamp_interrupt)(struct stmmac_priv *priv);
 };
 
 #define stmmac_config_hw_tstamping(__priv, __args...) \
@@ -597,6 +599,8 @@ struct stmmac_hwtimestamp {
 	stmmac_do_void_callback(__priv, ptp, get_arttime, __args)
 #define stmmac_get_ptptime(__priv, __args...) \
 	stmmac_do_void_callback(__priv, ptp, get_ptptime, __args)
+#define stmmac_tstamp_interrupt(__priv, __args...) \
+	stmmac_do_void_callback(__priv, ptp, tstamp_interrupt, __args)
 
 /* Helpers to manage the descriptors for chain and ring modes */
 struct stmmac_mode_ops {
@@ -625,7 +629,6 @@ struct stmmac_mode_ops {
 #define stmmac_clean_desc3(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mode, clean_desc3, __args)
 
-struct stmmac_priv;
 struct tc_cls_u32_offload;
 struct tc_cbs_qopt_offload;
 struct tc_taprio_qopt_offload;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c
index 6a4dcaa3f501..acc742caadc4 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c
@@ -188,6 +188,35 @@ static void get_ptptime(void __iomem *ptpaddr, u64 *ptp_time)
 	*ptp_time = ns;
 }
 
+static void tstamp_interrupt(struct stmmac_priv *priv)
+{
+	struct ptp_clock_event event;
+	u32 num_snapshot;
+	u32 tsync_int;
+	u64 ptp_time;
+	int i;
+
+	tsync_int = readl(priv->ioaddr + GMAC_INT_STATUS) &
+			  GMAC_INT_TSIE;
+
+	if (!tsync_int)
+		return;
+
+	if (priv->plat->ext_snapshot_en) {
+		num_snapshot = (readl(priv->ioaddr + GMAC_TIMESTAMP_STATUS) &
+				GMAC_TIMESTAMP_ATSNS_MASK) >>
+				GMAC_TIMESTAMP_ATSNS_SHIFT;
+
+		for (i = 0; i < num_snapshot; i++) {
+			get_ptptime(priv->ptpaddr, &ptp_time);
+			event.type = PTP_CLOCK_EXTTS;
+			event.index = 0;
+			event.timestamp = ptp_time;
+			ptp_clock_event(priv->ptp_clock, &event);
+		}
+	}
+}
+
 const struct stmmac_hwtimestamp stmmac_ptp = {
 	.config_hw_tstamping = config_hw_tstamping,
 	.init_systime = init_systime,
@@ -197,4 +226,5 @@ const struct stmmac_hwtimestamp stmmac_ptp = {
 	.get_systime = get_systime,
 	.get_arttime = get_arttime,
 	.get_ptptime = get_ptptime,
+	.tstamp_interrupt = tstamp_interrupt,
 };
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 538c17a79d3b..436f649429a2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -4121,6 +4121,8 @@ static void stmmac_common_interrupt(struct stmmac_priv *priv)
 			else
 				netif_carrier_off(priv->dev);
 		}
+
+		stmmac_tstamp_interrupt(priv, priv);
 	}
 }
 
@@ -4265,6 +4267,8 @@ static irqreturn_t stmmac_msi_intr_rx(int irq, void *data)
 
 	stmmac_napi_check(priv, chan, DMA_DIR_RX);
 
+	stmmac_tstamp_interrupt(priv, priv);
+
 	return IRQ_HANDLED;
 }
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 59cf1a641f92..d5bb5d39c81f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -276,6 +276,8 @@ static int intel_mgbe_common_data(struct pci_dev *pdev,
 	plat->tils = 0;
 
 	plat->int_snapshot_num = AUX_SNAPSHOT1;
+	plat->ext_snapshot_num = AUX_SNAPSHOT0;
+	plat->ext_snapshot_en = 0;
 
 	return 0;
 }
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c
index 31515b9ee831..5fd0537f3fb8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.c
@@ -136,9 +136,11 @@ static int stmmac_enable(struct ptp_clock_info *ptp,
 {
 	struct stmmac_priv *priv =
 	    container_of(ptp, struct stmmac_priv, ptp_clock_ops);
+	void __iomem *ptpaddr = priv->ptpaddr;
 	struct stmmac_pps_cfg *cfg;
 	int ret = -EOPNOTSUPP;
 	unsigned long flags;
+	u32 acr_value;
 
 	switch (rq->type) {
 	case PTP_CLK_REQ_PEROUT:
@@ -156,6 +158,23 @@ static int stmmac_enable(struct ptp_clock_info *ptp,
 					     priv->systime_flags);
 		spin_unlock_irqrestore(&priv->ptp_lock, flags);
 		break;
+	case PTP_CLK_REQ_EXTTS:
+		priv->plat->ext_snapshot_en = on;
+		acr_value = readl(ptpaddr + PTP_ACR);
+		acr_value &= ~PTP_ACR_MASK;
+		if (on) {
+			/* Enable External snapshot trigger */
+			acr_value |= priv->plat->ext_snapshot_num;
+			acr_value |= PTP_ACR_ATSFC;
+			pr_info("Auxiliary Snapshot %d enable\n",
+				priv->plat->ext_snapshot_num >> 5);
+		} else {
+			pr_info("Auxiliary Snapshot %d disable\n",
+				priv->plat->ext_snapshot_num >> 5);
+		}
+		writel(acr_value, ptpaddr + PTP_ACR);
+		ret = 0;
+		break;
 	default:
 		break;
 	}
@@ -323,6 +342,7 @@ void stmmac_ptp_register(struct stmmac_priv *priv)
 		stmmac_ptp_clock_ops.max_adj = priv->plat->ptp_max_adj;
 
 	stmmac_ptp_clock_ops.n_per_out = priv->dma_cap.pps_out_num;
+	stmmac_ptp_clock_ops.n_ext_ts = priv->dma_cap.aux_snapshot_n;
 
 	spin_lock_init(&priv->ptp_lock);
 	priv->ptp_clock_ops = stmmac_ptp_clock_ops;
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 80badbc370f4..d5410aa21501 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -217,5 +217,7 @@ struct plat_stmmacenet_data {
 	u32 fgos;
 	bool has_art;
 	int int_snapshot_num;
+	int ext_snapshot_num;
+	int ext_snapshot_en;
 };
 #endif
-- 
2.17.1

