From 0bf39fec07d6b717eabf5c82cfaf2f80abf1ae11 Mon Sep 17 00:00:00 2001
From: Cezary Rojewski <cezary.rojewski@intel.com>
Date: Fri, 12 Apr 2019 11:49:54 +0200
Subject: [PATCH 158/193] ASoC: Intel: Skylake: Allow for trace configuration
 via debugfs

Define new files within IPC debugfs subdirectory for configuring
information received from firmware with traces.

Change-Id: I1f9851f0ca53b0e0b54ef390755db2d7e206ed79
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
Reviewed-on:
Reviewed-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c | 109 ++++++++++++++++++++++++++++
 1 file changed, 109 insertions(+)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 9f1fcd0d16c8..70269610b525 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -23,6 +23,7 @@
 #define FW_REG_BUF	PAGE_SIZE
 #define FW_REG_SIZE	0x60
 #define MAX_SSP 	6
+#define DISABLE_TIMERS	UINT_MAX
 
 struct nhlt_blob {
 	size_t size;
@@ -46,6 +47,8 @@ struct skl_debug {
 	struct nhlt_blob ssp_blob[2*MAX_SSP];
 	struct nhlt_blob dmic_blob;
 	struct skl_pipe_event_data data;
+	u32 aging_timer_period;
+	u32 fifo_full_timer_period;
 };
 
 /**
@@ -534,6 +537,96 @@ static const struct file_operations trace_fops = {
 	.release = trace_release,
 };
 
+static ssize_t trace_enable_write(struct file *file,
+		const char __user *from, size_t count, loff_t *ppos)
+{
+	struct skl_debug *d = file->private_data;
+	struct sst_dsp *dsp = d->skl->dsp;
+	char *buf;
+	u32 *tkns;
+	size_t num_tkns;
+	int ret;
+
+	buf = kmalloc(count + 1, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	ret = simple_write_to_buffer(buf, count, ppos, from, count);
+	if (ret != count) {
+		ret = ret >= 0 ? -EIO : ret;
+		goto exit;
+	}
+
+	buf[count] = '\0';
+	ret = strsplit_u32((char **)&buf, ",", &tkns, &num_tkns);
+	if (ret < 0)
+		goto exit;
+	if (!num_tkns || num_tkns < (hweight_long(*tkns) + 1)) {
+		ret = -EINVAL;
+		goto free_tkns;
+	}
+
+	ret = dsp->fw_ops.enable_logs(dsp, SKL_LOG_ENABLE,
+			d->aging_timer_period, d->fifo_full_timer_period,
+			*tkns, tkns + 1);
+	if (ret < 0)
+		goto free_tkns;
+
+	ret = count;
+free_tkns:
+	kfree(tkns);
+exit:
+	kfree(buf);
+	return ret;
+}
+
+static const struct file_operations trace_enable_fops = {
+	.open = simple_open,
+	.write = trace_enable_write,
+	.llseek = default_llseek,
+};
+
+static ssize_t trace_disable_write(struct file *file,
+		const char __user *from, size_t count, loff_t *ppos)
+{
+	struct skl_debug *d = file->private_data;
+	struct sst_dsp *dsp = d->skl->dsp;
+	char *buf;
+	unsigned long mask;
+	int ret;
+
+	buf = kmalloc(count + 1, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	ret = simple_write_to_buffer(buf, count, ppos, from, count);
+	if (ret != count) {
+		ret = ret >= 0 ? -EIO : ret;
+		goto exit;
+	}
+
+	buf[count] = '\0';
+	ret = kstrtoul(buf, 0, &mask);
+	if (ret < 0)
+		goto exit;
+
+	ret = dsp->fw_ops.enable_logs(dsp, SKL_LOG_DISABLE,
+			DISABLE_TIMERS, DISABLE_TIMERS, mask, NULL);
+	if (ret < 0)
+		goto exit;
+
+	ret = count;
+exit:
+	kfree(buf);
+	return ret;
+}
+
+static const struct file_operations trace_disable_fops = {
+	.open = simple_open,
+	.write = trace_disable_write,
+	.llseek = default_llseek,
+};
+
 static int skl_debugfs_init_ipc(struct skl_debug *d)
 {
 	if (!debugfs_create_file("injection_dma", 0444,
@@ -548,6 +641,22 @@ static int skl_debugfs_init_ipc(struct skl_debug *d)
 	if (!debugfs_create_file("trace", 0444,
 			d->ipc, d, &trace_fops))
 		return -EIO;
+	if (!debugfs_create_file("trace_enable", 0200,
+			d->ipc, d, &trace_enable_fops))
+		return -EIO;
+	if (!debugfs_create_file("trace_disable", 0200,
+			d->ipc, d, &trace_disable_fops))
+		return -EIO;
+	if (!debugfs_create_u32("trace_aging_period", 0644,
+			d->ipc, &d->aging_timer_period))
+		return -EIO;
+	if (!debugfs_create_u32("trace_fifo_full_period", 0644,
+			d->ipc, &d->fifo_full_timer_period))
+		return -EIO;
+
+	/* Initialize timer periods with recommended defaults */
+	d->aging_timer_period = 10;
+	d->fifo_full_timer_period = 10;
 
 	return 0;
 }
-- 
2.17.1

