From e362566b9a86bf8781ead9517627f7bb1d59c54e Mon Sep 17 00:00:00 2001
From: Ping Gao <ping.a.gao@intel.com>
Date: Wed, 30 Aug 2017 14:59:22 +0800
Subject: [PATCH 0950/2367] drm/i915/gvt: Forbid command to access non-context
 registers

After MMIO save/restore removing, the guest cannot access non-context
registers through cmd. This patch implement it by replacing the
target non-context register with a non-functional one in related
commands.

v2: 1. sort the non-context MMIO lists for searching friendly.
    2. add a new flag F_NON_CONTEXT, it help to do fast non-context
	MMIOs checking during runtime.

v3: Mark non-context MMIOs by walk the array.
v4: Define PVINFO page as a target scratch reg to redirect the cmd access.

Change-Id: Ieffad67ec5758921aebd4c09760f4a8e58ccc338
Signed-off-by: Ping Gao <ping.a.gao@intel.com>
Reviewed-by: Singh, Satyeshwar <satyeshwar.singh@intel.com>
Reviewed-on: https://android.intel.com/613372
Reviewed-by: He, Min <min.he@intel.com>
Reviewed-by: Jiang, Fei <fei.jiang@intel.com>
Reviewed-by: Dong, Eddie <eddie.dong@intel.com>
Tested-by: Dong, Eddie <eddie.dong@intel.com>
---
 drivers/gpu/drm/i915/gvt/cmd_parser.c |  9 +++++++++
 drivers/gpu/drm/i915/gvt/gvt.h        | 30 ++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/gvt/handlers.c   |  4 +++-
 drivers/gpu/drm/i915/gvt/render.c     | 32 ++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_pvinfo.h    |  6 ++++++
 5 files changed, 80 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/gvt/cmd_parser.c b/drivers/gpu/drm/i915/gvt/cmd_parser.c
index 0014683..573aec0 100644
--- a/drivers/gpu/drm/i915/gvt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/gvt/cmd_parser.c
@@ -865,6 +865,15 @@ static int cmd_reg_handler(struct parser_exec_state *s,
 		patch_value(s, cmd_ptr(s, index), VGT_PVINFO_PAGE);
 	}
 
+	/* Re-direct the non-context MMIO access to VGT_SCRATCH_REG, it
+	 * has no functional impact to HW.
+	 */
+	if (!strcmp(cmd, "lri") || !strcmp(cmd, "lrr-dst")
+		|| !strcmp(cmd, "lrm") || !strcmp(cmd, "pipe_ctrl")) {
+		if (intel_gvt_mmio_is_non_context(gvt, offset))
+			patch_value(s, cmd_ptr(s, index), VGT_SCRATCH_REG);
+	}
+
 	/* TODO: Update the global mask if this MMIO is a masked-MMIO */
 	intel_gvt_mmio_set_cmd_accessed(gvt, offset);
 	return 0;
diff --git a/drivers/gpu/drm/i915/gvt/gvt.h b/drivers/gpu/drm/i915/gvt/gvt.h
index 5b120e4..e99456ac 100644
--- a/drivers/gpu/drm/i915/gvt/gvt.h
+++ b/drivers/gpu/drm/i915/gvt/gvt.h
@@ -225,6 +225,9 @@ struct intel_gvt_mmio {
 #define F_CMD_ACCESSED	(1 << 5)
 /* This reg could be accessed by unaligned address */
 #define F_UNALIGN	(1 << 6)
+/* This reg is not in the context */
+#define F_NON_CONTEXT	(1 << 7)
+
 
 	struct gvt_mmio_block *mmio_block;
 	unsigned int num_mmio_block;
@@ -616,7 +619,34 @@ static inline bool intel_gvt_mmio_has_mode_mask(
 	return gvt->mmio.mmio_attribute[offset >> 2] & F_MODE_MASK;
 }
 
+ /**
+ * intel_gvt_mmio_is_non_context - check a MMIO is non-context
+ * @gvt: a GVT device
+ * @offset: register offset
+ *
+ */
+static inline bool intel_gvt_mmio_is_non_context(
+			struct intel_gvt *gvt, unsigned int offset)
+{
+	return gvt->mmio.mmio_attribute[offset >> 2] & F_NON_CONTEXT;
+}
+
+/**
+ * intel_gvt_mmio_set_non_context - mark a MMIO is non-context
+ * @gvt: a GVT device
+ * @offset: register offset
+ *
+ */
+static inline void intel_gvt_mmio_set_non_context(
+			struct intel_gvt *gvt, unsigned int offset)
+{
+	gvt->mmio.mmio_attribute[offset >> 2] |= F_NON_CONTEXT;
+}
+
 #include "trace.h"
+
+void intel_gvt_mark_noncontext_mmios(struct intel_gvt *gvt);
+
 #include "mpt.h"
 
 #endif
diff --git a/drivers/gpu/drm/i915/gvt/handlers.c b/drivers/gpu/drm/i915/gvt/handlers.c
index fa1e19b..f7f08b6 100644
--- a/drivers/gpu/drm/i915/gvt/handlers.c
+++ b/drivers/gpu/drm/i915/gvt/handlers.c
@@ -3348,13 +3348,15 @@ int intel_gvt_setup_mmio_info(struct intel_gvt *gvt)
 
 	gvt_dbg_mmio("traced %u virtual mmio registers\n",
 		     gvt->mmio.num_tracked_mmio);
+
+	intel_gvt_mark_noncontext_mmios(gvt);
+
 	return 0;
 err:
 	intel_gvt_clean_mmio_info(gvt);
 	return ret;
 }
 
-
 /**
  * intel_vgpu_default_mmio_read - default MMIO read handler
  * @vgpu: a vGPU
diff --git a/drivers/gpu/drm/i915/gvt/render.c b/drivers/gpu/drm/i915/gvt/render.c
index 9a39a44..30372af 100644
--- a/drivers/gpu/drm/i915/gvt/render.c
+++ b/drivers/gpu/drm/i915/gvt/render.c
@@ -141,6 +141,38 @@ static struct render_mmio gen9_render_mmio_list[] __cacheline_aligned = {
 	{RCS, _MMIO(0x20e4), 0xffff, false},
 };
 
+void intel_gvt_mark_noncontext_mmios(struct intel_gvt *gvt)
+{
+	uint32_t reg;
+	struct render_mmio *mmio;
+	int i, array_size;
+
+	for (i = 0; i < 64 * 5; i++) {
+		reg = GEN9_GFX_MOCS(i).reg;
+		intel_gvt_mmio_set_non_context(gvt, reg);
+	}
+
+	for (i = 0; i < 32; i++) {
+		reg = GEN9_LNCFCMOCS(i).reg;
+		intel_gvt_mmio_set_non_context(gvt, reg);
+	}
+
+	if (IS_SKYLAKE(gvt->dev_priv)
+		|| IS_BROXTON(gvt->dev_priv)) {
+		mmio = gen9_render_mmio_list;
+		array_size = ARRAY_SIZE(gen9_render_mmio_list);
+	} else {
+		mmio = gen8_render_mmio_list;
+		array_size = ARRAY_SIZE(gen8_render_mmio_list);
+	}
+
+	for (i = 0; i < array_size; i++, mmio++) {
+		if (mmio->in_context)
+			continue;
+		intel_gvt_mmio_set_non_context(gvt, mmio->reg.reg);
+	}
+}
+
 static u32 gen9_render_mocs[I915_NUM_ENGINES][64];
 static u32 gen9_render_mocs_L3[32];
 
diff --git a/drivers/gpu/drm/i915/i915_pvinfo.h b/drivers/gpu/drm/i915/i915_pvinfo.h
index cea90ab..a4c897b 100644
--- a/drivers/gpu/drm/i915/i915_pvinfo.h
+++ b/drivers/gpu/drm/i915/i915_pvinfo.h
@@ -28,6 +28,12 @@
 #define VGT_PVINFO_PAGE	0x78000
 #define VGT_PVINFO_SIZE	0x1000
 
+/* Scratch reg used for redirecting command access to registers, any
+ * command access to PVINFO page would be discarded, so it has no HW
+ * impact.
+ */
+#define VGT_SCRATCH_REG VGT_PVINFO_PAGE
+
 /*
  * The following structure pages are defined in GEN MMIO space
  * for virtualization. (One page for now)
-- 
2.7.4

