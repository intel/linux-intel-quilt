From 8bf812560a502059b8ab1bf3ae2c5537b6614ebf Mon Sep 17 00:00:00 2001
From: Armin Reese <armin.c.reese@intel.com>
Date: Tue, 16 Jan 2018 14:51:09 -0800
Subject: [PATCH 1033/2345] REVERTME [VPG]: i915/drm: Add userdata member to
 drm_i915_gem_object for storing app specific metainfo

New feature: A uint32_t 'userdata' member has been added to
struct drm_i915_gem_object. This member can be used to tag a
surface with information needed to interpret its contents.
In a typical scenario, 'userdata' will be set by the process
providing the GEM object with its contents and sharing via flink or
DRM prime fd. Later, another process also accessing the surface
(via create_from_name or prime_fd_to_handle) can consume the data,
interpreting it according to the value of 'userdata'. Though this is
one possible function of 'userdata', it can be applied anywhere
user processes agree on its interpretation.

REVERTME: This patch works as a temporary patch to support buffer based
data sharing among different processes. Currently, it is used
to support protected content and other media features. It will
be replaced by a formal upstreaming solution to i915 driver which
will support generic per buffer user data (payload) sharing among
different processes.

Issue:  AMW-2

v2: For drm 4.11

v3:
 - For drm 4.14
 - Fixed the code alignment issues
 - Moved i915_gem_object_put() out of the scope of struct_mutex lock

Change-Id: If6ba53ab81c28b7f846ba00be78294e2b615680e
Signed-off-by: Armin Reese <armin.c.reese@intel.com>
Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
Signed-off-by: Michel Thierry <michel.thierry@intel.com>
Signed-off-by: Jackie Li <yaodong.li@intel.com>
(cherry picked from commit 712cc1f9cdb4b25009f67fe4d7d7cc735fc6c9f0)
---
 drivers/gpu/drm/i915/i915_drv.c        |  1 +
 drivers/gpu/drm/i915/i915_drv.h        |  3 +++
 drivers/gpu/drm/i915/i915_gem.c        | 33 +++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_gem_object.h |  3 +++
 include/uapi/drm/i915_drm.h            | 17 +++++++++++++++++
 5 files changed, 57 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index b927e7a..a9d4080 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -2767,6 +2767,7 @@ static const struct drm_ioctl_desc i915_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(I915_PERF_ADD_CONFIG, i915_perf_add_config_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_PERF_REMOVE_CONFIG, i915_perf_remove_config_ioctl, DRM_UNLOCKED|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_GVTBUFFER, i915_gem_gvtbuffer_ioctl, DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(I915_GEM_ACCESS_USERDATA, i915_gem_access_userdata_ioctl, DRM_RENDER_ALLOW),
 };
 
 static struct drm_driver driver = {
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 76ba672..4649ea9 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -3633,6 +3633,9 @@ int i915_gem_object_attach_phys(struct drm_i915_gem_object *obj,
 int i915_gem_open(struct drm_i915_private *i915, struct drm_file *file);
 void i915_gem_release(struct drm_device *dev, struct drm_file *file);
 
+int i915_gem_access_userdata_ioctl(struct drm_device *dev, void *data,
+				   struct drm_file *file);
+
 int i915_gem_object_set_cache_level(struct drm_i915_gem_object *obj,
 				    enum i915_cache_level cache_level);
 
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 47891a9..a49ab47 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -5162,6 +5162,39 @@ i915_gem_object_create_from_data(struct drm_i915_private *dev_priv,
 	return ERR_PTR(err);
 }
 
+/**
+ * i915_gem_access_userdata_ioctl -Reads/writes userdata for the object
+ * @dev: DRM device
+ * @data: struct drm_i915_gem_access_userdata
+ * @file: GEM object info
+ *
+ * Set/Get 32-bit private user defined data stored with a given GEM object.
+ */
+int
+i915_gem_access_userdata_ioctl(struct drm_device *dev, void *data,
+			       struct drm_file *file)
+{
+	struct drm_i915_gem_access_userdata *args = data;
+	struct drm_i915_gem_object *obj;
+
+	obj = i915_gem_object_lookup(file, args->handle);
+	if (!obj)
+		return -ENOENT;
+
+	mutex_lock(&dev->struct_mutex);
+
+	if (args->write)
+		obj->userdata = args->userdata;
+	else
+		args->userdata = obj->userdata;
+
+	mutex_unlock(&dev->struct_mutex);
+
+	i915_gem_object_put(obj);
+
+	return 0;
+}
+
 struct scatterlist *
 i915_gem_object_get_sg(struct drm_i915_gem_object *obj,
 		       unsigned int n,
diff --git a/drivers/gpu/drm/i915/i915_gem_object.h b/drivers/gpu/drm/i915/i915_gem_object.h
index c30d8f8..63b88df 100644
--- a/drivers/gpu/drm/i915/i915_gem_object.h
+++ b/drivers/gpu/drm/i915/i915_gem_object.h
@@ -213,6 +213,9 @@ struct drm_i915_gem_object {
 	/** Record of address bit 17 of each page at last unbind. */
 	unsigned long *bit_17;
 
+	/** Object userdata */
+	u32 userdata;
+
 	union {
 		struct i915_gem_userptr {
 			uintptr_t ptr;
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 51784cc..3ad5bc7 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -263,6 +263,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_I915_PERF_ADD_CONFIG	0x37
 #define DRM_I915_PERF_REMOVE_CONFIG	0x38
 #define DRM_I915_GEM_GVTBUFFER		0x39
+#define DRM_I915_GEM_ACCESS_USERDATA	0x3c
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
 #define DRM_IOCTL_I915_FLUSH		DRM_IO ( DRM_COMMAND_BASE + DRM_I915_FLUSH)
@@ -322,6 +323,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_IOCTL_I915_PERF_REMOVE_CONFIG	DRM_IOW(DRM_COMMAND_BASE + DRM_I915_PERF_REMOVE_CONFIG, __u64)
 
 #define DRM_IOCTL_I915_GEM_GVTBUFFER		DRM_IOWR(DRM_COMMAND_BASE + DRM_I915_GEM_GVTBUFFER, struct drm_i915_gem_gvtbuffer)
+#define DRM_IOCTL_I915_GEM_ACCESS_USERDATA	DRM_IOWR(DRM_COMMAND_BASE + DRM_I915_GEM_ACCESS_USERDATA, struct drm_i915_gem_access_userdata)
 
 /* Allow drivers to submit batchbuffers directly to hardware, relying
  * on the security mechanisms provided by hardware.
@@ -1150,6 +1152,21 @@ struct drm_i915_gem_get_tiling {
 	__u32 phys_swizzle_mode;
 };
 
+struct drm_i915_gem_access_userdata {
+	/** Handle of the buffer whose userdata will be accessed */
+	__u32 handle;
+
+	/**
+	 * Userdata:  This quantity is user defined
+	 */
+	__u32 userdata;
+
+	/**
+	 * Write: 0=read userdata, 1=write userdata
+	 */
+	__u32 write;
+};
+
 struct drm_i915_gem_get_aperture {
 	/** Total size of the aperture used by i915_gem_execbuffer, in bytes */
 	__u64 aper_size;
-- 
2.7.4

