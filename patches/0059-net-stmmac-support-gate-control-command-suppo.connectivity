From 595b21e0043deb6711ddb5c01a94b1c046d47e6d Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Tue, 13 Aug 2019 22:38:15 +0800
Subject: [PATCH 059/104] net: stmmac: support gate control command support for
 Frame Preemption

When both IEEE 802.1Qbv and IEEE 802.1Qbu are enabled, the gate control
command supports two additional command types for Frame Preemption:

a) Set-And-Hold-MAC: Set Gates Mask and put preemptible MAC (pMAC) to hold
   state, i.e., no traffic frames are allowed to be transmitte from pMAC.
   Express frame is allowed to be transmitted without any interruption.

b) Set-And-Release-MAC: Set Gates Mask and put pMAC to release state, i.e.,
   traffic frames are allowed to be transmitted from pMAC and if Express
   frame is available for transmission, the preemptible frame will be
   preempted.

In EQoS v5.xx, when both EST & FPE are enabled, TxQ0 is always preemptible.
The bit field corresponding to TxQ0 is used to indicate which of the above
commands has been programmed:-

1b : Set-And-Hold-MAC
0b : Set-And-Release-MAC

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_tc.c   | 25 +++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  1 +
 2 files changed, 26 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index 86adf0652a1e..6b1f6f8acaae 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -356,6 +356,7 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 	u64 time_extension = qopt->cycle_time_extension;
 	u64 base_time = ktime_to_ns(qopt->base_time);
 	u64 cycle_time = qopt->cycle_time;
+	struct tsn_hw_cap *cap;
 	struct est_gcrr egcrr;
 	u32 extension_ns;
 	u32 extension_s;
@@ -397,9 +398,12 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 		qopt->base_time, qopt->cycle_time,
 		qopt->cycle_time_extension);
 
+	cap = &priv->hw->tsn_info.cap;
+
 	for (i = 0; i < qopt->num_entries; i++) {
 		struct est_gc_entry sgce;
 
+		sgce.command = qopt->entries[i].command;
 		sgce.gates = qopt->entries[i].gate_mask;
 		sgce.ti_nsec = qopt->entries[i].interval;
 
@@ -414,6 +418,27 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 			"EST: gates 0x%x, ti_ns %u, cycle_ns %llu\n",
 			sgce.gates, sgce.ti_nsec, cycle_time);
 
+		if ((sgce.command == TC_TAPRIO_CMD_SET_AND_HOLD ||
+		     sgce.command == TC_TAPRIO_CMD_SET_AND_RELEASE) &&
+		     !fpe_q_mask) {
+			dev_err(priv->device,
+				"FPE: FPE QMask must not be all 0s!\n");
+				return -EINVAL;
+		}
+
+		/* If FPE is enabled together with EST, the GCL bit for TxQ0
+		 * marks if Set-And-Hold-MAC(1) or Set-And-Release-MAC(0)
+		 * operation. Under such condition, any TxQ that is marked as
+		 * preemptible in txqpec, the GCL bit is ignored. As this is
+		 * DWMAC specific definition, we clear 'gates' bit corresponds
+		 * to TxQ0 up-front to prevent incorrectly hold pMAC.
+		 */
+		if (fpe_q_mask) {
+			sgce.gates &= ~cap->pmac_bit;
+			if (sgce.command == TC_TAPRIO_CMD_SET_AND_HOLD)
+				sgce.gates |= cap->pmac_bit;
+		}
+
 		ret = stmmac_set_est_gce(priv, priv->hw, priv->dev,
 					 &sgce, i, 0, 0);
 		if (ret) {
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index 2a27e2b86a60..e0770d6b6c7f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -78,6 +78,7 @@ struct tsn_hw_cap {
 
 /* EST Gate Control Entry */
 struct est_gc_entry {
+	u8 command;		/* Gate command */
 	u32 gates;		/* gate control: 0: closed,
 				 *               1: open.
 				 */
-- 
2.17.1

