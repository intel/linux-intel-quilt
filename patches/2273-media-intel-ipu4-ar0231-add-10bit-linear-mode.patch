From 48f8a18bde1f49997e134cd1d53573a1e5b55275 Mon Sep 17 00:00:00 2001
From: yzha108 <yanli.l.zhang@intel.com>
Date: Tue, 14 Aug 2018 21:14:55 +0800
Subject: [PATCH 2273/2345] media: intel-ipu4: ar0231: add 10bit linear mode.

Message for Open Source:
Add 10 bit linear mode support

Message for Internal:
[Issue/Feature]
Add 10 bit linear mode support

[Root Cause/Changes]
Add 10 bit linear mode support

Change-Id: Icd35d642ed267dff8721167a4748058d75bfe80d
TrackedOn: #JIIAP-571
Signed-off-by: yzha108 <yanli.l.zhang@intel.com>
(cherry picked from commit 013764b10e13379a7018459e2224da5bcb417786)
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 .../i2c/crlmodule/crl_ar0231at_configuration.h     | 378 ++++++++++++++++++++-
 drivers/media/i2c/max9286-reg-settings.h           |  25 +-
 drivers/media/i2c/max9286.c                        |  93 +++--
 3 files changed, 471 insertions(+), 25 deletions(-)

diff --git a/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h b/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h
index 9ddec78..ccca157 100644
--- a/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h
+++ b/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h
@@ -30,6 +30,18 @@ struct crl_pll_configuration ar0231at_pll_configurations[] = {
 		.pll_regs_items = 0,
 		.pll_regs = 0,
 	},
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 87750000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 211200000,
+		.pixel_rate_pa = 211200000, /* pixel_rate = op_sys_clk*2 *csi_lanes/bitsperpixel */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
 };
 
 struct crl_sensor_subdev_config ar0231at_sensor_subdevs[] = {
@@ -92,6 +104,325 @@ struct crl_ctrl_data_pair ar0231at_ctrl_data_modes[] = {
 		.ctrl_id = CRL_CID_EXPOSURE_MODE,
 		.data = 3,
 	},
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 4,
+	},
+};
+
+static struct crl_register_write_rep ar0231at_1920_1088_10bit_linear_mode[] = {
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x1058, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x3092, CRL_REG_LEN_16BIT, 0x0C24, 0x10 },
+	{ 0x337A, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3520, CRL_REG_LEN_16BIT, 0x1288, 0x10 },
+	{ 0x3522, CRL_REG_LEN_16BIT, 0x880C, 0x10 },
+	{ 0x3524, CRL_REG_LEN_16BIT, 0x0C12, 0x10 },
+	{ 0x352C, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x354A, CRL_REG_LEN_16BIT, 0x007F, 0x10 },
+	{ 0x350C, CRL_REG_LEN_16BIT, 0x055C, 0x10 },
+	{ 0x3506, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3508, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3100, CRL_REG_LEN_16BIT, 0x4000, 0x10 },
+	{ 0x3280, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3282, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3284, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3286, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3288, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3290, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3292, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3294, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3296, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3298, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x2512, CRL_REG_LEN_16BIT, 0x8000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3350, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1578, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7B24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xEA24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1022, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2410, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x155A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24EA, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2324, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x647A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2404, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x052C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x400A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3851, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0801, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0408, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1180, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2652, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1518, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0906, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1348, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1002, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1016, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1181, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1189, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0D09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1413, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2B15, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0311, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1409, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0110, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDD11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x9B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0F11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1A12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xE609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x290B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0904, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0923, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x092C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1388, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C14, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1112, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBF11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB10, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xB812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xA012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3053, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8111, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x010D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0815, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1313, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0515, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0213, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0411, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0814, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD908, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x091A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0903, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10D6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11D9, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0917, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0913, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x121A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1250, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1076, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10E6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1240, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0925, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13AD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0902, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0907, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x138D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0914, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B13, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1C0C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0920, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1262, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1066, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x090A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x093B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1263, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1508, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11B8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x12A0, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1200, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1026, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1300, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1100, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x437A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B05, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0708, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4137, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x502C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2CFE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15FE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C2C, 0x10 },
+	{ 0x32E6, CRL_REG_LEN_16BIT, 0x00E0, 0x10 },
+	{ 0x1008, CRL_REG_LEN_16BIT, 0x036F, 0x10 },
+	{ 0x100C, CRL_REG_LEN_16BIT, 0x058F, 0x10 },
+	{ 0x100E, CRL_REG_LEN_16BIT, 0x07AF, 0x10 },
+	{ 0x1010, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x3230, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x3232, CRL_REG_LEN_16BIT, 0x0532, 0x10 },
+	{ 0x3234, CRL_REG_LEN_16BIT, 0x0752, 0x10 },
+	{ 0x3236, CRL_REG_LEN_16BIT, 0x00F2, 0x10 },
+	{ 0x3566, CRL_REG_LEN_16BIT, 0x3328, 0x10 },
+	{ 0x32D0, CRL_REG_LEN_16BIT, 0x3A02, 0x10 },
+	{ 0x32D2, CRL_REG_LEN_16BIT, 0x3508, 0x10 },
+	{ 0x32D4, CRL_REG_LEN_16BIT, 0x3702, 0x10 },
+	{ 0x32D6, CRL_REG_LEN_16BIT, 0x3C04, 0x10 },
+	{ 0x32DC, CRL_REG_LEN_16BIT, 0x370A, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x302A, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x302C, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x302E, CRL_REG_LEN_16BIT, 0x0003, 0x10 },
+	{ 0x3030, CRL_REG_LEN_16BIT, 0x004E, 0x10 },
+	{ 0x3036, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3038, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x30A2, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30A6, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3180, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E4, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3004, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x3008, CRL_REG_LEN_16BIT, 0x0783, 0x10 },
+	{ 0x3002, CRL_REG_LEN_16BIT, 0x003C, 0x10 },
+	{ 0x3006, CRL_REG_LEN_16BIT, 0x047B, 0x10 },
+	{ 0x3032, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0F10, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x0970, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F1, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F0, 0x10 },
+	{ 0x300C, CRL_REG_LEN_16BIT, 0x0872, 0x10 },
+	{ 0x300A, CRL_REG_LEN_16BIT, 0x054A, 0x10 },
+	{ 0x3042, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3012, CRL_REG_LEN_16BIT, 0x0163, 0x10 },
+	{ 0x3014, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C08, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x31D0, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AC, CRL_REG_LEN_16BIT, 0x0C0A, 0x10 },
+	/* try sync mode */
+	{ 0x340A, CRL_REG_LEN_16BIT, 0x0077, 0x10 },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x30CE, CRL_REG_LEN_16BIT, 0x0120, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x19DC, 0x10 },
 };
 
 static struct crl_register_write_rep ar0231at_1920_1088_linear_mode[] = {
@@ -1522,6 +1853,21 @@ struct crl_mode_rep ar0231at_modes[] = {
 		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_4hdr_mode),
 		.mode_regs = ar0231at_1920_1088_4hdr_mode,
 	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ar0231at_1920_1088_rects),
+		.sd_rects = ar0231at_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 2162,
+		.min_fll = 1354,
+		.comp_items = 1,
+		.ctrl_data = &ar0231at_ctrl_data_modes[4],
+		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_10bit_linear_mode),
+		.mode_regs = ar0231at_1920_1088_10bit_linear_mode,
+	},
 };
 
 struct crl_csi_data_fmt ar0231at_crl_csi_data_fmt[] = {
@@ -1552,7 +1898,35 @@ struct crl_csi_data_fmt ar0231at_crl_csi_data_fmt[] = {
 		.bits_per_pixel = 12,
 		.regs_items = 0,
 		.regs = 0,
-	}
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
 };
 
 static struct crl_arithmetic_ops ar0231at_ls2_ops[] = {
@@ -1826,7 +2200,7 @@ struct crl_v4l2_ctrl ar0231at_v4l2_ctrls[] = {
 		.name = "CRL_CID_EXPOSURE_MODE",
 		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
 		.data.std_data.min = 0,
-		.data.std_data.max = 3,
+		.data.std_data.max = ARRAY_SIZE(ar0231at_ctrl_data_modes)-1,
 		.data.std_data.step = 1,
 		.data.std_data.def = 0x0,
 		.flags = V4L2_CTRL_FLAG_UPDATE,
diff --git a/drivers/media/i2c/max9286-reg-settings.h b/drivers/media/i2c/max9286-reg-settings.h
index 325e375..b8b6c38 100644
--- a/drivers/media/i2c/max9286-reg-settings.h
+++ b/drivers/media/i2c/max9286-reg-settings.h
@@ -57,7 +57,7 @@ struct max9286_register_write {
 	u8 val;
 };
 
-static const struct max9286_register_write max9286_byte_order_settings[] = {
+static const struct max9286_register_write max9286_byte_order_settings_12bit[] = {
 	{0x20, 0x0B},
 	{0x21, 0x0A},
 	{0x22, 0x09},
@@ -84,4 +84,27 @@ static const struct max9286_register_write max9286_byte_order_settings[] = {
 	{0x3B, 0x10},
 };
 
+static const struct max9286_register_write max9286_byte_order_settings_10bit[] = {
+	{0x20, 0x09},
+	{0x21, 0x08},
+	{0x22, 0x07},
+	{0x23, 0x06},
+	{0x24, 0x05},
+	{0x25, 0x04},
+	{0x26, 0x03},
+	{0x27, 0x02},
+	{0x28, 0x01},
+	{0x29, 0x00},
+	{0x30, 0x19},
+	{0x31, 0x18},
+	{0x32, 0x17},
+	{0x33, 0x16},
+	{0x34, 0x15},
+	{0x35, 0x14},
+	{0x36, 0x13},
+	{0x37, 0x12},
+	{0x38, 0x11},
+	{0x39, 0x10},
+};
+
 #endif
diff --git a/drivers/media/i2c/max9286.c b/drivers/media/i2c/max9286.c
index 8fbedd8..ad64c7b 100644
--- a/drivers/media/i2c/max9286.c
+++ b/drivers/media/i2c/max9286.c
@@ -155,15 +155,31 @@ max96705_read_register(struct max9286 *max, unsigned int i, u8 reg)
 	return val;
 }
 
+/* Validate csi_data_format */
+static const struct max9286_csi_data_format *
+max9286_validate_csi_data_format(u32 code)
+{
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(max_csi_data_formats); i++) {
+		if (max_csi_data_formats[i].code == code)
+			return &max_csi_data_formats[i];
+	}
+
+	return &max_csi_data_formats[0];
+}
+
 /* Initialize image sensors and set stream on registers */
 static int max9286_set_stream(struct v4l2_subdev *subdev, int enable)
 {
 	struct max9286 *max = to_max_9286(subdev);
 	struct media_pad *remote_pad;
 	struct v4l2_subdev *sd;
-	int i, rval;
+	int i, rval, j;
 	unsigned int val;
 	u8 slval = 0xE0;
+	u8 dtval = 0xF7;
+	struct max9286_register_write *max9286_byte_order_settings;
 
 	dev_dbg(max->v4l2_sd.dev, "MAX9286 set stream. enable = %d\n", enable);
 
@@ -183,6 +199,51 @@ static int max9286_set_stream(struct v4l2_subdev *subdev, int enable)
 
 		if (!remote_pad)
 			continue;
+
+		if (enable) {
+			/*
+			 * Enable CSI-2 lanes D0, D1, D2, D3
+			 * Enable CSI-2 DBL (Double Input Mode)
+			 * Enable GMSL DBL for RAWx2
+			 * Enable RAW10/RAW12 data type
+			 */
+			u8 bpp = max9286_validate_csi_data_format(
+				max->ffmts[i][0].code)->width;
+
+			if (bpp == 10) {
+				dtval = 0xF6;
+				max9286_byte_order_settings =
+					&max9286_byte_order_settings_10bit[0];
+			} else if (bpp == 12) {
+				dtval = 0xF7;
+				max9286_byte_order_settings =
+					&max9286_byte_order_settings_12bit[0];
+			} else {
+				dev_err(max->v4l2_sd.dev,
+					"Only support RAW10/12, current bpp is %d!\n", bpp);
+				return -EINVAL;
+			}
+
+			rval = regmap_write(max->regmap8, DS_CSI_DBL_DT, dtval);
+			if (rval) {
+				dev_err(max->v4l2_sd.dev, "Failed to set data type!\n");
+				return rval;
+			}
+
+			for (j = 0; j < bpp * 2; j++) {
+				rval = max96705_write_register(max,
+					S_ADDR_MAX96705_BROADCAST - S_ADDR_MAX96705,
+					(max9286_byte_order_settings + j)->reg,
+					(max9286_byte_order_settings + j)->val);
+				if (rval) {
+					dev_err(max->v4l2_sd.dev,
+						"Failed to set max9286 byte order\n");
+					return rval;
+				}
+			}
+			usleep_range(2000, 3000);
+		}
+
 		/* Enable link */
 		slval |= (0x0F & (1 << i));
 		rval = regmap_write(max->regmap8, DS_LINK_ENABLE, slval);
@@ -354,20 +415,6 @@ static int max9286_get_format(struct v4l2_subdev *subdev,
 	return 0;
 }
 
-/* Validate csi_data_format */
-static const struct max9286_csi_data_format *
-max9286_validate_csi_data_format(u32 code)
-{
-	unsigned int i;
-
-	for (i = 0; i < ARRAY_SIZE(max_csi_data_formats); i++) {
-		if (max_csi_data_formats[i].code == code)
-			return &max_csi_data_formats[i];
-	}
-
-	return &max_csi_data_formats[0];
-}
-
 /* callback for VIDIOC_SUBDEV_S_FMT ioctl handler code */
 static int max9286_set_format(struct v4l2_subdev *subdev,
 	struct v4l2_subdev_pad_config *cfg,
@@ -720,6 +767,7 @@ static int max9286_register_subdev(struct max9286 *max)
 	v4l2_subdev_init(&max->v4l2_sd, &max9286_sd_ops);
 	snprintf(max->v4l2_sd.name, sizeof(max->v4l2_sd.name),
 		"MAX9286 %c", max->pdata->suffix);
+
 	max->v4l2_sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE |
 		V4L2_SUBDEV_FL_HAS_SUBSTREAMS;
 
@@ -890,20 +938,21 @@ static int max9286_init(struct max9286 *max, struct i2c_client *client)
 	 * Enable CSI-2 lanes D0, D1, D2, D3
 	 * Enable CSI-2 DBL (Double Input Mode)
 	 * Enable GMSL DBL for RAWx2
-	 * Enable YUV422 8-bit data type
+	 * Enable RAW12 data type by default
 	 */
-	rval = regmap_write(max->regmap8, DS_CSI_DBL_DT, 0xF7);
+	rval = regmap_write(max->regmap8, DS_CSI_DBL_DT, 0xF7); //RAW12
 	if (rval) {
-		dev_err(max->v4l2_sd.dev, "Failed to disable PRBS test!\n");
+		dev_err(max->v4l2_sd.dev, "Failed to set data type!\n");
 		return rval;
 	}
 	usleep_range(2000, 3000);
+
 	/* Enable Frame sync Auto-mode for row/column reset on frame sync
 	 * sensors
 	 */
 	rval = regmap_write(max->regmap8, DS_FSYNCMODE, 0x00);
 	if (rval) {
-		dev_err(max->v4l2_sd.dev, "Failed to disable PRBS test!\n");
+		dev_err(max->v4l2_sd.dev, "Failed to set frame sync mode!\n");
 		return rval;
 	}
 	usleep_range(2000, 3000);
@@ -914,10 +963,10 @@ static int max9286_init(struct max9286 *max, struct i2c_client *client)
 	rval = regmap_write(max->regmap8, DS_FSYNC_PERIOD_MIDDLE, 0xc2);
 	rval = regmap_write(max->regmap8, DS_FSYNC_PERIOD_HIGH, 0x2C);
 
-	for (i = 0; i < ARRAY_SIZE(max9286_byte_order_settings); i++) {
+	for (i = 0; i < ARRAY_SIZE(max9286_byte_order_settings_12bit); i++) {
 		rval = max96705_write_register(max, 0,
-				max9286_byte_order_settings[i].reg,
-				max9286_byte_order_settings[i].val);
+				max9286_byte_order_settings_12bit[i].reg,
+				max9286_byte_order_settings_12bit[i].val);
 		if (rval) {
 			dev_err(max->v4l2_sd.dev,
 				"Failed to set max9286 byte order\n");
-- 
2.7.4

