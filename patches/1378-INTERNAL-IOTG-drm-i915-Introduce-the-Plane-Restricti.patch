From a6c5c122b2a9a8f711424a1471b2d4df10bfc922 Mon Sep 17 00:00:00 2001
From: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date: Mon, 12 Mar 2018 17:52:42 -0700
Subject: [PATCH 1378/2345] INTERNAL [IOTG] drm/i915: Introduce the Plane
 Restriction feature

This feature allows restrictions to the way planes are created in the
driver. Currently driver creates a primary plane and all the sprite
planes that are possible depending on the underlying hardware.This feature
allows restrictions on the number and type of planes that are created.
To accomodate the legacy APIs the first plane that is created is
designated as DRM_PLANE_TYPE_PRIMARY.
Usecase is to restrict the planes that are available for each
domain. Each domain passes in the plane mask through command line
paramenter- available_planes_per_pipe. Only these planes are created
for each domain. Another parameter domain_plane_owners is passed
into dom0 so that gvt is aware of the plane ownership for all the domains
and can restrict access.
DDBs are written once for all planes in Dom0 when in a virtualized
environment.

Signed-off-by: Anitha Chrisanthus <anitha.chrisanthus@intel.com>
Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
Change-Id: I293c490be8994bb525e511c8d1b8324b3c70932c
---
 drivers/gpu/drm/i915/gvt/display.c    |  20 +++
 drivers/gpu/drm/i915/gvt/gvt.c        |  28 +++-
 drivers/gpu/drm/i915/gvt/handlers.c   |  10 +-
 drivers/gpu/drm/i915/i915_debugfs.c   |   2 +
 drivers/gpu/drm/i915/i915_drv.c       |  25 +++-
 drivers/gpu/drm/i915/i915_drv.h       |   5 +
 drivers/gpu/drm/i915/i915_gpu_error.c |   2 +
 drivers/gpu/drm/i915/i915_params.c    |  52 +++++++
 drivers/gpu/drm/i915/i915_params.h    |   2 +
 drivers/gpu/drm/i915/intel_display.c  | 260 ++++++++++++++++++++++++++++++++--
 drivers/gpu/drm/i915/intel_drv.h      |   7 +
 drivers/gpu/drm/i915/intel_fbc.c      |   2 +-
 drivers/gpu/drm/i915/intel_pm.c       | 123 +++++++++++++---
 drivers/gpu/drm/i915/intel_sprite.c   |   6 +-
 14 files changed, 507 insertions(+), 37 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/display.c b/drivers/gpu/drm/i915/gvt/display.c
index 71279fa..94b30c5 100644
--- a/drivers/gpu/drm/i915/gvt/display.c
+++ b/drivers/gpu/drm/i915/gvt/display.c
@@ -449,6 +449,22 @@ static void intel_gvt_vblank_work(struct work_struct *w)
 	mutex_unlock(&gvt->lock);
 }
 
+int bxt_check_planes(struct intel_vgpu *vgpu, int pipe)
+{
+	int plane = 0;
+	bool ret = false;
+
+	for (plane = 0;
+	     plane < ((INTEL_INFO(vgpu->gvt->dev_priv)->num_sprites[pipe]) + 1);
+	     plane++) {
+		if (vgpu->gvt->pipe_info[pipe].plane_owner[plane] == vgpu->id) {
+			ret = true;
+			break;
+		}
+	}
+	return ret;
+}
+
 void intel_gvt_init_pipe_info(struct intel_gvt *gvt)
 {
 	int pipe;
@@ -473,6 +489,10 @@ int bxt_setup_virtual_monitors(struct intel_vgpu *vgpu)
 	for_each_intel_connector_iter(connector, &conn_iter) {
 		if (connector->encoder->get_hw_state(connector->encoder, &pipe)
 				&& connector->detect_edid) {
+			/* if no planes are allocated for this pipe, skip it */
+			if (i915_modparams.avail_planes_per_pipe &&
+			    !bxt_check_planes(vgpu, pipe))
+				continue;
 			/* Get (Dom0) port associated with current pipe. */
 			port = enc_to_dig_port(
 					&(connector->encoder->base))->port;
diff --git a/drivers/gpu/drm/i915/gvt/gvt.c b/drivers/gpu/drm/i915/gvt/gvt.c
index e1ab43c..8430315 100644
--- a/drivers/gpu/drm/i915/gvt/gvt.c
+++ b/drivers/gpu/drm/i915/gvt/gvt.c
@@ -261,6 +261,12 @@ void intel_gvt_clean_device(struct drm_i915_private *dev_priv)
 	dev_priv->gvt = NULL;
 }
 
+#define BITS_PER_DOMAIN 4
+#define MAX_PLANES_PER_DOMAIN 4
+#define DOMAIN_PLANE_OWNER(owner, pipe, plane) \
+		((((owner) >> (pipe) * BITS_PER_DOMAIN * MAX_PLANES_PER_DOMAIN) >>  \
+		  BITS_PER_DOMAIN * (plane)) & 0xf)
+
 /**
  * intel_gvt_init_device - initialize a GVT device
  * @dev_priv: drm i915 private data
@@ -360,8 +366,28 @@ int intel_gvt_init_device(struct drm_i915_private *dev_priv)
 	}
 	gvt->idle_vgpu = vgpu;
 
-	gvt_dbg_core("gvt device initialization is done\n");
 	dev_priv->gvt = gvt;
+
+	if (i915_modparams.avail_planes_per_pipe) {
+		unsigned long long domain_plane_owners;
+		int plane;
+		enum pipe pipe;
+
+		/*
+		 * Each nibble represents domain id
+		 * ids can be from 0-F. 0 for Dom0, 1,2,3...0xF for DomUs
+		 * plane_owner[i] holds the id of the domain that owns it,eg:0,1,2 etc
+		 */
+		domain_plane_owners = i915_modparams.domain_plane_owners;
+		for_each_pipe(dev_priv, pipe) {
+			for_each_universal_plane(dev_priv, pipe, plane) {
+				gvt->pipe_info[pipe].plane_owner[plane] =
+					DOMAIN_PLANE_OWNER(domain_plane_owners, pipe, plane);
+			}
+		}
+	}
+
+	gvt_dbg_core("gvt device initialization is done\n");
 	return 0;
 
 out_clean_types:
diff --git a/drivers/gpu/drm/i915/gvt/handlers.c b/drivers/gpu/drm/i915/gvt/handlers.c
index ac570ae..9afca19 100644
--- a/drivers/gpu/drm/i915/gvt/handlers.c
+++ b/drivers/gpu/drm/i915/gvt/handlers.c
@@ -3119,8 +3119,14 @@ static int init_bxt_mmio_info(struct intel_gvt *gvt)
 	MMIO_PLANES_DH(_REG_701C0, D_BXT, NULL, skl_plane_mmio_write);
 	MMIO_PLANES_DH(_REG_701C4, D_BXT, NULL, skl_plane_mmio_write);
 
-	MMIO_PLANES_SDH(_PLANE_WM_BASE, 4 * 8, D_BXT, NULL, skl_plane_mmio_write);
-	MMIO_PLANES_DH(PLANE_WM_TRANS, D_BXT, NULL, skl_plane_mmio_write);
+	if (i915_modparams.avail_planes_per_pipe) {
+		MMIO_PLANES_SDH(_PLANE_WM_BASE, 4 * 8, D_BXT, NULL, NULL);
+		MMIO_PLANES_DH(PLANE_WM_TRANS, D_BXT, NULL, NULL);
+	} else {
+		MMIO_PLANES_SDH(_PLANE_WM_BASE, 4 * 8, D_BXT, NULL, skl_plane_mmio_write);
+		MMIO_PLANES_DH(PLANE_WM_TRANS, D_BXT, NULL, skl_plane_mmio_write);
+	}
+
 	MMIO_PLANES_DH(PLANE_NV12_BUF_CFG, D_BXT, NULL, NULL);
 	MMIO_PLANES_DH(PLANE_BUF_CFG, D_BXT, NULL, NULL);
 
diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 7755958..ff9feba 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -47,6 +47,8 @@ static __always_inline void seq_print_param(struct seq_file *m,
 		seq_printf(m, "i915_modparams.%s=%d\n", name, *(const int *)x);
 	else if (!__builtin_strcmp(type, "unsigned int"))
 		seq_printf(m, "i915_modparams.%s=%u\n", name, *(const unsigned int *)x);
+	else if (!__builtin_strcmp(type, "unsigned long long"))
+		seq_printf(m, "i915_modparams.%s=%llu\n", name, *(const unsigned long long *)x);
 	else if (!__builtin_strcmp(type, "char *"))
 		seq_printf(m, "i915_modparams.%s=%s\n", name, *(const char **)x);
 	else
diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 3b38e5f..c92a638 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1307,6 +1307,24 @@ static void i915_driver_unregister(struct drm_i915_private *dev_priv)
 	i915_gem_shrinker_cleanup(dev_priv);
 }
 
+static inline int get_max_avail_pipes(struct drm_i915_private *dev_priv)
+{
+	enum pipe pipe;
+	int index = 0;
+
+	if (!intel_vgpu_active(dev_priv) ||
+	    !i915_modparams.avail_planes_per_pipe)
+		return INTEL_INFO(dev_priv)->num_pipes;
+
+	for_each_pipe(dev_priv, pipe) {
+		if (AVAIL_PLANE_PER_PIPE(dev_priv, i915_modparams.avail_planes_per_pipe,
+					pipe))
+			index++;
+	}
+
+	return index;
+}
+
 /**
  * i915_driver_load - setup chip and create an initial config
  * @pdev: PCI device
@@ -1324,6 +1342,7 @@ int i915_driver_load(struct pci_dev *pdev, const struct pci_device_id *ent)
 		(struct intel_device_info *)ent->driver_data;
 	struct drm_i915_private *dev_priv;
 	int ret;
+	int num_crtcs = 0;
 
 	/* Enable nuclear pageflip on ILK+ */
 	if (!i915_modparams.nuclear_pageflip && match_info->gen < 5)
@@ -1375,9 +1394,9 @@ int i915_driver_load(struct pci_dev *pdev, const struct pci_device_id *ent)
 	 * of the i915_driver_init_/i915_driver_register functions according
 	 * to the role/effect of the given init step.
 	 */
-	if (INTEL_INFO(dev_priv)->num_pipes) {
-		ret = drm_vblank_init(&dev_priv->drm,
-				      INTEL_INFO(dev_priv)->num_pipes);
+	num_crtcs = get_max_avail_pipes(dev_priv);
+	if (num_crtcs) {
+		ret = drm_vblank_init(&dev_priv->drm, num_crtcs);
 		if (ret)
 			goto out_cleanup_hw;
 	}
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index e29c256..766b1c9 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -3158,6 +3158,11 @@ intel_info(const struct drm_i915_private *dev_priv)
 #define GT_FREQUENCY_MULTIPLIER 50
 #define GEN9_FREQ_SCALER 3
 
+#define BITS_PER_PIPE 8
+#define AVAIL_PLANE_PER_PIPE(dev_priv, mask, pipe)  \
+	(((mask) >> (pipe) * BITS_PER_PIPE) & \
+	   ((1 << ((INTEL_INFO(dev_priv)->num_sprites[pipe]) + 1)) - 1))
+
 #include "i915_trace.h"
 
 static inline bool intel_vtd_active(void)
diff --git a/drivers/gpu/drm/i915/i915_gpu_error.c b/drivers/gpu/drm/i915/i915_gpu_error.c
index 0a4da86..5b15182 100644
--- a/drivers/gpu/drm/i915/i915_gpu_error.c
+++ b/drivers/gpu/drm/i915/i915_gpu_error.c
@@ -563,6 +563,8 @@ static __always_inline void err_print_param(struct drm_i915_error_state_buf *m,
 		err_printf(m, "i915_modparams.%s=%d\n", name, *(const int *)x);
 	else if (!__builtin_strcmp(type, "unsigned int"))
 		err_printf(m, "i915_modparams.%s=%u\n", name, *(const unsigned int *)x);
+	else if (!__builtin_strcmp(type, "unsigned long long"))
+		err_printf(m, "i915_modparams.%s=%llu\n", name, *(const unsigned long long *)x);
 	else if (!__builtin_strcmp(type, "char *"))
 		err_printf(m, "i915_modparams.%s=%s\n", name, *(const char **)x);
 	else
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 9e90d88..37c43f2 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -79,6 +79,8 @@ struct i915_params i915_modparams __read_mostly = {
 	.gvt_workload_priority = 0,
 	.enable_initial_modeset = false,
 	.splash = NULL,
+	.avail_planes_per_pipe = 0,
+	.domain_plane_owners = 0,
 };
 
 i915_param_named(modeset, int, 0400,
@@ -262,3 +264,53 @@ MODULE_PARM_DESC(enable_initial_modeset,
 
 i915_param_named_unsafe(splash, charp, 0400,
 	"Load a splash screen binary image for a specific display splash=<connector>:<image>:w,h,pitch,crtc_x,crtc_y,crtc_w,crtc_h");
+
+module_param_named_unsafe(avail_planes_per_pipe, i915_modparams.avail_planes_per_pipe, uint, 0400);
+/* pipeA = BITS 0-3, pipeB = BITS 8-11, pipeC = BITS 16-18
+ * +----------+-------+---------+--------+--------+--------+--------+
+ * |unused    |unused |  Pipe C | unused | Pipe B | unused | Pipe A |
+ * +----------+-------+---------+--------+--------+--------+--------+
+ * 31         23      18        15       11       7        3        0
+ *
+ *
+ * BITS 0,1,2,3 - needs to be set planes assigned for pipes A and B
+ * and BITs 0,1,2 - for pipe C
+ * eg: avail_planes_per_pipe = 0x3 - pipe A=2(planes 1 and 2) , pipeB=0 and pipeC=0 planes
+ * eg: avail_planes_per_pipe = 0x5 - pipe A=2(planes 1 and 3) , pipeB=0 and pipeC=0 planes
+ * avail_planes_per_pipe = 0x030701 - pipe A =1(plane 1, pipeB=3(planes 1,2 and 3), pipeC=2( planes 1 and 2)
+ *
+ */
+MODULE_PARM_DESC(avail_planes_per_pipe, "plane mask for each	pipe: \
+		set BITS 0-3:pipeA 8-11:pipeB 16-18:pipeC to specify the planes that \
+		are available eg: 0x030701 : planes 1:pipeA 1,2,3:pipeB \
+		1,2:pipeC (0x0 - default value)");
+module_param_named_unsafe(domain_plane_owners, i915_modparams.domain_plane_owners, ullong, 0400);
+/* pipeA = BITS 0-15 pipeB = 16-31, pipeC = 32-47
+ *
+ * +----------+------------+-------------+------------+
+ * |unused    |  Pipe C    |   Pipe B    |   Pipe A   |
+ * +----------+------------+-------------+------------+
+ * 63         47           31            15           0
+ *
+ * Each nibble represents domain id. 0 for Dom0, 1,2,3...0xF for DomUs
+ * eg: domain_plane_owners = 0x022111000010 // 0x0221|1100|0010
+ * plane		 domain
+ * plane_owner1A -0
+ * plane_owner2A -1
+ * plane_owner3A -0
+ * plane_owner4A -0
+ * plane_owner1B -0
+ * plane_owner2B -0
+ * plane_owner3B -1
+ * plane_owner4B -1
+ * plane_owner1C -1
+ * plane_owner2C -2
+ * plane_owner3C -2
+ *
+ *
+ */
+MODULE_PARM_DESC(domain_plane_owners, "plane owners for each domain and for each pipe \
+		ids can be from 0-F,  eg: domain_plane_owners = 0x022111000010 \
+		  planes owner: 3C:2 2C:2 1C:1 4B:1 3B:1 2B:1 1B:0 4A:0 3A:0 2A:1 1A:0 \
+		  (0x0 - default value)");
+
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index 331af77..8e49a55 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -55,6 +55,8 @@
 	func(int, reset); \
 	func(unsigned int, inject_load_failure); \
 	func(char *, splash); \
+	func(unsigned int, avail_planes_per_pipe); \
+	func(unsigned long long, domain_plane_owners); \
 	/* leave bools at the end to not create holes */ \
 	func(bool, alpha_support); \
 	func(bool, enable_cmd_parser); \
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 852b836..49c3b8c 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -5248,15 +5248,37 @@ static void intel_pre_plane_update(struct intel_crtc_state *old_crtc_state,
 		intel_update_watermarks(crtc);
 }
 
+static void disable_primary_plane(struct drm_i915_private *dev_priv, int pipe)
+{
+	u32 val;
+
+	val = I915_READ(PLANE_CTL(pipe, PLANE_PRIMARY));
+	if (val & PLANE_CTL_ENABLE) {
+		I915_WRITE(PLANE_CTL(pipe, PLANE_PRIMARY), 0);
+		I915_WRITE(PLANE_SURF(pipe, PLANE_PRIMARY), 0);
+		POSTING_READ(PLANE_SURF(pipe, PLANE_PRIMARY));
+	}
+}
+
 static void intel_crtc_disable_planes(struct drm_crtc *crtc, unsigned plane_mask)
 {
 	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = to_i915(dev);
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 	struct drm_plane *p;
 	int pipe = intel_crtc->pipe;
 
 	intel_crtc_dpms_overlay_disable(intel_crtc);
 
+	/*
+	 * On BIOS based systems, if Dom0 doesn't own Plane 0 (Primary Plane),
+	 * then during modeset, it wouldn't be able to disable this plane and
+	 * this can lead to unexpected behavior after the modeset. Therefore,
+	 * disable the primary plane if it was enabled by the BIOS/GOP.
+	 */
+	if (dev_priv->gvt && i915_modparams.avail_planes_per_pipe)
+		disable_primary_plane(dev_priv, pipe);
+
 	drm_for_each_plane_mask(p, dev, plane_mask)
 		to_intel_plane(p)->disable_plane(to_intel_plane(p), intel_crtc);
 
@@ -11451,7 +11473,8 @@ static void verify_wm_state(struct drm_crtc *crtc,
 	const enum pipe pipe = intel_crtc->pipe;
 	int plane, level, max_level = ilk_wm_max_level(dev_priv);
 
-	if (INTEL_GEN(dev_priv) < 9 || !new_state->active)
+	if (INTEL_GEN(dev_priv) < 9 || !new_state->active ||
+	    i915_modparams.avail_planes_per_pipe)
 		return;
 
 	skl_pipe_wm_get_hw_state(crtc, &hw_wm);
@@ -13391,6 +13414,109 @@ intel_primary_plane_create(struct drm_i915_private *dev_priv, enum pipe pipe)
 }
 
 static struct intel_plane *
+intel_skl_plane_create(struct drm_i915_private *dev_priv, enum pipe pipe,
+		       int plane, bool is_primary)
+{
+	struct intel_plane *intel_plane = NULL;
+	struct intel_plane_state *state = NULL;
+	unsigned long possible_crtcs;
+	const uint32_t *plane_formats;
+	unsigned int supported_rotations, plane_type;
+	unsigned int num_formats;
+	const uint64_t *modifiers;
+	int ret;
+
+	intel_plane = kzalloc(sizeof(*intel_plane), GFP_KERNEL);
+	if (!intel_plane) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	state = intel_create_plane_state(&intel_plane->base);
+	if (!state) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	intel_plane->base.state = &state->base;
+	intel_plane->can_scale = false;
+	state->scaler_id = -1;
+	intel_plane->pipe = pipe;
+
+	/*
+	 * On gen2/3 only plane A can do FBC, but the panel fitter and LVDS
+	 * port is hooked to pipe B. Hence we want plane A feeding pipe B.
+	 */
+	if (is_primary) {
+		intel_plane->plane = (enum plane) pipe;
+		intel_plane->check_plane = intel_check_primary_plane;
+		plane_type = DRM_PLANE_TYPE_PRIMARY;
+	} else {
+		intel_plane->plane = plane;
+		intel_plane->check_plane = intel_check_sprite_plane;
+		plane_type = DRM_PLANE_TYPE_OVERLAY;
+	}
+
+	if (plane == PLANE_PRIMARY) {
+		intel_plane->frontbuffer_bit = INTEL_FRONTBUFFER_PRIMARY(pipe);
+		intel_plane->update_plane = skylake_update_primary_plane;
+		intel_plane->disable_plane = skylake_disable_primary_plane;
+		intel_plane->get_hw_state = skl_plane_get_hw_state;
+	} else {
+		intel_plane->frontbuffer_bit = INTEL_FRONTBUFFER_SPRITE(pipe, plane);
+		intel_plane->update_plane = skl_update_plane;
+		intel_plane->disable_plane = skl_disable_plane;
+		intel_plane->get_hw_state = skl_plane_get_hw_state;
+	}
+
+	intel_plane->id = plane;
+	plane_formats = skl_primary_formats;
+
+	if (pipe < PIPE_C)
+		modifiers = skl_format_modifiers_ccs;
+	else
+		modifiers = skl_format_modifiers_noccs;
+
+	num_formats = ARRAY_SIZE(skl_primary_formats);
+
+	/*
+	 * Drop final format (NV12) for pipes or hardware steppings
+	 * that don't support it.
+	 */
+	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_C0) || pipe >= PIPE_C
+			|| plane >= 2)
+		num_formats--;
+
+
+	possible_crtcs = (1 << dev_priv->drm.mode_config.num_crtc);
+	ret = drm_universal_plane_init(&dev_priv->drm, &intel_plane->base,
+			possible_crtcs, &intel_plane_funcs,
+			plane_formats, num_formats,
+			modifiers,
+			plane_type,
+			"plane %d%c", plane+1, pipe_name(pipe));
+
+	if (ret)
+		goto fail;
+
+	supported_rotations = DRM_MODE_ROTATE_0;
+	if (INTEL_GEN(dev_priv) >= 4)
+		drm_plane_create_rotation_property(&intel_plane->base,
+						   DRM_MODE_ROTATE_0,
+						   supported_rotations);
+
+	drm_plane_helper_add(&intel_plane->base, &intel_plane_helper_funcs);
+
+	return intel_plane;
+
+fail:
+	kfree(state);
+	kfree(intel_plane);
+
+	return ERR_PTR(ret);
+}
+
+static struct intel_plane *
 intel_cursor_plane_create(struct drm_i915_private *dev_priv,
 			  enum pipe pipe)
 {
@@ -13489,6 +13615,79 @@ static void intel_crtc_init_scalers(struct intel_crtc *crtc,
 	scaler_state->scaler_id = -1;
 }
 
+static int intel_crtc_init_restrict_planes(struct drm_i915_private *dev_priv,
+					   enum pipe pipe, int planes_mask)
+{
+	struct intel_crtc *intel_crtc;
+	struct intel_crtc_state *crtc_state;
+	struct intel_plane *primary = NULL, *intel_plane = NULL;
+	bool is_primary = true;
+	int plane, ret;
+
+	intel_crtc = kzalloc(sizeof(*intel_crtc), GFP_KERNEL);
+	if (!intel_crtc)
+		return -ENOMEM;
+
+	crtc_state = kzalloc(sizeof(*crtc_state), GFP_KERNEL);
+	if (!crtc_state) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+	intel_crtc->config = crtc_state;
+	intel_crtc->base.state = &crtc_state->base;
+	crtc_state->base.crtc = &intel_crtc->base;
+
+	for_each_universal_plane(dev_priv, pipe, plane) {
+		if (planes_mask & BIT(plane)) {
+			intel_plane = intel_skl_plane_create(dev_priv,
+					pipe, plane, is_primary);
+			if (IS_ERR(intel_plane)) {
+				DRM_DEBUG_KMS(" plane %d failed for pipe %d\n", plane, pipe);
+				ret = PTR_ERR(intel_plane);
+				goto fail;
+			}
+			if (is_primary) {
+				primary = intel_plane;
+				is_primary = false;
+			}
+			DRM_DEBUG_KMS(" plane %d created for pipe %d\n", plane, pipe);
+			intel_crtc->plane_ids_mask |= BIT(intel_plane->id);
+		}
+	}
+
+	ret = drm_crtc_init_with_planes(&dev_priv->drm,
+			&intel_crtc->base,
+			primary ? &primary->base : NULL, NULL,
+			&intel_crtc_funcs,
+			"pipe %c", pipe_name(pipe));
+	if (ret)
+		goto fail;
+
+	intel_crtc->pipe = pipe;
+	intel_crtc->plane = primary ? primary->plane : 0;
+
+	dev_priv->plane_to_crtc_mapping[intel_crtc->plane] = intel_crtc;
+	dev_priv->pipe_to_crtc_mapping[intel_crtc->pipe] = intel_crtc;
+
+	drm_crtc_helper_add(&intel_crtc->base, &intel_helper_funcs);
+
+	intel_color_init(&intel_crtc->base);
+
+	WARN_ON(drm_crtc_index(&intel_crtc->base) != intel_crtc->pipe);
+
+	return 0;
+
+fail:
+	/*
+	 * drm_mode_config_cleanup() will free up any
+	 * crtcs/planes already initialized.
+	 */
+	kfree(crtc_state);
+	kfree(intel_crtc);
+
+	return ret;
+}
+
 static int intel_crtc_init(struct drm_i915_private *dev_priv, enum pipe pipe)
 {
 	struct intel_crtc *intel_crtc;
@@ -14616,12 +14815,27 @@ static void sanitize_watermarks(struct drm_device *dev)
 	drm_modeset_acquire_fini(&ctx);
 }
 
+
+static int intel_sanitize_plane_restriction(struct drm_i915_private *dev_priv)
+{
+	/*plane restriction feature is only for APL for now*/
+	if (!IS_BROXTON(dev_priv) ||
+	    !i915_modparams.enable_initial_modeset) {
+		i915_modparams.avail_planes_per_pipe = 0;
+		DRM_INFO("Turning off Plane Restrictions feature\n");
+	}
+
+	return i915_modparams.avail_planes_per_pipe;
+}
+
 int intel_modeset_init(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = to_i915(dev);
 	struct i915_ggtt *ggtt = &dev_priv->ggtt;
 	enum pipe pipe;
 	struct intel_crtc *crtc;
+	unsigned int  planes_mask[I915_MAX_PIPES];
+	unsigned int avail_plane_per_pipe_mask = 0;
 
 	drm_mode_config_init(dev);
 
@@ -14692,10 +14906,29 @@ int intel_modeset_init(struct drm_device *dev)
 		      INTEL_INFO(dev_priv)->num_pipes,
 		      INTEL_INFO(dev_priv)->num_pipes > 1 ? "s" : "");
 
+	avail_plane_per_pipe_mask = intel_sanitize_plane_restriction(dev_priv);
+	DRM_DEBUG_KMS("avail_planes_per_pipe = 0x%x \n", i915_modparams.avail_planes_per_pipe);
+	DRM_DEBUG_KMS("domain_plane_owners = 0x%llx \n", i915_modparams.domain_plane_owners);
+
+	for_each_pipe(dev_priv, pipe) {
+		planes_mask[pipe] = AVAIL_PLANE_PER_PIPE(dev_priv,
+							 avail_plane_per_pipe_mask, pipe);
+		DRM_DEBUG_KMS("for pipe %d plane_mask = %d \n", pipe, planes_mask[pipe]);
+	}
+
 	for_each_pipe(dev_priv, pipe) {
 		int ret;
 
-		ret = intel_crtc_init(dev_priv, pipe);
+		if (!i915_modparams.avail_planes_per_pipe) {
+			ret = intel_crtc_init(dev_priv, pipe);
+		} else {
+			if (!intel_vgpu_active(dev_priv) || (intel_vgpu_active(dev_priv)
+							 && planes_mask[pipe])) {
+				ret = intel_crtc_init_restrict_planes(dev_priv,
+								      pipe,
+								      planes_mask[pipe]);
+			}
+		}
 		if (ret) {
 			drm_mode_config_cleanup(dev);
 			return ret;
@@ -15118,11 +15351,16 @@ static void intel_modeset_readout_hw_state(struct drm_device *dev)
 			struct intel_crtc_state *crtc_state;
 
 			crtc = intel_get_crtc_for_pipe(dev_priv, pipe);
-			crtc_state = to_intel_crtc_state(crtc->base.state);
-
-			encoder->base.crtc = &crtc->base;
-			crtc_state->output_types |= 1 << encoder->type;
-			encoder->get_config(encoder, crtc_state);
+			if (!crtc) {
+				encoder->base.crtc = NULL;
+			} else {
+				crtc_state =
+					to_intel_crtc_state(crtc->base.state);
+
+				encoder->base.crtc = &crtc->base;
+				crtc_state->output_types |= 1 << encoder->type;
+				encoder->get_config(encoder, crtc_state);
+			}
 		} else {
 			encoder->base.crtc = NULL;
 		}
@@ -15270,9 +15508,11 @@ intel_modeset_setup_hw_state(struct drm_device *dev,
 		intel_sanitize_encoder(encoder);
 
 	for_each_intel_crtc(&dev_priv->drm, crtc) {
-		intel_sanitize_crtc(crtc, ctx);
-		intel_dump_pipe_config(crtc, crtc->config,
-				       "[setup_hw_state]");
+		if (crtc) {
+			intel_sanitize_crtc(crtc, ctx);
+			intel_dump_pipe_config(crtc, crtc->config,
+					"[setup_hw_state]");
+		}
 	}
 
 	intel_modeset_update_connector_atomic_state(dev);
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 6227d12..a13daef 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -1997,6 +1997,13 @@ int intel_sprite_set_colorkey(struct drm_device *dev, void *data,
 			      struct drm_file *file_priv);
 void intel_pipe_update_start(struct intel_crtc *crtc);
 void intel_pipe_update_end(struct intel_crtc *crtc);
+int intel_check_sprite_plane(struct intel_plane *plane,
+		struct intel_crtc_state *crtc_state,
+		struct intel_plane_state *state);
+void skl_update_plane(struct intel_plane *plane,
+		const struct intel_crtc_state *crtc_state,
+		const struct intel_plane_state *plane_state);
+void skl_disable_plane(struct intel_plane *plane, struct intel_crtc *crtc);
 bool skl_plane_get_hw_state(struct intel_plane *plane);
 
 /* intel_tv.c */
diff --git a/drivers/gpu/drm/i915/intel_fbc.c b/drivers/gpu/drm/i915/intel_fbc.c
index ccf5dd2..6589421 100644
--- a/drivers/gpu/drm/i915/intel_fbc.c
+++ b/drivers/gpu/drm/i915/intel_fbc.c
@@ -53,7 +53,7 @@ static inline bool fbc_on_pipe_a_only(struct drm_i915_private *dev_priv)
 
 static inline bool fbc_on_plane_a_only(struct drm_i915_private *dev_priv)
 {
-	return INTEL_GEN(dev_priv) < 4;
+	return INTEL_GEN(dev_priv) < 4 || INTEL_GEN(dev_priv) >= 9;
 }
 
 static inline bool no_fbc_on_multiple_pipes(struct drm_i915_private *dev_priv)
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index caa5b78..e882de9 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -810,11 +810,14 @@ static int intel_wm_num_levels(struct drm_i915_private *dev_priv)
 static bool intel_wm_plane_visible(const struct intel_crtc_state *crtc_state,
 				   const struct intel_plane_state *plane_state)
 {
-	struct intel_plane *plane = to_intel_plane(plane_state->base.plane);
+	struct intel_plane *plane = plane_state ? to_intel_plane(plane_state->base.plane) : NULL;
 
 	/* FIXME check the 'enable' instead */
 	if (!crtc_state->base.active)
 		return false;
+	if (!plane_state && i915_modparams.avail_planes_per_pipe) {
+		return true;
+	}
 
 	/*
 	 * Treat cursor with fb as always visible since cursor updates
@@ -3707,7 +3710,6 @@ bool intel_can_enable_sagv(struct drm_atomic_state *state)
 	struct intel_crtc *crtc;
 	struct intel_plane *plane;
 	struct intel_crtc_state *cstate;
-	enum pipe pipe;
 	int level, latency;
 	int sagv_block_time_us = IS_GEN9(dev_priv) ? 30 : 20;
 
@@ -3888,11 +3890,15 @@ static uint_fixed_16_16_t
 skl_plane_downscale_amount(const struct intel_crtc_state *cstate,
 			   const struct intel_plane_state *pstate)
 {
-	struct intel_plane *plane = to_intel_plane(pstate->base.plane);
+	struct intel_plane *plane = pstate ? to_intel_plane(pstate->base.plane) : NULL;
 	uint32_t src_w, src_h, dst_w, dst_h;
 	uint_fixed_16_16_t fp_w_ratio, fp_h_ratio;
 	uint_fixed_16_16_t downscale_h, downscale_w;
 
+	if (!pstate && i915_modparams.avail_planes_per_pipe) {
+		return mul_fixed16(u32_to_fixed16(1), u32_to_fixed16(1));
+	}
+
 	if (WARN_ON(!intel_wm_plane_visible(cstate, pstate)))
 		return u32_to_fixed16(0);
 
@@ -4414,9 +4420,9 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 				uint8_t *out_lines, /* out */
 				bool *enabled /* out */)
 {
-	struct intel_plane *plane = to_intel_plane(intel_pstate->base.plane);
-	const struct drm_plane_state *pstate = &intel_pstate->base;
-	const struct drm_framebuffer *fb = pstate->fb;
+	struct intel_plane *plane = intel_pstate ? to_intel_plane(intel_pstate->base.plane) : NULL;
+	const struct drm_plane_state *pstate = intel_pstate ? &intel_pstate->base : NULL;
+	const struct drm_framebuffer *fb = pstate ? pstate->fb : NULL;
 	uint32_t latency = dev_priv->wm.skl_latency[level];
 	uint_fixed_16_16_t method1, method2;
 	uint_fixed_16_16_t plane_blocks_per_line;
@@ -4440,6 +4446,17 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 		return 0;
 	}
 
+	if (!intel_pstate && i915_modparams.avail_planes_per_pipe) {
+		y_tiled = false;
+		x_tiled = true;
+		cpp = 4;
+		y_min_scanlines = 8;
+		latency += 15;
+
+		width = cstate->pipe_src_w;
+		goto calculate_wm;
+	}
+
 	y_tiled = fb->modifier == I915_FORMAT_MOD_Y_TILED ||
 		  fb->modifier == I915_FORMAT_MOD_Yf_TILED ||
 		  fb->modifier == I915_FORMAT_MOD_Y_TILED_CCS ||
@@ -4467,8 +4484,6 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 
 	cpp = (fb->format->format == DRM_FORMAT_NV12) ? fb->format->cpp[1] :
 							fb->format->cpp[0];
-	plane_pixel_rate = skl_adjusted_plane_pixel_rate(cstate, intel_pstate);
-
 	if (drm_rotation_90_or_270(pstate->rotation)) {
 
 		switch (cpp) {
@@ -4492,7 +4507,10 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 	if (apply_memory_bw_wa)
 		y_min_scanlines *= 2;
 
+calculate_wm:
+	plane_pixel_rate = skl_adjusted_plane_pixel_rate(cstate, intel_pstate);
 	plane_bytes_per_line = width * cpp;
+
 	if (y_tiled) {
 		interm_pbpl = DIV_ROUND_UP(plane_bytes_per_line *
 					   y_min_scanlines, 512);
@@ -4543,7 +4561,7 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 					 plane_blocks_per_line);
 
 	/* Display WA #1125: skl,bxt,kbl,glk */
-	if (level == 0 &&
+	if (fb && level == 0 &&
 	    (fb->modifier == I915_FORMAT_MOD_Y_TILED_CCS ||
 	     fb->modifier == I915_FORMAT_MOD_Yf_TILED_CCS))
 		res_blocks += fixed16_to_u32_round_up(y_tile_minimum);
@@ -4568,12 +4586,16 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 		if (level) {
 			return 0;
 		} else {
-			struct drm_plane *plane = pstate->plane;
+			struct drm_plane *plane = pstate ? pstate->plane : NULL;
 
 			DRM_DEBUG_KMS("Requested display configuration exceeds system watermark limitations\n");
-			DRM_DEBUG_KMS("[PLANE:%d:%s] blocks required = %u/%u, lines required = %u/31\n",
+
+			if (plane) {
+				DRM_DEBUG_KMS("[PLANE:%d:%s] blocks required = %u/%u, lines required = %u/31\n",
 				      plane->base.id, plane->name,
 				      res_blocks, ddb_allocation, res_lines);
+			}
+
 			return -EINVAL;
 		}
 	}
@@ -4590,20 +4612,19 @@ skl_compute_wm_levels(const struct drm_i915_private *dev_priv,
 		      struct skl_ddb_allocation *ddb,
 		      struct intel_crtc_state *cstate,
 		      const struct intel_plane_state *intel_pstate,
+		      enum plane_id plane_id,
 		      struct skl_plane_wm *wm)
 {
 	struct intel_crtc *intel_crtc = to_intel_crtc(cstate->base.crtc);
-	struct drm_plane *plane = intel_pstate->base.plane;
-	struct intel_plane *intel_plane = to_intel_plane(plane);
 	uint16_t ddb_blocks;
 	enum pipe pipe = intel_crtc->pipe;
 	int level, max_level = ilk_wm_max_level(dev_priv);
 	int ret;
 
-	if (WARN_ON(!intel_pstate->base.fb))
+	if (WARN_ON(intel_pstate && !intel_pstate->base.fb))
 		return -EINVAL;
 
-	ddb_blocks = skl_ddb_entry_size(&ddb->plane[pipe][intel_plane->id]);
+	ddb_blocks = skl_ddb_entry_size(&ddb->plane[pipe][plane_id]);
 
 	for (level = 0; level <= max_level; level++) {
 		struct skl_wm_level *result = &wm->wm[level];
@@ -4655,6 +4676,55 @@ static void skl_compute_transition_wm(struct intel_crtc_state *cstate,
 	trans_wm->plane_en = false;
 }
 
+static int skl_build_pipe_all_plane_wm(struct intel_crtc_state *cstate,
+			     struct skl_ddb_allocation *ddb,
+			     struct skl_pipe_wm *pipe_wm)
+{
+	struct drm_device *dev = cstate->base.crtc->dev;
+	const struct drm_i915_private *dev_priv = to_i915(dev);
+	struct skl_plane_wm *wm;
+	struct intel_crtc *crtc = to_intel_crtc(cstate->base.crtc);
+	struct drm_crtc_state *crtc_state = &cstate->base;
+	struct drm_plane *plane;
+	const struct drm_plane_state *pstate;
+	struct intel_plane_state *intel_pstate;
+	int pipe = crtc->pipe;
+	int plane_id;
+	int ret;
+
+	memset(pipe_wm->planes, 0, sizeof(pipe_wm->planes));
+
+	/*
+	 * Since Dom0 may not own all planes on this pipe, there will
+	 * not be a valid intel_plane for the planes it doesn't own.
+	 * Therefore, we have to pass NULL to skl_compute_wm_level()
+	 * which will then know that this plane is not owned by Dom0
+	 * and hence will use width and height from the crtc and will
+	 * also assume cpp = 4 and tiling = x_tiled.
+	 */
+	for_each_universal_plane(dev_priv, pipe, plane_id) {
+		intel_pstate = NULL;
+
+		drm_atomic_crtc_state_for_each_plane_state(plane, pstate, crtc_state) {
+			if (plane_id == to_intel_plane(plane)->id) {
+				intel_pstate = to_intel_plane_state(pstate);
+				break;
+			}
+		}
+
+		wm = &pipe_wm->planes[plane_id];
+		ret = skl_compute_wm_levels(dev_priv, ddb, cstate,
+					    intel_pstate, plane_id, wm);
+		if (ret)
+			return ret;
+
+		skl_compute_transition_wm(cstate, &wm->trans_wm);
+	}
+	pipe_wm->linetime = skl_compute_linetime_wm(cstate);
+
+	return 0;
+}
+
 static int skl_build_pipe_wm(struct intel_crtc_state *cstate,
 			     struct skl_ddb_allocation *ddb,
 			     struct skl_pipe_wm *pipe_wm)
@@ -4681,7 +4751,7 @@ static int skl_build_pipe_wm(struct intel_crtc_state *cstate,
 		wm = &pipe_wm->planes[plane_id];
 
 		ret = skl_compute_wm_levels(dev_priv, ddb, cstate,
-					    intel_pstate, wm);
+					    intel_pstate, plane_id, wm);
 		if (ret)
 			return ret;
 		skl_compute_transition_wm(cstate, &wm->trans_wm);
@@ -4835,7 +4905,10 @@ static int skl_update_pipe_wm(struct drm_crtc_state *cstate,
 	struct intel_crtc_state *intel_cstate = to_intel_crtc_state(cstate);
 	int ret;
 
-	ret = skl_build_pipe_wm(intel_cstate, ddb, pipe_wm);
+	if (i915_modparams.avail_planes_per_pipe)
+		ret = skl_build_pipe_all_plane_wm(intel_cstate, ddb, pipe_wm);
+	else
+		ret = skl_build_pipe_wm(intel_cstate, ddb, pipe_wm);
 	if (ret)
 		return ret;
 
@@ -5036,10 +5109,14 @@ skl_compute_wm(struct drm_atomic_state *state)
 	struct intel_atomic_state *intel_state = to_intel_atomic_state(state);
 	struct skl_wm_values *results = &intel_state->wm_results;
 	struct drm_device *dev = state->dev;
+	struct drm_i915_private *dev_priv = to_i915(intel_state->base.dev);
 	struct skl_pipe_wm *pipe_wm;
 	bool changed = false;
 	int ret, i;
 
+	if (intel_vgpu_active(dev_priv) && i915_modparams.avail_planes_per_pipe)
+		return 0;
+
 	/*
 	 * When we distrust bios wm we always need to recompute to set the
 	 * expected DDB allocations for each CRTC.
@@ -5115,11 +5192,23 @@ static void skl_atomic_update_crtc_wm(struct intel_atomic_state *state,
 	enum pipe pipe = crtc->pipe;
 	enum plane_id plane_id;
 
+	if (intel_vgpu_active(dev_priv) && i915_modparams.avail_planes_per_pipe)
+		return;
+
 	if (!(state->wm_results.dirty_pipes & drm_crtc_mask(&crtc->base)))
 		return;
 
 	I915_WRITE(PIPE_WM_LINETIME(pipe), pipe_wm->linetime);
 
+	if (i915_modparams.avail_planes_per_pipe) {
+		for_each_universal_plane(dev_priv, pipe, plane_id) {
+			skl_write_plane_wm(crtc, &pipe_wm->planes[plane_id],
+					ddb, plane_id);
+		}
+
+		return;
+	}
+
 	for_each_plane_id_on_crtc(crtc, plane_id) {
 		if (plane_id != PLANE_CURSOR)
 			skl_write_plane_wm(crtc, &pipe_wm->planes[plane_id],
diff --git a/drivers/gpu/drm/i915/intel_sprite.c b/drivers/gpu/drm/i915/intel_sprite.c
index 2e88569..fb33ac3 100644
--- a/drivers/gpu/drm/i915/intel_sprite.c
+++ b/drivers/gpu/drm/i915/intel_sprite.c
@@ -230,7 +230,7 @@ void intel_pipe_update_end(struct intel_crtc *crtc)
 #endif
 }
 
-static void
+void
 skl_update_plane(struct intel_plane *plane,
 		 const struct intel_crtc_state *crtc_state,
 		 const struct intel_plane_state *plane_state)
@@ -342,7 +342,7 @@ skl_update_plane(struct intel_plane *plane,
 	spin_unlock_irqrestore(&dev_priv->uncore.lock, irqflags);
 }
 
-static void
+void
 skl_disable_plane(struct intel_plane *plane, struct intel_crtc *crtc)
 {
 	struct drm_i915_private *dev_priv = to_i915(plane->base.dev);
@@ -942,7 +942,7 @@ g4x_plane_get_hw_state(struct intel_plane *plane)
 	return ret;
 }
 
-static int
+int
 intel_check_sprite_plane(struct intel_plane *plane,
 			 struct intel_crtc_state *crtc_state,
 			 struct intel_plane_state *state)
-- 
2.7.4

