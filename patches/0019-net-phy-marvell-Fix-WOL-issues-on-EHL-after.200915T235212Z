From 9ace3d65c0c6117a8bf64f46f837e322401b7648 Mon Sep 17 00:00:00 2001
From: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date: Sun, 9 Aug 2020 14:59:27 +0800
Subject: [PATCH 19/48] net: phy: marvell: Fix WOL issues on EHL after wake
 from S5

After Soft Off/Shutdown (S5), it will able to wake up. But when
running the ethtool to get WOL information, it was showing "disabled"
but internally phy setting still holding the old value.
Set default Wake On Lan interrupt, Wake on Lan Event Detection and
LED[2] Interrupt to defaut state during boot up stages.

Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
---
 drivers/net/phy/marvell.c | 59 +++++++++++++++++++++++++++++++++++----
 1 file changed, 54 insertions(+), 5 deletions(-)

diff --git a/drivers/net/phy/marvell.c b/drivers/net/phy/marvell.c
index 87ccd81b60ad..4801dc4b5e69 100644
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@ -650,11 +650,42 @@ static void marvell_config_led(struct phy_device *phydev)
 		phydev_warn(phydev, "Fail to config marvell phy LED.\n");
 }
 
+static void marvell_config_wol_init(struct phy_device *phydev)
+{
+	int err;
+
+	err = phy_modify_paged(phydev, MII_MARVELL_COPPER_PAGE,
+			       MII_88E1318S_PHY_CSIER,
+			       MII_88E1318S_PHY_CSIER_WOL_EIE,
+			       0);
+	if (err < 0)
+		phydev_warn(phydev,
+			    "Fail to configure WOL Event Interrupt Enable on Copper Page.\n");
+
+	err = phy_modify_paged(phydev, MII_MARVELL_LED_PAGE,
+			       MII_88E1318S_PHY_LED_TCR,
+			       MII_88E1318S_PHY_LED_TCR_FORCE_INT |
+			       MII_88E1318S_PHY_LED_TCR_INTn_ENABLE,
+			       0);
+	if (err < 0)
+		phydev_warn(phydev,
+			    "Fail to configure LED[2] Interrupt Enable on LED Page.\n");
+
+	err = phy_write_paged(phydev, MII_MARVELL_WOL_PAGE,
+			      MII_88E1318S_PHY_WOL_CTRL, 0x00);
+	if (err < 0)
+		phydev_warn(phydev,
+			    "Fail to initialize WOL Control to default value on WOL Page.\n");
+}
+
 static int marvell_config_init(struct phy_device *phydev)
 {
 	/* Set defalut LED */
 	marvell_config_led(phydev);
 
+	/* Set default WOL interrupt and detection event */
+	marvell_config_wol_init(phydev);
+
 	/* Set registers from marvell,reg-init DT property */
 	return marvell_of_reg_init(phydev);
 }
@@ -1512,12 +1543,12 @@ static int m88e1318_set_wol(struct phy_device *phydev,
 	if (oldpage < 0)
 		goto error;
 
-	if (wol->wolopts & (WAKE_MAGIC | WAKE_PHY)) {
-		/* Explicitly switch to page 0x00, just to be sure */
-		err = marvell_write_page(phydev, MII_MARVELL_COPPER_PAGE);
-		if (err < 0)
-			goto error;
+	/* Explicitly switch to page 0x00, just to be sure */
+	err = marvell_write_page(phydev, MII_MARVELL_COPPER_PAGE);
+	if (err < 0)
+		goto error;
 
+	if (wol->wolopts & (WAKE_MAGIC | WAKE_PHY)) {
 		/* If WOL event happened once, the LED[2] interrupt pin
 		 * will not be cleared unless we reading the interrupt status
 		 * register. If interrupts are in use, the normal interrupt
@@ -1544,6 +1575,24 @@ static int m88e1318_set_wol(struct phy_device *phydev,
 				   MII_88E1318S_PHY_LED_TCR_INT_ACTIVE_LOW);
 		if (err < 0)
 			goto error;
+	} else {
+		/* Disable the WOL interrupt */
+		err = __phy_modify(phydev, MII_88E1318S_PHY_CSIER,
+				   MII_88E1318S_PHY_CSIER_WOL_EIE,
+				   0);
+		if (err < 0)
+			goto error;
+
+		err = marvell_write_page(phydev, MII_MARVELL_LED_PAGE);
+		if (err < 0)
+			goto error;
+
+		err = __phy_modify(phydev, MII_88E1318S_PHY_LED_TCR,
+				   MII_88E1318S_PHY_LED_TCR_FORCE_INT |
+				   MII_88E1318S_PHY_LED_TCR_INTn_ENABLE,
+				   0);
+		if (err < 0)
+			goto error;
 	}
 
 	if (wol->wolopts & WAKE_MAGIC) {
-- 
2.17.1

