From 1ccccf846eefe6c18b8aeeccfb35db62d9c746f2 Mon Sep 17 00:00:00 2001
From: "Lay, Kuan Loon" <kuan.loon.lay@intel.com>
Date: Mon, 12 Nov 2018 11:09:24 +0800
Subject: [PATCH 091/108] net: stmmac: enable network proxy MSI interrupt
 support

This is for A0. Interrupt ordering will be fix in B0.

Signed-off-by: Lay, Kuan Loon <kuan.loon.lay@intel.com>
Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/common.h  |  3 +++
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  9 +++++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 27 +++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  | 11 ++++++++
 include/linux/stmmac.h                        |  3 +++
 5 files changed, 53 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/common.h b/drivers/net/ethernet/stmicro/stmmac/common.h
index 0176fddd2bf1..b15965ffde18 100644
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@ -340,6 +340,9 @@ enum dma_irq_dir {
 
 enum request_irq_err {
 	REQ_IRQ_ERR_ALL,
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	REQ_IRQ_ERR_NETWORK_PROXY,
+#endif
 	REQ_IRQ_ERR_TX,
 	REQ_IRQ_ERR_RX,
 	REQ_IRQ_ERR_SFTY_UE,
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 0e5cab3f5dc6..4319c1c36dc2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -34,6 +34,9 @@ struct stmmac_resources {
 	int sfty_ue_irq;
 	int rx_irq[MTL_MAX_RX_QUEUES];
 	int tx_irq[MTL_MAX_TX_QUEUES];
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	int netprox_irq;
+#endif
 };
 
 struct stmmac_tx_info {
@@ -228,6 +231,9 @@ struct stmmac_priv {
 	int sfty_ue_irq;
 	int rx_irq[MTL_MAX_RX_QUEUES];
 	int tx_irq[MTL_MAX_TX_QUEUES];
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	int netprox_irq;
+#endif
 	/*irq name */
 	char int_name_mac[IFNAMSIZ + 9];
 	char int_name_wol[IFNAMSIZ + 9];
@@ -236,6 +242,9 @@ struct stmmac_priv {
 	char int_name_sfty_ue[IFNAMSIZ + 9];
 	char int_name_rx_irq[MTL_MAX_TX_QUEUES][IFNAMSIZ + 9];
 	char int_name_tx_irq[MTL_MAX_TX_QUEUES][IFNAMSIZ + 9];
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	char int_name_netprox_irq[IFNAMSIZ + 9];
+#endif
 
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *dbgfs_dir;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 65bc43ab9690..7bf9412517c0 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -2854,6 +2854,12 @@ static void stmmac_free_irq(struct net_device *dev,
 
 	switch (irq_err) {
 	case REQ_IRQ_ERR_ALL:
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+		if (priv->netprox_irq > 0 && priv->netprox_irq != dev->irq)
+			free_irq(priv->netprox_irq, dev);
+		/* fall through */
+	case REQ_IRQ_ERR_NETWORK_PROXY:
+#endif
 		irq_idx = priv->plat->tx_queues_to_use;
 		/* fall through */
 	case REQ_IRQ_ERR_TX:
@@ -3029,6 +3035,24 @@ static int stmmac_request_irq(struct net_device *dev)
 				goto irq_error;
 			}
 		}
+
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+		/* Network Proxy IRQ line */
+		if (priv->netprox_irq > 0 && priv->netprox_irq != dev->irq) {
+			int_name = priv->int_name_netprox_irq;
+			sprintf(int_name, "%s:%s", dev->name, "netprox");
+			ret = request_irq(priv->netprox_irq,
+					  netproxy_irq,
+					  0, int_name, dev);
+			if (unlikely(ret < 0)) {
+				netdev_err(priv->dev,
+					   "%s: alloc netprox MSI %d (error: %d)\n",
+					   __func__, priv->netprox_irq, ret);
+				irq_err = REQ_IRQ_ERR_NETWORK_PROXY;
+				goto irq_error;
+			}
+		}
+#endif
 	} else {
 		ret = request_irq(dev->irq, stmmac_interrupt,
 				  IRQF_SHARED, dev->name, dev);
@@ -5279,6 +5303,9 @@ int stmmac_dvr_probe(struct device *device,
 		priv->rx_irq[i] = res->rx_irq[i];
 	for (i = 0; i < MTL_MAX_TX_QUEUES; i++)
 		priv->tx_irq[i] = res->tx_irq[i];
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	priv->netprox_irq = res->netprox_irq;
+#endif
 
 	if (!IS_ERR_OR_NULL(res->mac))
 		memcpy(priv->dev->dev_addr, res->mac, ETH_ALEN);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 1d5844eccf6e..1837a1cb1b48 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -366,6 +366,7 @@ static int ehl_pse0_common_data(struct pci_dev *pdev,
 #ifdef CONFIG_STMMAC_NETWORK_PROXY
 #if (CONFIG_STMMAC_NETWORK_PROXY_PORT == 0)
 	plat->has_netproxy = 1;
+	plat->msi_network_proxy_vec = 24;
 #endif /* CONFIG_STMMAC_NETWORK_PROXY_PORT */
 #endif /* CONFIG_STMMAC_NETWORK_PROXY */
 
@@ -410,6 +411,7 @@ static int ehl_pse1_common_data(struct pci_dev *pdev,
 #ifdef CONFIG_STMMAC_NETWORK_PROXY
 #if (CONFIG_STMMAC_NETWORK_PROXY_PORT == 1)
 	plat->has_netproxy = 1;
+	plat->msi_network_proxy_vec = 24;
 #endif /* CONFIG_STMMAC_NETWORK_PROXY_PORT */
 #endif /* CONFIG_STMMAC_NETWORK_PROXY */
 
@@ -778,6 +780,12 @@ static int stmmac_config_multi_msi(struct pci_dev *pdev,
 		res->sfty_ce_irq = pci_irq_vector(pdev, plat->msi_sfty_ce_vec);
 	if (plat->msi_sfty_ue_vec < STMMAC_MSI_VEC_MAX)
 		res->sfty_ue_irq = pci_irq_vector(pdev, plat->msi_sfty_ue_vec);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	if (plat->msi_network_proxy_vec < STMMAC_MSI_VEC_MAX &&
+	    plat->has_netproxy)
+		res->netprox_irq =
+			pci_irq_vector(pdev, plat->msi_network_proxy_vec);
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
 
 	plat->multi_msi_en = 1;
 	dev_info(&pdev->dev, "%s: multi MSI enablement successful\n", __func__);
@@ -853,6 +861,9 @@ static int stmmac_pci_probe(struct pci_dev *pdev,
 	plat->msi_sfty_ue_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_rx_base_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_tx_base_vec = STMMAC_MSI_VEC_MAX;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	plat->msi_network_proxy_vec = STMMAC_MSI_VEC_MAX;
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
 
 	ret = info->setup(pdev, plat);
 	if (ret)
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index f272d6168b1f..018c751241a2 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -204,6 +204,9 @@ struct plat_stmmacenet_data {
 	int msi_sfty_ue_vec;
 	int msi_rx_base_vec;
 	int msi_tx_base_vec;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	int msi_network_proxy_vec;
+#endif
 	bool vlan_fail_q_en;
 	u8 vlan_fail_q;
 	bool speed_2500_en;
-- 
2.17.1

