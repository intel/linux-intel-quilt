From 5e7053fa54726576e808c24192e02b3e1af5c5c7 Mon Sep 17 00:00:00 2001
From: Kweh Hock Leong <hock.leong.kweh@intel.com>
Date: Fri, 9 Aug 2019 11:14:59 +0800
Subject: [PATCH 051/104] net: stmmac: add Time-Based Scheduling mode & launch
 time offset setting

Introduce functions for setting TBS mode, Launch Time offset & Launch Time
GSN offset under TSN hardware tunable framework.

Signed-off-by: Kweh Hock Leong <hock.leong.kweh@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |  13 +++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  |  67 +++++++++++
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  15 +++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 105 ++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |   5 +
 5 files changed, 205 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 40bbb93db382..acb24eb68429 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -168,6 +168,19 @@
 /* DMA Tx Channel X Control register TBS bits defines */
 #define DMA_CONTROL_EDSE		BIT(28)
 
+/* MTL TBS Control register */
+#define MTL_TBS_CTRL			0x00000c40
+#define MTL_TBS_CTRL_LEOS		GENMASK(31, 8)
+#define MTL_TBS_CTRL_LEOS_SHIFT		8
+#define MTL_TBS_CTRL_LEGOS		GENMASK(6, 4)
+#define MTL_TBS_CTRL_LEGOS_SHIFT	4
+#define MTL_TBS_CTRL_LEOV		BIT(1)
+#define MTL_TBS_CTRL_ESTM		BIT(0)
+
+/* TBS Global defines */
+#define TBS_LEOS_MAX			999999999	/* Max LEOS (ns) */
+#define TBS_LEGOS_MAX			7		/* Max LE GSN Slot */
+
 /* MAC Core Version */
 #define TSN_VER_MASK		0xFF
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 84c979c5a5dc..d33a72225741 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -403,6 +403,69 @@ int dwmac5_est_irq_status(void __iomem *ioaddr, struct net_device *dev,
 	return status;
 }
 
+static void dwmac5_tbs_get_max(u32 *leos_max,
+			       u32 *legos_max)
+{
+	*leos_max =  TBS_LEOS_MAX;
+	*legos_max = TBS_LEGOS_MAX;
+}
+
+static void dwmac5_tbs_set_estm(void __iomem *ioaddr, const u32 estm)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_TBS_CTRL);
+	if (estm)
+		value |= MTL_TBS_CTRL_ESTM;
+	else
+		value &= MTL_TBS_CTRL_ESTM;
+
+	writel(value, ioaddr + MTL_TBS_CTRL);
+}
+
+static void dwmac5_tbs_set_leos(void __iomem *ioaddr, const u32 leos,
+				const u32 estm)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_TBS_CTRL);
+
+	/* Launch expiry offset not valid when launch
+	 * expiry offset value is 0 and vice versa
+	 */
+	if (leos || (estm && leos))
+		value |= MTL_TBS_CTRL_LEOV;
+	else
+		value &= ~MTL_TBS_CTRL_LEOV;
+
+	/* Launch expiry offset is in unit of 256ns
+	 * Get the actual leos ns value
+	 */
+	value &= ~MTL_TBS_CTRL_LEOS;
+	value |= (leos & MTL_TBS_CTRL_LEOS);
+
+	writel(value, ioaddr + MTL_TBS_CTRL);
+}
+
+static void dwmac5_tbs_set_legos(void __iomem *ioaddr, const u32 legos,
+				 const u32 leos)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_TBS_CTRL);
+
+	if (leos || legos)
+		value |= MTL_TBS_CTRL_LEOV;
+	else
+		value &= ~MTL_TBS_CTRL_LEOV;
+
+	value &= ~MTL_TBS_CTRL_LEGOS;
+	value |= MTL_TBS_CTRL_LEGOS &
+		(legos << MTL_TBS_CTRL_LEGOS_SHIFT);
+
+	writel(value, ioaddr + MTL_TBS_CTRL);
+}
+
 const struct tsnif_ops dwmac510_tsnif_ops = {
 	.read_hwid = dwmac5_read_hwid,
 	.has_tsn_cap = dwmac5_has_tsn_cap,
@@ -422,6 +485,10 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.est_get_bank = dwmac5_est_get_bank,
 	.est_switch_swol = dwmac5_est_switch_swol,
 	.est_irq_status = dwmac5_est_irq_status,
+	.tbs_get_max = dwmac5_tbs_get_max,
+	.tbs_set_estm = dwmac5_tbs_set_estm,
+	.tbs_set_leos = dwmac5_tbs_set_leos,
+	.tbs_set_legos = dwmac5_tbs_set_legos,
 };
 
 void dwmac510_tsnif_setup(struct mac_device_info *mac)
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index e439f2b11766..8ce07431aad6 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -704,6 +704,13 @@ struct tsnif_ops {
 	int (*est_irq_status)(void *ioaddr, struct net_device *dev,
 			      struct tsn_mmc_stat *mmc_stat,
 			      unsigned int txqcnt);
+	/* Time-Based Scheduling (TBS) */
+	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max);
+	void (*tbs_set_estm)(void __iomem *ioaddr, const u32 estm);
+	void (*tbs_set_leos)(void __iomem *ioaddr, const u32 leos,
+			     const u32 estm);
+	void (*tbs_set_legos)(void __iomem *ioaddr, const u32 legos,
+			      const u32 leos);
 };
 
 #define tsnif_read_hwid(__hw, __args...) \
@@ -742,5 +749,13 @@ struct tsnif_ops {
 	tsnif_do_void_callback(__hw, est_switch_swol, __args)
 #define tsnif_est_irq_status(__hw, __args...) \
 	tsnif_do_callback(__hw, est_irq_status, __args)
+#define tsnif_tbs_get_max(__hw, __args...) \
+	tsnif_do_void_callback(__hw, tbs_get_max, __args)
+#define tsnif_tbs_set_estm(__hw, __args...) \
+	tsnif_do_void_callback(__hw, tbs_set_estm, __args)
+#define tsnif_tbs_set_leos(__hw, __args...) \
+	tsnif_do_void_callback(__hw, tbs_set_leos, __args)
+#define tsnif_tbs_set_legos(__hw, __args...) \
+	tsnif_do_void_callback(__hw, tbs_set_legos, __args)
 
 #endif /* __STMMAC_HWIF_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index d2e615659f4a..553e511ad47d 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -149,9 +149,15 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 			  &cap->cycle_max, &cap->idleslope_max);
 	cap->est_support = 1;
 
+	tsnif_tbs_get_max(hw, &cap->leos_max, &cap->legos_max);
+
 	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tils_max=%u, tqcnt=%u\n",
 		 gcl_depth, ti_wid, cap->ext_max, tils_max, cap->txqcnt);
 
+	if (cap->tbs_support)
+		dev_info(pdev, "TBS: leos_max=%u, legos_max=%u\n",
+			 cap->leos_max, cap->legos_max);
+
 	return 0;
 }
 
@@ -199,6 +205,11 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 	struct tsn_hw_cap *cap = &info->cap;
 	void __iomem *ioaddr = hw->pcsr;
 	int ret = 0;
+	struct est_gc_bank *gcbc;
+	u32 hw_bank;
+	u32 estm;
+	u32 leos;
+
 
 	switch (id) {
 	case TSN_HWTUNA_TX_EST_TILS:
@@ -209,6 +220,14 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 			return -ENOTSUPP;
 		}
 		break;
+	case TSN_HWTUNA_TX_TBS_ESTM:
+	case TSN_HWTUNA_TX_TBS_LEOS:
+	case TSN_HWTUNA_TX_TBS_LEGOS:
+		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_TBS)) {
+			netdev_info(dev, "TBS: feature unsupported\n");
+			return -ENOTSUPP;
+		}
+		break;
 	default:
 		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
 		return -EINVAL;
@@ -256,6 +275,84 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 			netdev_info(dev, "EST: Set CTOV = %u\n", data);
 		}
 		break;
+	case TSN_HWTUNA_TX_TBS_ESTM:
+		if (!data && data != 1) {
+			netdev_warn(dev,
+				    "TBS: invalid ESTM(%u) - 0 or 1 only\n",
+				    data);
+
+			return -EINVAL;
+		}
+
+		if (data == 1 && !tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+			netdev_warn(dev,
+				    "TBS: ESTM(%u) but EST is OFF\n",
+				    data);
+
+			return -EINVAL;
+		}
+
+		if (data != info->hwtunable[TSN_HWTUNA_TX_TBS_ESTM]) {
+			tsnif_tbs_set_estm(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_TBS_ESTM] = data;
+			netdev_info(dev, "TBS: Set ESTM = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_TBS_LEOS:
+		estm = info->hwtunable[TSN_HWTUNA_TX_TBS_ESTM];
+
+		if (data > cap->leos_max) {
+			netdev_warn(dev,
+				    "TBS: invalid LEOS(%u), max=%u\n",
+				    data, cap->leos_max);
+
+			return -EINVAL;
+		}
+
+		/* For EST mode, make sure leos does not exceed cycle time */
+		if (estm) {
+			hw_bank = tsnif_est_get_bank(hw, ioaddr, 0);
+			gcbc = &info->est_gcc.gcb[hw_bank];
+
+			if (data > (gcbc->gcrr.cycle_nsec - 1)) {
+				netdev_warn(dev,
+					    "TBS: LEOS > (cycle time - 1ns)\n");
+
+				return -EINVAL;
+			}
+		}
+
+		if (data != info->hwtunable[TSN_HWTUNA_TX_TBS_LEOS]) {
+			tsnif_tbs_set_leos(hw, ioaddr, data, estm);
+			info->hwtunable[TSN_HWTUNA_TX_TBS_LEOS] = data;
+			netdev_info(dev, "TBS: Set LEOS = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_TBS_LEGOS:
+		estm = info->hwtunable[TSN_HWTUNA_TX_TBS_ESTM];
+		leos = info->hwtunable[TSN_HWTUNA_TX_TBS_LEOS];
+
+		/* if EST not turn on, ret fail */
+		if (!(tsn_has_feat(hw, dev, TSN_FEAT_ID_EST) && estm)) {
+			netdev_warn(dev, "TBS EST mode is not enabled\n");
+
+			return -EINVAL;
+		}
+
+		if (data > cap->legos_max) {
+			netdev_warn(dev,
+				    "TBS: LEGOS(%u) > max=%u\n",
+				    data, cap->legos_max);
+
+			return -EINVAL;
+		}
+
+		if (data != info->hwtunable[TSN_HWTUNA_TX_TBS_LEGOS]) {
+			tsnif_tbs_set_legos(hw, ioaddr, data, leos);
+			info->hwtunable[TSN_HWTUNA_TX_TBS_LEGOS] = data;
+			netdev_info(dev, "TBS: Set LEGOS = %u\n", data);
+		}
+		break;
 	default:
 		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
 		ret = -EINVAL;
@@ -278,6 +375,14 @@ int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
 			return -ENOTSUPP;
 		}
 		break;
+	case TSN_HWTUNA_TX_TBS_ESTM:
+	case TSN_HWTUNA_TX_TBS_LEOS:
+	case TSN_HWTUNA_TX_TBS_LEGOS:
+		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_TBS)) {
+			netdev_info(dev, "TBS: feature unsupported\n");
+			return -ENOTSUPP;
+		}
+		break;
 	default:
 		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
 		return -EINVAL;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index 46de14829eff..abdc4635175b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -16,6 +16,9 @@ enum tsn_hwtunable_id {
 	TSN_HWTUNA_TX_EST_TILS = 0,
 	TSN_HWTUNA_TX_EST_PTOV,
 	TSN_HWTUNA_TX_EST_CTOV,
+	TSN_HWTUNA_TX_TBS_ESTM,	 /* TBS Absolute or EST mode */
+	TSN_HWTUNA_TX_TBS_LEOS,
+	TSN_HWTUNA_TX_TBS_LEGOS,
 	TSN_HWTUNA_MAX,
 };
 
@@ -54,6 +57,8 @@ struct tsn_hw_cap {
 	u32 ptov_max;		/* Max PTP Offset */
 	u32 ctov_max;		/* Max Current Time Offset */
 	u32 idleslope_max;	/* Max idle slope */
+	u32 leos_max;		/* Launch Expiry Offset */
+	u32 legos_max;		/* Launch Expiry GSN Offset */
 };
 
 /* EST Gate Control Entry */
-- 
2.17.1

