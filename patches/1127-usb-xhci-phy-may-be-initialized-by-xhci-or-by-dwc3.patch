From a473f11316642f04312813402761073733446e31 Mon Sep 17 00:00:00 2001
From: Dominik Bozek <dominikx.bozek@intel.com>
Date: Wed, 14 Mar 2018 15:56:00 +0100
Subject: [PATCH 1127/2313] usb: xhci: phy may be initialized by xhci or by
 dwc3

On the BXT-P both drivers use the same phy and mux.
The phy is controlled by platform driver intel_usb_dr_phy
and the platform device must be exist to before
any of the xhci or dwc3 driver initialize. Otherwise phy
won't be managed at all.
This patch instantiate intel_usb_dr_phy platform device
by any of the drivers xhci and dwc3 whichever initialize
as first.

Change-Id: I2c8ce2356ed6af913440b60c8e85639a6c30246e
Signed-off-by: Dominik Bozek <dominikx.bozek@intel.com>
Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
---
 drivers/usb/dwc3/dwc3-pci.c | 32 ++++++++++++++++++++++----------
 drivers/usb/host/xhci-pci.c | 32 ++++++++++++++++++++++++++++++++
 drivers/usb/host/xhci.h     |  1 +
 3 files changed, 55 insertions(+), 10 deletions(-)

diff --git a/drivers/usb/dwc3/dwc3-pci.c b/drivers/usb/dwc3/dwc3-pci.c
index 4ca7cdb..f7e78e3 100644
--- a/drivers/usb/dwc3/dwc3-pci.c
+++ b/drivers/usb/dwc3/dwc3-pci.c
@@ -25,6 +25,7 @@
 #include <linux/gpio/consumer.h>
 #include <linux/acpi.h>
 #include <linux/delay.h>
+#include <linux/usb/phy.h>
 
 #define PCI_DEVICE_ID_SYNOPSYS_HAPSUSB3		0xabcd
 #define PCI_DEVICE_ID_SYNOPSYS_HAPSUSB3_AXI	0xabce
@@ -130,16 +131,27 @@ static int dwc3_pci_quirks(struct dwc3_pci *dwc)
 		    pdev->device == PCI_DEVICE_ID_INTEL_BXT_M ||
 		    pdev->device == PCI_DEVICE_ID_INTEL_APL ) {
 
-			dwc->usb2_phy = platform_device_alloc(
-							"intel_usb_dr_phy", 0);
-			if (!dwc->usb2_phy)
-				return -ENOMEM;
-
-			dwc->usb2_phy->dev.parent = &pdev->dev;
-	                ret = platform_device_add(dwc->usb2_phy);
-		        if (ret) {
-			        platform_device_put(dwc->usb2_phy);
-				return ret;
+			if (IS_ERR_OR_NULL(usb_get_phy(USB_PHY_TYPE_USB2))) {
+				/* Unable to get phy, very likely intel_usb_dr_phy
+				 * platform device not yet allocated. Possible
+				 * race with another drivers.
+				 */
+				dwc->usb2_phy = platform_device_alloc(
+								"intel_usb_dr_phy", 0);
+				if (dwc->usb2_phy) {
+					dwc->usb2_phy->dev.parent = &pdev->dev;
+					ret = platform_device_add(dwc->usb2_phy);
+					if (ret) {
+						platform_device_put(dwc->usb2_phy);
+						return ret;
+					}
+				} else if (IS_ERR_OR_NULL(usb_get_phy(USB_PHY_TYPE_USB2))) {
+					/* In case of a race and another driver allocate
+					 * intel_usb_dr_phy platform device earlier, check
+					 * whether phy is already available. If not return error.
+					 */
+					return -ENOMEM;
+				}
 			}
 		}
 
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index f8e1352..ea556b3 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -26,6 +26,7 @@
 #include <linux/acpi.h>
 #include <linux/usb/phy.h>
 #include <linux/usb/otg.h>
+#include <linux/platform_device.h>
 
 #include "xhci.h"
 #include "xhci-trace.h"
@@ -92,6 +93,35 @@ static int xhci_pci_reinit(struct xhci_hcd *xhci, struct pci_dev *pdev)
 	/* If This capbility is found, register host on PHY for OTG purpose */
 	if (pdev->vendor == PCI_VENDOR_ID_INTEL && retval) {
 		hcd = xhci_to_hcd(xhci);
+
+		hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
+
+		if (IS_ERR_OR_NULL(hcd->usb_phy)) {
+			/* Unable to get phy, very likely intel_usb_dr_phy
+			 * platform device not yet allocated. Possible
+			 * race with another drivers.
+			 */
+			int ret;
+			xhci->usb2_phy = platform_device_alloc(
+								"intel_usb_dr_phy", 0);
+			if (xhci->usb2_phy) {
+				xhci->usb2_phy->dev.parent = &pdev->dev;
+					ret = platform_device_add(xhci->usb2_phy);
+				if (ret) {
+					platform_device_put(xhci->usb2_phy);
+					return ret;
+				}
+			} else {
+				/* In case of a race and another driver allocate
+				 * intel_usb_dr_phy platform device earlier, check
+				 * whether phy is already available. If not return error.
+				 */
+				hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
+				if (IS_ERR_OR_NULL(hcd->usb_phy))
+					return -ENOMEM;
+			}
+		}
+
 		hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
 
 		if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
@@ -393,6 +423,8 @@ static void xhci_pci_remove(struct pci_dev *dev)
 
 	xhci = hcd_to_xhci(pci_get_drvdata(dev));
 	xhci->xhc_state |= XHCI_STATE_REMOVING;
+	if(xhci->usb2_phy)
+		platform_device_unregister(xhci->usb2_phy);
 	if (xhci->shared_hcd) {
 		usb_remove_hcd(xhci->shared_hcd);
 		usb_put_hcd(xhci->shared_hcd);
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index cbc9153..e2537ae 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1868,6 +1868,7 @@ struct xhci_hcd {
 	struct timer_list	comp_mode_recovery_timer;
 	u32			port_status_u0;
 	u16			test_mode;
+	struct platform_device	*usb2_phy;
 /* Compliance Mode Timer Triggered every 2 seconds */
 #define COMP_MODE_RCVRY_MSECS 2000
 
-- 
2.7.4

