From 196b7e7299a2b8de494d5626aad9398512a1e011 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Sat, 10 Aug 2019 12:55:12 +0800
Subject: [PATCH 056/104] net: stmmac: support FPE link partner hand-shaking
 procedure

In order to discover whether remote station supports frame preemption,
local station sends verify mPacket and expects response mPacket in return
from the remote station.

So, we add the functions to send and handle event when verify mPacket and
response mPacket are exchanged between the networked stations.

The mechanism to handle different FPE states between local and remote
station (link partner) is implemented using workqueue which starts a task
each time there is some sign of verify & response mPacket exchange as
check in FPE IRQ event. The task retries couple of times to try to spot
the states that both stations are ready to enter FPE ON. This allows
different end points to enable FPE at different time and verify-response
mPacket can happen asynchronously. Ultimately, the task will only turn FPE
ON when local station have both exchange response in both directions.

Thanks to Voon Weifeng for implementing the core functions for detecting
FPE events and send mPacket and phylink related change.

Tested-by: Tan Tee Min
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/common.h  |   1 +
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |   7 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |   8 +
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  |  49 +++++
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  27 +++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |  22 +++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 178 +++++++++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  42 +++++
 8 files changed, 333 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/common.h b/drivers/net/ethernet/stmicro/stmmac/common.h
index 45cd3aceba1c..e610874eee2f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@ -465,6 +465,7 @@ struct mac_device_info {
 	u8 vlan_fail_q;
 	const struct tsnif_ops *tsnif;
 	struct tsnif_info tsn_info;
+	bool cached_fpe_en;
 };
 
 struct stmmac_rx_routing {
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index 30f8bc61488b..ac0e62b215ac 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -64,6 +64,9 @@ static void dwmac4_core_init(struct mac_device_info *hw,
 	if (hw->mdio_intr_en)
 		value |= GMAC_INT_MDIO_EN;
 
+	if (hw->tsn_info.feat_en[TSN_FEAT_ID_FPE])
+		value |= GMAC_INT_FPE_EN;
+
 	writel(value, ioaddr + GMAC_INT_EN);
 }
 
@@ -1105,6 +1108,7 @@ const struct stmmac_ops dwmac510_ops = {
 	.tsnif_setup = dwmac510_tsnif_setup,
 	.init_tsn = tsn_init,
 	.setup_tsn_hw = tsn_hw_setup,
+	.unsetup_tsn_hw = tsn_hw_unsetup,
 	.set_tsn_feat = tsn_feat_set,
 	.has_tsn_feat = tsn_has_feat,
 	.set_tsn_hwtunable = tsn_hwtunable_set,
@@ -1123,6 +1127,9 @@ const struct stmmac_ops dwmac510_ops = {
 	.fpe_set_enable = tsn_fpe_set_enable,
 	.fpe_get_config = tsn_fpe_get_config,
 	.fpe_show_pmac_sts = tsn_fpe_show_pmac_sts,
+	.fpe_send_mpacket = tsn_fpe_send_mpacket,
+	.fpe_link_state_handle = tsn_fpe_link_state_handle,
+	.fpe_irq_status = tsn_fpe_irq_status,
 };
 
 static u32 dwmac4_get_num_vlan(void __iomem *ioaddr)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 013ebd6af865..1df32ac5d7df 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -75,6 +75,8 @@
 
 /* MDIO interrupt enable in MAC_Interrupt_Enable register */
 #define GMAC_INT_MDIO_EN		BIT(18)
+/* FPE enable in MAC_Interrupt_Enable register */
+#define GMAC_INT_FPE_EN			BIT(17)
 
 /* EQoS version 5.xx VLAN Tag Filter Fail Packets Queuing */
 #define GMAC_RXQ_CTRL4			0x00000094
@@ -172,6 +174,12 @@
 
 /* MAC FPE control status */
 #define MAC_FPE_CTRL_STS		0x00000234
+#define MAC_FPE_CTRL_STS_TRSP		BIT(19)	/* Tx'ed Response mPacket */
+#define MAC_FPE_CTRL_STS_TVER		BIT(18)	/* Tx'ed Verify mPacket */
+#define MAC_FPE_CTRL_STS_RRSP		BIT(17)	/* Rcvd Response mPacket */
+#define MAC_FPE_CTRL_STS_RVER		BIT(16)	/* Rcvd Verify mPacket */
+#define MAC_FPE_CTRL_STS_SRSP		BIT(2)	/* Send Response mPacket */
+#define MAC_FPE_CTRL_STS_SVER		BIT(1)	/* Send Verify mPacket */
 #define MAC_FPE_CTRL_STS_EFPE		BIT(0)
 
 /* MTL FPE control status */
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index a8156138a0a1..192af21d6815 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -504,6 +504,53 @@ static void dwmac5_fpe_set_radv(void *ioaddr, const u32 radv)
 	writel(value, ioaddr + MTL_FPE_ADVANCE);
 }
 
+void dwmac5_fpe_irq_status(void *ioaddr, struct net_device *dev,
+			   enum fpe_event *event)
+{
+	u32 value;
+
+	*event = FPE_EVENT_UNKNOWN;
+
+	value = readl(ioaddr + MAC_FPE_CTRL_STS);
+
+	if (value & MAC_FPE_CTRL_STS_TRSP) {
+		*event |= FPE_EVENT_TRSP;
+		netdev_info(dev, "FPE: Respond mPacket is transmitted\n");
+	}
+
+	if (value & MAC_FPE_CTRL_STS_TVER) {
+		*event |= FPE_EVENT_TVER;
+		netdev_info(dev, "FPE: Verify mPacket is transmitted\n");
+	}
+
+	if (value & MAC_FPE_CTRL_STS_RRSP) {
+		*event |= FPE_EVENT_RRSP;
+		netdev_info(dev, "FPE: Respond mPacket is received\n");
+	}
+
+	if (value & MAC_FPE_CTRL_STS_RVER) {
+		*event |= FPE_EVENT_RVER;
+		netdev_info(dev, "FPE: Verify mPacket is received\n");
+	}
+}
+
+void dwmac5_fpe_send_mpacket(void *ioaddr, enum mpacket_type type)
+{
+	u32 value;
+
+	value = readl(ioaddr + MAC_FPE_CTRL_STS);
+
+	if (type == MPACKET_VERIFY) {
+		value &= ~MAC_FPE_CTRL_STS_SRSP;
+		value |= MAC_FPE_CTRL_STS_SVER;
+	} else {
+		value &= ~MAC_FPE_CTRL_STS_SVER;
+		value |= MAC_FPE_CTRL_STS_SRSP;
+	}
+
+	writel(value, ioaddr + MAC_FPE_CTRL_STS);
+}
+
 static void dwmac5_tbs_get_max(u32 *leos_max,
 			       u32 *legos_max,
 			       u32 *ftos_max,
@@ -643,6 +690,8 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.fpe_set_afsz = dwmac5_fpe_set_afsz,
 	.fpe_set_hadv = dwmac5_fpe_set_hadv,
 	.fpe_set_radv = dwmac5_fpe_set_radv,
+	.fpe_irq_status = dwmac5_fpe_irq_status,
+	.fpe_send_mpacket = dwmac5_fpe_send_mpacket,
 	.tbs_get_max = dwmac5_tbs_get_max,
 	.tbs_set_estm = dwmac5_tbs_set_estm,
 	.tbs_set_leos = dwmac5_tbs_set_leos,
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 593a657bd18b..de1b53dff9b8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -262,6 +262,7 @@ enum tsn_hwtunable_id;
 struct est_gc_entry;
 struct est_gcrr;
 struct est_gc_config;
+enum mpacket_type;
 
 /* Helpers to program the MAC core */
 struct stmmac_ops {
@@ -363,6 +364,8 @@ struct stmmac_ops {
 			     enum tsn_feat_id featid);
 	void (*setup_tsn_hw)(struct mac_device_info *hw,
 			     struct net_device *dev, u32 fprq);
+	void (*unsetup_tsn_hw)(struct mac_device_info *hw,
+			       struct net_device *dev);
 	int (*set_tsn_hwtunable)(struct mac_device_info *hw,
 				 struct net_device *dev,
 				 enum tsn_hwtunable_id id,
@@ -406,6 +409,12 @@ struct stmmac_ops {
 			      bool *enable);
 	int (*fpe_show_pmac_sts)(struct mac_device_info *hw,
 				 struct net_device *dev);
+	int (*fpe_send_mpacket)(struct mac_device_info *hw,
+				struct net_device *dev, enum mpacket_type type);
+	void (*fpe_link_state_handle)(struct mac_device_info *hw,
+				      struct net_device *dev, bool is_up);
+	void (*fpe_irq_status)(struct mac_device_info *hw,
+			       struct net_device *dev);
 };
 
 #define stmmac_core_init(__priv, __args...) \
@@ -496,6 +505,8 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, has_tsn_feat, __args)
 #define stmmac_tsn_hw_setup(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mac, setup_tsn_hw, __args)
+#define stmmac_tsn_hw_unsetup(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, unsetup_tsn_hw, __args)
 #define stmmac_set_tsn_hwtunable(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, set_tsn_hwtunable, __args)
 #define stmmac_get_tsn_hwtunable(__priv, __args...) \
@@ -528,6 +539,12 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, fpe_get_config, __args)
 #define stmmac_fpe_show_pmac_sts(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, fpe_show_pmac_sts, __args)
+#define stmmac_fpe_send_mpacket(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, fpe_send_mpacket, __args)
+#define stmmac_fpe_link_state_handle(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, fpe_link_state_handle, __args)
+#define stmmac_fpe_irq_status(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, fpe_irq_status, __args)
 
 /* Helpers for serdes */
 struct stmmac_serdes_ops {
@@ -690,6 +707,7 @@ int stmmac_hwif_init(struct stmmac_priv *priv);
 })
 
 struct tsn_mmc_stat;
+enum fpe_event;
 
 struct tsnif_ops {
 	u32 (*read_hwid)(void __iomem *ioaddr);
@@ -733,6 +751,9 @@ struct tsnif_ops {
 	void (*fpe_set_afsz)(void *ioaddr, const u32 afsz);
 	void (*fpe_set_hadv)(void *ioaddr, const u32 hadv);
 	void (*fpe_set_radv)(void *ioaddr, const u32 radv);
+	void (*fpe_send_mpacket)(void *ioaddr, enum mpacket_type type);
+	void (*fpe_irq_status)(void *ioaddr, struct net_device *dev,
+			       enum fpe_event *fpe_event);
 	/* Time-Based Scheduling (TBS) */
 	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max,
 			    u32 *ftos_max, u32 *fgos_max);
@@ -801,6 +822,12 @@ struct tsnif_ops {
 	tsnif_do_void_callback(__hw, fpe_set_hadv, __args)
 #define tsnif_fpe_set_radv(__hw, __args...) \
 	tsnif_do_void_callback(__hw, fpe_set_radv, __args)
+#define tsnif_fpe_set_radv(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_set_radv, __args)
+#define tsnif_fpe_send_mpacket(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_send_mpacket, __args)
+#define tsnif_fpe_irq_status(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_irq_status, __args)
 #define tsnif_tbs_get_max(__hw, __args...) \
 	tsnif_do_void_callback(__hw, tbs_get_max, __args)
 #define tsnif_tbs_set_estm(__hw, __args...) \
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 78b60d2a5b29..538c17a79d3b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -961,6 +961,8 @@ static void stmmac_mac_link_down(struct phylink_config *config,
 	priv->eee_active = false;
 	stmmac_eee_init(priv);
 	stmmac_set_eee_pls(priv, priv->hw, false);
+	stmmac_fpe_link_state_handle(priv, priv->hw, priv->dev, false);
+
 }
 
 static void stmmac_mac_link_up(struct phylink_config *config,
@@ -975,6 +977,7 @@ static void stmmac_mac_link_up(struct phylink_config *config,
 		priv->eee_enabled = stmmac_eee_init(priv);
 		stmmac_set_eee_pls(priv, priv->hw, true);
 	}
+	stmmac_fpe_link_state_handle(priv, priv->hw, priv->dev, true);
 }
 
 static const struct phylink_mac_ops stmmac_phylink_mac_ops = {
@@ -2708,6 +2711,11 @@ static int stmmac_hw_setup(struct net_device *dev, bool init_ptp)
 					 TSN_HWTUNA_TX_TBS_FGOS,
 					 priv->plat->fgos);
 
+	if (stmmac_has_tsn_feat(priv, priv->hw, dev, TSN_FEAT_ID_FPE)) {
+		if (priv->hw->cached_fpe_en)
+			stmmac_fpe_set_enable(priv, priv->hw, dev, true);
+	}
+
 	return 0;
 }
 
@@ -3100,6 +3108,8 @@ static int stmmac_release(struct net_device *dev)
 
 	stmmac_release_ptp(priv);
 
+	stmmac_tsn_hw_unsetup(priv, priv->hw, dev);
+
 	return 0;
 }
 
@@ -4074,6 +4084,9 @@ static void stmmac_common_interrupt(struct stmmac_priv *priv)
 	if (priv->hw->tsn_info.feat_en[TSN_FEAT_ID_EST])
 		stmmac_est_irq_status(priv, priv->hw, priv->dev);
 
+	if (priv->hw->tsn_info.feat_en[TSN_FEAT_ID_FPE])
+		stmmac_fpe_irq_status(priv, priv->hw, priv->dev);
+
 	/* To handle GMAC own interrupts */
 	if ((priv->plat->has_gmac) || xmac) {
 		int status = stmmac_host_irq_status(priv, priv->hw, &priv->xstats);
@@ -5127,6 +5140,15 @@ int stmmac_suspend(struct device *dev)
 		clk_disable(priv->plat->pclk);
 		clk_disable(priv->plat->stmmac_clk);
 	}
+
+	if (stmmac_has_tsn_feat(priv, priv->hw, ndev, TSN_FEAT_ID_FPE)) {
+		/* Keep the FPE enable/disable state before suspend */
+		priv->hw->cached_fpe_en = priv->hw->tsn_info.fpe_cfg.enable;
+		netdev_info(ndev, "FPE: cached Enable %d",
+			    priv->hw->cached_fpe_en);
+		stmmac_fpe_set_enable(priv, priv->hw, ndev, false);
+	}
+
 	mutex_unlock(&priv->lock);
 
 	priv->speed = SPEED_UNKNOWN;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index 6a82ac5f00b8..9b7ad371d4ba 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -3,6 +3,7 @@
  * TSN General APIs
  */
 #include <linux/iopoll.h>
+#include <linux/delay.h>
 #include <linux/string.h>
 #include <linux/time64.h>
 #include "stmmac_ptp.h"
@@ -66,6 +67,83 @@ static u64 est_get_all_open_time(struct est_gc_config *est_gcc,
 	return total;
 }
 
+static void fpe_lp_task(struct work_struct *work)
+{
+	struct mac_device_info *hw;
+	enum fpe_state *lo_state;
+	enum fpe_state *lp_state;
+	struct tsnif_info *info;
+	void __iomem *ioaddr;
+	bool *enable;
+	int retries;
+
+	info = container_of(work, struct tsnif_info, fpe_task);
+	lo_state = &info->fpe_cfg.lo_fpe_state;
+	lp_state = &info->fpe_cfg.lp_fpe_state;
+	enable = &info->fpe_cfg.enable;
+
+	hw = container_of(info, struct mac_device_info, tsn_info);
+	ioaddr = hw->pcsr;
+
+	retries = 20;
+
+	while (retries-- > 0) {
+		/* Bail out immediately if FPE is OFF */
+		if (*lo_state == FPE_STATE_OFF || !*enable)
+			break;
+
+		if (*lo_state == FPE_STATE_ENTERING_ON &&
+		    *lp_state == FPE_STATE_ENTERING_ON) {
+			tsnif_fpe_set_enable(hw, ioaddr, true);
+			*lo_state = FPE_STATE_ON;
+			*lp_state = FPE_STATE_ON;
+			break;
+		}
+
+		if ((*lo_state == FPE_STATE_CAPABLE ||
+		     *lo_state == FPE_STATE_ENTERING_ON) &&
+		    *lp_state != FPE_STATE_ON)
+			tsnif_fpe_send_mpacket(hw, ioaddr, MPACKET_VERIFY);
+
+		/* Sleep then retry */
+		msleep(500);
+	}
+
+	clear_bit(__FPE_TASK_SCHED, &info->task_state);
+}
+
+static int fpe_start_wq(struct mac_device_info *hw, struct net_device *dev)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	char *name;
+
+	clear_bit(__FPE_TASK_SCHED, &info->task_state);
+
+	name = info->wq_name;
+	sprintf(name, "%s-fpe", dev->name);
+
+	info->fpe_wq = create_singlethread_workqueue(name);
+	if (!info->fpe_wq) {
+		netdev_err(dev, "%s: Failed to create workqueue\n", name);
+
+		return -ENOMEM;
+	}
+	netdev_info(dev, "FPE workqueue start");
+
+	return 0;
+}
+
+static void fpe_stop_wq(struct mac_device_info *hw, struct net_device *dev)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+
+	set_bit(__FPE_REMOVING, &info->task_state);
+
+	if (info->fpe_wq)
+		destroy_workqueue(info->fpe_wq);
+
+	netdev_info(dev, "FPE workqueue stop");
+}
 int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 {
 	struct tsnif_info *info = &hw->tsn_info;
@@ -152,6 +230,7 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 		goto check_tbs;
 	}
 
+	INIT_WORK(&info->fpe_task, fpe_lp_task);
 	tsnif_fpe_get_info(hw, &cap->pmac_bit, &cap->afsz_max,
 			   &cap->hadv_max, &cap->radv_max);
 	cap->rxqcnt = tsnif_est_get_rxqcnt(hw, ioaddr);
@@ -231,9 +310,17 @@ void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev,
 		} else {
 			netdev_warn(dev, "FPE: FPRQ is out-of-bound.\n");
 		}
+
+		fpe_start_wq(hw, dev);
 	}
 }
 
+void tsn_hw_unsetup(struct mac_device_info *hw, struct net_device *dev)
+{
+	if (tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE))
+		fpe_stop_wq(hw, dev);
+}
+
 int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 		      enum tsn_hwtunable_id id,
 		      const u32 data)
@@ -1129,7 +1216,11 @@ int tsn_fpe_set_enable(struct mac_device_info *hw, struct net_device *dev,
 	}
 
 	if (info->fpe_cfg.enable != enable) {
-		tsnif_fpe_set_enable(hw, ioaddr, enable);
+		if (enable)
+			tsnif_fpe_send_mpacket(hw, ioaddr, MPACKET_VERIFY);
+		else
+			info->fpe_cfg.lo_fpe_state = FPE_STATE_OFF;
+
 		info->fpe_cfg.enable = enable;
 	}
 
@@ -1170,3 +1261,88 @@ int tsn_fpe_show_pmac_sts(struct mac_device_info *hw, struct net_device *dev)
 
 	return 0;
 }
+
+int tsn_fpe_send_mpacket(struct mac_device_info *hw, struct net_device *dev,
+			 enum mpacket_type type)
+{
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		netdev_info(dev, "FPE: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	tsnif_fpe_send_mpacket(hw, ioaddr, type);
+
+	return 0;
+}
+
+void tsn_fpe_link_state_handle(struct mac_device_info *hw,
+			       struct net_device *dev, bool is_up)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+	enum fpe_state *lo_state;
+	enum fpe_state *lp_state;
+	bool *enable;
+
+	lo_state = &info->fpe_cfg.lo_fpe_state;
+	lp_state = &info->fpe_cfg.lp_fpe_state;
+	enable = &info->fpe_cfg.enable;
+
+	if (is_up && *enable) {
+		tsnif_fpe_send_mpacket(hw, ioaddr, MPACKET_VERIFY);
+	} else {
+		*lo_state = FPE_EVENT_UNKNOWN;
+		*lp_state = FPE_EVENT_UNKNOWN;
+	}
+}
+
+void tsn_fpe_irq_status(struct mac_device_info *hw, struct net_device *dev)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+	enum fpe_event *event;
+	enum fpe_state *lo_state;
+	enum fpe_state *lp_state;
+	bool *enable;
+
+	event = &info->fpe_cfg.fpe_event;
+	lo_state = &info->fpe_cfg.lo_fpe_state;
+	lp_state = &info->fpe_cfg.lp_fpe_state;
+	enable = &info->fpe_cfg.enable;
+
+	tsnif_fpe_irq_status(hw, ioaddr, dev, event);
+
+	if (*event == FPE_EVENT_UNKNOWN || !*enable)
+		return;
+
+	/* If LP has sent verify mPacket, LP is FPE capable */
+	if ((*event & FPE_EVENT_RVER) == FPE_EVENT_RVER) {
+		if (*lp_state < FPE_STATE_CAPABLE)
+			*lp_state = FPE_STATE_CAPABLE;
+
+		/* If user has requested FPE enable, quickly response */
+		if (*enable)
+			tsnif_fpe_send_mpacket(hw, ioaddr, MPACKET_RESPONSE);
+	}
+
+	/* If Local has sent verify mPacket, Local is FPE capable */
+	if ((*event & FPE_EVENT_TVER) == FPE_EVENT_TVER) {
+		if (*lo_state < FPE_STATE_CAPABLE)
+			*lo_state = FPE_STATE_CAPABLE;
+	}
+
+	/* If LP has sent response mPacket, LP is entering FPE ON */
+	if ((*event & FPE_EVENT_RRSP) == FPE_EVENT_RRSP)
+		*lp_state = FPE_STATE_ENTERING_ON;
+
+	/* If Local has sent response mPacket, Local is entering FPE ON */
+	if ((*event & FPE_EVENT_TRSP) == FPE_EVENT_TRSP)
+		*lo_state = FPE_STATE_ENTERING_ON;
+
+	if (!test_bit(__FPE_REMOVING, &info->task_state) &&
+	    !test_and_set_bit(__FPE_TASK_SCHED, &info->task_state) &&
+	    info->fpe_wq)
+		queue_work(info->fpe_wq, &info->fpe_task);
+}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index ac4cfe6c7569..2a27e2b86a60 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -106,10 +106,36 @@ struct est_gc_config {
 	bool enable;			/* 1: enabled */
 };
 
+/* FPE hand-shaking event */
+enum fpe_event {
+	FPE_EVENT_UNKNOWN = 0,
+	FPE_EVENT_TRSP = 1,	/* Tx'ed Response mPacket */
+	FPE_EVENT_TVER = 2,	/* Tx'ed Verify mPacket */
+	FPE_EVENT_RRSP = 4,	/* Rcvd Response mPacket */
+	FPE_EVENT_RVER = 8,	/* Rcvd Verify mPacket */
+};
+
+/* FPE link state */
+enum fpe_state {
+	FPE_STATE_OFF = 0,
+	FPE_STATE_CAPABLE = 1,
+	FPE_STATE_ENTERING_ON = 2,
+	FPE_STATE_ON = 3,
+};
+
+/* FPE link-partner hand-shaking mPacket type */
+enum mpacket_type {
+	MPACKET_VERIFY = 0,
+	MPACKET_RESPONSE = 1,
+};
+
 /* FPE Configuration */
 struct fpe_config {
 	u32 txqpec;		/* TxQ Preemption Classification */
 	bool enable;		/* 1: enabled */
+	enum fpe_state lp_fpe_state;	/* Link Partner FPE state */
+	enum fpe_state lo_fpe_state;	/* Local station FPE state */
+	enum fpe_event fpe_event;	/* FPE Hand-shake state */
 };
 
 /* TSN MMC Statistics */
@@ -122,6 +148,11 @@ struct tsn_mmc_stat {
 	unsigned long count[STMMAC_TSN_STAT_SIZE];
 };
 
+enum fpe_task_state_t {
+	__FPE_REMOVING,
+	__FPE_TASK_SCHED,
+};
+
 struct tsnif_info {
 	struct tsn_hw_cap cap;
 	bool feat_en[TSN_FEAT_ID_MAX];
@@ -130,6 +161,11 @@ struct tsnif_info {
 	struct fpe_config fpe_cfg;
 	struct tsn_mmc_stat mmc_stat;
 	const struct tsn_mmc_desc *mmc_desc;
+	/* Workqueue for handling FPE hand-shaking */
+	unsigned long task_state;
+	struct workqueue_struct *fpe_wq;
+	struct work_struct fpe_task;
+	char wq_name[IFNAMSIZ];
 };
 
 struct mac_device_info;
@@ -142,6 +178,7 @@ bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
 		  enum tsn_feat_id featid);
 void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev,
 		  u32 fprq);
+void tsn_hw_unsetup(struct mac_device_info *hw, struct net_device *dev);
 int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 		      enum tsn_hwtunable_id id, const u32 data);
 int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
@@ -175,5 +212,10 @@ int tsn_fpe_set_enable(struct mac_device_info *hw, struct net_device *dev,
 int tsn_fpe_get_config(struct mac_device_info *hw, struct net_device *dev,
 		       u32 *txqpec, bool *enable);
 int tsn_fpe_show_pmac_sts(struct mac_device_info *hw, struct net_device *dev);
+int tsn_fpe_send_mpacket(struct mac_device_info *hw, struct net_device *dev,
+			 enum mpacket_type type);
+void tsn_fpe_link_state_handle(struct mac_device_info *hw,
+			       struct net_device *dev, bool is_up);
+void tsn_fpe_irq_status(struct mac_device_info *hw, struct net_device *dev);
 
 #endif /* __STMMAC_TSN_H__ */
-- 
2.17.1

