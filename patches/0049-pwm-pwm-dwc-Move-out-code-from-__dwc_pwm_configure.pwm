From 5ab9693516a06b1099c00820036544153fab1eb9 Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Mon, 29 Jun 2020 14:53:32 +0300
Subject: [PATCH 49/55] pwm: pwm-dwc: Move out code from __dwc_pwm_configure()

Function __dwc_pwm_configure() is called only from
__dwc_pwm_configure_timer() and since function itself is quite simple so
the code can be move out into __dwc_pwm_configure_timer().

Motivation here is getting rid of duty_ns and period_ns arguments and
use directly struct pwm_state member variables which will be converted
to u64 in upsteam PWM code by the commit a9d887dc1c60 ("pwm: Convert
period and duty cycle to u64").

Please note divisions need to be converted.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/pwm/pwm-dwc.c | 35 +++++++++++++++--------------------
 1 file changed, 15 insertions(+), 20 deletions(-)

diff --git a/drivers/pwm/pwm-dwc.c b/drivers/pwm/pwm-dwc.c
index 3125f580f1f8..1ae430b9b13a 100644
--- a/drivers/pwm/pwm-dwc.c
+++ b/drivers/pwm/pwm-dwc.c
@@ -67,24 +67,6 @@ static inline void dwc_pwm_writel(struct dwc_pwm *dwc, u32 value, u32 offset)
 	writel(value, dwc->base + offset);
 }
 
-static void __dwc_pwm_configure(struct dwc_pwm *dwc, int pwm,
-				unsigned int duty_ns,
-				unsigned int period_ns)
-{
-	u32 ctrl;
-	u32 high;
-	u32 low;
-
-	high = DIV_ROUND_CLOSEST(duty_ns, DWC_CLK_PERIOD_NS) - 1;
-	low = DIV_ROUND_CLOSEST(period_ns - duty_ns, DWC_CLK_PERIOD_NS) - 1;
-
-	dwc_pwm_writel(dwc, low, DWC_TIM_LD_CNT(pwm));
-	dwc_pwm_writel(dwc, high, DWC_TIM_LD_CNT2(pwm));
-
-	ctrl = DWC_TIM_CTRL_MODE_USER | DWC_TIM_CTRL_PWM;
-	dwc_pwm_writel(dwc, ctrl, DWC_TIM_CTRL(pwm));
-}
-
 static void __dwc_pwm_set_enable(struct dwc_pwm *dwc, int pwm, int enabled)
 {
 	u32 reg;
@@ -103,9 +85,22 @@ static void __dwc_pwm_configure_timer(struct dwc_pwm *dwc,
 				      struct pwm_device *pwm,
 				      const struct pwm_state *state)
 {
+	u32 ctrl;
+	u32 high;
+	u32 low;
+
 	__dwc_pwm_set_enable(dwc, pwm->hwpwm, false);
-	__dwc_pwm_configure(dwc, pwm->hwpwm, state->duty_cycle,
-			    state->period);
+
+	high = DIV_ROUND_CLOSEST(state->duty_cycle, DWC_CLK_PERIOD_NS) - 1;
+	low = DIV_ROUND_CLOSEST(state->period - state->duty_cycle,
+				DWC_CLK_PERIOD_NS) - 1;
+
+	dwc_pwm_writel(dwc, low, DWC_TIM_LD_CNT(pwm->hwpwm));
+	dwc_pwm_writel(dwc, high, DWC_TIM_LD_CNT2(pwm->hwpwm));
+
+	ctrl = DWC_TIM_CTRL_MODE_USER | DWC_TIM_CTRL_PWM;
+	dwc_pwm_writel(dwc, ctrl, DWC_TIM_CTRL(pwm->hwpwm));
+
 	__dwc_pwm_set_enable(dwc, pwm->hwpwm, state->enabled);
 }
 
-- 
2.27.0

