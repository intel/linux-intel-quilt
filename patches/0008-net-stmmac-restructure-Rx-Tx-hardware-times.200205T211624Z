From 21bd120d3bd39c43911a1c2bc673907552768536 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Thu, 28 Nov 2019 16:04:21 +0800
Subject: [PATCH 08/31] net: stmmac: restructure Rx & Tx hardware timestamping
 functions

We rearrange the functions for getting Rx & Tx time-stampings for
skb so that these functions can also be reused for XDP later.

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Tan, Tee Min <tee.min.tan@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  4 +-
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 45 +++++++++----------
 2 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 5648e1761a48..c5745dc5a717 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -399,7 +399,9 @@ int stmmac_queue_pair_enable(struct stmmac_priv *priv, u16 qid);
 int stmmac_queue_pair_disable(struct stmmac_priv *priv, u16 qid);
 void stmmac_rx_vlan(struct net_device *dev, struct sk_buff *skb);
 void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
-			    struct dma_desc *np, struct sk_buff *skb);
+			    struct dma_desc *np, ktime_t *hwtstamp);
+void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
+			    ktime_t *hwtstamp);
 int stmmac_set_tbs_launchtime(struct stmmac_priv *priv, struct dma_desc *desc,
 			      u64 tx_time);
 #if IS_ENABLED(CONFIG_STMMAC_SELFTESTS)
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index d3cfe7c99df2..289a3f9273d2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -419,15 +419,14 @@ bool stmmac_eee_init(struct stmmac_priv *priv)
 /* stmmac_get_tx_hwtstamp - get HW TX timestamps
  * @priv: driver private structure
  * @p : descriptor pointer
- * @skb : the socket buffer
+ * @hwtstamp : hardware timestamp
  * Description :
  * This function will read timestamp from the descriptor & pass it to stack.
  * and also perform some sanity checks.
  */
-static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
-				   struct dma_desc *p, struct sk_buff *skb)
+void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
+			    struct dma_desc *p, ktime_t *hwtstamp)
 {
-	struct skb_shared_hwtstamps shhwtstamp;
 	bool found = false;
 	u64 adjust = 0;
 	u64 ns = 0;
@@ -435,10 +434,6 @@ static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
 	if (!priv->hwts_tx_en)
 		return;
 
-	/* exit if skb doesn't support hw tstamp */
-	if (likely(!skb || !(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS)))
-		return;
-
 	/* check tx tstamp status */
 	if (stmmac_get_tx_timestamp_status(priv, p)) {
 		stmmac_get_timestamp(priv, p, priv->adv_ts, &ns);
@@ -464,12 +459,8 @@ static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
 		}
 
 		ns += adjust;
-		memset(&shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
-		shhwtstamp.hwtstamp = ns_to_ktime(ns);
-
+		*hwtstamp = ns_to_ktime(ns);
 		netdev_dbg(priv->dev, "get valid TX hw timestamp %llu\n", ns);
-		/* pass tstamp to stack */
-		skb_tstamp_tx(skb, &shhwtstamp);
 	}
 }
 
@@ -477,15 +468,14 @@ static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
  * @priv: driver private structure
  * @p : descriptor pointer
  * @np : next descriptor pointer
- * @skb : the socket buffer
+ * @hwtstamp : hardware timestamp
  * Description :
  * This function will read received packet's timestamp from the descriptor
  * and pass it to stack. It also perform some sanity checks.
  */
 void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
-			    struct dma_desc *np, struct sk_buff *skb)
+			    struct dma_desc *np, ktime_t *hwtstamp)
 {
-	struct skb_shared_hwtstamps *shhwtstamp = NULL;
 	struct dma_desc *desc = p;
 	u64 adjust = 0;
 	u64 ns = 0;
@@ -517,9 +507,7 @@ void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
 
 		ns -= adjust;
 		netdev_dbg(priv->dev, "get valid RX hw timestamp %llu\n", ns);
-		shhwtstamp = skb_hwtstamps(skb);
-		memset(shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
-		shhwtstamp->hwtstamp = ns_to_ktime(ns);
+		*hwtstamp = ns_to_ktime(ns);
 	} else  {
 		netdev_dbg(priv->dev, "cannot get RX hw timestamp\n");
 	}
@@ -2258,8 +2246,17 @@ static int stmmac_tx_clean(struct stmmac_priv *priv, int budget, u32 queue)
 					break;
 				}
 			}
-			if (!queue_is_xdp(priv, queue))
-				stmmac_get_tx_hwtstamp(priv, p, skb);
+			if (!queue_is_xdp(priv, queue) &&
+			    skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS) {
+				struct skb_shared_hwtstamps shhwtstamp;
+
+				memset(&shhwtstamp, 0,
+				       sizeof(struct skb_shared_hwtstamps));
+				stmmac_get_tx_hwtstamp(priv, p,
+						       &shhwtstamp.hwtstamp);
+				skb_tstamp_tx(skb, &shhwtstamp);
+
+			}
 		}
 
 		if (likely(tx_q->tx_skbuff_dma[entry].buf)) {
@@ -4487,6 +4484,7 @@ static int stmmac_rx(struct stmmac_priv *priv, int limit, u32 queue)
 				    priv->dma_rx_size, true);
 	}
 	while (count < limit) {
+		struct skb_shared_hwtstamps *shhwtstamp = NULL;
 		unsigned int hlen = 0, prev_len = 0;
 		enum pkt_hash_types hash_type;
 		struct stmmac_rx_buffer *buf;
@@ -4693,8 +4691,9 @@ static int stmmac_rx(struct stmmac_priv *priv, int limit, u32 queue)
 			goto read_again;
 
 		/* Got entire packet into SKB. Finish it. */
-
-		stmmac_get_rx_hwtstamp(priv, p, np, skb);
+		shhwtstamp = skb_hwtstamps(skb);
+		memset(shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
+		stmmac_get_rx_hwtstamp(priv, p, np, &shhwtstamp->hwtstamp);
 
 		/* Use HW to strip VLAN header before fallback to SW. */
 		ret = stmmac_rx_hw_vlan(priv, priv->dev,
-- 
2.17.1

