From c5a97c53ca8aa3cc01cb9caacb99456516e642f1 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Thu, 14 May 2015 00:00:59 +0300
Subject: [PATCH 0561/2328] scsi: ufs: store device serial number.

Retrieve device serial number and store it for RPMB subsystem use.

Change-Id: Ieee7f85696f6614cd2f3c81403124159ea85b77e
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
---
 drivers/scsi/ufs/ufs.h    |  2 ++
 drivers/scsi/ufs/ufshcd.c | 27 ++++++++++++++++++++++++---
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/drivers/scsi/ufs/ufs.h b/drivers/scsi/ufs/ufs.h
index b43efad..77ff3c9 100644
--- a/drivers/scsi/ufs/ufs.h
+++ b/drivers/scsi/ufs/ufs.h
@@ -527,6 +527,8 @@ struct ufs_dev_info {
 struct ufs_dev_desc {
 	u16 wmanufacturerid;
 	char *model;
+	char *serial_no;
+	size_t serial_no_len;
 };
 
 #endif /* End of Header */
diff --git a/drivers/scsi/ufs/ufshcd.c b/drivers/scsi/ufs/ufshcd.c
index e07f028..365d365 100644
--- a/drivers/scsi/ufs/ufshcd.c
+++ b/drivers/scsi/ufs/ufshcd.c
@@ -42,6 +42,7 @@
 #include <linux/devfreq.h>
 #include <linux/nls.h>
 #include <linux/of.h>
+#include <linux/string.h>
 #include <linux/rpmb.h>
 
 #include "ufshcd.h"
@@ -6144,11 +6145,18 @@ static struct rpmb_ops ufshcd_rpmb_dev_ops = {
 	.type = RPMB_TYPE_UFS,
 };
 
-static inline void ufshcd_rpmb_add(struct ufs_hba *hba)
+static inline void ufshcd_rpmb_add(struct ufs_hba *hba,
+				   struct ufs_dev_desc *dev_desc)
 {
 	struct rpmb_dev *rdev;
 	int ret;
 
+	ufshcd_rpmb_dev_ops.dev_id = kmemdup(dev_desc->serial_no,
+					     dev_desc->serial_no_len,
+					     GFP_KERNEL);
+	if (ufshcd_rpmb_dev_ops.dev_id)
+		ufshcd_rpmb_dev_ops.dev_id_len = dev_desc->serial_no_len;
+
 	ret = scsi_device_get(hba->sdev_ufs_rpmb);
 	if (ret)
 		goto out_put_dev;
@@ -6180,6 +6188,9 @@ static inline void ufshcd_rpmb_remove(struct ufs_hba *hba)
 	scsi_device_put(hba->sdev_ufs_rpmb);
 	hba->sdev_ufs_rpmb = NULL;
 
+	kfree(ufshcd_rpmb_dev_ops.dev_id);
+	ufshcd_rpmb_dev_ops.dev_id = NULL;
+
 	spin_unlock_irqrestore(hba->host->host_lock, flags);
 }
 
@@ -6285,6 +6296,15 @@ static int ufs_get_device_desc(struct ufs_hba *hba,
 		goto out;
 	}
 
+	ret = ufshcd_read_string_desc(hba,
+				      desc_buf[DEVICE_DESC_PARAM_SN],
+				      &dev_desc->serial_no, SD_RAW);
+	if (ret < 0) {
+		dev_err(hba->dev, "%s: Failed reading Serial No. err = %d\n",
+			__func__, ret);
+		goto out;
+	}
+
 out:
 	kfree(desc_buf);
 	return ret;
@@ -6580,7 +6600,6 @@ static int ufshcd_probe_hba(struct ufs_hba *hba)
 	}
 
 	ufs_fixup_device_setup(hba, &card);
-	ufs_put_device_desc(&card);
 
 	ufshcd_tune_unipro_params(hba);
 
@@ -6630,7 +6649,7 @@ static int ufshcd_probe_hba(struct ufs_hba *hba)
 		if (ufshcd_scsi_add_wlus(hba))
 			goto out;
 
-		ufshcd_rpmb_add(hba);
+		ufshcd_rpmb_add(hba, &card);
 
 		/* Initialize devfreq after UFS device is detected */
 		if (ufshcd_is_clkscaling_supported(hba)) {
@@ -6661,6 +6680,8 @@ static int ufshcd_probe_hba(struct ufs_hba *hba)
 		hba->is_init_prefetch = true;
 
 out:
+
+	ufs_put_device_desc(&card);
 	/*
 	 * If we failed to initialize the device or the device is not
 	 * present, turn off the power/clocks etc.
-- 
2.7.4

