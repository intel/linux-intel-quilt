From 0cd92b6edf11ec6f473db99a276c61d8a7a8409c Mon Sep 17 00:00:00 2001
From: "C, Udhayakumar" <udhayakumar.c@intel.com>
Date: Fri, 22 Jan 2021 19:48:12 +0530
Subject: [PATCH 025/109] Use Mutex to protect I2C SMBUS/XLINK access

Signed-off-by: C, Udhayakumar <udhayakumar.c@intel.com>
---
 drivers/misc/intel_tsens/intel_tsens_host.c   | 38 ++++++++++++++-----
 .../misc/intel_tsens/intel_tsens_thermal.c    |  4 ++
 include/linux/intel_tsens_host.h              |  2 +
 3 files changed, 35 insertions(+), 9 deletions(-)

diff --git a/drivers/misc/intel_tsens/intel_tsens_host.c b/drivers/misc/intel_tsens/intel_tsens_host.c
index e76a3a10fefe..56f747e22487 100644
--- a/drivers/misc/intel_tsens/intel_tsens_host.c
+++ b/drivers/misc/intel_tsens/intel_tsens_host.c
@@ -68,47 +68,61 @@ static int intel_tsens_get_temp(struct thermal_zone_device *zone,
 {
 	struct intel_tsens_host *tsens =
 		(struct intel_tsens_host *)zone->devdata;
+	struct mutex *sync_unregister_mutex;
 	struct i2c_client *i2c_c;
 	int status, sensor_type;
 	u8 i2c_val;
 	s32 val;
 
-	if (strstr(zone->type, "smb"))
+	if (strstr(zone->type, "smb")) {
+		sync_unregister_mutex = &tsens->sync_smb_unregister;
+		mutex_lock(sync_unregister_mutex);
 		i2c_c = tsens->i2c_smbus;
-	else
+	} else {
+		sync_unregister_mutex = &tsens->sync_xlk_unregister;
+		mutex_lock(sync_unregister_mutex);
 		i2c_c = tsens->i2c_xlk;
-
+	}
 	*temp = -255;
+	if (!i2c_c) {
+		mutex_unlock(sync_unregister_mutex);
+		return -EINVAL;
+	}
 	sensor_type = tsens->t_data->sensor_type | TSENS_READ_BYTE0;
 	status = tsens_i2c_smbus_read_byte_data(i2c_c,
 						sensor_type,
 						&i2c_val);
 	if (status < 0)
-		return status;
+		goto unlock_and_exit;
 	val = i2c_val;
 	sensor_type = tsens->t_data->sensor_type | TSENS_READ_BYTE1;
 	status = tsens_i2c_smbus_read_byte_data(i2c_c,
 						sensor_type,
 						&i2c_val);
 	if (status < 0)
-		return status;
+		goto unlock_and_exit;
 	val |= (i2c_val << 8);
 	sensor_type = tsens->t_data->sensor_type | TSENS_READ_BYTE2;
 	status = tsens_i2c_smbus_read_byte_data(i2c_c,
 						sensor_type,
 						&i2c_val);
 	if (status < 0)
-		return status;
+		goto unlock_and_exit;
 	val |= (i2c_val << 16);
 	sensor_type = tsens->t_data->sensor_type | TSENS_READ_BYTE3;
 	status = tsens_i2c_smbus_read_byte_data(i2c_c,
 						sensor_type,
 						&i2c_val);
 	if (status < 0)
-		return status;
+		goto unlock_and_exit;
 	val |= (i2c_val << 24);
 	*temp = val;
+	mutex_unlock(sync_unregister_mutex);
 	return 0;
+
+unlock_and_exit:
+	mutex_unlock(sync_unregister_mutex);
+	return status;
 }
 
 static int intel_tsens_thermal_get_trip_type(struct thermal_zone_device *zone,
@@ -246,12 +260,16 @@ static void intel_tsens_remove_tz(struct intel_hddl_clients *d)
 		struct intel_tsens_host *tsens = d->tsens[i];
 
 		if (tsens->tz_smbus) {
+			mutex_lock(&tsens->sync_smb_unregister);
+			tsens->i2c_smbus = NULL;
 			thermal_zone_device_unregister(tsens->tz_smbus);
-			tsens->tz_smbus = NULL;
+			mutex_unlock(&tsens->sync_smb_unregister);
 		}
 		if (tsens->tz_xlk) {
-			thermal_zone_device_unregister(tsens->tz_xlk);
+			mutex_lock(&tsens->sync_xlk_unregister);
 			tsens->tz_xlk = NULL;
+			thermal_zone_device_unregister(tsens->tz_xlk);
+			mutex_unlock(&tsens->sync_xlk_unregister);
 		}
 	}
 }
@@ -275,6 +293,7 @@ static int intel_tsens_tj_probe(struct i2c_client *client,
 					  tsens->t_data->name,
 					  i2c_str, device_id);
 			tsens->i2c_smbus = client;
+			mutex_init(&tsens->sync_smb_unregister);
 			ret = intel_tsens_add_tz(tsens,
 						 &tsens->tz_smbus,
 						 tsens->sensor_name_smbus,
@@ -298,6 +317,7 @@ static int intel_tsens_tj_probe(struct i2c_client *client,
 					  tsens->t_data->name,
 					  i2c_str, device_id);
 			tsens->i2c_xlk = client;
+			mutex_init(&tsens->sync_xlk_unregister);
 			ret = intel_tsens_add_tz(tsens,
 						 &tsens->tz_xlk,
 						 tsens->sensor_name_xlk,
diff --git a/drivers/misc/intel_tsens/intel_tsens_thermal.c b/drivers/misc/intel_tsens/intel_tsens_thermal.c
index 5a08e6f216f2..1a5baddb1e6b 100644
--- a/drivers/misc/intel_tsens/intel_tsens_thermal.c
+++ b/drivers/misc/intel_tsens/intel_tsens_thermal.c
@@ -290,6 +290,10 @@ static int intel_tsens_get_temp(int type, int *temp, void *pdata)
 
 	if (!priv)
 		return -EINVAL;
+	if (type >= priv->n_sens) {
+		dev_err(&priv->pdev->dev, "Invalid sensor type");
+		return -EINVAL;
+	}
 
 	return intel_tsens_thermal_get_temp(priv->intel_tsens[type]->tz, temp);
 }
diff --git a/include/linux/intel_tsens_host.h b/include/linux/intel_tsens_host.h
index 4b9b2d6a5cfc..94b83859a674 100644
--- a/include/linux/intel_tsens_host.h
+++ b/include/linux/intel_tsens_host.h
@@ -25,6 +25,8 @@ struct intel_tsens_host {
 	struct i2c_client *i2c_smbus;
 	struct thermal_zone_device *tz_xlk;
 	struct thermal_zone_device *tz_smbus;
+	struct mutex sync_smb_unregister;
+	struct mutex sync_xlk_unregister;
 };
 
 struct intel_tsens_host_plat_data {
-- 
2.25.1

