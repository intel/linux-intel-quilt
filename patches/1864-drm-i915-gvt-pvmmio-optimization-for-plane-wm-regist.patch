From 6603ad0fe0bc14270a2712d2439b7daff014a66d Mon Sep 17 00:00:00 2001
From: Fei Jiang <fei.jiang@intel.com>
Date: Tue, 24 Jul 2018 12:57:16 +0800
Subject: [PATCH 1864/2328] drm/i915/gvt: pvmmio optimization for plane wm
 register update

It is performance optimization to reduce plane wm related register trap
counter. When update plane wm, multiple plane wm related registers are
updated together, optimize it to firstly cache all register values in
share page, then only PLANE_NV12_BUF_CFG register writing is trapped.
Plane pvmmio level is PVMMIO_PLANE_WM_UPDATE.
If plane restriction feature is enabled, trap handlers for plane wm
related register are null, then directly return.
Patch for both SOS and UOS.

V2: when plane restriction feature is enabled, SOS trap handlers for
plane wm related registers are null, then don't trap

Signed-off-by: Fei Jiang <fei.jiang@intel.com>
Reviewed-by: Min He <min.he@intel.com>
Reviewed-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/gpu/drm/i915/i915_pvinfo.h | 11 ++++++++-
 drivers/gpu/drm/i915/intel_pm.c    | 49 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 59 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_pvinfo.h b/drivers/gpu/drm/i915/i915_pvinfo.h
index 01ed66c..c7acf59 100644
--- a/drivers/gpu/drm/i915/i915_pvinfo.h
+++ b/drivers/gpu/drm/i915/i915_pvinfo.h
@@ -78,6 +78,13 @@ struct pv_plane_update {
 	u32 plane_ctl;
 };
 
+struct pv_plane_wm_update {
+	u32 max_wm_level;
+	u32 plane_wm_level[8];
+	u32 plane_trans_wm_level;
+	u32 plane_buf_cfg;
+};
+
 /* shared page(4KB) between gvt and VM, located at the first page next
  * to MMIO region(2MB size normally).
  */
@@ -85,7 +92,8 @@ struct gvt_shared_page {
 	u32 elsp_data[4];
 	u32 reg_addr;
 	struct pv_plane_update pv_plane;
-	u32 rsvd2[0x400 - 21];
+	struct pv_plane_wm_update pv_plane_wm;
+	u32 rsvd2[0x400 - 32];
 };
 
 #define VGPU_PVMMIO(vgpu) vgpu_vreg(vgpu, vgtif_reg(enable_pvmmio))
@@ -101,6 +109,7 @@ struct gvt_shared_page {
 enum pvmmio_levels {
 	PVMMIO_ELSP_SUBMIT = 0x1,
 	PVMMIO_PLANE_UPDATE = 0x2,
+	PVMMIO_PLANE_WM_UPDATE = 0x4,
 };
 
 struct vgt_if {
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 22169a2..42f92813 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -4790,6 +4790,42 @@ static void skl_write_wm_level(struct drm_i915_private *dev_priv,
 	I915_WRITE(reg, val);
 }
 
+static void skl_pv_write_plane_wm(struct intel_crtc *intel_crtc,
+				const struct skl_plane_wm *wm,
+				const struct skl_ddb_allocation *ddb,
+				enum plane_id plane_id)
+{
+	int i, level;
+	struct pv_plane_wm_update tmp_plane_wm;
+	struct drm_i915_private *dev_priv = to_i915(intel_crtc->base.dev);
+	int max_level = ilk_wm_max_level(dev_priv);
+	u32 __iomem *pv_plane_wm = (u32 *)&(dev_priv->shared_page->pv_plane_wm);
+	enum pipe pipe = intel_crtc->pipe;
+	const struct skl_ddb_entry *entry;
+
+	memset(&tmp_plane_wm, 0, sizeof(struct pv_plane_wm_update));
+	tmp_plane_wm.max_wm_level = max_level;
+	for (level = 0; level <= max_level; level++) {
+		tmp_plane_wm.plane_wm_level[level] =
+			skl_calc_wm_level(&wm->wm[level]);
+	}
+	tmp_plane_wm.plane_trans_wm_level = skl_calc_wm_level(&wm->trans_wm);
+
+	entry = &ddb->plane[pipe][plane_id];
+	if (entry->end)
+		tmp_plane_wm.plane_buf_cfg =
+			(entry->end - 1) << 16 | entry->start;
+	else
+		tmp_plane_wm.plane_buf_cfg = 0;
+
+	spin_lock(&dev_priv->shared_page_lock);
+	for (i = 0; i < sizeof(struct pv_plane_wm_update) / 4; i++)
+		writel(*((u32 *)(&tmp_plane_wm) + i), pv_plane_wm + i);
+	skl_ddb_entry_write(dev_priv, PLANE_NV12_BUF_CFG(pipe, plane_id),
+			    &ddb->y_plane[pipe][plane_id]);
+	spin_unlock(&dev_priv->shared_page_lock);
+}
+
 static void skl_write_plane_wm(struct intel_crtc *intel_crtc,
 			       const struct skl_plane_wm *wm,
 			       const struct skl_ddb_allocation *ddb,
@@ -4805,6 +4841,19 @@ static void skl_write_plane_wm(struct intel_crtc *intel_crtc,
 	struct intel_dom0_plane_regs *dom0_regs = NULL;
 #endif
 
+	if (intel_vgpu_active(dev_priv)) {
+		/*
+		 * when plane restriction feature is enabled,
+		 * sos trap handlers for plane wm related registers are null
+		 */
+		if (i915_modparams.avail_planes_per_pipe)
+			return;
+
+		if (i915_modparams.enable_pvmmio & PVMMIO_PLANE_WM_UPDATE)
+			return skl_pv_write_plane_wm(intel_crtc, wm,
+						     ddb, plane_id);
+	}
+
 	for (level = 0; level <= max_level; level++) {
 #if IS_ENABLED(CONFIG_DRM_I915_GVT)
 		if (gvt && gvt->pipe_info[pipe].plane_owner[plane_id]) {
-- 
2.7.4

