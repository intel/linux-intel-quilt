From b3b1a8139394b79662e14ae0271a57d9935ab1f4 Mon Sep 17 00:00:00 2001
From: Pankaj Bharadiya <pankaj.laxminarayan.bharadiya@intel.com>
Date: Thu, 14 Dec 2017 14:26:53 +0530
Subject: [PATCH 1464/2367] ASoC: Intel: Skylake: Fix error handling

Single point of exit error handling is not implemented properly for following
functions
 - cnl_sdw_bra_pipe_cfg_pb
 - cnl_sdw_bra_pipe_cfg_cp

Fix it.

Change-Id: I9a427cfe9082fd5cfb66e707a144dbd83d6d5e18
Review-by: Vaibhav Agarwal <vaibhav.agarwal@intel.com>
Signed-off-by: Pankaj Bharadiya <pankaj.laxminarayan.bharadiya@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c | 125 ++++++++++++++++++++-------------
 1 file changed, 76 insertions(+), 49 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 34240e3..04926b5 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -384,26 +384,25 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 
 	host_cpr_cfg = kzalloc(sizeof(*host_cpr_cfg), GFP_KERNEL);
 	if (!host_cpr_cfg) {
-		ret = -ENOMEM;
-		goto error;
+		return -ENOMEM;
 	}
 
 	link_cpr_cfg = kzalloc(sizeof(*link_cpr_cfg), GFP_KERNEL);
 	if (!link_cpr_cfg) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_host_cpr_cfg;
 	}
 
 	host_cpr_mod = kzalloc(sizeof(*host_cpr_mod), GFP_KERNEL);
 	if (!host_cpr_mod) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_link_cpr_cfg;
 	}
 
 	link_cpr_mod = kzalloc(sizeof(*link_cpr_mod), GFP_KERNEL);
 	if (!link_cpr_mod) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_host_cpr_mod;
 	}
 
 	link_cpr_cfg->module = link_cpr_mod;
@@ -423,7 +422,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 	host_cpr_pipe = kzalloc(sizeof(struct skl_pipe), GFP_KERNEL);
 	if (!host_cpr_pipe) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_link_cpr_mod;
 	}
 
 	host_cpr_cfg->fmt_idx = 0;
@@ -442,7 +441,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 
 	ret = skl_create_pipeline(ctx, host_cpr_cfg->pipe);
 	if (ret < 0)
-		goto error;
+		goto free_host_cpr_pipe;
 
 	host_cpr_params.host_dma_id = (bra_data->pb_stream_tag - 1);
 	host_cpr_params.link_dma_id = 0;
@@ -457,8 +456,10 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 	host_cpr_cfg->id.instance_id = 1;
 	host_cpr_cfg->id.pvt_id = skl_get_pvt_id(ctx,
 		(uuid_le *)host_cpr_cfg->guid, host_cpr_cfg->id.instance_id);
-	if (host_cpr_cfg->id.pvt_id < 0)
-		return -EINVAL;
+	if (host_cpr_cfg->id.pvt_id < 0) {
+		ret = -EINVAL;
+		goto error_delete_pipeline;
+	}
 
 	host_cpr_cfg->module->resources[0].cps = 100000;
 	host_cpr_cfg->module->resources[0].is_pages = 0;
@@ -502,7 +503,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!host_cpr_cfg->m_in_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto error_delete_pipeline;
 	}
 
 	host_cpr_cfg->m_out_pin = kcalloc(host_cpr_cfg->module->max_output_pins,
@@ -510,7 +511,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!host_cpr_cfg->m_out_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_host_m_in_pin;
 	}
 
 	host_cpr_cfg->m_in_pin[0].id.module_id =
@@ -537,8 +538,10 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 	link_cpr_cfg->id.instance_id = 2;
 	link_cpr_cfg->id.pvt_id = skl_get_pvt_id(ctx,
 		(uuid_le *)link_cpr_cfg->guid, link_cpr_cfg->id.instance_id);
-	if (link_cpr_cfg->id.pvt_id < 0)
-		return -EINVAL;
+	if (link_cpr_cfg->id.pvt_id < 0) {
+		ret = -EINVAL;
+		goto free_host_m_out_pin;
+	}
 
 	link_cpr_cfg->dev_type = SKL_DEVICE_SDW_PCM;
 #if IS_ENABLED(CONFIG_SND_SOC_INTEL_CNL_FPGA)
@@ -553,7 +556,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!link_cpr_cfg->m_in_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_host_m_out_pin;
 	}
 
 	link_cpr_cfg->m_out_pin = kcalloc(link_cpr_cfg->module->max_output_pins,
@@ -561,7 +564,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!link_cpr_cfg->m_out_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_link_m_in_pin ;
 	}
 
 	link_cpr_cfg->m_in_pin[0].id.module_id =
@@ -586,7 +589,7 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 				kzalloc((sizeof(u32) * 4), GFP_KERNEL);
 	if (!link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_link_m_out_pin;
 	}
 
 	link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps[0] = 0x0;
@@ -615,15 +618,27 @@ static int cnl_sdw_bra_pipe_cfg_pb(struct skl_sst *ctx,
 
 error:
 	/* Free up all memory allocated */
-	kfree(host_cpr_cfg->m_in_pin);
-	kfree(host_cpr_cfg->m_out_pin);
-	kfree(link_cpr_cfg->m_in_pin);
-	kfree(link_cpr_cfg->m_out_pin);
 	kfree(link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps);
-	kfree(host_cpr_cfg);
-	kfree(link_cpr_cfg);
-	kfree(host_cpr_mod);
+free_link_m_out_pin:
+	kfree(link_cpr_cfg->m_out_pin);
+free_link_m_in_pin:
+	kfree(link_cpr_cfg->m_in_pin);
+free_host_m_out_pin:
+	kfree(host_cpr_cfg->m_out_pin);
+free_host_m_in_pin:
+	kfree(host_cpr_cfg->m_in_pin);
+error_delete_pipeline:
+	skl_delete_pipe(ctx, host_cpr_cfg->pipe);
+free_host_cpr_pipe:
+	kfree(host_cpr_pipe);
+free_link_cpr_mod:
 	kfree(link_cpr_mod);
+free_host_cpr_mod:
+	kfree(host_cpr_mod);
+free_link_cpr_cfg:
+	kfree(link_cpr_cfg);
+free_host_cpr_cfg:
+	kfree(host_cpr_cfg);
 
 	return ret;
 }
@@ -643,26 +658,25 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 
 	link_cpr_cfg = kzalloc(sizeof(*link_cpr_cfg), GFP_KERNEL);
 	if (!link_cpr_cfg) {
-		ret = -ENOMEM;
-		goto error;
+		return -ENOMEM;
 	}
 
 	host_cpr_cfg = kzalloc(sizeof(*host_cpr_cfg), GFP_KERNEL);
 	if (!host_cpr_cfg) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_link_cpr_cfg;
 	}
 
 	host_cpr_mod = kzalloc(sizeof(*host_cpr_mod), GFP_KERNEL);
 	if (!host_cpr_mod) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_host_cpr_cfg;
 	}
 
 	link_cpr_mod = kzalloc(sizeof(*link_cpr_mod), GFP_KERNEL);
 	if (!link_cpr_mod) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_host_cpr_mod;
 	}
 
 	link_cpr_cfg->module = link_cpr_mod;
@@ -683,7 +697,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 	link_cpr_pipe = kzalloc(sizeof(struct skl_pipe), GFP_KERNEL);
 	if (!link_cpr_pipe) {
 		ret = -ENOMEM;
-		goto error;
+		goto free_link_cpr_mod;
 	}
 
 	link_cpr_cfg->fmt_idx = 0;
@@ -702,7 +716,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 	/* Create Capture Pipeline */
 	ret = skl_create_pipeline(ctx, link_cpr_cfg->pipe);
 	if (ret < 0)
-		goto error;
+		goto free_link_cpr_pipe;
 
 	link_cpr_params.host_dma_id = 0;
 	link_cpr_params.link_dma_id = 0;
@@ -717,8 +731,10 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 	link_cpr_cfg->id.instance_id = 3;
 	link_cpr_cfg->id.pvt_id = skl_get_pvt_id(ctx,
 		(uuid_le *)link_cpr_cfg->guid, link_cpr_cfg->id.instance_id);
-	if (link_cpr_cfg->id.pvt_id < 0)
-		return -EINVAL;
+	if (link_cpr_cfg->id.pvt_id < 0) {
+		ret = -EINVAL;
+		goto error_delete_pipeline;
+	}
 
 	link_cpr_cfg->module->resources[0].cps = 100000;
 	link_cpr_cfg->module->resources[0].is_pages = 0;
@@ -749,7 +765,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 				kzalloc((sizeof(u32) * 4), GFP_KERNEL);
 	if (!link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps) {
 		ret = -ENOMEM;
-		goto error;
+		goto error_delete_pipeline;
 	}
 
 	link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps[0] = 0x0;
@@ -784,7 +800,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!link_cpr_cfg->m_in_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_caps;
 	}
 
 	link_cpr_cfg->m_out_pin = kcalloc(link_cpr_cfg->module->max_output_pins,
@@ -792,7 +808,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!link_cpr_cfg->m_out_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_link_m_in_pin;
 	}
 
 	link_cpr_cfg->m_in_pin[0].id.module_id =
@@ -819,9 +835,10 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 	host_cpr_cfg->id.instance_id = 4;
 	host_cpr_cfg->id.pvt_id = skl_get_pvt_id(ctx,
 		(uuid_le *)host_cpr_cfg->guid, host_cpr_cfg->id.instance_id);
-	if (host_cpr_cfg->id.pvt_id < 0)
-		return -EINVAL;
-
+	if (host_cpr_cfg->id.pvt_id < 0) {
+		ret = -EINVAL;
+		goto free_link_m_out_pin;
+	}
 	host_cpr_cfg->dev_type = SKL_DEVICE_HDAHOST;
 	host_cpr_cfg->hw_conn_type = SKL_CONN_SINK;
 	link_cpr_params.host_dma_id = (bra_data->cp_stream_tag - 1);
@@ -832,7 +849,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!host_cpr_cfg->m_in_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_link_m_out_pin;
 	}
 
 	host_cpr_cfg->m_out_pin = kcalloc(host_cpr_cfg->module->max_output_pins,
@@ -840,7 +857,7 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 					GFP_KERNEL);
 	if (!host_cpr_cfg->m_out_pin) {
 		ret =  -ENOMEM;
-		goto error;
+		goto free_host_m_in_pin;
 	}
 
 	host_cpr_cfg->m_in_pin[0].id.module_id =
@@ -874,18 +891,28 @@ static int cnl_sdw_bra_pipe_cfg_cp(struct skl_sst *ctx,
 	if (ret < 0)
 		goto error;
 
-
 error:
-	/* Free up all memory allocated */
-	kfree(link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps);
-	kfree(link_cpr_cfg->m_in_pin);
-	kfree(link_cpr_cfg->m_out_pin);
-	kfree(host_cpr_cfg->m_in_pin);
 	kfree(host_cpr_cfg->m_out_pin);
-	kfree(link_cpr_cfg);
-	kfree(host_cpr_cfg);
-	kfree(host_cpr_mod);
+free_host_m_in_pin:
+	kfree(host_cpr_cfg->m_in_pin);
+free_link_m_out_pin:
+	kfree(link_cpr_cfg->m_out_pin);
+free_link_m_in_pin:
+	kfree(link_cpr_cfg->m_in_pin);
+free_caps:
+	kfree(link_cpr_cfg->formats_config[SKL_PARAM_INIT].caps);
+error_delete_pipeline:
+	ret = skl_delete_pipe(ctx, link_cpr_cfg->pipe);
+free_link_cpr_pipe:
+	kfree(link_cpr_pipe);
+free_link_cpr_mod:
 	kfree(link_cpr_mod);
+free_host_cpr_mod:
+	kfree(host_cpr_mod);
+free_host_cpr_cfg:
+	kfree(host_cpr_cfg);
+free_link_cpr_cfg:
+	kfree(link_cpr_cfg);
 	return ret;
 }
 
-- 
2.7.4

