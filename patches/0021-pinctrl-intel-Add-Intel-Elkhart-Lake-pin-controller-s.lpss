From e690d5d3d340469d100296821b50c3e12bec75ba Mon Sep 17 00:00:00 2001
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date: Fri, 27 Jan 2017 13:07:16 +0300
Subject: [PATCH 21/82] pinctrl: intel: Add Intel Elkhart Lake pin controller
 support

This driver adds pinctrl/GPIO support for Intel Elkhart Lake SoC. The
GPIO controller is based on the next generation GPIO hardware but still
compatible with the one supported by the Intel core pinctrl/GPIO driver.

TODO: Populate groups and functions, test on HW

TO BE FOLDED: pinctrl: elkhartlake: Update groups (soc-mcc-a0-19ww22_RDL)
TO BE FOLDED: pinctrl: elkhartlake: Update pin list according to B0 v1.0

Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
---
 drivers/pinctrl/intel/Kconfig               |   8 +
 drivers/pinctrl/intel/Makefile              |   1 +
 drivers/pinctrl/intel/pinctrl-elkhartlake.c | 460 ++++++++++++++++++++
 3 files changed, 469 insertions(+)
 create mode 100644 drivers/pinctrl/intel/pinctrl-elkhartlake.c

diff --git a/drivers/pinctrl/intel/Kconfig b/drivers/pinctrl/intel/Kconfig
index 452a14f78707..e20d83af0b4c 100644
--- a/drivers/pinctrl/intel/Kconfig
+++ b/drivers/pinctrl/intel/Kconfig
@@ -82,6 +82,14 @@ config PINCTRL_DENVERTON
 	  This pinctrl driver provides an interface that allows configuring
 	  of Intel Denverton SoC pins and using them as GPIOs.
 
+config PINCTRL_ELKHARTLAKE
+	tristate "Intel Elkhart Lake SoC pinctrl and GPIO driver"
+	depends on ACPI
+	select PINCTRL_INTEL
+	help
+	  This pinctrl driver provides an interface that allows configuring
+	  of Intel Elkhart Lake SoC pins and using them as GPIOs.
+
 config PINCTRL_GEMINILAKE
 	tristate "Intel Gemini Lake SoC pinctrl and GPIO driver"
 	depends on ACPI
diff --git a/drivers/pinctrl/intel/Makefile b/drivers/pinctrl/intel/Makefile
index cb491e655749..ec353993d545 100644
--- a/drivers/pinctrl/intel/Makefile
+++ b/drivers/pinctrl/intel/Makefile
@@ -9,6 +9,7 @@ obj-$(CONFIG_PINCTRL_BROXTON)		+= pinctrl-broxton.o
 obj-$(CONFIG_PINCTRL_CANNONLAKE)	+= pinctrl-cannonlake.o
 obj-$(CONFIG_PINCTRL_CEDARFORK)		+= pinctrl-cedarfork.o
 obj-$(CONFIG_PINCTRL_DENVERTON)		+= pinctrl-denverton.o
+obj-$(CONFIG_PINCTRL_ELKHARTLAKE)	+= pinctrl-elkhartlake.o
 obj-$(CONFIG_PINCTRL_GEMINILAKE)	+= pinctrl-geminilake.o
 obj-$(CONFIG_PINCTRL_ICELAKE)		+= pinctrl-icelake.o
 obj-$(CONFIG_PINCTRL_LEWISBURG)		+= pinctrl-lewisburg.o
diff --git a/drivers/pinctrl/intel/pinctrl-elkhartlake.c b/drivers/pinctrl/intel/pinctrl-elkhartlake.c
new file mode 100644
index 000000000000..de31a8cc1c0f
--- /dev/null
+++ b/drivers/pinctrl/intel/pinctrl-elkhartlake.c
@@ -0,0 +1,460 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Intel Elkhart Lake PCH pinctrl/GPIO driver
+ *
+ * Copyright (C) 2019, Intel Corporation
+ * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
+ */
+
+#include <linux/mod_devicetable.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-intel.h"
+
+#define EHL_PAD_OWN	0x020
+#define EHL_PADCFGLOCK	0x080
+#define EHL_HOSTSW_OWN	0x0b0
+#define EHL_GPI_IS	0x100
+#define EHL_GPI_IE	0x120
+
+#define EHL_GPP(r, s, e)				\
+	{						\
+		.reg_num = (r),				\
+		.base = (s),				\
+		.size = ((e) - (s) + 1),		\
+	}
+
+#define EHL_COMMUNITY(b, s, e, g)			\
+	{						\
+		.barno = (b),				\
+		.padown_offset = EHL_PAD_OWN,		\
+		.padcfglock_offset = EHL_PADCFGLOCK,	\
+		.hostown_offset = EHL_HOSTSW_OWN,	\
+		.is_offset = EHL_GPI_IS,		\
+		.ie_offset = EHL_GPI_IE,		\
+		.pin_base = (s),			\
+		.npins = ((e) - (s) + 1),		\
+		.gpps = (g),				\
+		.ngpps = ARRAY_SIZE(g),			\
+	}
+
+/* Elkhart Lake */
+static const struct pinctrl_pin_desc ehl_pins[] = {
+	/* GPP_B */
+	PINCTRL_PIN(0, "CORE_VID_0"),
+	PINCTRL_PIN(1, "CORE_VID_1"),
+	PINCTRL_PIN(2, "VRALERTB"),
+	PINCTRL_PIN(3, "CPU_GP_2"),
+	PINCTRL_PIN(4, "CPU_GP_3"),
+	PINCTRL_PIN(5, "OSE_I2C0_SCLK"),
+	PINCTRL_PIN(6, "OSE_I2C0_SDAT"),
+	PINCTRL_PIN(7, "OSE_I2C1_SCLK"),
+	PINCTRL_PIN(8, "OSE_I2C1_SDAT"),
+	PINCTRL_PIN(9, "I2C5_SDA"),
+	PINCTRL_PIN(10, "I2C5_SCL"),
+	PINCTRL_PIN(11, "PMCALERTB"),
+	PINCTRL_PIN(12, "SLP_S0B"),
+	PINCTRL_PIN(13, "PLTRSTB"),
+	PINCTRL_PIN(14, "SPKR"),
+	PINCTRL_PIN(15, "GSPI0_CS0B"),
+	PINCTRL_PIN(16, "GSPI0_CLK"),
+	PINCTRL_PIN(17, "GSPI0_MISO"),
+	PINCTRL_PIN(18, "GSPI0_MOSI"),
+	PINCTRL_PIN(19, "GSPI1_CS0B"),
+	PINCTRL_PIN(20, "GSPI1_CLK"),
+	PINCTRL_PIN(21, "GSPI1_MISO"),
+	PINCTRL_PIN(22, "GSPI1_MOSI"),
+	PINCTRL_PIN(23, "GPPC_B_23"),
+	PINCTRL_PIN(24, "GSPI0_CLK_LOOPBK"),
+	PINCTRL_PIN(25, "GSPI1_CLK_LOOPBK"),
+	/* GPP_T */
+	PINCTRL_PIN(26, "OSE_QEPA_2"),
+	PINCTRL_PIN(27, "OSE_QEPB_2"),
+	PINCTRL_PIN(28, "OSE_QEPI_2"),
+	PINCTRL_PIN(29, "GPPC_T_3"),
+	PINCTRL_PIN(30, "RGMII0_INT"),
+	PINCTRL_PIN(31, "RGMII0_RESETB"),
+	PINCTRL_PIN(32, "RGMII0_AUXTS"),
+	PINCTRL_PIN(33, "RGMII0_PPS"),
+	PINCTRL_PIN(34, "USB2_OCB_2"),
+	PINCTRL_PIN(35, "OSE_HSUART2_EN"),
+	PINCTRL_PIN(36, "OSE_HSUART2_RE"),
+	PINCTRL_PIN(37, "USB2_OCB_3"),
+	PINCTRL_PIN(38, "OSE_UART2_RXD"),
+	PINCTRL_PIN(39, "OSE_UART2_TXD"),
+	PINCTRL_PIN(40, "OSE_UART2_RTSB"),
+	PINCTRL_PIN(41, "OSE_UART2_CTSB"),
+	/* GPP_G */
+	PINCTRL_PIN(42, "SD3_CMD"),
+	PINCTRL_PIN(43, "SD3_D0"),
+	PINCTRL_PIN(44, "SD3_D1"),
+	PINCTRL_PIN(45, "SD3_D2"),
+	PINCTRL_PIN(46, "SD3_D3"),
+	PINCTRL_PIN(47, "SD3_CDB"),
+	PINCTRL_PIN(48, "SD3_CLK"),
+	PINCTRL_PIN(49, "I2S2_SCLK"),
+	PINCTRL_PIN(50, "I2S2_SFRM"),
+	PINCTRL_PIN(51, "I2S2_TXD"),
+	PINCTRL_PIN(52, "I2S2_RXD"),
+	PINCTRL_PIN(53, "I2S3_SCLK"),
+	PINCTRL_PIN(54, "I2S3_SFRM"),
+	PINCTRL_PIN(55, "I2S3_TXD"),
+	PINCTRL_PIN(56, "I2S3_RXD"),
+	PINCTRL_PIN(57, "ESPI_IO_0"),
+	PINCTRL_PIN(58, "ESPI_IO_1"),
+	PINCTRL_PIN(59, "ESPI_IO_2"),
+	PINCTRL_PIN(60, "ESPI_IO_3"),
+	PINCTRL_PIN(61, "I2S1_SCLK"),
+	PINCTRL_PIN(62, "ESPI_CSB"),
+	PINCTRL_PIN(63, "ESPI_CLK"),
+	PINCTRL_PIN(64, "ESPI_RESETB"),
+	PINCTRL_PIN(65, "SD3_WP"),
+	PINCTRL_PIN(66, "ESPI_CLK_LOOPBK"),
+	/* GPP_V */
+	PINCTRL_PIN(67, "EMMC_CMD"),
+	PINCTRL_PIN(68, "EMMC_DATA0"),
+	PINCTRL_PIN(69, "EMMC_DATA1"),
+	PINCTRL_PIN(70, "EMMC_DATA2"),
+	PINCTRL_PIN(71, "EMMC_DATA3"),
+	PINCTRL_PIN(72, "EMMC_DATA4"),
+	PINCTRL_PIN(73, "EMMC_DATA5"),
+	PINCTRL_PIN(74, "EMMC_DATA6"),
+	PINCTRL_PIN(75, "EMMC_DATA7"),
+	PINCTRL_PIN(76, "EMMC_RCLK"),
+	PINCTRL_PIN(77, "EMMC_CLK"),
+	PINCTRL_PIN(78, "EMMC_RESETB"),
+	PINCTRL_PIN(79, "OSE_TGPIO0"),
+	PINCTRL_PIN(80, "OSE_TGPIO1"),
+	PINCTRL_PIN(81, "OSE_TGPIO2"),
+	PINCTRL_PIN(82, "OSE_TGPIO3"),
+	/* GPP_H */
+	PINCTRL_PIN(83, "RGMII1_INT"),
+	PINCTRL_PIN(84, "RGMII1_RESETB"),
+	PINCTRL_PIN(85, "RGMII1_AUXTS"),
+	PINCTRL_PIN(86, "RGMII1_PPS"),
+	PINCTRL_PIN(87, "I2C2_SDA"),
+	PINCTRL_PIN(88, "I2C2_SCL"),
+	PINCTRL_PIN(89, "I2C3_SDA"),
+	PINCTRL_PIN(90, "I2C3_SCL"),
+	PINCTRL_PIN(91, "I2C4_SDA"),
+	PINCTRL_PIN(92, "I2C4_SCL"),
+	PINCTRL_PIN(93, "SRCCLKREQB_4"),
+	PINCTRL_PIN(94, "SRCCLKREQB_5"),
+	PINCTRL_PIN(95, "OSE_UART1_RXD"),
+	PINCTRL_PIN(96, "OSE_UART1_TXD"),
+	PINCTRL_PIN(97, "GPPC_H_14"),
+	PINCTRL_PIN(98, "OSE_UART1_CTSB"),
+	PINCTRL_PIN(99, "PCIE_LNK_DOWN"),
+	PINCTRL_PIN(100, "SD_PWR_EN_B"),
+	PINCTRL_PIN(101, "CPU_C10_GATEB"),
+	PINCTRL_PIN(102, "GPPC_H_19"),
+	PINCTRL_PIN(103, "OSE_PWM7"),
+	PINCTRL_PIN(104, "OSE_HSUART1_DE"),
+	PINCTRL_PIN(105, "OSE_HSUART1_RE"),
+	PINCTRL_PIN(106, "OSE_HSUART1_EN"),
+	/* GPP_D */
+	PINCTRL_PIN(107, "OSE_QEPA_0"),
+	PINCTRL_PIN(108, "OSE_QEPB_0"),
+	PINCTRL_PIN(109, "OSE_QEPI_0"),
+	PINCTRL_PIN(110, "OSE_PWM6"),
+	PINCTRL_PIN(111, "OSE_PWM2"),
+	PINCTRL_PIN(112, "SRCCLKREQB_0"),
+	PINCTRL_PIN(113, "SRCCLKREQB_1"),
+	PINCTRL_PIN(114, "SRCCLKREQB_2"),
+	PINCTRL_PIN(115, "SRCCLKREQB_3"),
+	PINCTRL_PIN(116, "OSE_SPI0_CSB"),
+	PINCTRL_PIN(117, "OSE_SPI0_SCLK"),
+	PINCTRL_PIN(118, "OSE_SPI0_MISO"),
+	PINCTRL_PIN(119, "OSE_SPI0_MOSI"),
+	PINCTRL_PIN(120, "OSE_QEPA_1"),
+	PINCTRL_PIN(121, "OSE_QEPB_1"),
+	PINCTRL_PIN(122, "OSE_PWM3"),
+	PINCTRL_PIN(123, "OSE_QEPI_1"),
+	PINCTRL_PIN(124, "OSE_PWM4"),
+	PINCTRL_PIN(125, "OSE_PWM5"),
+	PINCTRL_PIN(126, "I2S_MCLK1_OUT"),
+	PINCTRL_PIN(127, "GSPI2_CLK_LOOPBK"),
+	/* GPP_U */
+	PINCTRL_PIN(128, "RGMII2_INT"),
+	PINCTRL_PIN(129, "RGMII2_RESETB"),
+	PINCTRL_PIN(130, "RGMII2_PPS"),
+	PINCTRL_PIN(131, "RGMII2_AUXTS"),
+	PINCTRL_PIN(132, "ISI_SPIM_CS"),
+	PINCTRL_PIN(133, "ISI_SPIM_SCLK"),
+	PINCTRL_PIN(134, "ISI_SPIM_MISO"),
+	PINCTRL_PIN(135, "OSE_QEPA_3"),
+	PINCTRL_PIN(136, "ISI_SPIS_CS"),
+	PINCTRL_PIN(137, "ISI_SPIS_SCLK"),
+	PINCTRL_PIN(138, "ISI_SPIS_MISO"),
+	PINCTRL_PIN(139, "OSE_QEPB_3"),
+	PINCTRL_PIN(140, "ISI_CHX_OKNOK_0"),
+	PINCTRL_PIN(141, "ISI_CHX_OKNOK_1"),
+	PINCTRL_PIN(142, "ISI_CHX_RLY_SWTCH"),
+	PINCTRL_PIN(143, "ISI_CHX_PMIC_EN"),
+	PINCTRL_PIN(144, "ISI_OKNOK_0"),
+	PINCTRL_PIN(145, "ISI_OKNOK_1"),
+	PINCTRL_PIN(146, "ISI_ALERT"),
+	PINCTRL_PIN(147, "OSE_QEPI_3"),
+	PINCTRL_PIN(148, "GSPI3_CLK_LOOPBK"),
+	PINCTRL_PIN(149, "GSPI4_CLK_LOOPBK"),
+	PINCTRL_PIN(150, "GSPI5_CLK_LOOPBK"),
+	PINCTRL_PIN(151, "GSPI6_CLK_LOOPBK"),
+	/* vGPIO */
+	PINCTRL_PIN(152, "CNV_BTEN"),
+	PINCTRL_PIN(153, "CNV_BT_HOST_WAKEB"),
+	PINCTRL_PIN(154, "CNV_BT_IF_SELECT"),
+	PINCTRL_PIN(155, "vCNV_BT_UART_TXD"),
+	PINCTRL_PIN(156, "vCNV_BT_UART_RXD"),
+	PINCTRL_PIN(157, "vCNV_BT_UART_CTS_B"),
+	PINCTRL_PIN(158, "vCNV_BT_UART_RTS_B"),
+	PINCTRL_PIN(159, "vCNV_MFUART1_TXD"),
+	PINCTRL_PIN(160, "vCNV_MFUART1_RXD"),
+	PINCTRL_PIN(161, "vCNV_MFUART1_CTS_B"),
+	PINCTRL_PIN(162, "vCNV_MFUART1_RTS_B"),
+	PINCTRL_PIN(163, "vUART0_TXD"),
+	PINCTRL_PIN(164, "vUART0_RXD"),
+	PINCTRL_PIN(165, "vUART0_CTS_B"),
+	PINCTRL_PIN(166, "vUART0_RTS_B"),
+	PINCTRL_PIN(167, "vOSE_UART0_TXD"),
+	PINCTRL_PIN(168, "vOSE_UART0_RXD"),
+	PINCTRL_PIN(169, "vOSE_UART0_CTS_B"),
+	PINCTRL_PIN(170, "vOSE_UART0_RTS_B"),
+	PINCTRL_PIN(171, "vCNV_BT_I2S_BCLK"),
+	PINCTRL_PIN(172, "vCNV_BT_I2S_WS_SYNC"),
+	PINCTRL_PIN(173, "vCNV_BT_I2S_SDO"),
+	PINCTRL_PIN(174, "vCNV_BT_I2S_SDI"),
+	PINCTRL_PIN(175, "vI2S2_SCLK"),
+	PINCTRL_PIN(176, "vI2S2_SFRM"),
+	PINCTRL_PIN(177, "vI2S2_TXD"),
+	PINCTRL_PIN(178, "vI2S2_RXD"),
+	PINCTRL_PIN(179, "vSD3_CD_B"),
+	/* CPU */
+	PINCTRL_PIN(180, "HDACPU_SDI"),
+	PINCTRL_PIN(181, "HDACPU_SDO"),
+	PINCTRL_PIN(182, "HDACPU_BCLK"),
+	PINCTRL_PIN(183, "PM_SYNC"),
+	PINCTRL_PIN(184, "PECI"),
+	PINCTRL_PIN(185, "CPUPWRGD"),
+	PINCTRL_PIN(186, "THRMTRIPB"),
+	PINCTRL_PIN(187, "PLTRST_CPUB"),
+	PINCTRL_PIN(188, "PM_DOWN"),
+	PINCTRL_PIN(189, "TRIGGER_IN"),
+	PINCTRL_PIN(190, "TRIGGER_OUT"),
+	PINCTRL_PIN(191, "UFS_RESETB"),
+	PINCTRL_PIN(192, "CLKOUT_CPURTC"),
+	PINCTRL_PIN(193, "VCCST_OVERRIDE"),
+	PINCTRL_PIN(194, "C10_WAKE"),
+	PINCTRL_PIN(195, "PROCHOTB"),
+	PINCTRL_PIN(196, "CATERRB"),
+	/* GPP_S */
+	PINCTRL_PIN(197, "UFS_REF_CLK_0"),
+	PINCTRL_PIN(198, "UFS_REF_CLK_1"),
+	/* GPP_A */
+	PINCTRL_PIN(199, "RGMII0_TXDATA_3"),
+	PINCTRL_PIN(200, "RGMII0_TXDATA_2"),
+	PINCTRL_PIN(201, "RGMII0_TXDATA_1"),
+	PINCTRL_PIN(202, "RGMII0_TXDATA_0"),
+	PINCTRL_PIN(203, "RGMII0_TXCLK"),
+	PINCTRL_PIN(204, "RGMII0_TXCTL"),
+	PINCTRL_PIN(205, "RGMII0_RXCLK"),
+	PINCTRL_PIN(206, "RGMII0_RXDATA_3"),
+	PINCTRL_PIN(207, "RGMII0_RXDATA_2"),
+	PINCTRL_PIN(208, "RGMII0_RXDATA_1"),
+	PINCTRL_PIN(209, "RGMII0_RXDATA_0"),
+	PINCTRL_PIN(210, "RGMII1_TXDATA_3"),
+	PINCTRL_PIN(211, "RGMII1_TXDATA_2"),
+	PINCTRL_PIN(212, "RGMII1_TXDATA_1"),
+	PINCTRL_PIN(213, "RGMII1_TXDATA_0"),
+	PINCTRL_PIN(214, "RGMII1_TXCLK"),
+	PINCTRL_PIN(215, "RGMII1_TXCTL"),
+	PINCTRL_PIN(216, "RGMII1_RXCLK"),
+	PINCTRL_PIN(217, "RGMII1_RXCTL"),
+	PINCTRL_PIN(218, "RGMII1_RXDATA_3"),
+	PINCTRL_PIN(219, "RGMII1_RXDATA_2"),
+	PINCTRL_PIN(220, "RGMII1_RXDATA_1"),
+	PINCTRL_PIN(221, "RGMII1_RXDATA_0"),
+	PINCTRL_PIN(222, "RGMII0_RXCTL"),
+	/* vGPIO_3 */
+	PINCTRL_PIN(223, "ESPI_USB_OCB_0"),
+	PINCTRL_PIN(224, "ESPI_USB_OCB_1"),
+	PINCTRL_PIN(225, "ESPI_USB_OCB_2"),
+	PINCTRL_PIN(226, "ESPI_USB_OCB_3"),
+	/* GPP_C */
+	PINCTRL_PIN(227, "SMBCLK"),
+	PINCTRL_PIN(228, "SMBDATA"),
+	PINCTRL_PIN(229, "OSE_PWM0"),
+	PINCTRL_PIN(230, "RGMII0_MDC"),
+	PINCTRL_PIN(231, "RGMII0_MDIO"),
+	PINCTRL_PIN(232, "OSE_PWM1"),
+	PINCTRL_PIN(233, "RGMII1_MDC"),
+	PINCTRL_PIN(234, "RGMII1_MDIO"),
+	PINCTRL_PIN(235, "OSE_TGPIO4"),
+	PINCTRL_PIN(236, "OSE_HSUART0_EN"),
+	PINCTRL_PIN(237, "OSE_TGPIO5"),
+	PINCTRL_PIN(238, "OSE_HSUART0_RE"),
+	PINCTRL_PIN(239, "OSE_UART0_RXD"),
+	PINCTRL_PIN(240, "OSE_UART0_TXD"),
+	PINCTRL_PIN(241, "OSE_UART0_RTSB"),
+	PINCTRL_PIN(242, "OSE_UART0_CTSB"),
+	PINCTRL_PIN(243, "RGMII2_MDIO"),
+	PINCTRL_PIN(244, "RGMII2_MDC"),
+	PINCTRL_PIN(245, "OSE_I2C4_SDAT"),
+	PINCTRL_PIN(246, "OSE_I2C4_SCLK"),
+	PINCTRL_PIN(247, "OSE_UART4_RXD"),
+	PINCTRL_PIN(248, "OSE_UART4_TXD"),
+	PINCTRL_PIN(249, "OSE_UART4_RTSB"),
+	PINCTRL_PIN(250, "OSE_UART4_CTSB"),
+	/* GPP_F */
+	PINCTRL_PIN(251, "CNV_BRI_DT"),
+	PINCTRL_PIN(252, "CNV_BRI_RSP"),
+	PINCTRL_PIN(253, "CNV_RGI_DT"),
+	PINCTRL_PIN(254, "CNV_RGI_RSP"),
+	PINCTRL_PIN(255, "CNV_RF_RESET_B"),
+	PINCTRL_PIN(256, "EMMC_HIP_MON"),
+	PINCTRL_PIN(257, "CNV_PA_BLANKING"),
+	PINCTRL_PIN(258, "OSE_I2S1_SCLK"),
+	PINCTRL_PIN(259, "I2S_MCLK2_INOUT"),
+	PINCTRL_PIN(260, "BOOTMPC"),
+	PINCTRL_PIN(261, "OSE_I2S1_SFRM"),
+	PINCTRL_PIN(262, "GPPC_F_11"),
+	PINCTRL_PIN(263, "GSXDOUT"),
+	PINCTRL_PIN(264, "GSXSLOAD"),
+	PINCTRL_PIN(265, "GSXDIN"),
+	PINCTRL_PIN(266, "GSXSRESETB"),
+	PINCTRL_PIN(267, "GSXCLK"),
+	PINCTRL_PIN(268, "GPPC_F_17"),
+	PINCTRL_PIN(269, "OSE_I2S1_TXD"),
+	PINCTRL_PIN(270, "OSE_I2S1_RXD"),
+	PINCTRL_PIN(271, "EXT_PWR_GATEB"),
+	PINCTRL_PIN(272, "EXT_PWR_GATE2B"),
+	PINCTRL_PIN(273, "VNN_CTRL"),
+	PINCTRL_PIN(274, "V1P05_CTRL"),
+	PINCTRL_PIN(275, "GPPF_CLK_LOOPBACK"),
+	/* HVCMOS */
+	PINCTRL_PIN(276, "L_BKLTEN"),
+	PINCTRL_PIN(277, "L_BKLTCTL"),
+	PINCTRL_PIN(278, "L_VDDEN"),
+	PINCTRL_PIN(279, "SYS_PWROK"),
+	PINCTRL_PIN(280, "SYS_RESETB"),
+	PINCTRL_PIN(281, "MLK_RSTB"),
+	/* GPP_E */
+	PINCTRL_PIN(282, "SATA_LEDB"),
+	PINCTRL_PIN(283, "GPPC_E_1"),
+	PINCTRL_PIN(284, "GPPC_E_2"),
+	PINCTRL_PIN(285, "DDSP_HPD_B"),
+	PINCTRL_PIN(286, "SATA_DEVSLP_0"),
+	PINCTRL_PIN(287, "DDPB_CTRLDATA"),
+	PINCTRL_PIN(288, "GPPC_E_6"),
+	PINCTRL_PIN(289, "DDPB_CTRLCLK"),
+	PINCTRL_PIN(290, "GPPC_E_8"),
+	PINCTRL_PIN(291, "USB2_OCB_0"),
+	PINCTRL_PIN(292, "GPPC_E_10"),
+	PINCTRL_PIN(293, "GPPC_E_11"),
+	PINCTRL_PIN(294, "GPPC_E_12"),
+	PINCTRL_PIN(295, "GPPC_E_13"),
+	PINCTRL_PIN(296, "DDSP_HPD_A"),
+	PINCTRL_PIN(297, "OSE_I2S0_RXD"),
+	PINCTRL_PIN(298, "OSE_I2S0_TXD"),
+	PINCTRL_PIN(299, "DDSP_HPD_C"),
+	PINCTRL_PIN(300, "DDPA_CTRLDATA"),
+	PINCTRL_PIN(301, "DDPA_CTRLCLK"),
+	PINCTRL_PIN(302, "OSE_I2S0_SCLK"),
+	PINCTRL_PIN(303, "OSE_I2S0_SFRM"),
+	PINCTRL_PIN(304, "DDPC_CTRLDATA"),
+	PINCTRL_PIN(305, "DDPC_CTRLCLK"),
+	PINCTRL_PIN(306, "SPI1_CLK_LOOPBK"),
+	/* GPP_R */
+	PINCTRL_PIN(307, "HDA_BCLK"),
+	PINCTRL_PIN(308, "HDA_SYNC"),
+	PINCTRL_PIN(309, "HDA_SDO"),
+	PINCTRL_PIN(310, "HDA_SDI_0"),
+	PINCTRL_PIN(311, "HDA_RSTB"),
+	PINCTRL_PIN(312, "HDA_SDI_1"),
+	PINCTRL_PIN(313, "GPP_R_6"),
+	PINCTRL_PIN(314, "GPP_R_7"),
+};
+
+static const struct intel_padgroup ehl_community0_gpps[] = {
+	EHL_GPP(0, 0, 25),	/* GPP_B */
+	EHL_GPP(1, 26, 41),	/* GPP_T */
+	EHL_GPP(2, 42, 66),	/* GPP_G */
+};
+
+static const struct intel_padgroup ehl_community1_gpps[] = {
+	EHL_GPP(0, 67, 82),	/* GPP_V */
+	EHL_GPP(1, 83, 106),	/* GPP_H */
+	EHL_GPP(2, 107, 127),	/* GPP_D */
+	EHL_GPP(3, 128, 151),	/* GPP_U */
+	EHL_GPP(4, 152, 179),	/* vGPIO */
+};
+
+static const struct intel_padgroup ehl_community3_gpps[] = {
+	EHL_GPP(0, 180, 196),	/* CPU */
+	EHL_GPP(1, 197, 198),	/* GPP_S */
+	EHL_GPP(2, 199, 222),	/* GPP_A */
+	EHL_GPP(3, 223, 226),	/* vGPIO_3 */
+};
+
+static const struct intel_padgroup ehl_community4_gpps[] = {
+	EHL_GPP(0, 227, 250),	/* GPP_C */
+	EHL_GPP(1, 251, 275),	/* GPP_F */
+	EHL_GPP(2, 276, 281),	/* HVCMOS */
+	EHL_GPP(3, 282, 306),	/* GPP_E */
+};
+
+static const struct intel_padgroup ehl_community5_gpps[] = {
+	EHL_GPP(0, 307, 314),	/* GPP_R */
+};
+
+static const struct intel_community ehl_communities[] = {
+	EHL_COMMUNITY(0, 0, 66, ehl_community0_gpps),
+	EHL_COMMUNITY(1, 67, 179, ehl_community1_gpps),
+	EHL_COMMUNITY(2, 180, 226, ehl_community3_gpps),
+	EHL_COMMUNITY(3, 227, 306, ehl_community4_gpps),
+	EHL_COMMUNITY(4, 307, 314, ehl_community5_gpps),
+};
+
+static const struct intel_pingroup ehl_groups[] = {
+	/* PLACE HOLDER */
+};
+
+static const struct intel_function ehl_functions[] = {
+	/* PLACE HOLDER */
+};
+
+static const struct intel_pinctrl_soc_data ehl_soc_data = {
+	.pins = ehl_pins,
+	.npins = ARRAY_SIZE(ehl_pins),
+	.groups = ehl_groups,
+	.ngroups = ARRAY_SIZE(ehl_groups),
+	.functions = ehl_functions,
+	.nfunctions = ARRAY_SIZE(ehl_functions),
+	.communities = ehl_communities,
+	.ncommunities = ARRAY_SIZE(ehl_communities),
+};
+
+static const struct acpi_device_id ehl_pinctrl_acpi_match[] = {
+	{ "INTC1020", (kernel_ulong_t)&ehl_soc_data },
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, ehl_pinctrl_acpi_match);
+
+static INTEL_PINCTRL_PM_OPS(ehl_pinctrl_pm_ops);
+
+static struct platform_driver ehl_pinctrl_driver = {
+	.probe = intel_pinctrl_probe_by_hid,
+	.driver = {
+		.name = "elkhartlake-pinctrl",
+		.acpi_match_table = ehl_pinctrl_acpi_match,
+		.pm = &ehl_pinctrl_pm_ops,
+	},
+};
+
+module_platform_driver(ehl_pinctrl_driver);
+
+MODULE_AUTHOR("Andy Shevchenko <andriy.shevchenko@linux.intel.com>");
+MODULE_DESCRIPTION("Intel Elkhart Lake PCH pinctrl/GPIO driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

