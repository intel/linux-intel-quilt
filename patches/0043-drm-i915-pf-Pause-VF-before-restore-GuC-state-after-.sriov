From bcb1dc866006c3bc275af2648bc9d95ed1fe085e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Pi=C3=B3rkowski?= <piotr.piorkowski@intel.com>
Date: Thu, 5 Sep 2024 09:57:10 +0200
Subject: [PATCH 43/46] drm/i915/pf: Pause VF before restore GuC state after
 suspend for GuC 70.25 and later
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

For save/restore v2 (GuC 70.25 and later), GuC requires the VF to be
in paused state before restore. However, after suspend, VF is in ready
state. So in order to restore the GuC state, we must first pause
the VF.
Let's pause VF before restoring GuC status after suspend, and then after
restoring GuC state let's resume VF for GuC 70.25 and later.

Signed-off-by: Piotr Pi√≥rkowski <piotr.piorkowski@intel.com>
Signed-off-by: Zawawi, Muhammad Zul Husni <muhammad.zul.husni.zawawi@intel.com>
---
 drivers/gpu/drm/i915/i915_sriov.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_sriov.c b/drivers/gpu/drm/i915/i915_sriov.c
index 541470cbd9b6..3cb12f339a51 100644
--- a/drivers/gpu/drm/i915/i915_sriov.c
+++ b/drivers/gpu/drm/i915/i915_sriov.c
@@ -834,6 +834,12 @@ static void pf_save_vfs_guc_state(struct drm_i915_private *i915, unsigned int nu
 	drm_dbg(&i915->drm, "%u of %u VFs GuC state successfully saved", saved, num_vfs);
 }
 
+static bool guc_supports_save_restore_v2(struct intel_guc *guc)
+{
+	return MAKE_GUC_VER_STRUCT(guc->fw.file_selected.ver)
+	       >= MAKE_GUC_VER(70, 25, 0);
+}
+
 static int pf_gt_restore_vf_guc_state(struct intel_gt *gt, unsigned int vfid)
 {
 	struct pci_dev *pdev = to_pci_dev(gt->i915->drm.dev);
@@ -855,6 +861,17 @@ static int pf_gt_restore_vf_guc_state(struct intel_gt *gt, unsigned int vfid)
 		return -ETIMEDOUT;
 	}
 
+	/*
+	 * For save/restore v2, GuC requires the VF to be in paused state
+	 * before restore. However, after suspend, VF is in ready state.
+	 * So in order to restore the GuC state, we must first pause the VF
+	 */
+	if (guc_supports_save_restore_v2(&gt->uc.guc)) {
+		err = intel_iov_state_pause_vf_sync(iov, vfid, true);
+		if (err < 0)
+			return err;
+	}
+
 	err = intel_iov_state_restore_vf(iov, vfid, data->guc_state.blob, data->guc_state.size);
 	if (err < 0) {
 		IOV_ERROR(iov, "Failed to restore VF%u GuC state: (%pe)", vfid, ERR_PTR(err));
-- 
2.43.0

