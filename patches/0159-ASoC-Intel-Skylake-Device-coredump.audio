From f1cf631acc2b2a42c7935d6b512cdd1629d996ef Mon Sep 17 00:00:00 2001
From: Cezary Rojewski <cezary.rojewski@intel.com>
Date: Tue, 9 Apr 2019 11:39:48 +0200
Subject: [PATCH 159/193] ASoC: Intel: Skylake: Device coredump

When DSP core exception is caught, firmware sends notification which
host can pickup and dump essential information, helpful during debug.
Coredump is divided into two components: fw registers and exception
stack (if available).

While the former resides in SRAM0, the later is present within SRAM2 and
is gathered in similar fashion as the traces are. With important
difference though: instead of being notified about buffer being filled
with data, driver is responsible for manually reading completion flag.

Change-Id: I4896c1ae01807b1e958151df956cb28bdaf518b0
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
Signed-off-by: Lulko, KamilX <kamilx.lulko@intel.com>
Reviewed-on:
Reviewed-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>

ASoC: Intel: Skylake: Synchronize coredump and traces gathering

When driver receives EXCEPTION_CAUGHT notification for given core, log
tracers for that very core might still be ongoing. If this is the case,
driver should extract traces from the last write to memory window
before proceeding with dumping FW registers.

Last, because when exception occures, FW ceases all operations and
gathers data necessary for debugging the issue, without overwriting
previously written traces.

Change-Id: If603b4058fdc9b4b9a905c1e83c73951b9a1056e
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
Signed-off-by: Lulko, KamilX <kamilx.lulko@intel.com>
Reviewed-on:
Reviewed-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>

ASoC: Intel: Skylake: Refactor coredump

Disclaimer:
This is a cummulative commit for review purposes only as it will cease
to exist during next rebase cycle. Because of this, refactor, adjustments
and optimization changed are combined together.

To be squashed into coredump introducing series.

Together with Przemyslaw Blaszkowski, brainstorm has been concluded to
improve behavior of feature called: stackdump which is a part of
coredump. The overhaul has been made possible due to discovery of
several critical bugs both in FW and SW. We came to the conclusion that
this is an opportunity to makes things right and thus, following changes
have been made:

- Stackdump header aligned with ICL model effectively streamlining same
model across all platforms. Footer remains the same
- stack_size -> stackdump_size: now includes hdr and ftr sizes
- DSP awaits host to gather all remaining logs before dumping stack

-in consequence-
- Host no longer relies on stackdump_completion bit as stackdump_size
has made it redundant
- Stackdump gathering is now opaque to host
- No need for stack header search mechanism

-corrected-
- Host now waits 10ms between each log entry instead of 100ms for entire
dump
- icl_slot_offset cannot really fail as ENABLE_LOGS success ensures host
about existence of reserved memory region. And thus, log_buffer_offset
return modified from signed to unsigned int

Change-Id: I6ca8558add638a317b6ab94aff11caa0590e3c58
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
Reviewed-on:
Tested-by: gkblditp <gkblditp@intel.com>
Reviewed-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
Tested-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
---
 sound/soc/intel/skylake/bxt-sst.c     |  30 ++++++--
 sound/soc/intel/skylake/icl-sst.c     |  54 ++++++++++++--
 sound/soc/intel/skylake/skl-sst-dsp.h |   2 +-
 sound/soc/intel/skylake/skl-sst-ipc.c | 102 ++++++++++++++++++++------
 sound/soc/intel/skylake/skl-sst-ipc.h |  61 ++++-----------
 sound/soc/intel/skylake/skl-sst.c     |  13 ++--
 6 files changed, 173 insertions(+), 89 deletions(-)

diff --git a/sound/soc/intel/skylake/bxt-sst.c b/sound/soc/intel/skylake/bxt-sst.c
index c28e4cf667b1..824dae00773f 100644
--- a/sound/soc/intel/skylake/bxt-sst.c
+++ b/sound/soc/intel/skylake/bxt-sst.c
@@ -569,14 +569,34 @@ int bxt_enable_logs(struct sst_dsp *dsp, enum skl_log_enable enable,
 int bxt_log_buffer_status(struct sst_dsp *dsp, struct skl_notify_msg notif)
 {
 	struct skl_dev *skl = dsp->thread_context;
-	int ret;
+	struct bxt_log_buffer_layout layout;
+	void __iomem *addr, *buf;
 
-	ret = dsp->fw_ops.log_buffer_offset(dsp, notif.log.core);
-	if (ret < 0)
-		return ret;
+	addr = skl_log_buffer_addr(dsp, notif.log.core);
+	memcpy_fromio(&layout, addr, sizeof(layout));
+
+	if (!kfifo_initialized(&skl->trace_fifo))
+		/* consume the logs regardless of consumer presence */
+		goto update_read_ptr;
+
+	buf = bxt_log_payload_addr(addr);
+
+	if (layout.read_ptr > layout.write_ptr) {
+		__kfifo_fromio_locked(&skl->trace_fifo,
+			buf + layout.read_ptr,
+			bxt_log_payload_size(dsp) - layout.read_ptr,
+			&skl->trace_lock);
+		layout.read_ptr = 0;
+	}
+	__kfifo_fromio_locked(&skl->trace_fifo,
+		buf + layout.read_ptr,
+		layout.write_ptr - layout.read_ptr,
+		&skl->trace_lock);
 
-	skl_copy_from_sram2(skl, dsp->addr.sram2 + ret);
 	wake_up(&skl->trace_waitq);
+
+update_read_ptr:
+	writel(layout.write_ptr, addr);
 	return 0;
 }
 
diff --git a/sound/soc/intel/skylake/icl-sst.c b/sound/soc/intel/skylake/icl-sst.c
index e7f0887d348a..58f05c6c20e1 100644
--- a/sound/soc/intel/skylake/icl-sst.c
+++ b/sound/soc/intel/skylake/icl-sst.c
@@ -10,6 +10,41 @@
 #include "skl-sst-ipc.h"
 #include "skl.h"
 
+union icl_memwnd2_slot_type {
+	u32 val;
+	struct {
+		u32 resource_id:8;
+		u32 type:24;
+	};
+};
+
+struct icl_memwnd2_desc {
+	u32 resource_id;
+	union icl_memwnd2_slot_type slot_id;
+	u32 vma;
+} __packed;
+
+#define ICL_MEMWND2_SLOTS_COUNT	15
+
+struct icl_memwnd2 {
+	union {
+		struct icl_memwnd2_desc slot_desc[ICL_MEMWND2_SLOTS_COUNT];
+		u8 rsvd[PAGE_SIZE];
+	};
+	u8 slot_array[ICL_MEMWND2_SLOTS_COUNT][PAGE_SIZE];
+} __packed;
+
+#define ICL_SLOT_UNUSED \
+	((union icl_memwnd2_slot_type) { 0x00000000U })
+#define ICL_SLOT_CRITICAL_LOG \
+	((union icl_memwnd2_slot_type) { 0x54524300U })
+#define ICL_SLOT_DEBUG_LOG \
+	((union icl_memwnd2_slot_type) { 0x474f4c00U })
+#define ICL_SLOT_GDB_STUB \
+	((union icl_memwnd2_slot_type) { 0x42444700U })
+#define ICL_SLOT_BROKEN \
+	((union icl_memwnd2_slot_type) { 0x44414544U })
+
 __maybe_unused static int
 icl_enable_logs(struct sst_dsp *dsp, enum skl_log_enable enable,
 		u32 aging_period, u32 fifo_full_period,
@@ -37,25 +72,34 @@ icl_enable_logs(struct sst_dsp *dsp, enum skl_log_enable enable,
 	return ret;
 }
 
-static int icl_slot_offset(struct skl_dev *skl,
+static int icl_slot_offset(struct sst_dsp *dsp,
 		union icl_memwnd2_slot_type slot_type)
 {
 	struct icl_memwnd2_desc desc[ICL_MEMWND2_SLOTS_COUNT];
 	int i;
 
-	memcpy_fromio(&desc, skl->dsp->addr.sram2, sizeof(desc));
+	memcpy_fromio(&desc, dsp->addr.sram2, sizeof(desc));
 
 	for (i = 0; i < ICL_MEMWND2_SLOTS_COUNT; i++)
 		if (desc[i].slot_id.val == slot_type.val)
 			return offsetof(struct icl_memwnd2, slot_array) +
-				skl_log_buffer_offset(skl->dsp, i);
+				skl_log_buffer_offset(dsp, i);
 	return -ENXIO;
 }
 
-__maybe_unused static int icl_log_buffer_offset(struct sst_dsp *dsp, u32 core)
+__maybe_unused static unsigned int
+icl_log_buffer_offset(struct sst_dsp *dsp, u32 core)
 {
 	union icl_memwnd2_slot_type slot_type = ICL_SLOT_DEBUG_LOG;
+	int ret;
 
 	slot_type.resource_id = core;
-	return icl_slot_offset(dsp->thread_context, slot_type);
+	ret = icl_slot_offset(dsp, slot_type);
+	if (ret) {
+		dev_dbg(dsp->dev,
+			"No slot offset found for: %d\n", slot_type.val);
+		return 0;
+	}
+
+	return ret;
 }
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index 4845346d7bbb..ef38e151b46c 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -155,7 +155,7 @@ struct skl_dsp_fw_ops {
 	int (*enable_logs)(struct sst_dsp *dsp, enum skl_log_enable enable,
 		u32 aging_period, u32 fifo_full_period,
 		unsigned long resource_mask, u32 *priorities);
-	int (*log_buffer_offset)(struct sst_dsp *dsp, u32 core);
+	unsigned int (*log_buffer_offset)(struct sst_dsp *dsp, u32 core);
 	int (*log_buffer_status)(struct sst_dsp *dsp,
 		struct skl_notify_msg notif);
 };
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 07b065e6c8e3..b12fe4e669e5 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -4,6 +4,7 @@
  *
  * Copyright (C) 2014-15, Intel Corporation.
  */
+#include <linux/devcoredump.h>
 #include <linux/device.h>
 #include <linux/kfifo.h>
 #include "../common/sst-dsp.h"
@@ -469,6 +470,9 @@ skl_parse_resource_event(struct skl_dev *skl, struct skl_ipc_header header)
 			&notify, sizeof(struct skl_event_notify), false);
 }
 
+static int
+skl_exception_caught(struct sst_dsp *dsp, struct skl_notify_msg notif);
+
 int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 		struct skl_ipc_header header)
 {
@@ -509,6 +513,12 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 			skl->miscbdcg_disabled = true;
 			break;
 
+		case IPC_GLB_NOTIFY_EXCEPTION_CAUGHT:
+			dev_err(ipc->dev, "Core %d exception caught\n",
+				notif.core_id);
+			skl_exception_caught(skl->dsp, notif);
+			break;
+
 		case IPC_GLB_NOTIFY_TIMESTAMP_CAPTURED:
 			return skl_process_timestamp_notification(skl);
 
@@ -1465,8 +1475,8 @@ int skl_ipc_hw_cfg_get(struct sst_generic_ipc *ipc, struct skl_hw_cfg *cfg)
 }
 EXPORT_SYMBOL_GPL(skl_ipc_hw_cfg_get);
 
-unsigned int
-skl_kfifo_fromio_locked(struct kfifo *fifo, const void __iomem *src,
+unsigned int __kfifo_fromio_locked(struct kfifo *fifo,
+		const void __iomem *src,
 		unsigned int len, spinlock_t *lock)
 {
 	struct __kfifo *__fifo = &fifo->kfifo;
@@ -1487,34 +1497,78 @@ skl_kfifo_fromio_locked(struct kfifo *fifo, const void __iomem *src,
 	return len;
 }
 
-static void copy_from_sram2(struct skl_dev *skl, void __iomem *addr,
-		struct bxt_log_buffer_layout layout)
+static int bxt_wait_log_entry(struct sst_dsp *dsp,
+		u32 core, struct bxt_log_buffer_layout *layout)
 {
-	struct kfifo *fifo = &skl->trace_fifo;
-	spinlock_t *lock = &skl->trace_lock;
-	void __iomem *buf;
-
-	if (!kfifo_initialized(fifo))
-		/* consume the logs regardless of consumer presence */
-		goto update_read_ptr;
-	buf = addr + sizeof(layout);
-
-	if (layout.read_ptr > layout.write_ptr) {
-		skl_kfifo_fromio_locked(fifo, buf + layout.read_ptr,
-			bxt_log_payload_size(skl) - layout.read_ptr, lock);
-		layout.read_ptr = 0;
-	}
-	skl_kfifo_fromio_locked(fifo, buf + layout.read_ptr,
-		layout.write_ptr - layout.read_ptr, lock);
+	void __iomem *addr;
+	unsigned long timeout;
+
+	addr = skl_log_buffer_addr(dsp, core);
+	timeout = jiffies + msecs_to_jiffies(10);
 
-update_read_ptr:
-	writel(layout.write_ptr, addr);
+	do {
+		memcpy_fromio(layout, addr, sizeof(*layout));
+		if (layout->read_ptr != layout->write_ptr)
+			return 0;
+		usleep_range(500, 1000);
+	} while (!time_after(jiffies, timeout));
+
+	return -ETIMEDOUT;
 }
 
-void skl_copy_from_sram2(struct skl_dev *skl, void __iomem *addr)
+#define FW_REGS_SIZE	PAGE_SIZE
+/* reads log header and tests its type */
+#define bxt_is_entry_stackdump(addr) ((readl(addr) >> 30) & 0x1)
+
+static int
+skl_exception_caught(struct sst_dsp *dsp, struct skl_notify_msg notif)
 {
 	struct bxt_log_buffer_layout layout;
+	void __iomem *addr, *buf;
+	size_t dump_size;
+	u16 offset = 0;
+	u8 *dump, *pos;
+
+	dump_size = FW_REGS_SIZE + notif.stack_dump_size;
+	dump = vzalloc(dump_size);
+	if (!dump)
+		return -ENOMEM;
+	memcpy_fromio(dump, dsp->addr.sram0, FW_REGS_SIZE);
 
+	if (!notif.stack_dump_size)
+		goto exit;
+	/* DSP awaits remaining logs to be gathered before dumping stack */
+	addr = skl_log_buffer_addr(dsp, notif.core_id);
+	buf = bxt_log_payload_addr(addr);
 	memcpy_fromio(&layout, addr, sizeof(layout));
-	copy_from_sram2(skl, addr, layout);
+	if (!bxt_is_entry_stackdump(buf + layout.read_ptr)) {
+		notif.log.core = notif.core_id;
+		dsp->fw_ops.log_buffer_status(dsp, notif);
+	}
+
+	pos = dump + FW_REGS_SIZE;
+	/* gather the stack */
+	do {
+		u32 count;
+
+		if (bxt_wait_log_entry(dsp, notif.core_id, &layout))
+			break;
+
+		if (layout.read_ptr > layout.write_ptr) {
+			count = bxt_log_payload_size(dsp) - layout.read_ptr;
+			memcpy_fromio(pos + offset, buf + layout.read_ptr, count);
+			layout.read_ptr = 0;
+			offset += count;
+		}
+		count = layout.write_ptr - layout.read_ptr;
+		memcpy_fromio(pos + offset, buf + layout.read_ptr, count);
+		offset += count;
+
+		/* update read pointer */
+		writel(layout.write_ptr, addr);
+	} while (offset < notif.stack_dump_size);
+
+exit:
+	dev_coredumpv(dsp->dev, dump, dump_size, GFP_KERNEL);
+	return 0;
 }
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 893397bbe1d1..9e935a6e50d7 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -297,6 +297,7 @@ enum skl_ipc_notification_type {
 	IPC_GLB_NOTIFY_TIMESTAMP_CAPTURED = 7,
 	IPC_GLB_NOTIFY_FW_READY = 8,
 	IPC_GLB_NOTIFY_FW_AUD_CLASS_RESULT = 9,
+	IPC_GLB_NOTIFY_EXCEPTION_CAUGHT = 10,
 	IPC_GLB_MODULE_NOTIFICATION = 12,
 };
 
@@ -331,7 +332,7 @@ struct skl_notify_msg {
 		u32 sv_score:16;
 		struct {
 			u32 core_id:2;
-			u32 stack_size:16;
+			u32 stack_dump_size:16;
 		};
 		struct {
 			u32 rsvd:30;
@@ -589,41 +590,6 @@ struct bxt_log_buffer_layout {
 	u8 buffer[0];
 } __packed;
 
-union icl_memwnd2_slot_type {
-	u32 val;
-	struct {
-		u32 resource_id:8;
-		u32 type:24;
-	};
-};
-
-struct icl_memwnd2_desc {
-	u32 resource_id;
-	union icl_memwnd2_slot_type slot_id;
-	u32 vma;
-} __packed;
-
-#define ICL_SLOT_UNUSED \
-	((union icl_memwnd2_slot_type) { 0x00000000U })
-#define ICL_SLOT_CRITICAL_LOG \
-	((union icl_memwnd2_slot_type) { 0x54524300U })
-#define ICL_SLOT_DEBUG_LOG \
-	((union icl_memwnd2_slot_type) { 0x474f4c00U })
-#define ICL_SLOT_GDB_STUB \
-	((union icl_memwnd2_slot_type) { 0x42444700U })
-#define ICL_SLOT_BROKEN \
-	((union icl_memwnd2_slot_type) { 0x44414544U })
-
-#define ICL_MEMWND2_SLOTS_COUNT	15
-
-struct icl_memwnd2 {
-	union {
-		struct icl_memwnd2_desc slot_desc[ICL_MEMWND2_SLOTS_COUNT];
-		u8 rsvd[PAGE_SIZE];
-	};
-	u8 slot_array[ICL_MEMWND2_SLOTS_COUNT][PAGE_SIZE];
-} __packed;
-
 struct skl_notify_kctrl_info {
 	struct list_head list;
 	u32 notify_id;
@@ -756,24 +722,25 @@ int bxt_enable_logs(struct sst_dsp *dsp, enum skl_log_enable enable,
 		u32 aging_period, u32 fifo_full_period,
 		unsigned long resource_mask, u32 *priorities);
 
-unsigned int
-skl_kfifo_fromio_locked(struct kfifo *fifo, const void __iomem *src,
+unsigned int skl_log_buffer_offset(struct sst_dsp *dsp, u32 core);
+unsigned int __kfifo_fromio_locked(struct kfifo *fifo,
+		const void __iomem *src,
 		unsigned int len, spinlock_t *lock);
+int bxt_log_buffer_status(struct sst_dsp *dsp, struct skl_notify_msg notif);
 
-#define skl_log_buffer_size(s) \
+#define skl_log_buffer_size(dsp) \
 ({ \
-	struct skl_dev *__skl = (s); \
+	struct skl_dev *__skl = (dsp->thread_context); \
 	__skl->fw_cfg.trace_log_bytes / __skl->hw_cfg.dsp_cores; \
 })
 
-#define bxt_log_payload_size(s) \
-	(skl_log_buffer_size(s) - sizeof(struct bxt_log_buffer_layout))
+#define skl_log_buffer_addr(dsp, core) \
+	(dsp->addr.sram2 + dsp->fw_ops.log_buffer_offset(dsp, core))
 
-int skl_log_buffer_offset(struct sst_dsp *dsp, u32 core);
+#define bxt_log_payload_size(dsp) \
+	(skl_log_buffer_size(dsp) - sizeof(struct bxt_log_buffer_layout))
 
-#define FW_REGS_SZ	PAGE_SIZE
-
-void skl_copy_from_sram2(struct skl_dev *skl, void __iomem *addr);
-int bxt_log_buffer_status(struct sst_dsp *dsp, struct skl_notify_msg notif);
+#define bxt_log_payload_addr(addr) \
+	(addr + sizeof(struct bxt_log_buffer_layout))
 
 #endif /* __SKL_IPC_H */
diff --git a/sound/soc/intel/skylake/skl-sst.c b/sound/soc/intel/skylake/skl-sst.c
index cecf31296e9b..806b6713a735 100644
--- a/sound/soc/intel/skylake/skl-sst.c
+++ b/sound/soc/intel/skylake/skl-sst.c
@@ -523,9 +523,9 @@ static int skl_enable_logs(struct sst_dsp *dsp, enum skl_log_enable enable,
 	return ret;
 }
 
-int skl_log_buffer_offset(struct sst_dsp *dsp, u32 core)
+unsigned int skl_log_buffer_offset(struct sst_dsp *dsp, u32 core)
 {
-	return core * skl_log_buffer_size(dsp->thread_context);
+	return core * skl_log_buffer_size(dsp);
 }
 
 static int
@@ -533,18 +533,17 @@ skl_log_buffer_status(struct sst_dsp *dsp, struct skl_notify_msg notif)
 {
 	struct skl_dev *skl = dsp->thread_context;
 	void __iomem *buf;
-	u32 size, write, offset;
+	u16 size, write, offset;
 
 	if (!kfifo_initialized(&skl->trace_fifo))
 		return 0;
-	size = skl_log_buffer_size(skl) / 2;
+	size = skl_log_buffer_size(dsp) / 2;
 	write = readl(dsp->addr.sram0 + FW_REGS_DBG_LOG_WP(notif.log.core));
 	/* determine buffer half */
 	offset = (write < size) ? size : 0;
 
-	buf = dsp->addr.sram2 +
-		dsp->fw_ops.log_buffer_offset(dsp, notif.log.core) + offset;
-	skl_kfifo_fromio_locked(&skl->trace_fifo, buf, size, &skl->trace_lock);
+	buf = skl_log_buffer_addr(dsp, notif.log.core) + offset;
+	__kfifo_fromio_locked(&skl->trace_fifo, buf, size, &skl->trace_lock);
 	wake_up(&skl->trace_waitq);
 
 	return 0;
-- 
2.17.1

