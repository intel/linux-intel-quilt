From 66317d9c509bdd7f324b5b7a5de5b588b952a436 Mon Sep 17 00:00:00 2001
From: Meng Wei <wei.meng@intel.com>
Date: Tue, 27 Nov 2018 19:30:42 +0800
Subject: [PATCH 10/70] crlmodule: common register list based sensor driver

Common register list based driver is based on a sensor configuration
file created for a specific sensor module based on a set of
rules.

Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 drivers/media/i2c/Kconfig                     |    1 +
 drivers/media/i2c/Makefile                    |    2 +
 drivers/media/i2c/crlmodule/Kconfig           |    6 +
 drivers/media/i2c/crlmodule/Makefile          |   18 +
 .../i2c/crlmodule/crl_adv7481_configuration.h |  706 ++
 .../crl_adv7481_cvbs_configuration.h          |  285 +
 .../crl_adv7481_eval_configuration.h          |  577 ++
 .../crl_adv7481_hdmi_configuration.c          |  615 ++
 .../crl_adv7481_hdmi_configuration.h          | 1025 +++
 .../crlmodule/crl_ar0231at_configuration.h    | 2409 +++++
 .../i2c/crlmodule/crl_ar023z_configuration.h  | 1903 ++++
 .../i2c/crlmodule/crl_imx132_configuration.h  |  699 ++
 .../i2c/crlmodule/crl_imx135_configuration.h  |  779 ++
 .../i2c/crlmodule/crl_imx185_configuration.h  | 1772 ++++
 .../i2c/crlmodule/crl_imx214_configuration.h  | 1428 +++
 .../i2c/crlmodule/crl_imx230_configuration.h  | 2367 +++++
 .../i2c/crlmodule/crl_imx274_configuration.h  | 1272 +++
 .../i2c/crlmodule/crl_imx290_configuration.h  | 1078 +++
 .../i2c/crlmodule/crl_imx318_configuration.h  | 1050 +++
 .../i2c/crlmodule/crl_imx477_common_regs.h    | 1096 +++
 .../crl_imx477_master_configuration.h         | 1375 +++
 .../crl_imx477_slave_configuration.h          |  509 +
 .../i2c/crlmodule/crl_magna_configuration.h   |  209 +
 .../i2c/crlmodule/crl_ov10635_configuration.h | 6368 +++++++++++++
 .../i2c/crlmodule/crl_ov10640_configuration.h | 3235 +++++++
 .../i2c/crlmodule/crl_ov13860_configuration.h | 1537 ++++
 .../i2c/crlmodule/crl_ov2740_configuration.h  |  761 ++
 .../i2c/crlmodule/crl_ov2775_configuration.h  | 8177 +++++++++++++++++
 .../i2c/crlmodule/crl_ov5670_configuration.h  | 1136 +++
 .../i2c/crlmodule/crl_ov8858_configuration.h  | 1429 +++
 .../i2c/crlmodule/crl_ov9281_configuration.h  |  520 ++
 .../i2c/crlmodule/crl_ox03a10_configuration.h | 1709 ++++
 .../crlmodule/crl_pixter_stub_configuration.h | 1386 +++
 drivers/media/i2c/crlmodule/crlmodule-core.c  | 3519 +++++++
 drivers/media/i2c/crlmodule/crlmodule-data.c  |  125 +
 .../media/i2c/crlmodule/crlmodule-msrlist.c   |  158 +
 .../media/i2c/crlmodule/crlmodule-msrlist.h   |   51 +
 drivers/media/i2c/crlmodule/crlmodule-nvm.c   |  141 +
 drivers/media/i2c/crlmodule/crlmodule-nvm.h   |   23 +
 drivers/media/i2c/crlmodule/crlmodule-regs.c  |  341 +
 drivers/media/i2c/crlmodule/crlmodule-regs.h  |   26 +
 .../media/i2c/crlmodule/crlmodule-sensor-ds.h |  622 ++
 drivers/media/i2c/crlmodule/crlmodule.h       |  125 +
 include/media/crlmodule.h                     |   43 +
 include/uapi/linux/crlmodule.h                |   76 +
 45 files changed, 52689 insertions(+)
 create mode 100644 drivers/media/i2c/crlmodule/Kconfig
 create mode 100644 drivers/media/i2c/crlmodule/Makefile
 create mode 100644 drivers/media/i2c/crlmodule/crl_adv7481_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_adv7481_cvbs_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_adv7481_eval_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.c
 create mode 100644 drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ar023z_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx132_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx135_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx185_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx214_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx230_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx274_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx290_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx318_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx477_common_regs.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx477_master_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_imx477_slave_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_magna_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov10635_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov10640_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov13860_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov2740_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov2775_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov5670_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov8858_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov9281_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_ox03a10_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crl_pixter_stub_configuration.h
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-core.c
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-data.c
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-msrlist.c
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-msrlist.h
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-nvm.c
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-nvm.h
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-regs.c
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-regs.h
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule-sensor-ds.h
 create mode 100644 drivers/media/i2c/crlmodule/crlmodule.h
 create mode 100644 include/media/crlmodule.h
 create mode 100644 include/uapi/linux/crlmodule.h

diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 79ce9ec6fc1b..e906a3891416 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -978,6 +978,7 @@ config VIDEO_S5K5BAF
 
 source "drivers/media/i2c/smiapp/Kconfig"
 source "drivers/media/i2c/et8ek8/Kconfig"
+source "drivers/media/i2c/crlmodule/Kconfig"
 
 config VIDEO_S5C73M3
 	tristate "Samsung S5C73M3 sensor support"
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index fd4ea86dedd5..436958f4200f 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -116,3 +116,5 @@ obj-$(CONFIG_VIDEO_IMX355)	+= imx355.o
 obj-$(CONFIG_VIDEO_ST_MIPID02) += st-mipid02.o
 
 obj-$(CONFIG_SDR_MAX2175) += max2175.o
+
+obj-$(CONFIG_VIDEO_CRLMODULE) += crlmodule/
diff --git a/drivers/media/i2c/crlmodule/Kconfig b/drivers/media/i2c/crlmodule/Kconfig
new file mode 100644
index 000000000000..2da6dafcc2c6
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/Kconfig
@@ -0,0 +1,6 @@
+config VIDEO_CRLMODULE
+	tristate "CRL Module sensor support"
+	depends on I2C && VIDEO_V4L2 && VIDEO_V4L2_SUBDEV_API
+	depends on MEDIA_CAMERA_SUPPORT
+	---help---
+	  This is a generic driver for CRL based camera modules.
diff --git a/drivers/media/i2c/crlmodule/Makefile b/drivers/media/i2c/crlmodule/Makefile
new file mode 100644
index 000000000000..c3a1fed9c6bb
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/Makefile
@@ -0,0 +1,18 @@
+# SPDX-License-Identifier: GPL-2.0
+# Copyright (c) 2010 - 2018, Intel Corporation.
+
+# force check the compile warning to make sure zero warnings
+# note we may have build issue when gcc upgraded.
+ccflags-y := -Wall -Wextra
+ccflags-y += $(call cc-disable-warning, unused-parameter)
+ccflags-y += $(call cc-disable-warning, implicit-fallthrough)
+ccflags-y += $(call cc-disable-warning, missing-field-initializers)
+ccflags-$(CONFIG_VIDEO_INTEL_IPU_WERROR) += -Werror
+
+crlmodule-objs			+= crlmodule-core.o crlmodule-data.o \
+				   crlmodule-regs.o crlmodule-nvm.o \
+				   crl_adv7481_hdmi_configuration.o \
+				   crlmodule-msrlist.o
+obj-$(CONFIG_VIDEO_CRLMODULE)	+= crlmodule.o
+
+ccflags-y += -Idrivers/media/i2c
diff --git a/drivers/media/i2c/crlmodule/crl_adv7481_configuration.h b/drivers/media/i2c/crlmodule/crl_adv7481_configuration.h
new file mode 100644
index 000000000000..9cf6e37074a8
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_adv7481_configuration.h
@@ -0,0 +1,706 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation
+ *
+ * Author: Jianxu Zheng <jian.xu.zheng@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_ADV7481_CONFIGURATION_H_
+#define __CRLMODULE_ADV7481_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep adv7481_powerup_regset[] = {
+	{0xFF, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* SW reset */
+	{0x00, CRL_REG_LEN_DELAY, 0x05, 0x00}, /* Delay 5ms */
+	{0x01, CRL_REG_LEN_08BIT, 0x76, 0xE0}, /* ADI recommended setting */
+	{0xF2, CRL_REG_LEN_08BIT, 0x01, 0xE0}, /* I2C Rd Auto-Increment=1 */
+	{0xF3, CRL_REG_LEN_08BIT, 0x4C, 0xE0}, /* DPLL Map Address */
+	{0xF4, CRL_REG_LEN_08BIT, 0x44, 0xE0}, /* CP Map Address */
+	{0xF5, CRL_REG_LEN_08BIT, 0x68, 0xE0}, /* HDMI RX Map Address */
+	{0xF6, CRL_REG_LEN_08BIT, 0x6C, 0xE0}, /* EDID Map Address */
+	{0xF7, CRL_REG_LEN_08BIT, 0x64, 0xE0}, /* HDMI RX Repeater Map Addr */
+	{0xF8, CRL_REG_LEN_08BIT, 0x62, 0xE0}, /* HDMI RX Infoframe Map Addr */
+	{0xF9, CRL_REG_LEN_08BIT, 0xF0, 0xE0}, /* CBUS Map Address Set */
+	{0xFA, CRL_REG_LEN_08BIT, 0x82, 0xE0}, /* CEC Map Address Set */
+	{0xFB, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* SDP Main Map Address */
+	{0xFC, CRL_REG_LEN_08BIT, 0x90, 0xE0}, /* CSI-TXB Map Address */
+	{0xFD, CRL_REG_LEN_08BIT, 0x94, 0xE0}, /* CSI-TXA Map Address */
+	{0x00, CRL_REG_LEN_08BIT, 0x50, 0xE0}, /* Disable Chip Powerdown &
+						  HDMI Rx Block */
+	{0x40, CRL_REG_LEN_08BIT, 0x83, 0x64}, /* Enable HDCP 1.1 */
+	{0x00, CRL_REG_LEN_08BIT, 0x08, 0x68}, /* ADI recommended setting */
+	{0x3D, CRL_REG_LEN_08BIT, 0x10, 0x68}, /* ADI recommended setting */
+	{0x3E, CRL_REG_LEN_08BIT, 0x69, 0x68}, /* ADI recommended setting */
+	{0x3F, CRL_REG_LEN_08BIT, 0x46, 0x68}, /* ADI recommended setting */
+	{0x4E, CRL_REG_LEN_08BIT, 0xFE, 0x68}, /* ADI recommended setting */
+	{0x4F, CRL_REG_LEN_08BIT, 0x08, 0x68}, /* ADI recommended setting */
+	{0x57, CRL_REG_LEN_08BIT, 0xA3, 0x68}, /* ADI recommended setting */
+	{0x58, CRL_REG_LEN_08BIT, 0x04, 0x68}, /* ADI recommended setting */
+	{0x85, CRL_REG_LEN_08BIT, 0x10, 0x68}, /* ADI recommended setting */
+	{0x83, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* Enable All Terminations */
+	{0xBE, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* ADI recommended setting */
+	{0x6C, CRL_REG_LEN_08BIT, 0x01, 0x68}, /* HPA Manual Enable */
+	{0xF8, CRL_REG_LEN_08BIT, 0x01, 0x68}, /* HPA Asserted */
+	{0x0F, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* Audio Mute Speed =
+						  Fastest Smallest Step Size */
+	{0x70, CRL_REG_LEN_08BIT, 0xA0, 0x64}, /* Write primary edid size */
+	{0x74, CRL_REG_LEN_08BIT, 0x01, 0x64}, /* Enable manual edid */
+	{0x7A, CRL_REG_LEN_08BIT, 0x00, 0x64}, /* Write edid sram select */
+	{0xF6, CRL_REG_LEN_08BIT, 0x6C, 0xE0}, /* Write edid map bus address */
+
+	{0x00*4, CRL_REG_LEN_32BIT, 0x00FFFFFF, 0x6C}, /* EDID programming */
+	{0x01*4, CRL_REG_LEN_32BIT, 0xFFFFFF00, 0x6C}, /* EDID programming */
+	{0x02*4, CRL_REG_LEN_32BIT, 0x4DD90100, 0x6C}, /* EDID programming */
+	{0x03*4, CRL_REG_LEN_32BIT, 0x00000000, 0x6C}, /* EDID programming */
+	{0x04*4, CRL_REG_LEN_32BIT, 0x00110103, 0x6C}, /* EDID programming */
+	{0x05*4, CRL_REG_LEN_32BIT, 0x80000078, 0x6C}, /* EDID programming */
+	{0x06*4, CRL_REG_LEN_32BIT, 0x0A0DC9A0, 0x6C}, /* EDID programming */
+	{0x07*4, CRL_REG_LEN_32BIT, 0x57479827, 0x6C}, /* EDID programming */
+	{0x08*4, CRL_REG_LEN_32BIT, 0x12484C00, 0x6C}, /* EDID programming */
+	{0x09*4, CRL_REG_LEN_32BIT, 0x00000101, 0x6C}, /* EDID programming */
+	{0x0A*4, CRL_REG_LEN_32BIT, 0x01010101, 0x6C}, /* EDID programming */
+	{0x0B*4, CRL_REG_LEN_32BIT, 0x01010101, 0x6C}, /* EDID programming */
+	{0x0C*4, CRL_REG_LEN_32BIT, 0x01010101, 0x6C}, /* EDID programming */
+	{0x0D*4, CRL_REG_LEN_32BIT, 0x0101011D, 0x6C}, /* EDID programming */
+	{0x0E*4, CRL_REG_LEN_32BIT, 0x80D0721C, 0x6C}, /* EDID programming */
+	{0x0F*4, CRL_REG_LEN_32BIT, 0x1620102C, 0x6C}, /* EDID programming */
+	{0x10*4, CRL_REG_LEN_32BIT, 0x2580C48E, 0x6C}, /* EDID programming */
+	{0x11*4, CRL_REG_LEN_32BIT, 0x2100009E, 0x6C}, /* EDID programming */
+	{0x12*4, CRL_REG_LEN_32BIT, 0x011D8018, 0x6C}, /* EDID programming */
+	{0x13*4, CRL_REG_LEN_32BIT, 0x711C1620, 0x6C}, /* EDID programming */
+	{0x14*4, CRL_REG_LEN_32BIT, 0x582C2500, 0x6C}, /* EDID programming */
+	{0x15*4, CRL_REG_LEN_32BIT, 0xC48E2100, 0x6C}, /* EDID programming */
+	{0x16*4, CRL_REG_LEN_32BIT, 0x009E0000, 0x6C}, /* EDID programming */
+	{0x17*4, CRL_REG_LEN_32BIT, 0x00FC0048, 0x6C}, /* EDID programming */
+	{0x18*4, CRL_REG_LEN_32BIT, 0x444D4920, 0x6C}, /* EDID programming */
+	{0x19*4, CRL_REG_LEN_32BIT, 0x4C4C430A, 0x6C}, /* EDID programming */
+	{0x1A*4, CRL_REG_LEN_32BIT, 0x20202020, 0x6C}, /* EDID programming */
+	{0x1B*4, CRL_REG_LEN_32BIT, 0x000000FD, 0x6C}, /* EDID programming */
+	{0x1C*4, CRL_REG_LEN_32BIT, 0x003B3D0F, 0x6C}, /* EDID programming */
+	{0x1D*4, CRL_REG_LEN_32BIT, 0x2D08000A, 0x6C}, /* EDID programming */
+	{0x1E*4, CRL_REG_LEN_32BIT, 0x20202020, 0x6C}, /* EDID programming */
+	{0x1F*4, CRL_REG_LEN_32BIT, 0x202001C1, 0x6C}, /* EDID programming */
+	{0x20*4, CRL_REG_LEN_32BIT, 0x02031E77, 0x6C}, /* EDID programming */
+	{0x21*4, CRL_REG_LEN_32BIT, 0x4F941305, 0x6C}, /* EDID programming */
+	{0x22*4, CRL_REG_LEN_32BIT, 0x03040201, 0x6C}, /* EDID programming */
+	{0x23*4, CRL_REG_LEN_32BIT, 0x16150706, 0x6C}, /* EDID programming */
+	{0x24*4, CRL_REG_LEN_32BIT, 0x1110121F, 0x6C}, /* EDID programming */
+	{0x25*4, CRL_REG_LEN_32BIT, 0x23090701, 0x6C}, /* EDID programming */
+	{0x26*4, CRL_REG_LEN_32BIT, 0x65030C00, 0x6C}, /* EDID programming */
+	{0x27*4, CRL_REG_LEN_32BIT, 0x10008C0A, 0x6C}, /* EDID programming */
+	{0x28*4, CRL_REG_LEN_32BIT, 0xD0902040, 0x6C}, /* EDID programming */
+	{0x29*4, CRL_REG_LEN_32BIT, 0x31200C40, 0x6C}, /* EDID programming */
+	{0x2A*4, CRL_REG_LEN_32BIT, 0x5500138E, 0x6C}, /* EDID programming */
+	{0x2B*4, CRL_REG_LEN_32BIT, 0x21000018, 0x6C}, /* EDID programming */
+	{0x2C*4, CRL_REG_LEN_32BIT, 0x011D00BC, 0x6C}, /* EDID programming */
+	{0x2D*4, CRL_REG_LEN_32BIT, 0x52D01E20, 0x6C}, /* EDID programming */
+	{0x2E*4, CRL_REG_LEN_32BIT, 0xB8285540, 0x6C}, /* EDID programming */
+	{0x2F*4, CRL_REG_LEN_32BIT, 0xC48E2100, 0x6C}, /* EDID programming */
+	{0x30*4, CRL_REG_LEN_32BIT, 0x001E8C0A, 0x6C}, /* EDID programming */
+	{0x31*4, CRL_REG_LEN_32BIT, 0xD08A20E0, 0x6C}, /* EDID programming */
+	{0x32*4, CRL_REG_LEN_32BIT, 0x2D10103E, 0x6C}, /* EDID programming */
+	{0x33*4, CRL_REG_LEN_32BIT, 0x9600C48E, 0x6C}, /* EDID programming */
+	{0x34*4, CRL_REG_LEN_32BIT, 0x21000018, 0x6C}, /* EDID programming */
+	{0x35*4, CRL_REG_LEN_32BIT, 0x011D0072, 0x6C}, /* EDID programming */
+	{0x36*4, CRL_REG_LEN_32BIT, 0x51D01E20, 0x6C}, /* EDID programming */
+	{0x37*4, CRL_REG_LEN_32BIT, 0x6E285500, 0x6C}, /* EDID programming */
+	{0x38*4, CRL_REG_LEN_32BIT, 0xC48E2100, 0x6C}, /* EDID programming */
+	{0x39*4, CRL_REG_LEN_32BIT, 0x001E8C0A, 0x6C}, /* EDID programming */
+	{0x3A*4, CRL_REG_LEN_32BIT, 0xD08A20E0, 0x6C}, /* EDID programming */
+	{0x3B*4, CRL_REG_LEN_32BIT, 0x2D10103E, 0x6C}, /* EDID programming */
+	{0x3C*4, CRL_REG_LEN_32BIT, 0x9600138E, 0x6C}, /* EDID programming */
+	{0x3D*4, CRL_REG_LEN_32BIT, 0x21000018, 0x6C}, /* EDID programming */
+	{0x3E*4, CRL_REG_LEN_32BIT, 0x00000000, 0x6C}, /* EDID programming */
+	{0x3F*4, CRL_REG_LEN_32BIT, 0x000000CB, 0x6C}, /* EDID programming */
+
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94}, /* No MIPI frame start */
+	{0x26, CRL_REG_LEN_08BIT, 0x55, 0x94}, /* Disable sleep mode */
+	{0x27, CRL_REG_LEN_08BIT, 0x55, 0x94}, /* Disable escape mode */
+	{0x7E, CRL_REG_LEN_08BIT, 0xA0, 0x94}, /* ADI recommended setting */
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x90}, /* ADI recommended setting */
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x90}, /* ADI recommended setting */
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94}, /* ADI recommended setting */
+	{0x34, CRL_REG_LEN_08BIT, 0x55, 0x94}, /* ADI recommended setting */
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94}, /* ADI recommended setting */
+	{0xCA, CRL_REG_LEN_08BIT, 0x02, 0x94}, /* ADI recommended setting */
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94}, /* ADI recommended setting */
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94}, /* ADI recommended setting */
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* Power up DPHY */
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94}, /* ADI recommended setting */
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94}, /* ADI recommended setting */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_1080p[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x5E, 0xE0}, /* Select Resolution 1080P */
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x8B, CRL_REG_LEN_08BIT, 0x43, 0x44}, /* 1080P shift left 44 pixel */
+	{0x8C, CRL_REG_LEN_08BIT, 0xD4, 0x44}, /* 1080P shift left 44 pixel */
+	{0x8B, CRL_REG_LEN_08BIT, 0x4F, 0x44}, /* 1080P shift left 44 pixel */
+	{0x8D, CRL_REG_LEN_08BIT, 0xD4, 0x44}, /* 1080P shift left 44 pixel */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_720p[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x53, 0xE0}, /* Select Resolution 720P */
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x8B, CRL_REG_LEN_08BIT, 0x43, 0x44}, /* 720P shift left 40 pixel */
+	{0x8C, CRL_REG_LEN_08BIT, 0xD8, 0x44}, /* 720P shift left 40 pixel */
+	{0x8B, CRL_REG_LEN_08BIT, 0x4F, 0x44}, /* 720P shift left 40 pixel */
+	{0x8D, CRL_REG_LEN_08BIT, 0xD8, 0x44}, /* 720P shift left 40 pixel */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_VGA[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x88, 0xE0}, /* Select Resolution VGA */
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_1080i[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x54, 0xE0}, /* Select Resolution 1080i*/
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x8B, CRL_REG_LEN_08BIT, 0x43, 0x44}, /* 1080i shift left 44 pixel */
+	{0x8C, CRL_REG_LEN_08BIT, 0xD4, 0x44}, /* 1080i shift left 44 pixel */
+	{0x8B, CRL_REG_LEN_08BIT, 0x4F, 0x44}, /* 1080i shift left 44 pixel */
+	{0x8D, CRL_REG_LEN_08BIT, 0xD4, 0x44}, /* 1080i shift left 44 pixel */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_480i[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x40, 0xE0}, /* Select Resolution 480i */
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_576p[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x4B, 0xE0}, /* Select Resolution 576p*/
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_mode_576i[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x05, CRL_REG_LEN_08BIT, 0x41, 0xE0}, /* Select Resolution 576i*/
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* ADI recommended setting */
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0}, /* CP-Insert_AV_Code */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI recommended setting */
+
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS TRISTATED */
+	{0x10, CRL_REG_LEN_08BIT, 0xA0, 0xE0}, /* Enable 4-lane CSI Tx & Pixel Port */
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_streamon_regs[] = {
+	{0x00, CRL_REG_LEN_DELAY, 0x02, 0x00},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94}, /* Power-up CSI-TX */
+	{0x00, CRL_REG_LEN_DELAY, 0x01, 0x00},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94}, /* ADI recommended setting */
+	{0x00, CRL_REG_LEN_DELAY, 0x01, 0x00},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_streamoff_regs[] = {
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94}, /* ADI Recommended Write */
+	{0x1E, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* Reset the clock Lane */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* i2c_mipi_pll_en - 1'b0 Disable MIPI PLL */
+	{0xC1, CRL_REG_LEN_08BIT, 0x3B, 0x94},
+};
+
+static struct crl_sensor_detect_config adv7481_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0019, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+	{
+		.reg = { 0x0016, CRL_REG_LEN_16BIT, 0x0000ffff },
+		.width = 7,
+	},
+};
+
+static struct crl_pll_configuration adv7481_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	 },
+
+};
+
+static struct crl_subdev_rect_rep adv7481_1080p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_720p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_VGA_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 640,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_1080i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 540,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_480i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 240,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_576p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 576,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_576i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 288,
+	},
+};
+static struct crl_mode_rep adv7481_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_1080p_rects),
+		.sd_rects = adv7481_1080p_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(adv7481_mode_1080p),
+		.mode_regs = adv7481_mode_1080p,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_720p_rects),
+		.sd_rects = adv7481_720p_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(adv7481_mode_720p),
+		.mode_regs = adv7481_mode_720p,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_VGA_rects),
+		.sd_rects = adv7481_VGA_rects,
+		.binn_hor = 3,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(adv7481_mode_VGA),
+		.mode_regs = adv7481_mode_VGA,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_1080i_rects),
+		.sd_rects = adv7481_1080i_rects,
+		.binn_hor = 1,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 540,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(adv7481_mode_1080i),
+		.mode_regs = adv7481_mode_1080i,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_480i_rects),
+		.sd_rects = adv7481_480i_rects,
+		.binn_hor = 2,
+		.binn_vert = 4,
+		.scale_m = 1,
+		.width = 720,
+		.height = 240,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(adv7481_mode_480i),
+		.mode_regs = adv7481_mode_480i,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_576p_rects),
+		.sd_rects = adv7481_576p_rects,
+		.binn_hor = 2,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 720,
+		.height = 576,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(adv7481_mode_576p),
+		.mode_regs = adv7481_mode_576p,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_576i_rects),
+		.sd_rects = adv7481_576i_rects,
+		.binn_hor = 2,
+		.binn_vert = 3,
+		.scale_m = 1,
+		.width = 720,
+		.height = 288,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = adv7481_mode_576i,
+	},
+};
+
+static struct crl_sensor_subdev_config adv7481_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "adv7481 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "adv7481 pixel array",
+	},
+};
+
+static struct crl_sensor_limits adv7481_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1920,
+	.y_addr_max = 1080,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 1,
+	.scaler_m_max = 1,
+	.scaler_n_min = 1,
+	.scaler_n_max = 1,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 1,
+};
+
+static struct crl_csi_data_fmt adv7481_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(adv7481_mode_1080p),
+		.regs = adv7481_mode_1080p, /* default yuv422 format */
+	},
+};
+
+static struct crl_v4l2_ctrl adv7481_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity adv7481_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+	},
+};
+
+static struct crl_sensor_configuration adv7481_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(adv7481_power_items),
+	.power_entities = adv7481_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(adv7481_powerup_regset),
+	.powerup_regs = adv7481_powerup_regset,
+
+	.poweroff_regs_items = ARRAY_SIZE(adv7481_streamoff_regs),
+	.poweroff_regs = adv7481_streamoff_regs,
+
+	.id_reg_items = ARRAY_SIZE(adv7481_sensor_detect_regset),
+	.id_regs = adv7481_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(adv7481_sensor_subdevs),
+	.subdevs = adv7481_sensor_subdevs,
+
+	.sensor_limits = &adv7481_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(adv7481_pll_configurations),
+	.pll_configs = adv7481_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(adv7481_modes),
+	.modes = adv7481_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(adv7481_streamon_regs),
+	.streamon_regs = adv7481_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(adv7481_streamoff_regs),
+	.streamoff_regs = adv7481_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(adv7481_v4l2_ctrls),
+	.v4l2_ctrl_bank = adv7481_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(adv7481_crl_csi_data_fmt),
+	.csi_fmts = adv7481_crl_csi_data_fmt,
+};
+
+#endif  /* __CRLMODULE_ADV7481_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_adv7481_cvbs_configuration.h b/drivers/media/i2c/crlmodule/crl_adv7481_cvbs_configuration.h
new file mode 100644
index 000000000000..2d8b4f22edf3
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_adv7481_cvbs_configuration.h
@@ -0,0 +1,285 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation
+ *
+ * Author: Jianxu Zheng <jian.xu.zheng@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_ADV7481_CVBS_CONFIGURATION_H_
+#define __CRLMODULE_ADV7481_CVBS_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep adv7481_cvbs_powerup_regset[] = {
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/
+					SPI PINS TRISTATED */
+	{0x0F, CRL_REG_LEN_08BIT, 0x00, 0xF2}, /* Exit Power Down Mode */
+	{0x52, CRL_REG_LEN_08BIT, 0xC0, 0xF2}, /* ADI Required Write */
+	{0x00, CRL_REG_LEN_08BIT, 0x0E, 0xF2}, /* INSEL = CVBS in on Ain 1 */
+	{0x0E, CRL_REG_LEN_08BIT, 0x80, 0xF2}, /* ADI Required Write */
+	{0x9C, CRL_REG_LEN_08BIT, 0x00, 0xF2}, /* ADI Required Write */
+	{0x9C, CRL_REG_LEN_08BIT, 0xFF, 0xF2}, /* ADI Required Write */
+	{0x0E, CRL_REG_LEN_08BIT, 0x00, 0xF2}, /* ADI Required Write */
+	{0x5A, CRL_REG_LEN_08BIT, 0x90, 0xF2}, /* ADI Required Write */
+	{0x60, CRL_REG_LEN_08BIT, 0xA0, 0xF2}, /* ADI Required Write */
+	{0x00, CRL_REG_LEN_DELAY, 0x19, 0x00}, /* Delay 25*/
+	{0x60, CRL_REG_LEN_08BIT, 0xB0, 0xF2}, /* ADI Required Write */
+	{0x5F, CRL_REG_LEN_08BIT, 0xA8, 0xF2},
+	{0x0E, CRL_REG_LEN_08BIT, 0x80, 0xF2}, /* ADI Required Write */
+	{0xB6, CRL_REG_LEN_08BIT, 0x08, 0xF2}, /* ADI Required Write */
+	{0xC0, CRL_REG_LEN_08BIT, 0xA0, 0xF2}, /* ADI Required Write */
+	{0xD9, CRL_REG_LEN_08BIT, 0x44, 0xF2},
+	{0x0E, CRL_REG_LEN_08BIT, 0x40, 0xF2},
+	{0xE0, CRL_REG_LEN_08BIT, 0x01, 0xF2}, /* Fast Lock enable*/
+	{0x0E, CRL_REG_LEN_08BIT, 0x00, 0xF2}, /* ADI Required Write */
+	{0x80, CRL_REG_LEN_08BIT, 0x51, 0xF2}, /* ADI Required Write */
+	{0x81, CRL_REG_LEN_08BIT, 0x51, 0xF2}, /* ADI Required Write */
+	{0x82, CRL_REG_LEN_08BIT, 0x68, 0xF2}, /* ADI Required Write */
+	{0x03, CRL_REG_LEN_08BIT, 0x42, 0xF2}, /* Tri-S Output Drivers,
+					PwrDwn 656 pads */
+	{0x04, CRL_REG_LEN_08BIT, 0x07, 0xF2}, /* Power-up INTRQ pad,
+					& Enable SFL */
+	{0x13, CRL_REG_LEN_08BIT, 0x00, 0xF2}, /* ADI Required Write */
+	{0x17, CRL_REG_LEN_08BIT, 0x41, 0xF2}, /* Select SH1 */
+	{0x31, CRL_REG_LEN_08BIT, 0x12, 0xF2}, /* ADI Required Write */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x70, 0xE0, 0x70 },
+	 /* Enable 1-Lane MIPI Tx,
+					enable pixel output and route
+					SD through Pixel port */
+	{0x00, CRL_REG_LEN_08BIT, 0x81, 0x90}, /* Enable 1-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA1, 0x90}, /* Set Auto DPHY Timing */
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* ADI Required Write */
+	{0xD2, CRL_REG_LEN_08BIT, 0x40, 0x90}, /* ADI Required Write */
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x90}, /* ADI Required Write */
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x90}, /* ADI Required Write */
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x90}, /* ADI Required Write */
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x90}, /* i2c_dphy_pwdn - 1'b0 */
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x90}, /* ADI Required Write */
+	{0x1E, CRL_REG_LEN_08BIT, 0xC0, 0x90}, /* ADI Required Write */
+};
+
+
+static struct crl_register_write_rep adv7481_cvbs_streamon_regs[] = {
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x90}, /* ADI Required Write */
+	{0x00, CRL_REG_LEN_DELAY, 0x01, 0x00},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x90}, /* i2c_mipi_pll_en - 1'b1 */
+	{0x00, CRL_REG_LEN_DELAY, 0x02, 0x00},
+	{0x00, CRL_REG_LEN_08BIT, 0x21, 0x90}, /* Power-up CSI-TX 21 */
+	{0x00, CRL_REG_LEN_DELAY, 0x01, 0x00},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x90}, /* ADI Required Write */
+};
+
+static struct crl_register_write_rep adv7481_cvbs_streamoff_regs[] = {
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x90}, /* ADI Recommended Write */
+	{0x1E, CRL_REG_LEN_08BIT, 0x00, 0x90}, /* Reset the clock Lane */
+	{0x00, CRL_REG_LEN_08BIT, 0x81, 0x90},
+	{0xDA, CRL_REG_LEN_08BIT, 0x00, 0x90}, /* i2c_mipi_pll_en -
+					1'b0 Disable MIPI PLL */
+	{0xC1, CRL_REG_LEN_08BIT, 0x3B, 0x90},
+};
+
+
+static struct crl_pll_configuration adv7481_cvbs_pll_configurations[] = {
+	{
+		.input_clk = 286363636,
+		.op_sys_clk = 216000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 27000000,
+		.pixel_rate_pa = 27000000,
+		.csi_lanes = 1,
+	 },
+	 {
+		.input_clk = 24000000,
+		.op_sys_clk = 130000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 130000000,
+		.pixel_rate_pa = 130000000,
+		.csi_lanes = 1,
+	 },
+};
+
+static struct crl_subdev_rect_rep adv7481_cvbs_ntsc_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 720,
+		.in_rect.height = 288,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 288,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 720,
+		.in_rect.height = 288,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 240,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_cvbs_pal_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 720,
+		.in_rect.height = 288,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 288,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 720,
+		.in_rect.height = 288,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 288,
+	},
+};
+
+static struct crl_mode_rep adv7481_cvbs_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_cvbs_ntsc_rects),
+		.sd_rects = adv7481_cvbs_ntsc_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 720,
+		.height = 240,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_cvbs_pal_rects),
+		.sd_rects = adv7481_cvbs_pal_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 720,
+		.height = 288,
+	},
+};
+
+static struct crl_sensor_subdev_config adv7481_cvbs_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "adv7481-cvbs binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "adv7481-cvbs pixel array",
+	},
+};
+
+static struct crl_sensor_limits adv7481_cvbs_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 720,
+	.y_addr_max = 288,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 1,
+	.scaler_m_max = 1,
+	.scaler_n_min = 1,
+	.scaler_n_max = 1,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 1,
+};
+
+static struct crl_csi_data_fmt adv7481_cvbs_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 16,
+	},
+};
+
+static struct crl_v4l2_ctrl adv7481_cvbs_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+};
+
+static struct crl_sensor_configuration adv7481_cvbs_crl_configuration = {
+
+	/* one time initialization is done by HDMI part */
+
+	.powerup_regs_items = ARRAY_SIZE(adv7481_cvbs_powerup_regset),
+	.powerup_regs = adv7481_cvbs_powerup_regset,
+
+	.poweroff_regs_items = ARRAY_SIZE(adv7481_cvbs_streamoff_regs),
+	.poweroff_regs = adv7481_cvbs_streamoff_regs,
+
+	.subdev_items = ARRAY_SIZE(adv7481_cvbs_sensor_subdevs),
+	.subdevs = adv7481_cvbs_sensor_subdevs,
+
+	.sensor_limits = &adv7481_cvbs_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(adv7481_cvbs_pll_configurations),
+	.pll_configs = adv7481_cvbs_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(adv7481_cvbs_modes),
+	.modes = adv7481_cvbs_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(adv7481_cvbs_streamon_regs),
+	.streamon_regs = adv7481_cvbs_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(adv7481_cvbs_streamoff_regs),
+	.streamoff_regs = adv7481_cvbs_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(adv7481_cvbs_v4l2_ctrls),
+	.v4l2_ctrl_bank = adv7481_cvbs_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(adv7481_cvbs_crl_csi_data_fmt),
+	.csi_fmts = adv7481_cvbs_crl_csi_data_fmt,
+
+	.addr_len = CRL_ADDR_7BIT,
+	.i2c_mutex_in_use = true,
+};
+
+#endif  /* __CRLMODULE_ADV7481_CVBS_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_adv7481_eval_configuration.h b/drivers/media/i2c/crlmodule/crl_adv7481_eval_configuration.h
new file mode 100644
index 000000000000..c7781706d1f3
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_adv7481_eval_configuration.h
@@ -0,0 +1,577 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation
+ *
+ * Author: Jianxu Zheng <jian.xu.zheng@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_ADV7481_EVAL_CONFIGURATION_H_
+#define __CRLMODULE_ADV7481_EVAL_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+
+struct crl_ctrl_data_pair ctrl_data_lanes[] = {
+	{
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.data = 4,
+	},
+	{
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.data = 2,
+	},
+	{
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.data = 1,
+	},
+};
+
+static struct crl_pll_configuration adv7481_eval_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	 },
+	 {
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 24,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	 },
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_1080p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_720p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_VGA_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 640,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_WVGA_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 800,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_1080i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 540,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_480i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 240,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_576p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 576,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_eval_576i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 288,
+	},
+};
+static struct crl_mode_rep adv7481_eval_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_1080p_rects),
+		.sd_rects = adv7481_eval_1080p_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[0],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_720p_rects),
+		.sd_rects = adv7481_eval_720p_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[0],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_WVGA_rects),
+		.sd_rects = adv7481_eval_WVGA_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 800,
+		.height = 480,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[2],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_VGA_rects),
+		.sd_rects = adv7481_eval_VGA_rects,
+		.binn_hor = 3,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[2],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_1080i_rects),
+		.sd_rects = adv7481_eval_1080i_rects,
+		.binn_hor = 1,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 540,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[1],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_480i_rects),
+		.sd_rects = adv7481_eval_480i_rects,
+		.binn_hor = 2,
+		.binn_vert = 4,
+		.scale_m = 1,
+		.width = 720,
+		.height = 240,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[2],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_576p_rects),
+		.sd_rects = adv7481_eval_576p_rects,
+		.binn_hor = 2,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 720,
+		.height = 576,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[2],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_eval_576i_rects),
+		.sd_rects = adv7481_eval_576i_rects,
+		.binn_hor = 2,
+		.binn_vert = 3,
+		.scale_m = 1,
+		.width = 720,
+		.height = 288,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_lanes[2],
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+};
+
+static struct crl_sensor_subdev_config adv7481_eval_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "adv7481 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "adv7481 pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config adv7481b_eval_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "adv7481b binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "adv7481b pixel array",
+	},
+};
+
+static struct crl_sensor_limits adv7481_eval_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1920,
+	.y_addr_max = 1080,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 1,
+	.scaler_m_max = 1,
+	.scaler_n_min = 1,
+	.scaler_n_max = 1,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 1,
+};
+
+static struct crl_csi_data_fmt adv7481_eval_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 16,
+		.regs_items = 0,
+		.regs = NULL,
+	},
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 16,
+		.regs_items = 0,
+		.regs = NULL,
+	},
+	{
+		.code = MEDIA_BUS_FMT_RGB565_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 16,
+		.regs_items = 0,
+		.regs = NULL,
+	},
+	{
+		.code = MEDIA_BUS_FMT_RGB888_1X24,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 24,
+		.regs_items = 0,
+		.regs = NULL,
+	},
+};
+
+static struct crl_v4l2_ctrl adv7481_eval_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.name = "V4L2_CID_MIPI_LANES",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1,
+		.data.std_data.max = 4,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_sensor_configuration adv7481_eval_crl_configuration = {
+
+	.powerup_regs_items = 0,
+	.powerup_regs = NULL,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = NULL,
+
+	.id_reg_items = 0,
+	.id_regs = NULL,
+
+	.subdev_items = ARRAY_SIZE(adv7481_eval_sensor_subdevs),
+	.subdevs = adv7481_eval_sensor_subdevs,
+
+	.sensor_limits = &adv7481_eval_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(adv7481_eval_pll_configurations),
+	.pll_configs = adv7481_eval_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(adv7481_eval_modes),
+	.modes = adv7481_eval_modes,
+
+	.streamon_regs_items = 0,
+	.streamon_regs = NULL,
+
+	.streamoff_regs_items = 0,
+	.streamoff_regs = NULL,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(adv7481_eval_v4l2_ctrls),
+	.v4l2_ctrl_bank = adv7481_eval_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(adv7481_eval_crl_csi_data_fmt),
+	.csi_fmts = adv7481_eval_crl_csi_data_fmt,
+};
+
+static struct crl_sensor_configuration adv7481b_eval_crl_configuration = {
+
+	.powerup_regs_items = 0,
+	.powerup_regs = NULL,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = NULL,
+
+	.id_reg_items = 0,
+	.id_regs = NULL,
+
+	.subdev_items = ARRAY_SIZE(adv7481b_eval_sensor_subdevs),
+	.subdevs = adv7481b_eval_sensor_subdevs,
+
+	.sensor_limits = &adv7481_eval_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(adv7481_eval_pll_configurations),
+	.pll_configs = adv7481_eval_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(adv7481_eval_modes),
+	.modes = adv7481_eval_modes,
+
+	.streamon_regs_items = 0,
+	.streamon_regs = NULL,
+
+	.streamoff_regs_items = 0,
+	.streamoff_regs = NULL,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(adv7481_eval_v4l2_ctrls),
+	.v4l2_ctrl_bank = adv7481_eval_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(adv7481_eval_crl_csi_data_fmt),
+	.csi_fmts = adv7481_eval_crl_csi_data_fmt,
+};
+
+#endif  /* __CRLMODULE_ADV7481_EVAL_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.c b/drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.c
new file mode 100644
index 000000000000..d8d9c7b930a8
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.c
@@ -0,0 +1,615 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2016 - 2018 Intel Corporation
+
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+
+#include "crlmodule.h"
+#include "crlmodule-regs.h"
+
+/* Size of the mondello KSV buffer in bytes */
+#define ADV7481_KSV_BUFFER_SIZE		0x80
+/* Size of a single KSV */
+#define ADV7481_KSV_SIZE		0x05
+/* Max number of devices (MAX_MONDELO_KSV_SIZE / HDCP_KSV_SIZE */
+#define ADV7481_MAX_DEVICES		0x19
+#define ADV7481_AKSV_UPDATE_A_ST	0x08
+#define ADV7481_CABLE_DET_A_ST		0x40
+#define ADV7481_V_LOCKED_A_ST		0x02
+#define ADV7481_DE_REGEN_A_ST		0x01
+
+struct crl_adv7481_hdmi {
+	unsigned int in_hot_plug_reset;
+	int hdmi_res_width;
+	int hdmi_res_height;
+	int hdmi_res_interlaced;
+	int hdmi_cable_connected;
+	struct delayed_work work;
+	struct mutex hot_plug_reset_lock;
+	struct i2c_client *client;
+};
+
+/* ADV7481 HDCP B-status register */
+struct v4l2_adv7481_bstatus {
+	union {
+		__u8 bstatus[2];
+		struct {
+			__u8 device_count:7;
+			__u8 max_devs_exceeded:1;
+			__u8 depth:3;
+			__u8 max_cascade_exceeded:1;
+			__u8 hdmi_mode:1;
+			__u8 hdmi_reserved_2:1;
+			__u8 rsvd:2;
+		};
+	};
+};
+
+struct v4l2_adv7481_dev_info {
+	struct v4l2_adv7481_bstatus bstatus;
+	__u8 ksv[ADV7481_KSV_BUFFER_SIZE];
+};
+
+struct v4l2_adv7481_bcaps {
+	union {
+		__u8 bcaps;
+		struct {
+			__u8 fast_reauth:1;
+			__u8 features:1;
+			__u8 reserved:2;
+			__u8 fast:1;
+			__u8 ksv_fifo_ready:1;
+			__u8 repeater:1;
+			__u8 hdmi_reserved:1;
+		};
+	};
+};
+
+static int adv_i2c_write(struct i2c_client *client,
+			u16 i2c_addr,
+			u16 reg,
+			u8 val)
+{
+	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+
+	return crlmodule_write_reg(sensor, i2c_addr, reg,
+					 CRL_REG_LEN_08BIT, 0xFF, val);
+}
+
+static int adv_i2c_read(struct i2c_client *client,
+			u16 i2c_addr,
+			u16 reg,
+			u32 *val)
+{
+	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_register_read_rep read_reg;
+
+	read_reg.address = reg;
+	read_reg.len = CRL_REG_LEN_08BIT;
+	read_reg.dev_i2c_addr = i2c_addr;
+	return crlmodule_read_reg(sensor, read_reg, val);
+}
+
+/*
+ * Writes the HDCP BKSV list & status when the system acts
+ * as an HDCP 1.4 repeater
+ */
+static long adv_write_bksv(struct i2c_client *client,
+			   struct v4l2_adv7481_dev_info *dev_info)
+{
+	unsigned int k = 0;
+	int ret = 0;
+	u32 reg;
+	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+
+	dev_dbg(&client->dev, "%s: Writing ADV7481 BKSV list.\n", __func__);
+
+	/* Clear BCAPS KSV list ready */
+	ret = adv_i2c_write(client, 0x64, 0x78, 0x01);
+	if (ret) {
+		dev_err(&client->dev,
+			"%s: Error clearing BCAPS KSV list ready!\n",
+			__func__);
+		return ret;
+	}
+
+	/* KSV_LIST_READY_PORT_A KSV list not ready */
+	ret = adv_i2c_write(client, 0x64, 0x69, 0x00);
+	if (ret) {
+		dev_err(&client->dev,
+			"%s: Error clearing KSV_LIST_READY_PORT_A register!\n",
+			__func__);
+		return ret;
+	}
+
+	/* Write the BSKV list, one device at a time */
+	/* Writing the entire list in one call exceeds frame size */
+	for (k = 0; k < ADV7481_MAX_DEVICES; ++k) {
+		unsigned int j = k * ADV7481_KSV_SIZE;
+		struct crl_register_write_rep adv_ksv_cmd[] = {
+			{0x80 + j, CRL_REG_LEN_08BIT,
+				dev_info->ksv[j + 0], 0x64},
+			{0x81 + j, CRL_REG_LEN_08BIT,
+				dev_info->ksv[j + 1], 0x64},
+			{0x82 + j, CRL_REG_LEN_08BIT,
+				dev_info->ksv[j + 2], 0x64},
+			{0x83 + j, CRL_REG_LEN_08BIT,
+				dev_info->ksv[j + 3], 0x64},
+			{0x84 + j, CRL_REG_LEN_08BIT,
+				dev_info->ksv[j + 4], 0x64},
+		};
+		ret = crlmodule_write_regs(sensor, adv_ksv_cmd,
+					ARRAY_SIZE(adv_ksv_cmd));
+
+		if (ret) {
+			dev_err(&client->dev,
+				"%s: Error while writing BKSV list!\n",
+				__func__);
+			return ret;
+		}
+	}
+
+	/* Finally update the bstatus registers */
+	ret = adv_i2c_read(client, 0x64, 0x42, &reg);
+
+	if (ret) {
+		dev_err(&client->dev,
+			"%s: Error reading bstatus register!\n",
+			__func__);
+		return ret;
+	}
+
+	/* ADV recommendation: only update bits [0:11]    */
+	/* Take the lower nibble (bits [11:8]) of the input bstatus */
+	/* Take the upper nibble (bits [15:12]) of the current register */
+	dev_info->bstatus.bstatus[1] =
+		(dev_info->bstatus.bstatus[1] & 0x0F) | (reg & 0xF0);
+	{
+		struct crl_register_write_rep adv_cmd[] = {
+			{0x41, CRL_REG_LEN_08BIT,
+				dev_info->bstatus.bstatus[0], 0x64},
+			{0x42, CRL_REG_LEN_08BIT,
+				dev_info->bstatus.bstatus[1], 0x64},
+			/* KSV_LIST_READY_PORT_A */
+			{0x69, CRL_REG_LEN_08BIT, 0x01, 0x64},
+		};
+
+		ret = crlmodule_write_regs(sensor, adv_cmd,
+				ARRAY_SIZE(adv_cmd));
+	}
+
+	return ret;
+}
+
+static ssize_t adv_bcaps_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	u32 val;
+	int ret;
+	struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+	ret = adv_i2c_read(client, 0x64, 0x40, &val);
+
+	if (ret != 0)
+		return -EIO;
+
+	val = val & 0xFF;
+	*buf = val;
+	return 1;
+}
+
+/* Declares bcaps attribute that will be exposed to user space via sysfs */
+static DEVICE_ATTR(bcaps, S_IRUGO, adv_bcaps_show, NULL);
+
+/*
+ * Writes provided BKSV value from user space to chip.
+ * BKSV should be formatted as v4l2_adv7481_dev_info struct,
+ * it does basic validation and checks if provided buffer size matches
+ * size of v4l2_adv7481_dev_info struct. In case of error return EIO.
+ */
+static ssize_t adv_bksv_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf,
+			size_t count)
+{
+	int ret;
+	struct v4l2_adv7481_dev_info dev_info;
+	struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+	if (count != sizeof(struct v4l2_adv7481_dev_info))
+		return -EIO;
+
+	dev_info  = *((struct v4l2_adv7481_dev_info *) buf);
+
+	ret = adv_write_bksv(client, &dev_info);
+
+	if (ret != 0)
+		return -EIO;
+
+	return count;
+}
+
+/* Declares bksv attribute that will be exposed to user space via sysfs */
+static DEVICE_ATTR(bksv, S_IWUSR | S_IWGRP, NULL, adv_bksv_store);
+
+/*
+ * Enables HPA_MAN_VALUE_PORT_A to enable hot plug detection.
+ */
+static void adv_hpa_assert(struct work_struct *work)
+{
+
+	struct crl_adv7481_hdmi *adv7481_hdmi
+		 = container_of(work, struct crl_adv7481_hdmi, work.work);
+	struct i2c_client *client = adv7481_hdmi->client;
+
+	adv_i2c_write(client, 0x68, 0xF8, 0x01);
+	adv7481_hdmi->in_hot_plug_reset = 0;
+}
+
+/*
+ * Reauthenticates HDCP by disabling hot plug detection for 2 seconds.
+ * It can be triggered by user space by writing any value to "reauthenticate"
+ * attribute. After that time connected source will automatically ask for HDCP
+ * authentication once again. To prevent sleep, timer is used to delay enabling
+ * of hot plug by 2 seconds.
+ * In case that previous reauthentication is not completed, returns EBUSY.
+ * In case of error returns EIO.
+ */
+static ssize_t adv_reauthenticate_store(struct device *dev,
+					 struct device_attribute *attr,
+					  const char *buf, size_t count)
+{
+	int ret;
+	struct crl_adv7481_hdmi *adv7481_hdmi;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+
+	adv7481_hdmi = sensor->sensor_specific_data;
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+
+	mutex_lock(&adv7481_hdmi->hot_plug_reset_lock);
+
+	if (adv7481_hdmi->in_hot_plug_reset) {
+		mutex_unlock(&adv7481_hdmi->hot_plug_reset_lock);
+		return -EBUSY;
+	}
+
+	/* Clear BCAPS KSV list ready */
+	ret = adv_i2c_write(client, 0x64, 0x78, 0x01);
+	if (ret != 0) {
+		dev_err(&client->dev,
+		 "%s: Error clearing BCAPS KSV list ready!\n", __func__);
+		mutex_unlock(&adv7481_hdmi->hot_plug_reset_lock);
+		return -EIO;
+	}
+
+	/* KSV_LIST_READY_PORT_A KSV list not ready */
+	ret = adv_i2c_write(client, 0x64, 0x69, 0x00);
+	if (ret != 0) {
+		dev_err(&client->dev,
+		 "%s: Error clearing KSV_LIST_READY_PORT_A register!\n",
+		 __func__);
+		mutex_unlock(&adv7481_hdmi->hot_plug_reset_lock);
+		return -EIO;
+	}
+
+	ret = adv_i2c_write(client, 0x68, 0xF8, 0x00);
+
+	if (ret != 0) {
+		mutex_unlock(&adv7481_hdmi->hot_plug_reset_lock);
+		return -EIO;
+	}
+
+	adv7481_hdmi->in_hot_plug_reset = 1;
+	schedule_delayed_work(&adv7481_hdmi->work, msecs_to_jiffies(2000));
+
+	mutex_unlock(&adv7481_hdmi->hot_plug_reset_lock);
+	return count;
+}
+
+/* Declares reauthenticate attribute that will be exposed
+ * to user space via sysfs
+ */
+static DEVICE_ATTR(reauthenticate, S_IWUSR | S_IWGRP, NULL,
+			adv_reauthenticate_store);
+
+/* Dummy show to prevent WARN when registering aksv attribute */
+static ssize_t adv_aksv_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	(void) dev;
+	(void) attr;
+	(void) buf;
+
+	return -EIO;
+}
+
+/* Declares aksv attribute that will be exposed to user space via sysfs,
+  * to notify about AKSV events.
+  */
+static DEVICE_ATTR(aksv, S_IRUGO, adv_aksv_show, NULL);
+
+
+static ssize_t adv_hdmi_cable_connected_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct crl_adv7481_hdmi *adv7481_hdmi;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+	char interlaced = 'p';
+	adv7481_hdmi = sensor->sensor_specific_data;
+
+	if (adv7481_hdmi->hdmi_res_interlaced)
+		interlaced = 'i';
+
+	return snprintf(buf, PAGE_SIZE, "%dx%d%c",
+			adv7481_hdmi->hdmi_res_width,
+			 adv7481_hdmi->hdmi_res_height, interlaced);
+}
+static DEVICE_ATTR(hdmi_cable_connected, S_IRUGO,
+			adv_hdmi_cable_connected_show, NULL);
+
+static ssize_t adv_bstatus_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	u32 b0, b1;
+	int ret;
+	struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+	dev_dbg(&client->dev, "Getting bstatus\n");
+	ret = adv_i2c_read(client, 0x64, 0x41, &b0);
+	if (ret != 0) {
+		dev_err(&client->dev, "Error getting bstatus(0)\n");
+		return -EIO;
+	}
+	dev_dbg(&client->dev, "btatus(0): 0x%x\n", b0 & 0xff);
+	ret = adv_i2c_read(client, 0x64, 0x42, &b1);
+	if (ret != 0) {
+		dev_err(&client->dev, "Error getting bstatus(1)\n");
+		return -EIO;
+	}
+	dev_dbg(&client->dev, "bstatus(1): 0x%x\n", b1 & 0xff);
+	*buf = b0 & 0xff;
+	buf++;
+	*buf = b1 & 0xff;
+	return 2;
+}
+static DEVICE_ATTR(bstatus, S_IRUGO, adv_bstatus_show, NULL);
+
+irqreturn_t crl_adv7481_threaded_irq_fn(int irq, void *sensor_struct)
+{
+	struct crl_sensor *sensor = sensor_struct;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+
+	u32 interrupt_st;
+	u32 raw_value;
+	u32 temp[3];
+	int ret = 0;
+	struct crl_register_read_rep reg;
+	struct crl_adv7481_hdmi *adv7481_hdmi;
+
+	adv7481_hdmi = sensor->sensor_specific_data;
+	reg.address = 0x90;
+	reg.len = CRL_REG_LEN_08BIT;
+	reg.mask = 0xFF;
+	reg.dev_i2c_addr = 0xE0;
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+
+	if (!adv7481_hdmi)
+		return IRQ_HANDLED;
+
+	/* AKSV_UPDATE_A_ST: check interrupt status */
+	ret = adv_i2c_read(client, 0xE0, 0x90, &interrupt_st);
+
+	if (interrupt_st & 0x08 /*ADV7481_AKSV_UPDATE_A_ST*/) {
+		dev_dbg(&client->dev,
+			"%s: ADV7481 ISR: AKSV_UPDATE_A_ST: 0x%x\n",
+			__func__, interrupt_st);
+
+		/* Notify user space about AKSV event */
+		sysfs_notify(&client->dev.kobj, NULL, "aksv");
+
+		/* Clear interrupt bit */
+		ret = adv_i2c_write(client, 0xE0, 0x91, 0x08);
+	}
+
+	/*
+	 * Check interrupt status for: CABLE_DET_A_ST,
+	 * V_LOCKED_A_ST and DE_REGEN_LCK_A_ST
+	 */
+	ret = adv_i2c_read(client, 0xE0, 0x72, &interrupt_st);
+
+	/* If any of CABLE_DET_A_ST, V_LOCKED_A_ST and DE_REGEN_LCK_A_ST
+	 * interrupts was set, get updated values of CABLE_DET_RAW,
+	 * V_LOCKED_RAW and DE_REGEN_LCK_RAW
+	 */
+	if (interrupt_st) {
+		ret = adv_i2c_read(client, 0xE0, 0x71, &raw_value);
+	}
+
+	/* Check CABLE_DET_A_ST interrupt */
+	if ((interrupt_st & ADV7481_CABLE_DET_A_ST)) {
+		/* Clear interrupt bit */
+		ret = adv_i2c_write(client, 0xE0, 0x73, 0x40);
+
+		/* HDMI cable is connected */
+		if (raw_value & ADV7481_CABLE_DET_A_ST) {
+			dev_dbg(&client->dev,
+				"%s: ADV7481 ISR: HDMI cable connected\n",
+				__func__);
+			ret = adv_i2c_write(client, 0xE0, 0x10, 0xA1);
+		} else {
+			dev_dbg(&client->dev,
+				"%s: ADV7481 ISR: HDMI cable disconnected\n",
+				__func__);
+		}
+	}
+
+	/* Check V_LOCKED_A_ST interrupt */
+	if ((interrupt_st & ADV7481_V_LOCKED_A_ST)) {
+		/* Clear interrupt bit */
+		ret = adv_i2c_write(client, 0xE0, 0x73, 0x02);
+		/* Vertical sync filter has been locked,
+		  * resolution height can be read
+		  */
+		if (raw_value & ADV7481_V_LOCKED_A_ST) {
+			dev_dbg(&client->dev,
+				"%s: ADV7481 ISR: Vertical Sync Filter Locked\n",
+				__func__);
+			reg.dev_i2c_addr = 0x68; /* HDMI_RX_MAP; */
+			reg.address = 0x09;
+			adv_i2c_read(client, 0x68, 0x09, &temp[0]);
+			adv_i2c_read(client, 0x68, 0x0A, &temp[1]);
+			adv_i2c_read(client, 0x68, 0x0B, &temp[2]);
+
+			temp[0] = temp[0] & 0x1F;
+			adv7481_hdmi->hdmi_res_height =
+						 (temp[0] << 8) + temp[1];
+			if (temp[2] & 0x20) {
+				adv7481_hdmi->hdmi_res_height =
+					 adv7481_hdmi->hdmi_res_height << 1;
+				adv7481_hdmi->hdmi_res_interlaced = 1;
+			} else {
+				adv7481_hdmi->hdmi_res_interlaced = 0;
+			}
+
+			/*
+			 * If resolution width was already read,
+			 * notify user space about new resolution
+			 */
+			if (adv7481_hdmi->hdmi_res_width) {
+				sysfs_notify(&client->dev.kobj, NULL,
+					"hdmi_cable_connected");
+			}
+		} else {
+			dev_dbg(&client->dev,
+				"%s: ADV7481 ISR: Vertical Sync Filte Lost\n",
+				__func__);
+			adv7481_hdmi->hdmi_res_height = 0;
+			/* Notify user space about losing resolution */
+			if (!adv7481_hdmi->hdmi_res_width) {
+				sysfs_notify(&client->dev.kobj, NULL,
+					"hdmi_cable_connected");
+			}
+		}
+	}
+
+	/* Check DE_REGEN_A_ST interrupt */
+	if ((interrupt_st & ADV7481_DE_REGEN_A_ST)) {
+		/* Clear interrupt bit */
+		ret = adv_i2c_write(client, 0xE0, 0x73, 0x01);
+
+		/* DE regeneration has been locked,
+		  * resolution height can be read
+		  */
+		if (raw_value & ADV7481_DE_REGEN_A_ST) {
+			dev_dbg(&client->dev,
+				"%s: ADV7481 ISR: DE Regeneration Locked\n",
+				__func__);
+			reg.dev_i2c_addr = 0x68; /* HDMI_RX_MAP; */
+			reg.address = 0x07;
+			adv_i2c_read(client, 0x68, 0x07, &temp[0]);
+			adv_i2c_read(client, 0x68, 0x08, &temp[1]);
+
+			temp[0] = temp[0] & 0x1F;
+			adv7481_hdmi->hdmi_res_width = (temp[0] << 8) + temp[1];
+
+			/* If resolution height was already read back,
+			     notify user space about new resolution */
+			if (adv7481_hdmi->hdmi_res_height) {
+				sysfs_notify(&client->dev.kobj, NULL,
+				 "hdmi_cable_connected");
+			}
+		} else {
+			dev_dbg(&client->dev,
+				"%s: ADV7481 ISR: DE Regeneration Lost\n",
+				__func__);
+			adv7481_hdmi->hdmi_res_width = 0;
+			/* Notfiy user space about losing resolution */
+			if (!adv7481_hdmi->hdmi_res_height) {
+				sysfs_notify(&client->dev.kobj, NULL,
+					"hdmi_cable_connected");
+			}
+		}
+	}
+	return IRQ_HANDLED;
+}
+
+static struct attribute *adv7481_attributes[] = {
+	&dev_attr_bstatus.attr,
+	&dev_attr_hdmi_cable_connected.attr,
+	&dev_attr_aksv.attr,
+	&dev_attr_reauthenticate.attr,
+	&dev_attr_bksv.attr,
+	&dev_attr_bcaps.attr,
+	NULL
+};
+
+static const struct attribute_group adv7481_attr_group = {
+	.attrs = adv7481_attributes,
+};
+
+int adv7481_sensor_init(struct i2c_client *client)
+{
+	struct crl_adv7481_hdmi *adv7481_hdmi;
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+
+	adv7481_hdmi = devm_kzalloc(&client->dev,
+		 sizeof(*adv7481_hdmi), GFP_KERNEL);
+
+	if (!adv7481_hdmi)
+		return -ENOMEM;
+
+	sensor->sensor_specific_data = adv7481_hdmi;
+	adv7481_hdmi->client = client;
+	mutex_init(&adv7481_hdmi->hot_plug_reset_lock);
+	INIT_DELAYED_WORK(&adv7481_hdmi->work, adv_hpa_assert);
+	dev_dbg(&client->dev, "%s ADV7481_sensor_init\n", __func__);
+
+	return sysfs_create_group(&client->dev.kobj, &adv7481_attr_group);
+
+}
+
+int adv7481_sensor_cleanup(struct i2c_client *client)
+{
+	struct crl_adv7481_hdmi *adv7481_hdmi;
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+
+	adv7481_hdmi = sensor->sensor_specific_data;
+
+	/*
+	 * This can be NULL if crlmodule_registered call failed before
+	 * sensor_init call.
+	 */
+	if (!adv7481_hdmi)
+		return 0;
+
+	dev_dbg(&client->dev, "%s: ADV7481_sensor_cleanup\n", __func__);
+	cancel_delayed_work_sync(&adv7481_hdmi->work);
+
+	sysfs_remove_group(&client->dev.kobj, &adv7481_attr_group);
+	return 0;
+}
diff --git a/drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.h b/drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.h
new file mode 100644
index 000000000000..1926bf4a168f
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_adv7481_hdmi_configuration.h
@@ -0,0 +1,1025 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation */
+
+#ifndef __CRLMODULE_ADV7481_HDMI_CONFIGURATION_H_
+#define __CRLMODULE_ADV7481_HDMI_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+irqreturn_t crl_adv7481_threaded_irq_fn(int irq, void *sensor_struct);
+
+struct crl_ctrl_data_pair hdmi_ctrl_data_lanes[] = {
+	{
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.data = 4,
+	},
+	{
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.data = 2,
+	},
+	{
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.data = 1,
+	},
+};
+
+
+static struct crl_register_write_rep adv7481_hdmi_onetime_init_regset[] = {
+	{0xFF, CRL_REG_LEN_08BIT, 0xFF, 0xE0},
+	{0x00, CRL_REG_LEN_DELAY, 0x05, 0x00},
+	{0x01, CRL_REG_LEN_08BIT, 0x76, 0xE0}, /* ADI Required Write */
+	{0x05, CRL_REG_LEN_08BIT, 0x96, 0xE0}, /* Setting Vid_Std to
+					1600x1200(UXGA)@60 */
+	{0xF2, CRL_REG_LEN_08BIT, 0x01, 0xE0}, /* Enable I2C Read
+					Auto-Increment */
+	{0xF3, CRL_REG_LEN_08BIT, 0x4C, 0xE0}, /* DPLL Map Address
+					Set to 0x4C */
+	{0xF4, CRL_REG_LEN_08BIT, 0x44, 0xE0}, /* CP Map Address
+					Set to 0x44 */
+	{0xF5, CRL_REG_LEN_08BIT, 0x68, 0xE0}, /* HDMI RX Map Address
+					Set to 0x68 */
+	{0xF6, CRL_REG_LEN_08BIT, 0x6C, 0xE0}, /* EDID Map Address
+					Set to 0x6C */
+	{0xF7, CRL_REG_LEN_08BIT, 0x64, 0xE0}, /* HDMI RX Repeater Map Address
+					Set to 0x64 */
+	{0xF8, CRL_REG_LEN_08BIT, 0x62, 0xE0}, /* HDMI RX Infoframe Map Address
+					Set to 0x62 */
+	{0xF9, CRL_REG_LEN_08BIT, 0xF0, 0xE0}, /* CBUS Map Address
+					Set to 0xF0 */
+	{0xFA, CRL_REG_LEN_08BIT, 0x82, 0xE0}, /* CEC Map Address
+					Set to 0x82 */
+	{0xFB, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* SDP Main Map Address
+					Set to 0xF2 */
+	{0xFC, CRL_REG_LEN_08BIT, 0x90, 0xE0}, /* CSI-TXB Map Address
+					Set to 0x90 */
+	{0xFD, CRL_REG_LEN_08BIT, 0x94, 0xE0}, /* CSI-TXA Map Address
+					Set to 0x94 */
+	{0x00, CRL_REG_LEN_08BIT, 0x40, 0xE0}, /* Disable chip powerdown &
+					Enable HDMI Rx block */
+
+	{0x40, CRL_REG_LEN_08BIT, 0xC3, 0x64}, /* Enable HDCP 1.1 Repeater */
+	{0x69, CRL_REG_LEN_08BIT, 0x00, 0x64}, /* KSV List not ready port A */
+	{0x77, CRL_REG_LEN_08BIT, 0x08, 0x64}, /* Clear KSV List */
+	{0x78, CRL_REG_LEN_08BIT, 0x01, 0x64}, /* KSV_LIST_READY_CLR_A:
+					Clears the BCAPS ready bit */
+	{0x68, CRL_REG_LEN_08BIT, 0x00, 0x64}, /* Disable dual ksv list
+					for port A */
+	{0x41, CRL_REG_LEN_08BIT, 0x00, 0x64}, /* Reset b-status (1) */
+	{0x42, CRL_REG_LEN_08BIT, 0x00, 0x64}, /* Reset b-status (2) */
+	{0x91, CRL_REG_LEN_08BIT, 0x08, 0xE0}, /* AKSV Update Clear */
+
+	{0x00, CRL_REG_LEN_08BIT, 0x08, 0x68}, /* Foreground Channel = A */
+	{0x98, CRL_REG_LEN_08BIT, 0xFF, 0x68}, /* ADI Required Write */
+	{0x99, CRL_REG_LEN_08BIT, 0xA3, 0x68}, /* ADI Required Write */
+	{0x9A, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* ADI Required Write */
+	{0x9B, CRL_REG_LEN_08BIT, 0x0A, 0x68}, /* ADI Required Write */
+	{0x9D, CRL_REG_LEN_08BIT, 0x40, 0x68}, /* ADI Required Write */
+	{0xCB, CRL_REG_LEN_08BIT, 0x09, 0x68}, /* ADI Required Write */
+	{0x3D, CRL_REG_LEN_08BIT, 0x10, 0x68}, /* ADI Required Write */
+	{0x3E, CRL_REG_LEN_08BIT, 0x7B, 0x68}, /* ADI Required Write */
+	{0x3F, CRL_REG_LEN_08BIT, 0x5E, 0x68}, /* ADI Required Write */
+	{0x4E, CRL_REG_LEN_08BIT, 0xFE, 0x68}, /* ADI Required Write */
+	{0x4F, CRL_REG_LEN_08BIT, 0x18, 0x68}, /* ADI Required Write */
+	{0x57, CRL_REG_LEN_08BIT, 0xA3, 0x68}, /* ADI Required Write */
+	{0x58, CRL_REG_LEN_08BIT, 0x04, 0x68}, /* ADI Required Write */
+	{0x85, CRL_REG_LEN_08BIT, 0x10, 0x68}, /* ADI Required Write */
+	{0x83, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* Enable All Terminatio ns */
+	{0xA3, CRL_REG_LEN_08BIT, 0x01, 0x68}, /* ADI Required Write */
+	{0xBE, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* ADI Required Write */
+	{0x6C, CRL_REG_LEN_08BIT, 0x01, 0x68}, /* HPA Manual Enable */
+	{0xF8, CRL_REG_LEN_08BIT, 0x01, 0x68}, /* HPA Asserted */
+	{0x0F, CRL_REG_LEN_08BIT, 0x00, 0x68}, /* Audio Mute Speed
+					Set to Fastest (Smallest Step Size) */
+	{0x0E, CRL_REG_LEN_08BIT, 0xFF, 0xE0}, /* LLC/PIX/AUD/SPI PINS
+					TRISTATED */
+
+	{0x74, CRL_REG_LEN_08BIT, 0x43, 0xE0}, /* Enable interrupts */
+	{0x75, CRL_REG_LEN_08BIT, 0x43, 0xE0},
+
+	{0x70, CRL_REG_LEN_08BIT, 0xA0, 0x64}, /* Write primary edid size */
+	{0x74, CRL_REG_LEN_08BIT, 0x01, 0x64}, /* Enable manual edid */
+	{0x7A, CRL_REG_LEN_08BIT, 0x00, 0x64}, /* Write edid sram select */
+	{0xF6, CRL_REG_LEN_08BIT, 0x6C, 0xE0}, /* Write edid map bus address */
+
+	{0x00*4, CRL_REG_LEN_32BIT, 0x00FFFFFF, 0x6C}, /* EDID programming */
+	{0x01*4, CRL_REG_LEN_32BIT, 0xFFFFFF00, 0x6C}, /* EDID programming */
+	{0x02*4, CRL_REG_LEN_32BIT, 0x4DD90100, 0x6C}, /* EDID programming */
+	{0x03*4, CRL_REG_LEN_32BIT, 0x00000000, 0x6C}, /* EDID programming */
+	{0x04*4, CRL_REG_LEN_32BIT, 0x00110103, 0x6C}, /* EDID programming */
+	{0x05*4, CRL_REG_LEN_32BIT, 0x80000078, 0x6C}, /* EDID programming */
+	{0x06*4, CRL_REG_LEN_32BIT, 0x0A0DC9A0, 0x6C}, /* EDID programming */
+	{0x07*4, CRL_REG_LEN_32BIT, 0x57479827, 0x6C}, /* EDID programming */
+	{0x08*4, CRL_REG_LEN_32BIT, 0x12484C00, 0x6C}, /* EDID programming */
+	{0x09*4, CRL_REG_LEN_32BIT, 0x00000101, 0x6C}, /* EDID programming */
+	{0x0A*4, CRL_REG_LEN_32BIT, 0x01010101, 0x6C}, /* EDID programming */
+	{0x0B*4, CRL_REG_LEN_32BIT, 0x01010101, 0x6C}, /* EDID programming */
+	{0x0C*4, CRL_REG_LEN_32BIT, 0x01010101, 0x6C}, /* EDID programming */
+	{0x0D*4, CRL_REG_LEN_32BIT, 0x0101011D, 0x6C}, /* EDID programming */
+	{0x0E*4, CRL_REG_LEN_32BIT, 0x80D0721C, 0x6C}, /* EDID programming */
+	{0x0F*4, CRL_REG_LEN_32BIT, 0x1620102C, 0x6C}, /* EDID programming */
+	{0x10*4, CRL_REG_LEN_32BIT, 0x2580C48E, 0x6C}, /* EDID programming */
+	{0x11*4, CRL_REG_LEN_32BIT, 0x2100009E, 0x6C}, /* EDID programming */
+	{0x12*4, CRL_REG_LEN_32BIT, 0x011D8018, 0x6C}, /* EDID programming */
+	{0x13*4, CRL_REG_LEN_32BIT, 0x711C1620, 0x6C}, /* EDID programming */
+	{0x14*4, CRL_REG_LEN_32BIT, 0x582C2500, 0x6C}, /* EDID programming */
+	{0x15*4, CRL_REG_LEN_32BIT, 0xC48E2100, 0x6C}, /* EDID programming */
+	{0x16*4, CRL_REG_LEN_32BIT, 0x009E0000, 0x6C}, /* EDID programming */
+	{0x17*4, CRL_REG_LEN_32BIT, 0x00FC0048, 0x6C}, /* EDID programming */
+	{0x18*4, CRL_REG_LEN_32BIT, 0x444D4920, 0x6C}, /* EDID programming */
+	{0x19*4, CRL_REG_LEN_32BIT, 0x4C4C430A, 0x6C}, /* EDID programming */
+	{0x1A*4, CRL_REG_LEN_32BIT, 0x20202020, 0x6C}, /* EDID programming */
+	{0x1B*4, CRL_REG_LEN_32BIT, 0x000000FD, 0x6C}, /* EDID programming */
+	{0x1C*4, CRL_REG_LEN_32BIT, 0x003B3D0F, 0x6C}, /* EDID programming */
+	{0x1D*4, CRL_REG_LEN_32BIT, 0x2D08000A, 0x6C}, /* EDID programming */
+	{0x1E*4, CRL_REG_LEN_32BIT, 0x20202020, 0x6C}, /* EDID programming */
+	{0x1F*4, CRL_REG_LEN_32BIT, 0x202001C1, 0x6C}, /* EDID programming */
+	{0x20*4, CRL_REG_LEN_32BIT, 0x02031E77, 0x6C}, /* EDID programming */
+	{0x21*4, CRL_REG_LEN_32BIT, 0x4F941305, 0x6C}, /* EDID programming */
+	{0x22*4, CRL_REG_LEN_32BIT, 0x03040201, 0x6C}, /* EDID programming */
+	{0x23*4, CRL_REG_LEN_32BIT, 0x16150706, 0x6C}, /* EDID programming */
+	{0x24*4, CRL_REG_LEN_32BIT, 0x1110121F, 0x6C}, /* EDID programming */
+	{0x25*4, CRL_REG_LEN_32BIT, 0x23090701, 0x6C}, /* EDID programming */
+	{0x26*4, CRL_REG_LEN_32BIT, 0x65030C00, 0x6C}, /* EDID programming */
+	{0x27*4, CRL_REG_LEN_32BIT, 0x10008C0A, 0x6C}, /* EDID programming */
+	{0x28*4, CRL_REG_LEN_32BIT, 0xD0902040, 0x6C}, /* EDID programming */
+	{0x29*4, CRL_REG_LEN_32BIT, 0x31200C40, 0x6C}, /* EDID programming */
+	{0x2A*4, CRL_REG_LEN_32BIT, 0x5500138E, 0x6C}, /* EDID programming */
+	{0x2B*4, CRL_REG_LEN_32BIT, 0x21000018, 0x6C}, /* EDID programming */
+	{0x2C*4, CRL_REG_LEN_32BIT, 0x011D00BC, 0x6C}, /* EDID programming */
+	{0x2D*4, CRL_REG_LEN_32BIT, 0x52D01E20, 0x6C}, /* EDID programming */
+	{0x2E*4, CRL_REG_LEN_32BIT, 0xB8285540, 0x6C}, /* EDID programming */
+	{0x2F*4, CRL_REG_LEN_32BIT, 0xC48E2100, 0x6C}, /* EDID programming */
+	{0x30*4, CRL_REG_LEN_32BIT, 0x001E8C0A, 0x6C}, /* EDID programming */
+	{0x31*4, CRL_REG_LEN_32BIT, 0xD08A20E0, 0x6C}, /* EDID programming */
+	{0x32*4, CRL_REG_LEN_32BIT, 0x2D10103E, 0x6C}, /* EDID programming */
+	{0x33*4, CRL_REG_LEN_32BIT, 0x9600C48E, 0x6C}, /* EDID programming */
+	{0x34*4, CRL_REG_LEN_32BIT, 0x21000018, 0x6C}, /* EDID programming */
+	{0x35*4, CRL_REG_LEN_32BIT, 0x011D0072, 0x6C}, /* EDID programming */
+	{0x36*4, CRL_REG_LEN_32BIT, 0x51D01E20, 0x6C}, /* EDID programming */
+	{0x37*4, CRL_REG_LEN_32BIT, 0x6E285500, 0x6C}, /* EDID programming */
+	{0x38*4, CRL_REG_LEN_32BIT, 0xC48E2100, 0x6C}, /* EDID programming */
+	{0x39*4, CRL_REG_LEN_32BIT, 0x001E8C0A, 0x6C}, /* EDID programming */
+	{0x3A*4, CRL_REG_LEN_32BIT, 0xD08A20E0, 0x6C}, /* EDID programming */
+	{0x3B*4, CRL_REG_LEN_32BIT, 0x2D10103E, 0x6C}, /* EDID programming */
+	{0x3C*4, CRL_REG_LEN_32BIT, 0x9600138E, 0x6C}, /* EDID programming */
+	{0x3D*4, CRL_REG_LEN_32BIT, 0x21000018, 0x6C}, /* EDID programming */
+	{0x3E*4, CRL_REG_LEN_32BIT, 0x00000000, 0x6C}, /* EDID programming */
+	{0x3F*4, CRL_REG_LEN_32BIT, 0x000000CB, 0x6C}, /* EDID programming */
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_rgb565[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x02, 0xE0}, /* RGB Out of CP */
+	{0x12, CRL_REG_LEN_08BIT, 0xF0, 0xE0}, /* CSC Depends on ip Packets - SDR 444 */
+	{0x17, CRL_REG_LEN_08BIT, 0xB8, 0xE0}, /* Luma & Chroma Values Can Reach 254d */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI Required Write */
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xDD, 0xE0},
+	/* LLC/PIX/SPI PINS TRISTATED AUD Outputs Enabled */
+	{0xDB, CRL_REG_LEN_08BIT, 0x10, 0x94}, /* ADI Required Write */
+	 /* Enable 4-lane CSI TXB & Pixel Port */
+	{0x7E, CRL_REG_LEN_08BIT, 0x98, 0x94}, /* ADI Required Write */
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_rgb888[] = {
+	{0x04, CRL_REG_LEN_08BIT, 0x02, 0xE0}, /* RGB Out of CP */
+	{0x12, CRL_REG_LEN_08BIT, 0xF0, 0xE0}, /* CSC Depends on ip Packets - SDR 444 */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* Luma & Chroma Values Can Reach 254d */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI Required Write */
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xDD, 0xE0},
+	/* LLC/PIX/SPI PINS TRISTATED AUD Outputs Enabled */
+	{0xDB, CRL_REG_LEN_08BIT, 0x10, 0x94}, /* ADI Required Write */
+	{0x7E, CRL_REG_LEN_08BIT, 0x1B, 0x94}, /* ADI Required Write */
+};
+
+
+static struct crl_register_write_rep adv7481_hdmi_mode_uyvy[] = {
+	{0x1C, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* ADI Require Write*/
+	{0x04, CRL_REG_LEN_08BIT, 0x00, 0xE0}, /* YCrCb output */
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* Luma & Chroma Values Can Reach 254d */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI Required Write */
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xDD, 0xE0}, /* LLC/PIX/SPI PINS TRISTATED AUD Outputs Enabled */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	 /* Enable 4-lane CSI TXB & Pixel Port */
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0xDB, CRL_REG_LEN_08BIT, 0x10, 0x94}, /* ADI Required Write */
+	{0x7E, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* ADI Required Write */
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_yuyv[] = {
+	{0x1C, CRL_REG_LEN_08BIT, 0x3A, 0xE0}, /* Enable Interrupt*/
+	{0x04, CRL_REG_LEN_08BIT, 0x40, 0xE0}, /* YCrCb output good=0xE0*/
+	{0x12, CRL_REG_LEN_08BIT, 0xF2, 0xE0}, /* CSC Depends on ip Packets - SDR422 set */
+	{0x17, CRL_REG_LEN_08BIT, 0x80, 0xE0}, /* Luma & Chroma Values Can Reach 254d */
+	{0x7C, CRL_REG_LEN_08BIT, 0x00, 0x44}, /* ADI Required Write */
+	{0x3E, CRL_REG_LEN_08BIT, 0x08, 0x44}, /* Invert order of Cb and Cr*/
+	{0x0C, CRL_REG_LEN_08BIT, 0xE0, 0xE0}, /* Enable LLC_DLL & Double LLC Timing */
+	{0x0E, CRL_REG_LEN_08BIT, 0xDD, 0xE0}, /* LLC/PIX/SPI PINS TRISTATED AUD Outputs Enabled */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	 /* Enable 4-lane CSI TXB & Pixel Port */
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0xDB, CRL_REG_LEN_08BIT, 0x10, 0x94}, /* ADI Required Write */
+	{0x7E, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* ADI Required Write */
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_1080p[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x5E, 0xE0},
+	{0x8B, CRL_REG_LEN_08BIT, 0x43, 0x44}, /* shift 44 pixel to right */
+	{0x8C, CRL_REG_LEN_08BIT, 0xD4, 0x44},
+	{0x8B, CRL_REG_LEN_08BIT, 0x4F, 0x44},
+	{0x8D, CRL_REG_LEN_08BIT, 0xD4, 0x44},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_1080i[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x54, 0xE0},
+	{0x8B, CRL_REG_LEN_08BIT, 0x43, 0x44}, /* shift 44 pixel to right */
+	{0x8C, CRL_REG_LEN_08BIT, 0xD4, 0x44},
+	{0x8B, CRL_REG_LEN_08BIT, 0x4F, 0x44},
+	{0x8D, CRL_REG_LEN_08BIT, 0xD4, 0x44},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_480p[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x4A, 0xE0},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_720p[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x53, 0xE0},
+	{0x8B, CRL_REG_LEN_08BIT, 0x43, 0x44}, /* shift 40 pixel to right */
+	{0x8C, CRL_REG_LEN_08BIT, 0xD8, 0x44},
+	{0x8B, CRL_REG_LEN_08BIT, 0x4F, 0x44},
+	{0x8D, CRL_REG_LEN_08BIT, 0xD8, 0x44},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_576p[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x4B, 0xE0},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_576i[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x81, 0x94}, /* Enable 1-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA1, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x21, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x41, 0xE0},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_480i[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x81, 0x94}, /* Enable 1-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA1, 0x94}, /* Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x21, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x40, 0xE0},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_mode_vga[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /*  Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /*  Set Auto DPHY Timing */
+	{0x10, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0xA0, 0xE0, 0xA0},
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94},
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94},
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94},
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94},
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94},
+	{0x1E, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94},
+	{0x00, CRL_REG_LEN_08BIT, 0x24, 0x94},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94},
+	{0xC9, CRL_REG_LEN_08BIT, 0x2D, 0x44},
+	{0x05, CRL_REG_LEN_08BIT, 0x88, 0xE0},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_powerup_regset[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x84, 0x94}, /* Enable 4-lane MIPI */
+	{0x00, CRL_REG_LEN_08BIT, 0xA4, 0x94}, /* Set Auto DPHY Timing */
+	{0xDB, CRL_REG_LEN_08BIT, 0x10, 0x94}, /* ADI Required Write */
+	{0xD6, CRL_REG_LEN_08BIT, 0x07, 0x94}, /* ADI Required Write */
+	{0xC4, CRL_REG_LEN_08BIT, 0x0A, 0x94}, /* ADI Required Write */
+	{0x71, CRL_REG_LEN_08BIT, 0x33, 0x94}, /* ADI Required Write */
+	{0x72, CRL_REG_LEN_08BIT, 0x11, 0x94}, /* ADI Required Write */
+	{0xF0, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* i2c_dphy_pwdn - 1'b0 */
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94}, /* ADI Required Write */
+	{0x1E, CRL_REG_LEN_08BIT, 0xC0, 0x94},
+	/* ADI Required Write, transmit only Frame Start/End packets */
+	{0xDA, CRL_REG_LEN_08BIT, 0x01, 0x94}, /* i2c_mipi_pll_en - 1'b1 */
+};
+
+static struct crl_register_write_rep adv7481_hdmi_streamon_regs[] = {
+	{0x00, CRL_REG_LEN_DELAY, 0x02, 0x00},
+	{0x00, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x21, 0x94, 0xF8},
+	/* Power-up CSI-TX */
+	{0x00, CRL_REG_LEN_DELAY, 0x01, 0x00},
+	{0xC1, CRL_REG_LEN_08BIT, 0x2B, 0x94}, /* ADI recommended setting */
+	{0x00, CRL_REG_LEN_DELAY, 0x01, 0x00},
+	{0x31, CRL_REG_LEN_08BIT, 0x80, 0x94}, /* ADI recommended setting */
+};
+
+static struct crl_register_write_rep adv7481_hdmi_streamoff_regs[] = {
+	{0x31, CRL_REG_LEN_08BIT, 0x82, 0x94}, /* ADI Recommended Write */
+	{0x1E, CRL_REG_LEN_08BIT, 0x00, 0x94}, /* Reset the clock Lane */
+	{0x00, CRL_REG_LEN_08BIT, 0xA1, 0x94},
+	{0xDA, CRL_REG_LEN_08BIT, 0x00, 0x94},
+	/* i2c_mipi_pll_en -1'b0 Disable MIPI PLL */
+	{0xC1, CRL_REG_LEN_08BIT, 0x3B, 0x94},
+};
+
+static struct crl_pll_configuration adv7481_hdmi_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 297000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 594000000,
+		.pixel_rate_pa = 594000000,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 445500000,
+		.bitsperpixel = 24,
+		.pixel_rate_csi = 891000000,
+		.pixel_rate_pa = 891000000,
+	},
+	/* 28.636 input clock */
+	{
+		.input_clk = 286363636,
+		.op_sys_clk = 297000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 148500000,
+		.pixel_rate_pa = 297000000,
+	},
+	{
+		.input_clk = 286363636,
+		.op_sys_clk = 297000000,
+		.bitsperpixel = 24,
+		.pixel_rate_csi = 148500000,
+		.pixel_rate_pa = 297000000,
+	},
+	{
+		.input_clk = 286363636,
+		.op_sys_clk = 148500000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 74250000,
+		.pixel_rate_pa = 148500000,
+		.csi_lanes = 4,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_1080p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_720p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_VGA_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 640,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_1080i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 540,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_480p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_480i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 240,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_576p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 576,
+	},
+};
+
+static struct crl_subdev_rect_rep adv7481_hdmi_576i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 720,
+		.out_rect.height = 288,
+	},
+};
+static struct crl_mode_rep adv7481_hdmi_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_1080p_rects),
+		.sd_rects = adv7481_hdmi_1080p_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_1080p),
+		.mode_regs = adv7481_hdmi_mode_1080p,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[0],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_720p_rects),
+		.sd_rects = adv7481_hdmi_720p_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_720p),
+		.mode_regs = adv7481_hdmi_mode_720p,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[0],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_VGA_rects),
+		.sd_rects = adv7481_hdmi_VGA_rects,
+		.binn_hor = 3,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_vga),
+		.mode_regs = adv7481_hdmi_mode_vga,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[0],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_1080i_rects),
+		.sd_rects = adv7481_hdmi_1080i_rects,
+		.binn_hor = 1,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 540,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_1080i),
+		.mode_regs = adv7481_hdmi_mode_1080i,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[0],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_480p_rects),
+		.sd_rects = adv7481_hdmi_480p_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 720,
+		.height = 480,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_480p),
+		.mode_regs = adv7481_hdmi_mode_480p,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[0],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_480i_rects),
+		.sd_rects = adv7481_hdmi_480i_rects,
+		.binn_hor = 2,
+		.binn_vert = 4,
+		.scale_m = 1,
+		.width = 720,
+		.height = 240,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_480i),
+		.mode_regs = adv7481_hdmi_mode_480i,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[2],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_576p_rects),
+		.sd_rects = adv7481_hdmi_576p_rects,
+		.binn_hor = 2,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 720,
+		.height = 576,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_576p),
+		.mode_regs = adv7481_hdmi_mode_576p,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[0],
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(adv7481_hdmi_576i_rects),
+		.sd_rects = adv7481_hdmi_576i_rects,
+		.binn_hor = 2,
+		.binn_vert = 3,
+		.scale_m = 1,
+		.width = 720,
+		.height = 288,
+		.mode_regs_items = ARRAY_SIZE(adv7481_hdmi_mode_576i),
+		.mode_regs = adv7481_hdmi_mode_576i,
+		.comp_items = 1,
+		.ctrl_data = &hdmi_ctrl_data_lanes[2],
+	},
+};
+
+static struct crl_sensor_subdev_config adv7481_hdmi_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "adv7481-hdmi binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "adv7481-hdmi pixel array",
+	},
+};
+
+static struct crl_sensor_limits adv7481_hdmi_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1920,
+	.y_addr_max = 1080,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 1,
+	.scaler_m_max = 1,
+	.scaler_n_min = 1,
+	.scaler_n_max = 1,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 1,
+};
+
+static struct crl_csi_data_fmt adv7481_hdmi_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_RGB565_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(adv7481_hdmi_mode_rgb565),
+		.regs = adv7481_hdmi_mode_rgb565,
+	},
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(adv7481_hdmi_mode_uyvy),
+		.regs = adv7481_hdmi_mode_uyvy,
+	},
+	{
+		.code = MEDIA_BUS_FMT_RGB888_1X24,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 24,
+		.regs_items = ARRAY_SIZE(adv7481_hdmi_mode_rgb888),
+		.regs = adv7481_hdmi_mode_rgb888,
+	},
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(adv7481_hdmi_mode_yuyv),
+		.regs = adv7481_hdmi_mode_yuyv,
+	},
+};
+
+static const char * const adv7481_hdmi_test_pattern_menu[] = {
+	"default",
+	"30fps",
+	"50fps",
+	"60fps",
+	"real",
+};
+
+static struct crl_register_write_rep adv7481_hdmi_test_pattern_default_mode[] = {
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0},
+	{0x37, CRL_REG_LEN_08BIT, 0x81, 0x44},
+	{0x00, CRL_REG_LEN_08BIT, 0x00, 0xE0},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_test_pattern_30fps_mode[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x00, 0xE0},
+	{0x03, CRL_REG_LEN_08BIT, 0xA6, 0xE0},
+	{0x04, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x80, 0xE0, 0xFD},
+	{0x37, CRL_REG_LEN_08BIT, 0x85, 0x44},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_test_pattern_50fps_mode[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x00, 0xE0},
+	{0x03, CRL_REG_LEN_08BIT, 0x96, 0xE0},
+	{0x04, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x80, 0xE0, 0xFD},
+	{0x37, CRL_REG_LEN_08BIT, 0x85, 0x44},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_test_pattern_60fps_mode[] = {
+	{0x00, CRL_REG_LEN_08BIT, 0x00, 0xE0},
+	{0x03, CRL_REG_LEN_08BIT, 0x86, 0xE0},
+	{0x04, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x80, 0xE0, 0xFD},
+	{0x37, CRL_REG_LEN_08BIT, 0x85, 0x44},
+};
+
+static struct crl_register_write_rep adv7481_hdmi_real_mode[] = {
+	{0x00, CRL_REG_LEN_DELAY, 0x05, 0x00},
+	{0x03, CRL_REG_LEN_08BIT, 0x00, 0xE0},
+	{0x04, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x00, 0xE0, 0xFD},
+	{0x37, CRL_REG_LEN_08BIT, 0x00, 0x44},
+};
+
+static struct crl_dep_reg_list adv7481_hdmi_test_pattern_fps_types_regs[] = {
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+		{ CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 0 },
+		ARRAY_SIZE(adv7481_hdmi_test_pattern_default_mode),
+		adv7481_hdmi_test_pattern_default_mode, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+		{ CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 1 },
+		ARRAY_SIZE(adv7481_hdmi_test_pattern_30fps_mode),
+		adv7481_hdmi_test_pattern_30fps_mode, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+		{ CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 2 },
+		ARRAY_SIZE(adv7481_hdmi_test_pattern_50fps_mode),
+		adv7481_hdmi_test_pattern_50fps_mode, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+		{ CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 3 },
+		ARRAY_SIZE(adv7481_hdmi_test_pattern_60fps_mode),
+		adv7481_hdmi_test_pattern_60fps_mode, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+		{ CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 4 },
+		ARRAY_SIZE(adv7481_hdmi_real_mode),
+		adv7481_hdmi_real_mode, 0, 0 },
+};
+
+static struct crl_v4l2_ctrl adv7481_hdmi_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_MIPI_LANES,
+		.name = "V4L2_CID_MIPI_LANES",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1,
+		.data.std_data.max = 4,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_TEST_PATTERN,
+		.name = "V4L2_CID_TEST_PATTERN",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+		.data.v4l2_menu_items.menu = adv7481_hdmi_test_pattern_menu,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(adv7481_hdmi_test_pattern_menu),
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.crl_ctrl_dep_reg_list = ARRAY_SIZE(adv7481_hdmi_test_pattern_fps_types_regs),
+		.dep_regs = adv7481_hdmi_test_pattern_fps_types_regs,
+	},
+};
+
+int adv7481_sensor_init(struct i2c_client *);
+int adv7481_sensor_cleanup(struct i2c_client *);
+
+static struct crl_sensor_configuration adv7481_hdmi_crl_configuration = {
+
+	.sensor_init = adv7481_sensor_init,
+	.sensor_cleanup = adv7481_sensor_cleanup,
+
+	.onetime_init_regs_items =
+		ARRAY_SIZE(adv7481_hdmi_onetime_init_regset),
+	.onetime_init_regs = adv7481_hdmi_onetime_init_regset,
+
+	.powerup_regs_items = ARRAY_SIZE(adv7481_hdmi_powerup_regset),
+	.powerup_regs = adv7481_hdmi_powerup_regset,
+
+	.poweroff_regs_items = ARRAY_SIZE(adv7481_hdmi_streamoff_regs),
+	.poweroff_regs = adv7481_hdmi_streamoff_regs,
+
+	.subdev_items = ARRAY_SIZE(adv7481_hdmi_sensor_subdevs),
+	.subdevs = adv7481_hdmi_sensor_subdevs,
+
+	.sensor_limits = &adv7481_hdmi_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(adv7481_hdmi_pll_configurations),
+	.pll_configs = adv7481_hdmi_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(adv7481_hdmi_modes),
+	.modes = adv7481_hdmi_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(adv7481_hdmi_streamon_regs),
+	.streamon_regs = adv7481_hdmi_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(adv7481_hdmi_streamoff_regs),
+	.streamoff_regs = adv7481_hdmi_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(adv7481_hdmi_v4l2_ctrls),
+	.v4l2_ctrl_bank = adv7481_hdmi_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(adv7481_hdmi_crl_csi_data_fmt),
+	.csi_fmts = adv7481_hdmi_crl_csi_data_fmt,
+
+	.irq_in_use = true,
+	.crl_irq_fn = NULL,
+	.crl_threaded_irq_fn = crl_adv7481_threaded_irq_fn,
+
+	.addr_len = CRL_ADDR_7BIT,
+	.i2c_mutex_in_use = true,
+};
+
+#endif  /* __CRLMODULE_ADV7481_HDMI_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h b/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h
new file mode 100644
index 000000000000..1905a9e05192
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ar0231at_configuration.h
@@ -0,0 +1,2409 @@
+/*
+ * Copyright (c) 2018 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __CRLMODULE_AR0231AT_CONFIGURATION_H_
+#define __CRLMODULE_AR0231AT_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+struct crl_pll_configuration ar0231at_pll_configurations[] = {
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 87750000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 176000000,
+		.pixel_rate_pa = 176000000, /* pixel_rate = op_sys_clk*2 *csi_lanes/bitsperpixel */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 87750000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 211200000,
+		.pixel_rate_pa = 211200000, /* pixel_rate = op_sys_clk*2 *csi_lanes/bitsperpixel */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+};
+
+struct crl_sensor_subdev_config ar0231at_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ar0231at binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ar0231at pixel array",
+	},
+};
+
+struct crl_subdev_rect_rep ar0231at_1920_1088_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1088,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1088,
+	}
+};
+
+/*
+ * Exposure mode:
+ *   0: Linear mode
+ *   1: 2-HDR mode
+ *   2: 3-HDR mode
+ *   3: 4-HDR mode
+ */
+struct crl_ctrl_data_pair ar0231at_ctrl_data_modes[] = {
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 0,
+	},
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 1,
+	},
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 2,
+	},
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 3,
+	},
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 4,
+	},
+};
+
+static struct crl_register_write_rep ar0231at_1920_1088_10bit_linear_mode[] = {
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x1058, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x3092, CRL_REG_LEN_16BIT, 0x0C24, 0x10 },
+	{ 0x337A, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3520, CRL_REG_LEN_16BIT, 0x1288, 0x10 },
+	{ 0x3522, CRL_REG_LEN_16BIT, 0x880C, 0x10 },
+	{ 0x3524, CRL_REG_LEN_16BIT, 0x0C12, 0x10 },
+	{ 0x352C, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x354A, CRL_REG_LEN_16BIT, 0x007F, 0x10 },
+	{ 0x350C, CRL_REG_LEN_16BIT, 0x055C, 0x10 },
+	{ 0x3506, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3508, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3100, CRL_REG_LEN_16BIT, 0x4000, 0x10 },
+	{ 0x3280, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3282, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3284, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3286, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3288, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3290, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3292, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3294, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3296, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3298, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x2512, CRL_REG_LEN_16BIT, 0x8000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3350, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1578, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7B24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xEA24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1022, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2410, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x155A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24EA, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2324, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x647A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2404, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x052C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x400A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3851, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0801, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0408, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1180, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2652, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1518, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0906, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1348, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1002, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1016, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1181, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1189, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0D09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1413, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2B15, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0311, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1409, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0110, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDD11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x9B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0F11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1A12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xE609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x290B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0904, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0923, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x092C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1388, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C14, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1112, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBF11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB10, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xB812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xA012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3053, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8111, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x010D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0815, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1313, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0515, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0213, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0411, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0814, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD908, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x091A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0903, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10D6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11D9, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0917, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0913, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x121A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1250, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1076, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10E6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1240, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0925, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13AD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0902, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0907, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x138D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0914, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B13, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1C0C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0920, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1262, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1066, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x090A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x093B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1263, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1508, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11B8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x12A0, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1200, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1026, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1300, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1100, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x437A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B05, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0708, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4137, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x502C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2CFE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15FE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C2C, 0x10 },
+	{ 0x32E6, CRL_REG_LEN_16BIT, 0x00E0, 0x10 },
+	{ 0x1008, CRL_REG_LEN_16BIT, 0x036F, 0x10 },
+	{ 0x100C, CRL_REG_LEN_16BIT, 0x058F, 0x10 },
+	{ 0x100E, CRL_REG_LEN_16BIT, 0x07AF, 0x10 },
+	{ 0x1010, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x3230, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x3232, CRL_REG_LEN_16BIT, 0x0532, 0x10 },
+	{ 0x3234, CRL_REG_LEN_16BIT, 0x0752, 0x10 },
+	{ 0x3236, CRL_REG_LEN_16BIT, 0x00F2, 0x10 },
+	{ 0x3566, CRL_REG_LEN_16BIT, 0x3328, 0x10 },
+	{ 0x32D0, CRL_REG_LEN_16BIT, 0x3A02, 0x10 },
+	{ 0x32D2, CRL_REG_LEN_16BIT, 0x3508, 0x10 },
+	{ 0x32D4, CRL_REG_LEN_16BIT, 0x3702, 0x10 },
+	{ 0x32D6, CRL_REG_LEN_16BIT, 0x3C04, 0x10 },
+	{ 0x32DC, CRL_REG_LEN_16BIT, 0x370A, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x302A, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x302C, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x302E, CRL_REG_LEN_16BIT, 0x0003, 0x10 },
+	{ 0x3030, CRL_REG_LEN_16BIT, 0x004E, 0x10 },
+	{ 0x3036, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3038, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x30A2, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30A6, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3180, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E4, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3004, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x3008, CRL_REG_LEN_16BIT, 0x0783, 0x10 },
+	{ 0x3002, CRL_REG_LEN_16BIT, 0x003C, 0x10 },
+	{ 0x3006, CRL_REG_LEN_16BIT, 0x047B, 0x10 },
+	{ 0x3032, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0F10, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x0970, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F1, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F0, 0x10 },
+	{ 0x300C, CRL_REG_LEN_16BIT, 0x0872, 0x10 },
+	{ 0x300A, CRL_REG_LEN_16BIT, 0x054A, 0x10 },
+	{ 0x3042, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3012, CRL_REG_LEN_16BIT, 0x0163, 0x10 },
+	{ 0x3014, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C08, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x31D0, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AC, CRL_REG_LEN_16BIT, 0x0C0A, 0x10 },
+	/* try sync mode */
+	{ 0x340A, CRL_REG_LEN_16BIT, 0x0077, 0x10 },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x30CE, CRL_REG_LEN_16BIT, 0x0120, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x19DC, 0x10 },
+	{ 0x3370, CRL_REG_LEN_16BIT, 0x0231, 0x10 },
+};
+
+static struct crl_register_write_rep ar0231at_1920_1088_linear_mode[] = {
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x1058, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x3092, CRL_REG_LEN_16BIT, 0x0C24, 0x10 },
+	{ 0x337A, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3520, CRL_REG_LEN_16BIT, 0x1288, 0x10 },
+	{ 0x3522, CRL_REG_LEN_16BIT, 0x880C, 0x10 },
+	{ 0x3524, CRL_REG_LEN_16BIT, 0x0C12, 0x10 },
+	{ 0x352C, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x354A, CRL_REG_LEN_16BIT, 0x007F, 0x10 },
+	{ 0x350C, CRL_REG_LEN_16BIT, 0x055C, 0x10 },
+	{ 0x3506, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3508, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3100, CRL_REG_LEN_16BIT, 0x4000, 0x10 },
+	{ 0x3280, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3282, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3284, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3286, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3288, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3290, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3292, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3294, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3296, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3298, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x2512, CRL_REG_LEN_16BIT, 0x8000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3350, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1578, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7B24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xEA24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1022, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2410, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x155A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24EA, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2324, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x647A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2404, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x052C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x400A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3851, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0801, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0408, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1180, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2652, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1518, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0906, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1348, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1002, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1016, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1181, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1189, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0D09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1413, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2B15, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0311, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1409, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0110, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDD11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x9B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0F11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1A12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xE609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x290B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0904, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0923, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x092C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1388, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C14, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1112, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBF11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB10, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xB812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xA012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3053, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8111, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x010D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0815, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1313, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0515, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0213, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0411, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0814, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD908, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x091A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0903, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10D6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11D9, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0917, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0913, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x121A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1250, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1076, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10E6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1240, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0925, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13AD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0902, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0907, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x138D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0914, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B13, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1C0C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0920, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1262, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1066, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x090A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x093B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1263, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1508, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11B8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x12A0, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1200, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1026, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1300, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1100, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x437A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B05, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0708, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4137, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x502C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2CFE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15FE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C2C, 0x10 },
+	{ 0x32E6, CRL_REG_LEN_16BIT, 0x00E0, 0x10 },
+	{ 0x1008, CRL_REG_LEN_16BIT, 0x036F, 0x10 },
+	{ 0x100C, CRL_REG_LEN_16BIT, 0x058F, 0x10 },
+	{ 0x100E, CRL_REG_LEN_16BIT, 0x07AF, 0x10 },
+	{ 0x1010, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x3230, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x3232, CRL_REG_LEN_16BIT, 0x0532, 0x10 },
+	{ 0x3234, CRL_REG_LEN_16BIT, 0x0752, 0x10 },
+	{ 0x3236, CRL_REG_LEN_16BIT, 0x00F2, 0x10 },
+	{ 0x3566, CRL_REG_LEN_16BIT, 0x3328, 0x10 },
+	{ 0x32D0, CRL_REG_LEN_16BIT, 0x3A02, 0x10 },
+	{ 0x32D2, CRL_REG_LEN_16BIT, 0x3508, 0x10 },
+	{ 0x32D4, CRL_REG_LEN_16BIT, 0x3702, 0x10 },
+	{ 0x32D6, CRL_REG_LEN_16BIT, 0x3C04, 0x10 },
+	{ 0x32DC, CRL_REG_LEN_16BIT, 0x370A, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x302A, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x302C, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x302E, CRL_REG_LEN_16BIT, 0x0003, 0x10 },
+	{ 0x3030, CRL_REG_LEN_16BIT, 0x004E, 0x10 },
+	{ 0x3036, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3038, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x30A2, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30A6, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3180, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E4, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3004, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x3008, CRL_REG_LEN_16BIT, 0x0783, 0x10 },
+	{ 0x3002, CRL_REG_LEN_16BIT, 0x003C, 0x10 },
+	{ 0x3006, CRL_REG_LEN_16BIT, 0x047B, 0x10 },
+	{ 0x3032, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0F10, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x0970, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F1, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F0, 0x10 },
+	{ 0x300C, CRL_REG_LEN_16BIT, 0x0872, 0x10 },
+	{ 0x300A, CRL_REG_LEN_16BIT, 0x054A, 0x10 },
+	{ 0x3042, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3012, CRL_REG_LEN_16BIT, 0x0163, 0x10 },
+	{ 0x3014, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C08, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x31D0, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AC, CRL_REG_LEN_16BIT, 0x0C0C, 0x10 },
+	/* try sync mode */
+	{ 0x340A, CRL_REG_LEN_16BIT, 0x0077, 0x10 },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x30CE, CRL_REG_LEN_16BIT, 0x0120, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x19DC, 0x10 },
+	{ 0x3370, CRL_REG_LEN_16BIT, 0x0231, 0x10 },
+};
+
+static struct crl_register_write_rep ar0231at_1920_1088_2hdr_mode[] = {
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 100, 0x10 },
+	{ 0x3092, CRL_REG_LEN_16BIT, 0x0C24, 0x10 },
+	{ 0x337A, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3520, CRL_REG_LEN_16BIT, 0x1288, 0x10 },
+	{ 0x3522, CRL_REG_LEN_16BIT, 0x880C, 0x10 },
+	{ 0x3524, CRL_REG_LEN_16BIT, 0x0C12, 0x10 },
+	{ 0x352C, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x354A, CRL_REG_LEN_16BIT, 0x007F, 0x10 },
+	{ 0x350C, CRL_REG_LEN_16BIT, 0x055C, 0x10 },
+	{ 0x3506, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3508, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3100, CRL_REG_LEN_16BIT, 0x4000, 0x10 },
+	{ 0x3280, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3282, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3284, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3286, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3288, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3290, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3292, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3294, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3296, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3298, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x2512, CRL_REG_LEN_16BIT, 0x8000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3350, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1578, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7B24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xEA24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1022, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2410, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x155A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24EA, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2324, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x647A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2404, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x052C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x400A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3851, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0801, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0408, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1180, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2652, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1518, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0906, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1348, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1002, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1016, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1181, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1189, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0D09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1413, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2B15, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0311, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1409, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0110, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDD11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x9B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0F11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1A12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xE609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x290B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0904, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0923, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x092C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1388, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C14, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1112, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBF11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB10, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xB812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xA012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3053, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8111, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x010D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0815, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1313, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0515, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0213, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0411, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0814, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD908, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x091A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0903, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10D6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11D9, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0917, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0913, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x121A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1250, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1076, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10E6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1240, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0925, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13AD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0902, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0907, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x138D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0914, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B13, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1C0C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0920, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1262, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1066, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x090A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x093B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1263, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1508, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11B8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x12A0, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1200, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1026, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1300, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1100, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x437A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B05, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0708, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4137, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x502C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2CFE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15FE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C2C, 0x10 },
+	{ 0x32E6, CRL_REG_LEN_16BIT, 0x00E0, 0x10 },
+	{ 0x1008, CRL_REG_LEN_16BIT, 0x036F, 0x10 },
+	{ 0x100C, CRL_REG_LEN_16BIT, 0x058F, 0x10 },
+	{ 0x100E, CRL_REG_LEN_16BIT, 0x07AF, 0x10 },
+	{ 0x1010, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x3230, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x3232, CRL_REG_LEN_16BIT, 0x0532, 0x10 },
+	{ 0x3234, CRL_REG_LEN_16BIT, 0x0752, 0x10 },
+	{ 0x3236, CRL_REG_LEN_16BIT, 0x00F2, 0x10 },
+	{ 0x3566, CRL_REG_LEN_16BIT, 0x3328, 0x10 },
+	{ 0x32D0, CRL_REG_LEN_16BIT, 0x3A02, 0x10 },
+	{ 0x32D2, CRL_REG_LEN_16BIT, 0x3508, 0x10 },
+	{ 0x32D4, CRL_REG_LEN_16BIT, 0x3702, 0x10 },
+	{ 0x32D6, CRL_REG_LEN_16BIT, 0x3C04, 0x10 },
+	{ 0x32DC, CRL_REG_LEN_16BIT, 0x370A, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x302A, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x302C, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x302E, CRL_REG_LEN_16BIT, 0x0003, 0x10 },
+	{ 0x3030, CRL_REG_LEN_16BIT, 0x004E, 0x10 },
+	{ 0x3036, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3038, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x30A2, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30A6, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F1, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x33C0, CRL_REG_LEN_16BIT, 0x2000, 0x10 },
+	{ 0x33C2, CRL_REG_LEN_16BIT, 0x3440, 0x10 },
+	{ 0x33C4, CRL_REG_LEN_16BIT, 0x4890, 0x10 },
+	{ 0x33C6, CRL_REG_LEN_16BIT, 0x5CE0, 0x10 },
+	{ 0x33C8, CRL_REG_LEN_16BIT, 0x7140, 0x10 },
+	{ 0x33CA, CRL_REG_LEN_16BIT, 0x8590, 0x10 },
+	{ 0x33CC, CRL_REG_LEN_16BIT, 0x99E0, 0x10 },
+	{ 0x33CE, CRL_REG_LEN_16BIT, 0xAE40, 0x10 },
+	{ 0x33D0, CRL_REG_LEN_16BIT, 0xC290, 0x10 },
+	{ 0x33D2, CRL_REG_LEN_16BIT, 0xD6F0, 0x10 },
+	{ 0x33D4, CRL_REG_LEN_16BIT, 0xEB40, 0x10 },
+	{ 0x33D6, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x33DA, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3180, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E4, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3004, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x3008, CRL_REG_LEN_16BIT, 0x0783, 0x10 },
+	{ 0x3002, CRL_REG_LEN_16BIT, 0x003C, 0x10 },
+	{ 0x3006, CRL_REG_LEN_16BIT, 0x047B, 0x10 },
+	{ 0x3032, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0788, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0F10, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x04B8, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x0970, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F1, 0x10 },
+	{ 0x300C, CRL_REG_LEN_16BIT, 0x0872, 0x10 },
+	{ 0x300A, CRL_REG_LEN_16BIT, 0x054A, 0x10 },
+	{ 0x3042, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3012, CRL_REG_LEN_16BIT, 0x0163, 0x10 },
+	{ 0x3014, CRL_REG_LEN_16BIT, 0x0882, 0x10 },
+	{ 0x321E, CRL_REG_LEN_16BIT, 0x0882, 0x10 },
+	{ 0x3222, CRL_REG_LEN_16BIT, 0x0882, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x31D0, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0201, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AC, CRL_REG_LEN_16BIT, 0x140C, 0x10 },
+	{ 0x340A, CRL_REG_LEN_16BIT, 0x0077, 0x10 },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x30CE, CRL_REG_LEN_16BIT, 0x0120, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x19DC, 0x10 },
+	{ 0x3370, CRL_REG_LEN_16BIT, 0x0231, 0x10 },
+};
+
+static struct crl_register_write_rep ar0231at_1920_1088_3hdr_mode[] = {
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 100, 0x10 },
+	{ 0x3092, CRL_REG_LEN_16BIT, 0x0C24, 0x10 },
+	{ 0x337A, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3520, CRL_REG_LEN_16BIT, 0x1288, 0x10 },
+	{ 0x3522, CRL_REG_LEN_16BIT, 0x880C, 0x10 },
+	{ 0x3524, CRL_REG_LEN_16BIT, 0x0C12, 0x10 },
+	{ 0x352C, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x354A, CRL_REG_LEN_16BIT, 0x007F, 0x10 },
+	{ 0x350C, CRL_REG_LEN_16BIT, 0x055C, 0x10 },
+	{ 0x3506, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3508, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3100, CRL_REG_LEN_16BIT, 0x4000, 0x10 },
+	{ 0x3280, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3282, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3284, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3286, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3288, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3290, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3292, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3294, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3296, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3298, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x2512, CRL_REG_LEN_16BIT, 0x8000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3350, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1578, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7B24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xEA24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1022, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2410, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x155A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24EA, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2324, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x647A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2404, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x052C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x400A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3851, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0801, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0408, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1180, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2652, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1518, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0906, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1348, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1002, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1016, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1181, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1189, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0D09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1413, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2B15, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0311, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1409, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0110, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDD11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x9B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0F11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1A12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xE609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x290B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0904, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0923, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x092C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1388, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C14, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1112, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBF11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB10, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xB812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xA012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3053, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8111, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x010D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0815, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1313, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0515, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0213, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0411, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0814, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD908, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x091A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0903, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10D6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11D9, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0917, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0913, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x121A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1250, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1076, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10E6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1240, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0925, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13AD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0902, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0907, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x138D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0914, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B13, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1C0C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0920, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1262, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1066, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x090A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x093B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1263, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1508, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11B8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x12A0, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1200, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1026, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1300, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1100, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x437A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B05, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0708, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4137, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x502C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2CFE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15FE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C2C, 0x10 },
+	{ 0x32E6, CRL_REG_LEN_16BIT, 0x00E0, 0x10 },
+	{ 0x1008, CRL_REG_LEN_16BIT, 0x036F, 0x10 },
+	{ 0x100C, CRL_REG_LEN_16BIT, 0x058F, 0x10 },
+	{ 0x100E, CRL_REG_LEN_16BIT, 0x07AF, 0x10 },
+	{ 0x1010, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x3230, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x3232, CRL_REG_LEN_16BIT, 0x0532, 0x10 },
+	{ 0x3234, CRL_REG_LEN_16BIT, 0x0752, 0x10 },
+	{ 0x3236, CRL_REG_LEN_16BIT, 0x00F2, 0x10 },
+	{ 0x3566, CRL_REG_LEN_16BIT, 0x3328, 0x10 },
+	{ 0x32D0, CRL_REG_LEN_16BIT, 0x3A02, 0x10 },
+	{ 0x32D2, CRL_REG_LEN_16BIT, 0x3508, 0x10 },
+	{ 0x32D4, CRL_REG_LEN_16BIT, 0x3702, 0x10 },
+	{ 0x32D6, CRL_REG_LEN_16BIT, 0x3C04, 0x10 },
+	{ 0x32DC, CRL_REG_LEN_16BIT, 0x370A, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x302A, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x302C, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x302E, CRL_REG_LEN_16BIT, 0x0003, 0x10 },
+	{ 0x3030, CRL_REG_LEN_16BIT, 0x004E, 0x10 },
+	{ 0x3036, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3038, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x30A2, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30A6, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x33C0, CRL_REG_LEN_16BIT, 0x2000, 0x10 },
+	{ 0x33C2, CRL_REG_LEN_16BIT, 0x3440, 0x10 },
+	{ 0x33C4, CRL_REG_LEN_16BIT, 0x4890, 0x10 },
+	{ 0x33C6, CRL_REG_LEN_16BIT, 0x5CE0, 0x10 },
+	{ 0x33C8, CRL_REG_LEN_16BIT, 0x7140, 0x10 },
+	{ 0x33CA, CRL_REG_LEN_16BIT, 0x8590, 0x10 },
+	{ 0x33CC, CRL_REG_LEN_16BIT, 0x99E0, 0x10 },
+	{ 0x33CE, CRL_REG_LEN_16BIT, 0xAE40, 0x10 },
+	{ 0x33D0, CRL_REG_LEN_16BIT, 0xC290, 0x10 },
+	{ 0x33D2, CRL_REG_LEN_16BIT, 0xD6F0, 0x10 },
+	{ 0x33D4, CRL_REG_LEN_16BIT, 0xEB40, 0x10 },
+	{ 0x33D6, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x33DA, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3180, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E4, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3004, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x3008, CRL_REG_LEN_16BIT, 0x0783, 0x10 },
+	{ 0x3002, CRL_REG_LEN_16BIT, 0x003C, 0x10 },
+	{ 0x3006, CRL_REG_LEN_16BIT, 0x047B, 0x10 },
+	{ 0x3032, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0788, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0F10, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x04B8, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x0970, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x300C, CRL_REG_LEN_16BIT, 0x0872, 0x10 },
+	{ 0x300A, CRL_REG_LEN_16BIT, 0x054A, 0x10 },
+	{ 0x3042, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3012, CRL_REG_LEN_16BIT, 0x0163, 0x10 },
+	{ 0x3014, CRL_REG_LEN_16BIT, 0x0882, 0x10 },
+	{ 0x321E, CRL_REG_LEN_16BIT, 0x0882, 0x10 },
+	{ 0x3222, CRL_REG_LEN_16BIT, 0x0882, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x31D0, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0201, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AC, CRL_REG_LEN_16BIT, 0x140C, 0x10 },
+	{ 0x340A, CRL_REG_LEN_16BIT, 0x0077, 0x10 },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x30CE, CRL_REG_LEN_16BIT, 0x0120, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x19DC, 0x10 },
+	{ 0x3370, CRL_REG_LEN_16BIT, 0x0231, 0x10 },
+};
+
+static struct crl_register_write_rep ar0231at_1920_1088_4hdr_mode[] = {
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 100, 0x10 },
+	{ 0x3092, CRL_REG_LEN_16BIT, 0x0C24, 0x10 },
+	{ 0x337A, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3520, CRL_REG_LEN_16BIT, 0x1288, 0x10 },
+	{ 0x3522, CRL_REG_LEN_16BIT, 0x880C, 0x10 },
+	{ 0x3524, CRL_REG_LEN_16BIT, 0x0C12, 0x10 },
+	{ 0x352C, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x354A, CRL_REG_LEN_16BIT, 0x007F, 0x10 },
+	{ 0x350C, CRL_REG_LEN_16BIT, 0x055C, 0x10 },
+	{ 0x3506, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3508, CRL_REG_LEN_16BIT, 0x3333, 0x10 },
+	{ 0x3100, CRL_REG_LEN_16BIT, 0x4000, 0x10 },
+	{ 0x3280, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3282, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3284, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3286, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3288, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x328E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3290, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3292, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3294, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3296, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x3298, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329A, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329C, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x329E, CRL_REG_LEN_16BIT, 0x0FA0, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x10D8, 0x10 },
+	{ 0x0000, CRL_REG_LEN_DELAY, 200, 0x10 },
+	{ 0x2512, CRL_REG_LEN_16BIT, 0x8000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3350, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1578, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7B24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xEA24, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1022, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2410, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x155A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24FF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x24EA, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2324, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x647A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2404, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x052C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x400A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFF0A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3851, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0801, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0408, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1180, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2652, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1518, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0906, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1348, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1002, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1016, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1181, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1189, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0D09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1413, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2B15, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0311, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1409, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0110, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDD11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xDB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x9B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0F11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1A12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x7610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xE609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x290B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0904, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0923, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13C8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x092C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1388, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C14, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1112, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBF11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB10, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xFB09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3511, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xBB12, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6312, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x6014, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xB812, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xA012, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2610, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0011, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x3053, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4010, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1611, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8111, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8910, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5612, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x010D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0815, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD013, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x5009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1313, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0215, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC015, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0515, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8813, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0213, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0411, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xC909, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0814, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0109, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B11, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0xD908, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x091A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1440, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0903, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1214, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10D6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1212, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11D9, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1056, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0917, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11DB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0913, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0905, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x121A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1210, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1460, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1250, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1076, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x10E6, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13A8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1240, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0925, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x13AD, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0902, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0907, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1588, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0901, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x138D, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B09, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0914, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4009, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B13, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x8809, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1C0C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0920, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1262, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BF, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1066, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x090A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11FB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x093B, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11BB, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1263, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1260, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1400, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1508, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x11B8, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x12A0, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1200, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1026, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1000, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1300, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x1100, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x437A, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0609, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0B05, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0708, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x4137, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x502C, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x2CFE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x15FE, 0x10 },
+	{ 0x2510, CRL_REG_LEN_16BIT, 0x0C2C, 0x10 },
+	{ 0x32E6, CRL_REG_LEN_16BIT, 0x00E0, 0x10 },
+	{ 0x1008, CRL_REG_LEN_16BIT, 0x036F, 0x10 },
+	{ 0x100C, CRL_REG_LEN_16BIT, 0x058F, 0x10 },
+	{ 0x100E, CRL_REG_LEN_16BIT, 0x07AF, 0x10 },
+	{ 0x1010, CRL_REG_LEN_16BIT, 0x014F, 0x10 },
+	{ 0x3230, CRL_REG_LEN_16BIT, 0x0312, 0x10 },
+	{ 0x3232, CRL_REG_LEN_16BIT, 0x0532, 0x10 },
+	{ 0x3234, CRL_REG_LEN_16BIT, 0x0752, 0x10 },
+	{ 0x3236, CRL_REG_LEN_16BIT, 0x00F2, 0x10 },
+	{ 0x3566, CRL_REG_LEN_16BIT, 0x3328, 0x10 },
+	{ 0x32D0, CRL_REG_LEN_16BIT, 0x3A02, 0x10 },
+	{ 0x32D2, CRL_REG_LEN_16BIT, 0x3508, 0x10 },
+	{ 0x32D4, CRL_REG_LEN_16BIT, 0x3702, 0x10 },
+	{ 0x32D6, CRL_REG_LEN_16BIT, 0x3C04, 0x10 },
+	{ 0x32DC, CRL_REG_LEN_16BIT, 0x370A, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x302A, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x302C, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x302E, CRL_REG_LEN_16BIT, 0x0003, 0x10 },
+	{ 0x3030, CRL_REG_LEN_16BIT, 0x004E, 0x10 },
+	{ 0x3036, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3038, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x30A2, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x30A6, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3040, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x0008, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F2, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3044, CRL_REG_LEN_16BIT, 0x0400, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x3064, CRL_REG_LEN_16BIT, 0x1802, 0x10 },
+	{ 0x33C0, CRL_REG_LEN_16BIT, 0x2000, 0x10 },
+	{ 0x33C2, CRL_REG_LEN_16BIT, 0x3440, 0x10 },
+	{ 0x33C4, CRL_REG_LEN_16BIT, 0x4890, 0x10 },
+	{ 0x33C6, CRL_REG_LEN_16BIT, 0x5CE0, 0x10 },
+	{ 0x33C8, CRL_REG_LEN_16BIT, 0x7140, 0x10 },
+	{ 0x33CA, CRL_REG_LEN_16BIT, 0x8590, 0x10 },
+	{ 0x33CC, CRL_REG_LEN_16BIT, 0x99E0, 0x10 },
+	{ 0x33CE, CRL_REG_LEN_16BIT, 0xAE40, 0x10 },
+	{ 0x33D0, CRL_REG_LEN_16BIT, 0xC290, 0x10 },
+	{ 0x33D2, CRL_REG_LEN_16BIT, 0xD6F0, 0x10 },
+	{ 0x33D4, CRL_REG_LEN_16BIT, 0xEB40, 0x10 },
+	{ 0x33D6, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x33DA, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3180, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E4, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x33E0, CRL_REG_LEN_16BIT, 0x0C80, 0x10 },
+	{ 0x3004, CRL_REG_LEN_16BIT, 0x0004, 0x10 },
+	{ 0x3008, CRL_REG_LEN_16BIT, 0x0783, 0x10 },
+	{ 0x3002, CRL_REG_LEN_16BIT, 0x003C, 0x10 },
+	{ 0x3006, CRL_REG_LEN_16BIT, 0x047B, 0x10 },
+	{ 0x3032, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0010, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0788, 0x10 },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x0F10, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x04B8, 0x10 },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x0970, 0x10 },
+	{ 0x3082, CRL_REG_LEN_16BIT, 0x000C, 0x10 },
+	{ 0x30BA, CRL_REG_LEN_16BIT, 0x11F3, 0x10 },
+	{ 0x300C, CRL_REG_LEN_16BIT, 0x09B8, 0x10 },
+	{ 0x300A, CRL_REG_LEN_16BIT, 0x0498, 0x10 },
+	{ 0x3042, CRL_REG_LEN_16BIT, 0x0000, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3238, CRL_REG_LEN_16BIT, 0x0222, 0x10 },
+	{ 0x3012, CRL_REG_LEN_16BIT, 0x0131, 0x10 },
+	{ 0x3014, CRL_REG_LEN_16BIT, 0x098E, 0x10 },
+	{ 0x321E, CRL_REG_LEN_16BIT, 0x098E, 0x10 },
+	{ 0x3222, CRL_REG_LEN_16BIT, 0x098E, 0x10 },
+	{ 0x3226, CRL_REG_LEN_16BIT, 0x098E, 0x10 },
+	{ 0x30B0, CRL_REG_LEN_16BIT, 0x0800, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EA, CRL_REG_LEN_16BIT, 0x3C0E, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x32EC, CRL_REG_LEN_16BIT, 0x72A1, 0x10 },
+	{ 0x31D0, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0201, 0x10 },
+	{ 0x31AE, CRL_REG_LEN_16BIT, 0x0001, 0x10 },
+	{ 0x31AC, CRL_REG_LEN_16BIT, 0x140C, 0x10 },
+	{ 0x340A, CRL_REG_LEN_16BIT, 0x0077, 0x10 },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x0080, 0x10 },
+	{ 0x30CE, CRL_REG_LEN_16BIT, 0x0120, 0x10 },
+	{ 0x301A, CRL_REG_LEN_16BIT, 0x19DC, 0x10 },
+	{ 0x3370, CRL_REG_LEN_16BIT, 0x0231, 0x10 },
+};
+
+struct crl_mode_rep ar0231at_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ar0231at_1920_1088_rects),
+		.sd_rects = ar0231at_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 2162,
+		.min_fll = 1354,
+		.comp_items = 1,
+		.ctrl_data = &ar0231at_ctrl_data_modes[0],
+		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_linear_mode),
+		.mode_regs = ar0231at_1920_1088_linear_mode,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ar0231at_1920_1088_rects),
+		.sd_rects = ar0231at_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 1978,
+		.min_fll = 1480,
+		.comp_items = 1,
+		.ctrl_data = &ar0231at_ctrl_data_modes[1],
+		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_2hdr_mode),
+		.mode_regs = ar0231at_1920_1088_2hdr_mode,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ar0231at_1920_1088_rects),
+		.sd_rects = ar0231at_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 1978,
+		.min_fll = 1480,
+		.comp_items = 1,
+		.ctrl_data = &ar0231at_ctrl_data_modes[2],
+		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_3hdr_mode),
+		.mode_regs = ar0231at_1920_1088_3hdr_mode,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ar0231at_1920_1088_rects),
+		.sd_rects = ar0231at_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 2246,
+		.min_fll = 1304,
+		.comp_items = 1,
+		.ctrl_data = &ar0231at_ctrl_data_modes[3],
+		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_4hdr_mode),
+		.mode_regs = ar0231at_1920_1088_4hdr_mode,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ar0231at_1920_1088_rects),
+		.sd_rects = ar0231at_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 2162,
+		.min_fll = 1354,
+		.comp_items = 1,
+		.ctrl_data = &ar0231at_ctrl_data_modes[4],
+		.mode_regs_items = ARRAY_SIZE(ar0231at_1920_1088_10bit_linear_mode),
+		.mode_regs = ar0231at_1920_1088_10bit_linear_mode,
+	},
+};
+
+struct crl_csi_data_fmt ar0231at_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+};
+
+static struct crl_arithmetic_ops ar0231at_ls2_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	}
+};
+
+/* Line length pixel */
+static struct crl_dynamic_register_access ar0231at_llp_regs[] = {
+	{
+		.address = 0x300C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* Frame length lines */
+static struct crl_dynamic_register_access ar0231at_fll_regs[] = {
+	{
+		.address = 0x300A,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* Analog gain register, also used in linear(non-HDR) mode */
+static struct crl_dynamic_register_access ar0231at_ana_gain_regs[] = {
+	{
+		.address = 0x3366, /* analog gain */
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* Digital gain register */
+static struct crl_dynamic_register_access ar0231at_gl_regs[] = {
+	{
+		.address = 0x305E, /* global digital gain */
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x07ff,
+	},
+};
+
+/*
+ * Exposure mode:
+ * 0: Linear mode
+ * 1: 2-HDR mode
+ * 2: 3-HDR mode
+ * 3: 4-HDR mode
+ */
+static struct crl_dynamic_register_access ar0231at_exposure_mode_regs[] = {
+	{
+		.address = 0x3082,
+		.len = CRL_REG_LEN_16BIT  | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ar0231at_ls2_ops),
+		.ops = ar0231at_ls2_ops,
+		.mask = 0x000C,
+	},
+};
+
+/*
+ * Exposure Ratio in HDR mode
+ * 0x8000:
+ *   Select exposure ratio mode or
+ *   configure exposure time for each x-HDR individually.
+ * 0x0222:
+ *   Selected exposure ratio mode and each ratio is 4x.
+ *   The ratio also can be 2x, 8x, 16x
+ */
+static struct crl_dynamic_register_access ar0231at_hdr_exposure_ratio_regs[] = {
+	{
+		.address = 0x3238,
+		.len = CRL_REG_LEN_16BIT  | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x8777,
+	},
+};
+
+/* t1 exposure register, also used in linear(non-HDR) mode */
+static struct crl_dynamic_register_access ar0231at_t1expotime_regs[] = {
+	{
+		.address = 0x3012, /* coarse integration time T1 */
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* t2 exposure register, only used in HDR mode */
+static struct crl_dynamic_register_access ar0231at_t2expotime_regs[] = {
+	{
+		.address = 0x3212, /* coarse integration time T2 */
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* t3 exposure register, only used in HDR mode */
+static struct crl_dynamic_register_access ar0231at_t3expotime_regs[] = {
+	{
+		.address = 0x3216, /* coarse integration time T3 */
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* t4 exposure register, only used in HDR mode */
+static struct crl_dynamic_register_access ar0231at_t4expotime_regs[] = {
+	{
+		.address = 0x321A, /* coarse integration time T4 */
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access ar0231at_test_pattern_regs[] = {
+	{
+		.address = 0x3070,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static const char * const ar0231at_test_patterns[] = {
+	"Disabled",
+	"Solid Color",
+	"100% Vertical Color Bar",
+};
+
+struct crl_v4l2_ctrl ar0231at_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1920,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1978,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_llp_regs),
+		.regs = ar0231at_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1088,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1480,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_fll_regs),
+		.regs = ar0231at_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0x0000,
+		.data.std_data.max = 0xFFFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0xAAAA,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_ana_gain_regs),
+		.regs = ar0231at_ana_gain_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0x0080,
+		.data.std_data.max = 0x07FF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0080,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_gl_regs),
+		.regs = ar0231at_gl_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.name = "CRL_CID_EXPOSURE_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = ARRAY_SIZE(ar0231at_ctrl_data_modes)-1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_exposure_mode_regs),
+		.regs = ar0231at_exposure_mode_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_HDR_RATIO,
+		.name = "CRL_CID_EXPOSURE_HDR_RATIO",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0222,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_hdr_exposure_ratio_regs),
+		.regs = ar0231at_hdr_exposure_ratio_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "T1_COARSE_EXPOSURE_TIME",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0x0002,
+		.data.std_data.max = 0x04FF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0163,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_t1expotime_regs),
+		.regs = ar0231at_t1expotime_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.name = "T2_COARSE_EXPOSURE_TIME",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x0002,
+		.data.std_data.max = 0x0300,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0002,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_t2expotime_regs),
+		.regs = ar0231at_t2expotime_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS2,
+		.name = "T3_COARSE_EXPOSURE_TIME",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x0002,
+		.data.std_data.max = 0x0180,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0002,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_t3expotime_regs),
+		.regs = ar0231at_t3expotime_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS3,
+		.name = "T4_COARSE_EXPOSURE_TIME",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x0,
+		.data.std_data.max = 0x0500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_t4expotime_regs),
+		.regs = ar0231at_t4expotime_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_TEST_PATTERN,
+		.name = "V4L2_CID_TEST_PATTERN",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+		.data.v4l2_menu_items.menu = ar0231at_test_patterns,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(ar0231at_test_patterns)-1,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_test_pattern_regs),
+		.regs = ar0231at_test_pattern_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+struct crl_sensor_detect_config ar0231at_sensor_detect_regset[] = {
+	{
+		.reg = { 0x3000, CRL_REG_LEN_16BIT, 0xFFFF },
+		.width = 15,
+	},
+};
+
+static struct crl_sensor_limits ar0231at_maxim_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1920,
+	.y_addr_max = 1088,
+	.min_frame_length_lines = 240,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 320,
+	.max_line_length_pixels = 32752,
+};
+
+struct crl_sensor_configuration ar0231at_crl_configuration = {
+	.powerup_regs_items = 0,
+	.powerup_regs = 0,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.power_items = 0,
+	.power_entities = 0,
+
+	.pll_config_items = ARRAY_SIZE(ar0231at_pll_configurations),
+	.pll_configs = ar0231at_pll_configurations,
+
+	.id_reg_items = ARRAY_SIZE(ar0231at_sensor_detect_regset),
+	.id_regs = ar0231at_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ar0231at_sensor_subdevs),
+	.subdevs = ar0231at_sensor_subdevs,
+
+	.modes_items = ARRAY_SIZE(ar0231at_modes),
+	.modes = ar0231at_modes,
+
+	.csi_fmts_items = ARRAY_SIZE(ar0231at_crl_csi_data_fmt),
+	.csi_fmts = ar0231at_crl_csi_data_fmt,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ar0231at_v4l2_ctrls),
+	.v4l2_ctrl_bank = ar0231at_v4l2_ctrls,
+
+	.streamon_regs_items = 0,
+	.streamon_regs = 0,
+	.streamoff_regs_items = 0,
+	.streamoff_regs = 0,
+
+	.sensor_limits = &ar0231at_maxim_sensor_limits,
+
+};
+
+#endif /* __CRLMODULE_AR0231AT_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ar023z_configuration.h b/drivers/media/i2c/crlmodule/crl_ar023z_configuration.h
new file mode 100644
index 000000000000..2bd2b0f06b18
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ar023z_configuration.h
@@ -0,0 +1,1903 @@
+/*
+ * Copyright (c) 2018 Intel Corporation.
+ *
+ * Author: Alexei Zavjalov <alexei.zavjalov@intel.com>
+ * Author: Kiran Kumar <kiran2.kumar@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __CRLMODULE_AR023Z_CONFIGURATION_H_
+#define __CRLMODULE_AR023Z_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define TC358778_I2C_ADDRESS 0x0E /* Toshiba TC358778 Parallel-MIPI Bridge */
+#define AR023Z_I2C_ADDRESS   0x48 /* OnSemi AP0202AT ISP */
+
+static struct crl_register_write_rep ar023z_1920_1080[] = {
+	{ 0x0004, CRL_REG_LEN_16BIT, 0x0004, TC358778_I2C_ADDRESS },
+	{ 0x0002, CRL_REG_LEN_16BIT, 0x0001, TC358778_I2C_ADDRESS },
+	{ 0x0002, CRL_REG_LEN_16BIT, 0x0000, TC358778_I2C_ADDRESS },
+	{ 0x0016, CRL_REG_LEN_16BIT, 0x50cd, TC358778_I2C_ADDRESS },
+	{ 0x0018, CRL_REG_LEN_16BIT, 0x0213, TC358778_I2C_ADDRESS },
+
+	{ 0x0006, CRL_REG_LEN_16BIT, 0x0040, TC358778_I2C_ADDRESS },
+	{ 0x0008, CRL_REG_LEN_16BIT, 0x0060, TC358778_I2C_ADDRESS },
+	{ 0x0022, CRL_REG_LEN_16BIT, 0x0F00, TC358778_I2C_ADDRESS },
+
+	{ 0x0140, CRL_REG_LEN_32BIT, 0x00000000, TC358778_I2C_ADDRESS },
+	{ 0x0144, CRL_REG_LEN_32BIT, 0x00000000, TC358778_I2C_ADDRESS },
+	{ 0x0148, CRL_REG_LEN_32BIT, 0x00000000, TC358778_I2C_ADDRESS },
+	{ 0x014C, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS },
+	{ 0x0150, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS },
+
+	{ 0x0210, CRL_REG_LEN_32BIT, 0x21000000, TC358778_I2C_ADDRESS },
+	{ 0x0214, CRL_REG_LEN_32BIT, 0x00040000, TC358778_I2C_ADDRESS },
+	{ 0x0218, CRL_REG_LEN_32BIT, 0x17050000, TC358778_I2C_ADDRESS },
+	{ 0x021C, CRL_REG_LEN_32BIT, 0x00020000, TC358778_I2C_ADDRESS },
+	{ 0x0220, CRL_REG_LEN_32BIT, 0x0a070000, TC358778_I2C_ADDRESS },
+	{ 0x0224, CRL_REG_LEN_32BIT, 0x41880000, TC358778_I2C_ADDRESS },
+	{ 0x0228, CRL_REG_LEN_32BIT, 0x00080000, TC358778_I2C_ADDRESS },
+	{ 0x022C, CRL_REG_LEN_32BIT, 0x00020000, TC358778_I2C_ADDRESS },
+	{ 0x0234, CRL_REG_LEN_32BIT, 0x00070000, TC358778_I2C_ADDRESS },
+	{ 0x0238, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS },
+	{ 0x0204, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS },
+
+	{ 0x0518, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS },
+	{ 0x0500, CRL_REG_LEN_32BIT, 0x80A3A300, TC358778_I2C_ADDRESS },
+
+	{ 0x0004, CRL_REG_LEN_16BIT, 0x0245, TC358778_I2C_ADDRESS },
+
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x098E, CRL_REG_LEN_16BIT, 0x7C00, AR023Z_I2C_ADDRESS },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0054, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8706, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0982, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0x098A, CRL_REG_LEN_16BIT, 0x4750, AR023Z_I2C_ADDRESS },
+	{ 0xC750, CRL_REG_LEN_16BIT, 0xC0F1, AR023Z_I2C_ADDRESS },
+	{ 0xC752, CRL_REG_LEN_16BIT, 0x0CEA, AR023Z_I2C_ADDRESS },
+	{ 0xC754, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC756, CRL_REG_LEN_16BIT, 0x75CF, AR023Z_I2C_ADDRESS },
+	{ 0xC758, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC75A, CRL_REG_LEN_16BIT, 0xA1A8, AR023Z_I2C_ADDRESS },
+	{ 0xC75C, CRL_REG_LEN_16BIT, 0x8DC4, AR023Z_I2C_ADDRESS },
+	{ 0xC75E, CRL_REG_LEN_16BIT, 0x0E0B, AR023Z_I2C_ADDRESS },
+	{ 0xC760, CRL_REG_LEN_16BIT, 0x10D1, AR023Z_I2C_ADDRESS },
+	{ 0xC762, CRL_REG_LEN_16BIT, 0xD804, AR023Z_I2C_ADDRESS },
+	{ 0xC764, CRL_REG_LEN_16BIT, 0xAD04, AR023Z_I2C_ADDRESS },
+	{ 0xC766, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC768, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC76A, CRL_REG_LEN_16BIT, 0x7C06, AR023Z_I2C_ADDRESS },
+	{ 0xC76C, CRL_REG_LEN_16BIT, 0x7840, AR023Z_I2C_ADDRESS },
+	{ 0xC76E, CRL_REG_LEN_16BIT, 0x0E0F, AR023Z_I2C_ADDRESS },
+	{ 0xC770, CRL_REG_LEN_16BIT, 0x1111, AR023Z_I2C_ADDRESS },
+	{ 0xC772, CRL_REG_LEN_16BIT, 0xD800, AR023Z_I2C_ADDRESS },
+	{ 0xC774, CRL_REG_LEN_16BIT, 0x0CEE, AR023Z_I2C_ADDRESS },
+	{ 0xC776, CRL_REG_LEN_16BIT, 0x0760, AR023Z_I2C_ADDRESS },
+	{ 0xC778, CRL_REG_LEN_16BIT, 0xAD04, AR023Z_I2C_ADDRESS },
+	{ 0xC77A, CRL_REG_LEN_16BIT, 0x0531, AR023Z_I2C_ADDRESS },
+	{ 0xC77C, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC77E, CRL_REG_LEN_16BIT, 0x78E0, AR023Z_I2C_ADDRESS },
+	{ 0xC780, CRL_REG_LEN_16BIT, 0xD900, AR023Z_I2C_ADDRESS },
+	{ 0xC782, CRL_REG_LEN_16BIT, 0xF00A, AR023Z_I2C_ADDRESS },
+	{ 0xC784, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC786, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC788, CRL_REG_LEN_16BIT, 0xC79C, AR023Z_I2C_ADDRESS },
+	{ 0xC78A, CRL_REG_LEN_16BIT, 0x7835, AR023Z_I2C_ADDRESS },
+	{ 0xC78C, CRL_REG_LEN_16BIT, 0x8041, AR023Z_I2C_ADDRESS },
+	{ 0xC78E, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0xC790, CRL_REG_LEN_16BIT, 0xE102, AR023Z_I2C_ADDRESS },
+	{ 0xC792, CRL_REG_LEN_16BIT, 0xA040, AR023Z_I2C_ADDRESS },
+	{ 0xC794, CRL_REG_LEN_16BIT, 0x09F1, AR023Z_I2C_ADDRESS },
+	{ 0xC796, CRL_REG_LEN_16BIT, 0x8094, AR023Z_I2C_ADDRESS },
+	{ 0xC798, CRL_REG_LEN_16BIT, 0x7FE0, AR023Z_I2C_ADDRESS },
+	{ 0xC79A, CRL_REG_LEN_16BIT, 0xD800, AR023Z_I2C_ADDRESS },
+	{ 0xC79C, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC79E, CRL_REG_LEN_16BIT, 0xC160, AR023Z_I2C_ADDRESS },
+	{ 0xC7A0, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC7A2, CRL_REG_LEN_16BIT, 0xC750, AR023Z_I2C_ADDRESS },
+	{ 0x098E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x0030, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0140, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xA103, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x0204, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x0054, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8702, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8701, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x0054, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x01CC, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8706, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0982, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0x098A, CRL_REG_LEN_16BIT, 0x47A4, AR023Z_I2C_ADDRESS },
+	{ 0xC7A4, CRL_REG_LEN_16BIT, 0xC0F1, AR023Z_I2C_ADDRESS },
+	{ 0xC7A6, CRL_REG_LEN_16BIT, 0x0C96, AR023Z_I2C_ADDRESS },
+	{ 0xC7A8, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC7AA, CRL_REG_LEN_16BIT, 0xD900, AR023Z_I2C_ADDRESS },
+	{ 0xC7AC, CRL_REG_LEN_16BIT, 0xC1A1, AR023Z_I2C_ADDRESS },
+	{ 0xC7AE, CRL_REG_LEN_16BIT, 0x75CF, AR023Z_I2C_ADDRESS },
+	{ 0xC7B0, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC7B2, CRL_REG_LEN_16BIT, 0x82A4, AR023Z_I2C_ADDRESS },
+	{ 0xC7B4, CRL_REG_LEN_16BIT, 0x8DC0, AR023Z_I2C_ADDRESS },
+	{ 0xC7B6, CRL_REG_LEN_16BIT, 0x0BEE, AR023Z_I2C_ADDRESS },
+	{ 0xC7B8, CRL_REG_LEN_16BIT, 0x03E0, AR023Z_I2C_ADDRESS },
+	{ 0xC7BA, CRL_REG_LEN_16BIT, 0x708B, AR023Z_I2C_ADDRESS },
+	{ 0xC7BC, CRL_REG_LEN_16BIT, 0x71CF, AR023Z_I2C_ADDRESS },
+	{ 0xC7BE, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC7C0, CRL_REG_LEN_16BIT, 0x7E2A, AR023Z_I2C_ADDRESS },
+	{ 0xC7C2, CRL_REG_LEN_16BIT, 0x081B, AR023Z_I2C_ADDRESS },
+	{ 0xC7C4, CRL_REG_LEN_16BIT, 0x0051, AR023Z_I2C_ADDRESS },
+	{ 0xC7C6, CRL_REG_LEN_16BIT, 0xC020, AR023Z_I2C_ADDRESS },
+	{ 0xC7C8, CRL_REG_LEN_16BIT, 0xE080, AR023Z_I2C_ADDRESS },
+	{ 0xC7CA, CRL_REG_LEN_16BIT, 0x20CC, AR023Z_I2C_ADDRESS },
+	{ 0xC7CC, CRL_REG_LEN_16BIT, 0x8062, AR023Z_I2C_ADDRESS },
+	{ 0xC7CE, CRL_REG_LEN_16BIT, 0xF407, AR023Z_I2C_ADDRESS },
+	{ 0xC7D0, CRL_REG_LEN_16BIT, 0xD802, AR023Z_I2C_ADDRESS },
+	{ 0xC7D2, CRL_REG_LEN_16BIT, 0x7960, AR023Z_I2C_ADDRESS },
+	{ 0xC7D4, CRL_REG_LEN_16BIT, 0xAD00, AR023Z_I2C_ADDRESS },
+	{ 0xC7D6, CRL_REG_LEN_16BIT, 0xADC0, AR023Z_I2C_ADDRESS },
+	{ 0xC7D8, CRL_REG_LEN_16BIT, 0xF002, AR023Z_I2C_ADDRESS },
+	{ 0xC7DA, CRL_REG_LEN_16BIT, 0x7940, AR023Z_I2C_ADDRESS },
+	{ 0xC7DC, CRL_REG_LEN_16BIT, 0x04CD, AR023Z_I2C_ADDRESS },
+	{ 0xC7DE, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC7E0, CRL_REG_LEN_16BIT, 0xC0A1, AR023Z_I2C_ADDRESS },
+	{ 0xC7E2, CRL_REG_LEN_16BIT, 0x78E0, AR023Z_I2C_ADDRESS },
+	{ 0xC7E4, CRL_REG_LEN_16BIT, 0xC0F1, AR023Z_I2C_ADDRESS },
+	{ 0xC7E6, CRL_REG_LEN_16BIT, 0x0C4E, AR023Z_I2C_ADDRESS },
+	{ 0xC7E8, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC7EA, CRL_REG_LEN_16BIT, 0x0CE6, AR023Z_I2C_ADDRESS },
+	{ 0xC7EC, CRL_REG_LEN_16BIT, 0x03C0, AR023Z_I2C_ADDRESS },
+	{ 0xC7EE, CRL_REG_LEN_16BIT, 0x701A, AR023Z_I2C_ADDRESS },
+	{ 0xC7F0, CRL_REG_LEN_16BIT, 0x0D0A, AR023Z_I2C_ADDRESS },
+	{ 0xC7F2, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC7F4, CRL_REG_LEN_16BIT, 0x218A, AR023Z_I2C_ADDRESS },
+	{ 0xC7F6, CRL_REG_LEN_16BIT, 0x0A0F, AR023Z_I2C_ADDRESS },
+	{ 0xC7F8, CRL_REG_LEN_16BIT, 0x7708, AR023Z_I2C_ADDRESS },
+	{ 0xC7FA, CRL_REG_LEN_16BIT, 0x75CF, AR023Z_I2C_ADDRESS },
+	{ 0xC7FC, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC7FE, CRL_REG_LEN_16BIT, 0xA168, AR023Z_I2C_ADDRESS },
+	{ 0xC800, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC802, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC804, CRL_REG_LEN_16BIT, 0x8712, AR023Z_I2C_ADDRESS },
+	{ 0xC806, CRL_REG_LEN_16BIT, 0x7840, AR023Z_I2C_ADDRESS },
+	{ 0xC808, CRL_REG_LEN_16BIT, 0x1524, AR023Z_I2C_ADDRESS },
+	{ 0xC80A, CRL_REG_LEN_16BIT, 0x1080, AR023Z_I2C_ADDRESS },
+	{ 0xC80C, CRL_REG_LEN_16BIT, 0xE82D, AR023Z_I2C_ADDRESS },
+	{ 0xC80E, CRL_REG_LEN_16BIT, 0x76CF, AR023Z_I2C_ADDRESS },
+	{ 0xC810, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC812, CRL_REG_LEN_16BIT, 0xB530, AR023Z_I2C_ADDRESS },
+	{ 0xC814, CRL_REG_LEN_16BIT, 0x9623, AR023Z_I2C_ADDRESS },
+	{ 0xC816, CRL_REG_LEN_16BIT, 0x75CF, AR023Z_I2C_ADDRESS },
+	{ 0xC818, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC81A, CRL_REG_LEN_16BIT, 0xB5B0, AR023Z_I2C_ADDRESS },
+	{ 0xC81C, CRL_REG_LEN_16BIT, 0x9516, AR023Z_I2C_ADDRESS },
+	{ 0xC81E, CRL_REG_LEN_16BIT, 0xDB7D, AR023Z_I2C_ADDRESS },
+	{ 0xC820, CRL_REG_LEN_16BIT, 0xBB0A, AR023Z_I2C_ADDRESS },
+	{ 0xC822, CRL_REG_LEN_16BIT, 0x782C, AR023Z_I2C_ADDRESS },
+	{ 0xC824, CRL_REG_LEN_16BIT, 0x2942, AR023Z_I2C_ADDRESS },
+	{ 0xC826, CRL_REG_LEN_16BIT, 0x77C0, AR023Z_I2C_ADDRESS },
+	{ 0xC828, CRL_REG_LEN_16BIT, 0x712F, AR023Z_I2C_ADDRESS },
+	{ 0xC82A, CRL_REG_LEN_16BIT, 0x0EFE, AR023Z_I2C_ADDRESS },
+	{ 0xC82C, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC82E, CRL_REG_LEN_16BIT, 0xDA00, AR023Z_I2C_ADDRESS },
+	{ 0xC830, CRL_REG_LEN_16BIT, 0x730A, AR023Z_I2C_ADDRESS },
+	{ 0xC832, CRL_REG_LEN_16BIT, 0x0E1A, AR023Z_I2C_ADDRESS },
+	{ 0xC834, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC836, CRL_REG_LEN_16BIT, 0xDA00, AR023Z_I2C_ADDRESS },
+	{ 0xC838, CRL_REG_LEN_16BIT, 0x72CF, AR023Z_I2C_ADDRESS },
+	{ 0xC83A, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC83C, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC83E, CRL_REG_LEN_16BIT, 0x7150, AR023Z_I2C_ADDRESS },
+	{ 0xC840, CRL_REG_LEN_16BIT, 0x22CA, AR023Z_I2C_ADDRESS },
+	{ 0xC842, CRL_REG_LEN_16BIT, 0x0045, AR023Z_I2C_ADDRESS },
+	{ 0xC844, CRL_REG_LEN_16BIT, 0x71CF, AR023Z_I2C_ADDRESS },
+	{ 0xC846, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC848, CRL_REG_LEN_16BIT, 0xADB4, AR023Z_I2C_ADDRESS },
+	{ 0xC84A, CRL_REG_LEN_16BIT, 0x9122, AR023Z_I2C_ADDRESS },
+	{ 0xC84C, CRL_REG_LEN_16BIT, 0x1EC0, AR023Z_I2C_ADDRESS },
+	{ 0xC84E, CRL_REG_LEN_16BIT, 0x1084, AR023Z_I2C_ADDRESS },
+	{ 0xC850, CRL_REG_LEN_16BIT, 0x854A, AR023Z_I2C_ADDRESS },
+	{ 0xC852, CRL_REG_LEN_16BIT, 0x7230, AR023Z_I2C_ADDRESS },
+	{ 0xC854, CRL_REG_LEN_16BIT, 0x21CA, AR023Z_I2C_ADDRESS },
+	{ 0xC856, CRL_REG_LEN_16BIT, 0x008D, AR023Z_I2C_ADDRESS },
+	{ 0xC858, CRL_REG_LEN_16BIT, 0xB907, AR023Z_I2C_ADDRESS },
+	{ 0xC85A, CRL_REG_LEN_16BIT, 0x61F8, AR023Z_I2C_ADDRESS },
+	{ 0xC85C, CRL_REG_LEN_16BIT, 0xB861, AR023Z_I2C_ADDRESS },
+	{ 0xC85E, CRL_REG_LEN_16BIT, 0x0C9E, AR023Z_I2C_ADDRESS },
+	{ 0xC860, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC862, CRL_REG_LEN_16BIT, 0x71E9, AR023Z_I2C_ADDRESS },
+	{ 0xC864, CRL_REG_LEN_16BIT, 0xB51F, AR023Z_I2C_ADDRESS },
+	{ 0xC866, CRL_REG_LEN_16BIT, 0x0435, AR023Z_I2C_ADDRESS },
+	{ 0xC868, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC86A, CRL_REG_LEN_16BIT, 0x78E0, AR023Z_I2C_ADDRESS },
+	{ 0xC86C, CRL_REG_LEN_16BIT, 0x8850, AR023Z_I2C_ADDRESS },
+	{ 0xC86E, CRL_REG_LEN_16BIT, 0xD980, AR023Z_I2C_ADDRESS },
+	{ 0xC870, CRL_REG_LEN_16BIT, 0xEA08, AR023Z_I2C_ADDRESS },
+	{ 0xC872, CRL_REG_LEN_16BIT, 0x71CF, AR023Z_I2C_ADDRESS },
+	{ 0xC874, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC876, CRL_REG_LEN_16BIT, 0xAD10, AR023Z_I2C_ADDRESS },
+	{ 0xC878, CRL_REG_LEN_16BIT, 0x21F4, AR023Z_I2C_ADDRESS },
+	{ 0xC87A, CRL_REG_LEN_16BIT, 0x0081, AR023Z_I2C_ADDRESS },
+	{ 0xC87C, CRL_REG_LEN_16BIT, 0xB907, AR023Z_I2C_ADDRESS },
+	{ 0xC87E, CRL_REG_LEN_16BIT, 0xB925, AR023Z_I2C_ADDRESS },
+	{ 0xC880, CRL_REG_LEN_16BIT, 0x8851, AR023Z_I2C_ADDRESS },
+	{ 0xC882, CRL_REG_LEN_16BIT, 0xEA09, AR023Z_I2C_ADDRESS },
+	{ 0xC884, CRL_REG_LEN_16BIT, 0x72CF, AR023Z_I2C_ADDRESS },
+	{ 0xC886, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC888, CRL_REG_LEN_16BIT, 0xACF4, AR023Z_I2C_ADDRESS },
+	{ 0xC88A, CRL_REG_LEN_16BIT, 0x9254, AR023Z_I2C_ADDRESS },
+	{ 0xC88C, CRL_REG_LEN_16BIT, 0x7A2C, AR023Z_I2C_ADDRESS },
+	{ 0xC88E, CRL_REG_LEN_16BIT, 0x2941, AR023Z_I2C_ADDRESS },
+	{ 0xC890, CRL_REG_LEN_16BIT, 0x7141, AR023Z_I2C_ADDRESS },
+	{ 0xC892, CRL_REG_LEN_16BIT, 0x9043, AR023Z_I2C_ADDRESS },
+	{ 0xC894, CRL_REG_LEN_16BIT, 0x7A2C, AR023Z_I2C_ADDRESS },
+	{ 0xC896, CRL_REG_LEN_16BIT, 0x9011, AR023Z_I2C_ADDRESS },
+	{ 0xC898, CRL_REG_LEN_16BIT, 0x2941, AR023Z_I2C_ADDRESS },
+	{ 0xC89A, CRL_REG_LEN_16BIT, 0x7141, AR023Z_I2C_ADDRESS },
+	{ 0xC89C, CRL_REG_LEN_16BIT, 0x782C, AR023Z_I2C_ADDRESS },
+	{ 0xC89E, CRL_REG_LEN_16BIT, 0x7FE0, AR023Z_I2C_ADDRESS },
+	{ 0xC8A0, CRL_REG_LEN_16BIT, 0x2941, AR023Z_I2C_ADDRESS },
+	{ 0xC8A2, CRL_REG_LEN_16BIT, 0x71C0, AR023Z_I2C_ADDRESS },
+	{ 0xC8A4, CRL_REG_LEN_16BIT, 0xC0F1, AR023Z_I2C_ADDRESS },
+	{ 0xC8A6, CRL_REG_LEN_16BIT, 0x0B92, AR023Z_I2C_ADDRESS },
+	{ 0xC8A8, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC8AA, CRL_REG_LEN_16BIT, 0x7508, AR023Z_I2C_ADDRESS },
+	{ 0xC8AC, CRL_REG_LEN_16BIT, 0xFFF0, AR023Z_I2C_ADDRESS },
+	{ 0xC8AE, CRL_REG_LEN_16BIT, 0xB807, AR023Z_I2C_ADDRESS },
+	{ 0xC8B0, CRL_REG_LEN_16BIT, 0x71CF, AR023Z_I2C_ADDRESS },
+	{ 0xC8B2, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC8B4, CRL_REG_LEN_16BIT, 0xB5B0, AR023Z_I2C_ADDRESS },
+	{ 0xC8B6, CRL_REG_LEN_16BIT, 0x0C46, AR023Z_I2C_ADDRESS },
+	{ 0xC8B8, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC8BA, CRL_REG_LEN_16BIT, 0x913D, AR023Z_I2C_ADDRESS },
+	{ 0xC8BC, CRL_REG_LEN_16BIT, 0x7708, AR023Z_I2C_ADDRESS },
+	{ 0xC8BE, CRL_REG_LEN_16BIT, 0x9500, AR023Z_I2C_ADDRESS },
+	{ 0xC8C0, CRL_REG_LEN_16BIT, 0x9521, AR023Z_I2C_ADDRESS },
+	{ 0xC8C2, CRL_REG_LEN_16BIT, 0x0A16, AR023Z_I2C_ADDRESS },
+	{ 0xC8C4, CRL_REG_LEN_16BIT, 0x13E0, AR023Z_I2C_ADDRESS },
+	{ 0xC8C6, CRL_REG_LEN_16BIT, 0x9547, AR023Z_I2C_ADDRESS },
+	{ 0xC8C8, CRL_REG_LEN_16BIT, 0x7608, AR023Z_I2C_ADDRESS },
+	{ 0xC8CA, CRL_REG_LEN_16BIT, 0x70E9, AR023Z_I2C_ADDRESS },
+	{ 0xC8CC, CRL_REG_LEN_16BIT, 0x0A56, AR023Z_I2C_ADDRESS },
+	{ 0xC8CE, CRL_REG_LEN_16BIT, 0x10E0, AR023Z_I2C_ADDRESS },
+	{ 0xC8D0, CRL_REG_LEN_16BIT, 0xD908, AR023Z_I2C_ADDRESS },
+	{ 0xC8D2, CRL_REG_LEN_16BIT, 0x7508, AR023Z_I2C_ADDRESS },
+	{ 0xC8D4, CRL_REG_LEN_16BIT, 0x2582, AR023Z_I2C_ADDRESS },
+	{ 0xC8D6, CRL_REG_LEN_16BIT, 0x101C, AR023Z_I2C_ADDRESS },
+	{ 0xC8D8, CRL_REG_LEN_16BIT, 0x70C9, AR023Z_I2C_ADDRESS },
+	{ 0xC8DA, CRL_REG_LEN_16BIT, 0x0A4A, AR023Z_I2C_ADDRESS },
+	{ 0xC8DC, CRL_REG_LEN_16BIT, 0x10E0, AR023Z_I2C_ADDRESS },
+	{ 0xC8DE, CRL_REG_LEN_16BIT, 0xD908, AR023Z_I2C_ADDRESS },
+	{ 0xC8E0, CRL_REG_LEN_16BIT, 0x03C1, AR023Z_I2C_ADDRESS },
+	{ 0xC8E2, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC8E4, CRL_REG_LEN_16BIT, 0x60B8, AR023Z_I2C_ADDRESS },
+	{ 0xC8E6, CRL_REG_LEN_16BIT, 0x78E0, AR023Z_I2C_ADDRESS },
+	{ 0xC8E8, CRL_REG_LEN_16BIT, 0xC0F1, AR023Z_I2C_ADDRESS },
+	{ 0xC8EA, CRL_REG_LEN_16BIT, 0x0B4E, AR023Z_I2C_ADDRESS },
+	{ 0xC8EC, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC8EE, CRL_REG_LEN_16BIT, 0x77CF, AR023Z_I2C_ADDRESS },
+	{ 0xC8F0, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC8F2, CRL_REG_LEN_16BIT, 0x8004, AR023Z_I2C_ADDRESS },
+	{ 0xC8F4, CRL_REG_LEN_16BIT, 0x0BC2, AR023Z_I2C_ADDRESS },
+	{ 0xC8F6, CRL_REG_LEN_16BIT, 0x03C0, AR023Z_I2C_ADDRESS },
+	{ 0xC8F8, CRL_REG_LEN_16BIT, 0x75CF, AR023Z_I2C_ADDRESS },
+	{ 0xC8FA, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC8FC, CRL_REG_LEN_16BIT, 0xAC00, AR023Z_I2C_ADDRESS },
+	{ 0xC8FE, CRL_REG_LEN_16BIT, 0x7608, AR023Z_I2C_ADDRESS },
+	{ 0xC900, CRL_REG_LEN_16BIT, 0x8F05, AR023Z_I2C_ADDRESS },
+	{ 0xC902, CRL_REG_LEN_16BIT, 0x9522, AR023Z_I2C_ADDRESS },
+	{ 0xC904, CRL_REG_LEN_16BIT, 0x7610, AR023Z_I2C_ADDRESS },
+	{ 0xC906, CRL_REG_LEN_16BIT, 0x21D1, AR023Z_I2C_ADDRESS },
+	{ 0xC908, CRL_REG_LEN_16BIT, 0x80A2, AR023Z_I2C_ADDRESS },
+	{ 0xC90A, CRL_REG_LEN_16BIT, 0xF213, AR023Z_I2C_ADDRESS },
+	{ 0xC90C, CRL_REG_LEN_16BIT, 0xE680, AR023Z_I2C_ADDRESS },
+	{ 0xC90E, CRL_REG_LEN_16BIT, 0x26CC, AR023Z_I2C_ADDRESS },
+	{ 0xC910, CRL_REG_LEN_16BIT, 0x9062, AR023Z_I2C_ADDRESS },
+	{ 0xC912, CRL_REG_LEN_16BIT, 0xF40F, AR023Z_I2C_ADDRESS },
+	{ 0xC914, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC916, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC918, CRL_REG_LEN_16BIT, 0xB960, AR023Z_I2C_ADDRESS },
+	{ 0xC91A, CRL_REG_LEN_16BIT, 0xFFE3, AR023Z_I2C_ADDRESS },
+	{ 0xC91C, CRL_REG_LEN_16BIT, 0xB504, AR023Z_I2C_ADDRESS },
+	{ 0xC91E, CRL_REG_LEN_16BIT, 0x08DE, AR023Z_I2C_ADDRESS },
+	{ 0xC920, CRL_REG_LEN_16BIT, 0x0220, AR023Z_I2C_ADDRESS },
+	{ 0xC922, CRL_REG_LEN_16BIT, 0xD800, AR023Z_I2C_ADDRESS },
+	{ 0xC924, CRL_REG_LEN_16BIT, 0xD801, AR023Z_I2C_ADDRESS },
+	{ 0xC926, CRL_REG_LEN_16BIT, 0xAD0E, AR023Z_I2C_ADDRESS },
+	{ 0xC928, CRL_REG_LEN_16BIT, 0xAFC5, AR023Z_I2C_ADDRESS },
+	{ 0xC92A, CRL_REG_LEN_16BIT, 0xD800, AR023Z_I2C_ADDRESS },
+	{ 0xC92C, CRL_REG_LEN_16BIT, 0xF005, AR023Z_I2C_ADDRESS },
+	{ 0xC92E, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC930, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC932, CRL_REG_LEN_16BIT, 0x0F7E, AR023Z_I2C_ADDRESS },
+	{ 0xC934, CRL_REG_LEN_16BIT, 0x7840, AR023Z_I2C_ADDRESS },
+	{ 0xC936, CRL_REG_LEN_16BIT, 0x036D, AR023Z_I2C_ADDRESS },
+	{ 0xC938, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC93A, CRL_REG_LEN_16BIT, 0x78E0, AR023Z_I2C_ADDRESS },
+	{ 0xC93C, CRL_REG_LEN_16BIT, 0xD900, AR023Z_I2C_ADDRESS },
+	{ 0xC93E, CRL_REG_LEN_16BIT, 0xF00A, AR023Z_I2C_ADDRESS },
+	{ 0xC940, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC942, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC944, CRL_REG_LEN_16BIT, 0xC958, AR023Z_I2C_ADDRESS },
+	{ 0xC946, CRL_REG_LEN_16BIT, 0x7835, AR023Z_I2C_ADDRESS },
+	{ 0xC948, CRL_REG_LEN_16BIT, 0x8041, AR023Z_I2C_ADDRESS },
+	{ 0xC94A, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0xC94C, CRL_REG_LEN_16BIT, 0xE102, AR023Z_I2C_ADDRESS },
+	{ 0xC94E, CRL_REG_LEN_16BIT, 0xA040, AR023Z_I2C_ADDRESS },
+	{ 0xC950, CRL_REG_LEN_16BIT, 0x09F1, AR023Z_I2C_ADDRESS },
+	{ 0xC952, CRL_REG_LEN_16BIT, 0x8194, AR023Z_I2C_ADDRESS },
+	{ 0xC954, CRL_REG_LEN_16BIT, 0x7FE0, AR023Z_I2C_ADDRESS },
+	{ 0xC956, CRL_REG_LEN_16BIT, 0xD800, AR023Z_I2C_ADDRESS },
+	{ 0xC958, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC95A, CRL_REG_LEN_16BIT, 0xC164, AR023Z_I2C_ADDRESS },
+	{ 0xC95C, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC95E, CRL_REG_LEN_16BIT, 0xC7A4, AR023Z_I2C_ADDRESS },
+	{ 0xC960, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC962, CRL_REG_LEN_16BIT, 0xC198, AR023Z_I2C_ADDRESS },
+	{ 0xC964, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC966, CRL_REG_LEN_16BIT, 0xC7E4, AR023Z_I2C_ADDRESS },
+	{ 0xC968, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC96A, CRL_REG_LEN_16BIT, 0xBB6C, AR023Z_I2C_ADDRESS },
+	{ 0xC96C, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC96E, CRL_REG_LEN_16BIT, 0xC8E8, AR023Z_I2C_ADDRESS },
+	{ 0x098E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x01EC, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0240, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xA103, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x0204, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x01CC, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8702, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8701, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x0220, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x005C, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8706, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0982, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0x098A, CRL_REG_LEN_16BIT, 0x4970, AR023Z_I2C_ADDRESS },
+	{ 0xC970, CRL_REG_LEN_16BIT, 0xC0F1, AR023Z_I2C_ADDRESS },
+	{ 0xC972, CRL_REG_LEN_16BIT, 0x0ACA, AR023Z_I2C_ADDRESS },
+	{ 0xC974, CRL_REG_LEN_16BIT, 0x1340, AR023Z_I2C_ADDRESS },
+	{ 0xC976, CRL_REG_LEN_16BIT, 0x71CF, AR023Z_I2C_ADDRESS },
+	{ 0xC978, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC97A, CRL_REG_LEN_16BIT, 0x2896, AR023Z_I2C_ADDRESS },
+	{ 0xC97C, CRL_REG_LEN_16BIT, 0x7940, AR023Z_I2C_ADDRESS },
+	{ 0xC97E, CRL_REG_LEN_16BIT, 0x250A, AR023Z_I2C_ADDRESS },
+	{ 0xC980, CRL_REG_LEN_16BIT, 0x9000, AR023Z_I2C_ADDRESS },
+	{ 0xC982, CRL_REG_LEN_16BIT, 0x76CF, AR023Z_I2C_ADDRESS },
+	{ 0xC984, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC986, CRL_REG_LEN_16BIT, 0xB51C, AR023Z_I2C_ADDRESS },
+	{ 0xC988, CRL_REG_LEN_16BIT, 0xF407, AR023Z_I2C_ADDRESS },
+	{ 0xC98A, CRL_REG_LEN_16BIT, 0x0D4A, AR023Z_I2C_ADDRESS },
+	{ 0xC98C, CRL_REG_LEN_16BIT, 0x0B20, AR023Z_I2C_ADDRESS },
+	{ 0xC98E, CRL_REG_LEN_16BIT, 0x8E12, AR023Z_I2C_ADDRESS },
+	{ 0xC990, CRL_REG_LEN_16BIT, 0x0C6A, AR023Z_I2C_ADDRESS },
+	{ 0xC992, CRL_REG_LEN_16BIT, 0x0AE0, AR023Z_I2C_ADDRESS },
+	{ 0xC994, CRL_REG_LEN_16BIT, 0xD801, AR023Z_I2C_ADDRESS },
+	{ 0xC996, CRL_REG_LEN_16BIT, 0x0315, AR023Z_I2C_ADDRESS },
+	{ 0xC998, CRL_REG_LEN_16BIT, 0x1360, AR023Z_I2C_ADDRESS },
+	{ 0xC99A, CRL_REG_LEN_16BIT, 0x70A9, AR023Z_I2C_ADDRESS },
+	{ 0xC99C, CRL_REG_LEN_16BIT, 0xD900, AR023Z_I2C_ADDRESS },
+	{ 0xC99E, CRL_REG_LEN_16BIT, 0xF00A, AR023Z_I2C_ADDRESS },
+	{ 0xC9A0, CRL_REG_LEN_16BIT, 0x70CF, AR023Z_I2C_ADDRESS },
+	{ 0xC9A2, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC9A4, CRL_REG_LEN_16BIT, 0xC9C4, AR023Z_I2C_ADDRESS },
+	{ 0xC9A6, CRL_REG_LEN_16BIT, 0x7835, AR023Z_I2C_ADDRESS },
+	{ 0xC9A8, CRL_REG_LEN_16BIT, 0x8041, AR023Z_I2C_ADDRESS },
+	{ 0xC9AA, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0xC9AC, CRL_REG_LEN_16BIT, 0xE102, AR023Z_I2C_ADDRESS },
+	{ 0xC9AE, CRL_REG_LEN_16BIT, 0xA040, AR023Z_I2C_ADDRESS },
+	{ 0xC9B0, CRL_REG_LEN_16BIT, 0x09F1, AR023Z_I2C_ADDRESS },
+	{ 0xC9B2, CRL_REG_LEN_16BIT, 0x8094, AR023Z_I2C_ADDRESS },
+	{ 0xC9B4, CRL_REG_LEN_16BIT, 0x71CF, AR023Z_I2C_ADDRESS },
+	{ 0xC9B6, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC9B8, CRL_REG_LEN_16BIT, 0xB51C, AR023Z_I2C_ADDRESS },
+	{ 0xC9BA, CRL_REG_LEN_16BIT, 0xD808, AR023Z_I2C_ADDRESS },
+	{ 0xC9BC, CRL_REG_LEN_16BIT, 0xA912, AR023Z_I2C_ADDRESS },
+	{ 0xC9BE, CRL_REG_LEN_16BIT, 0x7FE0, AR023Z_I2C_ADDRESS },
+	{ 0xC9C0, CRL_REG_LEN_16BIT, 0xD800, AR023Z_I2C_ADDRESS },
+	{ 0xC9C2, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC9C4, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC9C6, CRL_REG_LEN_16BIT, 0xBFE4, AR023Z_I2C_ADDRESS },
+	{ 0xC9C8, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xC9CA, CRL_REG_LEN_16BIT, 0xC970, AR023Z_I2C_ADDRESS },
+	{ 0x098E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x024C, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0340, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xA103, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x0204, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x005C, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8702, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8701, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xCC02, CRL_REG_LEN_16BIT, 0x0493, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D00, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D01, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3088, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0280, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C45, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x5872, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x9B4A, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x3143, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x428E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x032A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1400, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C45, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x787B, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3DFF, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x3DFF, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x3DEA, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2A04, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x3D00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C10, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2A05, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x2A15, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x352A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x053D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x1045, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x5800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C2A, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x042A, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x143D, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0xFF3D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0xFF3D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0xEA2A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x0400, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C62, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2A28, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x362A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x083D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x647A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x3D00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C04, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x442C, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x4B8F, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x0043, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x0C2D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x6343, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1600, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C8E, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x032A, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0xFC5C, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x1D57, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x5449, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x5F53, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x0500, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C53, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x074D, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x2BF8, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x1016, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x4C08, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x5556, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x2B00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0CB8, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2B98, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x4E11, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2904, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x2984, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2994, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x6000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C5C, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x195C, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x1B45, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4845, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x0845, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8829, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0xB600, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C8E, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x012A, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0xF83E, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x022A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0xFA3F, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x095C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1B00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C29, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xB23F, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x0C3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x023E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x135C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x133F, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1100, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0B5F, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x2B90, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2AF2, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x2B80, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x3E04, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x3F00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C06, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x6029, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0xA229, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0xA35F, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x4D19, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2AFA, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x2900, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C83, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x45A8, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3E07, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2AFB, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x3E29, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4588, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x2100, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x082A, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0xFA5D, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2992, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x8810, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2B04, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8B00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C16, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x858D, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x484D, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4E2B, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x804C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x0B60, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x3F00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C28, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2AF2, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3F0F, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2982, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x2983, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2943, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x5C00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C15, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x5F4D, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x192A, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0xFA45, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x588E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x002A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x9800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C3F, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0612, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x444A, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x0443, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x1605, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x5800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C43, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x165A, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x0643, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x1607, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C03, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2A9C, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x4578, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x7B3F, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x072A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x9D3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x2E00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C45, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x5825, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3E06, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x8E01, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x2A98, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1200, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C44, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x4B03, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x432D, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4643, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x16A3, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x5D00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C0D, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2944, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x8810, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2B04, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x530D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8B16, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8500, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C44, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8E03, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x2AFC, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x5C1D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x8D60, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x5754, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x4900, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C5F, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x5305, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x5307, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4D2B, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0xF810, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x164C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C55, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x562B, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0xB82B, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x984E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x1129, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x0429, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8400, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C29, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x9460, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x5C19, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x5C1B, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x4548, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4508, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x4500, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C88, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x29B6, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x8E01, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2AF8, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x3E02, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2AFA, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x3F00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C09, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x5C1B, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x29B2, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x3F0C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x3E02, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x3E13, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x5C00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C13, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x3F11, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3E0B, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x5F2B, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x902A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0xF22B, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x043F, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x0660, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x29A2, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x29A3, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x5F4D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1C00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C2A, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xFA29, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x8345, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0xA83E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x072A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0xFB3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x2900, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C45, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8824, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3E08, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2AFA, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x5D29, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x9288, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C2B, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x048B, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x1686, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x8D48, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x4D4E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2B80, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x4C00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C0B, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x603F, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x282A, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0xF23F, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x0F29, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8229, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8300, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C29, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x435C, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x155F, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4D1C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x2AFA, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4558, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C00, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2A98, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3F06, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4A73, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x9D0A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x0B00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C43, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x168E, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x032A, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x9C45, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x783F, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x072A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x9D00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C3E, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x1245, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x583F, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x048E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x012A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x988E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C91, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x769C, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x779C, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x4644, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x1616, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x907A, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1200, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C44, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x4B4A, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x0043, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x1663, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x0843, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1600, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C50, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x6543, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x1666, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x4316, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8E03, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x2A00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C9C, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x4578, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x3F07, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2A9D, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x5D0C, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x2944, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x8800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C10, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2B04, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x530D, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x8B16, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x863E, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x1F45, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x5800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0C28, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x3E06, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x8E01, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2A98, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8D60, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1200, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3086, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0444, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x4B2C, AR023Z_I2C_ADDRESS },
+	{ 0xFC06, CRL_REG_LEN_16BIT, 0x2C00, AR023Z_I2C_ADDRESS },
+	{ 0xFC08, CRL_REG_LEN_16BIT, 0x2A98, AR023Z_I2C_ADDRESS },
+	{ 0xFC0A, CRL_REG_LEN_16BIT, 0x8E00, AR023Z_I2C_ADDRESS },
+	{ 0xFC0C, CRL_REG_LEN_16BIT, 0x8D60, AR023Z_I2C_ADDRESS },
+	{ 0xFC0E, CRL_REG_LEN_16BIT, 0x1200, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D02, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8E01, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xCCCC, CRL_REG_LEN_08BIT, 0x69, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D00, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D01, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3ED6, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0234, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xB300, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x2436, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0200, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0E00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x320C, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0201, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x320E, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0203, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3210, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0205, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3204, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x020B, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x6D00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x30FE, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0200, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3ED8, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x027B, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x9900, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EDC, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x029B, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0xA800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EDA, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x029B, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x9B00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3092, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0200, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x6F00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EEC, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x021C, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0400, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x30BA, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0277, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x9C00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EF6, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x02A7, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0F00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3044, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0204, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x1000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3ED0, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x02FF, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x4400, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3ED4, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0203, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x1F00, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x30FE, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0200, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EE2, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0288, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x6600, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EE4, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0266, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2300, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3EE6, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0222, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x6300, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x30E0, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0242, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8300, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x30F0, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0212, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x8300, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D02, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xCAC8, CRL_REG_LEN_08BIT, 0x41, AR023Z_I2C_ADDRESS },
+	{ 0xCACA, CRL_REG_LEN_16BIT, 0x022F, AR023Z_I2C_ADDRESS },
+	{ 0xCACE, CRL_REG_LEN_16BIT, 0x010E, AR023Z_I2C_ADDRESS },
+	{ 0xCAD0, CRL_REG_LEN_16BIT, 0x0033, AR023Z_I2C_ADDRESS },
+	{ 0xCAD4, CRL_REG_LEN_16BIT, 0x001F, AR023Z_I2C_ADDRESS },
+	{ 0xCAD4, CRL_REG_LEN_16BIT, 0x001F, AR023Z_I2C_ADDRESS },
+	{ 0xCAD8, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCADA, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC806, CRL_REG_LEN_16BIT, 0x000C, AR023Z_I2C_ADDRESS },
+	{ 0xC80A, CRL_REG_LEN_16BIT, 0x078B, AR023Z_I2C_ADDRESS },
+	{ 0xC804, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC808, CRL_REG_LEN_16BIT, 0x0437, AR023Z_I2C_ADDRESS },
+	{ 0xC838, CRL_REG_LEN_16BIT, 0x0302, AR023Z_I2C_ADDRESS },
+	{ 0xC83A, CRL_REG_LEN_16BIT, 0x211B, AR023Z_I2C_ADDRESS },
+	{ 0xC840, CRL_REG_LEN_16BIT, 0x010C, AR023Z_I2C_ADDRESS },
+	{ 0xC844, CRL_REG_LEN_16BIT, 0x0802, AR023Z_I2C_ADDRESS },
+	{ 0xC844, CRL_REG_LEN_16BIT, 0x0801, AR023Z_I2C_ADDRESS },
+	{ 0xC80C, CRL_REG_LEN_16BIT, 0x04BA, AR023Z_I2C_ADDRESS },
+	{ 0xC80E, CRL_REG_LEN_16BIT, 0x3674, AR023Z_I2C_ADDRESS },
+	{ 0xC814, CRL_REG_LEN_16BIT, 0x049E, AR023Z_I2C_ADDRESS },
+	{ 0xC816, CRL_REG_LEN_16BIT, 0x08BC, AR023Z_I2C_ADDRESS },
+	{ 0xC846, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC890, CRL_REG_LEN_08BIT, 0x00, AR023Z_I2C_ADDRESS },
+	{ 0xC8A0, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC8A2, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC8A4, CRL_REG_LEN_16BIT, 0x0780, AR023Z_I2C_ADDRESS },
+	{ 0xC8A6, CRL_REG_LEN_16BIT, 0x0438, AR023Z_I2C_ADDRESS },
+	{ 0xC9F8, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC9FA, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC9FC, CRL_REG_LEN_16BIT, 0x0780, AR023Z_I2C_ADDRESS },
+	{ 0xC9FE, CRL_REG_LEN_16BIT, 0x0438, AR023Z_I2C_ADDRESS },
+	{ 0xCA00, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCA02, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCA04, CRL_REG_LEN_16BIT, 0x0780, AR023Z_I2C_ADDRESS },
+	{ 0xCA06, CRL_REG_LEN_16BIT, 0x0438, AR023Z_I2C_ADDRESS },
+	{ 0xCAE4, CRL_REG_LEN_16BIT, 0x0780, AR023Z_I2C_ADDRESS },
+	{ 0xCAE6, CRL_REG_LEN_16BIT, 0x0438, AR023Z_I2C_ADDRESS },
+	{ 0xCAE8, CRL_REG_LEN_16BIT, 0x0011, AR023Z_I2C_ADDRESS },
+	{ 0xCAE8, CRL_REG_LEN_16BIT, 0x0011, AR023Z_I2C_ADDRESS },
+	{ 0xCAEA, CRL_REG_LEN_08BIT, 0x00, AR023Z_I2C_ADDRESS },
+	{ 0xCAEB, CRL_REG_LEN_08BIT, 0x00, AR023Z_I2C_ADDRESS },
+	{ 0xCAF4, CRL_REG_LEN_16BIT, 0x249F, AR023Z_I2C_ADDRESS },
+	{ 0xCAF8, CRL_REG_LEN_08BIT, 0x0E, AR023Z_I2C_ADDRESS },
+	{ 0xCAFC, CRL_REG_LEN_16BIT, 0x4201, AR023Z_I2C_ADDRESS },
+	{ 0xCAFE, CRL_REG_LEN_16BIT, 0x08BC, AR023Z_I2C_ADDRESS },
+	{ 0xCB00, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0x8C16, CRL_REG_LEN_08BIT, 0x19, AR023Z_I2C_ADDRESS },
+	{ 0xCAC4, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0x3600, CRL_REG_LEN_16BIT, 0x00F0, AR023Z_I2C_ADDRESS },
+	{ 0x3602, CRL_REG_LEN_16BIT, 0xD789, AR023Z_I2C_ADDRESS },
+	{ 0x3604, CRL_REG_LEN_16BIT, 0x4D70, AR023Z_I2C_ADDRESS },
+	{ 0x3606, CRL_REG_LEN_16BIT, 0x6A8D, AR023Z_I2C_ADDRESS },
+	{ 0x3608, CRL_REG_LEN_16BIT, 0x7CEE, AR023Z_I2C_ADDRESS },
+	{ 0x360A, CRL_REG_LEN_16BIT, 0x00D0, AR023Z_I2C_ADDRESS },
+	{ 0x360C, CRL_REG_LEN_16BIT, 0x8F0B, AR023Z_I2C_ADDRESS },
+	{ 0x360E, CRL_REG_LEN_16BIT, 0x58B0, AR023Z_I2C_ADDRESS },
+	{ 0x3610, CRL_REG_LEN_16BIT, 0x2E2D, AR023Z_I2C_ADDRESS },
+	{ 0x3612, CRL_REG_LEN_16BIT, 0x0BCF, AR023Z_I2C_ADDRESS },
+	{ 0x3614, CRL_REG_LEN_16BIT, 0x00B0, AR023Z_I2C_ADDRESS },
+	{ 0x3616, CRL_REG_LEN_16BIT, 0xC149, AR023Z_I2C_ADDRESS },
+	{ 0x3618, CRL_REG_LEN_16BIT, 0x4950, AR023Z_I2C_ADDRESS },
+	{ 0x361A, CRL_REG_LEN_16BIT, 0x024E, AR023Z_I2C_ADDRESS },
+	{ 0x361C, CRL_REG_LEN_16BIT, 0x0B4E, AR023Z_I2C_ADDRESS },
+	{ 0x361E, CRL_REG_LEN_16BIT, 0x00D0, AR023Z_I2C_ADDRESS },
+	{ 0x3620, CRL_REG_LEN_16BIT, 0xD2E9, AR023Z_I2C_ADDRESS },
+	{ 0x3622, CRL_REG_LEN_16BIT, 0x4D10, AR023Z_I2C_ADDRESS },
+	{ 0x3624, CRL_REG_LEN_16BIT, 0x67ED, AR023Z_I2C_ADDRESS },
+	{ 0x3626, CRL_REG_LEN_16BIT, 0x1ACF, AR023Z_I2C_ADDRESS },
+	{ 0x3628, CRL_REG_LEN_16BIT, 0x406B, AR023Z_I2C_ADDRESS },
+	{ 0x362A, CRL_REG_LEN_16BIT, 0x1FC9, AR023Z_I2C_ADDRESS },
+	{ 0x362C, CRL_REG_LEN_16BIT, 0x6750, AR023Z_I2C_ADDRESS },
+	{ 0x362E, CRL_REG_LEN_16BIT, 0x4E0F, AR023Z_I2C_ADDRESS },
+	{ 0x3630, CRL_REG_LEN_16BIT, 0xBCF3, AR023Z_I2C_ADDRESS },
+	{ 0x3632, CRL_REG_LEN_16BIT, 0x138C, AR023Z_I2C_ADDRESS },
+	{ 0x3634, CRL_REG_LEN_16BIT, 0x366A, AR023Z_I2C_ADDRESS },
+	{ 0x3636, CRL_REG_LEN_16BIT, 0x6390, AR023Z_I2C_ADDRESS },
+	{ 0x3638, CRL_REG_LEN_16BIT, 0x2E2F, AR023Z_I2C_ADDRESS },
+	{ 0x363A, CRL_REG_LEN_16BIT, 0xB9D3, AR023Z_I2C_ADDRESS },
+	{ 0x363C, CRL_REG_LEN_16BIT, 0x2B4A, AR023Z_I2C_ADDRESS },
+	{ 0x363E, CRL_REG_LEN_16BIT, 0x008B, AR023Z_I2C_ADDRESS },
+	{ 0x3640, CRL_REG_LEN_16BIT, 0x6B30, AR023Z_I2C_ADDRESS },
+	{ 0x3642, CRL_REG_LEN_16BIT, 0x710F, AR023Z_I2C_ADDRESS },
+	{ 0x3644, CRL_REG_LEN_16BIT, 0xC413, AR023Z_I2C_ADDRESS },
+	{ 0x3646, CRL_REG_LEN_16BIT, 0x2A4B, AR023Z_I2C_ADDRESS },
+	{ 0x3648, CRL_REG_LEN_16BIT, 0x080A, AR023Z_I2C_ADDRESS },
+	{ 0x364A, CRL_REG_LEN_16BIT, 0x6BD0, AR023Z_I2C_ADDRESS },
+	{ 0x364C, CRL_REG_LEN_16BIT, 0x0050, AR023Z_I2C_ADDRESS },
+	{ 0x364E, CRL_REG_LEN_16BIT, 0xC4D3, AR023Z_I2C_ADDRESS },
+	{ 0x3650, CRL_REG_LEN_16BIT, 0x6F90, AR023Z_I2C_ADDRESS },
+	{ 0x3652, CRL_REG_LEN_16BIT, 0x5A2F, AR023Z_I2C_ADDRESS },
+	{ 0x3654, CRL_REG_LEN_16BIT, 0xE631, AR023Z_I2C_ADDRESS },
+	{ 0x3656, CRL_REG_LEN_16BIT, 0x8812, AR023Z_I2C_ADDRESS },
+	{ 0x3658, CRL_REG_LEN_16BIT, 0x2155, AR023Z_I2C_ADDRESS },
+	{ 0x365A, CRL_REG_LEN_16BIT, 0x6A30, AR023Z_I2C_ADDRESS },
+	{ 0x365C, CRL_REG_LEN_16BIT, 0x7FCF, AR023Z_I2C_ADDRESS },
+	{ 0x365E, CRL_REG_LEN_16BIT, 0xE291, AR023Z_I2C_ADDRESS },
+	{ 0x3660, CRL_REG_LEN_16BIT, 0x9C92, AR023Z_I2C_ADDRESS },
+	{ 0x3662, CRL_REG_LEN_16BIT, 0x2C75, AR023Z_I2C_ADDRESS },
+	{ 0x3664, CRL_REG_LEN_16BIT, 0x5F90, AR023Z_I2C_ADDRESS },
+	{ 0x3666, CRL_REG_LEN_16BIT, 0x618F, AR023Z_I2C_ADDRESS },
+	{ 0x3668, CRL_REG_LEN_16BIT, 0xED91, AR023Z_I2C_ADDRESS },
+	{ 0x366A, CRL_REG_LEN_16BIT, 0x9FB2, AR023Z_I2C_ADDRESS },
+	{ 0x366C, CRL_REG_LEN_16BIT, 0x1915, AR023Z_I2C_ADDRESS },
+	{ 0x366E, CRL_REG_LEN_16BIT, 0x6E90, AR023Z_I2C_ADDRESS },
+	{ 0x3670, CRL_REG_LEN_16BIT, 0x5C0F, AR023Z_I2C_ADDRESS },
+	{ 0x3672, CRL_REG_LEN_16BIT, 0xE111, AR023Z_I2C_ADDRESS },
+	{ 0x3674, CRL_REG_LEN_16BIT, 0x9352, AR023Z_I2C_ADDRESS },
+	{ 0x3676, CRL_REG_LEN_16BIT, 0x2135, AR023Z_I2C_ADDRESS },
+	{ 0x3678, CRL_REG_LEN_16BIT, 0x7230, AR023Z_I2C_ADDRESS },
+	{ 0x367A, CRL_REG_LEN_16BIT, 0x2D92, AR023Z_I2C_ADDRESS },
+	{ 0x367C, CRL_REG_LEN_16BIT, 0xEEB5, AR023Z_I2C_ADDRESS },
+	{ 0x367E, CRL_REG_LEN_16BIT, 0x8495, AR023Z_I2C_ADDRESS },
+	{ 0x3680, CRL_REG_LEN_16BIT, 0x3C38, AR023Z_I2C_ADDRESS },
+	{ 0x3682, CRL_REG_LEN_16BIT, 0x7B50, AR023Z_I2C_ADDRESS },
+	{ 0x3684, CRL_REG_LEN_16BIT, 0x2332, AR023Z_I2C_ADDRESS },
+	{ 0x3686, CRL_REG_LEN_16BIT, 0xED55, AR023Z_I2C_ADDRESS },
+	{ 0x3688, CRL_REG_LEN_16BIT, 0x8355, AR023Z_I2C_ADDRESS },
+	{ 0x368A, CRL_REG_LEN_16BIT, 0x3978, AR023Z_I2C_ADDRESS },
+	{ 0x368C, CRL_REG_LEN_16BIT, 0x74F0, AR023Z_I2C_ADDRESS },
+	{ 0x368E, CRL_REG_LEN_16BIT, 0x4032, AR023Z_I2C_ADDRESS },
+	{ 0x3690, CRL_REG_LEN_16BIT, 0xF9B5, AR023Z_I2C_ADDRESS },
+	{ 0x3692, CRL_REG_LEN_16BIT, 0x8D75, AR023Z_I2C_ADDRESS },
+	{ 0x3694, CRL_REG_LEN_16BIT, 0x4338, AR023Z_I2C_ADDRESS },
+	{ 0x3696, CRL_REG_LEN_16BIT, 0x7550, AR023Z_I2C_ADDRESS },
+	{ 0x3698, CRL_REG_LEN_16BIT, 0x2CB2, AR023Z_I2C_ADDRESS },
+	{ 0x369A, CRL_REG_LEN_16BIT, 0xF135, AR023Z_I2C_ADDRESS },
+	{ 0x369C, CRL_REG_LEN_16BIT, 0x80F5, AR023Z_I2C_ADDRESS },
+	{ 0x369E, CRL_REG_LEN_16BIT, 0x3B98, AR023Z_I2C_ADDRESS },
+	{ 0x36A0, CRL_REG_LEN_16BIT, 0x90F2, AR023Z_I2C_ADDRESS },
+	{ 0x36A2, CRL_REG_LEN_16BIT, 0xD4D2, AR023Z_I2C_ADDRESS },
+	{ 0x36A4, CRL_REG_LEN_16BIT, 0x35B7, AR023Z_I2C_ADDRESS },
+	{ 0x36A6, CRL_REG_LEN_16BIT, 0x1A75, AR023Z_I2C_ADDRESS },
+	{ 0x36A8, CRL_REG_LEN_16BIT, 0x9B5A, AR023Z_I2C_ADDRESS },
+	{ 0x36AA, CRL_REG_LEN_16BIT, 0xFF71, AR023Z_I2C_ADDRESS },
+	{ 0x36AC, CRL_REG_LEN_16BIT, 0xC832, AR023Z_I2C_ADDRESS },
+	{ 0x36AE, CRL_REG_LEN_16BIT, 0x3277, AR023Z_I2C_ADDRESS },
+	{ 0x36B0, CRL_REG_LEN_16BIT, 0x16F5, AR023Z_I2C_ADDRESS },
+	{ 0x36B2, CRL_REG_LEN_16BIT, 0x97BA, AR023Z_I2C_ADDRESS },
+	{ 0x36B4, CRL_REG_LEN_16BIT, 0x95B2, AR023Z_I2C_ADDRESS },
+	{ 0x36B6, CRL_REG_LEN_16BIT, 0x9373, AR023Z_I2C_ADDRESS },
+	{ 0x36B8, CRL_REG_LEN_16BIT, 0x3C77, AR023Z_I2C_ADDRESS },
+	{ 0x36BA, CRL_REG_LEN_16BIT, 0x6115, AR023Z_I2C_ADDRESS },
+	{ 0x36BC, CRL_REG_LEN_16BIT, 0xA0BA, AR023Z_I2C_ADDRESS },
+	{ 0x36BE, CRL_REG_LEN_16BIT, 0x95B2, AR023Z_I2C_ADDRESS },
+	{ 0x36C0, CRL_REG_LEN_16BIT, 0xC492, AR023Z_I2C_ADDRESS },
+	{ 0x36C2, CRL_REG_LEN_16BIT, 0x3517, AR023Z_I2C_ADDRESS },
+	{ 0x36C4, CRL_REG_LEN_16BIT, 0x15B5, AR023Z_I2C_ADDRESS },
+	{ 0x36C6, CRL_REG_LEN_16BIT, 0x9A9A, AR023Z_I2C_ADDRESS },
+	{ 0x36C8, CRL_REG_LEN_16BIT, 0x018A, AR023Z_I2C_ADDRESS },
+	{ 0x36CA, CRL_REG_LEN_16BIT, 0x03BE, AR023Z_I2C_ADDRESS },
+	{ 0xCAC4, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC91E, CRL_REG_LEN_16BIT, 0x0A8C, AR023Z_I2C_ADDRESS },
+	{ 0xC920, CRL_REG_LEN_16BIT, 0x0FA0, AR023Z_I2C_ADDRESS },
+	{ 0xC922, CRL_REG_LEN_16BIT, 0x1964, AR023Z_I2C_ADDRESS },
+	{ 0xC924, CRL_REG_LEN_16BIT, 0x09C4, AR023Z_I2C_ADDRESS },
+	{ 0xC926, CRL_REG_LEN_16BIT, 0x1964, AR023Z_I2C_ADDRESS },
+	{ 0xC912, CRL_REG_LEN_16BIT, 0x005F, AR023Z_I2C_ADDRESS },
+	{ 0xC914, CRL_REG_LEN_16BIT, 0x016D, AR023Z_I2C_ADDRESS },
+	{ 0xC916, CRL_REG_LEN_16BIT, 0x00AF, AR023Z_I2C_ADDRESS },
+	{ 0xC918, CRL_REG_LEN_16BIT, 0x0148, AR023Z_I2C_ADDRESS },
+	{ 0xC91A, CRL_REG_LEN_16BIT, 0x0096, AR023Z_I2C_ADDRESS },
+	{ 0xC91C, CRL_REG_LEN_16BIT, 0x00B4, AR023Z_I2C_ADDRESS },
+	{ 0xC982, CRL_REG_LEN_08BIT, 0x82, AR023Z_I2C_ADDRESS },
+	{ 0xC983, CRL_REG_LEN_08BIT, 0x80, AR023Z_I2C_ADDRESS },
+	{ 0xC984, CRL_REG_LEN_08BIT, 0x86, AR023Z_I2C_ADDRESS },
+	{ 0xC985, CRL_REG_LEN_08BIT, 0x84, AR023Z_I2C_ADDRESS },
+	{ 0xC986, CRL_REG_LEN_08BIT, 0x82, AR023Z_I2C_ADDRESS },
+	{ 0xC987, CRL_REG_LEN_08BIT, 0x80, AR023Z_I2C_ADDRESS },
+	{ 0xC980, CRL_REG_LEN_16BIT, 0x1450, AR023Z_I2C_ADDRESS },
+	{ 0xC8DC, CRL_REG_LEN_16BIT, 0x013E, AR023Z_I2C_ADDRESS },
+	{ 0xC8DE, CRL_REG_LEN_16BIT, 0xFFDB, AR023Z_I2C_ADDRESS },
+	{ 0xC8E0, CRL_REG_LEN_16BIT, 0xFFE7, AR023Z_I2C_ADDRESS },
+	{ 0xC8E2, CRL_REG_LEN_16BIT, 0xFF75, AR023Z_I2C_ADDRESS },
+	{ 0xC8E4, CRL_REG_LEN_16BIT, 0x01B8, AR023Z_I2C_ADDRESS },
+	{ 0xC8E6, CRL_REG_LEN_16BIT, 0xFFD2, AR023Z_I2C_ADDRESS },
+	{ 0xC8E8, CRL_REG_LEN_16BIT, 0xFF52, AR023Z_I2C_ADDRESS },
+	{ 0xC8EA, CRL_REG_LEN_16BIT, 0xFF1A, AR023Z_I2C_ADDRESS },
+	{ 0xC8EC, CRL_REG_LEN_16BIT, 0x0295, AR023Z_I2C_ADDRESS },
+	{ 0xC8EE, CRL_REG_LEN_16BIT, 0x01B0, AR023Z_I2C_ADDRESS },
+	{ 0xC8F0, CRL_REG_LEN_16BIT, 0xFF40, AR023Z_I2C_ADDRESS },
+	{ 0xC8F2, CRL_REG_LEN_16BIT, 0x0010, AR023Z_I2C_ADDRESS },
+	{ 0xC8F4, CRL_REG_LEN_16BIT, 0xFF87, AR023Z_I2C_ADDRESS },
+	{ 0xC8F6, CRL_REG_LEN_16BIT, 0x01A2, AR023Z_I2C_ADDRESS },
+	{ 0xC8F8, CRL_REG_LEN_16BIT, 0xFFD7, AR023Z_I2C_ADDRESS },
+	{ 0xC8FA, CRL_REG_LEN_16BIT, 0xFFD3, AR023Z_I2C_ADDRESS },
+	{ 0xC8FC, CRL_REG_LEN_16BIT, 0xFF63, AR023Z_I2C_ADDRESS },
+	{ 0xC8FE, CRL_REG_LEN_16BIT, 0x01CB, AR023Z_I2C_ADDRESS },
+	{ 0xC900, CRL_REG_LEN_16BIT, 0x0154, AR023Z_I2C_ADDRESS },
+	{ 0xC902, CRL_REG_LEN_16BIT, 0xFFCD, AR023Z_I2C_ADDRESS },
+	{ 0xC904, CRL_REG_LEN_16BIT, 0xFFDE, AR023Z_I2C_ADDRESS },
+	{ 0xC906, CRL_REG_LEN_16BIT, 0xFFB1, AR023Z_I2C_ADDRESS },
+	{ 0xC908, CRL_REG_LEN_16BIT, 0x013B, AR023Z_I2C_ADDRESS },
+	{ 0xC90A, CRL_REG_LEN_16BIT, 0xFFEC, AR023Z_I2C_ADDRESS },
+	{ 0xC90C, CRL_REG_LEN_16BIT, 0xFFD9, AR023Z_I2C_ADDRESS },
+	{ 0xC90E, CRL_REG_LEN_16BIT, 0xFF9C, AR023Z_I2C_ADDRESS },
+	{ 0xC910, CRL_REG_LEN_16BIT, 0x018B, AR023Z_I2C_ADDRESS },
+	{ 0xC97D, CRL_REG_LEN_08BIT, 0x10, AR023Z_I2C_ADDRESS },
+	{ 0xC92A, CRL_REG_LEN_16BIT, 0x0020, AR023Z_I2C_ADDRESS },
+	{ 0xC92C, CRL_REG_LEN_16BIT, 0x0018, AR023Z_I2C_ADDRESS },
+	{ 0xC92E, CRL_REG_LEN_16BIT, 0x0080, AR023Z_I2C_ADDRESS },
+	{ 0xC930, CRL_REG_LEN_16BIT, 0x0080, AR023Z_I2C_ADDRESS },
+	{ 0xC932, CRL_REG_LEN_16BIT, 0x0005, AR023Z_I2C_ADDRESS },
+	{ 0xC934, CRL_REG_LEN_16BIT, 0xFFE0, AR023Z_I2C_ADDRESS },
+	{ 0xC936, CRL_REG_LEN_08BIT, 0x33, AR023Z_I2C_ADDRESS },
+	{ 0xC937, CRL_REG_LEN_08BIT, 0x26, AR023Z_I2C_ADDRESS },
+	{ 0xC938, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC93A, CRL_REG_LEN_16BIT, 0x0047, AR023Z_I2C_ADDRESS },
+	{ 0xC93C, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC93E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC93E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC940, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC942, CRL_REG_LEN_16BIT, 0x0022, AR023Z_I2C_ADDRESS },
+	{ 0xC944, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC946, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC948, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC94A, CRL_REG_LEN_16BIT, 0x0002, AR023Z_I2C_ADDRESS },
+	{ 0xC94C, CRL_REG_LEN_16BIT, 0x3000, AR023Z_I2C_ADDRESS },
+	{ 0xC94E, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC950, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC952, CRL_REG_LEN_16BIT, 0x0123, AR023Z_I2C_ADDRESS },
+	{ 0xC954, CRL_REG_LEN_16BIT, 0x2000, AR023Z_I2C_ADDRESS },
+	{ 0xC956, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC958, CRL_REG_LEN_16BIT, 0x0150, AR023Z_I2C_ADDRESS },
+	{ 0xC95A, CRL_REG_LEN_16BIT, 0x5300, AR023Z_I2C_ADDRESS },
+	{ 0xC95C, CRL_REG_LEN_16BIT, 0x1112, AR023Z_I2C_ADDRESS },
+	{ 0xC95E, CRL_REG_LEN_16BIT, 0x2010, AR023Z_I2C_ADDRESS },
+	{ 0xC960, CRL_REG_LEN_16BIT, 0x5574, AR023Z_I2C_ADDRESS },
+	{ 0xC962, CRL_REG_LEN_16BIT, 0x5000, AR023Z_I2C_ADDRESS },
+	{ 0xC964, CRL_REG_LEN_16BIT, 0x0202, AR023Z_I2C_ADDRESS },
+	{ 0xC966, CRL_REG_LEN_16BIT, 0x5300, AR023Z_I2C_ADDRESS },
+	{ 0xC968, CRL_REG_LEN_16BIT, 0x0371, AR023Z_I2C_ADDRESS },
+	{ 0xC96A, CRL_REG_LEN_16BIT, 0x0400, AR023Z_I2C_ADDRESS },
+	{ 0xC96C, CRL_REG_LEN_16BIT, 0x0002, AR023Z_I2C_ADDRESS },
+	{ 0xC96E, CRL_REG_LEN_16BIT, 0x2000, AR023Z_I2C_ADDRESS },
+	{ 0xC970, CRL_REG_LEN_16BIT, 0x0023, AR023Z_I2C_ADDRESS },
+	{ 0xC972, CRL_REG_LEN_16BIT, 0x0330, AR023Z_I2C_ADDRESS },
+	{ 0xC974, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC976, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCC02, CRL_REG_LEN_16BIT, 0x0083, AR023Z_I2C_ADDRESS },
+	{ 0xC88C, CRL_REG_LEN_16BIT, 0x0080, AR023Z_I2C_ADDRESS },
+	{ 0xC84A, CRL_REG_LEN_16BIT, 0x0BA0, AR023Z_I2C_ADDRESS },
+	{ 0xC84C, CRL_REG_LEN_16BIT, 0x0FA0, AR023Z_I2C_ADDRESS },
+	{ 0xC84E, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0xCA0C, CRL_REG_LEN_16BIT, 0xF8C0, AR023Z_I2C_ADDRESS },
+	{ 0xC846, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCAE8, CRL_REG_LEN_16BIT, 0x0010, AR023Z_I2C_ADDRESS },
+	{ 0x3210, CRL_REG_LEN_16BIT, 0x0EB0, AR023Z_I2C_ADDRESS },
+	{ 0xBC02, CRL_REG_LEN_16BIT, 0x03C5, AR023Z_I2C_ADDRESS },
+	{ 0xA802, CRL_REG_LEN_16BIT, 0x001C, AR023Z_I2C_ADDRESS },
+	{ 0xA812, CRL_REG_LEN_08BIT, 0x08, AR023Z_I2C_ADDRESS },
+	{ 0xA81C, CRL_REG_LEN_08BIT, 0x8C, AR023Z_I2C_ADDRESS },
+	{ 0xC8CE, CRL_REG_LEN_16BIT, 0x0035, AR023Z_I2C_ADDRESS },
+	{ 0xC8CA, CRL_REG_LEN_16BIT, 0x0030, AR023Z_I2C_ADDRESS },
+	{ 0xC8CC, CRL_REG_LEN_16BIT, 0x0180, AR023Z_I2C_ADDRESS },
+	{ 0xC8C6, CRL_REG_LEN_16BIT, 0x008C, AR023Z_I2C_ADDRESS },
+	{ 0xC8C8, CRL_REG_LEN_16BIT, 0x03FF, AR023Z_I2C_ADDRESS },
+	{ 0xC8BE, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xA83C, CRL_REG_LEN_16BIT, 0x03E6, AR023Z_I2C_ADDRESS },
+	{ 0xA83E, CRL_REG_LEN_16BIT, 0x0300, AR023Z_I2C_ADDRESS },
+	{ 0xA840, CRL_REG_LEN_16BIT, 0x0133, AR023Z_I2C_ADDRESS },
+	{ 0xC988, CRL_REG_LEN_16BIT, 0x0E17, AR023Z_I2C_ADDRESS },
+	{ 0x2402, CRL_REG_LEN_16BIT, 0x0008, AR023Z_I2C_ADDRESS },
+	{ 0xBCBE, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+	{ 0xBCC0, CRL_REG_LEN_16BIT, 0x00C8, AR023Z_I2C_ADDRESS },
+	{ 0xBCBA, CRL_REG_LEN_16BIT, 0x0010, AR023Z_I2C_ADDRESS },
+	{ 0xBCBC, CRL_REG_LEN_16BIT, 0x0017, AR023Z_I2C_ADDRESS },
+	{ 0xBCC2, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xBCC4, CRL_REG_LEN_16BIT, 0x003B, AR023Z_I2C_ADDRESS },
+	{ 0xC9CC, CRL_REG_LEN_16BIT, 0xFD00, AR023Z_I2C_ADDRESS },
+	{ 0xC9CE, CRL_REG_LEN_16BIT, 0x0100, AR023Z_I2C_ADDRESS },
+	{ 0xC99A, CRL_REG_LEN_16BIT, 0x0600, AR023Z_I2C_ADDRESS },
+	{ 0xC99C, CRL_REG_LEN_16BIT, 0x0B00, AR023Z_I2C_ADDRESS },
+	{ 0xC9A0, CRL_REG_LEN_16BIT, 0x00C8, AR023Z_I2C_ADDRESS },
+	{ 0xC9A2, CRL_REG_LEN_16BIT, 0x0B54, AR023Z_I2C_ADDRESS },
+	{ 0x2414, CRL_REG_LEN_16BIT, 0x0BA0, AR023Z_I2C_ADDRESS },
+	{ 0x2416, CRL_REG_LEN_16BIT, 0x0FA0, AR023Z_I2C_ADDRESS },
+	{ 0x2418, CRL_REG_LEN_16BIT, 0xC350, AR023Z_I2C_ADDRESS },
+	{ 0x241A, CRL_REG_LEN_16BIT, 0xFA00, AR023Z_I2C_ADDRESS },
+	{ 0x241C, CRL_REG_LEN_16BIT, 0x0005, AR023Z_I2C_ADDRESS },
+	{ 0x241E, CRL_REG_LEN_16BIT, 0x0050, AR023Z_I2C_ADDRESS },
+	{ 0x2420, CRL_REG_LEN_16BIT, 0x00A5, AR023Z_I2C_ADDRESS },
+	{ 0x2422, CRL_REG_LEN_16BIT, 0x00A5, AR023Z_I2C_ADDRESS },
+	{ 0x2424, CRL_REG_LEN_16BIT, 0x00A5, AR023Z_I2C_ADDRESS },
+	{ 0x2426, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC996, CRL_REG_LEN_16BIT, 0x03E8, AR023Z_I2C_ADDRESS },
+	{ 0xC998, CRL_REG_LEN_16BIT, 0x03E8, AR023Z_I2C_ADDRESS },
+	{ 0xC98A, CRL_REG_LEN_16BIT, 0x000F, AR023Z_I2C_ADDRESS },
+	{ 0xC9E6, CRL_REG_LEN_16BIT, 0x0AF0, AR023Z_I2C_ADDRESS },
+	{ 0xCA2A, CRL_REG_LEN_08BIT, 0x32, AR023Z_I2C_ADDRESS },
+	{ 0xCA2B, CRL_REG_LEN_08BIT, 0x05, AR023Z_I2C_ADDRESS },
+	{ 0xCA2E, CRL_REG_LEN_08BIT, 0x32, AR023Z_I2C_ADDRESS },
+	{ 0xCA2F, CRL_REG_LEN_08BIT, 0x0A, AR023Z_I2C_ADDRESS },
+	{ 0x3222, CRL_REG_LEN_16BIT, 0x0912, AR023Z_I2C_ADDRESS },
+	{ 0x3224, CRL_REG_LEN_16BIT, 0x0612, AR023Z_I2C_ADDRESS },
+	{ 0xCAB4, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCAAE, CRL_REG_LEN_16BIT, 0x0022, AR023Z_I2C_ADDRESS },
+	{ 0x3414, CRL_REG_LEN_16BIT, 0x3700, AR023Z_I2C_ADDRESS },
+	{ 0x3408, CRL_REG_LEN_16BIT, 0x3700, AR023Z_I2C_ADDRESS },
+	{ 0x340C, CRL_REG_LEN_16BIT, 0x2A00, AR023Z_I2C_ADDRESS },
+	{ 0x3412, CRL_REG_LEN_16BIT, 0x0400, AR023Z_I2C_ADDRESS },
+	{ 0x3416, CRL_REG_LEN_16BIT, 0x0036, AR023Z_I2C_ADDRESS },
+	{ 0x341E, CRL_REG_LEN_16BIT, 0x0004, AR023Z_I2C_ADDRESS },
+	{ 0x3420, CRL_REG_LEN_16BIT, 0x2A3B, AR023Z_I2C_ADDRESS },
+	{ 0x341A, CRL_REG_LEN_16BIT, 0x0A00, AR023Z_I2C_ADDRESS },
+	{ 0x3400, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0x3402, CRL_REG_LEN_16BIT, 0x073B, AR023Z_I2C_ADDRESS },
+	{ 0x3406, CRL_REG_LEN_16BIT, 0x0500, AR023Z_I2C_ADDRESS },
+	{ 0x3404, CRL_REG_LEN_16BIT, 0x3E1E, AR023Z_I2C_ADDRESS },
+	{ 0x3454, CRL_REG_LEN_16BIT, 0x0004, AR023Z_I2C_ADDRESS },
+	{ 0x3432, CRL_REG_LEN_16BIT, 0x000B, AR023Z_I2C_ADDRESS },
+	{ 0x3452, CRL_REG_LEN_16BIT, 0x000B, AR023Z_I2C_ADDRESS },
+	{ 0x345A, CRL_REG_LEN_16BIT, 0x000B, AR023Z_I2C_ADDRESS },
+	{ 0x3462, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0x344A, CRL_REG_LEN_16BIT, 0x0007, AR023Z_I2C_ADDRESS },
+	{ 0x342E, CRL_REG_LEN_16BIT, 0x0006, AR023Z_I2C_ADDRESS },
+	{ 0xCA20, CRL_REG_LEN_16BIT, 0x0100, AR023Z_I2C_ADDRESS },
+	{ 0xCA22, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0xCA24, CRL_REG_LEN_16BIT, 0x0C80, AR023Z_I2C_ADDRESS },
+	{ 0xCA26, CRL_REG_LEN_16BIT, 0x002D, AR023Z_I2C_ADDRESS },
+	{ 0xCA78, CRL_REG_LEN_16BIT, 0x0030, AR023Z_I2C_ADDRESS },
+	{ 0xCA80, CRL_REG_LEN_16BIT, 0x0056, AR023Z_I2C_ADDRESS },
+	{ 0xCA88, CRL_REG_LEN_16BIT, 0x0100, AR023Z_I2C_ADDRESS },
+	{ 0xCA90, CRL_REG_LEN_16BIT, 0x0200, AR023Z_I2C_ADDRESS },
+	{ 0xCA7A, CRL_REG_LEN_16BIT, 0x002D, AR023Z_I2C_ADDRESS },
+	{ 0xCA7C, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCA82, CRL_REG_LEN_16BIT, 0x0050, AR023Z_I2C_ADDRESS },
+	{ 0xCA84, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCA8A, CRL_REG_LEN_16BIT, 0x00B8, AR023Z_I2C_ADDRESS },
+	{ 0xCA8C, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCA92, CRL_REG_LEN_16BIT, 0x0173, AR023Z_I2C_ADDRESS },
+	{ 0xCA94, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCB20, CRL_REG_LEN_16BIT, 0x002D, AR023Z_I2C_ADDRESS },
+	{ 0xCB22, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCB24, CRL_REG_LEN_16BIT, 0x0050, AR023Z_I2C_ADDRESS },
+	{ 0xCB26, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCB28, CRL_REG_LEN_16BIT, 0x00B8, AR023Z_I2C_ADDRESS },
+	{ 0xCB2A, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCB2C, CRL_REG_LEN_16BIT, 0x0180, AR023Z_I2C_ADDRESS },
+	{ 0xCB2E, CRL_REG_LEN_16BIT, 0x007D, AR023Z_I2C_ADDRESS },
+	{ 0xCB40, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCB42, CRL_REG_LEN_16BIT, 0x07D0, AR023Z_I2C_ADDRESS },
+	{ 0xCB44, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xCB46, CRL_REG_LEN_16BIT, 0x0DAC, AR023Z_I2C_ADDRESS },
+	{ 0xCA70, CRL_REG_LEN_16BIT, 0x0003, AR023Z_I2C_ADDRESS },
+	{ 0xCA72, CRL_REG_LEN_16BIT, 0x0003, AR023Z_I2C_ADDRESS },
+	{ 0xCA74, CRL_REG_LEN_16BIT, 0x03E8, AR023Z_I2C_ADDRESS },
+	{ 0xCA76, CRL_REG_LEN_16BIT, 0x0D00, AR023Z_I2C_ADDRESS },
+	{ 0xCA42, CRL_REG_LEN_08BIT, 0x02, AR023Z_I2C_ADDRESS },
+	{ 0xCA43, CRL_REG_LEN_08BIT, 0x16, AR023Z_I2C_ADDRESS },
+	{ 0xCA48, CRL_REG_LEN_08BIT, 0x02, AR023Z_I2C_ADDRESS },
+	{ 0xCA49, CRL_REG_LEN_08BIT, 0x16, AR023Z_I2C_ADDRESS },
+	{ 0xCA4E, CRL_REG_LEN_08BIT, 0x14, AR023Z_I2C_ADDRESS },
+	{ 0xCA4F, CRL_REG_LEN_08BIT, 0x04, AR023Z_I2C_ADDRESS },
+	{ 0xCA5E, CRL_REG_LEN_08BIT, 0x01, AR023Z_I2C_ADDRESS },
+	{ 0xCA5F, CRL_REG_LEN_08BIT, 0x16, AR023Z_I2C_ADDRESS },
+	{ 0xCA64, CRL_REG_LEN_08BIT, 0x01, AR023Z_I2C_ADDRESS },
+	{ 0xCA65, CRL_REG_LEN_08BIT, 0x16, AR023Z_I2C_ADDRESS },
+	{ 0xCA6A, CRL_REG_LEN_08BIT, 0x1E, AR023Z_I2C_ADDRESS },
+	{ 0xCA6B, CRL_REG_LEN_08BIT, 0x05, AR023Z_I2C_ADDRESS },
+	{ 0xBC0A, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xBC0C, CRL_REG_LEN_16BIT, 0x000A, AR023Z_I2C_ADDRESS },
+	{ 0xBC0E, CRL_REG_LEN_16BIT, 0x000B, AR023Z_I2C_ADDRESS },
+	{ 0xBC10, CRL_REG_LEN_16BIT, 0x001A, AR023Z_I2C_ADDRESS },
+	{ 0xBC12, CRL_REG_LEN_16BIT, 0x0027, AR023Z_I2C_ADDRESS },
+	{ 0xBC14, CRL_REG_LEN_16BIT, 0x0032, AR023Z_I2C_ADDRESS },
+	{ 0xBC16, CRL_REG_LEN_16BIT, 0x003D, AR023Z_I2C_ADDRESS },
+	{ 0xBC18, CRL_REG_LEN_16BIT, 0x0046, AR023Z_I2C_ADDRESS },
+	{ 0xBC1A, CRL_REG_LEN_16BIT, 0x004F, AR023Z_I2C_ADDRESS },
+	{ 0xBC1C, CRL_REG_LEN_16BIT, 0x005F, AR023Z_I2C_ADDRESS },
+	{ 0xBC1E, CRL_REG_LEN_16BIT, 0x006D, AR023Z_I2C_ADDRESS },
+	{ 0xBC20, CRL_REG_LEN_16BIT, 0x007A, AR023Z_I2C_ADDRESS },
+	{ 0xBC22, CRL_REG_LEN_16BIT, 0x0087, AR023Z_I2C_ADDRESS },
+	{ 0xBC24, CRL_REG_LEN_16BIT, 0x009D, AR023Z_I2C_ADDRESS },
+	{ 0xBC26, CRL_REG_LEN_16BIT, 0x00B1, AR023Z_I2C_ADDRESS },
+	{ 0xBC28, CRL_REG_LEN_16BIT, 0x00C4, AR023Z_I2C_ADDRESS },
+	{ 0xBC2A, CRL_REG_LEN_16BIT, 0x00D6, AR023Z_I2C_ADDRESS },
+	{ 0xBC2C, CRL_REG_LEN_16BIT, 0x00F5, AR023Z_I2C_ADDRESS },
+	{ 0xBC2E, CRL_REG_LEN_16BIT, 0x0112, AR023Z_I2C_ADDRESS },
+	{ 0xBC30, CRL_REG_LEN_16BIT, 0x012D, AR023Z_I2C_ADDRESS },
+	{ 0xBC32, CRL_REG_LEN_16BIT, 0x0145, AR023Z_I2C_ADDRESS },
+	{ 0xBC34, CRL_REG_LEN_16BIT, 0x0172, AR023Z_I2C_ADDRESS },
+	{ 0xBC36, CRL_REG_LEN_16BIT, 0x019B, AR023Z_I2C_ADDRESS },
+	{ 0xBC38, CRL_REG_LEN_16BIT, 0x01C1, AR023Z_I2C_ADDRESS },
+	{ 0xBC3A, CRL_REG_LEN_16BIT, 0x01E3, AR023Z_I2C_ADDRESS },
+	{ 0xBC3C, CRL_REG_LEN_16BIT, 0x0223, AR023Z_I2C_ADDRESS },
+	{ 0xBC3E, CRL_REG_LEN_16BIT, 0x025D, AR023Z_I2C_ADDRESS },
+	{ 0xBC40, CRL_REG_LEN_16BIT, 0x0292, AR023Z_I2C_ADDRESS },
+	{ 0xBC42, CRL_REG_LEN_16BIT, 0x02C3, AR023Z_I2C_ADDRESS },
+	{ 0xBC44, CRL_REG_LEN_16BIT, 0x031D, AR023Z_I2C_ADDRESS },
+	{ 0xBC46, CRL_REG_LEN_16BIT, 0x036F, AR023Z_I2C_ADDRESS },
+	{ 0xBC48, CRL_REG_LEN_16BIT, 0x03B9, AR023Z_I2C_ADDRESS },
+	{ 0xBC4A, CRL_REG_LEN_16BIT, 0x03FF, AR023Z_I2C_ADDRESS },
+	{ 0xBC4C, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xBC4E, CRL_REG_LEN_16BIT, 0x0002, AR023Z_I2C_ADDRESS },
+	{ 0xBC50, CRL_REG_LEN_16BIT, 0x0004, AR023Z_I2C_ADDRESS },
+	{ 0xBC52, CRL_REG_LEN_16BIT, 0x0007, AR023Z_I2C_ADDRESS },
+	{ 0xBC54, CRL_REG_LEN_16BIT, 0x0009, AR023Z_I2C_ADDRESS },
+	{ 0xBC56, CRL_REG_LEN_16BIT, 0x000B, AR023Z_I2C_ADDRESS },
+	{ 0xBC58, CRL_REG_LEN_16BIT, 0x000D, AR023Z_I2C_ADDRESS },
+	{ 0xBC5A, CRL_REG_LEN_16BIT, 0x000F, AR023Z_I2C_ADDRESS },
+	{ 0xBC5C, CRL_REG_LEN_16BIT, 0x0011, AR023Z_I2C_ADDRESS },
+	{ 0xBC5E, CRL_REG_LEN_16BIT, 0x0016, AR023Z_I2C_ADDRESS },
+	{ 0xBC60, CRL_REG_LEN_16BIT, 0x001A, AR023Z_I2C_ADDRESS },
+	{ 0xBC62, CRL_REG_LEN_16BIT, 0x001F, AR023Z_I2C_ADDRESS },
+	{ 0xBC64, CRL_REG_LEN_16BIT, 0x0023, AR023Z_I2C_ADDRESS },
+	{ 0xBC66, CRL_REG_LEN_16BIT, 0x002C, AR023Z_I2C_ADDRESS },
+	{ 0xBC68, CRL_REG_LEN_16BIT, 0x0034, AR023Z_I2C_ADDRESS },
+	{ 0xBC6A, CRL_REG_LEN_16BIT, 0x003D, AR023Z_I2C_ADDRESS },
+	{ 0xBC6C, CRL_REG_LEN_16BIT, 0x0046, AR023Z_I2C_ADDRESS },
+	{ 0xBC6E, CRL_REG_LEN_16BIT, 0x0057, AR023Z_I2C_ADDRESS },
+	{ 0xBC70, CRL_REG_LEN_16BIT, 0x0069, AR023Z_I2C_ADDRESS },
+	{ 0xBC72, CRL_REG_LEN_16BIT, 0x007A, AR023Z_I2C_ADDRESS },
+	{ 0xBC74, CRL_REG_LEN_16BIT, 0x008C, AR023Z_I2C_ADDRESS },
+	{ 0xBC76, CRL_REG_LEN_16BIT, 0x00AF, AR023Z_I2C_ADDRESS },
+	{ 0xBC78, CRL_REG_LEN_16BIT, 0x00D2, AR023Z_I2C_ADDRESS },
+	{ 0xBC7A, CRL_REG_LEN_16BIT, 0x00F5, AR023Z_I2C_ADDRESS },
+	{ 0xBC7C, CRL_REG_LEN_16BIT, 0x0118, AR023Z_I2C_ADDRESS },
+	{ 0xBC7E, CRL_REG_LEN_16BIT, 0x015E, AR023Z_I2C_ADDRESS },
+	{ 0xBC80, CRL_REG_LEN_16BIT, 0x01A4, AR023Z_I2C_ADDRESS },
+	{ 0xBC82, CRL_REG_LEN_16BIT, 0x01EA, AR023Z_I2C_ADDRESS },
+	{ 0xBC84, CRL_REG_LEN_16BIT, 0x022F, AR023Z_I2C_ADDRESS },
+	{ 0xBC86, CRL_REG_LEN_16BIT, 0x02B4, AR023Z_I2C_ADDRESS },
+	{ 0xBC88, CRL_REG_LEN_16BIT, 0x032B, AR023Z_I2C_ADDRESS },
+	{ 0xBC8A, CRL_REG_LEN_16BIT, 0x0399, AR023Z_I2C_ADDRESS },
+	{ 0xBC8C, CRL_REG_LEN_16BIT, 0x03FF, AR023Z_I2C_ADDRESS },
+	{ 0xCA30, CRL_REG_LEN_16BIT, 0x0B00, AR023Z_I2C_ADDRESS },
+	{ 0xCA32, CRL_REG_LEN_16BIT, 0x0100, AR023Z_I2C_ADDRESS },
+	{ 0xCA08, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xC9C0, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xC9C2, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0xC9C8, CRL_REG_LEN_16BIT, 0x0080, AR023Z_I2C_ADDRESS },
+	{ 0xC9CA, CRL_REG_LEN_16BIT, 0x0800, AR023Z_I2C_ADDRESS },
+	{ 0xC9BC, CRL_REG_LEN_16BIT, 0x0028, AR023Z_I2C_ADDRESS },
+	{ 0xC9BE, CRL_REG_LEN_16BIT, 0x0023, AR023Z_I2C_ADDRESS },
+	{ 0xC9C4, CRL_REG_LEN_16BIT, 0x0046, AR023Z_I2C_ADDRESS },
+	{ 0xC9C6, CRL_REG_LEN_16BIT, 0x0046, AR023Z_I2C_ADDRESS },
+	{ 0xC9A4, CRL_REG_LEN_16BIT, 0x0002, AR023Z_I2C_ADDRESS },
+	{ 0xC9A6, CRL_REG_LEN_16BIT, 0x001E, AR023Z_I2C_ADDRESS },
+	{ 0xCA2C, CRL_REG_LEN_08BIT, 0x01, AR023Z_I2C_ADDRESS },
+	{ 0xCA2D, CRL_REG_LEN_08BIT, 0x03, AR023Z_I2C_ADDRESS },
+	{ 0xCA9C, CRL_REG_LEN_16BIT, 0x0700, AR023Z_I2C_ADDRESS },
+	{ 0xCAA8, CRL_REG_LEN_16BIT, 0x0100, AR023Z_I2C_ADDRESS },
+	{ 0xCAA4, CRL_REG_LEN_16BIT, 0x01C0, AR023Z_I2C_ADDRESS },
+	{ 0xCAB0, CRL_REG_LEN_16BIT, 0x00B3, AR023Z_I2C_ADDRESS },
+	{ 0xCA28, CRL_REG_LEN_08BIT, 0x5A, AR023Z_I2C_ADDRESS },
+	{ 0xA82C, CRL_REG_LEN_16BIT, 0x0880, AR023Z_I2C_ADDRESS },
+	{ 0xA82E, CRL_REG_LEN_16BIT, 0x095A, AR023Z_I2C_ADDRESS },
+	{ 0xA830, CRL_REG_LEN_16BIT, 0x0980, AR023Z_I2C_ADDRESS },
+	{ 0xA832, CRL_REG_LEN_16BIT, 0x0980, AR023Z_I2C_ADDRESS },
+	{ 0xA834, CRL_REG_LEN_16BIT, 0x0980, AR023Z_I2C_ADDRESS },
+	{ 0xA836, CRL_REG_LEN_16BIT, 0x0980, AR023Z_I2C_ADDRESS },
+	{ 0xA838, CRL_REG_LEN_16BIT, 0x0980, AR023Z_I2C_ADDRESS },
+	{ 0xA83A, CRL_REG_LEN_16BIT, 0x0980, AR023Z_I2C_ADDRESS },
+	{ 0xC88C, CRL_REG_LEN_16BIT, 0x0080, AR023Z_I2C_ADDRESS },
+	{ 0xB00C, CRL_REG_LEN_08BIT, 0x00, AR023Z_I2C_ADDRESS },
+	{ 0xC8BE, CRL_REG_LEN_16BIT, 0x0000, AR023Z_I2C_ADDRESS },
+	{ 0xB00D, CRL_REG_LEN_08BIT, 0x1E, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D00, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D01, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x3028, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0200, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x2000, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D06, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D08, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8D02, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x0001, AR023Z_I2C_ADDRESS },
+	{ 0xFC02, CRL_REG_LEN_16BIT, 0x0101, AR023Z_I2C_ADDRESS },
+	{ 0xFC04, CRL_REG_LEN_16BIT, 0x0101, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8102, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+	{ 0xFC00, CRL_REG_LEN_16BIT, 0x2800, AR023Z_I2C_ADDRESS },
+	{ 0x0040, CRL_REG_LEN_16BIT, 0x8100, AR023Z_I2C_ADDRESS },
+	{ 0x00, CRL_REG_LEN_DELAY, 20, 0x00 },
+};
+
+struct crl_sensor_detect_config ar023z_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0000, CRL_REG_LEN_16BIT, 0xFFFF, TC358778_I2C_ADDRESS },
+		.width = 15,
+	},
+	{
+		.reg = { 0x0000, CRL_REG_LEN_16BIT, 0xFFFF, AR023Z_I2C_ADDRESS },
+		.width = 16,
+	},
+};
+
+struct crl_pll_configuration ar023z_pll_configurations[] = {
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 317250000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 79312500,
+		.pixel_rate_pa = 79312500,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+};
+
+struct crl_sensor_subdev_config ar023z_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ar023z binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ar023z pixel array",
+	},
+};
+
+struct crl_register_write_rep ar023z_poweroff_regset[] = {
+	{0xFC00, CRL_REG_LEN_16BIT, 0x5000, AR023Z_I2C_ADDRESS},
+	{0x0040, CRL_REG_LEN_16BIT, 0x8100, AR023Z_I2C_ADDRESS},
+	{0x0002, CRL_REG_LEN_16BIT, 0x0001, TC358778_I2C_ADDRESS},
+};
+
+struct crl_register_write_rep ar023z_streamon_regs[] = {
+	/* Turn on D-Phy clock and enable MIPI lanes 2 and 3 */
+	{0x0140, CRL_REG_LEN_32BIT, 0x00000000, TC358778_I2C_ADDRESS}, /* CLK On */
+	{0x0144, CRL_REG_LEN_32BIT, 0x00000000, TC358778_I2C_ADDRESS}, /* lane 0 */
+	{0x0148, CRL_REG_LEN_32BIT, 0x00000000, TC358778_I2C_ADDRESS}, /* lane 1 */
+	{0x014C, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* lane 2 */
+	{0x0150, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* lane 3 */
+};
+
+struct crl_register_write_rep ar023z_streamoff_regs[] = {
+	{0x0140, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* CLK Off */
+	{0x0144, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* lane 0 */
+	{0x0148, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* lane 1 */
+	{0x014C, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* lane 2 */
+	{0x0150, CRL_REG_LEN_32BIT, 0x00010000, TC358778_I2C_ADDRESS}, /* lane 3 */
+};
+
+struct crl_subdev_rect_rep ar023z_1920_1080_rects[] = {
+	 {
+		 .subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		 .in_rect.left = 0,
+		 .in_rect.top = 0,
+		 .in_rect.width = 1920,
+		 .in_rect.height = 1080,
+		 .out_rect.left = 0,
+		 .out_rect.top = 0,
+		 .out_rect.width = 1920,
+		 .out_rect.height = 1080,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1080,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	}
+};
+
+struct crl_mode_rep ar023z_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ar023z_1920_1080_rects),
+		.sd_rects = ar023z_1920_1080_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.min_llp = 2350,
+		.min_fll = 1320,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ar023z_1920_1080),
+		.mode_regs = ar023z_1920_1080,
+	},
+};
+
+struct crl_csi_data_fmt ar023z_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = 0,
+		.regs = NULL,
+	},
+};
+
+struct crl_sensor_limits ar023z_mipi_bridge_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1920,
+	.y_addr_max = 1080,
+	.min_frame_length_lines = 320,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 380,
+	.max_line_length_pixels = 32752,
+};
+
+/* Power items, they are enabled in the order they are listed here */
+struct crl_power_seq_entity ar023z_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 27000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+	},
+};
+
+struct crl_v4l2_ctrl ar023z_v4l2_ctrls[] ={
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+struct crl_sensor_configuration ar023z_crl_configuration = {
+	.power_items = ARRAY_SIZE(ar023z_power_items),
+	.power_entities = ar023z_power_items,
+
+	.poweroff_regs_items = ARRAY_SIZE(ar023z_poweroff_regset),
+	.poweroff_regs = ar023z_poweroff_regset,
+
+	.id_reg_items = ARRAY_SIZE(ar023z_sensor_detect_regset),
+	.id_regs = ar023z_sensor_detect_regset,
+
+	.onetime_init_regs_items = 0,
+	.onetime_init_regs = NULL,
+
+	.subdev_items = ARRAY_SIZE(ar023z_sensor_subdevs),
+	.subdevs = ar023z_sensor_subdevs,
+
+	.sensor_limits = &ar023z_mipi_bridge_limits,
+
+	.pll_config_items = ARRAY_SIZE(ar023z_pll_configurations),
+	.pll_configs = ar023z_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ar023z_modes),
+	.modes = ar023z_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ar023z_streamon_regs),
+	.streamon_regs = ar023z_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ar023z_streamoff_regs),
+	.streamoff_regs = ar023z_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ar023z_v4l2_ctrls),
+	.v4l2_ctrl_bank = ar023z_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ar023z_crl_csi_data_fmt),
+	.csi_fmts = ar023z_crl_csi_data_fmt,
+
+	.flip_items = 0,
+	.flip_data = NULL,
+
+	.frame_desc_entries = 0,
+	.frame_desc_type = 0,
+	.frame_desc = 0,
+};
+
+#endif /* __CRLMODULE_AR023Z_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx132_configuration.h b/drivers/media/i2c/crlmodule/crl_imx132_configuration.h
new file mode 100644
index 000000000000..128ccb50e4f8
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx132_configuration.h
@@ -0,0 +1,699 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation */
+
+#ifndef __CRLMODULE_IMX132_CONFIGURATION_H_
+#define __CRLMODULE_IMX132_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+struct crl_register_write_rep imx132_powerup_regset[] = {
+	{ 0x3087, CRL_REG_LEN_08BIT, 0x53 },
+	{ 0x308B, CRL_REG_LEN_08BIT, 0x5A },
+	{ 0x3094, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x309D, CRL_REG_LEN_08BIT, 0xA4 },
+	{ 0x30AA, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30C6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30C7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3118, CRL_REG_LEN_08BIT, 0x2F },
+	{ 0x312A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x312B, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x312C, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x312D, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x303D, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x303E, CRL_REG_LEN_08BIT, 0x5A },
+	{ 0x3040, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3041, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3048, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x304C, CRL_REG_LEN_08BIT, 0x2F },
+	{ 0x304D, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3064, CRL_REG_LEN_08BIT, 0x92 },
+	{ 0x306A, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x309B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x309E, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x30A0, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x30A1, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x30B2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30D5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30D6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30D7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30D8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30D9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30DA, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30DB, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30DC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30DD, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30DE, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3102, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3103, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x3104, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3105, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3106, CRL_REG_LEN_08BIT, 0x65 },
+	{ 0x3107, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3108, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x3109, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x310A, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x315C, CRL_REG_LEN_08BIT, 0x3D },
+	{ 0x315D, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0x316E, CRL_REG_LEN_08BIT, 0x3E },
+	{ 0x316F, CRL_REG_LEN_08BIT, 0x3D },
+	{ 0x020e, CRL_REG_LEN_16BIT, 0x0100 },
+	{ 0x0210, CRL_REG_LEN_16BIT, 0x01a0 },
+	{ 0x0212, CRL_REG_LEN_16BIT, 0x0200 },
+	{ 0x0214, CRL_REG_LEN_16BIT, 0x0100 },
+	{ 0x0204, CRL_REG_LEN_16BIT, 0x0000 },
+	{ 0x0202, CRL_REG_LEN_16BIT, 0x0000 },
+	{ 0x0600, CRL_REG_LEN_16BIT, 0x0000 },
+	{ 0x0602, CRL_REG_LEN_16BIT, 0x03ff },
+	{ 0x0604, CRL_REG_LEN_16BIT, 0x03ff },
+	{ 0x0606, CRL_REG_LEN_16BIT, 0x03ff },
+	{ 0x0608, CRL_REG_LEN_16BIT, 0x03ff },
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+/*
+	.input_clk = 24000000,
+	.op_sys_clk = 405000000,
+	.bitsperpixel = 10,
+	.pixel_rate_csi = 810000000,
+	.pixel_rate_pa = 768000000,
+	.comp_items = 0,
+	.ctrl_data = 0,
+	.pll_regs_items = ARRAY_SIZE(imx132_pll_384),
+	.pll_regs = imx132_pll_384,
+*/
+struct crl_register_write_rep imx132_pll_405[] = {
+	/* PLL setting */
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x87 },
+	{ 0x30A4, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x303C, CRL_REG_LEN_08BIT, 0x4B },
+	/* Global timing */
+	{ 0x3304, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3305, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x3306, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x3307, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3308, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x3309, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x330A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x330B, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x330C, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x330D, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x330E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3318, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0x3322, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3342, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3348, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3301, CRL_REG_LEN_08BIT, 0x00 }, /* Lanes = 2*/
+};
+
+struct crl_register_write_rep imx132_pll_312[] = {
+	/* PLL setting */
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x30A4, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x303C, CRL_REG_LEN_08BIT, 0x4B },
+	/* Global timing */
+	{ 0x3304, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3305, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x3306, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x3307, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3308, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x3309, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x330A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x330B, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x330C, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x330D, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x330E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3318, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0x3322, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3342, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3348, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3301, CRL_REG_LEN_08BIT, 0x01 }, /* Lanes = 1*/
+};
+
+struct crl_register_write_rep imx132_mode_1080P[] = {
+	{0x0344, CRL_REG_LEN_08BIT, 0x00},
+	{0x0345, CRL_REG_LEN_08BIT, 0x14},
+	{0x0346, CRL_REG_LEN_08BIT, 0x00},
+	{0x0347, CRL_REG_LEN_08BIT, 0x32},
+	{0x0348, CRL_REG_LEN_08BIT, 0x07},
+	{0x0349, CRL_REG_LEN_08BIT, 0xA3},
+	{0x034A, CRL_REG_LEN_08BIT, 0x04},
+	{0x034B, CRL_REG_LEN_08BIT, 0x79},
+	{0x034C, CRL_REG_LEN_08BIT, 0x07},
+	{0x034D, CRL_REG_LEN_08BIT, 0x90},
+	{0x034E, CRL_REG_LEN_08BIT, 0x04},
+	{0x034F, CRL_REG_LEN_08BIT, 0x48},
+	{0x0381, CRL_REG_LEN_08BIT, 0x01},
+	{0x0383, CRL_REG_LEN_08BIT, 0x01},
+	{0x0385, CRL_REG_LEN_08BIT, 0x01},
+	{0x0387, CRL_REG_LEN_08BIT, 0x01},
+};
+
+struct crl_register_write_rep imx132_mode_1636x1096[] = {
+	{0x0344, CRL_REG_LEN_08BIT, 0x00},
+	{0x0345, CRL_REG_LEN_08BIT, 0xAA},
+	{0x0346, CRL_REG_LEN_08BIT, 0x00},
+	{0x0347, CRL_REG_LEN_08BIT, 0x32},
+	{0x0348, CRL_REG_LEN_08BIT, 0x07},
+	{0x0349, CRL_REG_LEN_08BIT, 0x0D},
+	{0x034A, CRL_REG_LEN_08BIT, 0x04},
+	{0x034B, CRL_REG_LEN_08BIT, 0x79},
+	{0x034C, CRL_REG_LEN_08BIT, 0x06},
+	{0x034D, CRL_REG_LEN_08BIT, 0x64},
+	{0x034E, CRL_REG_LEN_08BIT, 0x04},
+	{0x034F, CRL_REG_LEN_08BIT, 0x48},
+	{0x0381, CRL_REG_LEN_08BIT, 0x01},
+	{0x0383, CRL_REG_LEN_08BIT, 0x01},
+	{0x0385, CRL_REG_LEN_08BIT, 0x01},
+	{0x0387, CRL_REG_LEN_08BIT, 0x01},
+};
+
+struct crl_register_write_rep imx132_fll_regs[] = {
+	{ 0x0340, CRL_REG_LEN_16BIT, 0x045c }, /* LLP and FLL */
+};
+
+struct crl_register_write_rep imx132_llp_regs[] = {
+	{ 0x0342, CRL_REG_LEN_16BIT, 0x08fc }, /* LLP and FLL */
+};
+
+struct crl_register_write_rep imx132_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+struct crl_register_write_rep imx132_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+struct crl_register_write_rep imx132_data_fmt_width10[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0a0a }
+};
+
+struct crl_register_write_rep imx132_data_fmt_width8[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0808 }
+};
+
+struct crl_subdev_rect_rep imx132_1080P_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1976,
+		.in_rect.height = 1200,
+		.out_rect.left = 20,
+		.out_rect.top = 50,
+		.out_rect.width = 1936,
+		.out_rect.height = 1096,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1936,
+		.in_rect.height = 1096,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1936,
+		.out_rect.height = 1096,
+	},
+};
+
+struct crl_subdev_rect_rep imx132_1636x1096_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1976,
+		.in_rect.height = 1200,
+		.out_rect.left = 170,
+		.out_rect.top = 50,
+		.out_rect.width = 1636,
+		.out_rect.height = 1096,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1636,
+		.in_rect.height = 1096,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1636,
+		.out_rect.height = 1096,
+	},
+};
+
+struct crl_mode_rep imx132_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx132_1636x1096_rects),
+		.sd_rects = imx132_1636x1096_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1636,
+		.height = 1096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx132_mode_1636x1096),
+		.mode_regs = imx132_mode_1636x1096,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx132_1080P_rects),
+		.sd_rects = imx132_1080P_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1936,
+		.height = 1096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx132_mode_1080P),
+		.mode_regs = imx132_mode_1080P,
+	},
+};
+
+struct crl_register_write_rep imx132_poweroff_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+struct crl_sensor_detect_config imx132_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0003, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+	{
+		.reg = { 0x0000, CRL_REG_LEN_16BIT, 0x0000ffff },
+		.width = 7,
+	},
+};
+
+struct crl_sensor_subdev_config imx132_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx132 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx132 pixel array",
+	},
+};
+
+struct crl_pll_configuration imx132_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 312000000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 624000000,
+		.pixel_rate_pa = 624000000,
+		.csi_lanes = 1,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx132_pll_312),
+		.pll_regs = imx132_pll_312,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 405000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 810000000,
+		.pixel_rate_pa = 810000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx132_pll_405),
+		.pll_regs = imx132_pll_405,
+	},
+};
+
+struct crl_sensor_limits imx132_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1976,
+	.y_addr_max = 1200,
+	.min_frame_length_lines = 202,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 560,
+	.max_line_length_pixels = 65520,
+};
+
+struct crl_flip_data imx132_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+};
+
+struct crl_csi_data_fmt imx132_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = imx132_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx132_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx132_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx132_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx132_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx132_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx132_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx132_data_fmt_width8,
+	},
+};
+
+struct crl_dynamic_register_access imx132_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+	},
+};
+
+
+struct crl_dynamic_register_access imx132_ana_gain_global_regs[] = {
+	{
+		.address = 0x0204,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+	},
+};
+
+struct crl_dynamic_register_access imx132_exposure_regs[] = {
+	{
+		.address = 0x0202,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+	}
+};
+
+struct crl_dynamic_register_access imx132_vblank_regs[] = {
+	{
+		.address = 0x0340,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+	},
+};
+
+struct crl_dynamic_register_access imx132_hblank_regs[] = {
+	{
+		.address = 0x0342,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+	},
+};
+
+static struct crl_dynamic_register_access imx132_test_pattern_regs[] = {
+	{
+		.address = 0x0600,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+	},
+};
+
+static const char * const imx132_test_patterns[] = {
+	"Disabled",
+	"Solid Colour",
+	"Eight Vertical Colour Bars",
+	"Fade to Gray",
+	"PN9",
+};
+
+struct crl_v4l2_ctrl imx132_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 220,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx132_ana_gain_global_regs),
+		.regs = imx132_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx132_exposure_regs),
+		.regs = imx132_exposure_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx132_flip_regs),
+		.regs = imx132_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx132_flip_regs),
+		.regs = imx132_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VBLANK,
+		.name = "V4L2_CID_VBLANK",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = -65535,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx132_vblank_regs),
+		.regs = imx132_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_HBLANK,
+		.name = "V4L2_CID_HBLANK",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx132_hblank_regs),
+		.regs = imx132_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_TEST_PATTERN,
+		.name = "V4L2_CID_TEST_PATTERN",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+		.data.v4l2_menu_items.menu = imx132_test_patterns,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(imx132_test_patterns),
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx132_test_pattern_regs),
+		.regs = imx132_test_pattern_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+struct crl_sensor_configuration imx132_crl_configuration = {
+
+	.powerup_regs_items = ARRAY_SIZE(imx132_powerup_regset),
+	.powerup_regs = imx132_powerup_regset,
+
+	.poweroff_regs_items = ARRAY_SIZE(imx132_poweroff_regset),
+	.poweroff_regs = imx132_poweroff_regset,
+
+	.id_reg_items = ARRAY_SIZE(imx132_sensor_detect_regset),
+	.id_regs = imx132_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx132_sensor_subdevs),
+	.subdevs = imx132_sensor_subdevs,
+
+	.sensor_limits = &imx132_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx132_pll_configurations),
+	.pll_configs = imx132_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx132_modes),
+	.modes = imx132_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(imx132_streamon_regs),
+	.streamon_regs = imx132_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx132_streamoff_regs),
+	.streamoff_regs = imx132_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx132_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx132_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx132_crl_csi_data_fmt),
+	.csi_fmts = imx132_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx132_flip_configurations),
+	.flip_data = imx132_flip_configurations,
+};
+
+#endif /* __CRLMODULE_IMX132_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx135_configuration.h b/drivers/media/i2c/crlmodule/crl_imx135_configuration.h
new file mode 100644
index 000000000000..26a38b14864a
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx135_configuration.h
@@ -0,0 +1,779 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation */
+
+#ifndef __CRLMODULE_IMX135_CONFIGURATION_H_
+#define __CRLMODULE_IMX135_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+/* MIPI 451.2MHz 902.4mbps PIXCLK: 360.96MHz */
+static struct crl_register_write_rep imx135_pll_451[] = {
+	{ 0x011e, CRL_REG_LEN_08BIT, 0x13 }, /* This is not correct for 24MHz* */
+	{ 0x011f, CRL_REG_LEN_08BIT, 0x33 }, /* But it is that way in vendor sheets */
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x030b, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030c, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x030d, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x030e, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3a06, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0830, CRL_REG_LEN_08BIT, 0x87 },
+	{ 0x0831, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x0832, CRL_REG_LEN_08BIT, 0x67 },
+	{ 0x0833, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x0834, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x0835, CRL_REG_LEN_08BIT, 0x4f },
+	{ 0x0836, CRL_REG_LEN_08BIT, 0xdf },
+	{ 0x0837, CRL_REG_LEN_08BIT, 0x47 },
+	{ 0x0839, CRL_REG_LEN_08BIT, 0x1f },
+	{ 0x083a, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x083b, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0108, CRL_REG_LEN_08BIT, 0x03 }, /* CSI lane */
+};
+
+
+static struct crl_register_write_rep imx135_powerup_regset[] = {
+	{ 0x0101, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0105, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0110, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3302, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x3833, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3893, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3906, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3907, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x391B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3C09, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x600A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3008, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x320A, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x320D, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3216, CRL_REG_LEN_08BIT, 0x2E },
+	{ 0x322C, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3409, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x340C, CRL_REG_LEN_08BIT, 0x2D },
+	{ 0x3411, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x3414, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x3427, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3480, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x3484, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x3488, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x348C, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x3490, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x3494, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x3511, CRL_REG_LEN_08BIT, 0x8F },
+	{ 0x364F, CRL_REG_LEN_08BIT, 0x2D },
+	{ 0x0700, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3a63, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4100, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x4203, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4100, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x441c, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020e, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx135_mode_13M[] = {
+	{ 0x0108, CRL_REG_LEN_08BIT, 0x03 }, /* lanes */
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0390, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0391, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0392, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4082, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4083, CRL_REG_LEN_08BIT, 0x11 }, /* Sony settings do not work */
+	{ 0x4203, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x7006, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x2F },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x0350, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0351, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0352, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0353, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0354, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0355, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x0356, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x0357, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x301D, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3310, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3311, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3312, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3313, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x331C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x331D, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4084, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4085, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4086, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4087, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4400, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx135_mode_1936M_binn_scale[] = {
+
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0390, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0391, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0392, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x4082, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4083, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x7006, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x2E },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x8C },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xA7 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x0350, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0351, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0352, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0353, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0354, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x0355, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0356, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0357, CRL_REG_LEN_08BIT, 0x8E },
+	{ 0x301D, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3310, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3311, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x3312, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3313, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x331C, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x331D, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x4084, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4085, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x4086, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4087, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x4400, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx135_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep imx135_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep imx135_data_fmt_width10[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0a0a }
+};
+
+static struct crl_register_write_rep imx135_data_fmt_width8[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0808 }
+};
+
+static struct crl_arithmetic_ops imx135_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_dynamic_register_access imx135_h_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	},
+};
+
+static struct crl_dynamic_register_access imx135_v_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx135_vflip_ops),
+		.ops = imx135_vflip_ops,
+		.mask = 0x2,
+	},
+};
+
+
+static struct crl_dynamic_register_access imx135_ana_gain_global_regs[] = {
+	{
+		.address = 0x0205,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access imx135_exposure_regs[] = {
+	{
+		.address = 0x0202,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_dynamic_register_access imx135_vblank_regs[] = {
+	{
+		.address = 0x0340,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx135_hblank_regs[] = {
+	{
+		.address = 0x0342,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+static struct crl_sensor_detect_config imx135_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0019, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+	{
+		.reg = { 0x0016, CRL_REG_LEN_16BIT, 0x0000ffff },
+		.width = 7,
+	},
+};
+
+static struct crl_pll_configuration imx135_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 451200000,
+		.pixel_rate_csi = 360960000,
+		.pixel_rate_pa = 360960000,
+		.bitsperpixel = 10,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.csi_lanes = 4,
+		.pll_regs_items = ARRAY_SIZE(imx135_pll_451),
+		.pll_regs = imx135_pll_451,
+	},
+};
+
+static struct crl_subdev_rect_rep imx135_13M_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+};
+
+static struct crl_subdev_rect_rep imx135_mode_1936M_binn_scale_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 46,
+		.out_rect.top = 396,
+		.out_rect.width = 4116,
+		.out_rect.height = 2332,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4116,
+		.in_rect.height = 2332,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2058,
+		.out_rect.height = 1166,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 2058,
+		.in_rect.height = 1166,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1936,
+		.out_rect.height = 1096,
+	},
+};
+
+static struct crl_mode_rep imx135_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx135_13M_rects),
+		.sd_rects = imx135_13M_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4208,
+		.height = 3120,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx135_mode_13M),
+		.mode_regs = imx135_mode_13M,
+	},
+	{
+		.sd_rects_items =
+			ARRAY_SIZE(imx135_mode_1936M_binn_scale_rects),
+		.sd_rects = imx135_mode_1936M_binn_scale_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 17,
+		.width = 1936,
+		.height = 1096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx135_mode_1936M_binn_scale),
+		.mode_regs = imx135_mode_1936M_binn_scale,
+	},
+};
+
+static struct crl_sensor_subdev_config imx135_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "imx135 scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx135 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx135 pixel array",
+	},
+};
+
+static struct crl_sensor_limits imx135_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 4208,
+	.y_addr_max = 3120,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 4572,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 255,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data imx135_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+};
+
+static struct crl_csi_data_fmt imx135_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = imx135_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx135_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx135_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx135_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx135_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx135_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx135_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx135_data_fmt_width8,
+	},
+};
+
+static struct crl_dynamic_register_access imx135_test_pattern_regs[] = {
+	{
+		.address = 0x0600,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static const char * const imx135_test_patterns[] = {
+	"Disabled",
+	"Solid Colour",
+	"Eight Vertical Colour Bars",
+};
+
+static const s64 imx135_op_sys_clock[] =  { 451200000 };
+
+static struct crl_v4l2_ctrl imx135_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max =
+			ARRAY_SIZE(imx135_pll_configurations) - 1,
+		.data.v4l2_int_menu.menu = imx135_op_sys_clock,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.data.std_data.min = 0,
+		.data.std_data.max = 224,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_ana_gain_global_regs),
+		.regs = imx135_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_EXPOSURE",
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4500,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_exposure_regs),
+		.regs = imx135_exposure_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_HFLIP",
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_h_flip_regs),
+		.regs = imx135_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_VFLIP",
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_v_flip_regs),
+		.regs = imx135_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_TEST_PATTERN,
+		.name = "V4L2_CID_TEST_PATTERN",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+		.data.v4l2_menu_items.menu = imx135_test_patterns,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(imx135_test_patterns),
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_test_pattern_regs),
+		.regs = imx135_test_pattern_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 3800,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_vblank_regs),
+		.regs = imx135_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 4280,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4600,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx135_hblank_regs),
+		.regs = imx135_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity imx135_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VANA",
+		.val = 2700000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VDIG",
+		.val = 1100000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+		.delay = 2000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.delay = 250,
+	},
+};
+
+
+static struct crl_sensor_configuration imx135_crl_configuration = {
+
+	.powerup_regs_items = ARRAY_SIZE(imx135_powerup_regset),
+	.powerup_regs = imx135_powerup_regset,
+
+	.power_items = ARRAY_SIZE(imx135_power_items),
+	.power_entities = imx135_power_items,
+
+	.id_reg_items = ARRAY_SIZE(imx135_sensor_detect_regset),
+	.id_regs = imx135_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx135_sensor_subdevs),
+	.subdevs = imx135_sensor_subdevs,
+
+	.sensor_limits = &imx135_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx135_pll_configurations),
+	.pll_configs = imx135_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx135_modes),
+	.modes = imx135_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(imx135_streamon_regs),
+	.streamon_regs = imx135_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx135_streamoff_regs),
+	.streamoff_regs = imx135_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx135_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx135_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx135_crl_csi_data_fmt),
+	.csi_fmts = imx135_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx135_flip_configurations),
+	.flip_data = imx135_flip_configurations,
+};
+
+
+#endif  /* __CRLMODULE_IMX135_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx185_configuration.h b/drivers/media/i2c/crlmodule/crl_imx185_configuration.h
new file mode 100644
index 000000000000..168455b63d20
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx185_configuration.h
@@ -0,0 +1,1772 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Shuguang Gong <shuguang.gong@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_IMX185_CONFIGURATION_H_
+#define __CRLMODULE_IMX185_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define IMX185_REG_STANDBY		0x3000
+#define IMX185_REG_XMSTA		0x3002
+#define IMX185_REG_SW_RESET		0x3003
+
+#define IMX185_HMAX			65535
+#define IMX185_VMAX			131071
+#define IMX185_MAX_SHS1			(IMX185_VMAX - 2)
+
+struct crl_ctrl_data_pair ctrl_data_modes[] = {
+	{
+		.ctrl_id = V4L2_CID_WDR_MODE,
+		.data = 0,
+	},
+	{
+		.ctrl_id = V4L2_CID_WDR_MODE,
+		.data = 1,
+	},
+};
+
+/* 111Mbps for imx185 720p 30fps */
+static struct crl_register_write_rep imx185_pll_111mbps[] = {
+	{0x3009, CRL_REG_LEN_08BIT, 0x02},	/* frame speed */
+	{0x300A, CRL_REG_LEN_08BIT, 0x3C},
+	{0x300C, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0xee},
+	{0x3019, CRL_REG_LEN_08BIT, 0x02},
+	{0x301b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x301c, CRL_REG_LEN_08BIT, 0x0C},
+	{0x300F, CRL_REG_LEN_08BIT, 0x01},
+	{0x3010, CRL_REG_LEN_08BIT, 0x39},
+	{0x3012, CRL_REG_LEN_08BIT, 0x50},
+	{0x3056, CRL_REG_LEN_08BIT, 0xC9},
+	{0x3057, CRL_REG_LEN_08BIT, 0x64},
+	{0x3065, CRL_REG_LEN_08BIT, 0x00},
+	{0x3084, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3086, CRL_REG_LEN_08BIT, 0x10},
+	{0x30CF, CRL_REG_LEN_08BIT, 0xE1},
+	{0x30D0, CRL_REG_LEN_08BIT, 0x29},
+	{0x30D2, CRL_REG_LEN_08BIT, 0x9B},
+	{0x30D3, CRL_REG_LEN_08BIT, 0x01},
+	{0x30E1, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3303, CRL_REG_LEN_08BIT, 0x20},	/* repetation */
+	{0x3305, CRL_REG_LEN_08BIT, 0x03},	/* 1: 2lanes, 3: 4lanes */
+	{0x332C, CRL_REG_LEN_08BIT, 0x28},	/* mipi timing */
+	{0x332D, CRL_REG_LEN_08BIT, 0x20},
+	{0x3341, CRL_REG_LEN_08BIT, 0x00},
+	{0x3342, CRL_REG_LEN_08BIT, 0x1B},
+	{0x3343, CRL_REG_LEN_08BIT, 0x58},
+	{0x3344, CRL_REG_LEN_08BIT, 0x0C},
+	{0x3345, CRL_REG_LEN_08BIT, 0x24},
+	{0x3346, CRL_REG_LEN_08BIT, 0x10},
+	{0x3347, CRL_REG_LEN_08BIT, 0x0B},
+	{0x3348, CRL_REG_LEN_08BIT, 0x08},
+	{0x3349, CRL_REG_LEN_08BIT, 0x30},
+	{0x334A, CRL_REG_LEN_08BIT, 0x20},
+};
+
+/* 222Mbps for imx185 1080p 30fps */
+static struct crl_register_write_rep imx185_pll_222mbps[] = {
+	{0x3009, CRL_REG_LEN_08BIT, 0x02},	/* frame speed */
+	{0x300A, CRL_REG_LEN_08BIT, 0x3C},
+	{0x300C, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0x98},
+	{0x301c, CRL_REG_LEN_08BIT, 0x08},
+	{0x300F, CRL_REG_LEN_08BIT, 0x01},
+	{0x3010, CRL_REG_LEN_08BIT, 0x39},
+	{0x3012, CRL_REG_LEN_08BIT, 0x50},
+	{0x3056, CRL_REG_LEN_08BIT, 0xC9},
+	{0x3057, CRL_REG_LEN_08BIT, 0x64},
+	{0x3065, CRL_REG_LEN_08BIT, 0x00},
+	{0x3084, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x01},
+	{0x30CF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x30D0, CRL_REG_LEN_08BIT, 0x1B},
+	{0x30D2, CRL_REG_LEN_08BIT, 0x5F},
+	{0x30D3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30E1, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3303, CRL_REG_LEN_08BIT, 0x10},	/* repetation */
+	{0x3305, CRL_REG_LEN_08BIT, 0x03},	/* 1: 2lanes, 3: 4lanes */
+	{0x332C, CRL_REG_LEN_08BIT, 0x30},	/* mipi timing */
+	{0x332D, CRL_REG_LEN_08BIT, 0x20},
+	{0x3341, CRL_REG_LEN_08BIT, 0x00},
+	{0x3342, CRL_REG_LEN_08BIT, 0x1B},
+	{0x3343, CRL_REG_LEN_08BIT, 0x58},
+	{0x3344, CRL_REG_LEN_08BIT, 0x10},
+	{0x3345, CRL_REG_LEN_08BIT, 0x30},
+	{0x3346, CRL_REG_LEN_08BIT, 0x18},
+	{0x3347, CRL_REG_LEN_08BIT, 0x10},
+	{0x3348, CRL_REG_LEN_08BIT, 0x10},
+	{0x3349, CRL_REG_LEN_08BIT, 0x48},
+	{0x334A, CRL_REG_LEN_08BIT, 0x28},
+};
+
+/* 445Mbps for imx185 1080p 60fps */
+static struct crl_register_write_rep imx185_pll_445mbps[] = {
+	{0x3009, CRL_REG_LEN_08BIT, 0x01},	/* frame speed */
+	{0x300A, CRL_REG_LEN_08BIT, 0x3C},	/* BLK */
+	{0x300C, CRL_REG_LEN_08BIT, 0x00},	/* fixed settings */
+	{0x3018, CRL_REG_LEN_08BIT, 0x65},
+	{0x3019, CRL_REG_LEN_08BIT, 0x04},
+	{0x301B, CRL_REG_LEN_08BIT, 0x4C},
+	{0x301C, CRL_REG_LEN_08BIT, 0x04},
+	{0x300F, CRL_REG_LEN_08BIT, 0x01},
+	{0x3010, CRL_REG_LEN_08BIT, 0x39},
+	{0x3012, CRL_REG_LEN_08BIT, 0x50},
+	{0x3056, CRL_REG_LEN_08BIT, 0xC9},
+	{0x3057, CRL_REG_LEN_08BIT, 0x64},
+	{0x3065, CRL_REG_LEN_08BIT, 0x20},
+	{0x3084, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x01},
+	{0x30CF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x30D0, CRL_REG_LEN_08BIT, 0x1B},
+	{0x30D2, CRL_REG_LEN_08BIT, 0x5F},
+	{0x30D3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30E1, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3303, CRL_REG_LEN_08BIT, 0x00},	/* repetation */
+	{0x3305, CRL_REG_LEN_08BIT, 0x03},
+	{0x332C, CRL_REG_LEN_08BIT, 0x40},	/* mipi timing */
+	{0x332D, CRL_REG_LEN_08BIT, 0x20},
+	{0x3341, CRL_REG_LEN_08BIT, 0x00},
+	{0x3342, CRL_REG_LEN_08BIT, 0x1B},
+	{0x3343, CRL_REG_LEN_08BIT, 0x68},
+	{0x3344, CRL_REG_LEN_08BIT, 0x20},
+	{0x3345, CRL_REG_LEN_08BIT, 0x40},
+	{0x3346, CRL_REG_LEN_08BIT, 0x28},
+	{0x3347, CRL_REG_LEN_08BIT, 0x20},
+	{0x3348, CRL_REG_LEN_08BIT, 0x18},
+	{0x3349, CRL_REG_LEN_08BIT, 0x78},
+	{0x334A, CRL_REG_LEN_08BIT, 0x28},
+};
+
+static struct crl_register_write_rep imx185_fmt_raw10[] = {
+	{0x333E, CRL_REG_LEN_08BIT, 0x0a},	/* FMT RAW10 */
+	{0x333F, CRL_REG_LEN_08BIT, 0x0a},
+};
+
+static struct crl_register_write_rep imx185_fmt_raw12[] = {
+	{0x333E, CRL_REG_LEN_08BIT, 0x0c},	/* FMT RAW12 */
+	{0x333F, CRL_REG_LEN_08BIT, 0x0c},
+};
+
+static struct crl_register_write_rep imx185_powerup_standby[] = {
+	{0x3000, CRL_REG_LEN_08BIT, 0x01},
+	{0x00, CRL_REG_LEN_DELAY, 50, 0x00},
+	{0x3002, CRL_REG_LEN_08BIT, 0x01},
+	{0x00, CRL_REG_LEN_DELAY, 200, 0x00},
+};
+
+static struct crl_register_write_rep imx185_1312_728_27MHZ_CROPPING[] = {
+	/* 0x02h */
+	{0x3005, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT: 10/12 ADBIT:
+						10/12 , raw 10 */
+	{0x3007, CRL_REG_LEN_08BIT, 0x60},	/* mode selection */
+	{0x301D, CRL_REG_LEN_08BIT, 0x08},
+	{0x301E, CRL_REG_LEN_08BIT, 0x02},
+	{0x3044, CRL_REG_LEN_08BIT, 0xE1},
+	{0x3048, CRL_REG_LEN_08BIT, 0x33},
+	{0x305C, CRL_REG_LEN_08BIT, 0x2c},
+	{0x305E, CRL_REG_LEN_08BIT, 0x21},
+	{0x3063, CRL_REG_LEN_08BIT, 0x54},
+	/* Crop settings */
+	{0x3038, CRL_REG_LEN_08BIT, 0x00},	/* WPV = 0 */
+	{0x3039, CRL_REG_LEN_08BIT, 0x00},
+	{0x303A, CRL_REG_LEN_08BIT, 0xE0},	/* WV = PIC_SIZE + 8 */
+	{0x303B, CRL_REG_LEN_08BIT, 0x02},
+	{0x303C, CRL_REG_LEN_08BIT, 0x04},	/* WPH = 4 */
+	{0x303D, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x1C},	/* Effective size = 1308*/
+	{0x303F, CRL_REG_LEN_08BIT, 0x05},
+	/* 0x03h */
+	{0x311D, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3123, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3147, CRL_REG_LEN_08BIT, 0x87},
+	{0x31E1, CRL_REG_LEN_08BIT, 0x9E},
+	{0x31E2, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E5, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E6, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E7, CRL_REG_LEN_08BIT, 0x3A},
+	{0x31E8, CRL_REG_LEN_08BIT, 0x3A},
+	/* 0x04h */
+	{0x3203, CRL_REG_LEN_08BIT, 0xC8},
+	{0x3207, CRL_REG_LEN_08BIT, 0x54},
+	{0x3213, CRL_REG_LEN_08BIT, 0x16},
+	{0x3215, CRL_REG_LEN_08BIT, 0xF6},
+	{0x321A, CRL_REG_LEN_08BIT, 0x14},
+	{0x321B, CRL_REG_LEN_08BIT, 0x51},
+	{0x3229, CRL_REG_LEN_08BIT, 0xE7},
+	{0x322A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x322B, CRL_REG_LEN_08BIT, 0x10},
+	{0x3231, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3232, CRL_REG_LEN_08BIT, 0xF0},
+	{0x3233, CRL_REG_LEN_08BIT, 0x10},
+	{0x323C, CRL_REG_LEN_08BIT, 0xE8},
+	{0x323D, CRL_REG_LEN_08BIT, 0x70},
+	{0x3243, CRL_REG_LEN_08BIT, 0x08},
+	{0x3244, CRL_REG_LEN_08BIT, 0xE1},
+	{0x3245, CRL_REG_LEN_08BIT, 0x10},
+	{0x3247, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3248, CRL_REG_LEN_08BIT, 0x60},
+	{0x3249, CRL_REG_LEN_08BIT, 0x1E},
+	{0x324B, CRL_REG_LEN_08BIT, 0x00},
+	{0x324C, CRL_REG_LEN_08BIT, 0x41},
+	{0x3250, CRL_REG_LEN_08BIT, 0x30},
+	{0x3251, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3252, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3253, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3254, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3255, CRL_REG_LEN_08BIT, 0x02},
+	{0x3257, CRL_REG_LEN_08BIT, 0xF0},
+	{0x325A, CRL_REG_LEN_08BIT, 0xA6},
+	{0x325D, CRL_REG_LEN_08BIT, 0x14},
+	{0x325E, CRL_REG_LEN_08BIT, 0x51},
+	{0x3261, CRL_REG_LEN_08BIT, 0x61},
+	{0x3266, CRL_REG_LEN_08BIT, 0x30},
+	{0x3267, CRL_REG_LEN_08BIT, 0x05},
+	{0x3275, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3281, CRL_REG_LEN_08BIT, 0xEA},
+	{0x3282, CRL_REG_LEN_08BIT, 0x70},
+	{0x3285, CRL_REG_LEN_08BIT, 0xFF},
+	{0x328A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x328D, CRL_REG_LEN_08BIT, 0xB6},
+	{0x328E, CRL_REG_LEN_08BIT, 0x40},
+	{0x3290, CRL_REG_LEN_08BIT, 0x42},
+	{0x3291, CRL_REG_LEN_08BIT, 0x51},
+	{0x3292, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3294, CRL_REG_LEN_08BIT, 0xC4},
+	{0x3295, CRL_REG_LEN_08BIT, 0x20},
+	{0x3297, CRL_REG_LEN_08BIT, 0x50},
+	{0x3298, CRL_REG_LEN_08BIT, 0x31},
+	{0x3299, CRL_REG_LEN_08BIT, 0x1F},
+	{0x329B, CRL_REG_LEN_08BIT, 0xC0},
+	{0x329C, CRL_REG_LEN_08BIT, 0x60},
+	{0x329E, CRL_REG_LEN_08BIT, 0x4C},
+	{0x329F, CRL_REG_LEN_08BIT, 0x71},
+	{0x32A0, CRL_REG_LEN_08BIT, 0x1F},
+	{0x32A2, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32A3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32A4, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32A9, CRL_REG_LEN_08BIT, 0x24},
+	{0x32AA, CRL_REG_LEN_08BIT, 0x41},
+	{0x32B0, CRL_REG_LEN_08BIT, 0x25},
+	{0x32B1, CRL_REG_LEN_08BIT, 0x51},
+	{0x32B7, CRL_REG_LEN_08BIT, 0x1C},
+	{0x32B8, CRL_REG_LEN_08BIT, 0xC1},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x12},
+	{0x32BE, CRL_REG_LEN_08BIT, 0x1D},
+	{0x32BF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x32C0, CRL_REG_LEN_08BIT, 0x12},
+	{0x32C2, CRL_REG_LEN_08BIT, 0xA8},
+	{0x32C3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32C4, CRL_REG_LEN_08BIT, 0x0A},
+	{0x32C5, CRL_REG_LEN_08BIT, 0x1E},
+	{0x32C6, CRL_REG_LEN_08BIT, 0x21},
+	{0x32C9, CRL_REG_LEN_08BIT, 0xB0},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x40},
+	{0x32CC, CRL_REG_LEN_08BIT, 0x26},
+	{0x32CD, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32D0, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32D1, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32D2, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32D4, CRL_REG_LEN_08BIT, 0xE2},
+	{0x32D5, CRL_REG_LEN_08BIT, 0x40},
+	{0x32D8, CRL_REG_LEN_08BIT, 0x4E},
+	{0x32D9, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32EC, CRL_REG_LEN_08BIT, 0xF0},
+	/* 0x05h */
+	{0x3316, CRL_REG_LEN_08BIT, 0x02},
+	{0x3317, CRL_REG_LEN_08BIT, 0x02},
+	{0x3318, CRL_REG_LEN_08BIT, 0xD8},	/* PIC_SIZE = 728 */
+	{0x3319, CRL_REG_LEN_08BIT, 0x02},
+	{0x334E, CRL_REG_LEN_08BIT, 0x3D},	/* INCL selection 27MHz */
+	{0x334F, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep imx185_1952_1096_27MHZ[] = {
+	/* 0x02h */
+	{0x3005, CRL_REG_LEN_08BIT, 0x01},	/* ADBIT: 10/12 */
+	{0x3007, CRL_REG_LEN_08BIT, 0x10},	/* 1080p mode */
+	{0x300A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x301D, CRL_REG_LEN_08BIT, 0x08},
+	{0x301E, CRL_REG_LEN_08BIT, 0x02},
+	{0x3048, CRL_REG_LEN_08BIT, 0x33},
+	{0x305C, CRL_REG_LEN_08BIT, 0x2c},	/* INCLKSEL default */
+	{0x305E, CRL_REG_LEN_08BIT, 0x21},
+	{0x3063, CRL_REG_LEN_08BIT, 0x54},
+	/* Crop settings */
+	{0x3038, CRL_REG_LEN_08BIT, 0x00},	/* WPV = 0 */
+	{0x3039, CRL_REG_LEN_08BIT, 0x00},
+	{0x303A, CRL_REG_LEN_08BIT, 0xC0},	/* WV = PIC_SIZE + 8 */
+	{0x303B, CRL_REG_LEN_08BIT, 0x04},
+	{0x303C, CRL_REG_LEN_08BIT, 0x00},	/* WPH = 0 */
+	{0x303D, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x9C},
+	{0x303F, CRL_REG_LEN_08BIT, 0x07},
+	/* 0x03h */
+	{0x311D, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3123, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3126, CRL_REG_LEN_08BIT, 0xDF},
+	{0x3147, CRL_REG_LEN_08BIT, 0x87},
+	{0x31E0, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E1, CRL_REG_LEN_08BIT, 0x9E},
+	{0x31E2, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E5, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E6, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E7, CRL_REG_LEN_08BIT, 0x3A},
+	{0x31E8, CRL_REG_LEN_08BIT, 0x3A},
+	/* 0x04h */
+	{0x3203, CRL_REG_LEN_08BIT, 0xC8},
+	{0x3207, CRL_REG_LEN_08BIT, 0x54},
+	{0x3213, CRL_REG_LEN_08BIT, 0x16},
+	{0x3215, CRL_REG_LEN_08BIT, 0xF6},
+	{0x321A, CRL_REG_LEN_08BIT, 0x14},
+	{0x321B, CRL_REG_LEN_08BIT, 0x51},
+	{0x3229, CRL_REG_LEN_08BIT, 0xE7},
+	{0x322A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x322B, CRL_REG_LEN_08BIT, 0x10},
+	{0x3231, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3232, CRL_REG_LEN_08BIT, 0xF0},
+	{0x3233, CRL_REG_LEN_08BIT, 0x10},
+	{0x323C, CRL_REG_LEN_08BIT, 0xE8},
+	{0x323D, CRL_REG_LEN_08BIT, 0x70},
+	{0x3243, CRL_REG_LEN_08BIT, 0x08},
+	{0x3244, CRL_REG_LEN_08BIT, 0xE1},
+	{0x3245, CRL_REG_LEN_08BIT, 0x10},
+	{0x3247, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3248, CRL_REG_LEN_08BIT, 0x60},
+	{0x3249, CRL_REG_LEN_08BIT, 0x1E},
+	{0x324B, CRL_REG_LEN_08BIT, 0x00},
+	{0x324C, CRL_REG_LEN_08BIT, 0x41},
+	{0x3250, CRL_REG_LEN_08BIT, 0x30},
+	{0x3251, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3252, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3253, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3254, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3255, CRL_REG_LEN_08BIT, 0x02},
+	{0x3257, CRL_REG_LEN_08BIT, 0xF0},
+	{0x325A, CRL_REG_LEN_08BIT, 0xA6},
+	{0x325D, CRL_REG_LEN_08BIT, 0x14},
+	{0x325E, CRL_REG_LEN_08BIT, 0x51},
+	{0x3261, CRL_REG_LEN_08BIT, 0x61},
+	{0x3266, CRL_REG_LEN_08BIT, 0x30},
+	{0x3267, CRL_REG_LEN_08BIT, 0x05},
+	{0x3275, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3281, CRL_REG_LEN_08BIT, 0xEA},
+	{0x3282, CRL_REG_LEN_08BIT, 0x70},
+	{0x3285, CRL_REG_LEN_08BIT, 0xFF},
+	{0x328A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x328D, CRL_REG_LEN_08BIT, 0xB6},
+	{0x328E, CRL_REG_LEN_08BIT, 0x40},
+	{0x3290, CRL_REG_LEN_08BIT, 0x42},
+	{0x3291, CRL_REG_LEN_08BIT, 0x51},
+	{0x3292, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3294, CRL_REG_LEN_08BIT, 0xC4},
+	{0x3295, CRL_REG_LEN_08BIT, 0x20},
+	{0x3297, CRL_REG_LEN_08BIT, 0x50},
+	{0x3298, CRL_REG_LEN_08BIT, 0x31},
+	{0x3299, CRL_REG_LEN_08BIT, 0x1F},
+	{0x329B, CRL_REG_LEN_08BIT, 0xC0},
+	{0x329C, CRL_REG_LEN_08BIT, 0x60},
+	{0x329E, CRL_REG_LEN_08BIT, 0x4C},
+	{0x329F, CRL_REG_LEN_08BIT, 0x71},
+	{0x32A0, CRL_REG_LEN_08BIT, 0x1F},
+	{0x32A2, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32A3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32A4, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32A9, CRL_REG_LEN_08BIT, 0x24},
+	{0x32AA, CRL_REG_LEN_08BIT, 0x41},
+	{0x32B0, CRL_REG_LEN_08BIT, 0x25},
+	{0x32B1, CRL_REG_LEN_08BIT, 0x51},
+	{0x32B7, CRL_REG_LEN_08BIT, 0x1C},
+	{0x32B8, CRL_REG_LEN_08BIT, 0xC1},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x12},
+	{0x32BE, CRL_REG_LEN_08BIT, 0x1D},
+	{0x32BF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x32C0, CRL_REG_LEN_08BIT, 0x12},
+	{0x32C2, CRL_REG_LEN_08BIT, 0xA8},
+	{0x32C3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32C4, CRL_REG_LEN_08BIT, 0x0A},
+	{0x32C5, CRL_REG_LEN_08BIT, 0x1E},
+	{0x32C6, CRL_REG_LEN_08BIT, 0x21},
+	{0x32C9, CRL_REG_LEN_08BIT, 0xB0},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x40},
+	{0x32CC, CRL_REG_LEN_08BIT, 0x26},
+	{0x32CD, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32D0, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32D1, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32D2, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32D4, CRL_REG_LEN_08BIT, 0xE2},
+	{0x32D5, CRL_REG_LEN_08BIT, 0x40},
+	{0x32D8, CRL_REG_LEN_08BIT, 0x4E},
+	{0x32D9, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32EC, CRL_REG_LEN_08BIT, 0xF0},
+	/* 0x05h */
+	{0x3316, CRL_REG_LEN_08BIT, 0x04},
+	{0x3317, CRL_REG_LEN_08BIT, 0x04},
+	{0x3318, CRL_REG_LEN_08BIT, 0x48},	/* PIC_SIZE = 1096 */
+	{0x3319, CRL_REG_LEN_08BIT, 0x04},
+	{0x334E, CRL_REG_LEN_08BIT, 0x3D},	/* INCL selection 27MHz */
+	{0x334F, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep imx185_1952_1096_BUILD_IN_WDR_27MHZ[] = {
+	/* 0x02h */
+	{0x3005, CRL_REG_LEN_08BIT, 0x01},	/* ADBIT: 10/12 */
+	{0x3007, CRL_REG_LEN_08BIT, 0x10},	/* mode selection */
+	{0x300A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x300C, CRL_REG_LEN_08BIT, 0x02},
+	{0x300F, CRL_REG_LEN_08BIT, 0x05},
+	{0x3010, CRL_REG_LEN_08BIT, 0x38},
+	{0x3012, CRL_REG_LEN_08BIT, 0x0F},
+	{0x301B, CRL_REG_LEN_08BIT, 0x98},
+	{0x301C, CRL_REG_LEN_08BIT, 0x08},
+	{0x301D, CRL_REG_LEN_08BIT, 0x08},
+	{0x301E, CRL_REG_LEN_08BIT, 0x02},
+	{0x3048, CRL_REG_LEN_08BIT, 0x33},
+	{0x3056, CRL_REG_LEN_08BIT, 0xC9},
+	{0x3057, CRL_REG_LEN_08BIT, 0x64},
+	{0x305C, CRL_REG_LEN_08BIT, 0x2c},	/* INCLKSEL default */
+	{0x305E, CRL_REG_LEN_08BIT, 0x21},
+	{0x3063, CRL_REG_LEN_08BIT, 0x54},
+	/* Crop settings */
+	{0x3038, CRL_REG_LEN_08BIT, 0x00},	/* WPV = 0 */
+	{0x3039, CRL_REG_LEN_08BIT, 0x00},
+	{0x303A, CRL_REG_LEN_08BIT, 0x4C},	/* WV = PIC_SIZE + 8 */
+	{0x303B, CRL_REG_LEN_08BIT, 0x04},
+	{0x303C, CRL_REG_LEN_08BIT, 0x00},	/* WPH = 0 */
+	{0x303D, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x9C},	/* Effective size = 1948*/
+	{0x303F, CRL_REG_LEN_08BIT, 0x07},
+	/* 0x03h */
+	{0x311D, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3123, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3126, CRL_REG_LEN_08BIT, 0xDF},
+	{0x3147, CRL_REG_LEN_08BIT, 0x87},
+	{0x31E0, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E1, CRL_REG_LEN_08BIT, 0x9E},
+	{0x31E2, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E5, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E6, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E7, CRL_REG_LEN_08BIT, 0x3A},
+	{0x31E8, CRL_REG_LEN_08BIT, 0x3A},
+	/* 0x04h */
+	{0x3203, CRL_REG_LEN_08BIT, 0xC8},
+	{0x3207, CRL_REG_LEN_08BIT, 0x54},
+	{0x3213, CRL_REG_LEN_08BIT, 0x16},
+	{0x3215, CRL_REG_LEN_08BIT, 0xF6},
+	{0x321A, CRL_REG_LEN_08BIT, 0x14},
+	{0x321B, CRL_REG_LEN_08BIT, 0x51},
+	{0x3229, CRL_REG_LEN_08BIT, 0xE7},
+	{0x322A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x322B, CRL_REG_LEN_08BIT, 0x10},
+	{0x3231, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3232, CRL_REG_LEN_08BIT, 0xF0},
+	{0x3233, CRL_REG_LEN_08BIT, 0x10},
+	{0x323C, CRL_REG_LEN_08BIT, 0xE8},
+	{0x323D, CRL_REG_LEN_08BIT, 0x70},
+	{0x3243, CRL_REG_LEN_08BIT, 0x08},
+	{0x3244, CRL_REG_LEN_08BIT, 0xE1},
+	{0x3245, CRL_REG_LEN_08BIT, 0x10},
+	{0x3247, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3248, CRL_REG_LEN_08BIT, 0x60},
+	{0x3249, CRL_REG_LEN_08BIT, 0x1E},
+	{0x324B, CRL_REG_LEN_08BIT, 0x00},
+	{0x324C, CRL_REG_LEN_08BIT, 0x41},
+	{0x3250, CRL_REG_LEN_08BIT, 0x30},
+	{0x3251, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3252, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3253, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3254, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3255, CRL_REG_LEN_08BIT, 0x02},
+	{0x3257, CRL_REG_LEN_08BIT, 0xF0},
+	{0x325A, CRL_REG_LEN_08BIT, 0xA6},
+	{0x325D, CRL_REG_LEN_08BIT, 0x14},
+	{0x325E, CRL_REG_LEN_08BIT, 0x51},
+	{0x3261, CRL_REG_LEN_08BIT, 0x61},
+	{0x3266, CRL_REG_LEN_08BIT, 0x30},
+	{0x3267, CRL_REG_LEN_08BIT, 0x05},
+	{0x3275, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3281, CRL_REG_LEN_08BIT, 0xEA},
+	{0x3282, CRL_REG_LEN_08BIT, 0x70},
+	{0x3285, CRL_REG_LEN_08BIT, 0xFF},
+	{0x328A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x328D, CRL_REG_LEN_08BIT, 0xB6},
+	{0x328E, CRL_REG_LEN_08BIT, 0x40},
+	{0x3290, CRL_REG_LEN_08BIT, 0x42},
+	{0x3291, CRL_REG_LEN_08BIT, 0x51},
+	{0x3292, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3294, CRL_REG_LEN_08BIT, 0xC4},
+	{0x3295, CRL_REG_LEN_08BIT, 0x20},
+	{0x3297, CRL_REG_LEN_08BIT, 0x50},
+	{0x3298, CRL_REG_LEN_08BIT, 0x31},
+	{0x3299, CRL_REG_LEN_08BIT, 0x1F},
+	{0x329B, CRL_REG_LEN_08BIT, 0xC0},
+	{0x329C, CRL_REG_LEN_08BIT, 0x60},
+	{0x329E, CRL_REG_LEN_08BIT, 0x4C},
+	{0x329F, CRL_REG_LEN_08BIT, 0x71},
+	{0x32A0, CRL_REG_LEN_08BIT, 0x1F},
+	{0x32A2, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32A3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32A4, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32A9, CRL_REG_LEN_08BIT, 0x24},
+	{0x32AA, CRL_REG_LEN_08BIT, 0x41},
+	{0x32B0, CRL_REG_LEN_08BIT, 0x25},
+	{0x32B1, CRL_REG_LEN_08BIT, 0x51},
+	{0x32B7, CRL_REG_LEN_08BIT, 0x1C},
+	{0x32B8, CRL_REG_LEN_08BIT, 0xC1},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x12},
+	{0x32BE, CRL_REG_LEN_08BIT, 0x1D},
+	{0x32BF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x32C0, CRL_REG_LEN_08BIT, 0x12},
+	{0x32C2, CRL_REG_LEN_08BIT, 0xA8},
+	{0x32C3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32C4, CRL_REG_LEN_08BIT, 0x0A},
+	{0x32C5, CRL_REG_LEN_08BIT, 0x1E},
+	{0x32C6, CRL_REG_LEN_08BIT, 0x21},
+	{0x32C9, CRL_REG_LEN_08BIT, 0xB0},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x40},
+	{0x32CC, CRL_REG_LEN_08BIT, 0x26},
+	{0x32CD, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32D0, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32D1, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32D2, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32D4, CRL_REG_LEN_08BIT, 0xE2},
+	{0x32D5, CRL_REG_LEN_08BIT, 0x40},
+	{0x32D8, CRL_REG_LEN_08BIT, 0x4E},
+	{0x32D9, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32EC, CRL_REG_LEN_08BIT, 0xF0},
+	/* 0x05h */
+	{0x3303, CRL_REG_LEN_08BIT, 0x10},	/* repetation wdr */
+	{0x3314, CRL_REG_LEN_08BIT, 0x08},
+	{0x3316, CRL_REG_LEN_08BIT, 0x04},
+	{0x3317, CRL_REG_LEN_08BIT, 0x04},
+	{0x3318, CRL_REG_LEN_08BIT, 0x48},	/* PIC_SIZE = 1096 */
+	{0x3319, CRL_REG_LEN_08BIT, 0x04},
+	{0x334E, CRL_REG_LEN_08BIT, 0x3D},	/* INCL selection 27MHz */
+	{0x334F, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep imx185_1952_1208_27MHZ[] = {
+	/* 0x02h */
+	{0x3005, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT: 10/12 */
+	{0x3007, CRL_REG_LEN_08BIT, 0x00},	/* WUXGA cropping */
+	{0x3018, CRL_REG_LEN_08BIT, 0x28},
+	{0x3019, CRL_REG_LEN_08BIT, 0x05},
+	{0x301B, CRL_REG_LEN_08BIT, 0x53},
+	{0x301C, CRL_REG_LEN_08BIT, 0x07},
+	{0x301D, CRL_REG_LEN_08BIT, 0x08},
+	{0x301E, CRL_REG_LEN_08BIT, 0x02},
+	{0x3048, CRL_REG_LEN_08BIT, 0x33},
+	{0x305C, CRL_REG_LEN_08BIT, 0x2c},	/* INCLKSEL default */
+	{0x305E, CRL_REG_LEN_08BIT, 0x21},
+	{0x3063, CRL_REG_LEN_08BIT, 0x54},
+	/* Crop settings */
+	{0x3038, CRL_REG_LEN_08BIT, 0x00},	/* WPV = 0 */
+	{0x3039, CRL_REG_LEN_08BIT, 0x00},
+	{0x303A, CRL_REG_LEN_08BIT, 0xC0},	/* WV = PIC_SIZE + 8 */
+	{0x303B, CRL_REG_LEN_08BIT, 0x04},
+	{0x303C, CRL_REG_LEN_08BIT, 0x00},	/* WPH = 0 */
+	{0x303D, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x9C},
+	{0x303F, CRL_REG_LEN_08BIT, 0x07},
+	/* 0x03h */
+	{0x311D, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3123, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3126, CRL_REG_LEN_08BIT, 0x00},
+	{0x3147, CRL_REG_LEN_08BIT, 0x87},
+	{0x31E0, CRL_REG_LEN_08BIT, 0x00},
+	{0x31E1, CRL_REG_LEN_08BIT, 0x9E},
+	{0x31E2, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E5, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E6, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E7, CRL_REG_LEN_08BIT, 0x3A},
+	{0x31E8, CRL_REG_LEN_08BIT, 0x3A},
+	/* 0x04h */
+	{0x3203, CRL_REG_LEN_08BIT, 0xC8},
+	{0x3207, CRL_REG_LEN_08BIT, 0x54},
+	{0x3213, CRL_REG_LEN_08BIT, 0x16},
+	{0x3215, CRL_REG_LEN_08BIT, 0xF6},
+	{0x321A, CRL_REG_LEN_08BIT, 0x14},
+	{0x321B, CRL_REG_LEN_08BIT, 0x51},
+	{0x3229, CRL_REG_LEN_08BIT, 0xE7},
+	{0x322A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x322B, CRL_REG_LEN_08BIT, 0x10},
+	{0x3231, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3232, CRL_REG_LEN_08BIT, 0xF0},
+	{0x3233, CRL_REG_LEN_08BIT, 0x10},
+	{0x323C, CRL_REG_LEN_08BIT, 0xE8},
+	{0x323D, CRL_REG_LEN_08BIT, 0x70},
+	{0x3243, CRL_REG_LEN_08BIT, 0x08},
+	{0x3244, CRL_REG_LEN_08BIT, 0xE1},
+	{0x3245, CRL_REG_LEN_08BIT, 0x10},
+	{0x3247, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3248, CRL_REG_LEN_08BIT, 0x60},
+	{0x3249, CRL_REG_LEN_08BIT, 0x1E},
+	{0x324B, CRL_REG_LEN_08BIT, 0x00},
+	{0x324C, CRL_REG_LEN_08BIT, 0x41},
+	{0x3250, CRL_REG_LEN_08BIT, 0x30},
+	{0x3251, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3252, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3253, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3254, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3255, CRL_REG_LEN_08BIT, 0x02},
+	{0x3257, CRL_REG_LEN_08BIT, 0xF0},
+	{0x325A, CRL_REG_LEN_08BIT, 0xA6},
+	{0x325D, CRL_REG_LEN_08BIT, 0x14},
+	{0x325E, CRL_REG_LEN_08BIT, 0x51},
+	{0x3261, CRL_REG_LEN_08BIT, 0x61},
+	{0x3266, CRL_REG_LEN_08BIT, 0x30},
+	{0x3267, CRL_REG_LEN_08BIT, 0x05},
+	{0x3275, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3281, CRL_REG_LEN_08BIT, 0xEA},
+	{0x3282, CRL_REG_LEN_08BIT, 0x70},
+	{0x3285, CRL_REG_LEN_08BIT, 0xFF},
+	{0x328A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x328D, CRL_REG_LEN_08BIT, 0xB6},
+	{0x328E, CRL_REG_LEN_08BIT, 0x40},
+	{0x3290, CRL_REG_LEN_08BIT, 0x42},
+	{0x3291, CRL_REG_LEN_08BIT, 0x51},
+	{0x3292, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3294, CRL_REG_LEN_08BIT, 0xC4},
+	{0x3295, CRL_REG_LEN_08BIT, 0x20},
+	{0x3297, CRL_REG_LEN_08BIT, 0x50},
+	{0x3298, CRL_REG_LEN_08BIT, 0x31},
+	{0x3299, CRL_REG_LEN_08BIT, 0x1F},
+	{0x329B, CRL_REG_LEN_08BIT, 0xC0},
+	{0x329C, CRL_REG_LEN_08BIT, 0x60},
+	{0x329E, CRL_REG_LEN_08BIT, 0x4C},
+	{0x329F, CRL_REG_LEN_08BIT, 0x71},
+	{0x32A0, CRL_REG_LEN_08BIT, 0x1F},
+	{0x32A2, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32A3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32A4, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32A9, CRL_REG_LEN_08BIT, 0x24},
+	{0x32AA, CRL_REG_LEN_08BIT, 0x41},
+	{0x32B0, CRL_REG_LEN_08BIT, 0x25},
+	{0x32B1, CRL_REG_LEN_08BIT, 0x51},
+	{0x32B7, CRL_REG_LEN_08BIT, 0x1C},
+	{0x32B8, CRL_REG_LEN_08BIT, 0xC1},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x12},
+	{0x32BE, CRL_REG_LEN_08BIT, 0x1D},
+	{0x32BF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x32C0, CRL_REG_LEN_08BIT, 0x12},
+	{0x32C2, CRL_REG_LEN_08BIT, 0xA8},
+	{0x32C3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32C4, CRL_REG_LEN_08BIT, 0x0A},
+	{0x32C5, CRL_REG_LEN_08BIT, 0x1E},
+	{0x32C6, CRL_REG_LEN_08BIT, 0x21},
+	{0x32C9, CRL_REG_LEN_08BIT, 0xB0},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x40},
+	{0x32CC, CRL_REG_LEN_08BIT, 0x26},
+	{0x32CD, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32D0, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32D1, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32D2, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32D4, CRL_REG_LEN_08BIT, 0xE2},
+	{0x32D5, CRL_REG_LEN_08BIT, 0x40},
+	{0x32D8, CRL_REG_LEN_08BIT, 0x4E},
+	{0x32D9, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32EC, CRL_REG_LEN_08BIT, 0xF0},
+	/* 0x05h */
+	{0x3316, CRL_REG_LEN_08BIT, 0x04},
+	{0x3317, CRL_REG_LEN_08BIT, 0x04},
+	{0x3318, CRL_REG_LEN_08BIT, 0xB8},	/* PIC_SIZE = 1208 */
+	{0x3319, CRL_REG_LEN_08BIT, 0x04},
+	{0x334E, CRL_REG_LEN_08BIT, 0x3D},	/* INCL selection 27MHz */
+	{0x334F, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep imx185_1952_1208_BUILD_IN_WDR_27MHZ[] = {
+	/* 0x02h */
+	{0x3005, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT: 10/12 */
+	{0x3007, CRL_REG_LEN_08BIT, 0x00},	/* WUXGA cropping */
+	{0x300C, CRL_REG_LEN_08BIT, 0x02},
+	{0x300F, CRL_REG_LEN_08BIT, 0x05},
+	{0x3010, CRL_REG_LEN_08BIT, 0x38},
+	{0x3012, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3018, CRL_REG_LEN_08BIT, 0x98},
+	{0x3019, CRL_REG_LEN_08BIT, 0x08},
+	{0x301B, CRL_REG_LEN_08BIT, 0x65},
+	{0x301C, CRL_REG_LEN_08BIT, 0x04},
+	{0x301D, CRL_REG_LEN_08BIT, 0x08},
+	{0x301E, CRL_REG_LEN_08BIT, 0x02},
+	{0x3048, CRL_REG_LEN_08BIT, 0x33},
+	{0x3056, CRL_REG_LEN_08BIT, 0xC9},
+	{0x3057, CRL_REG_LEN_08BIT, 0x33},
+	{0x305C, CRL_REG_LEN_08BIT, 0x2c},	/* INCLKSEL default */
+	{0x305E, CRL_REG_LEN_08BIT, 0x21},
+	{0x3063, CRL_REG_LEN_08BIT, 0x54},
+	{0x30E1, CRL_REG_LEN_08BIT, 0xE1},
+	/* Crop settings */
+	{0x3038, CRL_REG_LEN_08BIT, 0x00},	/* WPV = 0 */
+	{0x3039, CRL_REG_LEN_08BIT, 0x00},
+	{0x303A, CRL_REG_LEN_08BIT, 0xC9},
+	{0x303B, CRL_REG_LEN_08BIT, 0x04},
+	{0x303C, CRL_REG_LEN_08BIT, 0x00},
+	{0x303D, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x9C},
+	{0x303F, CRL_REG_LEN_08BIT, 0x07},
+	/* 0x03h */
+	{0x311D, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3123, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3126, CRL_REG_LEN_08BIT, 0xDF},
+	{0x3147, CRL_REG_LEN_08BIT, 0x87},
+	{0x31E0, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E1, CRL_REG_LEN_08BIT, 0x9E},
+	{0x31E2, CRL_REG_LEN_08BIT, 0x01},
+	{0x31E5, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E6, CRL_REG_LEN_08BIT, 0x05},
+	{0x31E7, CRL_REG_LEN_08BIT, 0x3A},
+	{0x31E8, CRL_REG_LEN_08BIT, 0x3A},
+	/* 0x04h */
+	{0x3203, CRL_REG_LEN_08BIT, 0xC8},
+	{0x3207, CRL_REG_LEN_08BIT, 0x54},
+	{0x3213, CRL_REG_LEN_08BIT, 0x16},
+	{0x3215, CRL_REG_LEN_08BIT, 0xF6},
+	{0x321A, CRL_REG_LEN_08BIT, 0x14},
+	{0x321B, CRL_REG_LEN_08BIT, 0x51},
+	{0x3229, CRL_REG_LEN_08BIT, 0xE7},
+	{0x322A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x322B, CRL_REG_LEN_08BIT, 0x10},
+	{0x3231, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3232, CRL_REG_LEN_08BIT, 0xF0},
+	{0x3233, CRL_REG_LEN_08BIT, 0x10},
+	{0x323C, CRL_REG_LEN_08BIT, 0xE8},
+	{0x323D, CRL_REG_LEN_08BIT, 0x70},
+	{0x3243, CRL_REG_LEN_08BIT, 0x08},
+	{0x3244, CRL_REG_LEN_08BIT, 0xE1},
+	{0x3245, CRL_REG_LEN_08BIT, 0x10},
+	{0x3247, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3248, CRL_REG_LEN_08BIT, 0x60},
+	{0x3249, CRL_REG_LEN_08BIT, 0x1E},
+	{0x324B, CRL_REG_LEN_08BIT, 0x00},
+	{0x324C, CRL_REG_LEN_08BIT, 0x41},
+	{0x3250, CRL_REG_LEN_08BIT, 0x30},
+	{0x3251, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3252, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3253, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3254, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3255, CRL_REG_LEN_08BIT, 0x02},
+	{0x3257, CRL_REG_LEN_08BIT, 0xF0},
+	{0x325A, CRL_REG_LEN_08BIT, 0xA6},
+	{0x325D, CRL_REG_LEN_08BIT, 0x14},
+	{0x325E, CRL_REG_LEN_08BIT, 0x51},
+	{0x3261, CRL_REG_LEN_08BIT, 0x61},
+	{0x3266, CRL_REG_LEN_08BIT, 0x30},
+	{0x3267, CRL_REG_LEN_08BIT, 0x05},
+	{0x3275, CRL_REG_LEN_08BIT, 0xE7},
+	{0x3281, CRL_REG_LEN_08BIT, 0xEA},
+	{0x3282, CRL_REG_LEN_08BIT, 0x70},
+	{0x3285, CRL_REG_LEN_08BIT, 0xFF},
+	{0x328A, CRL_REG_LEN_08BIT, 0xF0},
+	{0x328D, CRL_REG_LEN_08BIT, 0xB6},
+	{0x328E, CRL_REG_LEN_08BIT, 0x40},
+	{0x3290, CRL_REG_LEN_08BIT, 0x42},
+	{0x3291, CRL_REG_LEN_08BIT, 0x51},
+	{0x3292, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3294, CRL_REG_LEN_08BIT, 0xC4},
+	{0x3295, CRL_REG_LEN_08BIT, 0x20},
+	{0x3297, CRL_REG_LEN_08BIT, 0x50},
+	{0x3298, CRL_REG_LEN_08BIT, 0x31},
+	{0x3299, CRL_REG_LEN_08BIT, 0x1F},
+	{0x329B, CRL_REG_LEN_08BIT, 0xC0},
+	{0x329C, CRL_REG_LEN_08BIT, 0x60},
+	{0x329E, CRL_REG_LEN_08BIT, 0x4C},
+	{0x329F, CRL_REG_LEN_08BIT, 0x71},
+	{0x32A0, CRL_REG_LEN_08BIT, 0x1F},
+	{0x32A2, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32A3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32A4, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32A9, CRL_REG_LEN_08BIT, 0x24},
+	{0x32AA, CRL_REG_LEN_08BIT, 0x41},
+	{0x32B0, CRL_REG_LEN_08BIT, 0x25},
+	{0x32B1, CRL_REG_LEN_08BIT, 0x51},
+	{0x32B7, CRL_REG_LEN_08BIT, 0x1C},
+	{0x32B8, CRL_REG_LEN_08BIT, 0xC1},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x12},
+	{0x32BE, CRL_REG_LEN_08BIT, 0x1D},
+	{0x32BF, CRL_REG_LEN_08BIT, 0xD1},
+	{0x32C0, CRL_REG_LEN_08BIT, 0x12},
+	{0x32C2, CRL_REG_LEN_08BIT, 0xA8},
+	{0x32C3, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32C4, CRL_REG_LEN_08BIT, 0x0A},
+	{0x32C5, CRL_REG_LEN_08BIT, 0x1E},
+	{0x32C6, CRL_REG_LEN_08BIT, 0x21},
+	{0x32C9, CRL_REG_LEN_08BIT, 0xB0},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x40},
+	{0x32CC, CRL_REG_LEN_08BIT, 0x26},
+	{0x32CD, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32D0, CRL_REG_LEN_08BIT, 0xB6},
+	{0x32D1, CRL_REG_LEN_08BIT, 0xC0},
+	{0x32D2, CRL_REG_LEN_08BIT, 0x0B},
+	{0x32D4, CRL_REG_LEN_08BIT, 0xE2},
+	{0x32D5, CRL_REG_LEN_08BIT, 0x40},
+	{0x32D8, CRL_REG_LEN_08BIT, 0x4E},
+	{0x32D9, CRL_REG_LEN_08BIT, 0xA1},
+	{0x32EC, CRL_REG_LEN_08BIT, 0xF0},
+	/* 0x05h */
+	{0x3303, CRL_REG_LEN_08BIT, 0x00},
+	{0x3314, CRL_REG_LEN_08BIT, 0x08},
+	{0x3316, CRL_REG_LEN_08BIT, 0x04},
+	{0x3317, CRL_REG_LEN_08BIT, 0x04},
+	{0x3318, CRL_REG_LEN_08BIT, 0xB8},	/* PIC_SIZE = 1208 */
+	{0x3319, CRL_REG_LEN_08BIT, 0x04},
+	{0x334E, CRL_REG_LEN_08BIT, 0x3D},	/* INCL selection 27MHz */
+	{0x334F, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep imx185_streamon_regs[] = {
+	{IMX185_REG_STANDBY, CRL_REG_LEN_08BIT, 0x00},
+	{0x00, CRL_REG_LEN_DELAY, 30, 0x00}, /* Delay 30ms */
+	{IMX185_REG_XMSTA, CRL_REG_LEN_08BIT, 0x00},
+	{0x00, CRL_REG_LEN_DELAY, 30, 0x00}, /* Delay 30ms */
+};
+
+static struct crl_register_write_rep imx185_streamoff_regs[] = {
+	{IMX185_REG_STANDBY, CRL_REG_LEN_08BIT, 0x01},
+	{0x00, CRL_REG_LEN_DELAY, 30, 0x00}, /* Delay 30ms */
+	{IMX185_REG_XMSTA, CRL_REG_LEN_08BIT, 0x01},
+	{0x00, CRL_REG_LEN_DELAY, 30, 0x00}, /* Delay 30ms */
+};
+
+static struct crl_arithmetic_ops imx185_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	}
+};
+
+/* shs1 = fll - exposure -1 */
+static struct crl_arithmetic_ops imx185_shs1_lsb_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_shs1_msb_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_shs1_hsb_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 16,
+	}
+};
+
+/* shs2 = fll - exposure * 16 -1 */
+static struct crl_arithmetic_ops imx185_shs2_lsb_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 4,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_shs2_msb_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 4,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_shs2_hsb_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 4,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 16,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_fll_msb_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_llp_msb_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx185_fll_hsb_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 16,
+	}
+};
+
+static struct crl_dynamic_register_access imx185_h_flip_regs[] = {
+	{
+		.address = 0x3007,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx185_hflip_ops),
+		.ops = imx185_hflip_ops,
+		.mask = 0x2,
+	}
+};
+
+static struct crl_dynamic_register_access imx185_v_flip_regs[] = {
+	{
+		.address = 0x3007,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	}
+};
+
+static struct crl_dynamic_register_access imx185_ana_gain_global_regs[] = {
+	{
+		.address = 0x3014,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	 }
+};
+
+static struct crl_dynamic_register_access imx185_shs_regs[] = {
+	/*
+	 * Use 8bits access since 24bits or 32bits access will fail
+	 * TODO: root cause the 24bits and 32bits access issues
+	 */
+	{
+		.address = 0x3020,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_shs1_lsb_ops),
+		.ops = imx185_shs1_lsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3021,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_shs1_msb_ops),
+		.ops = imx185_shs1_msb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3022,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_shs1_hsb_ops),
+		.ops = imx185_shs1_hsb_ops,
+		.mask = 0x1,
+	},
+	{
+		.address = 0x3023,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_shs2_lsb_ops),
+		.ops = imx185_shs2_lsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3024,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_shs2_msb_ops),
+		.ops = imx185_shs2_msb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3025,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_shs2_hsb_ops),
+		.ops = imx185_shs2_hsb_ops,
+		.mask = 0x1,
+	}
+};
+
+static struct crl_dynamic_register_access imx185_fll_regs[] = {
+	/*
+	 * Use 8bits access since 24bits or 32bits access will fail
+	 * TODO: root cause the 24bits and 32bits access issues
+	 */
+	{
+		.address = 0x3018,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3019,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_fll_msb_ops),
+		.ops = imx185_fll_msb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x301a,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_fll_hsb_ops),
+		.ops = imx185_fll_hsb_ops,
+		.mask = 0x1,
+	},
+};
+
+static struct crl_dynamic_register_access imx185_llp_regs[] = {
+	{
+		.address = 0x301b,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x301c,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx185_llp_msb_ops),
+		.ops = imx185_llp_msb_ops,
+		.mask = 0xff,
+	},
+};
+
+/* ctrl-val == 1 ? 1 * 0x02 : 0 * 0x02 -> 2 and 0 */
+static struct crl_arithmetic_ops imx185_wdr_switch_r300c_ops[] = {
+	{
+		.op = CRL_MULTIPLY,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x02,
+	}
+};
+
+/* ctrl-val == 1 ? (1 * 0x04 + 0x1) : (0 * 0x04 + 0x1) -> 0x05 and 0x01 */
+static struct crl_arithmetic_ops imx185_wdr_switch_r300f_ops[] = {
+	{
+		.op = CRL_MULTIPLY,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x04,
+	},
+	{
+		.op = CRL_ADD,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x01,
+	}
+};
+
+/* ctrl-val == 1 ? (0x39 - 1 * 0x01) : (0x39 - 0 * 0x01) -> 0x38 and 0x39 */
+static struct crl_arithmetic_ops imx185_wdr_switch_r3010_ops[] = {
+	{
+		.op = CRL_MULTIPLY,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x01,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x39,
+	}
+};
+
+/* ctrl-val == 1 ? (0x50 - 1 * 0x41) : (0x50 - 0 * 0x41) -> 0x0f and 0x50 */
+static struct crl_arithmetic_ops imx185_wdr_switch_r3012_ops[] = {
+	{
+		.op = CRL_MULTIPLY,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x41,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x50,
+	}
+};
+
+static struct crl_dynamic_register_access imx185_wdr_switch_regs[] = {
+	{ 0x300c, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(imx185_wdr_switch_r300c_ops),
+		imx185_wdr_switch_r300c_ops, 0 },
+	{ 0x300f, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(imx185_wdr_switch_r300f_ops),
+		imx185_wdr_switch_r300f_ops, 0 },
+	{ 0x3010, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(imx185_wdr_switch_r3010_ops),
+		imx185_wdr_switch_r3010_ops, 0 },
+	{ 0x3012, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(imx185_wdr_switch_r3012_ops),
+		imx185_wdr_switch_r3012_ops, 0 },
+};
+
+/* Needed for acpi support for runtime detection */
+static struct crl_sensor_detect_config imx185_sensor_detect_regset[] = {
+	{
+		.reg = { 0x3385, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+	{
+		.reg = { 0x3384, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	}
+};
+
+static struct crl_pll_configuration imx185_pll_configurations[] = {
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 56250000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 45000000,
+		.pixel_rate_pa = 45000000, /* pixel_rate = MIPICLK*2 *4/10 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx185_pll_111mbps),
+		.pll_regs = imx185_pll_111mbps,
+	},
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 112500000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 90000000,
+		.pixel_rate_pa = 90000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx185_pll_222mbps),
+		.pll_regs = imx185_pll_222mbps,
+	},
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 112500000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 75000000,
+		.pixel_rate_pa = 75000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx185_pll_222mbps),
+		.pll_regs = imx185_pll_222mbps,
+	},
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 225000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 150000000,
+		.pixel_rate_pa = 150000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx185_pll_445mbps),
+		.pll_regs = imx185_pll_445mbps,
+	}
+};
+
+static struct crl_subdev_rect_rep imx185_1952_1208_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 1208,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 1208,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 1208,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 1208,
+	}
+};
+
+static struct crl_subdev_rect_rep imx185_1952_1096_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 1208,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 1208,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 1208,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 1096,
+	}
+};
+
+static struct crl_subdev_rect_rep imx185_1312_728_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 1208,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 1208,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 1208,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1312,
+		.out_rect.height = 728,
+	 }
+};
+
+static struct crl_mode_rep imx185_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx185_1952_1208_rects),
+		.sd_rects = imx185_1952_1208_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 1208,
+		.min_llp = 2250,
+		.min_fll = 1333,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_modes[0],
+		.mode_regs_items = ARRAY_SIZE(imx185_1952_1208_27MHZ),
+		.mode_regs = imx185_1952_1208_27MHZ,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx185_1952_1208_rects),
+		.sd_rects = imx185_1952_1208_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 1208,
+		.min_llp = 2250,
+		.min_fll = 1333,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_modes[1],
+		.mode_regs_items =
+				ARRAY_SIZE(imx185_1952_1208_BUILD_IN_WDR_27MHZ),
+		.mode_regs = imx185_1952_1208_BUILD_IN_WDR_27MHZ,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx185_1952_1096_rects),
+		.sd_rects = imx185_1952_1096_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 1096,
+		.min_llp = 2200,
+		.min_fll = 1135,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_modes[0],
+		.mode_regs_items = ARRAY_SIZE(imx185_1952_1096_27MHZ),
+		.mode_regs = imx185_1952_1096_27MHZ,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx185_1952_1096_rects),
+		.sd_rects = imx185_1952_1096_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 1096,
+		.min_llp = 2200,
+		.min_fll = 1135,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_modes[1],
+		.mode_regs_items =
+				ARRAY_SIZE(imx185_1952_1096_BUILD_IN_WDR_27MHZ),
+		.mode_regs = imx185_1952_1096_BUILD_IN_WDR_27MHZ,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx185_1312_728_rects),
+		.sd_rects = imx185_1312_728_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1312,
+		.height = 728,
+		.min_llp = 1300,
+		.min_fll = 787,
+		.comp_items = 1,
+		.ctrl_data = &ctrl_data_modes[0],
+		.mode_regs_items = ARRAY_SIZE(imx185_1312_728_27MHZ_CROPPING),
+		.mode_regs = imx185_1312_728_27MHZ_CROPPING,
+	 }
+};
+
+static struct crl_sensor_subdev_config imx185_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx185 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx185 pixel array",
+	}
+};
+
+static struct crl_sensor_limits imx185_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1952,
+	.y_addr_max = 1208,
+	.min_frame_length_lines = 320,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 380,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data imx185_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	}
+};
+
+static struct crl_csi_data_fmt imx185_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw10),
+		.regs = imx185_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw10),
+		.regs = imx185_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw10),
+		.regs = imx185_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw10),
+		.regs = imx185_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw12),
+		.regs = imx185_fmt_raw12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw12),
+		.regs = imx185_fmt_raw12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw12),
+		.regs = imx185_fmt_raw12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx185_fmt_raw12),
+		.regs = imx185_fmt_raw12,
+	}
+};
+
+static struct crl_v4l2_ctrl imx185_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_h_flip_regs),
+		.regs = imx185_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_v_flip_regs),
+		.regs = imx185_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 160,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_ana_gain_global_regs),
+		.regs = imx185_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = IMX185_MAX_SHS1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x47,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_shs_regs),
+		.regs = imx185_shs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 720,
+		.data.std_data.max = IMX185_VMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x465,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_fll_regs),
+		.regs = imx185_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x898,
+		.data.std_data.max = IMX185_HMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x898,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_llp_regs),
+		.regs = imx185_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_WDR_MODE,
+		.name = "V4L2_CID_WDR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx185_wdr_switch_regs),
+		.regs = imx185_wdr_switch_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops imx185_frame_desc_width_ops[] = {
+	{
+		 .op = CRL_ASSIGNMENT,
+		 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		 .operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops imx185_frame_desc_height_ops[] = {
+	{
+		 .op = CRL_ASSIGNMENT,
+		 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		 .operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc imx185_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(imx185_frame_desc_width_ops),
+			 .ops = imx185_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(imx185_frame_desc_height_ops),
+			  .ops = imx185_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity imx185_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 27000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+	},
+};
+
+struct crl_sensor_configuration imx185_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(imx185_power_items),
+	.power_entities = imx185_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(imx185_powerup_standby),
+	.powerup_regs = imx185_powerup_standby,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(imx185_sensor_detect_regset),
+	.id_regs = imx185_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx185_sensor_subdevs),
+	.subdevs = imx185_sensor_subdevs,
+
+	.sensor_limits = &imx185_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx185_pll_configurations),
+	.pll_configs = imx185_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx185_modes),
+	.modes = imx185_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(imx185_streamon_regs),
+	.streamon_regs = imx185_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx185_streamoff_regs),
+	.streamoff_regs = imx185_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx185_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx185_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx185_crl_csi_data_fmt),
+	.csi_fmts = imx185_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx185_flip_configurations),
+	.flip_data = imx185_flip_configurations,
+
+	.frame_desc_entries = ARRAY_SIZE(imx185_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = imx185_frame_desc,
+};
+
+#endif  /* __CRLMODULE_IMX185_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx214_configuration.h b/drivers/media/i2c/crlmodule/crl_imx214_configuration.h
new file mode 100644
index 000000000000..f49deefade25
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx214_configuration.h
@@ -0,0 +1,1428 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_imx214_CONFIGURATION_H_
+#define __CRLMODULE_imx214_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep imx214_pll_1080mbps[] = {
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x87 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0821, CRL_REG_LEN_08BIT, 0xe0 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_pll_8_1080mbps[] = {
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x87 },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0821, CRL_REG_LEN_08BIT, 0xe0 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_pll_1200mbps[] = {
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x96 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x12},
+	{ 0x0821, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_pll_8_1200mbps[] = {
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x96 },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x12},
+	{ 0x0821, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_powerup_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /*24Mhz*/
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0101, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0105, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0106, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4550, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4642, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x6227, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x6276, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x900E, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0xA802, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0xA803, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0xA804, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0xA805, CRL_REG_LEN_08BIT, 0x77 },
+	{ 0xA806, CRL_REG_LEN_08BIT, 0xAE },
+	{ 0xA807, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0xA808, CRL_REG_LEN_08BIT, 0xAE },
+	{ 0xA809, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0xA80A, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0xA80B, CRL_REG_LEN_08BIT, 0x83 },
+	{ 0xAE33, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4174, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4175, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x4612, CRL_REG_LEN_08BIT, 0x29 },
+	{ 0x461B, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x461F, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x4635, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4637, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x463F, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x4641, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x465B, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x465F, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x4663, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x4667, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x466F, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x470E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x4909, CRL_REG_LEN_08BIT, 0xAB },
+	{ 0x490B, CRL_REG_LEN_08BIT, 0x95 },
+	{ 0x4915, CRL_REG_LEN_08BIT, 0x5D },
+	{ 0x4A5F, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x4A61, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x4A73, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0x4A85, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4A87, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x583C, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x620E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x6EB2, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x6EB3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x9300, CRL_REG_LEN_08BIT, 0x02 },
+};
+
+/*
+ * 0, 4207, 0, 3119
+ * 4208, 3120
+ * 4208x3120
+ */
+static struct crl_register_write_rep imx214_mode_13m[] = {
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x2F },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x3054, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0B06, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A02, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4170, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4171, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4176, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4177, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xAE20, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xAE21, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_mode_2k[] = {
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x2F },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x3054, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x0B06, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A02, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4170, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4171, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4176, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4177, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xAE20, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xAE21, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_mode_4k2k[] = {
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB8 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x3054, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0B06, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A02, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4170, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4171, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4176, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4177, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xAE20, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xAE21, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_mode_1120[] = {
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0xB8 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB8 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x3054, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0B06, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A02, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4170, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4171, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4176, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4177, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xAE20, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xAE21, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_mode_1080[] = {
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB8 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x3054, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0B06, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A02, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4170, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4171, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4176, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4177, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xAE20, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xAE21, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_mode_720[] = {
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x8E },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xF7 },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xA1 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x3054, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xD0 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A03, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3A04, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x3A05, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0B06, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A02, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4170, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4171, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4176, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4177, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xAE20, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xAE21, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx214_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep imx214_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep imx214_data_fmt_width10[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0a0a }
+};
+
+static struct crl_register_write_rep imx214_data_fmt_width8[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0808 }
+};
+
+static struct crl_arithmetic_ops imx214_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_dynamic_register_access imx214_h_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	},
+};
+
+static struct crl_dynamic_register_access imx214_v_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx214_vflip_ops),
+		.ops = imx214_vflip_ops,
+		.mask = 0x2,
+	},
+};
+
+struct crl_register_write_rep imx214_poweroff_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+
+static struct crl_dynamic_register_access imx214_ana_gain_global_regs[] = {
+	{
+		.address = 0x0204,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx214_exposure_regs[] = {
+	{
+		.address = 0x0202,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_dynamic_register_access imx214_vblank_regs[] = {
+	{
+		.address = 0x0340,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx214_hblank_regs[] = {
+	{
+		.address = 0x0342,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx214_test_pattern_regs[] = {
+	{
+		.address = 0x0600,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff
+	},
+};
+
+static struct crl_sensor_detect_config imx214_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0019, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+	{
+		.reg = { 0x0016, CRL_REG_LEN_16BIT, 0x0000ffff },
+		.width = 7,
+	},
+};
+
+const s64 imx214_op_sys_clock[] =  { 504000000, 504000000, 600000000,
+					600000000};
+
+static struct crl_pll_configuration imx214_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 504000000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 432000000,
+		.pixel_rate_pa = 432000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.csi_lanes = 4,
+		.pll_regs_items = ARRAY_SIZE(imx214_pll_8_1080mbps),
+		.pll_regs = imx214_pll_8_1080mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 504000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 432000000,
+		.pixel_rate_pa = 432000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx214_pll_1080mbps),
+		.pll_regs = imx214_pll_1080mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 600000000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 480000000,
+		.pixel_rate_pa = 480000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx214_pll_8_1200mbps),
+		.pll_regs = imx214_pll_8_1200mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 600000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 480000000,
+		.pixel_rate_pa = 480000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx214_pll_1200mbps),
+		.pll_regs = imx214_pll_1200mbps,
+	},
+
+};
+
+/*
+ * 0,5343,448,3567
+ * 5344, 3120
+ * Dig Crop: (568,0)->4208x3120
+ * Scale_m 16
+ * 4208x3120
+ */
+
+static struct crl_subdev_rect_rep imx214_13m_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+};
+
+static struct crl_subdev_rect_rep imx214_4k2k_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 376,
+		.out_rect.width = 4208,
+		.out_rect.height = 2368,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 2368,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 2368,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 2368,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 2368,
+	},
+};
+
+static struct crl_subdev_rect_rep imx214_2k_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2104,
+		.out_rect.height = 1560,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 2104,
+		.in_rect.height = 1560,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2104,
+		.out_rect.height = 1560,
+	},
+};
+
+static struct crl_subdev_rect_rep imx214_1120_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 56,
+		.out_rect.top = 440,
+		.out_rect.width = 4096,
+		.out_rect.height = 2240,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4096,
+		.in_rect.height = 2240,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2048,
+		.out_rect.height = 1120,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 2048,
+		.in_rect.height = 1120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2048,
+		.out_rect.height = 1120,
+	},
+};
+
+static struct crl_subdev_rect_rep imx214_1080_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 376,
+		.out_rect.width = 4208,
+		.out_rect.height = 2368,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 2368,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2104,
+		.out_rect.height = 1184,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 2104,
+		.in_rect.height = 1184,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+};
+
+static struct crl_subdev_rect_rep imx214_720_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4208,
+		.in_rect.height = 3120,
+		.out_rect.left = 1400,
+		.out_rect.top = 1166,
+		.out_rect.width = 1408,
+		.out_rect.height = 788,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1408,
+		.in_rect.height = 788,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1408,
+		.out_rect.height = 788,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1408,
+		.in_rect.height = 788,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_mode_rep imx214_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx214_13m_rects),
+		.sd_rects = imx214_13m_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4208,
+		.height = 3120,
+		.min_llp = 5008,
+		.min_fll = 3180,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx214_mode_13m),
+		.mode_regs = imx214_mode_13m,
+	},
+		{
+		.sd_rects_items = ARRAY_SIZE(imx214_4k2k_rects),
+		.sd_rects = imx214_4k2k_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4208,
+		.height = 2368,
+		.min_llp = 5008,
+		.min_fll = 2408,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx214_mode_4k2k),
+		.mode_regs = imx214_mode_4k2k,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx214_2k_rects),
+		.sd_rects = imx214_2k_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 2104,
+		.height = 1560,
+		.min_llp = 5008,
+		.min_fll = 1700,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx214_mode_2k),
+		.mode_regs = imx214_mode_2k,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx214_1120_rects),
+		.sd_rects = imx214_1120_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 2048,
+		.height = 1120,
+		.min_llp = 5008,
+		.min_fll = 1600,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx214_mode_1120),
+		.mode_regs = imx214_mode_1120,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx214_1080_rects),
+		.sd_rects = imx214_1080_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.min_llp = 5008,
+		.min_fll = 1200,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx214_mode_1080),
+		.mode_regs = imx214_mode_1080,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx214_720_rects),
+		.sd_rects = imx214_720_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.min_llp = 5008,
+		.min_fll = 828,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx214_mode_720),
+		.mode_regs = imx214_mode_720,
+	},
+};
+
+static struct crl_sensor_subdev_config imx214_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "imx214 scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx214 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx214 pixel array",
+	},
+};
+
+static struct crl_sensor_limits imx214_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 4208,
+	.y_addr_max = 3120,
+	.min_frame_length_lines = 184,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 5008,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 255,
+	.scaler_n_min = 16,
+	.scaler_n_max = 16,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data imx214_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+};
+
+static struct crl_csi_data_fmt imx214_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width10),
+		.regs = imx214_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width10),
+		.bits_per_pixel = 10,
+		.regs = imx214_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width10),
+		.bits_per_pixel = 10,
+		.regs = imx214_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width10),
+		.bits_per_pixel = 10,
+		.regs = imx214_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width8),
+		.bits_per_pixel = 8,
+		.regs = imx214_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width8),
+		.bits_per_pixel = 8,
+		.regs = imx214_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width8),
+		.bits_per_pixel = 8,
+		.regs = imx214_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = ARRAY_SIZE(imx214_data_fmt_width8),
+		.bits_per_pixel = 8,
+		.regs = imx214_data_fmt_width8,
+	},
+};
+
+
+static const char * const imx214_test_patterns[] = {
+	"Disabled",
+	"Solid Colour",
+	"Eight Vertical Colour Bars",
+};
+
+
+static struct crl_v4l2_ctrl imx214_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max =
+			ARRAY_SIZE(imx214_pll_configurations) - 1,
+		.data.v4l2_int_menu.menu = imx214_op_sys_clock,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 480,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_ana_gain_global_regs),
+		.regs = imx214_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1700,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_exposure_regs),
+		.regs = imx214_exposure_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_h_flip_regs),
+		.regs = imx214_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_v_flip_regs),
+		.regs = imx214_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4130,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_vblank_regs),
+		.regs = imx214_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 5008,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 5008,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_hblank_regs),
+		.regs = imx214_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_TEST_PATTERN,
+		.name = "V4L2_CID_TEST_PATTERN",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+		.data.v4l2_menu_items.menu = imx214_test_patterns,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(imx214_test_patterns),
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx214_test_pattern_regs),
+		.regs = imx214_test_pattern_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity imx214_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VANA",
+		.val = 2700000,
+		.delay = 30000,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VDIG",
+		.val = 1100000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 0,
+	},
+};
+
+static struct crl_nvm_blob imx214_nvm_blobs[] = {
+	{ 0x50, 0x00, 0x100 },
+	{ 0x51, 0x00, 0x100 },
+	{ 0x52, 0x00, 0x20  },
+};
+
+struct crl_sensor_configuration imx214_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(imx214_power_items),
+	.power_entities = imx214_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(imx214_powerup_regset),
+	.powerup_regs = imx214_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+
+	.id_reg_items = ARRAY_SIZE(imx214_sensor_detect_regset),
+	.id_regs = imx214_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx214_sensor_subdevs),
+	.subdevs = imx214_sensor_subdevs,
+
+	.sensor_limits = &imx214_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx214_pll_configurations),
+	.pll_configs = imx214_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx214_modes),
+	.modes = imx214_modes,
+	.fail_safe_mode_index = 3,
+
+	.streamon_regs_items = ARRAY_SIZE(imx214_streamon_regs),
+	.streamon_regs = imx214_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx214_streamoff_regs),
+	.streamoff_regs = imx214_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx214_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx214_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx214_crl_csi_data_fmt),
+	.csi_fmts = imx214_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx214_flip_configurations),
+	.flip_data = imx214_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_8BIT,
+	.crl_nvm_info.nvm_preop_regs_items = 0,
+	.crl_nvm_info.nvm_postop_regs_items = 0,
+	.crl_nvm_info.nvm_blobs_items = ARRAY_SIZE(imx214_nvm_blobs),
+	.crl_nvm_info.nvm_config = imx214_nvm_blobs,
+};
+
+
+
+
+
+
+#endif  /* __CRLMODULE_DUMMY_imx230_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx230_configuration.h b/drivers/media/i2c/crlmodule/crl_imx230_configuration.h
new file mode 100644
index 000000000000..c19afad589e5
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx230_configuration.h
@@ -0,0 +1,2367 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_imx230_CONFIGURATION_H_
+#define __CRLMODULE_imx230_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+
+static struct crl_register_write_rep imx230_pll_1500mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* EXT clock 24 MHz*/
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0xc8 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0xa9 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 }, /* Mipi settings, 4 lane */
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x17 }, /*Data rate setting*/
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0xcc },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0xcc },
+	{ 0x0808, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+/* PLL settings for CSI lanes: 4, RAW14 output */
+static struct crl_register_write_rep imx230_pll_4_14_1500mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* EXT clock 24 MHz*/
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0xbf },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0xfa },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 }, /* Mipi settings, 4 lane */
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x17 }, /*Data rate setting*/
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0808, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx230_pll_2_10_1500mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* EXT clock 24 MHz*/
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0xc8 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0xa9 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x01 }, /* Mipi settings, 2 lane */
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x09 }, /*Data rate setting*/
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0808, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx230_pll_2_8_1500mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* EXT clock 24 MHz*/
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0xc8 },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0xa9 },
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x01 }, /* Mipi settings, 2 lane */
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x09 }, /*Data rate setting*/
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0808, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep imx230_powerup_regset[] = {
+	{ 0x4800, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0x4890, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4D1E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4D1F, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x4FA0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4FA1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4FA2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4FA3, CRL_REG_LEN_08BIT, 0x83 },
+	{ 0x6153, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x6156, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x69BB, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x69BC, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x69BD, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x69C1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x69C4, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x69C6, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x7300, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x9009, CRL_REG_LEN_08BIT, 0x1A },
+	{ 0xB040, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0xB041, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0xB042, CRL_REG_LEN_08BIT, 0x6B },
+	{ 0xB043, CRL_REG_LEN_08BIT, 0x43 },
+	{ 0xB044, CRL_REG_LEN_08BIT, 0x63 },
+	{ 0xB045, CRL_REG_LEN_08BIT, 0x2A },
+	{ 0xB046, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB047, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0xB048, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB049, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0xB04A, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB04B, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0xB04C, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB04D, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0xB04E, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB04F, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0xB050, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB051, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0xB052, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB053, CRL_REG_LEN_08BIT, 0x74 },
+	{ 0xB054, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB055, CRL_REG_LEN_08BIT, 0x75 },
+	{ 0xB056, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB057, CRL_REG_LEN_08BIT, 0x76 },
+	{ 0xB058, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB059, CRL_REG_LEN_08BIT, 0x77 },
+	{ 0xB05A, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB05B, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0xB05C, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB05D, CRL_REG_LEN_08BIT, 0x7B },
+	{ 0xB05E, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB05F, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0xB060, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB061, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0xB062, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB063, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0xB064, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB065, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0xB066, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB067, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0xB068, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB069, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0xB06A, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB06B, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0xB06C, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB06D, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0xB06E, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB06F, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0xB070, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0xB071, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0xB072, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0xB073, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0xD000, CRL_REG_LEN_08BIT, 0xDA },
+	{ 0xD001, CRL_REG_LEN_08BIT, 0xDA },
+	{ 0xD002, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0xD003, CRL_REG_LEN_08BIT, 0xE1 },
+	{ 0xD004, CRL_REG_LEN_08BIT, 0x55 },
+	{ 0xD005, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0xD006, CRL_REG_LEN_08BIT, 0x21 },
+	{ 0xD007, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD008, CRL_REG_LEN_08BIT, 0x1C },
+	{ 0xD009, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0xD00A, CRL_REG_LEN_08BIT, 0xFE },
+	{ 0xD00B, CRL_REG_LEN_08BIT, 0xC5 },
+	{ 0xD00C, CRL_REG_LEN_08BIT, 0x55 },
+	{ 0xD00D, CRL_REG_LEN_08BIT, 0xDC },
+	{ 0xD00E, CRL_REG_LEN_08BIT, 0xB6 },
+	{ 0xD00F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD010, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0xD011, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0xD012, CRL_REG_LEN_08BIT, 0x4A },
+	{ 0xD013, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0xD014, CRL_REG_LEN_08BIT, 0x55 },
+	{ 0xD015, CRL_REG_LEN_08BIT, 0xF0 },
+	{ 0xD016, CRL_REG_LEN_08BIT, 0x1B },
+	{ 0xD017, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD018, CRL_REG_LEN_08BIT, 0xFA },
+	{ 0xD019, CRL_REG_LEN_08BIT, 0x2C },
+	{ 0xD01A, CRL_REG_LEN_08BIT, 0xF1 },
+	{ 0xD01B, CRL_REG_LEN_08BIT, 0x7E },
+	{ 0xD01C, CRL_REG_LEN_08BIT, 0x55 },
+	{ 0xD01D, CRL_REG_LEN_08BIT, 0x1C },
+	{ 0xD01E, CRL_REG_LEN_08BIT, 0xD8 },
+	{ 0xD01F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD020, CRL_REG_LEN_08BIT, 0x76 },
+	{ 0xD021, CRL_REG_LEN_08BIT, 0xC1 },
+	{ 0xD022, CRL_REG_LEN_08BIT, 0xBF },
+	{ 0xD044, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0xD045, CRL_REG_LEN_08BIT, 0xBA },
+	{ 0xD046, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0xD047, CRL_REG_LEN_08BIT, 0x47 },
+	{ 0xD048, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0xD049, CRL_REG_LEN_08BIT, 0xBA },
+	{ 0xD04A, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0xD04B, CRL_REG_LEN_08BIT, 0x47 },
+	{ 0xD04C, CRL_REG_LEN_08BIT, 0x82 },
+	{ 0xD04D, CRL_REG_LEN_08BIT, 0xF6 },
+	{ 0xD04E, CRL_REG_LEN_08BIT, 0xDA },
+	{ 0xD04F, CRL_REG_LEN_08BIT, 0xFA },
+	{ 0xD050, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD051, CRL_REG_LEN_08BIT, 0xF0 },
+	{ 0xD052, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0xD053, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0xD054, CRL_REG_LEN_08BIT, 0x81 },
+	{ 0xD055, CRL_REG_LEN_08BIT, 0xF6 },
+	{ 0xD056, CRL_REG_LEN_08BIT, 0xCE },
+	{ 0xD057, CRL_REG_LEN_08BIT, 0xFD },
+	{ 0xD058, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0xD059, CRL_REG_LEN_08BIT, 0xB5 },
+	{ 0xD05A, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0xD05B, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0xD05C, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0xD05D, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0xD05E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0xD05F, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0xD060, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0xD061, CRL_REG_LEN_08BIT, 0xD1 },
+	{ 0xD062, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0xD063, CRL_REG_LEN_08BIT, 0x49 },
+	{ 0xD064, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0xD065, CRL_REG_LEN_08BIT, 0x46 },
+	{ 0xD066, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0xD067, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0xD068, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0xD069, CRL_REG_LEN_08BIT, 0x8A },
+	{ 0xD06A, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0xD06B, CRL_REG_LEN_08BIT, 0x8A },
+	{ 0xD06C, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0xD06D, CRL_REG_LEN_08BIT, 0x1A },
+	{ 0xD06E, CRL_REG_LEN_08BIT, 0x8A },
+	{ 0xD06F, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0xD070, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD071, CRL_REG_LEN_08BIT, 0xB2 },
+	{ 0xD072, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0xD073, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0xD074, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0xD075, CRL_REG_LEN_08BIT, 0x46 },
+	{ 0xD076, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0xD077, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0xD078, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0xD079, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0xD07A, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0xD07B, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0xD07C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD07D, CRL_REG_LEN_08BIT, 0xDA },
+	{ 0xD07E, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0xD07F, CRL_REG_LEN_08BIT, 0x46 },
+	{ 0xD080, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0xD081, CRL_REG_LEN_08BIT, 0xB2 },
+	{ 0xD082, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0xD083, CRL_REG_LEN_08BIT, 0x81 },
+	{ 0xD084, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0xD085, CRL_REG_LEN_08BIT, 0xF6 },
+	{ 0xD086, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0xD087, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0xD088, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0xD089, CRL_REG_LEN_08BIT, 0x67 },
+	{ 0xD08A, CRL_REG_LEN_08BIT, 0x85 },
+	{ 0xD08B, CRL_REG_LEN_08BIT, 0xF6 },
+	{ 0xD08C, CRL_REG_LEN_08BIT, 0x4B },
+	{ 0xD08D, CRL_REG_LEN_08BIT, 0xFC },
+	{ 0xD08E, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0xD08F, CRL_REG_LEN_08BIT, 0xBD },
+	{ 0xD090, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD091, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0xD092, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0xD093, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0xD094, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0xD095, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0xD096, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0xD097, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x5869, CRL_REG_LEN_08BIT, 0x01 }, /*Global settings done*/
+	{ 0x0216, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0217, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x020E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x020F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0210, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0211, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0212, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0213, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0214, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0215, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A21, CRL_REG_LEN_08BIT, 0x00 }, /* LSC setting */
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x00 }, /* STATS Calc enable/disable */
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x00 }, /*stats output enable/disable */
+	{ 0x5041, CRL_REG_LEN_08BIT, 0x04 }, /*embedded data on/off, 4 lines */
+	{ 0x0138, CRL_REG_LEN_08BIT, 0x01 }, /* Temperature control enable */
+};
+
+static struct crl_register_write_rep imx230_mode_2k2k[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0A }, /*Output*/
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xD7 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xD7 },
+	{ 0x697D, CRL_REG_LEN_08BIT, 0x02 }, /* PAF settings */
+	{ 0x6985, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x698D, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x6995, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x699D, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x69A5, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x69AD, CRL_REG_LEN_08BIT, 0x1F },
+	{ 0x69B5, CRL_REG_LEN_08BIT, 0x1F },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xD8 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+/* UHD Scale */
+static struct crl_register_write_rep imx230_mode_4k2k[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x2E },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+
+/* UHD crop*/
+static struct crl_register_write_rep imx230_mode_uhd_crop[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+
+/*5344 x 40160*/
+static struct crl_register_write_rep imx230_mode_full_4_3[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x00 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A21, CRL_REG_LEN_08BIT, 0x02 },
+};
+
+/*5344 x 4016*/
+static struct crl_register_write_rep imx230_mode_full_16_9[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_3264x2448_crop[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x9F },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0x9F },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_3264x2448_scale[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x1A },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0F }, /*dig crop y*/
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_3280x2460_scale[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0xD0 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x9C },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x1A },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_3336x2502_scale[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xC6 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xAF },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_2672x1504[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x74 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_1940x1092[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x07 } /*1920 x 1080*/,
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xB7 },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep imx230_mode_1440[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0xA7 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0A },  /* 2560 x 1440 */
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0xA7 },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+
+static struct crl_register_write_rep imx230_mode_720[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x97 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x305C, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x05 } /* 1296 x 736 */,
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A22, CRL_REG_LEN_08BIT, 0x20 }, /* DPC2D settings */
+	{ 0x3A23, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A24, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A25, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3A26, CRL_REG_LEN_08BIT, 0xE0 },
+	{ 0x3A2F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A30, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A31, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3A32, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3A33, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3A34, CRL_REG_LEN_08BIT, 0xDF },
+	{ 0x3A35, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x3A36, CRL_REG_LEN_08BIT, 0x97 },
+	{ 0x3A37, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3A38, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3A39, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+
+static struct crl_register_write_rep imx230_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep imx230_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep imx230_data_fmt_width10[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0a0a }
+};
+
+static struct crl_register_write_rep imx230_data_fmt_width8[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0808 }
+};
+
+static struct crl_register_write_rep imx230_data_fmt_width14[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0e0e }
+};
+
+static struct crl_arithmetic_ops imx230_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_dynamic_register_access imx230_h_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	},
+};
+
+static struct crl_dynamic_register_access imx230_v_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx230_vflip_ops),
+		.ops = imx230_vflip_ops,
+		.mask = 0x2,
+	},
+};
+
+
+static struct crl_dynamic_register_access imx230_ana_gain_global_regs[] = {
+	{
+		.address = 0x0204,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx230_dig_gain_regs[] = {
+	{
+		.address = 0x020e,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xfff,
+	},
+	{
+		.address = 0x0210,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xfff,
+	},
+	{
+		.address = 0x0212,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xfff,
+	},
+	{
+		.address = 0x0214,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xfff,
+	},
+};
+
+
+
+static struct crl_dynamic_register_access imx230_exposure_regs[] = {
+	{
+		.address = 0x0202,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_dynamic_register_access imx230_fll_regs[] = {
+	{
+		.address = 0x0340,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx230_llp_regs[] = {
+	{
+		.address = 0x0342,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx230_hdr_et_ratio_regs[] = {
+	{ 0x0222, CRL_REG_LEN_08BIT, 0xff, 0, NULL, 0 },
+};
+
+static struct crl_register_write_rep imx230_hdr_mode_off[] = {
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x74 }, /* HDR output control */
+	{ 0x3001, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3006, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3007, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x31e0, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x31e1, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x31e4, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x30b4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30ba, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30bb, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30bc, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+/* HDR Type3 ZIGZAG */
+static struct crl_register_write_rep imx230_hdr_mode_type3[] = {
+	/*
+	 * 0x220 HDR control register
+	 * bit 0: 0:HDR Disable 1:HDR enable *1-> below
+	 * bit 1: 0:Combined gain 1:separate gain *0-> below
+	 * bit 5: 0:Use ET Ratio 1:Short exposure by direct control *0-> below
+	 */
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	/* Enable ATR 0x3000 bit 0 */
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3001, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3006, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3007, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x31e0, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x31e4, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x30b4, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30b5, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30b6, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30b7, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30b8, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30b9, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30ba, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30bb, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x30bc, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+/* HDR Type2 */
+static struct crl_register_write_rep imx230_hdr_mode_type2[] = {
+	/*
+	 * 0x220 HDR control register
+	 * bit 0: 0:HDR Disable 1:HDR enable *1-> below
+	 * bit 1: 0:Combined gain 1:separate gain *0-> below
+	 * bit 5: 0:Use ET Ratio 1:Short exposure by direct control *0-> below
+	 */
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+
+	/* Disable ATR for Type 2 0x3000 bit 0 */
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x64 },
+	{ 0x3001, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3006, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3007, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x31e0, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x31e4, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x30b4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30ba, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30bb, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30bc, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+/* HDR Type1 */
+static struct crl_register_write_rep imx230_hdr_mode_type1[] = {
+	/*
+	 * 0x220 HDR control register
+	 * bit 0: 0:HDR Disable 1:HDR enable *1-> below
+	 * bit 1: 0:Combined gain 1:separate gain *0-> below
+	 * bit 5: 0:Use ET Ratio 1:Short exposure by direct control *0-> below
+	 */
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0224, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0225, CRL_REG_LEN_08BIT, 0xF4 },
+	/* ATR is enabled 0x3000 bit 0 */
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x75 },
+	{ 0x3001, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3006, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3007, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x31e0, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x31e4, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x30b4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30b9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30ba, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30bb, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30bc, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+/*
+ * IMX230 HDR types
+ * Type 1 10bit output after HDR and ATR blocks
+ * Type 2 14bit RAW after HDR block
+ * Type 3 10bit ZIGZAG pattern
+ */
+static struct crl_dep_reg_list imx230_hdr_types_regs[] = {
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+	  { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 0 },
+	  ARRAY_SIZE(imx230_hdr_mode_off), imx230_hdr_mode_off, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+	  { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 1 },
+	  ARRAY_SIZE(imx230_hdr_mode_type1), imx230_hdr_mode_type1, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+	  { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 2 },
+	  ARRAY_SIZE(imx230_hdr_mode_type2), imx230_hdr_mode_type2, 0, 0 },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+	  { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 3 },
+	  ARRAY_SIZE(imx230_hdr_mode_type3), imx230_hdr_mode_type3, 0, 0 },
+};
+
+/* PDAF ON -> 0X3121 = 1 when HDR is off and 0x3121 = 0 when HDR is on */
+static struct crl_arithmetic_ops imx230_reg3121_pdaf_on[] = {
+	{ CRL_ASSIGNMENT,
+	 { CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL, CRL_CID_IMX230_HDR_MODE } },
+	{ CRL_BITWISE_COMPLEMENT, { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 0 } },
+	{ CRL_BITWISE_AND, { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 1 } },
+};
+
+/* PDAF ON -> 0X3001 = 0 when HDR is off and 0x3001 = 1 when HDR is on */
+static struct crl_arithmetic_ops imx230_reg3001_pdaf_on[] = {
+	{ CRL_ASSIGNMENT,
+	 { CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL, CRL_CID_IMX230_HDR_MODE } },
+	{ CRL_BITWISE_AND, { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 1 } },
+};
+
+/* 0x3001 and 0x3121 behaves differently when HDR is ON or OFF */
+static struct crl_dynamic_register_access imx230_pdaf_on[] = {
+	{ 0x3121, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(imx230_reg3121_pdaf_on), imx230_reg3121_pdaf_on, 0 },
+	{ 0x3001, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(imx230_reg3001_pdaf_on), imx230_reg3001_pdaf_on, 0 },
+	{ 0x3123, CRL_REG_LEN_08BIT, 0xff, 0, 0, 0 },
+};
+
+/* All the following registers are set to 0 when PDAF is Off*/
+static struct crl_dynamic_register_access imx230_pdaf_off[] = {
+	{ 0x3121, CRL_REG_LEN_08BIT, 0xff, 0, 0, 0 },
+	{ 0x3001, CRL_REG_LEN_08BIT, 0xff, 0, 0, 0 },
+	{ 0x3123, CRL_REG_LEN_08BIT, 0xff, 0, 0, 0 },
+};
+
+/*
+ * There are two different registers to enable/disable PDAF with HDR On and Off
+ *
+ * PDAF On, HDR Off -> 0x3121: 1, 0x3001: 0, 0x3123: 1
+ * PDAF Off, HDR Off-> 0x3121: 0, 0x3001: 0, 0x3123: 0
+ * PDAF Off, HDR On -> 0x3121: 0, 0x3001: 0, 0x3123: 0
+ * PDAF On, HDR On  -> 0x3121: 0, 0x3001: 1, 0x3123: 1
+ */
+static struct crl_dep_reg_list imx230_pdaf_ctrl_regs[] = {
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+	  { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 1 }, 0, 0,
+	  ARRAY_SIZE(imx230_pdaf_on), imx230_pdaf_on },
+	{ CRL_DEP_CTRL_CONDITION_EQUAL,
+	  { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 0 }, 0, 0,
+	  ARRAY_SIZE(imx230_pdaf_off), imx230_pdaf_off },
+};
+
+/* PDAF enable controls are dependent on HDR on or OFF */
+struct crl_dep_ctrl_provision imx230_hdr_dep_controls[] = {
+	/* Self update PDAF settins after change in HDR settings */
+	{ CRL_CID_SENSOR_PDAF, CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL, 0, 0 },
+};
+
+static struct crl_sensor_detect_config imx230_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0019, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+		{
+		.reg = { 0x0018, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+	{
+		.reg = { 0x0016, CRL_REG_LEN_16BIT, 0x0000ffff },
+		.width = 7,
+	},
+};
+
+static struct crl_arithmetic_ops imx230_thermal_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_REG_VAL,
+		.operand.entity_val = 0x013a,
+	},
+};
+
+static struct crl_dynamic_register_access imx230_thermal_regs[] = {
+	{
+		.address = 0x013a,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx230_thermal_ops),
+		.ops = imx230_thermal_ops,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_pll_configuration imx230_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 749600000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 599680000,
+		.pixel_rate_pa = 600000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx230_pll_1500mbps),
+		.pll_regs = imx230_pll_1500mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 749600000, /* Actual value is 750000000 */
+		.bitsperpixel = 14,
+		.pixel_rate_csi = 428570000,
+		.pixel_rate_pa = 573000000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx230_pll_4_14_1500mbps),
+		.pll_regs = imx230_pll_4_14_1500mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 749600000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 374800000,
+		.pixel_rate_pa = 600000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx230_pll_2_8_1500mbps),
+		.pll_regs = imx230_pll_2_8_1500mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 749600000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 299840000,
+		.pixel_rate_pa = 600000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx230_pll_2_10_1500mbps),
+		.pll_regs = imx230_pll_2_10_1500mbps,
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_full_4_3_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_3280x2460_s_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 3280, 2460 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_3264x2448_s_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 3264, 2448 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_3336x2502_s_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 3336, 2502 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_3264x2448_c_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 504, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 3264, 2448 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_full_16_9_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 504, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 5344, 3008 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_4k2k_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 504, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 3886, 2184 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_uhd_crop_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 928, 5344, 2160 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 2160 },
+		.out_rect = { 0, 0, 5344, 2160 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 2160 },
+		.out_rect = { 0, 0, 3840, 2160 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_2k2k_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 4016 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 2672, 2008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2672, 2008 },
+		.out_rect = { 0, 0, 2672, 2008 },
+	},
+};
+
+
+static struct crl_subdev_rect_rep imx230_1940x1092_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 504, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 2672, 1504 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2672, 1504 },
+		.out_rect = { 0, 0, 1940, 1092 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_2672x1504_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 504, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 2672, 1504 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2672, 1504 },
+		.out_rect = { 0, 0, 2672, 1504 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_1440_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 1288, 5344, 1440 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 1440 },
+		.out_rect = { 0, 0, 5344, 1440 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5344, 1440 },
+		.out_rect = { 0, 0, 2560, 1440 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx230_720_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5344, 4016 },
+		.out_rect = { 0, 0, 5344, 3008 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5344, 3008 },
+		.out_rect = { 0, 0, 1336, 752 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 1336, 752 },
+		.out_rect = { 0, 0, 1296, 736 },
+	},
+};
+
+static struct crl_mode_rep imx230_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_full_4_3_rects),
+		.sd_rects = imx230_full_4_3_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 5344,
+		.height = 4016,
+		.min_llp = 6024,
+		.min_fll = 4106,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_full_4_3),
+		.mode_regs = imx230_mode_full_4_3,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_3280x2460_s_rects),
+		.sd_rects = imx230_3280x2460_s_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 26,
+		.width = 3280,
+		.height = 2460,
+		.min_llp = 6024,
+		.min_fll = 4106,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_3280x2460_scale),
+		.mode_regs = imx230_mode_3280x2460_scale,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_3264x2448_s_rects),
+		.sd_rects = imx230_3264x2448_s_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 26,
+		.width = 3264,
+		.height = 2448,
+		.min_llp = 6024,
+		.min_fll = 4106,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_3264x2448_scale),
+		.mode_regs = imx230_mode_3264x2448_scale,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_3336x2502_s_rects),
+		.sd_rects = imx230_3336x2502_s_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 25,
+		.width = 3336,
+		.height = 2502,
+		.min_llp = 6024,
+		.min_fll = 4106,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_3336x2502_scale),
+		.mode_regs = imx230_mode_3336x2502_scale,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_3264x2448_c_rects),
+		.sd_rects = imx230_3264x2448_c_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3264,
+		.height = 2448,
+		.min_llp = 6024,
+		.min_fll = 2538,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_3264x2448_crop),
+		.mode_regs = imx230_mode_3264x2448_crop,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_full_16_9_rects),
+		.sd_rects = imx230_full_16_9_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 5344,
+		.height = 3008,
+		.min_llp = 6024,
+		.min_fll = 3098,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_full_16_9),
+		.mode_regs = imx230_mode_full_16_9,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_4k2k_rects),
+		.sd_rects = imx230_4k2k_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 22,
+		.width = 3886,
+		.height = 2184,
+		.min_llp = 6024,
+		.min_fll = 3300,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_4k2k),
+		.mode_regs = imx230_mode_4k2k,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_uhd_crop_rects),
+		.sd_rects = imx230_uhd_crop_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3840,
+		.height = 2160,
+		.min_llp = 6024,
+		.min_fll = 2250,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_uhd_crop),
+		.mode_regs = imx230_mode_uhd_crop,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_2k2k_rects),
+		.sd_rects = imx230_2k2k_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 2672,
+		.height = 2008,
+		.min_llp = 6024,
+		.min_fll = 2108,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_2k2k),
+		.mode_regs = imx230_mode_2k2k,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_2672x1504_rects),
+		.sd_rects = imx230_2672x1504_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 2672,
+		.height = 1504,
+		.min_llp = 6024,
+		.min_fll = 1660,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_2672x1504),
+		.mode_regs = imx230_mode_2672x1504,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_1940x1092_rects),
+		.sd_rects = imx230_1940x1092_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 22,
+		.width = 1940,
+		.height = 1092,
+		.min_llp = 6024,
+		.min_fll = 1660,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_1940x1092),
+		.mode_regs = imx230_mode_1940x1092,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_1440_rects),
+		.sd_rects = imx230_1440_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2560,
+		.height = 1440,
+		.min_llp = 6024,
+		.min_fll = 1530,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_1440),
+		.mode_regs = imx230_mode_1440,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx230_720_rects),
+		.sd_rects = imx230_720_rects,
+		.binn_hor = 4,
+		.binn_vert = 4,
+		.scale_m = 1,
+		.width = 1296,
+		.height = 736,
+		.min_llp = 6024,
+		.min_fll = 826,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx230_mode_720),
+		.mode_regs = imx230_mode_720,
+	},
+};
+
+static struct crl_sensor_subdev_config imx230_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "imx230 scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx230 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx230 pixel array",
+	},
+};
+
+static struct crl_sensor_limits imx230_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 5344,
+	.y_addr_max = 4016,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 255,
+	.scaler_n_min = 16,
+	.scaler_n_max = 16,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data imx230_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+};
+
+static struct crl_csi_data_fmt imx230_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = imx230_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx230_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx230_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx230_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx230_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx230_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx230_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx230_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG14_1X14,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.regs_items = 1,
+		.bits_per_pixel = 14,
+		.regs = imx230_data_fmt_width14,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB14_1X14,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 14,
+		.regs = imx230_data_fmt_width14,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR14_1X14,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 14,
+		.regs = imx230_data_fmt_width14,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG14_1X14,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 14,
+		.regs = imx230_data_fmt_width14,
+	},
+};
+
+static const char * const imx132_hdr_types[] = {
+	"HDR Off",
+	"HDR Type1",
+	"HDR Type2",
+	"HDRC Type3",
+};
+
+static struct crl_v4l2_ctrl imx230_vl42_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 448,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_ana_gain_global_regs),
+		.regs = imx230_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_exposure_regs),
+		.regs = imx230_exposure_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_h_flip_regs),
+		.regs = imx230_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_v_flip_regs),
+		.regs = imx230_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4130,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_fll_regs),
+		.regs = imx230_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 6024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 6024,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_llp_regs),
+		.regs = imx230_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4095,
+		.data.std_data.step = 1,
+		.data.std_data.def = 256,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_dig_gain_regs),
+		.regs = imx230_dig_gain_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_STREAMING,
+		.ctrl_id = CRL_CID_SENSOR_THERMAL_DATA,
+		.name = "Sensor Thermal Data",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_thermal_regs),
+		.regs = imx230_thermal_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE, /* Cannot be set when streaming? */
+		.ctrl_id = CRL_CID_IMX230_HDR_ET_RATIO,
+		.name = "imx230 HDR ET Ratio",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1,
+		.data.std_data.max = 16,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx230_hdr_et_ratio_regs),
+		.regs = imx230_hdr_et_ratio_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = CRL_CID_IMX230_HDR_MODE,
+		.name = "imx230 HDR mode",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.v4l2_menu_items.menu = imx132_hdr_types,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(imx132_hdr_types),
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = ARRAY_SIZE(imx230_hdr_dep_controls),
+		.dep_ctrls = imx230_hdr_dep_controls,
+		.v4l2_type = V4L2_CTRL_TYPE_MENU,
+		.crl_ctrl_dep_reg_list = ARRAY_SIZE(imx230_hdr_types_regs),
+		.dep_regs = imx230_hdr_types_regs,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_SENSOR_PDAF,
+		.name = "CRL_CID_SENSOR_PDAF",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = NULL,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+		.crl_ctrl_dep_reg_list = ARRAY_SIZE(imx230_pdaf_ctrl_regs),
+		.dep_regs = imx230_pdaf_ctrl_regs,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity imx230_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VANA",
+		.val = 2500000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VDIG",
+		.val = 1100000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VIO",
+		.val = 1800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VAF",
+		.val = 3000000,
+		.delay = 2000,
+	},
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.delay = 10700,
+	},
+};
+
+static struct crl_nvm_blob imx230_nvm_blobs[] = {
+	{ 0x54, 0x00, 0x100 },
+	{ 0x55, 0x00, 0x100 },
+	{ 0x56, 0x00, 0x021 },
+};
+
+static struct crl_arithmetic_ops imx230_frame_desc_width_ops[] = {
+	{
+	 .op = CRL_ASSIGNMENT,
+	 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+	 .operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops imx230_frame_desc_height_ops[] = {
+	{
+	 .op = CRL_ASSIGNMENT,
+	 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+	 .operand.entity_val = 4,
+	},
+};
+
+static struct crl_frame_desc imx230_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(imx230_frame_desc_width_ops),
+			 .ops = imx230_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(imx230_frame_desc_height_ops),
+			  .ops = imx230_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+struct crl_sensor_configuration imx230_crl_configuration = {
+
+
+	.power_items = ARRAY_SIZE(imx230_power_items),
+	.power_entities = imx230_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(imx230_powerup_regset),
+	.powerup_regs = imx230_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(imx230_sensor_detect_regset),
+	.id_regs = imx230_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx230_sensor_subdevs),
+	.subdevs = imx230_sensor_subdevs,
+
+	.sensor_limits = &imx230_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx230_pll_configurations),
+	.pll_configs = imx230_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx230_modes),
+	.modes = imx230_modes,
+	.fail_safe_mode_index = 3,
+
+	.streamon_regs_items = ARRAY_SIZE(imx230_streamon_regs),
+	.streamon_regs = imx230_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx230_streamoff_regs),
+	.streamoff_regs = imx230_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx230_vl42_ctrls),
+	.v4l2_ctrl_bank = imx230_vl42_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx230_crl_csi_data_fmt),
+	.csi_fmts = imx230_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx230_flip_configurations),
+	.flip_data = imx230_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_8BIT,
+	.crl_nvm_info.nvm_preop_regs_items = 0,
+	.crl_nvm_info.nvm_postop_regs_items = 0,
+	.crl_nvm_info.nvm_blobs_items = ARRAY_SIZE(imx230_nvm_blobs),
+	.crl_nvm_info.nvm_config = imx230_nvm_blobs,
+
+	.frame_desc_entries = ARRAY_SIZE(imx230_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = imx230_frame_desc,
+
+	.msr_file_name = "00imx230.bxt_rvp.drvb",
+};
+
+#endif  /* __CRLMODULE_imx230_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx274_configuration.h b/drivers/media/i2c/crlmodule/crl_imx274_configuration.h
new file mode 100644
index 000000000000..6ec84fb42a32
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx274_configuration.h
@@ -0,0 +1,1272 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation
+ *
+ * Author: Yuning Pu <yuning.pu@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_IMX274_CONFIGURATION_H_
+#define __CRLMODULE_IMX274_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define IMX274_REG_STANDBY              0x3000  /* STBLOGIC STBMIPI STBDV */
+
+#define IMX274_HMAX                      65535
+#define IMX274_VMAX                      1048575
+#define IMX274_MAX_SHS1                  65535
+#define IMX274_MAX_SHS2                  65535
+#define IMX274_MAX_RHS1                  65535
+
+/* imx274 mode standby cancel sequence */
+static struct crl_register_write_rep imx274_powerup_standby[] = {
+	{IMX274_REG_STANDBY, CRL_REG_LEN_08BIT, 0x12},
+};
+
+/* 1440Mbps for imx274 4K 30fps 1080p 60fps */
+static struct crl_register_write_rep imx274_pll_1440mbps[] = {
+	{0x3120, CRL_REG_LEN_08BIT, 0xF0},
+	{0x3121, CRL_REG_LEN_08BIT, 0x00},
+	{0x3122, CRL_REG_LEN_08BIT, 0x02},
+	{0x3129, CRL_REG_LEN_08BIT, 0x9C},
+	{0x312A, CRL_REG_LEN_08BIT, 0x02},
+	{0x312D, CRL_REG_LEN_08BIT, 0x02},
+	{0x310B, CRL_REG_LEN_08BIT, 0x00}, /* PLL standby */
+	{0x304C, CRL_REG_LEN_08BIT, 0x00},	/* PLSTMG01 */
+	{0x304D, CRL_REG_LEN_08BIT, 0x03},
+	{0x331C, CRL_REG_LEN_08BIT, 0x1A},
+	{0x331D, CRL_REG_LEN_08BIT, 0x00},
+	{0x3502, CRL_REG_LEN_08BIT, 0x02},
+	{0x3529, CRL_REG_LEN_08BIT, 0x0E},
+	{0x352A, CRL_REG_LEN_08BIT, 0x0E},
+	{0x352B, CRL_REG_LEN_08BIT, 0x0E},
+	{0x3538, CRL_REG_LEN_08BIT, 0x0E},
+	{0x3539, CRL_REG_LEN_08BIT, 0x0E},
+	{0x3553, CRL_REG_LEN_08BIT, 0x00},
+	{0x357D, CRL_REG_LEN_08BIT, 0x05},
+	{0x357F, CRL_REG_LEN_08BIT, 0x05},
+	{0x3581, CRL_REG_LEN_08BIT, 0x04},
+	{0x3583, CRL_REG_LEN_08BIT, 0x76},
+	{0x3587, CRL_REG_LEN_08BIT, 0x01},
+	{0x35BB, CRL_REG_LEN_08BIT, 0x0E},
+	{0x35BC, CRL_REG_LEN_08BIT, 0x0E},
+	{0x35BD, CRL_REG_LEN_08BIT, 0x0E},
+	{0x35BE, CRL_REG_LEN_08BIT, 0x0E},
+	{0x35BF, CRL_REG_LEN_08BIT, 0x0E},
+	{0x366E, CRL_REG_LEN_08BIT, 0x00},
+	{0x366F, CRL_REG_LEN_08BIT, 0x00},
+	{0x3670, CRL_REG_LEN_08BIT, 0x00},
+	{0x3671, CRL_REG_LEN_08BIT, 0x00},	/* PLSTMG01 */
+	{0x30EE, CRL_REG_LEN_08BIT, 0x01},
+	{0x3304, CRL_REG_LEN_08BIT, 0x32},	/* For Mipi */
+	{0x3305, CRL_REG_LEN_08BIT, 0x00},
+	{0x3306, CRL_REG_LEN_08BIT, 0x32},
+	{0x3307, CRL_REG_LEN_08BIT, 0x00},
+	{0x3590, CRL_REG_LEN_08BIT, 0x32},
+	{0x3591, CRL_REG_LEN_08BIT, 0x00},
+	{0x3686, CRL_REG_LEN_08BIT, 0x32},
+	{0x3687, CRL_REG_LEN_08BIT, 0x00},
+};
+
+static struct crl_register_write_rep imx274_3864_2202_RAW12_NORMAL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x00},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0xAA},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x08},
+	{0x3132, CRL_REG_LEN_08BIT, 0x9A},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x08},
+	{0x3004, CRL_REG_LEN_08BIT, 0x01},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x07},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x02},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x10},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0xFF},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x01},
+	{0x3344, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3345, CRL_REG_LEN_08BIT, 0x01},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0F},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x18},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3554, CRL_REG_LEN_08BIT, 0x00},
+	{0x3555, CRL_REG_LEN_08BIT, 0x00},
+	{0x3556, CRL_REG_LEN_08BIT, 0x00},
+	{0x3557, CRL_REG_LEN_08BIT, 0x00},
+	{0x3558, CRL_REG_LEN_08BIT, 0x00},
+	{0x3559, CRL_REG_LEN_08BIT, 0x1F},
+	{0x355A, CRL_REG_LEN_08BIT, 0x1F},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0F},
+	{0x366A, CRL_REG_LEN_08BIT, 0x00},
+	{0x366B, CRL_REG_LEN_08BIT, 0x00},
+	{0x366C, CRL_REG_LEN_08BIT, 0x00},
+	{0x366D, CRL_REG_LEN_08BIT, 0x00},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x07},	/* MDPLS17 */
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},	/* Disable DOL */
+};
+
+static struct crl_register_write_rep imx274_3864_2174_RAW10_NORMAL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x01},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0x86},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x08},
+	{0x3132, CRL_REG_LEN_08BIT, 0x7E},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x08},
+	{0x3004, CRL_REG_LEN_08BIT, 0x01},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x01},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x02},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x08},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0x0A},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x00},
+	{0x3344, CRL_REG_LEN_08BIT, 0x16},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0E},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x18},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3554, CRL_REG_LEN_08BIT, 0x1F},
+	{0x3555, CRL_REG_LEN_08BIT, 0x01},
+	{0x3556, CRL_REG_LEN_08BIT, 0x01},
+	{0x3557, CRL_REG_LEN_08BIT, 0x01},
+	{0x3558, CRL_REG_LEN_08BIT, 0x01},
+	{0x3559, CRL_REG_LEN_08BIT, 0x00},
+	{0x355A, CRL_REG_LEN_08BIT, 0x00},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0E},
+	{0x366A, CRL_REG_LEN_08BIT, 0x1B},
+	{0x366B, CRL_REG_LEN_08BIT, 0x1A},
+	{0x366C, CRL_REG_LEN_08BIT, 0x19},
+	{0x366D, CRL_REG_LEN_08BIT, 0x17},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x05},	/* MDPLS17 */
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},	/* Disable DOL */
+};
+
+static struct crl_register_write_rep imx274_3868_4536_RAW10_DOL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x01},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0x86},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x08},
+	{0x3132, CRL_REG_LEN_08BIT, 0x8E},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x08},
+	{0x3004, CRL_REG_LEN_08BIT, 0x06},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x01},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x02},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x00},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0x0A},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x00},
+	{0x3344, CRL_REG_LEN_08BIT, 0x16},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0E},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x1C},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x0F},
+	{0x3554, CRL_REG_LEN_08BIT, 0x1F},
+	{0x3555, CRL_REG_LEN_08BIT, 0x01},
+	{0x3556, CRL_REG_LEN_08BIT, 0x01},
+	{0x3557, CRL_REG_LEN_08BIT, 0x01},
+	{0x3558, CRL_REG_LEN_08BIT, 0x01},
+	{0x3559, CRL_REG_LEN_08BIT, 0x00},
+	{0x355A, CRL_REG_LEN_08BIT, 0x00},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0E},
+	{0x366A, CRL_REG_LEN_08BIT, 0x1B},
+	{0x366B, CRL_REG_LEN_08BIT, 0x1A},
+	{0x366C, CRL_REG_LEN_08BIT, 0x19},
+	{0x366D, CRL_REG_LEN_08BIT, 0x17},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x05},	/* MDPLS17 */
+	/* DOL mode settings */
+	{0x3019, CRL_REG_LEN_08BIT, 0x01},	/* DOLMODE,DOLSCDEN,HINFOEN */
+	{0x3041, CRL_REG_LEN_08BIT, 0x31},	/* DOLSET1 */
+	{0x3042, CRL_REG_LEN_08BIT, 0x04},	/* HCYCLE */
+	{0x3043, CRL_REG_LEN_08BIT, 0x01},
+	{0x30E9, CRL_REG_LEN_08BIT, 0x01},	/* DOLSET2 */
+};
+
+static struct crl_register_write_rep imx274_1932_1094_RAW10_NORMAL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x02},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0x4E},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x04},
+	{0x3132, CRL_REG_LEN_08BIT, 0x46},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x04},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x21},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x11},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x08},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0x0A},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x00},
+	{0x3344, CRL_REG_LEN_08BIT, 0x1A},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0E},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x8C},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x07},
+	{0x3554, CRL_REG_LEN_08BIT, 0x00},
+	{0x3555, CRL_REG_LEN_08BIT, 0x01},
+	{0x3556, CRL_REG_LEN_08BIT, 0x01},
+	{0x3557, CRL_REG_LEN_08BIT, 0x01},
+	{0x3558, CRL_REG_LEN_08BIT, 0x01},
+	{0x3559, CRL_REG_LEN_08BIT, 0x00},
+	{0x355A, CRL_REG_LEN_08BIT, 0x00},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0E},
+	{0x366A, CRL_REG_LEN_08BIT, 0x1B},
+	{0x366B, CRL_REG_LEN_08BIT, 0x1A},
+	{0x366C, CRL_REG_LEN_08BIT, 0x19},
+	{0x366D, CRL_REG_LEN_08BIT, 0x17},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x05},	/* MDPLS17 */
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},	/* Disable DOL */
+};
+
+static struct crl_register_write_rep imx274_1932_1094_RAW12_NORMAL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x02},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0x4E},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x04},
+	{0x3132, CRL_REG_LEN_08BIT, 0x46},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x04},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x27},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x11},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x08},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0xFF},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x01},
+	{0x3344, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3345, CRL_REG_LEN_08BIT, 0x01},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0F},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x8C},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x07},
+	{0x3554, CRL_REG_LEN_08BIT, 0x00},
+	{0x3555, CRL_REG_LEN_08BIT, 0x00},
+	{0x3556, CRL_REG_LEN_08BIT, 0x00},
+	{0x3557, CRL_REG_LEN_08BIT, 0x00},
+	{0x3558, CRL_REG_LEN_08BIT, 0x00},
+	{0x3559, CRL_REG_LEN_08BIT, 0x1F},
+	{0x355A, CRL_REG_LEN_08BIT, 0x1F},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0F},
+	{0x366A, CRL_REG_LEN_08BIT, 0x00},
+	{0x366B, CRL_REG_LEN_08BIT, 0x00},
+	{0x366C, CRL_REG_LEN_08BIT, 0x00},
+	{0x366D, CRL_REG_LEN_08BIT, 0x00},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x07},	/* MDPLS17 */
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},	/* Disable DOL */
+};
+
+static struct crl_register_write_rep imx274_1936_2376_RAW10_DOL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x02},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0x4E},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x04},
+	{0x3132, CRL_REG_LEN_08BIT, 0x54},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x04},
+	{0x3004, CRL_REG_LEN_08BIT, 0x07},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x21},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x11},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x08},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0x0A},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x00},
+	{0x3344, CRL_REG_LEN_08BIT, 0x1A},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0E},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x90},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x07},
+	{0x3554, CRL_REG_LEN_08BIT, 0x00},
+	{0x3555, CRL_REG_LEN_08BIT, 0x01},
+	{0x3556, CRL_REG_LEN_08BIT, 0x01},
+	{0x3557, CRL_REG_LEN_08BIT, 0x01},
+	{0x3558, CRL_REG_LEN_08BIT, 0x01},
+	{0x3559, CRL_REG_LEN_08BIT, 0x00},
+	{0x355A, CRL_REG_LEN_08BIT, 0x00},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0E},
+	{0x366A, CRL_REG_LEN_08BIT, 0x1B},
+	{0x366B, CRL_REG_LEN_08BIT, 0x1A},
+	{0x366C, CRL_REG_LEN_08BIT, 0x19},
+	{0x366D, CRL_REG_LEN_08BIT, 0x17},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x05},	/* MDPLS17 */
+	/* DOL mode settings */
+	{0x3019, CRL_REG_LEN_08BIT, 0x01},	/* DOLMODE,DOLSCDEN,HINFOEN */
+	{0x3041, CRL_REG_LEN_08BIT, 0x31},	/* DOLSET1 */
+	{0x3042, CRL_REG_LEN_08BIT, 0x04},	/* HCYCLE */
+	{0x3043, CRL_REG_LEN_08BIT, 0x01},
+	{0x30E9, CRL_REG_LEN_08BIT, 0x01},	/* DOLSET2 */
+};
+
+static struct crl_register_write_rep imx274_1288_738_RAW10_NORMAL[] = {
+	{0x30E2, CRL_REG_LEN_08BIT, 0x03},	/* VCUTMODE */
+	{0x3130, CRL_REG_LEN_08BIT, 0xE2},	/* WRITE_VSIZE */
+	{0x3131, CRL_REG_LEN_08BIT, 0x02},
+	{0x3132, CRL_REG_LEN_08BIT, 0xDE},	/* Y_OUT_SIZE */
+	{0x3133, CRL_REG_LEN_08BIT, 0x02},
+	{0x3004, CRL_REG_LEN_08BIT, 0x03},	/* MDSEL */
+	{0x3005, CRL_REG_LEN_08BIT, 0x31},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x09},
+	{0x3A41, CRL_REG_LEN_08BIT, 0x04},	/* MDSEL5 */
+	{0x3342, CRL_REG_LEN_08BIT, 0x0A},	/* MDPLS01 */
+	{0x3343, CRL_REG_LEN_08BIT, 0x00},
+	{0x3344, CRL_REG_LEN_08BIT, 0x1B},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3528, CRL_REG_LEN_08BIT, 0x0E},	/* MDPLS03 */
+	{0x3A54, CRL_REG_LEN_08BIT, 0x8C},	/* Metadata Size */
+	{0x3A55, CRL_REG_LEN_08BIT, 0x00},
+	{0x3554, CRL_REG_LEN_08BIT, 0x00},
+	{0x3555, CRL_REG_LEN_08BIT, 0x01},
+	{0x3556, CRL_REG_LEN_08BIT, 0x01},
+	{0x3557, CRL_REG_LEN_08BIT, 0x01},
+	{0x3558, CRL_REG_LEN_08BIT, 0x01},
+	{0x3559, CRL_REG_LEN_08BIT, 0x00},
+	{0x355A, CRL_REG_LEN_08BIT, 0x00},
+	{0x35BA, CRL_REG_LEN_08BIT, 0x0E},
+	{0x366A, CRL_REG_LEN_08BIT, 0x1B},
+	{0x366B, CRL_REG_LEN_08BIT, 0x19},
+	{0x366C, CRL_REG_LEN_08BIT, 0x17},
+	{0x366D, CRL_REG_LEN_08BIT, 0x17},
+	{0x33A6, CRL_REG_LEN_08BIT, 0x01},
+	{0x306B, CRL_REG_LEN_08BIT, 0x05},	/* MDPLS17 */
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},	/* Disable DOL */
+};
+
+static struct crl_register_write_rep imx274_streamon_regs[] = {
+	{0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+	{IMX274_REG_STANDBY, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x02},
+	{0x00, CRL_REG_LEN_DELAY, 7, 0x00},	/* Add a 7ms delay */
+	{0x30F4, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x02},
+};
+
+static struct crl_register_write_rep imx274_streamoff_regs[] = {
+	{0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+	{IMX274_REG_STANDBY, CRL_REG_LEN_08BIT, 0x01},
+	{0x303E, CRL_REG_LEN_08BIT, 0x02},
+	{0x00, CRL_REG_LEN_DELAY, 7, 0x00},	/* Add a delay */
+	{0x30F4, CRL_REG_LEN_08BIT, 0x01},
+	{0x3018, CRL_REG_LEN_08BIT, 0x02},
+};
+
+static struct crl_arithmetic_ops imx274_rshift8_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx274_rshift16_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 16,
+	}
+};
+
+static struct crl_arithmetic_ops imx274_nan_gain_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0x07,
+	}
+};
+
+/* imx274 use register PGC[10:0] 300A 300B to indicate analog gain */
+static struct crl_dynamic_register_access imx274_ana_gain_global_regs[] = {
+	{
+		.address = 0x300A,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+	},
+	{
+		.address = 0x300B,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_nan_gain_ops),
+		.ops = imx274_nan_gain_ops,
+	},
+};
+
+static struct crl_dynamic_register_access imx274_dig_gain_regs[] = {
+	{
+		.address = 0x3012,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xf,
+	},
+};
+
+/* shr = fll - exposure */
+static struct crl_arithmetic_ops imx274_shr_lsb_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	}
+};
+
+static struct crl_arithmetic_ops imx274_shr_msb_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_dynamic_register_access imx274_shr_regs[] = {
+	{
+		.address = 0x300C,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_shr_lsb_ops),
+		.ops = imx274_shr_lsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x300D,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_shr_msb_ops),
+		.ops = imx274_shr_msb_ops,
+		.mask = 0xff,
+	},
+};
+
+/* Short exposure for DOL */
+static struct crl_dynamic_register_access imx274_shs1_regs[] = {
+	{
+		.address = 0x302E,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x302F,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_rshift8_ops),
+		.ops = imx274_rshift8_ops,
+		.mask = 0xff,
+	},
+};
+
+/* Long exposure for DOL */
+static struct crl_dynamic_register_access imx274_shs2_regs[] = {
+	{
+		.address = 0x3030,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3031,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_rshift8_ops),
+		.ops = imx274_rshift8_ops,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access imx274_rhs1_regs[] = {
+	{
+		.address = 0x3032,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3033,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_rshift8_ops),
+		.ops = imx274_rshift8_ops,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access imx274_fll_regs[] = {
+	/*
+	 * Use 8bits access since 24bits or 32bits access will fail
+	 * TODO: root cause the 24bits and 32bits access issues
+	 */
+	{
+		.address = 0x30F8,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30F9,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_rshift8_ops),
+		.ops = imx274_rshift8_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30FA,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_rshift16_ops),
+		.ops = imx274_rshift16_ops,
+		.mask = 0xf,
+	},
+};
+
+static struct crl_dynamic_register_access imx274_llp_regs[] = {
+	{
+		.address = 0x30F6,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30F7,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx274_rshift8_ops),
+		.ops = imx274_rshift8_ops,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_sensor_detect_config imx274_sensor_detect_regset[] = {
+	{
+		.reg = { 0x30F8, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+	{
+		.reg = { 0x30F9, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+};
+
+static struct crl_pll_configuration imx274_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 720000000,	/* 1440000000/2 */
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 72000000,
+		.pixel_rate_pa = 72000000,	/* 72MHz */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx274_pll_1440mbps),
+		.pll_regs = imx274_pll_1440mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 720000000,	/* 1440000000/2 */
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 72000000,
+		.pixel_rate_pa = 72000000,	/* 72MHz */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx274_pll_1440mbps),
+		.pll_regs = imx274_pll_1440mbps,
+	}
+};
+
+static struct crl_subdev_rect_rep imx274_3864_2202_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3864,
+		.out_rect.height = 2202,
+	}
+};
+
+static struct crl_subdev_rect_rep imx274_3864_2174_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3864,
+		.out_rect.height = 2174,
+	}
+};
+
+/* DOL pixel array includes 4 pixel sync code each line */
+static struct crl_subdev_rect_rep imx274_3868_4536_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	}
+};
+
+static struct crl_subdev_rect_rep imx274_1932_1094_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1932,
+		.out_rect.height = 1094,
+	}
+};
+
+/* DOL pixel array includes 4 pixel sync code each line */
+static struct crl_subdev_rect_rep imx274_1936_2376_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1936,
+		.out_rect.height = 2376,
+	}
+};
+
+static struct crl_subdev_rect_rep imx274_1288_738_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3868,
+		.out_rect.height = 4536,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3868,
+		.in_rect.height = 4536,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1288,
+		.out_rect.height = 738,
+	}
+};
+
+static struct crl_mode_rep imx274_modes[] = {
+	{
+		/* mode 0 12bit all pixel scan per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_3864_2202_rects),
+		.sd_rects = imx274_3864_2202_rects,
+		.binn_hor = 1,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 3864,
+		.height = 2202,
+		.min_llp = 493, /* 01EDh */
+		.min_fll = 4868, /* default 30fps */
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items =
+				ARRAY_SIZE(imx274_3864_2202_RAW12_NORMAL),
+		.mode_regs = imx274_3864_2202_RAW12_NORMAL,
+	},
+	{
+		/* mode 1 10bit all pixel scan per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_3864_2174_rects),
+		.sd_rects = imx274_3864_2174_rects,
+		.binn_hor = 1,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 3864,
+		.height = 2174,
+		.min_llp = 493, /* 01EDh */
+		.min_fll = 4868, /* default 30fps */
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items =
+				ARRAY_SIZE(imx274_3864_2174_RAW10_NORMAL),
+		.mode_regs = imx274_3864_2174_RAW10_NORMAL,
+	},
+	{
+		/* mode 1 DOL 10bit per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_3868_4536_rects),
+		.sd_rects = imx274_3868_4536_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3868,
+		.height = 4536, /* 2*(2160+22+VBP) */
+		.min_llp = 1052, /* 041Ch */
+		.min_fll = 2281, /* 30fps */
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items =
+				ARRAY_SIZE(imx274_3868_4536_RAW10_DOL),
+		.mode_regs = imx274_3868_4536_RAW10_DOL,
+	},
+	{
+		/* mode 3 10bit all pixel scan per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_1932_1094_rects),
+		.sd_rects = imx274_1932_1094_rects,
+		.binn_hor = 2,
+		.binn_vert = 4,
+		.scale_m = 1,
+		.width = 1932,
+		.height = 1094,
+		.min_llp = 493, /* 01EDh */
+		.min_fll = 4868, /* default 30fps */
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(
+				imx274_1932_1094_RAW10_NORMAL),
+		.mode_regs = imx274_1932_1094_RAW10_NORMAL,
+	},
+	{
+		/* mode 3 12bit all pixel scan per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_1932_1094_rects),
+		.sd_rects = imx274_1932_1094_rects,
+		.binn_hor = 2,
+		.binn_vert = 4,
+		.scale_m = 1,
+		.width = 1932,
+		.height = 1094,
+		.min_llp = 493, /* 01EDh */
+		.min_fll = 4868, /* default 30fps */
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(
+				imx274_1932_1094_RAW12_NORMAL),
+		.mode_regs = imx274_1932_1094_RAW12_NORMAL,
+	},
+	{
+		/* mode 3 DOL bit10 per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_1936_2376_rects),
+		.sd_rects = imx274_1936_2376_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1936,
+		.height = 2376,
+		.min_llp = 1052, /* 041Ch */
+		.min_fll = 2281, /* 30fps */
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(
+				imx274_1936_2376_RAW10_DOL),
+		.mode_regs = imx274_1936_2376_RAW10_DOL,
+	},
+	{
+		/* mode 5 bit10 per datasheet */
+		.sd_rects_items = ARRAY_SIZE(imx274_1288_738_rects),
+		.sd_rects = imx274_1288_738_rects,
+		.binn_hor = 3,
+		.binn_vert = 6,
+		.scale_m = 1,
+		.width = 1288,
+		.height = 738,
+		.min_llp = 260,
+		.min_fll = 2310,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(
+				imx274_1288_738_RAW10_NORMAL),
+		.mode_regs = imx274_1288_738_RAW10_NORMAL,
+	},
+};
+
+struct crl_sensor_subdev_config imx274_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx274 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx274 pixel array",
+	}
+};
+
+static struct crl_sensor_limits imx274_sensor_limits = {
+		.x_addr_min = 0,
+		.y_addr_min = 0,
+		.x_addr_max = 3868, /* pixel area length and width */
+		.y_addr_max = 4536,
+		.min_frame_length_lines = 1111,
+		.max_frame_length_lines = 65535,
+		.min_line_length_pixels = 260,
+		.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data imx274_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	}
+};
+
+static struct crl_csi_data_fmt imx274_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,  /* default order */
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,	/* default order */
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	}
+};
+
+static struct crl_v4l2_ctrl imx274_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1111,
+		.data.std_data.max = IMX274_VMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1111,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_fll_regs),
+		.regs = imx274_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 260,
+		.data.std_data.max = IMX274_HMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 260,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_llp_regs),
+		.regs = imx274_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 6,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_dig_gain_regs),
+		.regs = imx274_dig_gain_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x7A5,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_ana_gain_global_regs),
+		.regs = imx274_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 4,
+		.data.std_data.max = IMX274_MAX_SHS2,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x400,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_shr_regs),
+		.regs = imx274_shr_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.name = "CRL_CID_EXPOSURE_SHS1",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 4,
+		.data.std_data.max = IMX274_MAX_SHS1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x06,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_shs1_regs),
+		.regs = imx274_shs1_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS2,
+		.name = "CRL_CID_EXPOSURE_SHS2",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 10,
+		.data.std_data.max = IMX274_MAX_SHS2,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x2d,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_shs2_regs),
+		.regs = imx274_shs2_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_RHS1,
+		.name = "CRL_CID_EXPOSURE_RHS1",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 6,
+		.data.std_data.max = IMX274_MAX_RHS1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x56, /* Fixed to 86 by default */
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx274_rhs1_regs),
+		.regs = imx274_rhs1_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_SENSOR_MODE,
+		.name = "CRL_CID_SENSOR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = ARRAY_SIZE(imx274_modes) - 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops imx274_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops imx274_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc imx274_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(imx274_frame_desc_width_ops),
+			.ops = imx274_frame_desc_width_ops,
+			},
+		.height = {
+			.ops_items = ARRAY_SIZE(imx274_frame_desc_height_ops),
+			.ops = imx274_frame_desc_height_ops,
+			},
+			.csi2_channel.entity_val = 0,
+			.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+static struct crl_power_seq_entity imx274_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+	},
+};
+
+struct crl_sensor_configuration imx274_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(imx274_power_items),
+	.power_entities = imx274_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(imx274_powerup_standby),
+	.powerup_regs = imx274_powerup_standby,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(imx274_sensor_detect_regset),
+	.id_regs = imx274_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx274_sensor_subdevs),
+	.subdevs = imx274_sensor_subdevs,
+
+	.sensor_limits = &imx274_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx274_pll_configurations),
+	.pll_configs = imx274_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx274_modes),
+	.modes = imx274_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(imx274_streamon_regs),
+	.streamon_regs = imx274_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx274_streamoff_regs),
+	.streamoff_regs = imx274_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx274_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx274_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx274_crl_csi_data_fmt),
+	.csi_fmts = imx274_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx274_flip_configurations),
+	.flip_data = imx274_flip_configurations,
+
+	.frame_desc_entries = ARRAY_SIZE(imx274_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = imx274_frame_desc,
+
+};
+
+#endif  /* __CRLMODULE_IMX274_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx290_configuration.h b/drivers/media/i2c/crlmodule/crl_imx290_configuration.h
new file mode 100644
index 000000000000..6a3561bea27f
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx290_configuration.h
@@ -0,0 +1,1078 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Yuning Pu <yuning.pu@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_IMX290_CONFIGURATION_H_
+#define __CRLMODULE_IMX290_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define IMX290_REG_STANDBY			0x3000
+#define IMX290_REG_XMSTA			0x3002
+
+#define IMX290_HMAX				65535
+#define IMX290_VMAX				131071
+#define IMX290_MAX_SHS1				(IMX290_VMAX - 2)
+
+static struct crl_register_write_rep imx290_pll_891mbps[] = {
+	{0x3405, CRL_REG_LEN_08BIT, 0x00},	/* repetition */
+	{0x3407, CRL_REG_LEN_08BIT, 0x03},	/* physical lane num(fixed) */
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},	/* FRSEL FDG_SEL */
+	{0x300F, CRL_REG_LEN_08BIT, 0x00},	/* fixed setting */
+	{0x3010, CRL_REG_LEN_08BIT, 0x21},
+	{0x3012, CRL_REG_LEN_08BIT, 0x64},
+	{0x3414, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3415, CRL_REG_LEN_08BIT, 0x00},
+	{0x3016, CRL_REG_LEN_08BIT, 0x09},	/* changed */
+	{0x3119, CRL_REG_LEN_08BIT, 0x9E},
+	{0x311C, CRL_REG_LEN_08BIT, 0x1E},
+	{0x311E, CRL_REG_LEN_08BIT, 0x08},
+	{0x3128, CRL_REG_LEN_08BIT, 0x05},
+	{0x332C, CRL_REG_LEN_08BIT, 0xD3},
+	{0x332D, CRL_REG_LEN_08BIT, 0x10},
+	{0x332E, CRL_REG_LEN_08BIT, 0x0D},
+	{0x313D, CRL_REG_LEN_08BIT, 0x83},
+	{0x3443, CRL_REG_LEN_08BIT, 0x03},	/* csi_lane_mode(fixed) */
+	{0x3444, CRL_REG_LEN_08BIT, 0x20},	/* extck_freq */
+	{0x3445, CRL_REG_LEN_08BIT, 0x25},
+	{0x3446, CRL_REG_LEN_08BIT, 0x77},	/* tclkpost */
+	{0x3447, CRL_REG_LEN_08BIT, 0x00},
+	{0x3448, CRL_REG_LEN_08BIT, 0x67},	/* thszero */
+	{0x3449, CRL_REG_LEN_08BIT, 0x00},
+	{0x344A, CRL_REG_LEN_08BIT, 0x47},	/* thsprepare */
+	{0x344B, CRL_REG_LEN_08BIT, 0x00},
+	{0x344C, CRL_REG_LEN_08BIT, 0x37},	/* thstrail */
+	{0x344D, CRL_REG_LEN_08BIT, 0x00},
+	{0x344E, CRL_REG_LEN_08BIT, 0x3F},	/* thstrail */
+	{0x344F, CRL_REG_LEN_08BIT, 0x00},
+	{0x3150, CRL_REG_LEN_08BIT, 0x03},
+	{0x3450, CRL_REG_LEN_08BIT, 0xFF},	/* tclkzero */
+	{0x3451, CRL_REG_LEN_08BIT, 0x00},
+	{0x3452, CRL_REG_LEN_08BIT, 0x3F},	/* tclkprepare */
+	{0x3453, CRL_REG_LEN_08BIT, 0x00},
+	{0x3454, CRL_REG_LEN_08BIT, 0x37},	/* tlpx */
+	{0x3455, CRL_REG_LEN_08BIT, 0x00},
+	{0x3358, CRL_REG_LEN_08BIT, 0x06},	/* fixed setting */
+	{0x3359, CRL_REG_LEN_08BIT, 0xE1},
+	{0x335A, CRL_REG_LEN_08BIT, 0x11},
+	{0x305C, CRL_REG_LEN_08BIT, 0x18},	/* incksel1 */
+	{0x305D, CRL_REG_LEN_08BIT, 0x03},	/* incksel2 */
+	{0x305E, CRL_REG_LEN_08BIT, 0x20},	/* incksel3 */
+	{0x315E, CRL_REG_LEN_08BIT, 0x1A},	/* incksel5 */
+	{0x305F, CRL_REG_LEN_08BIT, 0x01},	/* incksel4 */
+	{0x3360, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3361, CRL_REG_LEN_08BIT, 0x61},
+	{0x3362, CRL_REG_LEN_08BIT, 0x10},
+	{0x3164, CRL_REG_LEN_08BIT, 0x1A},	/* incksel6 */
+	{0x3070, CRL_REG_LEN_08BIT, 0x02},
+	{0x3071, CRL_REG_LEN_08BIT, 0x11},
+	{0x317E, CRL_REG_LEN_08BIT, 0x00},
+	{0x3480, CRL_REG_LEN_08BIT, 0x49},	/* inclsel7 */
+	{0x309B, CRL_REG_LEN_08BIT, 0x10},
+	{0x309C, CRL_REG_LEN_08BIT, 0x22},
+	{0x30A2, CRL_REG_LEN_08BIT, 0x02},
+	{0x30A6, CRL_REG_LEN_08BIT, 0x20},
+	{0x30A8, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AA, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AC, CRL_REG_LEN_08BIT, 0x20},
+	{0x30B0, CRL_REG_LEN_08BIT, 0x43},
+	{0x33B0, CRL_REG_LEN_08BIT, 0x50},
+	{0x33B2, CRL_REG_LEN_08BIT, 0x1A},
+	{0x33B3, CRL_REG_LEN_08BIT, 0x04},
+	{0x32B8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32BA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32BB, CRL_REG_LEN_08BIT, 0x04},
+	{0x32C8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32C9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32CB, CRL_REG_LEN_08BIT, 0x04},
+};
+
+/* 445Mbps for imx290 1080p 30fps */
+static struct crl_register_write_rep imx290_pll_445mbps[] = {
+	{0x3405, CRL_REG_LEN_08BIT, 0x20},	/* repetition */
+	{0x3407, CRL_REG_LEN_08BIT, 0x03},	/* physical lane num(fixed) */
+	{0x3009, CRL_REG_LEN_08BIT, 0x02},	/* FRSEL FDG_SEL */
+	{0x300F, CRL_REG_LEN_08BIT, 0x00},	/* fixed setting */
+	{0x3010, CRL_REG_LEN_08BIT, 0x21},
+	{0x3012, CRL_REG_LEN_08BIT, 0x64},
+	{0x3414, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3016, CRL_REG_LEN_08BIT, 0x09},	/* changed */
+	{0x3119, CRL_REG_LEN_08BIT, 0x9E},
+	{0x311C, CRL_REG_LEN_08BIT, 0x1E},
+	{0x311E, CRL_REG_LEN_08BIT, 0x08},
+	{0x3128, CRL_REG_LEN_08BIT, 0x05},
+	{0x332C, CRL_REG_LEN_08BIT, 0xD3},
+	{0x332D, CRL_REG_LEN_08BIT, 0x10},
+	{0x332E, CRL_REG_LEN_08BIT, 0x0D},
+	{0x313D, CRL_REG_LEN_08BIT, 0x83},
+	{0x3443, CRL_REG_LEN_08BIT, 0x03},	/* csi_lane_mode(fixed) */
+	{0x3444, CRL_REG_LEN_08BIT, 0x20},	/* extck_freq */
+	{0x3445, CRL_REG_LEN_08BIT, 0x25},
+	{0x3446, CRL_REG_LEN_08BIT, 0x47},	/* tclkpost */
+	{0x3447, CRL_REG_LEN_08BIT, 0x00},
+	{0x3448, CRL_REG_LEN_08BIT, 0x1F},	/* thszero */
+	{0x3449, CRL_REG_LEN_08BIT, 0x00},
+	{0x344A, CRL_REG_LEN_08BIT, 0x17},	/* thsprepare */
+	{0x344B, CRL_REG_LEN_08BIT, 0x00},
+	{0x344C, CRL_REG_LEN_08BIT, 0x0F},	/* thstrail */
+	{0x344D, CRL_REG_LEN_08BIT, 0x00},
+	{0x344E, CRL_REG_LEN_08BIT, 0x17},	/* thstrail */
+	{0x344F, CRL_REG_LEN_08BIT, 0x00},
+	{0x3150, CRL_REG_LEN_08BIT, 0x03},
+	{0x3450, CRL_REG_LEN_08BIT, 0x47},	/* tclkzero */
+	{0x3451, CRL_REG_LEN_08BIT, 0x00},
+	{0x3452, CRL_REG_LEN_08BIT, 0x0F},	/* tclkprepare */
+	{0x3453, CRL_REG_LEN_08BIT, 0x00},
+	{0x3454, CRL_REG_LEN_08BIT, 0x0F},	/* tlpx */
+	{0x3455, CRL_REG_LEN_08BIT, 0x00},
+	{0x3358, CRL_REG_LEN_08BIT, 0x06},	/* fixed setting */
+	{0x3359, CRL_REG_LEN_08BIT, 0xE1},
+	{0x335A, CRL_REG_LEN_08BIT, 0x11},
+	{0x305C, CRL_REG_LEN_08BIT, 0x18},	/* incksel1 */
+	{0x305D, CRL_REG_LEN_08BIT, 0x03},	/* incksel2 */
+	{0x305E, CRL_REG_LEN_08BIT, 0x20},	/* incksel3 */
+	{0x315E, CRL_REG_LEN_08BIT, 0x1A},	/* incksel5 */
+	{0x305F, CRL_REG_LEN_08BIT, 0x01},	/* incksel4 */
+	{0x3360, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3361, CRL_REG_LEN_08BIT, 0x61},
+	{0x3362, CRL_REG_LEN_08BIT, 0x10},
+	{0x3164, CRL_REG_LEN_08BIT, 0x1A},	/* incksel6 */
+	{0x3070, CRL_REG_LEN_08BIT, 0x02},
+	{0x3071, CRL_REG_LEN_08BIT, 0x11},
+	{0x317E, CRL_REG_LEN_08BIT, 0x00},
+	{0x3480, CRL_REG_LEN_08BIT, 0x49},	/* inclsel7 */
+	{0x309B, CRL_REG_LEN_08BIT, 0x10},
+	{0x309C, CRL_REG_LEN_08BIT, 0x22},
+	{0x30A2, CRL_REG_LEN_08BIT, 0x02},
+	{0x30A6, CRL_REG_LEN_08BIT, 0x20},
+	{0x30A8, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AA, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AC, CRL_REG_LEN_08BIT, 0x20},
+	{0x30B0, CRL_REG_LEN_08BIT, 0x43},
+	{0x33B0, CRL_REG_LEN_08BIT, 0x50},
+	{0x33B2, CRL_REG_LEN_08BIT, 0x1A},
+	{0x33B3, CRL_REG_LEN_08BIT, 0x04},
+	{0x32B8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32BA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32BB, CRL_REG_LEN_08BIT, 0x04},
+	{0x32C8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32C9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32CB, CRL_REG_LEN_08BIT, 0x04},
+};
+
+static struct crl_register_write_rep imx290_fmt_raw10[] = {
+	{0x3005, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT */
+	{0x300A, CRL_REG_LEN_08BIT, 0x3C},	/* BLKLEVEL */
+	{0x3129, CRL_REG_LEN_08BIT, 0x1D},	/* ADBIT1 */
+	{0x3441, CRL_REG_LEN_08BIT, 0x0A},	/* CSI_DT_FMT */
+	{0x3442, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3046, CRL_REG_LEN_08BIT, 0x00},	/* ODBIT OPORTSEL */
+	{0x317C, CRL_REG_LEN_08BIT, 0x12},	/* ADBIT2 */
+	{0x31EC, CRL_REG_LEN_08BIT, 0x37},	/* ADBIT3 */
+};
+
+static struct crl_register_write_rep imx290_fmt_raw12[] = {
+	{0x3005, CRL_REG_LEN_08BIT, 0x01},	/* ADBIT  */
+	{0x300A, CRL_REG_LEN_08BIT, 0xF0},	/* BLKLEVEL */
+	{0x3129, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT1 */
+	{0x3441, CRL_REG_LEN_08BIT, 0x0C},	/* CSI_DT_FMT */
+	{0x3442, CRL_REG_LEN_08BIT, 0x0C},
+	{0x3046, CRL_REG_LEN_08BIT, 0x01},	/* ODBIT OPORTSEL */
+	{0x317C, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT2 */
+	{0x31EC, CRL_REG_LEN_08BIT, 0x0E},	/* ADBIT3 */
+};
+
+static struct crl_register_write_rep imx290_powerup_standby[] = {
+	{IMX290_REG_STANDBY, CRL_REG_LEN_08BIT, 0x01},
+	{0x00, CRL_REG_LEN_DELAY, 20, 0x00},
+	{IMX290_REG_XMSTA, CRL_REG_LEN_08BIT, 0x01},
+};
+
+/* Horizontal dumpy added 1097(1094+3) */
+static struct crl_register_write_rep imx290_1948_1096_37MHZ_CROPPING[] = {
+	/*TODO need  a test if necessary to open XMSTA*/
+	{0x3000, CRL_REG_LEN_08BIT, 0x01},	/* reset to standby mode */
+	{0x3002, CRL_REG_LEN_08BIT, 0x01},	/* default:reset slave mode */
+	{0x3005, CRL_REG_LEN_08BIT, 0x01},	/* ADBIT */
+	{0x3405, CRL_REG_LEN_08BIT, 0x20},	/* repetition */
+	{0x3007, CRL_REG_LEN_08BIT, 0x04},	/* H/V verse and WINMODE */
+	{0x3407, CRL_REG_LEN_08BIT, 0x03},	/* physical lane num(fixed) */
+	{0x3009, CRL_REG_LEN_08BIT, 0x02},	/* FRSEL FDG_SEL */
+	{0x300A, CRL_REG_LEN_08BIT, 0xF0},	/* BLKLEVEL */
+	{0x300F, CRL_REG_LEN_08BIT, 0x00},	/* fixed setting */
+	{0x3010, CRL_REG_LEN_08BIT, 0x21},
+	{0x3012, CRL_REG_LEN_08BIT, 0x64},
+	{0x3414, CRL_REG_LEN_08BIT, 0x0A},	/* OPB_SIZE_V */
+	{0x3016, CRL_REG_LEN_08BIT, 0x09},
+	{0x3018, CRL_REG_LEN_08BIT, 0x65},	/* VMAX */
+	{0x3019, CRL_REG_LEN_08BIT, 0x04},
+	{0x3418, CRL_REG_LEN_08BIT, 0x49},	/* Y_OUT_SIZE */
+	{0x3419, CRL_REG_LEN_08BIT, 0x04},
+	{0x3119, CRL_REG_LEN_08BIT, 0x9E},
+	{0x301C, CRL_REG_LEN_08BIT, 0x30},	/* HMAX */
+	{0x301D, CRL_REG_LEN_08BIT, 0x11},
+	{0x311C, CRL_REG_LEN_08BIT, 0x1E},
+	{0x311E, CRL_REG_LEN_08BIT, 0x08},
+	{0x3128, CRL_REG_LEN_08BIT, 0x05},
+	{0x3129, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT1 */
+	{0x332C, CRL_REG_LEN_08BIT, 0xD3},
+	{0x332D, CRL_REG_LEN_08BIT, 0x10},
+	{0x332E, CRL_REG_LEN_08BIT, 0x0D},
+	{0x313D, CRL_REG_LEN_08BIT, 0x83},
+	{0x3441, CRL_REG_LEN_08BIT, 0x0C},	/* CSI_DT_FMT */
+	{0x3442, CRL_REG_LEN_08BIT, 0x0C},
+	{0x3443, CRL_REG_LEN_08BIT, 0x03},	/* csi_lane_mode(fixed) */
+	{0x3444, CRL_REG_LEN_08BIT, 0x20},	/* extck_freq */
+	{0x3445, CRL_REG_LEN_08BIT, 0x25},
+	{0x3046, CRL_REG_LEN_08BIT, 0x01},	/* ODBIT OPORTSEL */
+	{0x3446, CRL_REG_LEN_08BIT, 0x47},	/* tclkpost */
+	{0x3447, CRL_REG_LEN_08BIT, 0x00},
+	{0x3448, CRL_REG_LEN_08BIT, 0x1F},	/* thszero */
+	{0x3449, CRL_REG_LEN_08BIT, 0x00},
+	{0x304B, CRL_REG_LEN_08BIT, 0x0A},	/* XH/VS OUTSEL */
+	{0x344A, CRL_REG_LEN_08BIT, 0x17},	/* thsprepare */
+	{0x344B, CRL_REG_LEN_08BIT, 0x00},
+	{0x344C, CRL_REG_LEN_08BIT, 0x0F},	/* thstrail */
+	{0x344D, CRL_REG_LEN_08BIT, 0x00},
+	{0x344E, CRL_REG_LEN_08BIT, 0x17},	/* thstrail */
+	{0x344F, CRL_REG_LEN_08BIT, 0x00},
+	{0x3150, CRL_REG_LEN_08BIT, 0x03},
+	{0x3450, CRL_REG_LEN_08BIT, 0x47},	/* tclkzero */
+	{0x3451, CRL_REG_LEN_08BIT, 0x00},
+	{0x3452, CRL_REG_LEN_08BIT, 0x0F},	/* tclkprepare */
+	{0x3453, CRL_REG_LEN_08BIT, 0x00},
+	{0x3454, CRL_REG_LEN_08BIT, 0x0F},	/* tlpx */
+	{0x3455, CRL_REG_LEN_08BIT, 0x00},
+	{0x3358, CRL_REG_LEN_08BIT, 0x06},	/* fixed setting */
+	{0x3359, CRL_REG_LEN_08BIT, 0xE1},
+	{0x335A, CRL_REG_LEN_08BIT, 0x11},
+	{0x305C, CRL_REG_LEN_08BIT, 0x18},	/* incksel1 */
+	{0x305D, CRL_REG_LEN_08BIT, 0x03},	/* incksel2 */
+	{0x305E, CRL_REG_LEN_08BIT, 0x20},	/* incksel3 */
+	{0x315E, CRL_REG_LEN_08BIT, 0x1A},	/* incksel5 */
+	{0x305F, CRL_REG_LEN_08BIT, 0x01},	/* incksel4 */
+	{0x3360, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3361, CRL_REG_LEN_08BIT, 0x61},
+	{0x3362, CRL_REG_LEN_08BIT, 0x10},
+	{0x3164, CRL_REG_LEN_08BIT, 0x1A},	/* incksel6 */
+	{0x3070, CRL_REG_LEN_08BIT, 0x02},
+	{0x3071, CRL_REG_LEN_08BIT, 0x11},
+	{0x3472, CRL_REG_LEN_08BIT, 0x9C},	/* X_OUT_SIZE */
+	{0x3473, CRL_REG_LEN_08BIT, 0x07},
+	{0x317C, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT2 */
+	{0x317E, CRL_REG_LEN_08BIT, 0x00},
+	{0x3480, CRL_REG_LEN_08BIT, 0x49},	/* inclsel7 */
+	{0x309B, CRL_REG_LEN_08BIT, 0x10},
+	{0x309C, CRL_REG_LEN_08BIT, 0x22},
+	{0x30A2, CRL_REG_LEN_08BIT, 0x02},
+	{0x30A6, CRL_REG_LEN_08BIT, 0x20},
+	{0x30A8, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AA, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AC, CRL_REG_LEN_08BIT, 0x20},
+	{0x30B0, CRL_REG_LEN_08BIT, 0x43},
+	{0x33B0, CRL_REG_LEN_08BIT, 0x50},
+	{0x33B2, CRL_REG_LEN_08BIT, 0x1A},
+	{0x33B3, CRL_REG_LEN_08BIT, 0x04},
+	{0x32B8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32BA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32BB, CRL_REG_LEN_08BIT, 0x04},
+	{0x32C8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32C9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32CB, CRL_REG_LEN_08BIT, 0x04},
+	{0x31EC, CRL_REG_LEN_08BIT, 0x0E},	/* ADBIT3 */
+	/* WINDOW CROPPING */
+	{0x303C, CRL_REG_LEN_08BIT, 0x01},
+	{0x303D, CRL_REG_LEN_08BIT, 0x00},
+	{0x303E, CRL_REG_LEN_08BIT, 0x48},
+	{0x303F, CRL_REG_LEN_08BIT, 0x04},
+};
+
+static struct crl_register_write_rep imx290_1952_3435_37MHZ_CROPPING[] = {
+	/*TODO need  a test if necessary to open XMSTA*/
+	{0x3000, CRL_REG_LEN_08BIT, 0x01},	/* reset to standby mode */
+	{0x3002, CRL_REG_LEN_08BIT, 0x01},	/* default:reset to slave mode */
+	{0x3005, CRL_REG_LEN_08BIT, 0x00},	/* ADBIT */
+	{0x3405, CRL_REG_LEN_08BIT, 0x00},	/* repetition */
+	{0x3106, CRL_REG_LEN_08BIT, 0x33},
+	{0x3007, CRL_REG_LEN_08BIT, 0x00},	/* H/V verse and WINMODE */
+	{0x3407, CRL_REG_LEN_08BIT, 0x03},	/* physical lane num(fixed) */
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},	/* FRSEL FDG_SEL */
+	{0x300A, CRL_REG_LEN_08BIT, 0x3C},	/* BLKLEVEL */
+	{0x300C, CRL_REG_LEN_08BIT, 0x21},
+	{0x300F, CRL_REG_LEN_08BIT, 0x00},	/* fixed setting */
+	{0x3010, CRL_REG_LEN_08BIT, 0x21},
+	{0x3012, CRL_REG_LEN_08BIT, 0x64},
+	{0x3414, CRL_REG_LEN_08BIT, 0x0A},	/* OPB_SIZE_V */
+	{0x3415, CRL_REG_LEN_08BIT, 0x00},
+	{0x3016, CRL_REG_LEN_08BIT, 0x09},
+	{0x3018, CRL_REG_LEN_08BIT, 0x65},	/* VMAX */
+	{0x3019, CRL_REG_LEN_08BIT, 0x04},
+	{0x3418, CRL_REG_LEN_08BIT, 0x55},	/* Y_OUT_SIZE */
+	{0x3419, CRL_REG_LEN_08BIT, 0x11},
+	{0x3119, CRL_REG_LEN_08BIT, 0x9E},
+	{0x301C, CRL_REG_LEN_08BIT, 0x4C},	/* HMAX */
+	{0x301D, CRL_REG_LEN_08BIT, 0x04},
+	{0x311C, CRL_REG_LEN_08BIT, 0x1E},
+	{0x311E, CRL_REG_LEN_08BIT, 0x08},
+	{0x3020, CRL_REG_LEN_08BIT, 0x04},	/* SHS1 */
+	{0x3021, CRL_REG_LEN_08BIT, 0x00},
+	{0x3024, CRL_REG_LEN_08BIT, 0x89},	/* SHS2 */
+	{0x3025, CRL_REG_LEN_08BIT, 0x00},
+	{0x3028, CRL_REG_LEN_08BIT, 0x93},	/* SHS3 */
+	{0x3029, CRL_REG_LEN_08BIT, 0x01},
+	{0x3128, CRL_REG_LEN_08BIT, 0x05},
+	{0x3129, CRL_REG_LEN_08BIT, 0x1D},	/* ADBIT1 */
+	{0x332C, CRL_REG_LEN_08BIT, 0xD3},
+	{0x332D, CRL_REG_LEN_08BIT, 0x10},
+	{0x332E, CRL_REG_LEN_08BIT, 0x0D},
+	{0x3030, CRL_REG_LEN_08BIT, 0x85},	/* RHS1 */
+	{0x3031, CRL_REG_LEN_08BIT, 0x00},
+	{0x3034, CRL_REG_LEN_08BIT, 0x92},	/* RHS2 */
+	{0x3035, CRL_REG_LEN_08BIT, 0x00},
+	{0x313D, CRL_REG_LEN_08BIT, 0x83},
+	{0x3441, CRL_REG_LEN_08BIT, 0x0A},	/* CSI_DT_FMT */
+	{0x3442, CRL_REG_LEN_08BIT, 0x0A},
+	{0x3443, CRL_REG_LEN_08BIT, 0x03},	/* csi_lane_mode(fixed) */
+	{0x3444, CRL_REG_LEN_08BIT, 0x20},	/* extck_freq */
+	{0x3045, CRL_REG_LEN_08BIT, 0x05},	/* DOL sp */
+	{0x3445, CRL_REG_LEN_08BIT, 0x25},
+	{0x3046, CRL_REG_LEN_08BIT, 0x00},	/* ODBIT OPORTSEL */
+	{0x3446, CRL_REG_LEN_08BIT, 0x77},	/* tclkpost */
+	{0x3447, CRL_REG_LEN_08BIT, 0x00},
+	{0x3448, CRL_REG_LEN_08BIT, 0x67},	/* thszero */
+	{0x3449, CRL_REG_LEN_08BIT, 0x00},
+	{0x304B, CRL_REG_LEN_08BIT, 0x0A},	/* XH/VS OUTSEL */
+	{0x344A, CRL_REG_LEN_08BIT, 0x47},	/* thsprepare */
+	{0x344B, CRL_REG_LEN_08BIT, 0x00},
+	{0x344C, CRL_REG_LEN_08BIT, 0x37},	/* thstrail */
+	{0x344D, CRL_REG_LEN_08BIT, 0x00},
+	{0x344E, CRL_REG_LEN_08BIT, 0x3F},	/* thstrail */
+	{0x344F, CRL_REG_LEN_08BIT, 0x00},
+	{0x3150, CRL_REG_LEN_08BIT, 0x03},
+	{0x3450, CRL_REG_LEN_08BIT, 0xFF},	/* tclkzero */
+	{0x3451, CRL_REG_LEN_08BIT, 0x00},
+	{0x3452, CRL_REG_LEN_08BIT, 0x3F},	/* tclkprepare */
+	{0x3453, CRL_REG_LEN_08BIT, 0x00},
+	{0x3454, CRL_REG_LEN_08BIT, 0x37},	/* tlpx */
+	{0x3455, CRL_REG_LEN_08BIT, 0x00},
+	{0x3358, CRL_REG_LEN_08BIT, 0x06},	/* fixed setting */
+	{0x3359, CRL_REG_LEN_08BIT, 0xE1},
+	{0x335A, CRL_REG_LEN_08BIT, 0x11},
+	{0x305C, CRL_REG_LEN_08BIT, 0x18},	/* incksel1 */
+	{0x305D, CRL_REG_LEN_08BIT, 0x03},	/* incksel2 */
+	{0x305E, CRL_REG_LEN_08BIT, 0x20},	/* incksel3 */
+	{0x315E, CRL_REG_LEN_08BIT, 0x1A},	/* incksel5 */
+	{0x305F, CRL_REG_LEN_08BIT, 0x01},	/* incksel4 */
+	{0x3360, CRL_REG_LEN_08BIT, 0x1E},
+	{0x3361, CRL_REG_LEN_08BIT, 0x61},
+	{0x3362, CRL_REG_LEN_08BIT, 0x10},
+	{0x3164, CRL_REG_LEN_08BIT, 0x1A},	/* incksel6 */
+	{0x3070, CRL_REG_LEN_08BIT, 0x02},
+	{0x3071, CRL_REG_LEN_08BIT, 0x11},
+	{0x3472, CRL_REG_LEN_08BIT, 0xA0},	/* X_OUT_SIZE */
+	{0x3473, CRL_REG_LEN_08BIT, 0x07},
+	{0x347B, CRL_REG_LEN_08BIT, 0x23},
+	{0x317C, CRL_REG_LEN_08BIT, 0x12},	/* ADBIT2 */
+	{0x317E, CRL_REG_LEN_08BIT, 0x00},
+	{0x3480, CRL_REG_LEN_08BIT, 0x49},	/* inclsel7 */
+	{0x309B, CRL_REG_LEN_08BIT, 0x10},
+	{0x309C, CRL_REG_LEN_08BIT, 0x22},
+	{0x30A2, CRL_REG_LEN_08BIT, 0x02},
+	{0x30A6, CRL_REG_LEN_08BIT, 0x20},
+	{0x30A8, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AA, CRL_REG_LEN_08BIT, 0x20},
+	{0x30AC, CRL_REG_LEN_08BIT, 0x20},
+	{0x30B0, CRL_REG_LEN_08BIT, 0x43},
+	{0x33B0, CRL_REG_LEN_08BIT, 0x50},
+	{0x33B2, CRL_REG_LEN_08BIT, 0x1A},
+	{0x33B3, CRL_REG_LEN_08BIT, 0x04},
+	{0x32B8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32B9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32BA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32BB, CRL_REG_LEN_08BIT, 0x04},
+	{0x32C8, CRL_REG_LEN_08BIT, 0x50},
+	{0x32C9, CRL_REG_LEN_08BIT, 0x10},
+	{0x32CA, CRL_REG_LEN_08BIT, 0x00},
+	{0x32CB, CRL_REG_LEN_08BIT, 0x04},
+	{0x31EC, CRL_REG_LEN_08BIT, 0x37},	/* ADBIT3 */
+};
+
+static struct crl_register_write_rep imx290_streamon_regs[] = {
+	{IMX290_REG_STANDBY, CRL_REG_LEN_08BIT, 0x00},
+	{0x00, CRL_REG_LEN_DELAY, 50, 0x00},	/* Add a 50ms delay */
+	{IMX290_REG_XMSTA, CRL_REG_LEN_08BIT, 0x00},
+};
+
+static struct crl_register_write_rep imx290_streamoff_regs[] = {
+	{IMX290_REG_STANDBY, CRL_REG_LEN_08BIT, 0x01},
+	{IMX290_REG_XMSTA, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_arithmetic_ops imx290_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	}
+};
+
+static struct crl_dynamic_register_access imx290_h_flip_regs[] = {
+	{
+		.address = 0x3007,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx290_hflip_ops),
+		.ops = imx290_hflip_ops,
+		.mask = 0x2,
+	}
+};
+
+static struct crl_dynamic_register_access imx290_v_flip_regs[] = {
+	{
+		.address = 0x3007,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	}
+};
+
+static struct crl_dynamic_register_access imx290_ana_gain_global_regs[] = {
+	{
+		.address = 0x3014,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* shs1[17:0] = fll - exposure - 1 */
+static struct crl_arithmetic_ops imx290_shs1_lsb_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	}
+};
+
+static struct crl_arithmetic_ops imx290_shs1_msb0_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx290_shs1_msb1_ops[] = {
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+		.operand.entity_val = V4L2_CID_FRAME_LENGTH_LINES,
+	},
+	{
+		.op = CRL_SUBTRACT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 16,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0x03,
+	}
+};
+
+static struct crl_dynamic_register_access imx290_shs1_regs[] = {
+	{
+		.address = 0x3020,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx290_shs1_lsb_ops),
+		.ops = imx290_shs1_lsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3021,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx290_shs1_msb0_ops),
+		.ops = imx290_shs1_msb0_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3022,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx290_shs1_msb1_ops),
+		.ops = imx290_shs1_msb1_ops,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_arithmetic_ops imx290_fll_msb_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_arithmetic_ops imx290_fll_hsb_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 16,
+	}
+};
+
+static struct crl_dynamic_register_access imx290_fll_regs[] = {
+	/*
+	 * Use 8bits access since 24bits or 32bits access will fail
+	 * TODO: root cause the 24bits and 32bits access issues
+	 */
+	{
+		.address = 0x3018,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3019,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx290_fll_msb_ops),
+		.ops = imx290_fll_msb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x301A,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(imx290_fll_hsb_ops),
+		.ops = imx290_fll_hsb_ops,
+		.mask = 0x3,
+	},
+};
+
+static struct crl_dynamic_register_access imx290_llp_regs[] = {
+	{
+		.address = 0x301C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_sensor_detect_config imx290_sensor_detect_regset[] = {
+	{
+		.reg = { 0x348F, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+	{
+		.reg = { 0x348E, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+};
+
+static struct crl_pll_configuration imx290_pll_configurations[] = {
+	/*
+	 * IMX290 supports only 37.125MHz and 72.25MHz input clocks.
+	 * IPU4 supports up to 38.4MHz, however the sensor module we use
+	 * has its own oscillator.
+	 * The "input_clk" value is specified here for the reference.
+	 */
+	{
+		.input_clk = 37125000,
+		.op_sys_clk = 222750000,/* 445500000/2 */
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 148500000,
+		.pixel_rate_pa = 148500000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx290_pll_445mbps),
+		.pll_regs = imx290_pll_445mbps,
+	},
+	{
+		.input_clk = 37125000,
+		.op_sys_clk = 445500000,/* 891000000/2 */
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 356400000,
+		.pixel_rate_pa = 356400000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx290_pll_891mbps),
+		.pll_regs = imx290_pll_891mbps,
+	}
+};
+
+/* Temporary use a single rect range */
+static struct crl_subdev_rect_rep imx290_1948_1096_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 3435,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 3435,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 3435,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1948,
+		.out_rect.height = 1096,
+	 }
+};
+
+static struct crl_subdev_rect_rep imx290_1952_3435_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 3435,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 3435,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1952,
+		.in_rect.height = 3435,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 3435,
+	 }
+};
+
+static struct crl_mode_rep imx290_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx290_1948_1096_rects),
+		.sd_rects = imx290_1948_1096_rects,
+		.binn_hor = 1,
+		.binn_vert = 3,
+		.scale_m = 1,
+		.width = 1948,
+		.height = 1096,
+		.min_llp = 2220,
+		.min_fll = 1112,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx290_1948_1096_37MHZ_CROPPING),
+		.mode_regs = imx290_1948_1096_37MHZ_CROPPING,
+		},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx290_1952_3435_rects),
+		.sd_rects = imx290_1952_3435_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 3435,
+		.min_llp = 2220,
+		.min_fll = 1112,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx290_1952_3435_37MHZ_CROPPING),
+		.mode_regs = imx290_1952_3435_37MHZ_CROPPING,
+	},
+};
+
+struct crl_sensor_subdev_config imx290_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx290 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx290 pixel array",
+	}
+};
+
+static struct crl_sensor_limits imx290_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1952,
+	.y_addr_max = 3435,
+	.min_frame_length_lines = 320,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 380,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data imx290_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	}
+};
+
+static struct crl_csi_data_fmt imx290_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw10),
+		.regs = imx290_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw10),
+		.regs = imx290_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw10),
+		.regs = imx290_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw10),
+		.regs = imx290_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw12),
+		.regs = imx290_fmt_raw12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,	/*default pixel order*/
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw12),
+		.regs = imx290_fmt_raw12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw12),
+		.regs = imx290_fmt_raw12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx290_fmt_raw12),
+		.regs = imx290_fmt_raw12,
+	}
+};
+
+static struct crl_v4l2_ctrl imx290_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx290_h_flip_regs),
+		.regs = imx290_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx290_v_flip_regs),
+		.regs = imx290_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 240,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx290_ana_gain_global_regs),
+		.regs = imx290_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = IMX290_MAX_SHS1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x264,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx290_shs1_regs),
+		.regs = imx290_shs1_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 720,
+		.data.std_data.max = IMX290_VMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1097,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx290_fll_regs),
+		.regs = imx290_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1948,
+		.data.std_data.max = IMX290_HMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1948,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx290_llp_regs),
+		.regs = imx290_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops imx290_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops imx290_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc imx290_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(imx290_frame_desc_width_ops),
+			.ops = imx290_frame_desc_width_ops,
+			 },
+		.height = {
+			.ops_items = ARRAY_SIZE(imx290_frame_desc_height_ops),
+			.ops = imx290_frame_desc_height_ops,
+			},
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+static struct crl_power_seq_entity imx290_power_items[] = {
+	/* If your sensor uses IPU reference clock, make sure it's enabled here. */
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+	},
+};
+
+struct crl_sensor_configuration imx290_crl_configuration = {
+
+		.power_items = ARRAY_SIZE(imx290_power_items),
+		.power_entities = imx290_power_items,
+
+		.powerup_regs_items = ARRAY_SIZE(imx290_powerup_standby),
+		.powerup_regs = imx290_powerup_standby,
+
+		.poweroff_regs_items = 0,
+		.poweroff_regs = 0,
+
+		.id_reg_items = ARRAY_SIZE(imx290_sensor_detect_regset),
+		.id_regs = imx290_sensor_detect_regset,
+
+		.subdev_items = ARRAY_SIZE(imx290_sensor_subdevs),
+		.subdevs = imx290_sensor_subdevs,
+
+		.sensor_limits = &imx290_sensor_limits,
+
+		.pll_config_items = ARRAY_SIZE(imx290_pll_configurations),
+		.pll_configs = imx290_pll_configurations,
+
+		.modes_items = ARRAY_SIZE(imx290_modes),
+		.modes = imx290_modes,
+
+		.streamon_regs_items = ARRAY_SIZE(imx290_streamon_regs),
+		.streamon_regs = imx290_streamon_regs,
+
+		.streamoff_regs_items = ARRAY_SIZE(imx290_streamoff_regs),
+		.streamoff_regs = imx290_streamoff_regs,
+
+		.v4l2_ctrls_items = ARRAY_SIZE(imx290_v4l2_ctrls),
+		.v4l2_ctrl_bank = imx290_v4l2_ctrls,
+
+		.csi_fmts_items = ARRAY_SIZE(imx290_crl_csi_data_fmt),
+		.csi_fmts = imx290_crl_csi_data_fmt,
+
+		.flip_items = ARRAY_SIZE(imx290_flip_configurations),
+		.flip_data = imx290_flip_configurations,
+
+		.frame_desc_entries = ARRAY_SIZE(imx290_frame_desc),
+		.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+		.frame_desc = imx290_frame_desc,
+};
+
+#endif  /* __CRLMODULE_IMX274_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx318_configuration.h b/drivers/media/i2c/crlmodule/crl_imx318_configuration.h
new file mode 100644
index 000000000000..631a6d10400f
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx318_configuration.h
@@ -0,0 +1,1050 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation
+ *
+ * Author: Jouni Ukkonen <jouni.ukkonen@intel.com>
+ *
+ */
+#ifndef __CRLMODULE_IMX318_CONFIGURATION_H_
+#define __CRLMODULE_IMX318_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+static const struct crl_register_write_rep imx318_pll_1164mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* 24 Mhz */
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0111, CRL_REG_LEN_08BIT, 0x02 }, /* 2 = DPHY, 3 = CPHY */
+	{ 0x0112, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0113, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x4D },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static const struct crl_register_write_rep imx318_pll_8_1164mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* 24 Mhz */
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0111, CRL_REG_LEN_08BIT, 0x02 }, /* 2 = DPHY, 3 = CPHY */
+	{ 0x0112, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0113, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x4D },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static const struct crl_register_write_rep imx318_pll_1920mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* 24 Mhz */
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0111, CRL_REG_LEN_08BIT, 0x02 }, /* 2 = DPHY, 3 = CPHY */
+	{ 0x0112, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0113, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x4D },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static const struct crl_register_write_rep imx318_pll_8_1920mbps[] = {
+	{ 0x0136, CRL_REG_LEN_08BIT, 0x18 }, /* 24 Mhz */
+	{ 0x0137, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0111, CRL_REG_LEN_08BIT, 0x02 }, /* 2 = DPHY, 3 = CPHY */
+	{ 0x0112, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0113, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x0114, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x4D },
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x0820, CRL_REG_LEN_08BIT, 0x1E },
+	{ 0x0821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0822, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0823, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+
+static const struct crl_register_write_rep imx318_powerup_regset[] = {
+	{ 0x3067, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x1B },
+	{ 0x46C2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4877, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x487B, CRL_REG_LEN_08BIT, 0x4D },
+	{ 0x487F, CRL_REG_LEN_08BIT, 0x3B },
+	{ 0x4883, CRL_REG_LEN_08BIT, 0xB4 },
+	{ 0x4C6F, CRL_REG_LEN_08BIT, 0x5E },
+	{ 0x5113, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x5115, CRL_REG_LEN_08BIT, 0xF6 },
+	{ 0x5125, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x5127, CRL_REG_LEN_08BIT, 0xF8 },
+	{ 0x51CF, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x51E9, CRL_REG_LEN_08BIT, 0xF4 },
+	{ 0x5483, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x5485, CRL_REG_LEN_08BIT, 0x7C },
+	{ 0x5495, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x5497, CRL_REG_LEN_08BIT, 0x7F },
+	{ 0x5515, CRL_REG_LEN_08BIT, 0xC3 },
+	{ 0x5517, CRL_REG_LEN_08BIT, 0xC7 },
+	{ 0x552B, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x5535, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x5A35, CRL_REG_LEN_08BIT, 0x1B },
+	{ 0x5C13, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5D89, CRL_REG_LEN_08BIT, 0xB1 },
+	{ 0x5D8B, CRL_REG_LEN_08BIT, 0x2C },
+	{ 0x5D8D, CRL_REG_LEN_08BIT, 0x61 },
+	{ 0x5D8F, CRL_REG_LEN_08BIT, 0xE1 },
+	{ 0x5D91, CRL_REG_LEN_08BIT, 0x4D },
+	{ 0x5D93, CRL_REG_LEN_08BIT, 0xB4 },
+	{ 0x5D95, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x5D97, CRL_REG_LEN_08BIT, 0x96 },
+	{ 0x5D99, CRL_REG_LEN_08BIT, 0x37 },
+	{ 0x5D9B, CRL_REG_LEN_08BIT, 0x81 },
+	{ 0x5D9D, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x5D9F, CRL_REG_LEN_08BIT, 0x71 },
+	{ 0x5DA1, CRL_REG_LEN_08BIT, 0x2B },
+	{ 0x5DA3, CRL_REG_LEN_08BIT, 0x64 },
+	{ 0x5DA5, CRL_REG_LEN_08BIT, 0x27 },
+	{ 0x5DA7, CRL_REG_LEN_08BIT, 0x5A },
+	{ 0x6009, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x613A, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x613C, CRL_REG_LEN_08BIT, 0x23 },
+	{ 0x6142, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x6143, CRL_REG_LEN_08BIT, 0x62 },
+	{ 0x6144, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x6145, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x6146, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x6147, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x6148, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x6149, CRL_REG_LEN_08BIT, 0xA2 },
+	{ 0x614A, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x614B, CRL_REG_LEN_08BIT, 0x8A },
+	{ 0x614C, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x614D, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x614E, CRL_REG_LEN_08BIT, 0x2C },
+	{ 0x614F, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x6150, CRL_REG_LEN_08BIT, 0xA2 },
+	{ 0x615D, CRL_REG_LEN_08BIT, 0x37 },
+	{ 0x615E, CRL_REG_LEN_08BIT, 0xE6 },
+	{ 0x615F, CRL_REG_LEN_08BIT, 0x4B },
+	{ 0x616C, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x616D, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x616E, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x616F, CRL_REG_LEN_08BIT, 0xC5 },
+	{ 0x6174, CRL_REG_LEN_08BIT, 0xB9 },
+	{ 0x6175, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0x6176, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x6177, CRL_REG_LEN_08BIT, 0xC3 },
+	{ 0x6178, CRL_REG_LEN_08BIT, 0x81 },
+	{ 0x6179, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x6182, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x6A5F, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x9302, CRL_REG_LEN_08BIT, 0xFF },
+};
+
+static const struct crl_register_write_rep imx318_mode_full[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3010, CRL_REG_LEN_08BIT, 0x65 },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x30FC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30FD, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3194, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x31A0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4711, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6669, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3033, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3035, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3037, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3039, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x303B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306E, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x306F, CRL_REG_LEN_08BIT, 0x56 },
+	{ 0x6636, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6637, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3066, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x7B63, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x56FB, CRL_REG_LEN_08BIT, 0x50 },
+	{ 0x56FF, CRL_REG_LEN_08BIT, 0x50 },
+	{ 0x9323, CRL_REG_LEN_08BIT, 0x10 },
+};
+
+
+static const struct crl_register_write_rep imx318_mode_uhd[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3010, CRL_REG_LEN_08BIT, 0x65 },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x30FC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30FD, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3194, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4711, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6669, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x68 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x3A },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0x9C },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3033, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3035, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3037, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3039, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x303B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306E, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x306F, CRL_REG_LEN_08BIT, 0x56 },
+	{ 0x6636, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6637, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3066, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x7B63, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x56FB, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x56FF, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x9323, CRL_REG_LEN_08BIT, 0x16 },
+};
+
+static const struct crl_register_write_rep imx318_mode_1080[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x0F },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3010, CRL_REG_LEN_08BIT, 0x65 },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x30FC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30FD, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3194, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4711, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6669, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x1C },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x50 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xCE },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3033, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3035, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3037, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3039, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x303B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306E, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x306F, CRL_REG_LEN_08BIT, 0x56 },
+	{ 0x6636, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6637, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3066, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x7B63, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x56FB, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x56FF, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x9323, CRL_REG_LEN_08BIT, 0x16 },
+};
+
+static const struct crl_register_write_rep imx318_mode_720[] = {
+	{ 0x0344, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0345, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0346, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0347, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0348, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x0349, CRL_REG_LEN_08BIT, 0x6F },
+	{ 0x034A, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0x034B, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x0220, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0221, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0222, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0381, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0383, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0385, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0387, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0900, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0901, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x0902, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3010, CRL_REG_LEN_08BIT, 0x65 },
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x30FC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x30FD, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3194, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x31A1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4711, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6669, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0409, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x040A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x040B, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x040C, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x040D, CRL_REG_LEN_08BIT, 0x52 },
+	{ 0x040E, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x040F, CRL_REG_LEN_08BIT, 0xFE },
+	{ 0x034C, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x034D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x034E, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x034F, CRL_REG_LEN_08BIT, 0xD0 },
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3033, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3035, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3037, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3039, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x303B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x306E, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x306F, CRL_REG_LEN_08BIT, 0x56 },
+	{ 0x6636, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x6637, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3066, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x7B63, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x56FB, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x56FF, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x9323, CRL_REG_LEN_08BIT, 0x16 },
+};
+
+static struct crl_register_write_rep imx318_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep imx318_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep imx318_data_fmt_width10[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0a0a }
+};
+
+static struct crl_register_write_rep imx318_data_fmt_width8[] = {
+	{ 0x0112, CRL_REG_LEN_16BIT, 0x0808 }
+};
+
+static struct crl_arithmetic_ops imx318_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_dynamic_register_access imx318_h_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	},
+};
+
+static struct crl_dynamic_register_access imx318_v_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx318_vflip_ops),
+		.ops = imx318_vflip_ops,
+		.mask = 0x2,
+	},
+};
+
+static struct crl_dynamic_register_access imx318_ana_gain_global_regs[] = {
+	{
+		.address = 0x0204,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx318_exposure_regs[] = {
+	{
+		.address = 0x0202,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_dynamic_register_access imx318_fll_regs[] = {
+	{
+		.address = 0x0340,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx318_llp_regs[] = {
+	{
+		.address = 0x0342,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_sensor_detect_config imx318_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0019, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+	{
+		.reg = { 0x0018, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 5,
+	},
+	{
+		.reg = { 0x0016, CRL_REG_LEN_16BIT, 0x0000ffff },
+		.width = 7,
+	},
+};
+
+static struct crl_pll_configuration imx318_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 582000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 465600000,
+		.pixel_rate_pa = 799206000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx318_pll_1164mbps),
+		.pll_regs = imx318_pll_1164mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 582000000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 465600000,
+		.pixel_rate_pa = 799206000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx318_pll_8_1164mbps),
+		.pll_regs = imx318_pll_8_1164mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 960000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 768000000,
+		.pixel_rate_pa = 799206000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx318_pll_1920mbps),
+		.pll_regs = imx318_pll_1920mbps,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 960000000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 960000000,
+		.pixel_rate_pa = 799206000,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx318_pll_8_1920mbps),
+		.pll_regs = imx318_pll_8_1920mbps,
+	},
+
+};
+
+static struct crl_subdev_rect_rep imx318_full_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5488, 4112 },
+		.out_rect = { 0, 0, 5488, 4112 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5488, 4112 },
+		.out_rect = { 0, 0, 5488, 4112 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5488, 4112 },
+		.out_rect = { 0, 0, 5488, 4112 },
+	},
+};
+
+
+static struct crl_subdev_rect_rep imx318_uhd_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5488, 4112 },
+		.out_rect = { 0, 512, 5280, 3088 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5280, 3088 },
+		.out_rect = { 0, 0, 5280, 3088 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 5280, 3088 },
+		.out_rect = { 0, 0, 3840, 2160 },
+	},
+};
+
+
+static struct crl_subdev_rect_rep imx318_1080_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5488, 4112 },
+		.out_rect = { 0, 512, 5488, 3088 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5488, 3088 },
+		.out_rect = { 0, 0, 2744, 1544 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2744, 1544 },
+		.out_rect = { 0, 0, 1920, 1080 },
+	},
+};
+
+static struct crl_subdev_rect_rep imx318_720_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 5488, 4112 },
+		.out_rect = { 0, 516, 5488, 3088 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 5488, 3088 },
+		.out_rect = { 0, 0, 1372, 772 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 1372, 772 },
+		.out_rect = { 0, 0, 1280, 720 },
+	},
+};
+
+static struct crl_mode_rep imx318_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx318_full_rects),
+		.sd_rects = imx318_full_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 5488,
+		.height = 4112,
+		.min_llp = 6224,
+		.min_fll = 4280,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx318_mode_full),
+		.mode_regs = imx318_mode_full,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx318_uhd_rects),
+		.sd_rects = imx318_uhd_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 22,
+		.width = 3840,
+		.height = 2160,
+		.min_llp = 6224,
+		.min_fll = 3622,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx318_mode_uhd),
+		.mode_regs = imx318_mode_uhd,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx318_1080_rects),
+		.sd_rects = imx318_1080_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 22,
+		.width = 1920,
+		.height = 1080,
+		.min_llp = 6224,
+		.min_fll = 1600,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx318_mode_1080),
+		.mode_regs = imx318_mode_1080,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx318_720_rects),
+		.sd_rects = imx318_720_rects,
+		.binn_hor = 4,
+		.binn_vert = 4,
+		.scale_m = 17,
+		.width = 1280,
+		.height = 720,
+		.min_llp = 6224,
+		.min_fll = 904,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx318_mode_720),
+		.mode_regs = imx318_mode_720,
+	},
+};
+
+static struct crl_sensor_subdev_config imx318_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "imx318 scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx318 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx318 pixel array",
+	},
+};
+
+static struct crl_sensor_limits imx318_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 5488,
+	.y_addr_max = 4112,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6224, /*TBD*/
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 255,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data imx318_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+};
+
+static struct crl_csi_data_fmt imx318_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = imx318_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx318_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx318_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = imx318_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx318_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx318_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx318_data_fmt_width8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 8,
+		.regs = imx318_data_fmt_width8,
+	},
+};
+
+static const s64 imx318_op_sys_clock[] =  { 582000000,
+						582000000,
+						960000000,
+						960000000, };
+
+static struct crl_v4l2_ctrl imx318_vl42_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max =
+			ARRAY_SIZE(imx318_pll_configurations) - 1,
+		.data.v4l2_int_menu.menu = imx318_op_sys_clock,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 480,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx318_ana_gain_global_regs),
+		.regs = imx318_ana_gain_global_regs,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx318_exposure_regs),
+		.regs = imx318_exposure_regs,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx318_h_flip_regs),
+		.regs = imx318_h_flip_regs,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx318_v_flip_regs),
+		.regs = imx318_v_flip_regs,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4130,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx318_fll_regs),
+		.regs = imx318_fll_regs,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 6024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 6024,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(imx318_llp_regs),
+		.regs = imx318_llp_regs,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity imx318_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VANA",
+		.val = 2800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VDIG",
+		.val = 1050000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VIO",
+		.val = 1800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VAF",
+		.val = 3000000,
+		.delay = 2000,
+	},
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.delay = 10700,
+	},
+};
+
+
+struct crl_sensor_configuration imx318_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(imx318_power_items),
+	.power_entities = imx318_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(imx318_powerup_regset),
+	.powerup_regs = imx318_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(imx318_sensor_detect_regset),
+	.id_regs = imx318_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx318_sensor_subdevs),
+	.subdevs = imx318_sensor_subdevs,
+
+	.sensor_limits = &imx318_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx318_pll_configurations),
+	.pll_configs = imx318_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx318_modes),
+	.modes = imx318_modes,
+	.fail_safe_mode_index = 0,
+
+	.streamon_regs_items = ARRAY_SIZE(imx318_streamon_regs),
+	.streamon_regs = imx318_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx318_streamoff_regs),
+	.streamoff_regs = imx318_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx318_vl42_ctrls),
+	.v4l2_ctrl_bank = imx318_vl42_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx318_crl_csi_data_fmt),
+	.csi_fmts = imx318_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx318_flip_configurations),
+	.flip_data = imx318_flip_configurations,
+
+};
+
+#endif  /* __CRLMODULE_imx318_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx477_common_regs.h b/drivers/media/i2c/crlmodule/crl_imx477_common_regs.h
new file mode 100644
index 000000000000..eebb884df8c8
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx477_common_regs.h
@@ -0,0 +1,1096 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Alexei Zavjalov <alexei.zavjalov@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_IMX477_COMMON_REGS_H_
+#define __CRLMODULE_IMX477_COMMON_REGS_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define IMX477_CAPTURE_MODE_MAX	10
+
+static struct crl_dynamic_register_access imx477_fll_regs[] = {
+	{
+		.address = 0x0340,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx477_llp_regs[] = {
+	{
+		.address = 0x0342,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access imx477_exposure_regs[] = {
+	{
+		.address = 0x0202,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_dynamic_register_access imx477_ana_gain_global_regs[] = {
+	{
+		.address = 0x0204,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xfff,
+	},
+};
+
+static struct crl_dynamic_register_access imx477_wdr_switch_regs[] = {
+};
+
+static struct crl_arithmetic_ops imx477_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_dynamic_register_access imx477_h_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	},
+};
+
+static struct crl_dynamic_register_access imx477_v_flip_regs[] = {
+	{
+		.address = 0x0101,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(imx477_vflip_ops),
+		.ops = imx477_vflip_ops,
+		.mask = 0x2,
+	},
+};
+
+static struct crl_dynamic_register_access imx477_test_pattern_regs[] = {
+	{
+		.address = 0x0600,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* 1st exposure for DOL */
+static struct crl_dynamic_register_access imx477_shs1_regs[] = {
+	{
+		.address = 0x00EA,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* 2nd exposure for DOL */
+static struct crl_dynamic_register_access imx477_shs2_regs[] = {
+	{
+		.address = 0x00EC,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* 3rd exposure for DOL */
+static struct crl_dynamic_register_access imx477_shs3_regs[] = {
+	{
+		.address = 0x00EE,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* Line number of 2nd frame readout start from XVS for DOL */
+static struct crl_dynamic_register_access imx477_rhs1_regs[] = {
+	{
+		.address = 0x00E6,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* Line number of 3rd frame readout start from XVS for DOL */
+static struct crl_dynamic_register_access imx477_rhs2_regs[] = {
+	{
+		.address = 0x00E8,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* set analog gain for 1st HDR frame  */
+static struct crl_dynamic_register_access imx477_ana_gain_1st_regs[] = {
+	{
+		.address = 0x00F0,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* set analog gain for 2nd HDR frames  */
+static struct crl_dynamic_register_access imx477_ana_gain_2nd_regs[] = {
+	{
+		.address = 0x00F2,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* set analog gain for 3rd HDR frames  */
+static struct crl_dynamic_register_access imx477_ana_gain_3rd_regs[] = {
+	{
+		.address = 0x00F4,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* set digital gain for 1st HDR frames  */
+static struct crl_dynamic_register_access imx477_dig_gain_1st_regs[] = {
+	{
+		.address = 0x00F6,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* set digital gain for 2nd HDR frames  */
+static struct crl_dynamic_register_access imx477_dig_gain_2nd_regs[] = {
+	{
+		.address = 0x00F8,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+/* set digital gain for 3rd HDR frames  */
+static struct crl_dynamic_register_access imx477_dig_gain_3rd_regs[] = {
+	{
+		.address = 0x00FA,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static const char * const imx477_test_patterns[] = {
+	"Disabled",
+	"Solid Colour",
+	"Eight Vertical Color Bars",
+	"Fade to Grey Color Bars",
+	"PN9",
+};
+
+static struct crl_v4l2_ctrl imx477_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 720,
+		.data.std_data.max = 131071,
+		.data.std_data.step = 1,
+		.data.std_data.def = 8209,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_fll_regs),
+		.regs = imx477_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1280,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 14612,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_llp_regs),
+		.regs = imx477_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_HFLIP",
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_h_flip_regs),
+		.regs = imx477_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_VFLIP",
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_v_flip_regs),
+		.regs = imx477_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_TEST_PATTERN,
+		.name = "V4L2_CID_TEST_PATTERN",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+		.data.v4l2_menu_items.menu = imx477_test_patterns,
+		.data.v4l2_menu_items.size = ARRAY_SIZE(imx477_test_patterns),
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_test_pattern_regs),
+		.regs = imx477_test_pattern_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_ana_gain_global_regs),
+		.regs = imx477_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.name = "V4L2_CID_EXPOSURE",
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 5500,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_exposure_regs),
+		.regs = imx477_exposure_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_WDR_MODE,
+		.name = "V4L2_CID_WDR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_wdr_switch_regs),
+		.regs = imx477_wdr_switch_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.name = "CRL_CID_EXPOSURE_SHS1",
+		.data.std_data.min = 4,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0X5500,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_shs1_regs),
+		.regs = imx477_shs1_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS2,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.name = "CRL_CID_EXPOSURE_SHS2",
+		.data.std_data.min = 4,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0X500,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_shs2_regs),
+		.regs = imx477_shs2_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS3,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.name = "CRL_CID_EXPOSURE_SHS3",
+		.data.std_data.min = 4,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0X1000,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_shs3_regs),
+		.regs = imx477_shs3_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_SENSOR_MODE,
+		.name = "CRL_CID_SENSOR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = IMX477_CAPTURE_MODE_MAX - 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_RHS1,
+		.name = "CRL_CID_EXPOSURE_RHS1",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 6,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x1000,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_rhs1_regs),
+		.regs = imx477_rhs1_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_RHS2,
+		.name = "CRL_CID_EXPOSURE_RHS2",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 6,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x1500,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_rhs2_regs),
+		.regs = imx477_rhs2_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_L,
+		.name = "CRL_CID_ANALOG_GAIN_L",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_ana_gain_1st_regs),
+		.regs = imx477_ana_gain_1st_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_S,
+		.name = "CRL_CID_ANALOG_GAIN_S",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_ana_gain_2nd_regs),
+		.regs = imx477_ana_gain_2nd_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_VS,
+		.name = "CRL_CID_ANALOG_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_ana_gain_3rd_regs),
+		.regs = imx477_ana_gain_3rd_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_L,
+		.name = "CRL_CID_DIGITAL_GAIN_L",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 64,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_dig_gain_1st_regs),
+		.regs = imx477_dig_gain_1st_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_S,
+		.name = "CRL_CID_DIGITAL_GAIN_S",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 64,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_dig_gain_2nd_regs),
+		.regs = imx477_dig_gain_2nd_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_VS,
+		.name = "CRL_CID_DIGITAL_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 64,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(imx477_dig_gain_3rd_regs),
+		.regs = imx477_dig_gain_3rd_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_register_write_rep imx477_streamon_regs[] = {
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x00, CRL_REG_LEN_DELAY, 20, 0x00}, /* Delay 20ms */
+};
+
+static struct crl_register_write_rep imx477_streamoff_regs[] = {
+	{0x0100, CRL_REG_LEN_08BIT, 0x00},
+	{0x00, CRL_REG_LEN_DELAY, 20, 0x00}, /* Delay 20ms */
+};
+
+static struct crl_register_write_rep imx477_fmt_raw10[] = {
+	{0x0112, CRL_REG_LEN_08BIT, 0x0a}, /* FMT RAW10 */
+	{0x0113, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00},
+	{0x00FC, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FD, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FE, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FF, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+};
+
+static struct crl_register_write_rep imx477_fmt_raw12[] = {
+	{0x0112, CRL_REG_LEN_08BIT, 0x0c}, /* FMT RAW12 */
+	{0x0113, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_csi_data_fmt imx477_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx477_fmt_raw10),
+		.regs = imx477_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx477_fmt_raw10),
+		.regs = imx477_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx477_fmt_raw10),
+		.regs = imx477_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+		.regs_items = ARRAY_SIZE(imx477_fmt_raw10),
+		.regs = imx477_fmt_raw10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+		.regs_items = ARRAY_SIZE(imx477_fmt_raw12),
+		.regs = imx477_fmt_raw12,
+	},
+};
+
+static struct crl_subdev_rect_rep imx477_4056_3040_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	}
+};
+
+static struct crl_subdev_rect_rep imx477_4056_2288_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 2288,
+	}
+};
+
+static struct crl_subdev_rect_rep imx477_2832_1632_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2832,
+		.out_rect.height = 1632,
+	}
+};
+
+static struct crl_subdev_rect_rep imx477_2028_1128_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2028,
+		.out_rect.height = 1128,
+	}
+};
+
+static struct crl_subdev_rect_rep imx477_1296_768_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1296,
+		.out_rect.height = 768,
+	}
+};
+
+static struct crl_subdev_rect_rep imx477_656_512_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4056,
+		.out_rect.height = 3040,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4056,
+		.in_rect.height = 3040,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 656,
+		.out_rect.height = 512,
+	}
+};
+
+static struct crl_register_write_rep imx477_pll_1200mbps[] = {
+	/* MIPI Settings */
+	{0x0114, CRL_REG_LEN_08BIT, 0x01}, /* 2-lane Mode */
+
+	/* Clock Setting */
+	{0x0301, CRL_REG_LEN_08BIT, 0x05}, /* The Pixel Clock Divider for IVTS   */
+	{0x0303, CRL_REG_LEN_08BIT, 0x02}, /* The System Clock Divider for IVTS  */
+	{0x0305, CRL_REG_LEN_08BIT, 0x03}, /* The pre-PLL Clock Divider for IVTS */
+	{0x0306, CRL_REG_LEN_08BIT, 0x01}, /* The PLL multiplier for IVTS [10:8] */
+	{0x0307, CRL_REG_LEN_08BIT, 0x48}, /* The PLL multiplier for IVTS [7:0]  */
+	{0x0309, CRL_REG_LEN_08BIT, 0x0A}, /* The Pixel Clock Divider for IOPS   */
+	{0x030B, CRL_REG_LEN_08BIT, 0x01}, /* The System Clock Divider for IOPS  */
+	{0x030D, CRL_REG_LEN_08BIT, 0x02}, /* The pre-PLL Clock Divider for IOPS */
+	{0x030E, CRL_REG_LEN_08BIT, 0x00}, /* The PLL multiplier for IOPS [10:8] */
+	{0x030F, CRL_REG_LEN_08BIT, 0x7D}, /* The PLL multiplier for IOPS [7:0]  */
+	{0x0310, CRL_REG_LEN_08BIT, 0x01}, /* PLL mode select: Dual Mode         */
+	{0x0820, CRL_REG_LEN_08BIT, 0x09}, /* Output Data Rate, Mbps [31:24]     */
+	{0x0821, CRL_REG_LEN_08BIT, 0x60}, /* Output Data Rate, Mbps [23:16]     */
+	{0x0822, CRL_REG_LEN_08BIT, 0x00}, /* Output Data Rate, Mbps [15:8]      */
+	{0x0823, CRL_REG_LEN_08BIT, 0x00}, /* Output Data Rate, Mbps [7:0]       */
+
+	/* Global Timing Setting */
+	{0x080A, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (Tclk) [9:8]    */
+	{0x080B, CRL_REG_LEN_08BIT, 0x87}, /* MIPI Global Timing (Tclk) [7:0]    */
+	{0x080C, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (ths_prepare)   */
+	{0x080D, CRL_REG_LEN_08BIT, 0x4F}, /* MIPI Global Timing (ths_prepare)   */
+	{0x080E, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (ths_zero_min)  */
+	{0x080F, CRL_REG_LEN_08BIT, 0x87}, /* MIPI Global Timing (ths_zero_min)  */
+	{0x0810, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (ths_trail)     */
+	{0x0811, CRL_REG_LEN_08BIT, 0x5F}, /* MIPI Global Timing (ths_trail)     */
+	{0x0812, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (Tclk_trail_min)*/
+	{0x0813, CRL_REG_LEN_08BIT, 0x5F}, /* MIPI Global Timing (Tclk_trail_min)*/
+	{0x0814, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (Tclk_prepare)  */
+	{0x0815, CRL_REG_LEN_08BIT, 0x4F}, /* MIPI Global Timing (Tclk_prepare)  */
+	{0x0816, CRL_REG_LEN_08BIT, 0x01}, /* MIPI Global Timing (Tclk_zero)     */
+	{0x0817, CRL_REG_LEN_08BIT, 0x3F}, /* MIPI Global Timing (Tclk_zero)     */
+	{0x0818, CRL_REG_LEN_08BIT, 0x00}, /* MIPI Global Timing (Tlpx)          */
+	{0x0819, CRL_REG_LEN_08BIT, 0x3F}, /* MIPI Global Timing (Tlpx)          */
+	{0xE04C, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xE04D, CRL_REG_LEN_08BIT, 0x87}, /* Undocumented */
+	{0xE04E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xE04F, CRL_REG_LEN_08BIT, 0x1F}, /* Undocumented */
+
+	/* Output Data Select Setting */
+	{0x3E20, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x3E37, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* PowerSave Setting */
+	{0x3F50, CRL_REG_LEN_08BIT, 0x00}, /* Power save: Disable */
+	{0x3F56, CRL_REG_LEN_08BIT, 0x01},
+	{0x3F57, CRL_REG_LEN_08BIT, 0x4F},
+};
+
+static struct crl_pll_configuration imx477_pll_configurations[] = {
+	{
+		.input_clk = 19200000,
+		.op_sys_clk = 600000000, /* 1200mbps / 2 */
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 240000000,
+		 /* pixel_rate = (MIPICLK*2 * CSILANES)/10 */
+		.pixel_rate_pa = 240000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx477_pll_1200mbps),
+		.pll_regs = imx477_pll_1200mbps,
+	},
+	{
+		.input_clk = 19200000,
+		.op_sys_clk = 600000000, /* 1200mbps / 2 */
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 240000000,
+		 /* pixel_rate = (MIPICLK*2 * CSILANES)/10 */
+		.pixel_rate_pa = 240000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(imx477_pll_1200mbps),
+		.pll_regs = imx477_pll_1200mbps,
+	},
+};
+
+static struct crl_sensor_subdev_config imx477_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "imx477 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "imx477 pixel array",
+	}
+};
+
+static struct crl_sensor_limits imx477_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 4056,
+	.y_addr_max = 3040,
+	.min_frame_length_lines = 320,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 380,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_sensor_detect_config imx477_sensor_detect_regset[] = {
+	{
+		.reg = { 0x0016, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	},
+	{
+		.reg = { 0x0017, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 7,
+	}
+};
+
+static struct crl_register_write_rep imx477_powerup_standby[] = {
+	{0x0100, CRL_REG_LEN_08BIT, 0x00},
+	{0x00, CRL_REG_LEN_DELAY, 20, 0x00}, /* Delay 20ms */
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity imx477_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 19200000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 1,
+	},
+};
+
+static struct crl_arithmetic_ops imx477_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops imx477_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc imx477_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(imx477_frame_desc_width_ops),
+			.ops = imx477_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(imx477_frame_desc_height_ops),
+			.ops = imx477_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(imx477_frame_desc_width_ops),
+			.ops = imx477_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(imx477_frame_desc_height_ops),
+			.ops = imx477_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 1,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(imx477_frame_desc_width_ops),
+			.ops = imx477_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(imx477_frame_desc_height_ops),
+			.ops = imx477_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 2,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+#endif  /* __CRLMODULE_IMX477_COMMON_REGS_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx477_master_configuration.h b/drivers/media/i2c/crlmodule/crl_imx477_master_configuration.h
new file mode 100644
index 000000000000..10be93b07215
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx477_master_configuration.h
@@ -0,0 +1,1375 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Alexei Zavjalov <alexei.zavjalov@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_IMX477_MASTER_CONFIGURATION_H_
+#define __CRLMODULE_IMX477_MASTER_CONFIGURATION_H_
+
+#include "crl_imx477_common_regs.h"
+
+static struct crl_register_write_rep imx477_onetime_init_regset_master[] = {
+	{0x0103, CRL_REG_LEN_08BIT, 0x01}, /* Software reset        */
+
+	{0x3010, CRL_REG_LEN_08BIT, 0x01}, /* SLAVE_ADD_EN_2ND      */
+	{0x3011, CRL_REG_LEN_08BIT, 0x01}, /* SLAVE_ADD_ACKEN_2ND   */
+
+	{0x3F0B, CRL_REG_LEN_08BIT, 0x01}, /* Multi camera mode: on */
+
+	{0x3041, CRL_REG_LEN_08BIT, 0x01}, /* Mode: Master */
+	{0x3040, CRL_REG_LEN_08BIT, 0x01}, /* XVS pin: out */
+	{0x4B81, CRL_REG_LEN_08BIT, 0x01}, /* Mode: Master */
+
+	{0x3042, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in lines [15:8]  */
+	{0x3043, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in lines [7:0]   */
+	{0x3044, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in clocks [15:8] */
+	{0x3045, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in clocks [7:0]  */
+	{0x3045, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC thin down setting      */
+
+	/* External Clock Setting */
+	{0x0136, CRL_REG_LEN_08BIT, 0x13}, /* External clock freq (dec) [15:8] */
+	{0x0137, CRL_REG_LEN_08BIT, 0x33}, /* External clock freq (dec) [7:0]  */
+
+	/* Global Setting */
+	{0x0808, CRL_REG_LEN_08BIT, 0x02}, /* MIPI Global Timing: Register Control */
+	{0xE07A, CRL_REG_LEN_08BIT, 0x01},
+	{0xE000, CRL_REG_LEN_08BIT, 0x00}, /* RUN/STOP of CSI2 during Frame Blanking: HS */
+	{0x4AE9, CRL_REG_LEN_08BIT, 0x18},
+	{0x4AEA, CRL_REG_LEN_08BIT, 0x08},
+	{0xF61C, CRL_REG_LEN_08BIT, 0x04},
+	{0xF61E, CRL_REG_LEN_08BIT, 0x04},
+	{0x4AE9, CRL_REG_LEN_08BIT, 0x21},
+	{0x4AEA, CRL_REG_LEN_08BIT, 0x80},
+	{0x38A8, CRL_REG_LEN_08BIT, 0x1F},
+	{0x38A9, CRL_REG_LEN_08BIT, 0xFF},
+	{0x38AA, CRL_REG_LEN_08BIT, 0x1F},
+	{0x38AB, CRL_REG_LEN_08BIT, 0xFF},
+	{0x420B, CRL_REG_LEN_08BIT, 0x01},
+	{0x55D4, CRL_REG_LEN_08BIT, 0x00},
+	{0x55D5, CRL_REG_LEN_08BIT, 0x00},
+	{0x55D6, CRL_REG_LEN_08BIT, 0x07},
+	{0x55D7, CRL_REG_LEN_08BIT, 0xFF},
+	{0x55E8, CRL_REG_LEN_08BIT, 0x07},
+	{0x55E9, CRL_REG_LEN_08BIT, 0xFF},
+	{0x55EA, CRL_REG_LEN_08BIT, 0x00},
+	{0x55EB, CRL_REG_LEN_08BIT, 0x00},
+	{0x574C, CRL_REG_LEN_08BIT, 0x07},
+	{0x574D, CRL_REG_LEN_08BIT, 0xFF},
+	{0x574E, CRL_REG_LEN_08BIT, 0x00},
+	{0x574F, CRL_REG_LEN_08BIT, 0x00},
+	{0x5754, CRL_REG_LEN_08BIT, 0x00},
+	{0x5755, CRL_REG_LEN_08BIT, 0x00},
+	{0x5756, CRL_REG_LEN_08BIT, 0x07},
+	{0x5757, CRL_REG_LEN_08BIT, 0xFF},
+	{0x5973, CRL_REG_LEN_08BIT, 0x04},
+	{0x5974, CRL_REG_LEN_08BIT, 0x01},
+	{0x5D13, CRL_REG_LEN_08BIT, 0xC3},
+	{0x5D14, CRL_REG_LEN_08BIT, 0x58},
+	{0x5D15, CRL_REG_LEN_08BIT, 0xA3},
+	{0x5D16, CRL_REG_LEN_08BIT, 0x1D},
+	{0x5D17, CRL_REG_LEN_08BIT, 0x65},
+	{0x5D18, CRL_REG_LEN_08BIT, 0x8C},
+	{0x5D1A, CRL_REG_LEN_08BIT, 0x06},
+	{0x5D1B, CRL_REG_LEN_08BIT, 0xA9},
+	{0x5D1C, CRL_REG_LEN_08BIT, 0x45},
+	{0x5D1D, CRL_REG_LEN_08BIT, 0x3A},
+	{0x5D1E, CRL_REG_LEN_08BIT, 0xAB},
+	{0x5D1F, CRL_REG_LEN_08BIT, 0x15},
+	{0x5D21, CRL_REG_LEN_08BIT, 0x0E},
+	{0x5D22, CRL_REG_LEN_08BIT, 0x52},
+	{0x5D23, CRL_REG_LEN_08BIT, 0xAA},
+	{0x5D24, CRL_REG_LEN_08BIT, 0x7D},
+	{0x5D25, CRL_REG_LEN_08BIT, 0x57},
+	{0x5D26, CRL_REG_LEN_08BIT, 0xA8},
+	{0x5D37, CRL_REG_LEN_08BIT, 0x5A},
+	{0x5D38, CRL_REG_LEN_08BIT, 0x5A},
+	{0x5D77, CRL_REG_LEN_08BIT, 0x7F},
+	{0x7B7C, CRL_REG_LEN_08BIT, 0x00},
+	{0x7B7D, CRL_REG_LEN_08BIT, 0x00},
+	{0x8D1F, CRL_REG_LEN_08BIT, 0x00},
+	{0x8D27, CRL_REG_LEN_08BIT, 0x00},
+	{0x9004, CRL_REG_LEN_08BIT, 0x03},
+	{0x9200, CRL_REG_LEN_08BIT, 0x50},
+	{0x9201, CRL_REG_LEN_08BIT, 0x6C},
+	{0x9202, CRL_REG_LEN_08BIT, 0x71},
+	{0x9203, CRL_REG_LEN_08BIT, 0x00},
+	{0x9204, CRL_REG_LEN_08BIT, 0x71},
+	{0x9205, CRL_REG_LEN_08BIT, 0x01},
+	{0x9371, CRL_REG_LEN_08BIT, 0x6A},
+	{0x9373, CRL_REG_LEN_08BIT, 0x6A},
+	{0x9375, CRL_REG_LEN_08BIT, 0x64},
+	{0x990C, CRL_REG_LEN_08BIT, 0x00},
+	{0x990D, CRL_REG_LEN_08BIT, 0x08},
+	{0x9956, CRL_REG_LEN_08BIT, 0x8C},
+	{0x9957, CRL_REG_LEN_08BIT, 0x64},
+	{0x9958, CRL_REG_LEN_08BIT, 0x50},
+	{0x9A48, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A49, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4A, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4B, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4C, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4D, CRL_REG_LEN_08BIT, 0x06},
+	{0xA001, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA003, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA005, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA006, CRL_REG_LEN_08BIT, 0x01},
+	{0xA007, CRL_REG_LEN_08BIT, 0xC0},
+	{0xA009, CRL_REG_LEN_08BIT, 0xC0},
+
+	/* Image Tuning */
+	{0x3D8A, CRL_REG_LEN_08BIT, 0x01},
+	{0x7B3B, CRL_REG_LEN_08BIT, 0x01},
+	{0x7B4C, CRL_REG_LEN_08BIT, 0x00},
+	{0x9905, CRL_REG_LEN_08BIT, 0x00},
+	{0x9907, CRL_REG_LEN_08BIT, 0x00},
+	{0x9909, CRL_REG_LEN_08BIT, 0x00},
+	{0x990B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9944, CRL_REG_LEN_08BIT, 0x3C},
+	{0x9947, CRL_REG_LEN_08BIT, 0x3C},
+	{0x994A, CRL_REG_LEN_08BIT, 0x8C},
+	{0x994B, CRL_REG_LEN_08BIT, 0x50},
+	{0x994C, CRL_REG_LEN_08BIT, 0x1B},
+	{0x994D, CRL_REG_LEN_08BIT, 0x8C},
+	{0x994E, CRL_REG_LEN_08BIT, 0x50},
+	{0x994F, CRL_REG_LEN_08BIT, 0x1B},
+	{0x9950, CRL_REG_LEN_08BIT, 0x8C},
+	{0x9951, CRL_REG_LEN_08BIT, 0x1B},
+	{0x9952, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9953, CRL_REG_LEN_08BIT, 0x8C},
+	{0x9954, CRL_REG_LEN_08BIT, 0x1B},
+	{0x9955, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9A13, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A14, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A19, CRL_REG_LEN_08BIT, 0x00},
+	{0x9A1C, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A1D, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A26, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A27, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A2C, CRL_REG_LEN_08BIT, 0x01},
+	{0x9A2D, CRL_REG_LEN_08BIT, 0x03},
+	{0x9A2F, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A30, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A41, CRL_REG_LEN_08BIT, 0x00},
+	{0x9A46, CRL_REG_LEN_08BIT, 0x00},
+	{0x9A47, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9C1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9C29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9C3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9C41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9C47, CRL_REG_LEN_08BIT, 0x2D},
+	{0x9C4D, CRL_REG_LEN_08BIT, 0x40},
+	{0x9C6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9C73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9C75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9C7D, CRL_REG_LEN_08BIT, 0x2D},
+	{0x9C83, CRL_REG_LEN_08BIT, 0x40},
+	{0x9C94, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C95, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C96, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C9A, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C9B, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C9C, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9CA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9CA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9CA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9CA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CA6, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9CA7, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9CA8, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9CA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9CAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9CAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9CBD, CRL_REG_LEN_08BIT, 0x50},
+	{0x9CBF, CRL_REG_LEN_08BIT, 0x50},
+	{0x9CC1, CRL_REG_LEN_08BIT, 0x50},
+	{0x9CC3, CRL_REG_LEN_08BIT, 0x40},
+	{0x9CC5, CRL_REG_LEN_08BIT, 0x40},
+	{0x9CC7, CRL_REG_LEN_08BIT, 0x40},
+	{0x9CC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9CCB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9CCD, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9D17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9D1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9D29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9D3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9D41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9D47, CRL_REG_LEN_08BIT, 0x42},
+	{0x9D4D, CRL_REG_LEN_08BIT, 0x5A},
+	{0x9D6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9D73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9D75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9D7D, CRL_REG_LEN_08BIT, 0x42},
+	{0x9D83, CRL_REG_LEN_08BIT, 0x5A},
+	{0x9D94, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D95, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D96, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D9A, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D9B, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D9C, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D9D, CRL_REG_LEN_08BIT, 0x1F},
+	{0x9D9E, CRL_REG_LEN_08BIT, 0x1F},
+	{0x9D9F, CRL_REG_LEN_08BIT, 0x1F},
+	{0x9DA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9DA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9DA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9DA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DA6, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9DA7, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9DA8, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9DA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9DAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9DAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9DC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9DCB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9DCD, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9E17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9E1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9E29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9E3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9E41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9E47, CRL_REG_LEN_08BIT, 0x2D},
+	{0x9E4D, CRL_REG_LEN_08BIT, 0x40},
+	{0x9E6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9E71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9E73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9E75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9E94, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9E95, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9E96, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9E97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9E98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9E99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9EA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9EA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9EA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA6, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9EA7, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9EA8, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9EA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9EAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9EAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9EC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9ECB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9ECD, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9F17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9F1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9F29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9F3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9F47, CRL_REG_LEN_08BIT, 0x42},
+	{0x9F4D, CRL_REG_LEN_08BIT, 0x5A},
+	{0x9F6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9F73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9F75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9F94, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9F95, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9F96, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9F97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F9A, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F9B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F9C, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F9D, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F9E, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F9F, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9FA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9FA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9FA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA6, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9FA7, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9FA8, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9FA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9FAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9FAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9FC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9FCB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9FCD, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA14B, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA151, CRL_REG_LEN_08BIT, 0x0C},
+	{0xA153, CRL_REG_LEN_08BIT, 0x50},
+	{0xA155, CRL_REG_LEN_08BIT, 0x02},
+	{0xA157, CRL_REG_LEN_08BIT, 0x00},
+	{0xA1AD, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA1B3, CRL_REG_LEN_08BIT, 0x0C},
+	{0xA1B5, CRL_REG_LEN_08BIT, 0x50},
+	{0xA1B9, CRL_REG_LEN_08BIT, 0x00},
+	{0xA24B, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA257, CRL_REG_LEN_08BIT, 0x00},
+	{0xA2AD, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA2B9, CRL_REG_LEN_08BIT, 0x00},
+	{0xB21F, CRL_REG_LEN_08BIT, 0x04},
+	{0xB35C, CRL_REG_LEN_08BIT, 0x00},
+	{0xB35E, CRL_REG_LEN_08BIT, 0x08},
+};
+
+static struct crl_register_write_rep imx477_4056_3040_19MHZ_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x0B}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xE0}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x0B}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xE0}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_4056_3040_19MHZ_DOL_2f_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x01}, /* DOL-HDR Enable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x01}, /* DOL Mode: 2 frames in DOL-HDR */
+	/* virtual channel ID of visible line and embedded line of DOL 2nd frame */
+	{0x3E10, CRL_REG_LEN_08BIT, 0x01},
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x0B}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xE0}, /* Height after cropping [7:0]  */
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x0B}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xE0}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_4056_3040_19MHZ_DOL_3f_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x01}, /* DOL-HDR Enable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x02}, /* DOL Mode: 2 frames in DOL-HDR */
+	/* virtual channel ID of visible line and embedded line of DOL 2nd frame */
+	{0x3E10, CRL_REG_LEN_08BIT, 0x01},
+	/* virtual channel ID of visible line and embedded line of DOL 3rd frame */
+	{0x3E11, CRL_REG_LEN_08BIT, 0x02},
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x0B}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xE0}, /* Height after cropping [7:0]  */
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x0B}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xE0}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_4056_2288_19MHZ_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	/* (0,376) to (4055, 2664) */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x01}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x78}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0A}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0x68}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x08}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xF0}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x08}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xF0}, /* Y output size [7:0]  */
+};
+
+
+static struct crl_register_write_rep imx477_2832_1632_19MHZ_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	/* scale factor 16/22, 3894x2244 to 2832x1632 */
+	{0x0401, CRL_REG_LEN_08BIT, 0x02}, /* Scaling mode: Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x16}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x52}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x01}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x8E}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0x36}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x08}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xC4}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0B}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0x10}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x06}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0x60}, /* Y output size [7:0]  */
+};
+
+
+static struct crl_register_write_rep imx477_2028_1128_19MHZ_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x01}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x88}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0A}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0x58}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x01}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x22}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x07}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xEC}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x04}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0x68}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x07}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xEC}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x04}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0x68}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_1296_768_19MHZ_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	/* scale factor 16/50, 4050x2400 to 1296x768 */
+	{0x0401, CRL_REG_LEN_08BIT, 0x02}, /* Scaling mode: Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x32}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x04}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x01}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x40}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD2}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x09}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0x60}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x05}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0x10}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x03}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0x00}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_656_512_19MHZ_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	/* scale factor 16/95, 3895x3040 to 656x512 */
+	{0x0401, CRL_REG_LEN_08BIT, 0x02}, /* Scaling mode: Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x5F}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x50}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0x37}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x0B}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xE0}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x02}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0x90}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x02}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0x00}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_4056_2288_19MHZ_DOL_2f_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	/* (0,376) to (4055, 2664) */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x01}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x78}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0A}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0x68}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x01}, /* DOL-HDR enabled */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x01}, /* DOL Mode: DOL2 */
+	{0x00FC, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FD, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x3E10, CRL_REG_LEN_08BIT, 0x01}, /* VC ID of DOL 2nd frame */
+
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x08}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xF0}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x08}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xF0}, /* Y output size [7:0]  */
+};
+
+static struct crl_register_write_rep imx477_4056_2288_19MHZ_DOL_3f_master[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	/* (0,376) to (4055, 2664) */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x01}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x78}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0A}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0x68}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x01}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x02}, /* DOL Mode: DOL3 */
+	{0x00FC, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FD, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FE, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FF, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x3E10, CRL_REG_LEN_08BIT, 0x01}, /* VC ID of DOL 2nd frame */
+	{0x3E11, CRL_REG_LEN_08BIT, 0x02}, /* VC ID of DOL 3rd frame */
+
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x08}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xF0}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x08}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xF0}, /* Y output size [7:0]  */
+};
+
+static struct crl_mode_rep imx477_modes_master[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_3040_rects),
+		.sd_rects = imx477_4056_3040_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 3040,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_3040_19MHZ_master),
+		.mode_regs = imx477_4056_3040_19MHZ_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_3040_rects),
+		.sd_rects = imx477_4056_3040_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 3040,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_3040_19MHZ_DOL_2f_master),
+		.mode_regs = imx477_4056_3040_19MHZ_DOL_2f_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_3040_rects),
+		.sd_rects = imx477_4056_3040_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 3040,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_3040_19MHZ_DOL_3f_master),
+		.mode_regs = imx477_4056_3040_19MHZ_DOL_3f_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_2288_rects),
+		.sd_rects = imx477_4056_2288_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 2288,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_2288_19MHZ_master),
+		.mode_regs = imx477_4056_2288_19MHZ_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_2832_1632_rects),
+		.sd_rects = imx477_2832_1632_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2832,
+		.height = 1632,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_2832_1632_19MHZ_master),
+		.mode_regs = imx477_2832_1632_19MHZ_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_2028_1128_rects),
+		.sd_rects = imx477_2028_1128_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2028,
+		.height = 1128,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_2028_1128_19MHZ_master),
+		.mode_regs = imx477_2028_1128_19MHZ_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_1296_768_rects),
+		.sd_rects = imx477_1296_768_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1296,
+		.height = 768,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_1296_768_19MHZ_master),
+		.mode_regs = imx477_1296_768_19MHZ_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_656_512_rects),
+		.sd_rects = imx477_656_512_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 656,
+		.height = 512,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_656_512_19MHZ_master),
+		.mode_regs = imx477_656_512_19MHZ_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_2288_rects),
+		.sd_rects = imx477_4056_2288_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 2288,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_2288_19MHZ_DOL_2f_master),
+		.mode_regs = imx477_4056_2288_19MHZ_DOL_2f_master,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_2288_rects),
+		.sd_rects = imx477_4056_2288_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 2288,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_2288_19MHZ_DOL_3f_master),
+		.mode_regs = imx477_4056_2288_19MHZ_DOL_3f_master,
+	},
+};
+
+static struct crl_flip_data imx477_flip_configurations_master[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	}
+};
+
+struct crl_sensor_configuration imx477_master_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(imx477_power_items),
+	.power_entities = imx477_power_items,
+
+	.onetime_init_regs_items = ARRAY_SIZE(imx477_onetime_init_regset_master),
+	.onetime_init_regs = imx477_onetime_init_regset_master,
+
+	.powerup_regs_items = ARRAY_SIZE(imx477_powerup_standby),
+	.powerup_regs = imx477_powerup_standby,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(imx477_sensor_detect_regset),
+	.id_regs = imx477_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx477_sensor_subdevs),
+	.subdevs = imx477_sensor_subdevs,
+
+	.sensor_limits = &imx477_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx477_pll_configurations),
+	.pll_configs = imx477_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx477_modes_master),
+	.modes = imx477_modes_master,
+
+	.streamon_regs_items = ARRAY_SIZE(imx477_streamon_regs),
+	.streamon_regs = imx477_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx477_streamoff_regs),
+	.streamoff_regs = imx477_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx477_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx477_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx477_crl_csi_data_fmt),
+	.csi_fmts = imx477_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx477_flip_configurations_master),
+	.flip_data = imx477_flip_configurations_master,
+
+	.frame_desc_entries = ARRAY_SIZE(imx477_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = imx477_frame_desc,
+};
+
+#endif  /* __CRLMODULE_IMX477_MASTER_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_imx477_slave_configuration.h b/drivers/media/i2c/crlmodule/crl_imx477_slave_configuration.h
new file mode 100644
index 000000000000..b8dc15c0f1f8
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_imx477_slave_configuration.h
@@ -0,0 +1,509 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Alexei Zavjalov <alexei.zavjalov@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_IMX477_SLAVE_CONFIGURATION_H_
+#define __CRLMODULE_IMX477_SLAVE_CONFIGURATION_H_
+
+#include "crl_imx477_common_regs.h"
+
+static struct crl_register_write_rep imx477_onetime_init_regset_slave[] = {
+	{0x0103, CRL_REG_LEN_08BIT, 0x01}, /* Software reset        */
+
+	{0x3010, CRL_REG_LEN_08BIT, 0x01}, /* SLAVE_ADD_EN_2ND      */
+	{0x3011, CRL_REG_LEN_08BIT, 0x01}, /* SLAVE_ADD_ACKEN_2ND   */
+
+	{0x3F0B, CRL_REG_LEN_08BIT, 0x01}, /* Multi camera mode: on */
+
+	{0x3041, CRL_REG_LEN_08BIT, 0x00}, /* Mode: Slave */
+	{0x3040, CRL_REG_LEN_08BIT, 0x00}, /* XVS pin: in */
+	{0x4B81, CRL_REG_LEN_08BIT, 0x00}, /* Mode: Slave */
+
+	{0x3042, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in lines [15:8]  */
+	{0x3043, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in lines [7:0]   */
+	{0x3044, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in clocks [15:8] */
+	{0x3045, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC Delay in clocks [7:0]  */
+	{0x3045, CRL_REG_LEN_08BIT, 0x00}, /* VSYNC thin down setting      */
+
+	/* External Clock Setting */
+	{0x0136, CRL_REG_LEN_08BIT, 0x13}, /* External clock freq (dec) [15:8] */
+	{0x0137, CRL_REG_LEN_08BIT, 0x33}, /* External clock freq (dec) [7:0]  */
+
+	/* Global Setting */
+	{0x0808, CRL_REG_LEN_08BIT, 0x02}, /* MIPI Global Timing: Register Control */
+	{0xE07A, CRL_REG_LEN_08BIT, 0x01},
+	{0xE000, CRL_REG_LEN_08BIT, 0x00}, /* RUN/STOP of CSI2 during Frame Blanking: HS */
+	{0x4AE9, CRL_REG_LEN_08BIT, 0x18},
+	{0x4AEA, CRL_REG_LEN_08BIT, 0x08},
+	{0xF61C, CRL_REG_LEN_08BIT, 0x04},
+	{0xF61E, CRL_REG_LEN_08BIT, 0x04},
+	{0x4AE9, CRL_REG_LEN_08BIT, 0x21},
+	{0x4AEA, CRL_REG_LEN_08BIT, 0x80},
+	{0x38A8, CRL_REG_LEN_08BIT, 0x1F},
+	{0x38A9, CRL_REG_LEN_08BIT, 0xFF},
+	{0x38AA, CRL_REG_LEN_08BIT, 0x1F},
+	{0x38AB, CRL_REG_LEN_08BIT, 0xFF},
+	{0x420B, CRL_REG_LEN_08BIT, 0x01},
+	{0x55D4, CRL_REG_LEN_08BIT, 0x00},
+	{0x55D5, CRL_REG_LEN_08BIT, 0x00},
+	{0x55D6, CRL_REG_LEN_08BIT, 0x07},
+	{0x55D7, CRL_REG_LEN_08BIT, 0xFF},
+	{0x55E8, CRL_REG_LEN_08BIT, 0x07},
+	{0x55E9, CRL_REG_LEN_08BIT, 0xFF},
+	{0x55EA, CRL_REG_LEN_08BIT, 0x00},
+	{0x55EB, CRL_REG_LEN_08BIT, 0x00},
+	{0x574C, CRL_REG_LEN_08BIT, 0x07},
+	{0x574D, CRL_REG_LEN_08BIT, 0xFF},
+	{0x574E, CRL_REG_LEN_08BIT, 0x00},
+	{0x574F, CRL_REG_LEN_08BIT, 0x00},
+	{0x5754, CRL_REG_LEN_08BIT, 0x00},
+	{0x5755, CRL_REG_LEN_08BIT, 0x00},
+	{0x5756, CRL_REG_LEN_08BIT, 0x07},
+	{0x5757, CRL_REG_LEN_08BIT, 0xFF},
+	{0x5973, CRL_REG_LEN_08BIT, 0x04},
+	{0x5974, CRL_REG_LEN_08BIT, 0x01},
+	{0x5D13, CRL_REG_LEN_08BIT, 0xC3},
+	{0x5D14, CRL_REG_LEN_08BIT, 0x58},
+	{0x5D15, CRL_REG_LEN_08BIT, 0xA3},
+	{0x5D16, CRL_REG_LEN_08BIT, 0x1D},
+	{0x5D17, CRL_REG_LEN_08BIT, 0x65},
+	{0x5D18, CRL_REG_LEN_08BIT, 0x8C},
+	{0x5D1A, CRL_REG_LEN_08BIT, 0x06},
+	{0x5D1B, CRL_REG_LEN_08BIT, 0xA9},
+	{0x5D1C, CRL_REG_LEN_08BIT, 0x45},
+	{0x5D1D, CRL_REG_LEN_08BIT, 0x3A},
+	{0x5D1E, CRL_REG_LEN_08BIT, 0xAB},
+	{0x5D1F, CRL_REG_LEN_08BIT, 0x15},
+	{0x5D21, CRL_REG_LEN_08BIT, 0x0E},
+	{0x5D22, CRL_REG_LEN_08BIT, 0x52},
+	{0x5D23, CRL_REG_LEN_08BIT, 0xAA},
+	{0x5D24, CRL_REG_LEN_08BIT, 0x7D},
+	{0x5D25, CRL_REG_LEN_08BIT, 0x57},
+	{0x5D26, CRL_REG_LEN_08BIT, 0xA8},
+	{0x5D37, CRL_REG_LEN_08BIT, 0x5A},
+	{0x5D38, CRL_REG_LEN_08BIT, 0x5A},
+	{0x5D77, CRL_REG_LEN_08BIT, 0x7F},
+	{0x7B7C, CRL_REG_LEN_08BIT, 0x00},
+	{0x7B7D, CRL_REG_LEN_08BIT, 0x00},
+	{0x8D1F, CRL_REG_LEN_08BIT, 0x00},
+	{0x8D27, CRL_REG_LEN_08BIT, 0x00},
+	{0x9004, CRL_REG_LEN_08BIT, 0x03},
+	{0x9200, CRL_REG_LEN_08BIT, 0x50},
+	{0x9201, CRL_REG_LEN_08BIT, 0x6C},
+	{0x9202, CRL_REG_LEN_08BIT, 0x71},
+	{0x9203, CRL_REG_LEN_08BIT, 0x00},
+	{0x9204, CRL_REG_LEN_08BIT, 0x71},
+	{0x9205, CRL_REG_LEN_08BIT, 0x01},
+	{0x9371, CRL_REG_LEN_08BIT, 0x6A},
+	{0x9373, CRL_REG_LEN_08BIT, 0x6A},
+	{0x9375, CRL_REG_LEN_08BIT, 0x64},
+	{0x990C, CRL_REG_LEN_08BIT, 0x00},
+	{0x990D, CRL_REG_LEN_08BIT, 0x08},
+	{0x9956, CRL_REG_LEN_08BIT, 0x8C},
+	{0x9957, CRL_REG_LEN_08BIT, 0x64},
+	{0x9958, CRL_REG_LEN_08BIT, 0x50},
+	{0x9A48, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A49, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4A, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4B, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4C, CRL_REG_LEN_08BIT, 0x06},
+	{0x9A4D, CRL_REG_LEN_08BIT, 0x06},
+	{0xA001, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA003, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA005, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA006, CRL_REG_LEN_08BIT, 0x01},
+	{0xA007, CRL_REG_LEN_08BIT, 0xC0},
+	{0xA009, CRL_REG_LEN_08BIT, 0xC0},
+
+	/* Image Tuning */
+	{0x3D8A, CRL_REG_LEN_08BIT, 0x01},
+	{0x7B3B, CRL_REG_LEN_08BIT, 0x01},
+	{0x7B4C, CRL_REG_LEN_08BIT, 0x00},
+	{0x9905, CRL_REG_LEN_08BIT, 0x00},
+	{0x9907, CRL_REG_LEN_08BIT, 0x00},
+	{0x9909, CRL_REG_LEN_08BIT, 0x00},
+	{0x990B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9944, CRL_REG_LEN_08BIT, 0x3C},
+	{0x9947, CRL_REG_LEN_08BIT, 0x3C},
+	{0x994A, CRL_REG_LEN_08BIT, 0x8C},
+	{0x994B, CRL_REG_LEN_08BIT, 0x50},
+	{0x994C, CRL_REG_LEN_08BIT, 0x1B},
+	{0x994D, CRL_REG_LEN_08BIT, 0x8C},
+	{0x994E, CRL_REG_LEN_08BIT, 0x50},
+	{0x994F, CRL_REG_LEN_08BIT, 0x1B},
+	{0x9950, CRL_REG_LEN_08BIT, 0x8C},
+	{0x9951, CRL_REG_LEN_08BIT, 0x1B},
+	{0x9952, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9953, CRL_REG_LEN_08BIT, 0x8C},
+	{0x9954, CRL_REG_LEN_08BIT, 0x1B},
+	{0x9955, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9A13, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A14, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A19, CRL_REG_LEN_08BIT, 0x00},
+	{0x9A1C, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A1D, CRL_REG_LEN_08BIT, 0x04},
+	{0x9A26, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A27, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A2C, CRL_REG_LEN_08BIT, 0x01},
+	{0x9A2D, CRL_REG_LEN_08BIT, 0x03},
+	{0x9A2F, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A30, CRL_REG_LEN_08BIT, 0x05},
+	{0x9A41, CRL_REG_LEN_08BIT, 0x00},
+	{0x9A46, CRL_REG_LEN_08BIT, 0x00},
+	{0x9A47, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9C1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9C29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9C3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9C41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9C47, CRL_REG_LEN_08BIT, 0x2D},
+	{0x9C4D, CRL_REG_LEN_08BIT, 0x40},
+	{0x9C6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9C73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9C75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9C7D, CRL_REG_LEN_08BIT, 0x2D},
+	{0x9C83, CRL_REG_LEN_08BIT, 0x40},
+	{0x9C94, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C95, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C96, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9C9A, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C9B, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9C9C, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9CA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9CA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9CA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9CA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CA6, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9CA7, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9CA8, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9CA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9CAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9CAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9CAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9CBD, CRL_REG_LEN_08BIT, 0x50},
+	{0x9CBF, CRL_REG_LEN_08BIT, 0x50},
+	{0x9CC1, CRL_REG_LEN_08BIT, 0x50},
+	{0x9CC3, CRL_REG_LEN_08BIT, 0x40},
+	{0x9CC5, CRL_REG_LEN_08BIT, 0x40},
+	{0x9CC7, CRL_REG_LEN_08BIT, 0x40},
+	{0x9CC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9CCB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9CCD, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9D17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9D1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9D29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9D3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9D41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9D47, CRL_REG_LEN_08BIT, 0x42},
+	{0x9D4D, CRL_REG_LEN_08BIT, 0x5A},
+	{0x9D6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9D73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9D75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9D7D, CRL_REG_LEN_08BIT, 0x42},
+	{0x9D83, CRL_REG_LEN_08BIT, 0x5A},
+	{0x9D94, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D95, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D96, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9D9A, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D9B, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D9C, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9D9D, CRL_REG_LEN_08BIT, 0x1F},
+	{0x9D9E, CRL_REG_LEN_08BIT, 0x1F},
+	{0x9D9F, CRL_REG_LEN_08BIT, 0x1F},
+	{0x9DA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9DA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9DA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9DA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DA6, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9DA7, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9DA8, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9DA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9DAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9DAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9DAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9DC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9DCB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9DCD, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9E17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9E1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9E29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9E3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9E41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9E47, CRL_REG_LEN_08BIT, 0x2D},
+	{0x9E4D, CRL_REG_LEN_08BIT, 0x40},
+	{0x9E6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9E71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9E73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9E75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9E94, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9E95, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9E96, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9E97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9E98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9E99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9EA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9EA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9EA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EA6, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9EA7, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9EA8, CRL_REG_LEN_08BIT, 0x3F},
+	{0x9EA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9EAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9EAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9EAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9EC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9ECB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9ECD, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9F17, CRL_REG_LEN_08BIT, 0x35},
+	{0x9F1D, CRL_REG_LEN_08BIT, 0x31},
+	{0x9F29, CRL_REG_LEN_08BIT, 0x50},
+	{0x9F3B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F41, CRL_REG_LEN_08BIT, 0x6B},
+	{0x9F47, CRL_REG_LEN_08BIT, 0x42},
+	{0x9F4D, CRL_REG_LEN_08BIT, 0x5A},
+	{0x9F6B, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F71, CRL_REG_LEN_08BIT, 0xC8},
+	{0x9F73, CRL_REG_LEN_08BIT, 0x32},
+	{0x9F75, CRL_REG_LEN_08BIT, 0x04},
+	{0x9F94, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9F95, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9F96, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9F97, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F98, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F99, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F9A, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F9B, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F9C, CRL_REG_LEN_08BIT, 0x2F},
+	{0x9F9D, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F9E, CRL_REG_LEN_08BIT, 0x00},
+	{0x9F9F, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA0, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9FA1, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9FA2, CRL_REG_LEN_08BIT, 0x0F},
+	{0x9FA3, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA4, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA5, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FA6, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9FA7, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9FA8, CRL_REG_LEN_08BIT, 0x1E},
+	{0x9FA9, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FAA, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FAB, CRL_REG_LEN_08BIT, 0x00},
+	{0x9FAC, CRL_REG_LEN_08BIT, 0x09},
+	{0x9FAD, CRL_REG_LEN_08BIT, 0x09},
+	{0x9FAE, CRL_REG_LEN_08BIT, 0x09},
+	{0x9FC9, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9FCB, CRL_REG_LEN_08BIT, 0x0A},
+	{0x9FCD, CRL_REG_LEN_08BIT, 0x0A},
+	{0xA14B, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA151, CRL_REG_LEN_08BIT, 0x0C},
+	{0xA153, CRL_REG_LEN_08BIT, 0x50},
+	{0xA155, CRL_REG_LEN_08BIT, 0x02},
+	{0xA157, CRL_REG_LEN_08BIT, 0x00},
+	{0xA1AD, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA1B3, CRL_REG_LEN_08BIT, 0x0C},
+	{0xA1B5, CRL_REG_LEN_08BIT, 0x50},
+	{0xA1B9, CRL_REG_LEN_08BIT, 0x00},
+	{0xA24B, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA257, CRL_REG_LEN_08BIT, 0x00},
+	{0xA2AD, CRL_REG_LEN_08BIT, 0xFF},
+	{0xA2B9, CRL_REG_LEN_08BIT, 0x00},
+	{0xB21F, CRL_REG_LEN_08BIT, 0x04},
+	{0xB35C, CRL_REG_LEN_08BIT, 0x00},
+	{0xB35E, CRL_REG_LEN_08BIT, 0x08},
+};
+
+static struct crl_register_write_rep imx477_4056_3040_19MHZ_slave[] = {
+	/* Frame Horizontal Clock Count */
+	{0x0342, CRL_REG_LEN_08BIT, 0x39}, /* Line length [15:8]  */
+	{0x0343, CRL_REG_LEN_08BIT, 0x14}, /* Line length [7:0]   */
+
+	/* Frame Vertical Clock Count */
+	{0x0340, CRL_REG_LEN_08BIT, 0x20}, /* Frame length [15:8] */
+	{0x0341, CRL_REG_LEN_08BIT, 0x11}, /* Frame length [7:0]  */
+
+	/* Visible Size */
+	{0x0344, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [12:8] */
+	{0x0345, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start X [7:0]  */
+	{0x0346, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [12:8] */
+	{0x0347, CRL_REG_LEN_08BIT, 0x00}, /* Analog cropping start Y [7:0]  */
+	{0x0348, CRL_REG_LEN_08BIT, 0x0F}, /* Analog cropping end X [12:8]   */
+	{0x0349, CRL_REG_LEN_08BIT, 0xD7}, /* Analog cropping end X [7:0]    */
+	{0x034A, CRL_REG_LEN_08BIT, 0x0B}, /* Analog cropping end Y [12:8]   */
+	{0x034B, CRL_REG_LEN_08BIT, 0xDF}, /* Analog cropping end Y [7:0]    */
+
+	/* Mode Setting */
+	{0x00E3, CRL_REG_LEN_08BIT, 0x00}, /* DOL-HDR Disable */
+	{0x00E4, CRL_REG_LEN_08BIT, 0x00}, /* DOL Mode: DOL-HDR Disable */
+	{0x00FC, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FD, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FE, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x00FF, CRL_REG_LEN_08BIT, 0x0A}, /* The output data fmt for CSI: RAW10 */
+	{0x0220, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x0221, CRL_REG_LEN_08BIT, 0x11}, /* Undocumented */
+	{0x0381, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, even -> odd */
+	{0x0383, CRL_REG_LEN_08BIT, 0x01}, /* Num of pixels skipped, odd -> even */
+	{0x0385, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, even -> odd  */
+	{0x0387, CRL_REG_LEN_08BIT, 0x01}, /* Num of lines skipped, odd -> even  */
+	{0x0900, CRL_REG_LEN_08BIT, 0x00}, /* Binning mode: Disable */
+	{0x0901, CRL_REG_LEN_08BIT, 0x11}, /* Binning Type for Horizontal */
+	{0x0902, CRL_REG_LEN_08BIT, 0x02}, /* Binning Type for Vertical   */
+	{0x3140, CRL_REG_LEN_08BIT, 0x02}, /* Undocumented */
+	{0x3C00, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x3C01, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x3C02, CRL_REG_LEN_08BIT, 0xDC}, /* Undocumented */
+	{0x3F0D, CRL_REG_LEN_08BIT, 0x00}, /* AD converter: 10 bit */
+	{0x5748, CRL_REG_LEN_08BIT, 0x07}, /* Undocumented */
+	{0x5749, CRL_REG_LEN_08BIT, 0xFF}, /* Undocumented */
+	{0x574A, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x574B, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x7B75, CRL_REG_LEN_08BIT, 0x0E}, /* Undocumented */
+	{0x7B76, CRL_REG_LEN_08BIT, 0x09}, /* Undocumented */
+	{0x7B77, CRL_REG_LEN_08BIT, 0x0C}, /* Undocumented */
+	{0x7B78, CRL_REG_LEN_08BIT, 0x06}, /* Undocumented */
+	{0x7B79, CRL_REG_LEN_08BIT, 0x3B}, /* Undocumented */
+	{0x7B53, CRL_REG_LEN_08BIT, 0x01}, /* Undocumented */
+	{0x9369, CRL_REG_LEN_08BIT, 0x5A}, /* Undocumented */
+	{0x936B, CRL_REG_LEN_08BIT, 0x55}, /* Undocumented */
+	{0x936D, CRL_REG_LEN_08BIT, 0x28}, /* Undocumented */
+	{0x9304, CRL_REG_LEN_08BIT, 0x03}, /* Undocumented */
+	{0x9305, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9A, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9B, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9C, CRL_REG_LEN_08BIT, 0x2F}, /* Undocumented */
+	{0x9E9D, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9E, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0x9E9F, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+	{0xA2A9, CRL_REG_LEN_08BIT, 0x60}, /* Undocumented */
+	{0xA2B7, CRL_REG_LEN_08BIT, 0x00}, /* Undocumented */
+
+	/* Digital Crop & Scaling */
+	{0x0401, CRL_REG_LEN_08BIT, 0x00}, /* Scaling mode: No Scaling     */
+	{0x0404, CRL_REG_LEN_08BIT, 0x00}, /* Down Scaling Factor M [8]    */
+	{0x0405, CRL_REG_LEN_08BIT, 0x10}, /* Down Scaling Factor M [7:0]  */
+	{0x0408, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [12:8]    */
+	{0x0409, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from X [7:0]     */
+	{0x040A, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [12:8]    */
+	{0x040B, CRL_REG_LEN_08BIT, 0x00}, /* Crop Offset from Y [7:0]     */
+	{0x040C, CRL_REG_LEN_08BIT, 0x0F}, /* Width after cropping [12:8]  */
+	{0x040D, CRL_REG_LEN_08BIT, 0xD8}, /* Width after cropping [7:0]   */
+	{0x040E, CRL_REG_LEN_08BIT, 0x0B}, /* Height after cropping [12:8] */
+	{0x040F, CRL_REG_LEN_08BIT, 0xE0}, /* Height after cropping [7:0]  */
+
+	/* Output Crop */
+	{0x034C, CRL_REG_LEN_08BIT, 0x0F}, /* X output size [12:8] */
+	{0x034D, CRL_REG_LEN_08BIT, 0xD8}, /* X output size [7:0]  */
+	{0x034E, CRL_REG_LEN_08BIT, 0x0B}, /* Y output size [12:8] */
+	{0x034F, CRL_REG_LEN_08BIT, 0xE0}, /* Y output size [7:0]  */
+};
+
+static struct crl_mode_rep imx477_modes_slave[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(imx477_4056_3040_rects),
+		.sd_rects = imx477_4056_3040_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4056,
+		.height = 3040,
+		.min_llp = 14612,
+		.min_fll = 8209,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(imx477_4056_3040_19MHZ_slave),
+		.mode_regs = imx477_4056_3040_19MHZ_slave,
+	},
+};
+
+static struct crl_flip_data imx477_flip_configurations_slave[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	}
+};
+
+struct crl_sensor_configuration imx477_slave_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(imx477_power_items),
+	.power_entities = imx477_power_items,
+
+	.onetime_init_regs_items = ARRAY_SIZE(imx477_onetime_init_regset_slave),
+	.onetime_init_regs = imx477_onetime_init_regset_slave,
+
+	.powerup_regs_items = ARRAY_SIZE(imx477_powerup_standby),
+	.powerup_regs = imx477_powerup_standby,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(imx477_sensor_detect_regset),
+	.id_regs = imx477_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(imx477_sensor_subdevs),
+	.subdevs = imx477_sensor_subdevs,
+
+	.sensor_limits = &imx477_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(imx477_pll_configurations),
+	.pll_configs = imx477_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(imx477_modes_slave),
+	.modes = imx477_modes_slave,
+
+	.streamon_regs_items = ARRAY_SIZE(imx477_streamon_regs),
+	.streamon_regs = imx477_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(imx477_streamoff_regs),
+	.streamoff_regs = imx477_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(imx477_v4l2_ctrls),
+	.v4l2_ctrl_bank = imx477_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(imx477_crl_csi_data_fmt),
+	.csi_fmts = imx477_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(imx477_flip_configurations_slave),
+	.flip_data = imx477_flip_configurations_slave,
+
+	.frame_desc_entries = ARRAY_SIZE(imx477_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = imx477_frame_desc,
+};
+
+#endif  /* __CRLMODULE_IMX477_SLAVE_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_magna_configuration.h b/drivers/media/i2c/crlmodule/crl_magna_configuration.h
new file mode 100644
index 000000000000..cd1e316a2cab
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_magna_configuration.h
@@ -0,0 +1,209 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Kishore Bodke <kishore.k.bodke@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_MAGNA_CONFIGURATION_H_
+#define __CRLMODULE_MAGNA_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_pll_configuration magna_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 20,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	}
+};
+
+static struct crl_subdev_rect_rep magna_1280_720_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 720,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 720,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_mode_rep magna_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(magna_1280_720_rects),
+		.sd_rects = magna_1280_720_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.min_llp = 2250,
+		.min_fll = 1320,
+	},
+};
+
+static struct crl_sensor_subdev_config magna_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "magna binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "magna pixel array",
+	}
+};
+
+static struct crl_sensor_limits magna_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1280,
+	.y_addr_max = 720,
+	.min_frame_length_lines = 240,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 320,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_csi_data_fmt magna_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+	},
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+	},
+};
+
+static struct crl_v4l2_ctrl magna_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+struct crl_sensor_configuration magna_crl_configuration = {
+
+	.subdev_items = ARRAY_SIZE(magna_sensor_subdevs),
+	.subdevs = magna_sensor_subdevs,
+
+	.pll_config_items = ARRAY_SIZE(magna_pll_configurations),
+	.pll_configs = magna_pll_configurations,
+
+	.sensor_limits = &magna_sensor_limits,
+
+	.modes_items = ARRAY_SIZE(magna_modes),
+	.modes = magna_modes,
+
+	.streamon_regs_items = 0,
+	.streamon_regs = 0,
+
+	.streamoff_regs_items = 0,
+	.streamoff_regs = 0,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(magna_v4l2_ctrls),
+	.v4l2_ctrl_bank = magna_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(magna_crl_csi_data_fmt),
+	.csi_fmts = magna_crl_csi_data_fmt,
+
+};
+
+#endif  /* __CRLMODULE_MAGNA_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov10635_configuration.h b/drivers/media/i2c/crlmodule/crl_ov10635_configuration.h
new file mode 100644
index 000000000000..0f81f7de90e6
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov10635_configuration.h
@@ -0,0 +1,6368 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation
+ *
+ * Author: Yunliang Ding <yunliang.ding@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV10635_CONFIGURATION_H_
+#define __CRLMODULE_OV10635_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define OV10635_REG_RESET		0x0103
+
+static struct crl_register_write_rep ov10635_1280_800_YUV_HDR[] = {
+	{0x301b, CRL_REG_LEN_08BIT, 0xff},
+	{0x301c, CRL_REG_LEN_08BIT, 0xff},
+	{0x301a, CRL_REG_LEN_08BIT, 0xff},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x6900, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6901, CRL_REG_LEN_08BIT, 0x11},
+	{0x3503, CRL_REG_LEN_08BIT, 0x10},
+	{0x3025, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x20},
+	{0x3004, CRL_REG_LEN_08BIT, 0x21},
+	{0x3005, CRL_REG_LEN_08BIT, 0x20},
+	{0x3006, CRL_REG_LEN_08BIT, 0x91},
+	{0x3600, CRL_REG_LEN_08BIT, 0x74},
+	{0x3601, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3612, CRL_REG_LEN_08BIT, 0x00},
+	{0x3611, CRL_REG_LEN_08BIT, 0x67},
+	{0x3633, CRL_REG_LEN_08BIT, 0xca},
+	{0x3602, CRL_REG_LEN_08BIT, 0x2f},
+	{0x3603, CRL_REG_LEN_08BIT, 0x00},
+	{0x3630, CRL_REG_LEN_08BIT, 0x28},
+	{0x3631, CRL_REG_LEN_08BIT, 0x16},
+	{0x3714, CRL_REG_LEN_08BIT, 0x10},
+	{0x371d, CRL_REG_LEN_08BIT, 0x01},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x3020, CRL_REG_LEN_08BIT, 0x0b},
+	{0x3702, CRL_REG_LEN_08BIT, 0x20},
+	{0x3703, CRL_REG_LEN_08BIT, 0x48},
+	{0x3704, CRL_REG_LEN_08BIT, 0x32},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x370c, CRL_REG_LEN_08BIT, 0xc7},
+	{0x370d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3712, CRL_REG_LEN_08BIT, 0x00},
+	{0x3713, CRL_REG_LEN_08BIT, 0x20},
+	{0x3715, CRL_REG_LEN_08BIT, 0x04},
+	{0x381d, CRL_REG_LEN_08BIT, 0x40},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3822, CRL_REG_LEN_08BIT, 0x50},
+	{0x3824, CRL_REG_LEN_08BIT, 0x50},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3804, CRL_REG_LEN_08BIT, 0x05},
+	{0x3805, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3806, CRL_REG_LEN_08BIT, 0x03},
+	{0x3807, CRL_REG_LEN_08BIT, 0x29},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0x04},
+	{0x3808, CRL_REG_LEN_08BIT, 0x05},
+	{0x3809, CRL_REG_LEN_08BIT, 0x00},
+	{0x380a, CRL_REG_LEN_08BIT, 0x03},
+	{0x380b, CRL_REG_LEN_08BIT, 0x20},
+	{0x380c, CRL_REG_LEN_08BIT, 0x07},
+	{0x380d, CRL_REG_LEN_08BIT, 0x71},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x03},
+	{0x6e43, CRL_REG_LEN_08BIT, 0x48},
+	{0x380e, CRL_REG_LEN_08BIT, 0x03},
+	{0x380f, CRL_REG_LEN_08BIT, 0x48},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x3811, CRL_REG_LEN_08BIT, 0x10},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3828, CRL_REG_LEN_08BIT, 0x03},
+	{0x3829, CRL_REG_LEN_08BIT, 0x10},
+	{0x382a, CRL_REG_LEN_08BIT, 0x10},
+	{0x382b, CRL_REG_LEN_08BIT, 0x10},
+	{0x3621, CRL_REG_LEN_08BIT, 0x64},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x56d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d6, CRL_REG_LEN_08BIT, 0x80},
+	{0x56d7, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x56da, CRL_REG_LEN_08BIT, 0x80},
+	{0x56db, CRL_REG_LEN_08BIT, 0x00},
+	{0x56dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e9, CRL_REG_LEN_08BIT, 0x7f},
+	{0x56ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x56eb, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5100, CRL_REG_LEN_08BIT, 0x00},
+	{0x5101, CRL_REG_LEN_08BIT, 0x80},
+	{0x5102, CRL_REG_LEN_08BIT, 0x00},
+	{0x5103, CRL_REG_LEN_08BIT, 0x80},
+	{0x5104, CRL_REG_LEN_08BIT, 0x00},
+	{0x5105, CRL_REG_LEN_08BIT, 0x80},
+	{0x5106, CRL_REG_LEN_08BIT, 0x00},
+	{0x5107, CRL_REG_LEN_08BIT, 0x80},
+	{0x5108, CRL_REG_LEN_08BIT, 0x00},
+	{0x5109, CRL_REG_LEN_08BIT, 0x00},
+	{0x510a, CRL_REG_LEN_08BIT, 0x00},
+	{0x510b, CRL_REG_LEN_08BIT, 0x00},
+	{0x510c, CRL_REG_LEN_08BIT, 0x00},
+	{0x510d, CRL_REG_LEN_08BIT, 0x00},
+	{0x510e, CRL_REG_LEN_08BIT, 0x00},
+	{0x510f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5110, CRL_REG_LEN_08BIT, 0x00},
+	{0x5111, CRL_REG_LEN_08BIT, 0x80},
+	{0x5112, CRL_REG_LEN_08BIT, 0x00},
+	{0x5113, CRL_REG_LEN_08BIT, 0x80},
+	{0x5114, CRL_REG_LEN_08BIT, 0x00},
+	{0x5115, CRL_REG_LEN_08BIT, 0x80},
+	{0x5116, CRL_REG_LEN_08BIT, 0x00},
+	{0x5117, CRL_REG_LEN_08BIT, 0x80},
+	{0x5118, CRL_REG_LEN_08BIT, 0x00},
+	{0x5119, CRL_REG_LEN_08BIT, 0x00},
+	{0x511a, CRL_REG_LEN_08BIT, 0x00},
+	{0x511b, CRL_REG_LEN_08BIT, 0x00},
+	{0x511c, CRL_REG_LEN_08BIT, 0x00},
+	{0x511d, CRL_REG_LEN_08BIT, 0x00},
+	{0x511e, CRL_REG_LEN_08BIT, 0x00},
+	{0x511f, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x5006, CRL_REG_LEN_08BIT, 0x24},
+	{0x5608, CRL_REG_LEN_08BIT, 0x0d},
+	{0x52d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x528d, CRL_REG_LEN_08BIT, 0x08},
+	{0x5293, CRL_REG_LEN_08BIT, 0x12},
+	{0x52d3, CRL_REG_LEN_08BIT, 0x12},
+	{0x5288, CRL_REG_LEN_08BIT, 0x06},
+	{0x5289, CRL_REG_LEN_08BIT, 0x20},
+	{0x52c8, CRL_REG_LEN_08BIT, 0x06},
+	{0x52c9, CRL_REG_LEN_08BIT, 0x20},
+	{0x52cd, CRL_REG_LEN_08BIT, 0x04},
+	{0x5381, CRL_REG_LEN_08BIT, 0x00},
+	{0x5382, CRL_REG_LEN_08BIT, 0xff},
+	{0x5589, CRL_REG_LEN_08BIT, 0x76},
+	{0x558a, CRL_REG_LEN_08BIT, 0x47},
+	{0x558b, CRL_REG_LEN_08BIT, 0xef},
+	{0x558c, CRL_REG_LEN_08BIT, 0xc9},
+	{0x558d, CRL_REG_LEN_08BIT, 0x49},
+	{0x558e, CRL_REG_LEN_08BIT, 0x30},
+	{0x558f, CRL_REG_LEN_08BIT, 0x67},
+	{0x5590, CRL_REG_LEN_08BIT, 0x3f},
+	{0x5591, CRL_REG_LEN_08BIT, 0xf0},
+	{0x5592, CRL_REG_LEN_08BIT, 0x10},
+	{0x55a2, CRL_REG_LEN_08BIT, 0x6d},
+	{0x55a3, CRL_REG_LEN_08BIT, 0x55},
+	{0x55a4, CRL_REG_LEN_08BIT, 0xc3},
+	{0x55a5, CRL_REG_LEN_08BIT, 0xb5},
+	{0x55a6, CRL_REG_LEN_08BIT, 0x43},
+	{0x55a7, CRL_REG_LEN_08BIT, 0x38},
+	{0x55a8, CRL_REG_LEN_08BIT, 0x5f},
+	{0x55a9, CRL_REG_LEN_08BIT, 0x4b},
+	{0x55aa, CRL_REG_LEN_08BIT, 0xf0},
+	{0x55ab, CRL_REG_LEN_08BIT, 0x10},
+	{0x5581, CRL_REG_LEN_08BIT, 0x52},
+	{0x5300, CRL_REG_LEN_08BIT, 0x01},
+	{0x5301, CRL_REG_LEN_08BIT, 0x00},
+	{0x5302, CRL_REG_LEN_08BIT, 0x00},
+	{0x5303, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5304, CRL_REG_LEN_08BIT, 0x00},
+	{0x5305, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5306, CRL_REG_LEN_08BIT, 0x00},
+	{0x5307, CRL_REG_LEN_08BIT, 0x36},
+	{0x5308, CRL_REG_LEN_08BIT, 0x00},
+	{0x5309, CRL_REG_LEN_08BIT, 0xd9},
+	{0x530a, CRL_REG_LEN_08BIT, 0x00},
+	{0x530b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x530c, CRL_REG_LEN_08BIT, 0x00},
+	{0x530d, CRL_REG_LEN_08BIT, 0x2c},
+	{0x530e, CRL_REG_LEN_08BIT, 0x00},
+	{0x530f, CRL_REG_LEN_08BIT, 0x59},
+	{0x5310, CRL_REG_LEN_08BIT, 0x00},
+	{0x5311, CRL_REG_LEN_08BIT, 0x7b},
+	{0x5312, CRL_REG_LEN_08BIT, 0x00},
+	{0x5313, CRL_REG_LEN_08BIT, 0x22},
+	{0x5314, CRL_REG_LEN_08BIT, 0x00},
+	{0x5315, CRL_REG_LEN_08BIT, 0xd5},
+	{0x5316, CRL_REG_LEN_08BIT, 0x00},
+	{0x5317, CRL_REG_LEN_08BIT, 0x13},
+	{0x5318, CRL_REG_LEN_08BIT, 0x00},
+	{0x5319, CRL_REG_LEN_08BIT, 0x18},
+	{0x531a, CRL_REG_LEN_08BIT, 0x00},
+	{0x531b, CRL_REG_LEN_08BIT, 0x26},
+	{0x531c, CRL_REG_LEN_08BIT, 0x00},
+	{0x531d, CRL_REG_LEN_08BIT, 0xdc},
+	{0x531e, CRL_REG_LEN_08BIT, 0x00},
+	{0x531f, CRL_REG_LEN_08BIT, 0x02},
+	{0x5320, CRL_REG_LEN_08BIT, 0x00},
+	{0x5321, CRL_REG_LEN_08BIT, 0x24},
+	{0x5322, CRL_REG_LEN_08BIT, 0x00},
+	{0x5323, CRL_REG_LEN_08BIT, 0x56},
+	{0x5324, CRL_REG_LEN_08BIT, 0x00},
+	{0x5325, CRL_REG_LEN_08BIT, 0x85},
+	{0x5326, CRL_REG_LEN_08BIT, 0x00},
+	{0x5327, CRL_REG_LEN_08BIT, 0x20},
+	{0x5609, CRL_REG_LEN_08BIT, 0x01},
+	{0x560a, CRL_REG_LEN_08BIT, 0x40},
+	{0x560b, CRL_REG_LEN_08BIT, 0x01},
+	{0x560c, CRL_REG_LEN_08BIT, 0x40},
+	{0x560d, CRL_REG_LEN_08BIT, 0x00},
+	{0x560e, CRL_REG_LEN_08BIT, 0xfa},
+	{0x560f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5610, CRL_REG_LEN_08BIT, 0xfa},
+	{0x5611, CRL_REG_LEN_08BIT, 0x02},
+	{0x5612, CRL_REG_LEN_08BIT, 0x80},
+	{0x5613, CRL_REG_LEN_08BIT, 0x02},
+	{0x5614, CRL_REG_LEN_08BIT, 0x80},
+	{0x5615, CRL_REG_LEN_08BIT, 0x01},
+	{0x5616, CRL_REG_LEN_08BIT, 0x2c},
+	{0x5617, CRL_REG_LEN_08BIT, 0x01},
+	{0x5618, CRL_REG_LEN_08BIT, 0x2c},
+	{0x563b, CRL_REG_LEN_08BIT, 0x01},
+	{0x563c, CRL_REG_LEN_08BIT, 0x01},
+	{0x563d, CRL_REG_LEN_08BIT, 0x01},
+	{0x563e, CRL_REG_LEN_08BIT, 0x01},
+	{0x563f, CRL_REG_LEN_08BIT, 0x03},
+	{0x5640, CRL_REG_LEN_08BIT, 0x03},
+	{0x5641, CRL_REG_LEN_08BIT, 0x03},
+	{0x5642, CRL_REG_LEN_08BIT, 0x05},
+	{0x5643, CRL_REG_LEN_08BIT, 0x09},
+	{0x5644, CRL_REG_LEN_08BIT, 0x05},
+	{0x5645, CRL_REG_LEN_08BIT, 0x05},
+	{0x5646, CRL_REG_LEN_08BIT, 0x05},
+	{0x5647, CRL_REG_LEN_08BIT, 0x05},
+	{0x5651, CRL_REG_LEN_08BIT, 0x00},
+	{0x5652, CRL_REG_LEN_08BIT, 0x80},
+	{0x521a, CRL_REG_LEN_08BIT, 0x01},
+	{0x521b, CRL_REG_LEN_08BIT, 0x03},
+	{0x521c, CRL_REG_LEN_08BIT, 0x06},
+	{0x521d, CRL_REG_LEN_08BIT, 0x0a},
+	{0x521e, CRL_REG_LEN_08BIT, 0x0e},
+	{0x521f, CRL_REG_LEN_08BIT, 0x12},
+	{0x5220, CRL_REG_LEN_08BIT, 0x16},
+	{0x5223, CRL_REG_LEN_08BIT, 0x02},
+	{0x5225, CRL_REG_LEN_08BIT, 0x04},
+	{0x5227, CRL_REG_LEN_08BIT, 0x08},
+	{0x5229, CRL_REG_LEN_08BIT, 0x0c},
+	{0x522b, CRL_REG_LEN_08BIT, 0x12},
+	{0x522d, CRL_REG_LEN_08BIT, 0x18},
+	{0x522f, CRL_REG_LEN_08BIT, 0x1e},
+	{0x5241, CRL_REG_LEN_08BIT, 0x04},
+	{0x5242, CRL_REG_LEN_08BIT, 0x01},
+	{0x5243, CRL_REG_LEN_08BIT, 0x03},
+	{0x5244, CRL_REG_LEN_08BIT, 0x06},
+	{0x5245, CRL_REG_LEN_08BIT, 0x0a},
+	{0x5246, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5247, CRL_REG_LEN_08BIT, 0x12},
+	{0x5248, CRL_REG_LEN_08BIT, 0x16},
+	{0x524a, CRL_REG_LEN_08BIT, 0x03},
+	{0x524c, CRL_REG_LEN_08BIT, 0x04},
+	{0x524e, CRL_REG_LEN_08BIT, 0x08},
+	{0x5250, CRL_REG_LEN_08BIT, 0x0c},
+	{0x5252, CRL_REG_LEN_08BIT, 0x12},
+	{0x5254, CRL_REG_LEN_08BIT, 0x18},
+	{0x5256, CRL_REG_LEN_08BIT, 0x1e},
+	{0x4606, CRL_REG_LEN_08BIT, 0x07},
+	{0x4607, CRL_REG_LEN_08BIT, 0x71},
+	{0x460a, CRL_REG_LEN_08BIT, 0x02},
+	{0x460b, CRL_REG_LEN_08BIT, 0x70},
+	{0x460c, CRL_REG_LEN_08BIT, 0x00},
+	{0x4620, CRL_REG_LEN_08BIT, 0x0e},
+	{0x4700, CRL_REG_LEN_08BIT, 0x04},
+	{0x4701, CRL_REG_LEN_08BIT, 0x00},
+	{0x4702, CRL_REG_LEN_08BIT, 0x01},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4005, CRL_REG_LEN_08BIT, 0x18},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4052, CRL_REG_LEN_08BIT, 0x02},
+	{0x4057, CRL_REG_LEN_08BIT, 0x9c},
+	{0x405a, CRL_REG_LEN_08BIT, 0x00},
+	{0x3832, CRL_REG_LEN_08BIT, 0x00},
+	{0x3833, CRL_REG_LEN_08BIT, 0x02},
+	{0x3834, CRL_REG_LEN_08BIT, 0x03},
+	{0x3835, CRL_REG_LEN_08BIT, 0x48},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	{0x4202, CRL_REG_LEN_08BIT, 0x02},
+	{0x3023, CRL_REG_LEN_08BIT, 0x10},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x6f10, CRL_REG_LEN_08BIT, 0x07},
+	{0x6f11, CRL_REG_LEN_08BIT, 0x82},
+	{0x6f12, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f13, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f14, CRL_REG_LEN_08BIT, 0x1f},
+	{0x6f15, CRL_REG_LEN_08BIT, 0xdd},
+	{0x6f16, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f17, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f18, CRL_REG_LEN_08BIT, 0x36},
+	{0x6f19, CRL_REG_LEN_08BIT, 0x66},
+	{0x6f1a, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1b, CRL_REG_LEN_08BIT, 0x08},
+	{0x6f1c, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6f1d, CRL_REG_LEN_08BIT, 0xe7},
+	{0x6f1e, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1f, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd000, CRL_REG_LEN_08BIT, 0x19},
+	{0xd001, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd002, CRL_REG_LEN_08BIT, 0x00},
+	{0xd003, CRL_REG_LEN_08BIT, 0x01},
+	{0xd004, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd005, CRL_REG_LEN_08BIT, 0xad},
+	{0xd006, CRL_REG_LEN_08BIT, 0x10},
+	{0xd007, CRL_REG_LEN_08BIT, 0x40},
+	{0xd008, CRL_REG_LEN_08BIT, 0x44},
+	{0xd009, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd00b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd00d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd010, CRL_REG_LEN_08BIT, 0x19},
+	{0xd011, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd012, CRL_REG_LEN_08BIT, 0x00},
+	{0xd013, CRL_REG_LEN_08BIT, 0x01},
+	{0xd014, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd015, CRL_REG_LEN_08BIT, 0xad},
+	{0xd016, CRL_REG_LEN_08BIT, 0x13},
+	{0xd017, CRL_REG_LEN_08BIT, 0xd0},
+	{0xd018, CRL_REG_LEN_08BIT, 0x44},
+	{0xd019, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd01b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd01d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd020, CRL_REG_LEN_08BIT, 0x19},
+	{0xd021, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd022, CRL_REG_LEN_08BIT, 0x00},
+	{0xd023, CRL_REG_LEN_08BIT, 0x01},
+	{0xd024, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd025, CRL_REG_LEN_08BIT, 0xad},
+	{0xd026, CRL_REG_LEN_08BIT, 0x14},
+	{0xd027, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd028, CRL_REG_LEN_08BIT, 0x44},
+	{0xd029, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd02b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd02d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd030, CRL_REG_LEN_08BIT, 0x19},
+	{0xd031, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd032, CRL_REG_LEN_08BIT, 0x00},
+	{0xd033, CRL_REG_LEN_08BIT, 0x01},
+	{0xd034, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd035, CRL_REG_LEN_08BIT, 0xad},
+	{0xd036, CRL_REG_LEN_08BIT, 0x14},
+	{0xd037, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd038, CRL_REG_LEN_08BIT, 0x44},
+	{0xd039, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd03b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd03d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd040, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd041, CRL_REG_LEN_08BIT, 0x21},
+	{0xd042, CRL_REG_LEN_08BIT, 0xff},
+	{0xd043, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd044, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd045, CRL_REG_LEN_08BIT, 0x01},
+	{0xd046, CRL_REG_LEN_08BIT, 0x48},
+	{0xd047, CRL_REG_LEN_08BIT, 0x00},
+	{0xd048, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd049, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04a, CRL_REG_LEN_08BIT, 0x50},
+	{0xd04b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd04c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd04d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd04f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd050, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd051, CRL_REG_LEN_08BIT, 0x01},
+	{0xd052, CRL_REG_LEN_08BIT, 0x70},
+	{0xd053, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd054, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd055, CRL_REG_LEN_08BIT, 0x01},
+	{0xd056, CRL_REG_LEN_08BIT, 0x80},
+	{0xd057, CRL_REG_LEN_08BIT, 0x10},
+	{0xd058, CRL_REG_LEN_08BIT, 0x19},
+	{0xd059, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd05a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd05b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd05c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd05d, CRL_REG_LEN_08BIT, 0xce},
+	{0xd05e, CRL_REG_LEN_08BIT, 0x02},
+	{0xd05f, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd060, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd061, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd062, CRL_REG_LEN_08BIT, 0x00},
+	{0xd063, CRL_REG_LEN_08BIT, 0x00},
+	{0xd064, CRL_REG_LEN_08BIT, 0x84},
+	{0xd065, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd066, CRL_REG_LEN_08BIT, 0x00},
+	{0xd067, CRL_REG_LEN_08BIT, 0x00},
+	{0xd068, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd069, CRL_REG_LEN_08BIT, 0x03},
+	{0xd06a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd06b, CRL_REG_LEN_08BIT, 0x76},
+	{0xd06c, CRL_REG_LEN_08BIT, 0x1a},
+	{0xd06d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd070, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd071, CRL_REG_LEN_08BIT, 0x10},
+	{0xd072, CRL_REG_LEN_08BIT, 0x03},
+	{0xd073, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd074, CRL_REG_LEN_08BIT, 0x18},
+	{0xd075, CRL_REG_LEN_08BIT, 0x60},
+	{0xd076, CRL_REG_LEN_08BIT, 0x00},
+	{0xd077, CRL_REG_LEN_08BIT, 0x01},
+	{0xd078, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd079, CRL_REG_LEN_08BIT, 0x63},
+	{0xd07a, CRL_REG_LEN_08BIT, 0x07},
+	{0xd07b, CRL_REG_LEN_08BIT, 0x80},
+	{0xd07c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd07d, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd07e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd07f, CRL_REG_LEN_08BIT, 0x04},
+	{0xd080, CRL_REG_LEN_08BIT, 0x18},
+	{0xd081, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd082, CRL_REG_LEN_08BIT, 0x00},
+	{0xd083, CRL_REG_LEN_08BIT, 0x00},
+	{0xd084, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd085, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd086, CRL_REG_LEN_08BIT, 0x00},
+	{0xd087, CRL_REG_LEN_08BIT, 0x00},
+	{0xd088, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd089, CRL_REG_LEN_08BIT, 0x63},
+	{0xd08a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd08d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd08e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd08f, CRL_REG_LEN_08BIT, 0x14},
+	{0xd090, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd091, CRL_REG_LEN_08BIT, 0x01},
+	{0xd092, CRL_REG_LEN_08BIT, 0x30},
+	{0xd093, CRL_REG_LEN_08BIT, 0x18},
+	{0xd094, CRL_REG_LEN_08BIT, 0x07},
+	{0xd095, CRL_REG_LEN_08BIT, 0xff},
+	{0xd096, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd097, CRL_REG_LEN_08BIT, 0xfd},
+	{0xd098, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd099, CRL_REG_LEN_08BIT, 0x80},
+	{0xd09a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd09c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd09d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd09e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd0a0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd0a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0a3, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0a5, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd0a6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd0a8, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0a9, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0aa, CRL_REG_LEN_08BIT, 0x58},
+	{0xd0ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ac, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0ad, CRL_REG_LEN_08BIT, 0x8e},
+	{0xd0ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0b1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0b2, CRL_REG_LEN_08BIT, 0x30},
+	{0xd0b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b4, CRL_REG_LEN_08BIT, 0x98},
+	{0xd0b5, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd0b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd0ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0bb, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd0bc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0bd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd0be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0bf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd0c1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0c4, CRL_REG_LEN_08BIT, 0x95},
+	{0xd0c5, CRL_REG_LEN_08BIT, 0x8b},
+	{0xd0c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c8, CRL_REG_LEN_08BIT, 0x94},
+	{0xd0c9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd0ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0cb, CRL_REG_LEN_08BIT, 0x70},
+	{0xd0cc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0cd, CRL_REG_LEN_08BIT, 0x65},
+	{0xd0ce, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd0d1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d3, CRL_REG_LEN_08BIT, 0x62},
+	{0xd0d4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd0d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0da, CRL_REG_LEN_08BIT, 0x80},
+	{0xd0db, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0dd, CRL_REG_LEN_08BIT, 0x83},
+	{0xd0de, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0df, CRL_REG_LEN_08BIT, 0x29},
+	{0xd0e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e1, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd0e2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0e3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd0e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0e5, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e9, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd0ea, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0eb, CRL_REG_LEN_08BIT, 0x09},
+	{0xd0ec, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0ed, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd0ee, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0ef, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd0f0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f1, CRL_REG_LEN_08BIT, 0x07},
+	{0xd0f2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd0f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0f5, CRL_REG_LEN_08BIT, 0x66},
+	{0xd0f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f9, CRL_REG_LEN_08BIT, 0x05},
+	{0xd0fa, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0fc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ff, CRL_REG_LEN_08BIT, 0x01},
+	{0xd100, CRL_REG_LEN_08BIT, 0x98},
+	{0xd101, CRL_REG_LEN_08BIT, 0x90},
+	{0xd102, CRL_REG_LEN_08BIT, 0x00},
+	{0xd103, CRL_REG_LEN_08BIT, 0x00},
+	{0xd104, CRL_REG_LEN_08BIT, 0x84},
+	{0xd105, CRL_REG_LEN_08BIT, 0xae},
+	{0xd106, CRL_REG_LEN_08BIT, 0x00},
+	{0xd107, CRL_REG_LEN_08BIT, 0x00},
+	{0xd108, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd109, CRL_REG_LEN_08BIT, 0x63},
+	{0xd10a, CRL_REG_LEN_08BIT, 0x06},
+	{0xd10b, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd10c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd10d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd10e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd10f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd110, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd111, CRL_REG_LEN_08BIT, 0x03},
+	{0xd112, CRL_REG_LEN_08BIT, 0x30},
+	{0xd113, CRL_REG_LEN_08BIT, 0x00},
+	{0xd114, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd115, CRL_REG_LEN_08BIT, 0x65},
+	{0xd116, CRL_REG_LEN_08BIT, 0x00},
+	{0xd117, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd118, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd119, CRL_REG_LEN_08BIT, 0x84},
+	{0xd11a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd11b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11c, CRL_REG_LEN_08BIT, 0x10},
+	{0xd11d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11f, CRL_REG_LEN_08BIT, 0x07},
+	{0xd120, CRL_REG_LEN_08BIT, 0x18},
+	{0xd121, CRL_REG_LEN_08BIT, 0x80},
+	{0xd122, CRL_REG_LEN_08BIT, 0x80},
+	{0xd123, CRL_REG_LEN_08BIT, 0x06},
+	{0xd124, CRL_REG_LEN_08BIT, 0x94},
+	{0xd125, CRL_REG_LEN_08BIT, 0x65},
+	{0xd126, CRL_REG_LEN_08BIT, 0x00},
+	{0xd127, CRL_REG_LEN_08BIT, 0x70},
+	{0xd128, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd129, CRL_REG_LEN_08BIT, 0x43},
+	{0xd12a, CRL_REG_LEN_08BIT, 0x60},
+	{0xd12b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12c, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd12d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12f, CRL_REG_LEN_08BIT, 0x3e},
+	{0xd130, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd131, CRL_REG_LEN_08BIT, 0x64},
+	{0xd132, CRL_REG_LEN_08BIT, 0x38},
+	{0xd133, CRL_REG_LEN_08BIT, 0x24},
+	{0xd134, CRL_REG_LEN_08BIT, 0x18},
+	{0xd135, CRL_REG_LEN_08BIT, 0x80},
+	{0xd136, CRL_REG_LEN_08BIT, 0x80},
+	{0xd137, CRL_REG_LEN_08BIT, 0x06},
+	{0xd138, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd139, CRL_REG_LEN_08BIT, 0x64},
+	{0xd13a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd13b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd13c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd13d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd13e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd13f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd140, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd141, CRL_REG_LEN_08BIT, 0x63},
+	{0xd142, CRL_REG_LEN_08BIT, 0x00},
+	{0xd143, CRL_REG_LEN_08BIT, 0x40},
+	{0xd144, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd145, CRL_REG_LEN_08BIT, 0x23},
+	{0xd146, CRL_REG_LEN_08BIT, 0x00},
+	{0xd147, CRL_REG_LEN_08BIT, 0x00},
+	{0xd148, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd149, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14b, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd14c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd14d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd14e, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd14f, CRL_REG_LEN_08BIT, 0x44},
+	{0xd150, CRL_REG_LEN_08BIT, 0x19},
+	{0xd151, CRL_REG_LEN_08BIT, 0x00},
+	{0xd152, CRL_REG_LEN_08BIT, 0x80},
+	{0xd153, CRL_REG_LEN_08BIT, 0x06},
+	{0xd154, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd155, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd156, CRL_REG_LEN_08BIT, 0x3d},
+	{0xd157, CRL_REG_LEN_08BIT, 0x05},
+	{0xd158, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd159, CRL_REG_LEN_08BIT, 0x67},
+	{0xd15a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd15d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd15e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd160, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd161, CRL_REG_LEN_08BIT, 0x63},
+	{0xd162, CRL_REG_LEN_08BIT, 0x00},
+	{0xd163, CRL_REG_LEN_08BIT, 0x98},
+	{0xd164, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd165, CRL_REG_LEN_08BIT, 0x03},
+	{0xd166, CRL_REG_LEN_08BIT, 0x00},
+	{0xd167, CRL_REG_LEN_08BIT, 0x00},
+	{0xd168, CRL_REG_LEN_08BIT, 0x10},
+	{0xd169, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd16c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd16d, CRL_REG_LEN_08BIT, 0x48},
+	{0xd16e, CRL_REG_LEN_08BIT, 0x67},
+	{0xd16f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd170, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd171, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd172, CRL_REG_LEN_08BIT, 0x00},
+	{0xd173, CRL_REG_LEN_08BIT, 0x19},
+	{0xd174, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd175, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd176, CRL_REG_LEN_08BIT, 0x00},
+	{0xd177, CRL_REG_LEN_08BIT, 0x00},
+	{0xd178, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd179, CRL_REG_LEN_08BIT, 0x68},
+	{0xd17a, CRL_REG_LEN_08BIT, 0x67},
+	{0xd17b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd17c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd17d, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd17e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd17f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd180, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd181, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd182, CRL_REG_LEN_08BIT, 0x00},
+	{0xd183, CRL_REG_LEN_08BIT, 0x00},
+	{0xd184, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd185, CRL_REG_LEN_08BIT, 0x85},
+	{0xd186, CRL_REG_LEN_08BIT, 0x00},
+	{0xd187, CRL_REG_LEN_08BIT, 0x98},
+	{0xd188, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd189, CRL_REG_LEN_08BIT, 0x63},
+	{0xd18a, CRL_REG_LEN_08BIT, 0x30},
+	{0xd18b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd18c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd18d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd18e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd18f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd190, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd191, CRL_REG_LEN_08BIT, 0x83},
+	{0xd192, CRL_REG_LEN_08BIT, 0xff},
+	{0xd193, CRL_REG_LEN_08BIT, 0xff},
+	{0xd194, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd195, CRL_REG_LEN_08BIT, 0x64},
+	{0xd196, CRL_REG_LEN_08BIT, 0x00},
+	{0xd197, CRL_REG_LEN_08BIT, 0x48},
+	{0xd198, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd199, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd19a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd19b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd19c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd19d, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd19e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd19f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1a1, CRL_REG_LEN_08BIT, 0x60},
+	{0xd1a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1a5, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1a6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd1a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1a9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd1aa, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1ab, CRL_REG_LEN_08BIT, 0x22},
+	{0xd1ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ad, CRL_REG_LEN_08BIT, 0x80},
+	{0xd1ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1af, CRL_REG_LEN_08BIT, 0x70},
+	{0xd1b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1b1, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd1b2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1b3, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1b4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1b5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1b6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1b9, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1bd, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd1be, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1bf, CRL_REG_LEN_08BIT, 0x42},
+	{0xd1c0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1c1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd1c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1c5, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd1c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd1c9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd1ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cb, CRL_REG_LEN_08BIT, 0x08},
+	{0xd1cc, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1cd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1d1, CRL_REG_LEN_08BIT, 0x67},
+	{0xd1d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd1d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1d6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1d9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1da, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1dc, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1dd, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1df, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1e0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd1e1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e3, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd1e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1e5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd1e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd1e8, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1e9, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1ea, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1eb, CRL_REG_LEN_08BIT, 0xf6},
+	{0xd1ec, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f1, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1f2, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1f3, CRL_REG_LEN_08BIT, 0x86},
+	{0xd1f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1f5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f9, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd1fa, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd1fb, CRL_REG_LEN_08BIT, 0x45},
+	{0xd1fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1fd, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd1fe, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1ff, CRL_REG_LEN_08BIT, 0x87},
+	{0xd200, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd201, CRL_REG_LEN_08BIT, 0x05},
+	{0xd202, CRL_REG_LEN_08BIT, 0x18},
+	{0xd203, CRL_REG_LEN_08BIT, 0x00},
+	{0xd204, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd205, CRL_REG_LEN_08BIT, 0x66},
+	{0xd206, CRL_REG_LEN_08BIT, 0x00},
+	{0xd207, CRL_REG_LEN_08BIT, 0x00},
+	{0xd208, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd209, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd20a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd20b, CRL_REG_LEN_08BIT, 0x46},
+	{0xd20c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd20d, CRL_REG_LEN_08BIT, 0x07},
+	{0xd20e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd20f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd210, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd211, CRL_REG_LEN_08BIT, 0x84},
+	{0xd212, CRL_REG_LEN_08BIT, 0x55},
+	{0xd213, CRL_REG_LEN_08BIT, 0x88},
+	{0xd214, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd215, CRL_REG_LEN_08BIT, 0x65},
+	{0xd216, CRL_REG_LEN_08BIT, 0x00},
+	{0xd217, CRL_REG_LEN_08BIT, 0x00},
+	{0xd218, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd219, CRL_REG_LEN_08BIT, 0x04},
+	{0xd21a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd21b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd21c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd21d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21f, CRL_REG_LEN_08BIT, 0xce},
+	{0xd220, CRL_REG_LEN_08BIT, 0x19},
+	{0xd221, CRL_REG_LEN_08BIT, 0x00},
+	{0xd222, CRL_REG_LEN_08BIT, 0x80},
+	{0xd223, CRL_REG_LEN_08BIT, 0x06},
+	{0xd224, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd225, CRL_REG_LEN_08BIT, 0x63},
+	{0xd226, CRL_REG_LEN_08BIT, 0x00},
+	{0xd227, CRL_REG_LEN_08BIT, 0x00},
+	{0xd228, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd229, CRL_REG_LEN_08BIT, 0x63},
+	{0xd22a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22b, CRL_REG_LEN_08BIT, 0x40},
+	{0xd22c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd22d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd22e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd230, CRL_REG_LEN_08BIT, 0x13},
+	{0xd231, CRL_REG_LEN_08BIT, 0xff},
+	{0xd232, CRL_REG_LEN_08BIT, 0xff},
+	{0xd233, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd234, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd235, CRL_REG_LEN_08BIT, 0x00},
+	{0xd236, CRL_REG_LEN_08BIT, 0x00},
+	{0xd237, CRL_REG_LEN_08BIT, 0x40},
+	{0xd238, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd239, CRL_REG_LEN_08BIT, 0x64},
+	{0xd23a, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23b, CRL_REG_LEN_08BIT, 0x86},
+	{0xd23c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd23d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd23e, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23f, CRL_REG_LEN_08BIT, 0x87},
+	{0xd240, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd241, CRL_REG_LEN_08BIT, 0x03},
+	{0xd242, CRL_REG_LEN_08BIT, 0x40},
+	{0xd243, CRL_REG_LEN_08BIT, 0x00},
+	{0xd244, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd245, CRL_REG_LEN_08BIT, 0x64},
+	{0xd246, CRL_REG_LEN_08BIT, 0x55},
+	{0xd247, CRL_REG_LEN_08BIT, 0x88},
+	{0xd248, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd249, CRL_REG_LEN_08BIT, 0x05},
+	{0xd24a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd24c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd24d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd24e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd250, CRL_REG_LEN_08BIT, 0x03},
+	{0xd251, CRL_REG_LEN_08BIT, 0xff},
+	{0xd252, CRL_REG_LEN_08BIT, 0xff},
+	{0xd253, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd254, CRL_REG_LEN_08BIT, 0x19},
+	{0xd255, CRL_REG_LEN_08BIT, 0x00},
+	{0xd256, CRL_REG_LEN_08BIT, 0x80},
+	{0xd257, CRL_REG_LEN_08BIT, 0x06},
+	{0xd258, CRL_REG_LEN_08BIT, 0x94},
+	{0xd259, CRL_REG_LEN_08BIT, 0x84},
+	{0xd25a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd25b, CRL_REG_LEN_08BIT, 0x72},
+	{0xd25c, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd25d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd25e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd25f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd260, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd261, CRL_REG_LEN_08BIT, 0x00},
+	{0xd262, CRL_REG_LEN_08BIT, 0x00},
+	{0xd263, CRL_REG_LEN_08BIT, 0x3f},
+	{0xd264, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd265, CRL_REG_LEN_08BIT, 0x60},
+	{0xd266, CRL_REG_LEN_08BIT, 0x01},
+	{0xd267, CRL_REG_LEN_08BIT, 0x00},
+	{0xd268, CRL_REG_LEN_08BIT, 0x85},
+	{0xd269, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd26a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26c, CRL_REG_LEN_08BIT, 0x98},
+	{0xd26d, CRL_REG_LEN_08BIT, 0x70},
+	{0xd26e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd270, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd271, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd272, CRL_REG_LEN_08BIT, 0x00},
+	{0xd273, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd274, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd275, CRL_REG_LEN_08BIT, 0x63},
+	{0xd276, CRL_REG_LEN_08BIT, 0x20},
+	{0xd277, CRL_REG_LEN_08BIT, 0x00},
+	{0xd278, CRL_REG_LEN_08BIT, 0x10},
+	{0xd279, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27b, CRL_REG_LEN_08BIT, 0x07},
+	{0xd27c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd27d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd280, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd281, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd282, CRL_REG_LEN_08BIT, 0x00},
+	{0xd283, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd284, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd285, CRL_REG_LEN_08BIT, 0x63},
+	{0xd286, CRL_REG_LEN_08BIT, 0x28},
+	{0xd287, CRL_REG_LEN_08BIT, 0x02},
+	{0xd288, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd289, CRL_REG_LEN_08BIT, 0x84},
+	{0xd28a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd28b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd28c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd28d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd28e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd28f, CRL_REG_LEN_08BIT, 0x66},
+	{0xd290, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd291, CRL_REG_LEN_08BIT, 0x63},
+	{0xd292, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd293, CRL_REG_LEN_08BIT, 0x06},
+	{0xd294, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd295, CRL_REG_LEN_08BIT, 0x6a},
+	{0xd296, CRL_REG_LEN_08BIT, 0x00},
+	{0xd297, CRL_REG_LEN_08BIT, 0x77},
+	{0xd298, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd299, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29a, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd29b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd29c, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd29d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd29f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a3, CRL_REG_LEN_08BIT, 0x3c},
+	{0xd2a4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd2a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd2a9, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd2aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ab, CRL_REG_LEN_08BIT, 0x78},
+	{0xd2ac, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd2ad, CRL_REG_LEN_08BIT, 0x63},
+	{0xd2ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2af, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd2b1, CRL_REG_LEN_08BIT, 0x64},
+	{0xd2b2, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd2b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd2b4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b8, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2b9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2bb, CRL_REG_LEN_08BIT, 0x34},
+	{0xd2bc, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2bd, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2bf, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c0, CRL_REG_LEN_08BIT, 0xb9},
+	{0xd2c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c3, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2c4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd2c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2c9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd2ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cc, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2cd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cf, CRL_REG_LEN_08BIT, 0x2c},
+	{0xd2d0, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2d1, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2d2, CRL_REG_LEN_08BIT, 0x58},
+	{0xd2d3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2d4, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2d5, CRL_REG_LEN_08BIT, 0x81},
+	{0xd2d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2d7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2d8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2d9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd2da, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2dc, CRL_REG_LEN_08BIT, 0x10},
+	{0xd2dd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2df, CRL_REG_LEN_08BIT, 0x05},
+	{0xd2e0, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2e1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2e4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd2e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd2e6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e8, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2ea, CRL_REG_LEN_08BIT, 0x28},
+	{0xd2eb, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2ec, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2ed, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ef, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2f0, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2f1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd2f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f4, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f7, CRL_REG_LEN_08BIT, 0x20},
+	{0xd2f8, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd2f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fc, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2fd, CRL_REG_LEN_08BIT, 0x61},
+	{0xd2fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ff, CRL_REG_LEN_08BIT, 0x18},
+	{0xd300, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd301, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd302, CRL_REG_LEN_08BIT, 0x01},
+	{0xd303, CRL_REG_LEN_08BIT, 0x00},
+	{0xd304, CRL_REG_LEN_08BIT, 0x10},
+	{0xd305, CRL_REG_LEN_08BIT, 0x00},
+	{0xd306, CRL_REG_LEN_08BIT, 0x00},
+	{0xd307, CRL_REG_LEN_08BIT, 0x03},
+	{0xd308, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd309, CRL_REG_LEN_08BIT, 0x80},
+	{0xd30a, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd30c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd30f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd310, CRL_REG_LEN_08BIT, 0x18},
+	{0xd311, CRL_REG_LEN_08BIT, 0x60},
+	{0xd312, CRL_REG_LEN_08BIT, 0x80},
+	{0xd313, CRL_REG_LEN_08BIT, 0x06},
+	{0xd314, CRL_REG_LEN_08BIT, 0x85},
+	{0xd315, CRL_REG_LEN_08BIT, 0x01},
+	{0xd316, CRL_REG_LEN_08BIT, 0x00},
+	{0xd317, CRL_REG_LEN_08BIT, 0x14},
+	{0xd318, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd319, CRL_REG_LEN_08BIT, 0x83},
+	{0xd31a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd31b, CRL_REG_LEN_08BIT, 0x29},
+	{0xd31c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd31d, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd31e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd31f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd320, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd321, CRL_REG_LEN_08BIT, 0x84},
+	{0xd322, CRL_REG_LEN_08BIT, 0x00},
+	{0xd323, CRL_REG_LEN_08BIT, 0x00},
+	{0xd324, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd325, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd326, CRL_REG_LEN_08BIT, 0x38},
+	{0xd327, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd328, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd329, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd32a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32b, CRL_REG_LEN_08BIT, 0x09},
+	{0xd32c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd32d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd32e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd330, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd331, CRL_REG_LEN_08BIT, 0x06},
+	{0xd332, CRL_REG_LEN_08BIT, 0x18},
+	{0xd333, CRL_REG_LEN_08BIT, 0x00},
+	{0xd334, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd335, CRL_REG_LEN_08BIT, 0x65},
+	{0xd336, CRL_REG_LEN_08BIT, 0x00},
+	{0xd337, CRL_REG_LEN_08BIT, 0x00},
+	{0xd338, CRL_REG_LEN_08BIT, 0x84},
+	{0xd339, CRL_REG_LEN_08BIT, 0x81},
+	{0xd33a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd33b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd33c, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33d, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd33f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd340, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd341, CRL_REG_LEN_08BIT, 0x07},
+	{0xd342, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd343, CRL_REG_LEN_08BIT, 0x00},
+	{0xd344, CRL_REG_LEN_08BIT, 0x03},
+	{0xd345, CRL_REG_LEN_08BIT, 0xff},
+	{0xd346, CRL_REG_LEN_08BIT, 0xff},
+	{0xd347, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd348, CRL_REG_LEN_08BIT, 0x18},
+	{0xd349, CRL_REG_LEN_08BIT, 0x60},
+	{0xd34a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd34b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd34c, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd34d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34f, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd350, CRL_REG_LEN_08BIT, 0x18},
+	{0xd351, CRL_REG_LEN_08BIT, 0x60},
+	{0xd352, CRL_REG_LEN_08BIT, 0x80},
+	{0xd353, CRL_REG_LEN_08BIT, 0x06},
+	{0xd354, CRL_REG_LEN_08BIT, 0x00},
+	{0xd355, CRL_REG_LEN_08BIT, 0x00},
+	{0xd356, CRL_REG_LEN_08BIT, 0x00},
+	{0xd357, CRL_REG_LEN_08BIT, 0x11},
+	{0xd358, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd359, CRL_REG_LEN_08BIT, 0x83},
+	{0xd35a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd35b, CRL_REG_LEN_08BIT, 0x43},
+	{0xd35c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd35d, CRL_REG_LEN_08BIT, 0x6c},
+	{0xd35e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd35f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd360, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd361, CRL_REG_LEN_08BIT, 0x84},
+	{0xd362, CRL_REG_LEN_08BIT, 0x28},
+	{0xd363, CRL_REG_LEN_08BIT, 0x02},
+	{0xd364, CRL_REG_LEN_08BIT, 0x07},
+	{0xd365, CRL_REG_LEN_08BIT, 0xff},
+	{0xd366, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd367, CRL_REG_LEN_08BIT, 0x30},
+	{0xd368, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd369, CRL_REG_LEN_08BIT, 0x63},
+	{0xd36a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36b, CRL_REG_LEN_08BIT, 0x08},
+	{0xd36c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd36d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36f, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd370, CRL_REG_LEN_08BIT, 0x85},
+	{0xd371, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd372, CRL_REG_LEN_08BIT, 0x00},
+	{0xd373, CRL_REG_LEN_08BIT, 0x00},
+	{0xd374, CRL_REG_LEN_08BIT, 0x03},
+	{0xd375, CRL_REG_LEN_08BIT, 0xff},
+	{0xd376, CRL_REG_LEN_08BIT, 0xff},
+	{0xd377, CRL_REG_LEN_08BIT, 0xe7},
+	{0xd378, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd379, CRL_REG_LEN_08BIT, 0x01},
+	{0xd37a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd37b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd37c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd37d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd37e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd380, CRL_REG_LEN_08BIT, 0x03},
+	{0xd381, CRL_REG_LEN_08BIT, 0xff},
+	{0xd382, CRL_REG_LEN_08BIT, 0xff},
+	{0xd383, CRL_REG_LEN_08BIT, 0xdb},
+	{0xd384, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd385, CRL_REG_LEN_08BIT, 0x01},
+	{0xd386, CRL_REG_LEN_08BIT, 0x18},
+	{0xd387, CRL_REG_LEN_08BIT, 0x14},
+	{0xd388, CRL_REG_LEN_08BIT, 0x03},
+	{0xd389, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38a, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38b, CRL_REG_LEN_08BIT, 0xce},
+	{0xd38c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd38d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd38e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd390, CRL_REG_LEN_08BIT, 0x03},
+	{0xd391, CRL_REG_LEN_08BIT, 0xff},
+	{0xd392, CRL_REG_LEN_08BIT, 0xff},
+	{0xd393, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd394, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd395, CRL_REG_LEN_08BIT, 0x63},
+	{0xd396, CRL_REG_LEN_08BIT, 0x00},
+	{0xd397, CRL_REG_LEN_08BIT, 0xff},
+	{0xd398, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd399, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd39a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd39b, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd39c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd39d, CRL_REG_LEN_08BIT, 0x84},
+	{0xd39e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd39f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a1, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd3a2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd3a3, CRL_REG_LEN_08BIT, 0x0e},
+	{0xd3a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a5, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd3a6, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd3a7, CRL_REG_LEN_08BIT, 0x42},
+	{0xd3a8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3a9, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3aa, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ac, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3ad, CRL_REG_LEN_08BIT, 0x66},
+	{0xd3ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3b1, CRL_REG_LEN_08BIT, 0x05},
+	{0xd3b2, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b8, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b9, CRL_REG_LEN_08BIT, 0x41},
+	{0xd3ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bb, CRL_REG_LEN_08BIT, 0x04},
+	{0xd3bc, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3bd, CRL_REG_LEN_08BIT, 0x81},
+	{0xd3be, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bf, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3c0, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3c1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd3c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c3, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3c4, CRL_REG_LEN_08BIT, 0x86},
+	{0xd3c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c7, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3c8, CRL_REG_LEN_08BIT, 0x44},
+	{0xd3c9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ca, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3cd, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cf, CRL_REG_LEN_08BIT, 0x1c},
+	{0xd3d0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3d1, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3d2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3d3, CRL_REG_LEN_08BIT, 0xfc},
+	{0xd3d4, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd3d5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3db, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3dd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3de, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3df, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3e0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3e1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e3, CRL_REG_LEN_08BIT, 0x68},
+	{0xd3e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd3e5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd3e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e8, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3e9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3eb, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3ec, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f0, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f2, CRL_REG_LEN_08BIT, 0xd9},
+	{0xd3f3, CRL_REG_LEN_08BIT, 0x98},
+	{0xd3f4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3f9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3fa, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3fb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3fd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3fe, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd3ff, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd400, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd401, CRL_REG_LEN_08BIT, 0x63},
+	{0xd402, CRL_REG_LEN_08BIT, 0x00},
+	{0xd403, CRL_REG_LEN_08BIT, 0x00},
+	{0xd404, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd405, CRL_REG_LEN_08BIT, 0x23},
+	{0xd406, CRL_REG_LEN_08BIT, 0x00},
+	{0xd407, CRL_REG_LEN_08BIT, 0x01},
+	{0xd408, CRL_REG_LEN_08BIT, 0x10},
+	{0xd409, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40b, CRL_REG_LEN_08BIT, 0x25},
+	{0xd40c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd40d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd410, CRL_REG_LEN_08BIT, 0x00},
+	{0xd411, CRL_REG_LEN_08BIT, 0x00},
+	{0xd412, CRL_REG_LEN_08BIT, 0x00},
+	{0xd413, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd414, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd415, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd416, CRL_REG_LEN_08BIT, 0x00},
+	{0xd417, CRL_REG_LEN_08BIT, 0x02},
+	{0xd418, CRL_REG_LEN_08BIT, 0x07},
+	{0xd419, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41a, CRL_REG_LEN_08BIT, 0xd6},
+	{0xd41b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd41c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd41d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd420, CRL_REG_LEN_08BIT, 0x18},
+	{0xd421, CRL_REG_LEN_08BIT, 0x60},
+	{0xd422, CRL_REG_LEN_08BIT, 0x80},
+	{0xd423, CRL_REG_LEN_08BIT, 0x06},
+	{0xd424, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd425, CRL_REG_LEN_08BIT, 0x63},
+	{0xd426, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd427, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd428, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd429, CRL_REG_LEN_08BIT, 0x63},
+	{0xd42a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd42d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd42e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd430, CRL_REG_LEN_08BIT, 0x10},
+	{0xd431, CRL_REG_LEN_08BIT, 0x00},
+	{0xd432, CRL_REG_LEN_08BIT, 0x00},
+	{0xd433, CRL_REG_LEN_08BIT, 0x1b},
+	{0xd434, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd435, CRL_REG_LEN_08BIT, 0x00},
+	{0xd436, CRL_REG_LEN_08BIT, 0x00},
+	{0xd437, CRL_REG_LEN_08BIT, 0x00},
+	{0xd438, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd439, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd43a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd43c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd43d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd43e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd440, CRL_REG_LEN_08BIT, 0x18},
+	{0xd441, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd442, CRL_REG_LEN_08BIT, 0x80},
+	{0xd443, CRL_REG_LEN_08BIT, 0x06},
+	{0xd444, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd445, CRL_REG_LEN_08BIT, 0x67},
+	{0xd446, CRL_REG_LEN_08BIT, 0x30},
+	{0xd447, CRL_REG_LEN_08BIT, 0x00},
+	{0xd448, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd449, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd44a, CRL_REG_LEN_08BIT, 0xce},
+	{0xd44b, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd44c, CRL_REG_LEN_08BIT, 0x19},
+	{0xd44d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd44e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd44f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd450, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd451, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd452, CRL_REG_LEN_08BIT, 0x06},
+	{0xd453, CRL_REG_LEN_08BIT, 0x14},
+	{0xd454, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd455, CRL_REG_LEN_08BIT, 0x83},
+	{0xd456, CRL_REG_LEN_08BIT, 0x28},
+	{0xd457, CRL_REG_LEN_08BIT, 0x00},
+	{0xd458, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd459, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd45a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd45c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd45d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd45e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd45f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd460, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd461, CRL_REG_LEN_08BIT, 0x84},
+	{0xd462, CRL_REG_LEN_08BIT, 0x00},
+	{0xd463, CRL_REG_LEN_08BIT, 0x00},
+	{0xd464, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd465, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd466, CRL_REG_LEN_08BIT, 0x58},
+	{0xd467, CRL_REG_LEN_08BIT, 0x00},
+	{0xd468, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd469, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd46a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46b, CRL_REG_LEN_08BIT, 0xff},
+	{0xd46c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd46d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd46e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd470, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd471, CRL_REG_LEN_08BIT, 0x46},
+	{0xd472, CRL_REG_LEN_08BIT, 0x00},
+	{0xd473, CRL_REG_LEN_08BIT, 0x03},
+	{0xd474, CRL_REG_LEN_08BIT, 0x94},
+	{0xd475, CRL_REG_LEN_08BIT, 0x85},
+	{0xd476, CRL_REG_LEN_08BIT, 0x00},
+	{0xd477, CRL_REG_LEN_08BIT, 0x00},
+	{0xd478, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd479, CRL_REG_LEN_08BIT, 0x63},
+	{0xd47a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47b, CRL_REG_LEN_08BIT, 0x98},
+	{0xd47c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd47d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd47e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd480, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd481, CRL_REG_LEN_08BIT, 0xff},
+	{0xd482, CRL_REG_LEN_08BIT, 0xff},
+	{0xd483, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd484, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd485, CRL_REG_LEN_08BIT, 0x05},
+	{0xd486, CRL_REG_LEN_08BIT, 0x18},
+	{0xd487, CRL_REG_LEN_08BIT, 0x00},
+	{0xd488, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd489, CRL_REG_LEN_08BIT, 0x68},
+	{0xd48a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd48c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd48d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd490, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd491, CRL_REG_LEN_08BIT, 0x48},
+	{0xd492, CRL_REG_LEN_08BIT, 0x00},
+	{0xd493, CRL_REG_LEN_08BIT, 0x01},
+	{0xd494, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd495, CRL_REG_LEN_08BIT, 0xff},
+	{0xd496, CRL_REG_LEN_08BIT, 0xff},
+	{0xd497, CRL_REG_LEN_08BIT, 0xea},
+	{0xd498, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd499, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd49a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd49c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd49d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd49e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4a1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4a2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4a3, CRL_REG_LEN_08BIT, 0x14},
+	{0xd4a4, CRL_REG_LEN_08BIT, 0x07},
+	{0xd4a5, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4a6, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd4a7, CRL_REG_LEN_08BIT, 0x05},
+	{0xd4a8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4a9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd4aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ab, CRL_REG_LEN_08BIT, 0x10},
+	{0xd4ac, CRL_REG_LEN_08BIT, 0x85},
+	{0xd4ad, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b0, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4b1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b2, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b7, CRL_REG_LEN_08BIT, 0x04},
+	{0xd4b8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4b9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4bb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4bc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4bd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4be, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4bf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4c0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4c1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4c2, CRL_REG_LEN_08BIT, 0x09},
+	{0xd4c3, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4c4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4c5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4c6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4c8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4c9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ca, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4cb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4cc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4cd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ce, CRL_REG_LEN_08BIT, 0xc9},
+	{0xd4cf, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4d0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4d1, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4d2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4d9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4dc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4dd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4df, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4e1, CRL_REG_LEN_08BIT, 0x84},
+	{0xd4e2, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd4e3, CRL_REG_LEN_08BIT, 0x12},
+	{0xd4e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd4e5, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e8, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd4e9, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4eb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ec, CRL_REG_LEN_08BIT, 0x13},
+	{0xd4ed, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ee, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ef, CRL_REG_LEN_08BIT, 0xfe},
+	{0xd4f0, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fc, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ff, CRL_REG_LEN_08BIT, 0x00},
+	{0xd500, CRL_REG_LEN_08BIT, 0x00},
+	{0xd501, CRL_REG_LEN_08BIT, 0x00},
+	{0xd502, CRL_REG_LEN_08BIT, 0x00},
+	{0xd503, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0e, CRL_REG_LEN_08BIT, 0x33},
+	{0x6f0f, CRL_REG_LEN_08BIT, 0x33},
+	{0x460e, CRL_REG_LEN_08BIT, 0x08},
+	{0x460f, CRL_REG_LEN_08BIT, 0x01},
+	{0x4610, CRL_REG_LEN_08BIT, 0x00},
+	{0x4611, CRL_REG_LEN_08BIT, 0x01},
+	{0x4612, CRL_REG_LEN_08BIT, 0x00},
+	{0x4613, CRL_REG_LEN_08BIT, 0x01},
+	{0x4605, CRL_REG_LEN_08BIT, 0x08},
+	{0x4608, CRL_REG_LEN_08BIT, 0x00},
+	{0x4609, CRL_REG_LEN_08BIT, 0x08},
+	{0x6804, CRL_REG_LEN_08BIT, 0x00},
+	{0x6805, CRL_REG_LEN_08BIT, 0x06},
+	{0x6806, CRL_REG_LEN_08BIT, 0x00},
+	{0x5120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3504, CRL_REG_LEN_08BIT, 0x00},
+	{0x6800, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x5000, CRL_REG_LEN_08BIT, 0xff},
+	{0x5001, CRL_REG_LEN_08BIT, 0xbf},
+	{0x5002, CRL_REG_LEN_08BIT, 0x7e},
+	{0x5003, CRL_REG_LEN_08BIT, 0x0c},
+	{0x503d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc450, CRL_REG_LEN_08BIT, 0x01},
+	{0xc452, CRL_REG_LEN_08BIT, 0x04},
+	{0xc453, CRL_REG_LEN_08BIT, 0x00},
+	{0xc454, CRL_REG_LEN_08BIT, 0x01},
+	{0xc455, CRL_REG_LEN_08BIT, 0x00},
+	{0xc456, CRL_REG_LEN_08BIT, 0x00},
+	{0xc457, CRL_REG_LEN_08BIT, 0x00},
+	{0xc458, CRL_REG_LEN_08BIT, 0x00},
+	{0xc459, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc45f, CRL_REG_LEN_08BIT, 0x01},
+	{0xc460, CRL_REG_LEN_08BIT, 0x01},
+	{0xc461, CRL_REG_LEN_08BIT, 0x01},
+	{0xc462, CRL_REG_LEN_08BIT, 0x01},
+	{0xc464, CRL_REG_LEN_08BIT, 0x88},
+	{0xc465, CRL_REG_LEN_08BIT, 0x00},
+	{0xc466, CRL_REG_LEN_08BIT, 0x8a},
+	{0xc467, CRL_REG_LEN_08BIT, 0x00},
+	{0xc468, CRL_REG_LEN_08BIT, 0x86},
+	{0xc469, CRL_REG_LEN_08BIT, 0x00},
+	{0xc46a, CRL_REG_LEN_08BIT, 0x40},
+	{0xc46b, CRL_REG_LEN_08BIT, 0x50},
+	{0xc46c, CRL_REG_LEN_08BIT, 0x30},
+	{0xc46d, CRL_REG_LEN_08BIT, 0x28},
+	{0xc46e, CRL_REG_LEN_08BIT, 0x60},
+	{0xc46f, CRL_REG_LEN_08BIT, 0x40},
+	{0xc47c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc47d, CRL_REG_LEN_08BIT, 0x38},
+	{0xc47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc480, CRL_REG_LEN_08BIT, 0x00},
+	{0xc481, CRL_REG_LEN_08BIT, 0xff},
+	{0xc482, CRL_REG_LEN_08BIT, 0x00},
+	{0xc483, CRL_REG_LEN_08BIT, 0x40},
+	{0xc484, CRL_REG_LEN_08BIT, 0x00},
+	{0xc485, CRL_REG_LEN_08BIT, 0x18},
+	{0xc486, CRL_REG_LEN_08BIT, 0x00},
+	{0xc487, CRL_REG_LEN_08BIT, 0x18},
+	{0xc488, CRL_REG_LEN_08BIT, 0x34},
+	{0xc489, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x34},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48d, CRL_REG_LEN_08BIT, 0x04},
+	{0xc48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48f, CRL_REG_LEN_08BIT, 0x04},
+	{0xc490, CRL_REG_LEN_08BIT, 0x07},
+	{0xc492, CRL_REG_LEN_08BIT, 0x20},
+	{0xc493, CRL_REG_LEN_08BIT, 0x08},
+	{0xc498, CRL_REG_LEN_08BIT, 0x02},
+	{0xc499, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49a, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49c, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49f, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a5, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4a8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a9, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4aa, CRL_REG_LEN_08BIT, 0x0d},
+	{0xc4ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4ac, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4ad, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4b4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b5, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b7, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4ba, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4be, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4bf, CRL_REG_LEN_08BIT, 0x33},
+	{0xc4c8, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4c9, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4ca, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0x18},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0x18},
+	{0xc4d0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4d1, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4e0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4e1, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4e2, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4e4, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4e5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4e6, CRL_REG_LEN_08BIT, 0x30},
+	{0xc4e7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4e8, CRL_REG_LEN_08BIT, 0x50},
+	{0xc4e9, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4ea, CRL_REG_LEN_08BIT, 0x70},
+	{0xc4eb, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4ec, CRL_REG_LEN_08BIT, 0x90},
+	{0xc4ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc4ee, CRL_REG_LEN_08BIT, 0xb0},
+	{0xc4ef, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc4f0, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4f1, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc4f2, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4f3, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4f4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4f6, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f8, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4f9, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fe, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4ff, CRL_REG_LEN_08BIT, 0x02},
+	{0xc500, CRL_REG_LEN_08BIT, 0x48},
+	{0xc501, CRL_REG_LEN_08BIT, 0x74},
+	{0xc502, CRL_REG_LEN_08BIT, 0x58},
+	{0xc503, CRL_REG_LEN_08BIT, 0x80},
+	{0xc504, CRL_REG_LEN_08BIT, 0x05},
+	{0xc505, CRL_REG_LEN_08BIT, 0x80},
+	{0xc506, CRL_REG_LEN_08BIT, 0x03},
+	{0xc507, CRL_REG_LEN_08BIT, 0x80},
+	{0xc508, CRL_REG_LEN_08BIT, 0x01},
+	{0xc509, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc50a, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50b, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc50c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50d, CRL_REG_LEN_08BIT, 0x2c},
+	{0xc50e, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50f, CRL_REG_LEN_08BIT, 0x0a},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x01},
+	{0xc512, CRL_REG_LEN_08BIT, 0x01},
+	{0xc513, CRL_REG_LEN_08BIT, 0x80},
+	{0xc514, CRL_REG_LEN_08BIT, 0x04},
+	{0xc515, CRL_REG_LEN_08BIT, 0x00},
+	{0xc518, CRL_REG_LEN_08BIT, 0x03},
+	{0xc519, CRL_REG_LEN_08BIT, 0x48},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x07},
+	{0xc51b, CRL_REG_LEN_08BIT, 0x70},
+	{0xc2e0, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e1, CRL_REG_LEN_08BIT, 0x51},
+	{0xc2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e3, CRL_REG_LEN_08BIT, 0xd6},
+	{0xc2e4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2e5, CRL_REG_LEN_08BIT, 0x5e},
+	{0xc2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2ea, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2eb, CRL_REG_LEN_08BIT, 0x90},
+	{0xc2ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2ee, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2ef, CRL_REG_LEN_08BIT, 0x64},
+	{0xc308, CRL_REG_LEN_08BIT, 0x00},
+	{0xc309, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xc30e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc310, CRL_REG_LEN_08BIT, 0x01},
+	{0xc311, CRL_REG_LEN_08BIT, 0x60},
+	{0xc312, CRL_REG_LEN_08BIT, 0xff},
+	{0xc313, CRL_REG_LEN_08BIT, 0x08},
+	{0xc314, CRL_REG_LEN_08BIT, 0x01},
+	{0xc315, CRL_REG_LEN_08BIT, 0x7f},
+	{0xc316, CRL_REG_LEN_08BIT, 0xff},
+	{0xc317, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc318, CRL_REG_LEN_08BIT, 0x00},
+	{0xc319, CRL_REG_LEN_08BIT, 0x0c},
+	{0xc31a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31b, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc31c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31d, CRL_REG_LEN_08BIT, 0x14},
+	{0xc31e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31f, CRL_REG_LEN_08BIT, 0xc5},
+	{0xc320, CRL_REG_LEN_08BIT, 0xff},
+	{0xc321, CRL_REG_LEN_08BIT, 0x4b},
+	{0xc322, CRL_REG_LEN_08BIT, 0xff},
+	{0xc323, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc324, CRL_REG_LEN_08BIT, 0xff},
+	{0xc325, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc326, CRL_REG_LEN_08BIT, 0x00},
+	{0xc327, CRL_REG_LEN_08BIT, 0x46},
+	{0xc328, CRL_REG_LEN_08BIT, 0xff},
+	{0xc329, CRL_REG_LEN_08BIT, 0xd2},
+	{0xc32a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32b, CRL_REG_LEN_08BIT, 0xe4},
+	{0xc32c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32d, CRL_REG_LEN_08BIT, 0xbb},
+	{0xc32e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc32f, CRL_REG_LEN_08BIT, 0x61},
+	{0xc330, CRL_REG_LEN_08BIT, 0xff},
+	{0xc331, CRL_REG_LEN_08BIT, 0xf9},
+	{0xc332, CRL_REG_LEN_08BIT, 0x00},
+	{0xc333, CRL_REG_LEN_08BIT, 0xd9},
+	{0xc334, CRL_REG_LEN_08BIT, 0x00},
+	{0xc335, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc336, CRL_REG_LEN_08BIT, 0x00},
+	{0xc337, CRL_REG_LEN_08BIT, 0xb1},
+	{0xc338, CRL_REG_LEN_08BIT, 0xff},
+	{0xc339, CRL_REG_LEN_08BIT, 0x64},
+	{0xc33a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33b, CRL_REG_LEN_08BIT, 0xeb},
+	{0xc33c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33d, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc33e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc33f, CRL_REG_LEN_08BIT, 0x48},
+	{0xc340, CRL_REG_LEN_08BIT, 0xff},
+	{0xc341, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc342, CRL_REG_LEN_08BIT, 0xff},
+	{0xc343, CRL_REG_LEN_08BIT, 0xed},
+	{0xc344, CRL_REG_LEN_08BIT, 0xff},
+	{0xc345, CRL_REG_LEN_08BIT, 0xad},
+	{0xc346, CRL_REG_LEN_08BIT, 0x00},
+	{0xc347, CRL_REG_LEN_08BIT, 0x66},
+	{0xc348, CRL_REG_LEN_08BIT, 0x01},
+	{0xc349, CRL_REG_LEN_08BIT, 0x00},
+	{0x6700, CRL_REG_LEN_08BIT, 0x04},
+	{0x6701, CRL_REG_LEN_08BIT, 0x7b},
+	{0x6702, CRL_REG_LEN_08BIT, 0xfd},
+	{0x6703, CRL_REG_LEN_08BIT, 0xf9},
+	{0x6704, CRL_REG_LEN_08BIT, 0x3d},
+	{0x6705, CRL_REG_LEN_08BIT, 0x71},
+	{0x6706, CRL_REG_LEN_08BIT, 0x78},
+	{0x6708, CRL_REG_LEN_08BIT, 0x05},
+	{0x6f06, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f07, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0a, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f00, CRL_REG_LEN_08BIT, 0x03},
+	{0xc34c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc34d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc34e, CRL_REG_LEN_08BIT, 0x46},
+	{0xc34f, CRL_REG_LEN_08BIT, 0x55},
+	{0xc350, CRL_REG_LEN_08BIT, 0x00},
+	{0xc351, CRL_REG_LEN_08BIT, 0x40},
+	{0xc352, CRL_REG_LEN_08BIT, 0x00},
+	{0xc353, CRL_REG_LEN_08BIT, 0xff},
+	{0xc354, CRL_REG_LEN_08BIT, 0x04},
+	{0xc355, CRL_REG_LEN_08BIT, 0x08},
+	{0xc356, CRL_REG_LEN_08BIT, 0x01},
+	{0xc357, CRL_REG_LEN_08BIT, 0xef},
+	{0xc358, CRL_REG_LEN_08BIT, 0x30},
+	{0xc359, CRL_REG_LEN_08BIT, 0x01},
+	{0xc35a, CRL_REG_LEN_08BIT, 0x64},
+	{0xc35b, CRL_REG_LEN_08BIT, 0x46},
+	{0xc35c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301a, CRL_REG_LEN_08BIT, 0xf0},
+	{0xceb0, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb1, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb2, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb3, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb4, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb5, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xceb6, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xceb7, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+};
+
+static struct crl_register_write_rep ov10635_1280_720_YUV_HDR_BT656[] = {
+	{0x0103, CRL_REG_LEN_08BIT, 0x01},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x301b, CRL_REG_LEN_08BIT, 0xff},
+	{0x301c, CRL_REG_LEN_08BIT, 0xff},
+	{0x301a, CRL_REG_LEN_08BIT, 0xff},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x6900, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6901, CRL_REG_LEN_08BIT, 0x11},
+	{0x3503, CRL_REG_LEN_08BIT, 0x10},
+	{0x3025, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x14},
+	{0x3004, CRL_REG_LEN_08BIT, 0x11},
+	{0x3005, CRL_REG_LEN_08BIT, 0x20},
+	{0x3006, CRL_REG_LEN_08BIT, 0x91},
+	{0x3600, CRL_REG_LEN_08BIT, 0x74},
+	{0x3601, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3612, CRL_REG_LEN_08BIT, 0x00},
+	{0x3611, CRL_REG_LEN_08BIT, 0x67},
+	{0x3633, CRL_REG_LEN_08BIT, 0xca},
+	{0x3602, CRL_REG_LEN_08BIT, 0x2f},
+	{0x3603, CRL_REG_LEN_08BIT, 0x00},
+	{0x3630, CRL_REG_LEN_08BIT, 0x28},
+	{0x3631, CRL_REG_LEN_08BIT, 0x16},
+	{0x3714, CRL_REG_LEN_08BIT, 0x10},
+	{0x371d, CRL_REG_LEN_08BIT, 0x01},
+	{0x4300, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x3020, CRL_REG_LEN_08BIT, 0x0b},
+	{0x3702, CRL_REG_LEN_08BIT, 0x1a},
+	{0x3703, CRL_REG_LEN_08BIT, 0x40},
+	{0x3704, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x370c, CRL_REG_LEN_08BIT, 0xc7},
+	{0x370d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3712, CRL_REG_LEN_08BIT, 0x00},
+	{0x3713, CRL_REG_LEN_08BIT, 0x20},
+	{0x3715, CRL_REG_LEN_08BIT, 0x04},
+	{0x381d, CRL_REG_LEN_08BIT, 0x40},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3822, CRL_REG_LEN_08BIT, 0x50},
+	{0x3824, CRL_REG_LEN_08BIT, 0x50},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3804, CRL_REG_LEN_08BIT, 0x05},
+	{0x3805, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3806, CRL_REG_LEN_08BIT, 0x02},
+	{0x3807, CRL_REG_LEN_08BIT, 0xfd},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3808, CRL_REG_LEN_08BIT, 0x05},
+	{0x3809, CRL_REG_LEN_08BIT, 0x00},
+	{0x380a, CRL_REG_LEN_08BIT, 0x02},
+	{0x380b, CRL_REG_LEN_08BIT, 0xd0},
+	{0x380c, CRL_REG_LEN_08BIT, 0x06},
+	{0x380d, CRL_REG_LEN_08BIT, 0xf6},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x02},
+	{0x6e43, CRL_REG_LEN_08BIT, 0xec},
+	{0x380e, CRL_REG_LEN_08BIT, 0x02},
+	{0x380f, CRL_REG_LEN_08BIT, 0xec},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x3811, CRL_REG_LEN_08BIT, 0x10},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3828, CRL_REG_LEN_08BIT, 0x03},
+	{0x3829, CRL_REG_LEN_08BIT, 0x10},
+	{0x382a, CRL_REG_LEN_08BIT, 0x10},
+	{0x382b, CRL_REG_LEN_08BIT, 0x10},
+	{0x3621, CRL_REG_LEN_08BIT, 0x64},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x56d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d6, CRL_REG_LEN_08BIT, 0x80},
+	{0x56d7, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x56da, CRL_REG_LEN_08BIT, 0x80},
+	{0x56db, CRL_REG_LEN_08BIT, 0x00},
+	{0x56dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e9, CRL_REG_LEN_08BIT, 0x7f},
+	{0x56ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x56eb, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5100, CRL_REG_LEN_08BIT, 0x00},
+	{0x5101, CRL_REG_LEN_08BIT, 0x80},
+	{0x5102, CRL_REG_LEN_08BIT, 0x00},
+	{0x5103, CRL_REG_LEN_08BIT, 0x80},
+	{0x5104, CRL_REG_LEN_08BIT, 0x00},
+	{0x5105, CRL_REG_LEN_08BIT, 0x80},
+	{0x5106, CRL_REG_LEN_08BIT, 0x00},
+	{0x5107, CRL_REG_LEN_08BIT, 0x80},
+	{0x5108, CRL_REG_LEN_08BIT, 0x00},
+	{0x5109, CRL_REG_LEN_08BIT, 0x00},
+	{0x510a, CRL_REG_LEN_08BIT, 0x00},
+	{0x510b, CRL_REG_LEN_08BIT, 0x00},
+	{0x510c, CRL_REG_LEN_08BIT, 0x00},
+	{0x510d, CRL_REG_LEN_08BIT, 0x00},
+	{0x510e, CRL_REG_LEN_08BIT, 0x00},
+	{0x510f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5110, CRL_REG_LEN_08BIT, 0x00},
+	{0x5111, CRL_REG_LEN_08BIT, 0x80},
+	{0x5112, CRL_REG_LEN_08BIT, 0x00},
+	{0x5113, CRL_REG_LEN_08BIT, 0x80},
+	{0x5114, CRL_REG_LEN_08BIT, 0x00},
+	{0x5115, CRL_REG_LEN_08BIT, 0x80},
+	{0x5116, CRL_REG_LEN_08BIT, 0x00},
+	{0x5117, CRL_REG_LEN_08BIT, 0x80},
+	{0x5118, CRL_REG_LEN_08BIT, 0x00},
+	{0x5119, CRL_REG_LEN_08BIT, 0x00},
+	{0x511a, CRL_REG_LEN_08BIT, 0x00},
+	{0x511b, CRL_REG_LEN_08BIT, 0x00},
+	{0x511c, CRL_REG_LEN_08BIT, 0x00},
+	{0x511d, CRL_REG_LEN_08BIT, 0x00},
+	{0x511e, CRL_REG_LEN_08BIT, 0x00},
+	{0x511f, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x5006, CRL_REG_LEN_08BIT, 0x24},
+	{0x5608, CRL_REG_LEN_08BIT, 0x0e},
+	{0x52d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x528d, CRL_REG_LEN_08BIT, 0x08},
+	{0x5293, CRL_REG_LEN_08BIT, 0x12},
+	{0x52d3, CRL_REG_LEN_08BIT, 0x12},
+	{0x5288, CRL_REG_LEN_08BIT, 0x06},
+	{0x5289, CRL_REG_LEN_08BIT, 0x20},
+	{0x52c8, CRL_REG_LEN_08BIT, 0x06},
+	{0x52c9, CRL_REG_LEN_08BIT, 0x20},
+	{0x52cd, CRL_REG_LEN_08BIT, 0x04},
+	{0x5381, CRL_REG_LEN_08BIT, 0x00},
+	{0x5382, CRL_REG_LEN_08BIT, 0xff},
+	{0x5589, CRL_REG_LEN_08BIT, 0x76},
+	{0x558a, CRL_REG_LEN_08BIT, 0x47},
+	{0x558b, CRL_REG_LEN_08BIT, 0xef},
+	{0x558c, CRL_REG_LEN_08BIT, 0xc9},
+	{0x558d, CRL_REG_LEN_08BIT, 0x49},
+	{0x558e, CRL_REG_LEN_08BIT, 0x30},
+	{0x558f, CRL_REG_LEN_08BIT, 0x67},
+	{0x5590, CRL_REG_LEN_08BIT, 0x3f},
+	{0x5591, CRL_REG_LEN_08BIT, 0xf0},
+	{0x5592, CRL_REG_LEN_08BIT, 0x10},
+	{0x55a2, CRL_REG_LEN_08BIT, 0x6d},
+	{0x55a3, CRL_REG_LEN_08BIT, 0x55},
+	{0x55a4, CRL_REG_LEN_08BIT, 0xc3},
+	{0x55a5, CRL_REG_LEN_08BIT, 0xb5},
+	{0x55a6, CRL_REG_LEN_08BIT, 0x43},
+	{0x55a7, CRL_REG_LEN_08BIT, 0x38},
+	{0x55a8, CRL_REG_LEN_08BIT, 0x5f},
+	{0x55a9, CRL_REG_LEN_08BIT, 0x4b},
+	{0x55aa, CRL_REG_LEN_08BIT, 0xf0},
+	{0x55ab, CRL_REG_LEN_08BIT, 0x10},
+	{0x5581, CRL_REG_LEN_08BIT, 0x52},
+	{0x5300, CRL_REG_LEN_08BIT, 0x01},
+	{0x5301, CRL_REG_LEN_08BIT, 0x00},
+	{0x5302, CRL_REG_LEN_08BIT, 0x00},
+	{0x5303, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5304, CRL_REG_LEN_08BIT, 0x00},
+	{0x5305, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5306, CRL_REG_LEN_08BIT, 0x00},
+	{0x5307, CRL_REG_LEN_08BIT, 0x36},
+	{0x5308, CRL_REG_LEN_08BIT, 0x00},
+	{0x5309, CRL_REG_LEN_08BIT, 0xd9},
+	{0x530a, CRL_REG_LEN_08BIT, 0x00},
+	{0x530b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x530c, CRL_REG_LEN_08BIT, 0x00},
+	{0x530d, CRL_REG_LEN_08BIT, 0x2c},
+	{0x530e, CRL_REG_LEN_08BIT, 0x00},
+	{0x530f, CRL_REG_LEN_08BIT, 0x59},
+	{0x5310, CRL_REG_LEN_08BIT, 0x00},
+	{0x5311, CRL_REG_LEN_08BIT, 0x7b},
+	{0x5312, CRL_REG_LEN_08BIT, 0x00},
+	{0x5313, CRL_REG_LEN_08BIT, 0x22},
+	{0x5314, CRL_REG_LEN_08BIT, 0x00},
+	{0x5315, CRL_REG_LEN_08BIT, 0xd5},
+	{0x5316, CRL_REG_LEN_08BIT, 0x00},
+	{0x5317, CRL_REG_LEN_08BIT, 0x13},
+	{0x5318, CRL_REG_LEN_08BIT, 0x00},
+	{0x5319, CRL_REG_LEN_08BIT, 0x18},
+	{0x531a, CRL_REG_LEN_08BIT, 0x00},
+	{0x531b, CRL_REG_LEN_08BIT, 0x26},
+	{0x531c, CRL_REG_LEN_08BIT, 0x00},
+	{0x531d, CRL_REG_LEN_08BIT, 0xdc},
+	{0x531e, CRL_REG_LEN_08BIT, 0x00},
+	{0x531f, CRL_REG_LEN_08BIT, 0x02},
+	{0x5320, CRL_REG_LEN_08BIT, 0x00},
+	{0x5321, CRL_REG_LEN_08BIT, 0x24},
+	{0x5322, CRL_REG_LEN_08BIT, 0x00},
+	{0x5323, CRL_REG_LEN_08BIT, 0x56},
+	{0x5324, CRL_REG_LEN_08BIT, 0x00},
+	{0x5325, CRL_REG_LEN_08BIT, 0x85},
+	{0x5326, CRL_REG_LEN_08BIT, 0x00},
+	{0x5327, CRL_REG_LEN_08BIT, 0x20},
+	{0x5609, CRL_REG_LEN_08BIT, 0x01},
+	{0x560a, CRL_REG_LEN_08BIT, 0x40},
+	{0x560b, CRL_REG_LEN_08BIT, 0x01},
+	{0x560c, CRL_REG_LEN_08BIT, 0x40},
+	{0x560d, CRL_REG_LEN_08BIT, 0x00},
+	{0x560e, CRL_REG_LEN_08BIT, 0xfa},
+	{0x560f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5610, CRL_REG_LEN_08BIT, 0xfa},
+	{0x5611, CRL_REG_LEN_08BIT, 0x02},
+	{0x5612, CRL_REG_LEN_08BIT, 0x80},
+	{0x5613, CRL_REG_LEN_08BIT, 0x02},
+	{0x5614, CRL_REG_LEN_08BIT, 0x80},
+	{0x5615, CRL_REG_LEN_08BIT, 0x01},
+	{0x5616, CRL_REG_LEN_08BIT, 0x2c},
+	{0x5617, CRL_REG_LEN_08BIT, 0x01},
+	{0x5618, CRL_REG_LEN_08BIT, 0x2c},
+	{0x563b, CRL_REG_LEN_08BIT, 0x01},
+	{0x563c, CRL_REG_LEN_08BIT, 0x01},
+	{0x563d, CRL_REG_LEN_08BIT, 0x01},
+	{0x563e, CRL_REG_LEN_08BIT, 0x01},
+	{0x563f, CRL_REG_LEN_08BIT, 0x03},
+	{0x5640, CRL_REG_LEN_08BIT, 0x03},
+	{0x5641, CRL_REG_LEN_08BIT, 0x03},
+	{0x5642, CRL_REG_LEN_08BIT, 0x05},
+	{0x5643, CRL_REG_LEN_08BIT, 0x09},
+	{0x5644, CRL_REG_LEN_08BIT, 0x05},
+	{0x5645, CRL_REG_LEN_08BIT, 0x05},
+	{0x5646, CRL_REG_LEN_08BIT, 0x05},
+	{0x5647, CRL_REG_LEN_08BIT, 0x05},
+	{0x5651, CRL_REG_LEN_08BIT, 0x00},
+	{0x5652, CRL_REG_LEN_08BIT, 0x80},
+	{0x521a, CRL_REG_LEN_08BIT, 0x01},
+	{0x521b, CRL_REG_LEN_08BIT, 0x03},
+	{0x521c, CRL_REG_LEN_08BIT, 0x06},
+	{0x521d, CRL_REG_LEN_08BIT, 0x0a},
+	{0x521e, CRL_REG_LEN_08BIT, 0x0e},
+	{0x521f, CRL_REG_LEN_08BIT, 0x12},
+	{0x5220, CRL_REG_LEN_08BIT, 0x16},
+	{0x5223, CRL_REG_LEN_08BIT, 0x02},
+	{0x5225, CRL_REG_LEN_08BIT, 0x04},
+	{0x5227, CRL_REG_LEN_08BIT, 0x08},
+	{0x5229, CRL_REG_LEN_08BIT, 0x0c},
+	{0x522b, CRL_REG_LEN_08BIT, 0x12},
+	{0x522d, CRL_REG_LEN_08BIT, 0x18},
+	{0x522f, CRL_REG_LEN_08BIT, 0x1e},
+	{0x5241, CRL_REG_LEN_08BIT, 0x04},
+	{0x5242, CRL_REG_LEN_08BIT, 0x01},
+	{0x5243, CRL_REG_LEN_08BIT, 0x03},
+	{0x5244, CRL_REG_LEN_08BIT, 0x06},
+	{0x5245, CRL_REG_LEN_08BIT, 0x0a},
+	{0x5246, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5247, CRL_REG_LEN_08BIT, 0x12},
+	{0x5248, CRL_REG_LEN_08BIT, 0x16},
+	{0x524a, CRL_REG_LEN_08BIT, 0x03},
+	{0x524c, CRL_REG_LEN_08BIT, 0x04},
+	{0x524e, CRL_REG_LEN_08BIT, 0x08},
+	{0x5250, CRL_REG_LEN_08BIT, 0x0c},
+	{0x5252, CRL_REG_LEN_08BIT, 0x12},
+	{0x5254, CRL_REG_LEN_08BIT, 0x18},
+	{0x5256, CRL_REG_LEN_08BIT, 0x1e},
+	{0x4606, CRL_REG_LEN_08BIT, 0x07},
+	{0x4607, CRL_REG_LEN_08BIT, 0x71},
+	{0x460a, CRL_REG_LEN_08BIT, 0x03},
+	{0x460b, CRL_REG_LEN_08BIT, 0xe7},
+	{0x460c, CRL_REG_LEN_08BIT, 0x40},
+	{0x4620, CRL_REG_LEN_08BIT, 0x0e},
+	{0x4700, CRL_REG_LEN_08BIT, 0x06},
+	{0x4701, CRL_REG_LEN_08BIT, 0x00},
+	{0x4702, CRL_REG_LEN_08BIT, 0x01},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4005, CRL_REG_LEN_08BIT, 0x18},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4052, CRL_REG_LEN_08BIT, 0x02},
+	{0x4057, CRL_REG_LEN_08BIT, 0x9c},
+	{0x405a, CRL_REG_LEN_08BIT, 0x00},
+	{0x4302, CRL_REG_LEN_08BIT, 0x03},
+	{0x4303, CRL_REG_LEN_08BIT, 0xff},
+	{0x4304, CRL_REG_LEN_08BIT, 0x00},
+	{0x4305, CRL_REG_LEN_08BIT, 0x10},
+	{0x4306, CRL_REG_LEN_08BIT, 0x03},
+	{0x4307, CRL_REG_LEN_08BIT, 0xff},
+	{0x4308, CRL_REG_LEN_08BIT, 0x00},
+	{0x4309, CRL_REG_LEN_08BIT, 0x10},
+	{0x4202, CRL_REG_LEN_08BIT, 0x02},
+	{0x3023, CRL_REG_LEN_08BIT, 0x10},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x6f10, CRL_REG_LEN_08BIT, 0x07},
+	{0x6f11, CRL_REG_LEN_08BIT, 0x82},
+	{0x6f12, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f13, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f14, CRL_REG_LEN_08BIT, 0x1f},
+	{0x6f15, CRL_REG_LEN_08BIT, 0xdd},
+	{0x6f16, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f17, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f18, CRL_REG_LEN_08BIT, 0x36},
+	{0x6f19, CRL_REG_LEN_08BIT, 0x66},
+	{0x6f1a, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1b, CRL_REG_LEN_08BIT, 0x08},
+	{0x6f1c, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6f1d, CRL_REG_LEN_08BIT, 0xe7},
+	{0x6f1e, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1f, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd000, CRL_REG_LEN_08BIT, 0x19},
+	{0xd001, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd002, CRL_REG_LEN_08BIT, 0x00},
+	{0xd003, CRL_REG_LEN_08BIT, 0x01},
+	{0xd004, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd005, CRL_REG_LEN_08BIT, 0xad},
+	{0xd006, CRL_REG_LEN_08BIT, 0x10},
+	{0xd007, CRL_REG_LEN_08BIT, 0x40},
+	{0xd008, CRL_REG_LEN_08BIT, 0x44},
+	{0xd009, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd00b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd00d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd010, CRL_REG_LEN_08BIT, 0x19},
+	{0xd011, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd012, CRL_REG_LEN_08BIT, 0x00},
+	{0xd013, CRL_REG_LEN_08BIT, 0x01},
+	{0xd014, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd015, CRL_REG_LEN_08BIT, 0xad},
+	{0xd016, CRL_REG_LEN_08BIT, 0x14},
+	{0xd017, CRL_REG_LEN_08BIT, 0x40},
+	{0xd018, CRL_REG_LEN_08BIT, 0x44},
+	{0xd019, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd01b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd01d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd020, CRL_REG_LEN_08BIT, 0x19},
+	{0xd021, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd022, CRL_REG_LEN_08BIT, 0x00},
+	{0xd023, CRL_REG_LEN_08BIT, 0x01},
+	{0xd024, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd025, CRL_REG_LEN_08BIT, 0xad},
+	{0xd026, CRL_REG_LEN_08BIT, 0x15},
+	{0xd027, CRL_REG_LEN_08BIT, 0x28},
+	{0xd028, CRL_REG_LEN_08BIT, 0x44},
+	{0xd029, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd02b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd02d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd030, CRL_REG_LEN_08BIT, 0x19},
+	{0xd031, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd032, CRL_REG_LEN_08BIT, 0x00},
+	{0xd033, CRL_REG_LEN_08BIT, 0x01},
+	{0xd034, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd035, CRL_REG_LEN_08BIT, 0xad},
+	{0xd036, CRL_REG_LEN_08BIT, 0x15},
+	{0xd037, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd038, CRL_REG_LEN_08BIT, 0x44},
+	{0xd039, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd03b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd03d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd040, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd041, CRL_REG_LEN_08BIT, 0x21},
+	{0xd042, CRL_REG_LEN_08BIT, 0xff},
+	{0xd043, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd044, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd045, CRL_REG_LEN_08BIT, 0x01},
+	{0xd046, CRL_REG_LEN_08BIT, 0x48},
+	{0xd047, CRL_REG_LEN_08BIT, 0x00},
+	{0xd048, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd049, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04a, CRL_REG_LEN_08BIT, 0x50},
+	{0xd04b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd04c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd04d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd04f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd050, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd051, CRL_REG_LEN_08BIT, 0x01},
+	{0xd052, CRL_REG_LEN_08BIT, 0x70},
+	{0xd053, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd054, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd055, CRL_REG_LEN_08BIT, 0x01},
+	{0xd056, CRL_REG_LEN_08BIT, 0x80},
+	{0xd057, CRL_REG_LEN_08BIT, 0x10},
+	{0xd058, CRL_REG_LEN_08BIT, 0x19},
+	{0xd059, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd05a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd05b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd05c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd05d, CRL_REG_LEN_08BIT, 0xce},
+	{0xd05e, CRL_REG_LEN_08BIT, 0x02},
+	{0xd05f, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd060, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd061, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd062, CRL_REG_LEN_08BIT, 0x00},
+	{0xd063, CRL_REG_LEN_08BIT, 0x00},
+	{0xd064, CRL_REG_LEN_08BIT, 0x84},
+	{0xd065, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd066, CRL_REG_LEN_08BIT, 0x00},
+	{0xd067, CRL_REG_LEN_08BIT, 0x00},
+	{0xd068, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd069, CRL_REG_LEN_08BIT, 0x03},
+	{0xd06a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd06b, CRL_REG_LEN_08BIT, 0x76},
+	{0xd06c, CRL_REG_LEN_08BIT, 0x1a},
+	{0xd06d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd070, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd071, CRL_REG_LEN_08BIT, 0x10},
+	{0xd072, CRL_REG_LEN_08BIT, 0x03},
+	{0xd073, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd074, CRL_REG_LEN_08BIT, 0x18},
+	{0xd075, CRL_REG_LEN_08BIT, 0x60},
+	{0xd076, CRL_REG_LEN_08BIT, 0x00},
+	{0xd077, CRL_REG_LEN_08BIT, 0x01},
+	{0xd078, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd079, CRL_REG_LEN_08BIT, 0x63},
+	{0xd07a, CRL_REG_LEN_08BIT, 0x07},
+	{0xd07b, CRL_REG_LEN_08BIT, 0x80},
+	{0xd07c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd07d, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd07e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd07f, CRL_REG_LEN_08BIT, 0x04},
+	{0xd080, CRL_REG_LEN_08BIT, 0x18},
+	{0xd081, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd082, CRL_REG_LEN_08BIT, 0x00},
+	{0xd083, CRL_REG_LEN_08BIT, 0x00},
+	{0xd084, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd085, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd086, CRL_REG_LEN_08BIT, 0x00},
+	{0xd087, CRL_REG_LEN_08BIT, 0x00},
+	{0xd088, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd089, CRL_REG_LEN_08BIT, 0x63},
+	{0xd08a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd08d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd08e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd08f, CRL_REG_LEN_08BIT, 0x14},
+	{0xd090, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd091, CRL_REG_LEN_08BIT, 0x01},
+	{0xd092, CRL_REG_LEN_08BIT, 0x30},
+	{0xd093, CRL_REG_LEN_08BIT, 0x18},
+	{0xd094, CRL_REG_LEN_08BIT, 0x07},
+	{0xd095, CRL_REG_LEN_08BIT, 0xff},
+	{0xd096, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd097, CRL_REG_LEN_08BIT, 0xfd},
+	{0xd098, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd099, CRL_REG_LEN_08BIT, 0x80},
+	{0xd09a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd09c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd09d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd09e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd0a0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd0a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0a3, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0a5, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd0a6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd0a8, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0a9, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0aa, CRL_REG_LEN_08BIT, 0x58},
+	{0xd0ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ac, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0ad, CRL_REG_LEN_08BIT, 0x8e},
+	{0xd0ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0b1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0b2, CRL_REG_LEN_08BIT, 0x30},
+	{0xd0b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b4, CRL_REG_LEN_08BIT, 0x98},
+	{0xd0b5, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd0b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd0ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0bb, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd0bc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0bd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd0be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0bf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd0c1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0c4, CRL_REG_LEN_08BIT, 0x95},
+	{0xd0c5, CRL_REG_LEN_08BIT, 0x8b},
+	{0xd0c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c8, CRL_REG_LEN_08BIT, 0x94},
+	{0xd0c9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd0ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0cb, CRL_REG_LEN_08BIT, 0x70},
+	{0xd0cc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0cd, CRL_REG_LEN_08BIT, 0x65},
+	{0xd0ce, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd0d1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d3, CRL_REG_LEN_08BIT, 0x62},
+	{0xd0d4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd0d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0da, CRL_REG_LEN_08BIT, 0x80},
+	{0xd0db, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0dd, CRL_REG_LEN_08BIT, 0x83},
+	{0xd0de, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0df, CRL_REG_LEN_08BIT, 0x29},
+	{0xd0e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e1, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd0e2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0e3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd0e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0e5, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e9, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd0ea, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0eb, CRL_REG_LEN_08BIT, 0x09},
+	{0xd0ec, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0ed, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd0ee, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0ef, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd0f0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f1, CRL_REG_LEN_08BIT, 0x07},
+	{0xd0f2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd0f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0f5, CRL_REG_LEN_08BIT, 0x66},
+	{0xd0f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f9, CRL_REG_LEN_08BIT, 0x05},
+	{0xd0fa, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0fc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ff, CRL_REG_LEN_08BIT, 0x01},
+	{0xd100, CRL_REG_LEN_08BIT, 0x98},
+	{0xd101, CRL_REG_LEN_08BIT, 0x90},
+	{0xd102, CRL_REG_LEN_08BIT, 0x00},
+	{0xd103, CRL_REG_LEN_08BIT, 0x00},
+	{0xd104, CRL_REG_LEN_08BIT, 0x84},
+	{0xd105, CRL_REG_LEN_08BIT, 0xae},
+	{0xd106, CRL_REG_LEN_08BIT, 0x00},
+	{0xd107, CRL_REG_LEN_08BIT, 0x00},
+	{0xd108, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd109, CRL_REG_LEN_08BIT, 0x63},
+	{0xd10a, CRL_REG_LEN_08BIT, 0x06},
+	{0xd10b, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd10c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd10d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd10e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd10f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd110, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd111, CRL_REG_LEN_08BIT, 0x03},
+	{0xd112, CRL_REG_LEN_08BIT, 0x30},
+	{0xd113, CRL_REG_LEN_08BIT, 0x00},
+	{0xd114, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd115, CRL_REG_LEN_08BIT, 0x65},
+	{0xd116, CRL_REG_LEN_08BIT, 0x00},
+	{0xd117, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd118, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd119, CRL_REG_LEN_08BIT, 0x84},
+	{0xd11a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd11b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11c, CRL_REG_LEN_08BIT, 0x10},
+	{0xd11d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11f, CRL_REG_LEN_08BIT, 0x07},
+	{0xd120, CRL_REG_LEN_08BIT, 0x18},
+	{0xd121, CRL_REG_LEN_08BIT, 0x80},
+	{0xd122, CRL_REG_LEN_08BIT, 0x80},
+	{0xd123, CRL_REG_LEN_08BIT, 0x06},
+	{0xd124, CRL_REG_LEN_08BIT, 0x94},
+	{0xd125, CRL_REG_LEN_08BIT, 0x65},
+	{0xd126, CRL_REG_LEN_08BIT, 0x00},
+	{0xd127, CRL_REG_LEN_08BIT, 0x70},
+	{0xd128, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd129, CRL_REG_LEN_08BIT, 0x43},
+	{0xd12a, CRL_REG_LEN_08BIT, 0x60},
+	{0xd12b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12c, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd12d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12f, CRL_REG_LEN_08BIT, 0x3e},
+	{0xd130, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd131, CRL_REG_LEN_08BIT, 0x64},
+	{0xd132, CRL_REG_LEN_08BIT, 0x38},
+	{0xd133, CRL_REG_LEN_08BIT, 0x24},
+	{0xd134, CRL_REG_LEN_08BIT, 0x18},
+	{0xd135, CRL_REG_LEN_08BIT, 0x80},
+	{0xd136, CRL_REG_LEN_08BIT, 0x80},
+	{0xd137, CRL_REG_LEN_08BIT, 0x06},
+	{0xd138, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd139, CRL_REG_LEN_08BIT, 0x64},
+	{0xd13a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd13b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd13c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd13d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd13e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd13f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd140, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd141, CRL_REG_LEN_08BIT, 0x63},
+	{0xd142, CRL_REG_LEN_08BIT, 0x00},
+	{0xd143, CRL_REG_LEN_08BIT, 0x40},
+	{0xd144, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd145, CRL_REG_LEN_08BIT, 0x23},
+	{0xd146, CRL_REG_LEN_08BIT, 0x00},
+	{0xd147, CRL_REG_LEN_08BIT, 0x00},
+	{0xd148, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd149, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14b, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd14c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd14d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd14e, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd14f, CRL_REG_LEN_08BIT, 0x44},
+	{0xd150, CRL_REG_LEN_08BIT, 0x19},
+	{0xd151, CRL_REG_LEN_08BIT, 0x00},
+	{0xd152, CRL_REG_LEN_08BIT, 0x80},
+	{0xd153, CRL_REG_LEN_08BIT, 0x06},
+	{0xd154, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd155, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd156, CRL_REG_LEN_08BIT, 0x3d},
+	{0xd157, CRL_REG_LEN_08BIT, 0x05},
+	{0xd158, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd159, CRL_REG_LEN_08BIT, 0x67},
+	{0xd15a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd15d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd15e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd160, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd161, CRL_REG_LEN_08BIT, 0x63},
+	{0xd162, CRL_REG_LEN_08BIT, 0x00},
+	{0xd163, CRL_REG_LEN_08BIT, 0x98},
+	{0xd164, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd165, CRL_REG_LEN_08BIT, 0x03},
+	{0xd166, CRL_REG_LEN_08BIT, 0x00},
+	{0xd167, CRL_REG_LEN_08BIT, 0x00},
+	{0xd168, CRL_REG_LEN_08BIT, 0x10},
+	{0xd169, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd16c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd16d, CRL_REG_LEN_08BIT, 0x48},
+	{0xd16e, CRL_REG_LEN_08BIT, 0x67},
+	{0xd16f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd170, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd171, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd172, CRL_REG_LEN_08BIT, 0x00},
+	{0xd173, CRL_REG_LEN_08BIT, 0x19},
+	{0xd174, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd175, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd176, CRL_REG_LEN_08BIT, 0x00},
+	{0xd177, CRL_REG_LEN_08BIT, 0x00},
+	{0xd178, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd179, CRL_REG_LEN_08BIT, 0x68},
+	{0xd17a, CRL_REG_LEN_08BIT, 0x67},
+	{0xd17b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd17c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd17d, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd17e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd17f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd180, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd181, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd182, CRL_REG_LEN_08BIT, 0x00},
+	{0xd183, CRL_REG_LEN_08BIT, 0x00},
+	{0xd184, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd185, CRL_REG_LEN_08BIT, 0x85},
+	{0xd186, CRL_REG_LEN_08BIT, 0x00},
+	{0xd187, CRL_REG_LEN_08BIT, 0x98},
+	{0xd188, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd189, CRL_REG_LEN_08BIT, 0x63},
+	{0xd18a, CRL_REG_LEN_08BIT, 0x30},
+	{0xd18b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd18c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd18d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd18e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd18f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd190, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd191, CRL_REG_LEN_08BIT, 0x83},
+	{0xd192, CRL_REG_LEN_08BIT, 0xff},
+	{0xd193, CRL_REG_LEN_08BIT, 0xff},
+	{0xd194, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd195, CRL_REG_LEN_08BIT, 0x64},
+	{0xd196, CRL_REG_LEN_08BIT, 0x00},
+	{0xd197, CRL_REG_LEN_08BIT, 0x48},
+	{0xd198, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd199, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd19a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd19b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd19c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd19d, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd19e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd19f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1a1, CRL_REG_LEN_08BIT, 0x60},
+	{0xd1a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1a5, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1a6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd1a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1a9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd1aa, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1ab, CRL_REG_LEN_08BIT, 0x22},
+	{0xd1ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ad, CRL_REG_LEN_08BIT, 0x80},
+	{0xd1ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1af, CRL_REG_LEN_08BIT, 0x70},
+	{0xd1b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1b1, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd1b2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1b3, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1b4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1b5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1b6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1b9, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1bd, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd1be, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1bf, CRL_REG_LEN_08BIT, 0x42},
+	{0xd1c0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1c1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd1c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1c5, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd1c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd1c9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd1ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cb, CRL_REG_LEN_08BIT, 0x08},
+	{0xd1cc, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1cd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1d1, CRL_REG_LEN_08BIT, 0x67},
+	{0xd1d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd1d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1d6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1d9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1da, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1dc, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1dd, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1df, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1e0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd1e1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e3, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd1e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1e5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd1e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd1e8, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1e9, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1ea, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1eb, CRL_REG_LEN_08BIT, 0xf6},
+	{0xd1ec, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f1, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1f2, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1f3, CRL_REG_LEN_08BIT, 0x86},
+	{0xd1f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1f5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f9, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd1fa, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd1fb, CRL_REG_LEN_08BIT, 0x45},
+	{0xd1fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1fd, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd1fe, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1ff, CRL_REG_LEN_08BIT, 0x87},
+	{0xd200, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd201, CRL_REG_LEN_08BIT, 0x05},
+	{0xd202, CRL_REG_LEN_08BIT, 0x18},
+	{0xd203, CRL_REG_LEN_08BIT, 0x00},
+	{0xd204, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd205, CRL_REG_LEN_08BIT, 0x66},
+	{0xd206, CRL_REG_LEN_08BIT, 0x00},
+	{0xd207, CRL_REG_LEN_08BIT, 0x00},
+	{0xd208, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd209, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd20a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd20b, CRL_REG_LEN_08BIT, 0x46},
+	{0xd20c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd20d, CRL_REG_LEN_08BIT, 0x07},
+	{0xd20e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd20f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd210, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd211, CRL_REG_LEN_08BIT, 0x84},
+	{0xd212, CRL_REG_LEN_08BIT, 0x55},
+	{0xd213, CRL_REG_LEN_08BIT, 0x88},
+	{0xd214, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd215, CRL_REG_LEN_08BIT, 0x65},
+	{0xd216, CRL_REG_LEN_08BIT, 0x00},
+	{0xd217, CRL_REG_LEN_08BIT, 0x00},
+	{0xd218, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd219, CRL_REG_LEN_08BIT, 0x04},
+	{0xd21a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd21b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd21c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd21d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21f, CRL_REG_LEN_08BIT, 0xce},
+	{0xd220, CRL_REG_LEN_08BIT, 0x19},
+	{0xd221, CRL_REG_LEN_08BIT, 0x00},
+	{0xd222, CRL_REG_LEN_08BIT, 0x80},
+	{0xd223, CRL_REG_LEN_08BIT, 0x06},
+	{0xd224, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd225, CRL_REG_LEN_08BIT, 0x63},
+	{0xd226, CRL_REG_LEN_08BIT, 0x00},
+	{0xd227, CRL_REG_LEN_08BIT, 0x00},
+	{0xd228, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd229, CRL_REG_LEN_08BIT, 0x63},
+	{0xd22a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22b, CRL_REG_LEN_08BIT, 0x40},
+	{0xd22c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd22d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd22e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd230, CRL_REG_LEN_08BIT, 0x13},
+	{0xd231, CRL_REG_LEN_08BIT, 0xff},
+	{0xd232, CRL_REG_LEN_08BIT, 0xff},
+	{0xd233, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd234, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd235, CRL_REG_LEN_08BIT, 0x00},
+	{0xd236, CRL_REG_LEN_08BIT, 0x00},
+	{0xd237, CRL_REG_LEN_08BIT, 0x40},
+	{0xd238, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd239, CRL_REG_LEN_08BIT, 0x64},
+	{0xd23a, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23b, CRL_REG_LEN_08BIT, 0x86},
+	{0xd23c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd23d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd23e, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23f, CRL_REG_LEN_08BIT, 0x87},
+	{0xd240, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd241, CRL_REG_LEN_08BIT, 0x03},
+	{0xd242, CRL_REG_LEN_08BIT, 0x40},
+	{0xd243, CRL_REG_LEN_08BIT, 0x00},
+	{0xd244, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd245, CRL_REG_LEN_08BIT, 0x64},
+	{0xd246, CRL_REG_LEN_08BIT, 0x55},
+	{0xd247, CRL_REG_LEN_08BIT, 0x88},
+	{0xd248, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd249, CRL_REG_LEN_08BIT, 0x05},
+	{0xd24a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd24c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd24d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd24e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd250, CRL_REG_LEN_08BIT, 0x03},
+	{0xd251, CRL_REG_LEN_08BIT, 0xff},
+	{0xd252, CRL_REG_LEN_08BIT, 0xff},
+	{0xd253, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd254, CRL_REG_LEN_08BIT, 0x19},
+	{0xd255, CRL_REG_LEN_08BIT, 0x00},
+	{0xd256, CRL_REG_LEN_08BIT, 0x80},
+	{0xd257, CRL_REG_LEN_08BIT, 0x06},
+	{0xd258, CRL_REG_LEN_08BIT, 0x94},
+	{0xd259, CRL_REG_LEN_08BIT, 0x84},
+	{0xd25a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd25b, CRL_REG_LEN_08BIT, 0x72},
+	{0xd25c, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd25d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd25e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd25f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd260, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd261, CRL_REG_LEN_08BIT, 0x00},
+	{0xd262, CRL_REG_LEN_08BIT, 0x00},
+	{0xd263, CRL_REG_LEN_08BIT, 0x4d},
+	{0xd264, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd265, CRL_REG_LEN_08BIT, 0x60},
+	{0xd266, CRL_REG_LEN_08BIT, 0x01},
+	{0xd267, CRL_REG_LEN_08BIT, 0x00},
+	{0xd268, CRL_REG_LEN_08BIT, 0x85},
+	{0xd269, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd26a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26c, CRL_REG_LEN_08BIT, 0x98},
+	{0xd26d, CRL_REG_LEN_08BIT, 0x70},
+	{0xd26e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd270, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd271, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd272, CRL_REG_LEN_08BIT, 0x00},
+	{0xd273, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd274, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd275, CRL_REG_LEN_08BIT, 0x63},
+	{0xd276, CRL_REG_LEN_08BIT, 0x20},
+	{0xd277, CRL_REG_LEN_08BIT, 0x00},
+	{0xd278, CRL_REG_LEN_08BIT, 0x10},
+	{0xd279, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27b, CRL_REG_LEN_08BIT, 0x07},
+	{0xd27c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd27d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd280, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd281, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd282, CRL_REG_LEN_08BIT, 0x00},
+	{0xd283, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd284, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd285, CRL_REG_LEN_08BIT, 0x63},
+	{0xd286, CRL_REG_LEN_08BIT, 0x28},
+	{0xd287, CRL_REG_LEN_08BIT, 0x02},
+	{0xd288, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd289, CRL_REG_LEN_08BIT, 0x84},
+	{0xd28a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd28b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd28c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd28d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd28e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd28f, CRL_REG_LEN_08BIT, 0x66},
+	{0xd290, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd291, CRL_REG_LEN_08BIT, 0x63},
+	{0xd292, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd293, CRL_REG_LEN_08BIT, 0x06},
+	{0xd294, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd295, CRL_REG_LEN_08BIT, 0x6a},
+	{0xd296, CRL_REG_LEN_08BIT, 0x00},
+	{0xd297, CRL_REG_LEN_08BIT, 0x77},
+	{0xd298, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd299, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29a, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd29b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd29c, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd29d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd29f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a3, CRL_REG_LEN_08BIT, 0x5a},
+	{0xd2a4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd2a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd2a9, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd2aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ab, CRL_REG_LEN_08BIT, 0x78},
+	{0xd2ac, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd2ad, CRL_REG_LEN_08BIT, 0x63},
+	{0xd2ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2af, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd2b1, CRL_REG_LEN_08BIT, 0x64},
+	{0xd2b2, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd2b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd2b4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b8, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2b9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2bb, CRL_REG_LEN_08BIT, 0x59},
+	{0xd2bc, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2bd, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2bf, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c0, CRL_REG_LEN_08BIT, 0xb9},
+	{0xd2c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c3, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2c4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd2c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2c9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd2ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cc, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2cd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cf, CRL_REG_LEN_08BIT, 0x51},
+	{0xd2d0, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2d1, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2d2, CRL_REG_LEN_08BIT, 0x58},
+	{0xd2d3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2d4, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2d5, CRL_REG_LEN_08BIT, 0x81},
+	{0xd2d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2d7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2d8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2d9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd2da, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2dc, CRL_REG_LEN_08BIT, 0x10},
+	{0xd2dd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2df, CRL_REG_LEN_08BIT, 0x05},
+	{0xd2e0, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2e1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2e4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd2e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd2e6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e8, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2ea, CRL_REG_LEN_08BIT, 0x28},
+	{0xd2eb, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2ec, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2ed, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ef, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2f0, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2f1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd2f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f4, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f7, CRL_REG_LEN_08BIT, 0x43},
+	{0xd2f8, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd2f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fc, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2fd, CRL_REG_LEN_08BIT, 0x61},
+	{0xd2fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ff, CRL_REG_LEN_08BIT, 0x18},
+	{0xd300, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd301, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd302, CRL_REG_LEN_08BIT, 0x01},
+	{0xd303, CRL_REG_LEN_08BIT, 0x00},
+	{0xd304, CRL_REG_LEN_08BIT, 0x10},
+	{0xd305, CRL_REG_LEN_08BIT, 0x00},
+	{0xd306, CRL_REG_LEN_08BIT, 0x00},
+	{0xd307, CRL_REG_LEN_08BIT, 0x03},
+	{0xd308, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd309, CRL_REG_LEN_08BIT, 0x80},
+	{0xd30a, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd30c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd30f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd310, CRL_REG_LEN_08BIT, 0x18},
+	{0xd311, CRL_REG_LEN_08BIT, 0x60},
+	{0xd312, CRL_REG_LEN_08BIT, 0x80},
+	{0xd313, CRL_REG_LEN_08BIT, 0x06},
+	{0xd314, CRL_REG_LEN_08BIT, 0x85},
+	{0xd315, CRL_REG_LEN_08BIT, 0x01},
+	{0xd316, CRL_REG_LEN_08BIT, 0x00},
+	{0xd317, CRL_REG_LEN_08BIT, 0x14},
+	{0xd318, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd319, CRL_REG_LEN_08BIT, 0x83},
+	{0xd31a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd31b, CRL_REG_LEN_08BIT, 0x29},
+	{0xd31c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd31d, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd31e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd31f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd320, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd321, CRL_REG_LEN_08BIT, 0x84},
+	{0xd322, CRL_REG_LEN_08BIT, 0x00},
+	{0xd323, CRL_REG_LEN_08BIT, 0x00},
+	{0xd324, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd325, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd326, CRL_REG_LEN_08BIT, 0x38},
+	{0xd327, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd328, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd329, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd32a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32b, CRL_REG_LEN_08BIT, 0x09},
+	{0xd32c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd32d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd32e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd330, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd331, CRL_REG_LEN_08BIT, 0x06},
+	{0xd332, CRL_REG_LEN_08BIT, 0x18},
+	{0xd333, CRL_REG_LEN_08BIT, 0x00},
+	{0xd334, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd335, CRL_REG_LEN_08BIT, 0x65},
+	{0xd336, CRL_REG_LEN_08BIT, 0x00},
+	{0xd337, CRL_REG_LEN_08BIT, 0x00},
+	{0xd338, CRL_REG_LEN_08BIT, 0x84},
+	{0xd339, CRL_REG_LEN_08BIT, 0x81},
+	{0xd33a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd33b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd33c, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33d, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd33f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd340, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd341, CRL_REG_LEN_08BIT, 0x07},
+	{0xd342, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd343, CRL_REG_LEN_08BIT, 0x00},
+	{0xd344, CRL_REG_LEN_08BIT, 0x03},
+	{0xd345, CRL_REG_LEN_08BIT, 0xff},
+	{0xd346, CRL_REG_LEN_08BIT, 0xff},
+	{0xd347, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd348, CRL_REG_LEN_08BIT, 0x18},
+	{0xd349, CRL_REG_LEN_08BIT, 0x60},
+	{0xd34a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd34b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd34c, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd34d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34f, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd350, CRL_REG_LEN_08BIT, 0x18},
+	{0xd351, CRL_REG_LEN_08BIT, 0x60},
+	{0xd352, CRL_REG_LEN_08BIT, 0x80},
+	{0xd353, CRL_REG_LEN_08BIT, 0x06},
+	{0xd354, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd355, CRL_REG_LEN_08BIT, 0x83},
+	{0xd356, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd357, CRL_REG_LEN_08BIT, 0x43},
+	{0xd358, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd359, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd35a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd35b, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd35c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd35d, CRL_REG_LEN_08BIT, 0x84},
+	{0xd35e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd35f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd360, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd361, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd362, CRL_REG_LEN_08BIT, 0x38},
+	{0xd363, CRL_REG_LEN_08BIT, 0x0e},
+	{0xd364, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd365, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd366, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd367, CRL_REG_LEN_08BIT, 0x42},
+	{0xd368, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd369, CRL_REG_LEN_08BIT, 0x05},
+	{0xd36a, CRL_REG_LEN_08BIT, 0x20},
+	{0xd36b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd36d, CRL_REG_LEN_08BIT, 0x67},
+	{0xd36e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd370, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd371, CRL_REG_LEN_08BIT, 0x06},
+	{0xd372, CRL_REG_LEN_08BIT, 0x18},
+	{0xd373, CRL_REG_LEN_08BIT, 0x00},
+	{0xd374, CRL_REG_LEN_08BIT, 0x18},
+	{0xd375, CRL_REG_LEN_08BIT, 0x60},
+	{0xd376, CRL_REG_LEN_08BIT, 0x80},
+	{0xd377, CRL_REG_LEN_08BIT, 0x01},
+	{0xd378, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd379, CRL_REG_LEN_08BIT, 0x63},
+	{0xd37a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37b, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd37c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd37d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd37e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd380, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd381, CRL_REG_LEN_08BIT, 0x23},
+	{0xd382, CRL_REG_LEN_08BIT, 0x00},
+	{0xd383, CRL_REG_LEN_08BIT, 0x01},
+	{0xd384, CRL_REG_LEN_08BIT, 0x10},
+	{0xd385, CRL_REG_LEN_08BIT, 0x00},
+	{0xd386, CRL_REG_LEN_08BIT, 0x00},
+	{0xd387, CRL_REG_LEN_08BIT, 0x28},
+	{0xd388, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd389, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd38a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38c, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd390, CRL_REG_LEN_08BIT, 0x15},
+	{0xd391, CRL_REG_LEN_08BIT, 0x00},
+	{0xd392, CRL_REG_LEN_08BIT, 0x00},
+	{0xd393, CRL_REG_LEN_08BIT, 0x00},
+	{0xd394, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd395, CRL_REG_LEN_08BIT, 0x6c},
+	{0xd396, CRL_REG_LEN_08BIT, 0x28},
+	{0xd397, CRL_REG_LEN_08BIT, 0x02},
+	{0xd398, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd399, CRL_REG_LEN_08BIT, 0x84},
+	{0xd39a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd39b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd39c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd39d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd39e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd39f, CRL_REG_LEN_08BIT, 0x22},
+	{0xd3a0, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd3a1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3a3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3a4, CRL_REG_LEN_08BIT, 0x03},
+	{0xd3a5, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3a6, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3a7, CRL_REG_LEN_08BIT, 0xb2},
+	{0xd3a8, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3a9, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd3aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ac, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3ad, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3af, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3b1, CRL_REG_LEN_08BIT, 0xe7},
+	{0xd3b2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3b3, CRL_REG_LEN_08BIT, 0x55},
+	{0xd3b4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3b5, CRL_REG_LEN_08BIT, 0x87},
+	{0xd3b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd3b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd3ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bb, CRL_REG_LEN_08BIT, 0x02},
+	{0xd3bc, CRL_REG_LEN_08BIT, 0x19},
+	{0xd3bd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3be, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3bf, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3c0, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3c1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3c2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c4, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd3c5, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3c6, CRL_REG_LEN_08BIT, 0x56},
+	{0xd3c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd3c9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cb, CRL_REG_LEN_08BIT, 0x04},
+	{0xd3cc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3cd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3ce, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3cf, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3d0, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3d1, CRL_REG_LEN_08BIT, 0xc5},
+	{0xd3d2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd3d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3d6, CRL_REG_LEN_08BIT, 0x28},
+	{0xd3d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3d9, CRL_REG_LEN_08BIT, 0x84},
+	{0xd3da, CRL_REG_LEN_08BIT, 0x1d},
+	{0xd3db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3dc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3dd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd3de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3df, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3e0, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3e1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3e2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3e3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd3e5, CRL_REG_LEN_08BIT, 0x45},
+	{0xd3e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e7, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3e8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3e9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3eb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ec, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3ed, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3ee, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f0, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd3f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f3, CRL_REG_LEN_08BIT, 0xf1},
+	{0xd3f4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f8, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3fb, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd3fc, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ff, CRL_REG_LEN_08BIT, 0x00},
+	{0xd400, CRL_REG_LEN_08BIT, 0x03},
+	{0xd401, CRL_REG_LEN_08BIT, 0xff},
+	{0xd402, CRL_REG_LEN_08BIT, 0xff},
+	{0xd403, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd404, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd405, CRL_REG_LEN_08BIT, 0x01},
+	{0xd406, CRL_REG_LEN_08BIT, 0x40},
+	{0xd407, CRL_REG_LEN_08BIT, 0x18},
+	{0xd408, CRL_REG_LEN_08BIT, 0x03},
+	{0xd409, CRL_REG_LEN_08BIT, 0xff},
+	{0xd40a, CRL_REG_LEN_08BIT, 0xff},
+	{0xd40b, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd40c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd40d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd40e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd410, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd411, CRL_REG_LEN_08BIT, 0x60},
+	{0xd412, CRL_REG_LEN_08BIT, 0x00},
+	{0xd413, CRL_REG_LEN_08BIT, 0x00},
+	{0xd414, CRL_REG_LEN_08BIT, 0x03},
+	{0xd415, CRL_REG_LEN_08BIT, 0xff},
+	{0xd416, CRL_REG_LEN_08BIT, 0xff},
+	{0xd417, CRL_REG_LEN_08BIT, 0xb6},
+	{0xd418, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd419, CRL_REG_LEN_08BIT, 0x01},
+	{0xd41a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd41b, CRL_REG_LEN_08BIT, 0x14},
+	{0xd41c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd41d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41f, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd420, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd421, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd422, CRL_REG_LEN_08BIT, 0x00},
+	{0xd423, CRL_REG_LEN_08BIT, 0xff},
+	{0xd424, CRL_REG_LEN_08BIT, 0x85},
+	{0xd425, CRL_REG_LEN_08BIT, 0x21},
+	{0xd426, CRL_REG_LEN_08BIT, 0x00},
+	{0xd427, CRL_REG_LEN_08BIT, 0x00},
+	{0xd428, CRL_REG_LEN_08BIT, 0x85},
+	{0xd429, CRL_REG_LEN_08BIT, 0x41},
+	{0xd42a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd42c, CRL_REG_LEN_08BIT, 0x85},
+	{0xd42d, CRL_REG_LEN_08BIT, 0x81},
+	{0xd42e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd430, CRL_REG_LEN_08BIT, 0x85},
+	{0xd431, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd432, CRL_REG_LEN_08BIT, 0x00},
+	{0xd433, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd434, CRL_REG_LEN_08BIT, 0x86},
+	{0xd435, CRL_REG_LEN_08BIT, 0x01},
+	{0xd436, CRL_REG_LEN_08BIT, 0x00},
+	{0xd437, CRL_REG_LEN_08BIT, 0x10},
+	{0xd438, CRL_REG_LEN_08BIT, 0x44},
+	{0xd439, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43a, CRL_REG_LEN_08BIT, 0x48},
+	{0xd43b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd43d, CRL_REG_LEN_08BIT, 0x21},
+	{0xd43e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43f, CRL_REG_LEN_08BIT, 0x1c},
+	{0xd440, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd441, CRL_REG_LEN_08BIT, 0x21},
+	{0xd442, CRL_REG_LEN_08BIT, 0xff},
+	{0xd443, CRL_REG_LEN_08BIT, 0xfc},
+	{0xd444, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd445, CRL_REG_LEN_08BIT, 0x01},
+	{0xd446, CRL_REG_LEN_08BIT, 0x48},
+	{0xd447, CRL_REG_LEN_08BIT, 0x00},
+	{0xd448, CRL_REG_LEN_08BIT, 0x18},
+	{0xd449, CRL_REG_LEN_08BIT, 0x60},
+	{0xd44a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd44b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd44c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd44d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd44e, CRL_REG_LEN_08BIT, 0x07},
+	{0xd44f, CRL_REG_LEN_08BIT, 0x80},
+	{0xd450, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd451, CRL_REG_LEN_08BIT, 0x63},
+	{0xd452, CRL_REG_LEN_08BIT, 0x00},
+	{0xd453, CRL_REG_LEN_08BIT, 0x68},
+	{0xd454, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd455, CRL_REG_LEN_08BIT, 0x03},
+	{0xd456, CRL_REG_LEN_08BIT, 0x00},
+	{0xd457, CRL_REG_LEN_08BIT, 0x00},
+	{0xd458, CRL_REG_LEN_08BIT, 0x10},
+	{0xd459, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45b, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd45c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd460, CRL_REG_LEN_08BIT, 0x07},
+	{0xd461, CRL_REG_LEN_08BIT, 0xff},
+	{0xd462, CRL_REG_LEN_08BIT, 0xd9},
+	{0xd463, CRL_REG_LEN_08BIT, 0x7c},
+	{0xd464, CRL_REG_LEN_08BIT, 0x15},
+	{0xd465, CRL_REG_LEN_08BIT, 0x00},
+	{0xd466, CRL_REG_LEN_08BIT, 0x00},
+	{0xd467, CRL_REG_LEN_08BIT, 0x00},
+	{0xd468, CRL_REG_LEN_08BIT, 0x18},
+	{0xd469, CRL_REG_LEN_08BIT, 0x60},
+	{0xd46a, CRL_REG_LEN_08BIT, 0x80},
+	{0xd46b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd46c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd46d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd46e, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd46f, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd470, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd471, CRL_REG_LEN_08BIT, 0x63},
+	{0xd472, CRL_REG_LEN_08BIT, 0x00},
+	{0xd473, CRL_REG_LEN_08BIT, 0x00},
+	{0xd474, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd475, CRL_REG_LEN_08BIT, 0x23},
+	{0xd476, CRL_REG_LEN_08BIT, 0x00},
+	{0xd477, CRL_REG_LEN_08BIT, 0x01},
+	{0xd478, CRL_REG_LEN_08BIT, 0x10},
+	{0xd479, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47b, CRL_REG_LEN_08BIT, 0x25},
+	{0xd47c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd47d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd480, CRL_REG_LEN_08BIT, 0x00},
+	{0xd481, CRL_REG_LEN_08BIT, 0x00},
+	{0xd482, CRL_REG_LEN_08BIT, 0x00},
+	{0xd483, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd484, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd485, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd486, CRL_REG_LEN_08BIT, 0x00},
+	{0xd487, CRL_REG_LEN_08BIT, 0x02},
+	{0xd488, CRL_REG_LEN_08BIT, 0x07},
+	{0xd489, CRL_REG_LEN_08BIT, 0xff},
+	{0xd48a, CRL_REG_LEN_08BIT, 0xd6},
+	{0xd48b, CRL_REG_LEN_08BIT, 0x08},
+	{0xd48c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd48d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd490, CRL_REG_LEN_08BIT, 0x18},
+	{0xd491, CRL_REG_LEN_08BIT, 0x60},
+	{0xd492, CRL_REG_LEN_08BIT, 0x80},
+	{0xd493, CRL_REG_LEN_08BIT, 0x06},
+	{0xd494, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd495, CRL_REG_LEN_08BIT, 0x63},
+	{0xd496, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd497, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd498, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd499, CRL_REG_LEN_08BIT, 0x63},
+	{0xd49a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd49d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd49e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4a0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a3, CRL_REG_LEN_08BIT, 0x1b},
+	{0xd4a4, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd4a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd4a9, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd4aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ab, CRL_REG_LEN_08BIT, 0x02},
+	{0xd4ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4ad, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd4ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4b1, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd4b2, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4b5, CRL_REG_LEN_08BIT, 0x67},
+	{0xd4b6, CRL_REG_LEN_08BIT, 0x30},
+	{0xd4b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4b9, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd4ba, CRL_REG_LEN_08BIT, 0xce},
+	{0xd4bb, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd4bc, CRL_REG_LEN_08BIT, 0x19},
+	{0xd4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4be, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4bf, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4c0, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd4c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd4c2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4c3, CRL_REG_LEN_08BIT, 0x14},
+	{0xd4c4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4c5, CRL_REG_LEN_08BIT, 0x83},
+	{0xd4c6, CRL_REG_LEN_08BIT, 0x28},
+	{0xd4c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4c8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4c9, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd4ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4cb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4cc, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4cd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ce, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd4d1, CRL_REG_LEN_08BIT, 0x84},
+	{0xd4d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4d5, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd4d6, CRL_REG_LEN_08BIT, 0x58},
+	{0xd4d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd4d9, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd4da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4dc, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd4dd, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4df, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4e0, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd4e1, CRL_REG_LEN_08BIT, 0x46},
+	{0xd4e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e3, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4e4, CRL_REG_LEN_08BIT, 0x94},
+	{0xd4e5, CRL_REG_LEN_08BIT, 0x85},
+	{0xd4e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd4e9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4eb, CRL_REG_LEN_08BIT, 0x98},
+	{0xd4ec, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4ed, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4ee, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f0, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd4f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4f2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4f3, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd4f4, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd4f5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd4f6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4f9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4fc, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd4fd, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ff, CRL_REG_LEN_08BIT, 0xff},
+	{0xd500, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd501, CRL_REG_LEN_08BIT, 0x48},
+	{0xd502, CRL_REG_LEN_08BIT, 0x00},
+	{0xd503, CRL_REG_LEN_08BIT, 0x01},
+	{0xd504, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd505, CRL_REG_LEN_08BIT, 0xff},
+	{0xd506, CRL_REG_LEN_08BIT, 0xff},
+	{0xd507, CRL_REG_LEN_08BIT, 0xea},
+	{0xd508, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd509, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd50a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd50b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd50c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd50d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd50e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd50f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd510, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd511, CRL_REG_LEN_08BIT, 0x63},
+	{0xd512, CRL_REG_LEN_08BIT, 0x06},
+	{0xd513, CRL_REG_LEN_08BIT, 0x14},
+	{0xd514, CRL_REG_LEN_08BIT, 0x07},
+	{0xd515, CRL_REG_LEN_08BIT, 0xff},
+	{0xd516, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd517, CRL_REG_LEN_08BIT, 0xe9},
+	{0xd518, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd519, CRL_REG_LEN_08BIT, 0x83},
+	{0xd51a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd51b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd51c, CRL_REG_LEN_08BIT, 0x85},
+	{0xd51d, CRL_REG_LEN_08BIT, 0x21},
+	{0xd51e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd51f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd520, CRL_REG_LEN_08BIT, 0x44},
+	{0xd521, CRL_REG_LEN_08BIT, 0x00},
+	{0xd522, CRL_REG_LEN_08BIT, 0x48},
+	{0xd523, CRL_REG_LEN_08BIT, 0x00},
+	{0xd524, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd525, CRL_REG_LEN_08BIT, 0x21},
+	{0xd526, CRL_REG_LEN_08BIT, 0x00},
+	{0xd527, CRL_REG_LEN_08BIT, 0x04},
+	{0xd528, CRL_REG_LEN_08BIT, 0x18},
+	{0xd529, CRL_REG_LEN_08BIT, 0x60},
+	{0xd52a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd52b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd52c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd52d, CRL_REG_LEN_08BIT, 0x80},
+	{0xd52e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd52f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd530, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd531, CRL_REG_LEN_08BIT, 0x63},
+	{0xd532, CRL_REG_LEN_08BIT, 0x09},
+	{0xd533, CRL_REG_LEN_08BIT, 0xef},
+	{0xd534, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd535, CRL_REG_LEN_08BIT, 0x03},
+	{0xd536, CRL_REG_LEN_08BIT, 0x20},
+	{0xd537, CRL_REG_LEN_08BIT, 0x00},
+	{0xd538, CRL_REG_LEN_08BIT, 0x18},
+	{0xd539, CRL_REG_LEN_08BIT, 0x60},
+	{0xd53a, CRL_REG_LEN_08BIT, 0x80},
+	{0xd53b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd53c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd53d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd53e, CRL_REG_LEN_08BIT, 0xc9},
+	{0xd53f, CRL_REG_LEN_08BIT, 0xef},
+	{0xd540, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd541, CRL_REG_LEN_08BIT, 0x03},
+	{0xd542, CRL_REG_LEN_08BIT, 0x20},
+	{0xd543, CRL_REG_LEN_08BIT, 0x00},
+	{0xd544, CRL_REG_LEN_08BIT, 0x44},
+	{0xd545, CRL_REG_LEN_08BIT, 0x00},
+	{0xd546, CRL_REG_LEN_08BIT, 0x48},
+	{0xd547, CRL_REG_LEN_08BIT, 0x00},
+	{0xd548, CRL_REG_LEN_08BIT, 0x15},
+	{0xd549, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd54d, CRL_REG_LEN_08BIT, 0x80},
+	{0xd54e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd550, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd551, CRL_REG_LEN_08BIT, 0x84},
+	{0xd552, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd553, CRL_REG_LEN_08BIT, 0x12},
+	{0xd554, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd555, CRL_REG_LEN_08BIT, 0x64},
+	{0xd556, CRL_REG_LEN_08BIT, 0x00},
+	{0xd557, CRL_REG_LEN_08BIT, 0x00},
+	{0xd558, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd559, CRL_REG_LEN_08BIT, 0x03},
+	{0xd55a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd55b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd55c, CRL_REG_LEN_08BIT, 0x13},
+	{0xd55d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd55e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd55f, CRL_REG_LEN_08BIT, 0xfe},
+	{0xd560, CRL_REG_LEN_08BIT, 0x15},
+	{0xd561, CRL_REG_LEN_08BIT, 0x00},
+	{0xd562, CRL_REG_LEN_08BIT, 0x00},
+	{0xd563, CRL_REG_LEN_08BIT, 0x00},
+	{0xd564, CRL_REG_LEN_08BIT, 0x44},
+	{0xd565, CRL_REG_LEN_08BIT, 0x00},
+	{0xd566, CRL_REG_LEN_08BIT, 0x48},
+	{0xd567, CRL_REG_LEN_08BIT, 0x00},
+	{0xd568, CRL_REG_LEN_08BIT, 0x15},
+	{0xd569, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56c, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd570, CRL_REG_LEN_08BIT, 0x00},
+	{0xd571, CRL_REG_LEN_08BIT, 0x00},
+	{0xd572, CRL_REG_LEN_08BIT, 0x00},
+	{0xd573, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0e, CRL_REG_LEN_08BIT, 0x33},
+	{0x6f0f, CRL_REG_LEN_08BIT, 0x33},
+	{0x460e, CRL_REG_LEN_08BIT, 0x08},
+	{0x460f, CRL_REG_LEN_08BIT, 0x01},
+	{0x4610, CRL_REG_LEN_08BIT, 0x00},
+	{0x4611, CRL_REG_LEN_08BIT, 0x01},
+	{0x4612, CRL_REG_LEN_08BIT, 0x00},
+	{0x4613, CRL_REG_LEN_08BIT, 0x01},
+	{0x4605, CRL_REG_LEN_08BIT, 0x0b},
+	{0x4608, CRL_REG_LEN_08BIT, 0x00},
+	{0x4609, CRL_REG_LEN_08BIT, 0x08},
+	{0x4602, CRL_REG_LEN_08BIT, 0x02},
+	{0x4603, CRL_REG_LEN_08BIT, 0xd8},
+	{0x6804, CRL_REG_LEN_08BIT, 0x00},
+	{0x6805, CRL_REG_LEN_08BIT, 0x06},
+	{0x6806, CRL_REG_LEN_08BIT, 0x00},
+	{0x5120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3504, CRL_REG_LEN_08BIT, 0x00},
+	{0x6800, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x5000, CRL_REG_LEN_08BIT, 0xff},
+	{0x5001, CRL_REG_LEN_08BIT, 0xbf},
+	{0x5002, CRL_REG_LEN_08BIT, 0x7e},
+	{0x5003, CRL_REG_LEN_08BIT, 0x0c},
+	{0x503d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc450, CRL_REG_LEN_08BIT, 0x01},
+	{0xc452, CRL_REG_LEN_08BIT, 0x04},
+	{0xc453, CRL_REG_LEN_08BIT, 0x00},
+	{0xc454, CRL_REG_LEN_08BIT, 0x00},
+	{0xc455, CRL_REG_LEN_08BIT, 0x00},
+	{0xc456, CRL_REG_LEN_08BIT, 0x00},
+	{0xc457, CRL_REG_LEN_08BIT, 0x00},
+	{0xc458, CRL_REG_LEN_08BIT, 0x00},
+	{0xc459, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc45f, CRL_REG_LEN_08BIT, 0x01},
+	{0xc460, CRL_REG_LEN_08BIT, 0x01},
+	{0xc461, CRL_REG_LEN_08BIT, 0x01},
+	{0xc462, CRL_REG_LEN_08BIT, 0x01},
+	{0xc464, CRL_REG_LEN_08BIT, 0x88},
+	{0xc465, CRL_REG_LEN_08BIT, 0x00},
+	{0xc466, CRL_REG_LEN_08BIT, 0x8a},
+	{0xc467, CRL_REG_LEN_08BIT, 0x00},
+	{0xc468, CRL_REG_LEN_08BIT, 0x86},
+	{0xc469, CRL_REG_LEN_08BIT, 0x00},
+	{0xc46a, CRL_REG_LEN_08BIT, 0x40},
+	{0xc46b, CRL_REG_LEN_08BIT, 0x50},
+	{0xc46c, CRL_REG_LEN_08BIT, 0x30},
+	{0xc46d, CRL_REG_LEN_08BIT, 0x28},
+	{0xc46e, CRL_REG_LEN_08BIT, 0x60},
+	{0xc46f, CRL_REG_LEN_08BIT, 0x40},
+	{0xc47c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc47d, CRL_REG_LEN_08BIT, 0x38},
+	{0xc47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc480, CRL_REG_LEN_08BIT, 0x00},
+	{0xc481, CRL_REG_LEN_08BIT, 0xff},
+	{0xc482, CRL_REG_LEN_08BIT, 0x00},
+	{0xc483, CRL_REG_LEN_08BIT, 0x40},
+	{0xc484, CRL_REG_LEN_08BIT, 0x00},
+	{0xc485, CRL_REG_LEN_08BIT, 0x18},
+	{0xc486, CRL_REG_LEN_08BIT, 0x00},
+	{0xc487, CRL_REG_LEN_08BIT, 0x18},
+	{0xc488, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc489, CRL_REG_LEN_08BIT, 0x40},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x40},
+	{0xc48c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48d, CRL_REG_LEN_08BIT, 0x04},
+	{0xc48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48f, CRL_REG_LEN_08BIT, 0x04},
+	{0xc490, CRL_REG_LEN_08BIT, 0x07},
+	{0xc492, CRL_REG_LEN_08BIT, 0x20},
+	{0xc493, CRL_REG_LEN_08BIT, 0x08},
+	{0xc498, CRL_REG_LEN_08BIT, 0x02},
+	{0xc499, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49a, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49c, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49f, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a5, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4a8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a9, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4aa, CRL_REG_LEN_08BIT, 0x0d},
+	{0xc4ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4ac, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4ad, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4b4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b5, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b7, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4ba, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4be, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4bf, CRL_REG_LEN_08BIT, 0x33},
+	{0xc4c8, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4c9, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4ca, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0x51},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0x51},
+	{0xc4d0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4d1, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4e0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4e1, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4e2, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4e4, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4e5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4e6, CRL_REG_LEN_08BIT, 0x30},
+	{0xc4e7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4e8, CRL_REG_LEN_08BIT, 0x50},
+	{0xc4e9, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4ea, CRL_REG_LEN_08BIT, 0x70},
+	{0xc4eb, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4ec, CRL_REG_LEN_08BIT, 0x90},
+	{0xc4ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc4ee, CRL_REG_LEN_08BIT, 0xb0},
+	{0xc4ef, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc4f0, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4f1, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc4f2, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4f3, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4f4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4f6, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f8, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4f9, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fe, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4ff, CRL_REG_LEN_08BIT, 0x02},
+	{0xc500, CRL_REG_LEN_08BIT, 0x48},
+	{0xc501, CRL_REG_LEN_08BIT, 0x74},
+	{0xc502, CRL_REG_LEN_08BIT, 0x58},
+	{0xc503, CRL_REG_LEN_08BIT, 0x80},
+	{0xc504, CRL_REG_LEN_08BIT, 0x05},
+	{0xc505, CRL_REG_LEN_08BIT, 0x80},
+	{0xc506, CRL_REG_LEN_08BIT, 0x03},
+	{0xc507, CRL_REG_LEN_08BIT, 0x80},
+	{0xc508, CRL_REG_LEN_08BIT, 0x01},
+	{0xc509, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc50a, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50b, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc50c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50d, CRL_REG_LEN_08BIT, 0x2c},
+	{0xc50e, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50f, CRL_REG_LEN_08BIT, 0x0a},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x00},
+	{0xc512, CRL_REG_LEN_08BIT, 0xe5},
+	{0xc513, CRL_REG_LEN_08BIT, 0x14},
+	{0xc514, CRL_REG_LEN_08BIT, 0x04},
+	{0xc515, CRL_REG_LEN_08BIT, 0x00},
+	{0xc518, CRL_REG_LEN_08BIT, 0x03},
+	{0xc519, CRL_REG_LEN_08BIT, 0x48},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x07},
+	{0xc51b, CRL_REG_LEN_08BIT, 0x70},
+	{0xc2e0, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e1, CRL_REG_LEN_08BIT, 0x51},
+	{0xc2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e3, CRL_REG_LEN_08BIT, 0xd6},
+	{0xc2e4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2e5, CRL_REG_LEN_08BIT, 0x5e},
+	{0xc2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2ea, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2eb, CRL_REG_LEN_08BIT, 0x90},
+	{0xc2ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2ee, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2ef, CRL_REG_LEN_08BIT, 0x64},
+	{0xc308, CRL_REG_LEN_08BIT, 0x00},
+	{0xc309, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xc30e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc310, CRL_REG_LEN_08BIT, 0x01},
+	{0xc311, CRL_REG_LEN_08BIT, 0x60},
+	{0xc312, CRL_REG_LEN_08BIT, 0xff},
+	{0xc313, CRL_REG_LEN_08BIT, 0x08},
+	{0xc314, CRL_REG_LEN_08BIT, 0x01},
+	{0xc315, CRL_REG_LEN_08BIT, 0x7f},
+	{0xc316, CRL_REG_LEN_08BIT, 0xff},
+	{0xc317, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc318, CRL_REG_LEN_08BIT, 0x00},
+	{0xc319, CRL_REG_LEN_08BIT, 0x0c},
+	{0xc31a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31b, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc31c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31d, CRL_REG_LEN_08BIT, 0x14},
+	{0xc31e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31f, CRL_REG_LEN_08BIT, 0xc5},
+	{0xc320, CRL_REG_LEN_08BIT, 0xff},
+	{0xc321, CRL_REG_LEN_08BIT, 0x4b},
+	{0xc322, CRL_REG_LEN_08BIT, 0xff},
+	{0xc323, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc324, CRL_REG_LEN_08BIT, 0xff},
+	{0xc325, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc326, CRL_REG_LEN_08BIT, 0x00},
+	{0xc327, CRL_REG_LEN_08BIT, 0x46},
+	{0xc328, CRL_REG_LEN_08BIT, 0xff},
+	{0xc329, CRL_REG_LEN_08BIT, 0xd2},
+	{0xc32a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32b, CRL_REG_LEN_08BIT, 0xe4},
+	{0xc32c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32d, CRL_REG_LEN_08BIT, 0xbb},
+	{0xc32e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc32f, CRL_REG_LEN_08BIT, 0x61},
+	{0xc330, CRL_REG_LEN_08BIT, 0xff},
+	{0xc331, CRL_REG_LEN_08BIT, 0xf9},
+	{0xc332, CRL_REG_LEN_08BIT, 0x00},
+	{0xc333, CRL_REG_LEN_08BIT, 0xd9},
+	{0xc334, CRL_REG_LEN_08BIT, 0x00},
+	{0xc335, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc336, CRL_REG_LEN_08BIT, 0x00},
+	{0xc337, CRL_REG_LEN_08BIT, 0xb1},
+	{0xc338, CRL_REG_LEN_08BIT, 0xff},
+	{0xc339, CRL_REG_LEN_08BIT, 0x64},
+	{0xc33a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33b, CRL_REG_LEN_08BIT, 0xeb},
+	{0xc33c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33d, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc33e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc33f, CRL_REG_LEN_08BIT, 0x48},
+	{0xc340, CRL_REG_LEN_08BIT, 0xff},
+	{0xc341, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc342, CRL_REG_LEN_08BIT, 0xff},
+	{0xc343, CRL_REG_LEN_08BIT, 0xed},
+	{0xc344, CRL_REG_LEN_08BIT, 0xff},
+	{0xc345, CRL_REG_LEN_08BIT, 0xad},
+	{0xc346, CRL_REG_LEN_08BIT, 0x00},
+	{0xc347, CRL_REG_LEN_08BIT, 0x66},
+	{0xc348, CRL_REG_LEN_08BIT, 0x01},
+	{0xc349, CRL_REG_LEN_08BIT, 0x00},
+	{0x6700, CRL_REG_LEN_08BIT, 0x04},
+	{0x6701, CRL_REG_LEN_08BIT, 0x7b},
+	{0x6702, CRL_REG_LEN_08BIT, 0xfd},
+	{0x6703, CRL_REG_LEN_08BIT, 0xf9},
+	{0x6704, CRL_REG_LEN_08BIT, 0x3d},
+	{0x6705, CRL_REG_LEN_08BIT, 0x71},
+	{0x6706, CRL_REG_LEN_08BIT, 0x78},
+	{0x6708, CRL_REG_LEN_08BIT, 0x05},
+	{0x6f06, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f07, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0a, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f00, CRL_REG_LEN_08BIT, 0x03},
+	{0xc34c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc34d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc34e, CRL_REG_LEN_08BIT, 0x46},
+	{0xc34f, CRL_REG_LEN_08BIT, 0x55},
+	{0xc350, CRL_REG_LEN_08BIT, 0x00},
+	{0xc351, CRL_REG_LEN_08BIT, 0x40},
+	{0xc352, CRL_REG_LEN_08BIT, 0x00},
+	{0xc353, CRL_REG_LEN_08BIT, 0xff},
+	{0xc354, CRL_REG_LEN_08BIT, 0x04},
+	{0xc355, CRL_REG_LEN_08BIT, 0x08},
+	{0xc356, CRL_REG_LEN_08BIT, 0x01},
+	{0xc357, CRL_REG_LEN_08BIT, 0xef},
+	{0xc358, CRL_REG_LEN_08BIT, 0x30},
+	{0xc359, CRL_REG_LEN_08BIT, 0x01},
+	{0xc35a, CRL_REG_LEN_08BIT, 0x64},
+	{0xc35b, CRL_REG_LEN_08BIT, 0x46},
+	{0xc35c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301b, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301a, CRL_REG_LEN_08BIT, 0xf0},
+	{0xceb0, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb1, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb2, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb3, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb4, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb5, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xceb6, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xceb7, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0x5608, CRL_REG_LEN_08BIT, 0x0d},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+};
+
+static struct crl_register_write_rep ov10635_640_480_YUV_HDR[] = {
+	{0x301b, CRL_REG_LEN_08BIT, 0xff},
+	{0x301c, CRL_REG_LEN_08BIT, 0xff},
+	{0x301a, CRL_REG_LEN_08BIT, 0xff},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x6900, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6901, CRL_REG_LEN_08BIT, 0x11},
+	{0x3503, CRL_REG_LEN_08BIT, 0x10},
+	{0x3025, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x14},
+	{0x3004, CRL_REG_LEN_08BIT, 0x23},
+	{0x3005, CRL_REG_LEN_08BIT, 0x20},
+	{0x3006, CRL_REG_LEN_08BIT, 0x91},
+	{0x3600, CRL_REG_LEN_08BIT, 0x74},
+	{0x3601, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3612, CRL_REG_LEN_08BIT, 0x00},
+	{0x3611, CRL_REG_LEN_08BIT, 0x67},
+	{0x3633, CRL_REG_LEN_08BIT, 0xca},
+	{0x3602, CRL_REG_LEN_08BIT, 0x2f},
+	{0x3603, CRL_REG_LEN_08BIT, 0x00},
+	{0x3630, CRL_REG_LEN_08BIT, 0x28},
+	{0x3631, CRL_REG_LEN_08BIT, 0x16},
+	{0x3714, CRL_REG_LEN_08BIT, 0x10},
+	{0x371d, CRL_REG_LEN_08BIT, 0x01},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x3020, CRL_REG_LEN_08BIT, 0x0b},
+	{0x3702, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3703, CRL_REG_LEN_08BIT, 0x17},
+	{0x3704, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x370c, CRL_REG_LEN_08BIT, 0xc7},
+	{0x370d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3712, CRL_REG_LEN_08BIT, 0x00},
+	{0x3713, CRL_REG_LEN_08BIT, 0x20},
+	{0x3715, CRL_REG_LEN_08BIT, 0x04},
+	{0x381d, CRL_REG_LEN_08BIT, 0x40},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3822, CRL_REG_LEN_08BIT, 0x50},
+	{0x3824, CRL_REG_LEN_08BIT, 0x50},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3804, CRL_REG_LEN_08BIT, 0x05},
+	{0x3805, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3806, CRL_REG_LEN_08BIT, 0x02},
+	{0x3807, CRL_REG_LEN_08BIT, 0x89},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0xa4},
+	{0x3808, CRL_REG_LEN_08BIT, 0x02},
+	{0x3809, CRL_REG_LEN_08BIT, 0x80},
+	{0x380a, CRL_REG_LEN_08BIT, 0x01},
+	{0x380b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x380c, CRL_REG_LEN_08BIT, 0x03},
+	{0x380d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x02},
+	{0x6e43, CRL_REG_LEN_08BIT, 0x08},
+	{0x380e, CRL_REG_LEN_08BIT, 0x02},
+	{0x380f, CRL_REG_LEN_08BIT, 0x08},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x3811, CRL_REG_LEN_08BIT, 0x08},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3828, CRL_REG_LEN_08BIT, 0x03},
+	{0x3829, CRL_REG_LEN_08BIT, 0x10},
+	{0x382a, CRL_REG_LEN_08BIT, 0x10},
+	{0x382b, CRL_REG_LEN_08BIT, 0x10},
+	{0x3621, CRL_REG_LEN_08BIT, 0x74},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x56d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d6, CRL_REG_LEN_08BIT, 0x80},
+	{0x56d7, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x56da, CRL_REG_LEN_08BIT, 0x80},
+	{0x56db, CRL_REG_LEN_08BIT, 0x00},
+	{0x56dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e9, CRL_REG_LEN_08BIT, 0x7f},
+	{0x56ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x56eb, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5100, CRL_REG_LEN_08BIT, 0x00},
+	{0x5101, CRL_REG_LEN_08BIT, 0x80},
+	{0x5102, CRL_REG_LEN_08BIT, 0x00},
+	{0x5103, CRL_REG_LEN_08BIT, 0x80},
+	{0x5104, CRL_REG_LEN_08BIT, 0x00},
+	{0x5105, CRL_REG_LEN_08BIT, 0x80},
+	{0x5106, CRL_REG_LEN_08BIT, 0x00},
+	{0x5107, CRL_REG_LEN_08BIT, 0x80},
+	{0x5108, CRL_REG_LEN_08BIT, 0x00},
+	{0x5109, CRL_REG_LEN_08BIT, 0x00},
+	{0x510a, CRL_REG_LEN_08BIT, 0x00},
+	{0x510b, CRL_REG_LEN_08BIT, 0x00},
+	{0x510c, CRL_REG_LEN_08BIT, 0x00},
+	{0x510d, CRL_REG_LEN_08BIT, 0x00},
+	{0x510e, CRL_REG_LEN_08BIT, 0x00},
+	{0x510f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5110, CRL_REG_LEN_08BIT, 0x00},
+	{0x5111, CRL_REG_LEN_08BIT, 0x80},
+	{0x5112, CRL_REG_LEN_08BIT, 0x00},
+	{0x5113, CRL_REG_LEN_08BIT, 0x80},
+	{0x5114, CRL_REG_LEN_08BIT, 0x00},
+	{0x5115, CRL_REG_LEN_08BIT, 0x80},
+	{0x5116, CRL_REG_LEN_08BIT, 0x00},
+	{0x5117, CRL_REG_LEN_08BIT, 0x80},
+	{0x5118, CRL_REG_LEN_08BIT, 0x00},
+	{0x5119, CRL_REG_LEN_08BIT, 0x00},
+	{0x511a, CRL_REG_LEN_08BIT, 0x00},
+	{0x511b, CRL_REG_LEN_08BIT, 0x00},
+	{0x511c, CRL_REG_LEN_08BIT, 0x00},
+	{0x511d, CRL_REG_LEN_08BIT, 0x00},
+	{0x511e, CRL_REG_LEN_08BIT, 0x00},
+	{0x511f, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x5006, CRL_REG_LEN_08BIT, 0x24},
+	{0x5608, CRL_REG_LEN_08BIT, 0x19},
+	{0x52d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x528d, CRL_REG_LEN_08BIT, 0x08},
+	{0x5293, CRL_REG_LEN_08BIT, 0x12},
+	{0x52d3, CRL_REG_LEN_08BIT, 0x12},
+	{0x5288, CRL_REG_LEN_08BIT, 0x06},
+	{0x5289, CRL_REG_LEN_08BIT, 0x20},
+	{0x52c8, CRL_REG_LEN_08BIT, 0x06},
+	{0x52c9, CRL_REG_LEN_08BIT, 0x20},
+	{0x52cd, CRL_REG_LEN_08BIT, 0x04},
+	{0x5381, CRL_REG_LEN_08BIT, 0x00},
+	{0x5382, CRL_REG_LEN_08BIT, 0xff},
+	{0x5589, CRL_REG_LEN_08BIT, 0x76},
+	{0x558a, CRL_REG_LEN_08BIT, 0x47},
+	{0x558b, CRL_REG_LEN_08BIT, 0xef},
+	{0x558c, CRL_REG_LEN_08BIT, 0xc9},
+	{0x558d, CRL_REG_LEN_08BIT, 0x49},
+	{0x558e, CRL_REG_LEN_08BIT, 0x30},
+	{0x558f, CRL_REG_LEN_08BIT, 0x67},
+	{0x5590, CRL_REG_LEN_08BIT, 0x3f},
+	{0x5591, CRL_REG_LEN_08BIT, 0xf0},
+	{0x5592, CRL_REG_LEN_08BIT, 0x10},
+	{0x55a2, CRL_REG_LEN_08BIT, 0x6d},
+	{0x55a3, CRL_REG_LEN_08BIT, 0x55},
+	{0x55a4, CRL_REG_LEN_08BIT, 0xc3},
+	{0x55a5, CRL_REG_LEN_08BIT, 0xb5},
+	{0x55a6, CRL_REG_LEN_08BIT, 0x43},
+	{0x55a7, CRL_REG_LEN_08BIT, 0x38},
+	{0x55a8, CRL_REG_LEN_08BIT, 0x5f},
+	{0x55a9, CRL_REG_LEN_08BIT, 0x4b},
+	{0x55aa, CRL_REG_LEN_08BIT, 0xf0},
+	{0x55ab, CRL_REG_LEN_08BIT, 0x10},
+	{0x5581, CRL_REG_LEN_08BIT, 0x52},
+	{0x5300, CRL_REG_LEN_08BIT, 0x01},
+	{0x5301, CRL_REG_LEN_08BIT, 0x00},
+	{0x5302, CRL_REG_LEN_08BIT, 0x00},
+	{0x5303, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5304, CRL_REG_LEN_08BIT, 0x00},
+	{0x5305, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5306, CRL_REG_LEN_08BIT, 0x00},
+	{0x5307, CRL_REG_LEN_08BIT, 0x36},
+	{0x5308, CRL_REG_LEN_08BIT, 0x00},
+	{0x5309, CRL_REG_LEN_08BIT, 0xd9},
+	{0x530a, CRL_REG_LEN_08BIT, 0x00},
+	{0x530b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x530c, CRL_REG_LEN_08BIT, 0x00},
+	{0x530d, CRL_REG_LEN_08BIT, 0x2c},
+	{0x530e, CRL_REG_LEN_08BIT, 0x00},
+	{0x530f, CRL_REG_LEN_08BIT, 0x59},
+	{0x5310, CRL_REG_LEN_08BIT, 0x00},
+	{0x5311, CRL_REG_LEN_08BIT, 0x7b},
+	{0x5312, CRL_REG_LEN_08BIT, 0x00},
+	{0x5313, CRL_REG_LEN_08BIT, 0x22},
+	{0x5314, CRL_REG_LEN_08BIT, 0x00},
+	{0x5315, CRL_REG_LEN_08BIT, 0xd5},
+	{0x5316, CRL_REG_LEN_08BIT, 0x00},
+	{0x5317, CRL_REG_LEN_08BIT, 0x13},
+	{0x5318, CRL_REG_LEN_08BIT, 0x00},
+	{0x5319, CRL_REG_LEN_08BIT, 0x18},
+	{0x531a, CRL_REG_LEN_08BIT, 0x00},
+	{0x531b, CRL_REG_LEN_08BIT, 0x26},
+	{0x531c, CRL_REG_LEN_08BIT, 0x00},
+	{0x531d, CRL_REG_LEN_08BIT, 0xdc},
+	{0x531e, CRL_REG_LEN_08BIT, 0x00},
+	{0x531f, CRL_REG_LEN_08BIT, 0x02},
+	{0x5320, CRL_REG_LEN_08BIT, 0x00},
+	{0x5321, CRL_REG_LEN_08BIT, 0x24},
+	{0x5322, CRL_REG_LEN_08BIT, 0x00},
+	{0x5323, CRL_REG_LEN_08BIT, 0x56},
+	{0x5324, CRL_REG_LEN_08BIT, 0x00},
+	{0x5325, CRL_REG_LEN_08BIT, 0x85},
+	{0x5326, CRL_REG_LEN_08BIT, 0x00},
+	{0x5327, CRL_REG_LEN_08BIT, 0x20},
+	{0x5609, CRL_REG_LEN_08BIT, 0x01},
+	{0x560a, CRL_REG_LEN_08BIT, 0x40},
+	{0x560b, CRL_REG_LEN_08BIT, 0x01},
+	{0x560c, CRL_REG_LEN_08BIT, 0x40},
+	{0x560d, CRL_REG_LEN_08BIT, 0x00},
+	{0x560e, CRL_REG_LEN_08BIT, 0xfa},
+	{0x560f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5610, CRL_REG_LEN_08BIT, 0xfa},
+	{0x5611, CRL_REG_LEN_08BIT, 0x02},
+	{0x5612, CRL_REG_LEN_08BIT, 0x80},
+	{0x5613, CRL_REG_LEN_08BIT, 0x02},
+	{0x5614, CRL_REG_LEN_08BIT, 0x80},
+	{0x5615, CRL_REG_LEN_08BIT, 0x01},
+	{0x5616, CRL_REG_LEN_08BIT, 0x2c},
+	{0x5617, CRL_REG_LEN_08BIT, 0x01},
+	{0x5618, CRL_REG_LEN_08BIT, 0x2c},
+	{0x563b, CRL_REG_LEN_08BIT, 0x01},
+	{0x563c, CRL_REG_LEN_08BIT, 0x01},
+	{0x563d, CRL_REG_LEN_08BIT, 0x01},
+	{0x563e, CRL_REG_LEN_08BIT, 0x01},
+	{0x563f, CRL_REG_LEN_08BIT, 0x03},
+	{0x5640, CRL_REG_LEN_08BIT, 0x03},
+	{0x5641, CRL_REG_LEN_08BIT, 0x03},
+	{0x5642, CRL_REG_LEN_08BIT, 0x05},
+	{0x5643, CRL_REG_LEN_08BIT, 0x09},
+	{0x5644, CRL_REG_LEN_08BIT, 0x05},
+	{0x5645, CRL_REG_LEN_08BIT, 0x05},
+	{0x5646, CRL_REG_LEN_08BIT, 0x05},
+	{0x5647, CRL_REG_LEN_08BIT, 0x05},
+	{0x5651, CRL_REG_LEN_08BIT, 0x00},
+	{0x5652, CRL_REG_LEN_08BIT, 0x80},
+	{0x521a, CRL_REG_LEN_08BIT, 0x01},
+	{0x521b, CRL_REG_LEN_08BIT, 0x03},
+	{0x521c, CRL_REG_LEN_08BIT, 0x06},
+	{0x521d, CRL_REG_LEN_08BIT, 0x0a},
+	{0x521e, CRL_REG_LEN_08BIT, 0x0e},
+	{0x521f, CRL_REG_LEN_08BIT, 0x12},
+	{0x5220, CRL_REG_LEN_08BIT, 0x16},
+	{0x5223, CRL_REG_LEN_08BIT, 0x02},
+	{0x5225, CRL_REG_LEN_08BIT, 0x04},
+	{0x5227, CRL_REG_LEN_08BIT, 0x08},
+	{0x5229, CRL_REG_LEN_08BIT, 0x0c},
+	{0x522b, CRL_REG_LEN_08BIT, 0x12},
+	{0x522d, CRL_REG_LEN_08BIT, 0x18},
+	{0x522f, CRL_REG_LEN_08BIT, 0x1e},
+	{0x5241, CRL_REG_LEN_08BIT, 0x04},
+	{0x5242, CRL_REG_LEN_08BIT, 0x01},
+	{0x5243, CRL_REG_LEN_08BIT, 0x03},
+	{0x5244, CRL_REG_LEN_08BIT, 0x06},
+	{0x5245, CRL_REG_LEN_08BIT, 0x0a},
+	{0x5246, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5247, CRL_REG_LEN_08BIT, 0x12},
+	{0x5248, CRL_REG_LEN_08BIT, 0x16},
+	{0x524a, CRL_REG_LEN_08BIT, 0x03},
+	{0x524c, CRL_REG_LEN_08BIT, 0x04},
+	{0x524e, CRL_REG_LEN_08BIT, 0x08},
+	{0x5250, CRL_REG_LEN_08BIT, 0x0c},
+	{0x5252, CRL_REG_LEN_08BIT, 0x12},
+	{0x5254, CRL_REG_LEN_08BIT, 0x18},
+	{0x5256, CRL_REG_LEN_08BIT, 0x1e},
+	{0x4606, CRL_REG_LEN_08BIT, 0x07},
+	{0x4607, CRL_REG_LEN_08BIT, 0x71},
+	{0x460a, CRL_REG_LEN_08BIT, 0x02},
+	{0x460b, CRL_REG_LEN_08BIT, 0x70},
+	{0x460c, CRL_REG_LEN_08BIT, 0x00},
+	{0x4620, CRL_REG_LEN_08BIT, 0x0e},
+	{0x4700, CRL_REG_LEN_08BIT, 0x04},
+	{0x4701, CRL_REG_LEN_08BIT, 0x00},
+	{0x4702, CRL_REG_LEN_08BIT, 0x01},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4005, CRL_REG_LEN_08BIT, 0x18},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4052, CRL_REG_LEN_08BIT, 0x02},
+	{0x4057, CRL_REG_LEN_08BIT, 0x9c},
+	{0x405a, CRL_REG_LEN_08BIT, 0x00},
+	/*FSIN enable*/
+	{0x3832, CRL_REG_LEN_08BIT, 0x00},
+	{0x3833, CRL_REG_LEN_08BIT, 0x02},
+	{0x3834, CRL_REG_LEN_08BIT, 0x02},
+	{0x3835, CRL_REG_LEN_08BIT, 0x08},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	/*FSIN end*/
+	{0x4202, CRL_REG_LEN_08BIT, 0x02},
+	{0x3023, CRL_REG_LEN_08BIT, 0x10},
+	{0x3003, CRL_REG_LEN_08BIT, 0x20},
+	{0x3004, CRL_REG_LEN_08BIT, 0x21},
+	{0x3005, CRL_REG_LEN_08BIT, 0x14},
+	{0x3006, CRL_REG_LEN_08BIT, 0x11},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x6f10, CRL_REG_LEN_08BIT, 0x07},
+	{0x6f11, CRL_REG_LEN_08BIT, 0x82},
+	{0x6f12, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f13, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f14, CRL_REG_LEN_08BIT, 0x1f},
+	{0x6f15, CRL_REG_LEN_08BIT, 0xdd},
+	{0x6f16, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f17, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f18, CRL_REG_LEN_08BIT, 0x36},
+	{0x6f19, CRL_REG_LEN_08BIT, 0x66},
+	{0x6f1a, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1b, CRL_REG_LEN_08BIT, 0x08},
+	{0x6f1c, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6f1d, CRL_REG_LEN_08BIT, 0xe7},
+	{0x6f1e, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1f, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd000, CRL_REG_LEN_08BIT, 0x19},
+	{0xd001, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd002, CRL_REG_LEN_08BIT, 0x00},
+	{0xd003, CRL_REG_LEN_08BIT, 0x01},
+	{0xd004, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd005, CRL_REG_LEN_08BIT, 0xad},
+	{0xd006, CRL_REG_LEN_08BIT, 0x10},
+	{0xd007, CRL_REG_LEN_08BIT, 0x40},
+	{0xd008, CRL_REG_LEN_08BIT, 0x44},
+	{0xd009, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd00b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd00d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd010, CRL_REG_LEN_08BIT, 0x19},
+	{0xd011, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd012, CRL_REG_LEN_08BIT, 0x00},
+	{0xd013, CRL_REG_LEN_08BIT, 0x01},
+	{0xd014, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd015, CRL_REG_LEN_08BIT, 0xad},
+	{0xd016, CRL_REG_LEN_08BIT, 0x13},
+	{0xd017, CRL_REG_LEN_08BIT, 0xd0},
+	{0xd018, CRL_REG_LEN_08BIT, 0x44},
+	{0xd019, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd01b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd01d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd020, CRL_REG_LEN_08BIT, 0x19},
+	{0xd021, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd022, CRL_REG_LEN_08BIT, 0x00},
+	{0xd023, CRL_REG_LEN_08BIT, 0x01},
+	{0xd024, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd025, CRL_REG_LEN_08BIT, 0xad},
+	{0xd026, CRL_REG_LEN_08BIT, 0x14},
+	{0xd027, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd028, CRL_REG_LEN_08BIT, 0x44},
+	{0xd029, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd02b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd02d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd030, CRL_REG_LEN_08BIT, 0x19},
+	{0xd031, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd032, CRL_REG_LEN_08BIT, 0x00},
+	{0xd033, CRL_REG_LEN_08BIT, 0x01},
+	{0xd034, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd035, CRL_REG_LEN_08BIT, 0xad},
+	{0xd036, CRL_REG_LEN_08BIT, 0x14},
+	{0xd037, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd038, CRL_REG_LEN_08BIT, 0x44},
+	{0xd039, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd03b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd03d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd040, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd041, CRL_REG_LEN_08BIT, 0x21},
+	{0xd042, CRL_REG_LEN_08BIT, 0xff},
+	{0xd043, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd044, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd045, CRL_REG_LEN_08BIT, 0x01},
+	{0xd046, CRL_REG_LEN_08BIT, 0x48},
+	{0xd047, CRL_REG_LEN_08BIT, 0x00},
+	{0xd048, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd049, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04a, CRL_REG_LEN_08BIT, 0x50},
+	{0xd04b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd04c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd04d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd04f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd050, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd051, CRL_REG_LEN_08BIT, 0x01},
+	{0xd052, CRL_REG_LEN_08BIT, 0x70},
+	{0xd053, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd054, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd055, CRL_REG_LEN_08BIT, 0x01},
+	{0xd056, CRL_REG_LEN_08BIT, 0x80},
+	{0xd057, CRL_REG_LEN_08BIT, 0x10},
+	{0xd058, CRL_REG_LEN_08BIT, 0x19},
+	{0xd059, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd05a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd05b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd05c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd05d, CRL_REG_LEN_08BIT, 0xce},
+	{0xd05e, CRL_REG_LEN_08BIT, 0x02},
+	{0xd05f, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd060, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd061, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd062, CRL_REG_LEN_08BIT, 0x00},
+	{0xd063, CRL_REG_LEN_08BIT, 0x00},
+	{0xd064, CRL_REG_LEN_08BIT, 0x84},
+	{0xd065, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd066, CRL_REG_LEN_08BIT, 0x00},
+	{0xd067, CRL_REG_LEN_08BIT, 0x00},
+	{0xd068, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd069, CRL_REG_LEN_08BIT, 0x03},
+	{0xd06a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd06b, CRL_REG_LEN_08BIT, 0x76},
+	{0xd06c, CRL_REG_LEN_08BIT, 0x1a},
+	{0xd06d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd070, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd071, CRL_REG_LEN_08BIT, 0x10},
+	{0xd072, CRL_REG_LEN_08BIT, 0x03},
+	{0xd073, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd074, CRL_REG_LEN_08BIT, 0x18},
+	{0xd075, CRL_REG_LEN_08BIT, 0x60},
+	{0xd076, CRL_REG_LEN_08BIT, 0x00},
+	{0xd077, CRL_REG_LEN_08BIT, 0x01},
+	{0xd078, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd079, CRL_REG_LEN_08BIT, 0x63},
+	{0xd07a, CRL_REG_LEN_08BIT, 0x07},
+	{0xd07b, CRL_REG_LEN_08BIT, 0x80},
+	{0xd07c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd07d, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd07e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd07f, CRL_REG_LEN_08BIT, 0x04},
+	{0xd080, CRL_REG_LEN_08BIT, 0x18},
+	{0xd081, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd082, CRL_REG_LEN_08BIT, 0x00},
+	{0xd083, CRL_REG_LEN_08BIT, 0x00},
+	{0xd084, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd085, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd086, CRL_REG_LEN_08BIT, 0x00},
+	{0xd087, CRL_REG_LEN_08BIT, 0x00},
+	{0xd088, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd089, CRL_REG_LEN_08BIT, 0x63},
+	{0xd08a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd08d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd08e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd08f, CRL_REG_LEN_08BIT, 0x14},
+	{0xd090, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd091, CRL_REG_LEN_08BIT, 0x01},
+	{0xd092, CRL_REG_LEN_08BIT, 0x30},
+	{0xd093, CRL_REG_LEN_08BIT, 0x18},
+	{0xd094, CRL_REG_LEN_08BIT, 0x07},
+	{0xd095, CRL_REG_LEN_08BIT, 0xff},
+	{0xd096, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd097, CRL_REG_LEN_08BIT, 0xfd},
+	{0xd098, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd099, CRL_REG_LEN_08BIT, 0x80},
+	{0xd09a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd09c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd09d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd09e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd0a0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd0a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0a3, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0a5, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd0a6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd0a8, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0a9, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0aa, CRL_REG_LEN_08BIT, 0x58},
+	{0xd0ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ac, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0ad, CRL_REG_LEN_08BIT, 0x8e},
+	{0xd0ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0b1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0b2, CRL_REG_LEN_08BIT, 0x30},
+	{0xd0b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b4, CRL_REG_LEN_08BIT, 0x98},
+	{0xd0b5, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd0b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd0ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0bb, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd0bc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0bd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd0be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0bf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd0c1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0c4, CRL_REG_LEN_08BIT, 0x95},
+	{0xd0c5, CRL_REG_LEN_08BIT, 0x8b},
+	{0xd0c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c8, CRL_REG_LEN_08BIT, 0x94},
+	{0xd0c9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd0ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0cb, CRL_REG_LEN_08BIT, 0x70},
+	{0xd0cc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0cd, CRL_REG_LEN_08BIT, 0x65},
+	{0xd0ce, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd0d1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d3, CRL_REG_LEN_08BIT, 0x62},
+	{0xd0d4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd0d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0da, CRL_REG_LEN_08BIT, 0x80},
+	{0xd0db, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0dd, CRL_REG_LEN_08BIT, 0x83},
+	{0xd0de, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0df, CRL_REG_LEN_08BIT, 0x29},
+	{0xd0e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e1, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd0e2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0e3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd0e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0e5, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e9, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd0ea, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0eb, CRL_REG_LEN_08BIT, 0x09},
+	{0xd0ec, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0ed, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd0ee, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0ef, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd0f0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f1, CRL_REG_LEN_08BIT, 0x07},
+	{0xd0f2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd0f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0f5, CRL_REG_LEN_08BIT, 0x66},
+	{0xd0f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f9, CRL_REG_LEN_08BIT, 0x05},
+	{0xd0fa, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0fc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ff, CRL_REG_LEN_08BIT, 0x01},
+	{0xd100, CRL_REG_LEN_08BIT, 0x98},
+	{0xd101, CRL_REG_LEN_08BIT, 0x90},
+	{0xd102, CRL_REG_LEN_08BIT, 0x00},
+	{0xd103, CRL_REG_LEN_08BIT, 0x00},
+	{0xd104, CRL_REG_LEN_08BIT, 0x84},
+	{0xd105, CRL_REG_LEN_08BIT, 0xae},
+	{0xd106, CRL_REG_LEN_08BIT, 0x00},
+	{0xd107, CRL_REG_LEN_08BIT, 0x00},
+	{0xd108, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd109, CRL_REG_LEN_08BIT, 0x63},
+	{0xd10a, CRL_REG_LEN_08BIT, 0x06},
+	{0xd10b, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd10c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd10d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd10e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd10f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd110, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd111, CRL_REG_LEN_08BIT, 0x03},
+	{0xd112, CRL_REG_LEN_08BIT, 0x30},
+	{0xd113, CRL_REG_LEN_08BIT, 0x00},
+	{0xd114, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd115, CRL_REG_LEN_08BIT, 0x65},
+	{0xd116, CRL_REG_LEN_08BIT, 0x00},
+	{0xd117, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd118, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd119, CRL_REG_LEN_08BIT, 0x84},
+	{0xd11a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd11b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11c, CRL_REG_LEN_08BIT, 0x10},
+	{0xd11d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11f, CRL_REG_LEN_08BIT, 0x07},
+	{0xd120, CRL_REG_LEN_08BIT, 0x18},
+	{0xd121, CRL_REG_LEN_08BIT, 0x80},
+	{0xd122, CRL_REG_LEN_08BIT, 0x80},
+	{0xd123, CRL_REG_LEN_08BIT, 0x06},
+	{0xd124, CRL_REG_LEN_08BIT, 0x94},
+	{0xd125, CRL_REG_LEN_08BIT, 0x65},
+	{0xd126, CRL_REG_LEN_08BIT, 0x00},
+	{0xd127, CRL_REG_LEN_08BIT, 0x70},
+	{0xd128, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd129, CRL_REG_LEN_08BIT, 0x43},
+	{0xd12a, CRL_REG_LEN_08BIT, 0x60},
+	{0xd12b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12c, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd12d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12f, CRL_REG_LEN_08BIT, 0x3e},
+	{0xd130, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd131, CRL_REG_LEN_08BIT, 0x64},
+	{0xd132, CRL_REG_LEN_08BIT, 0x38},
+	{0xd133, CRL_REG_LEN_08BIT, 0x24},
+	{0xd134, CRL_REG_LEN_08BIT, 0x18},
+	{0xd135, CRL_REG_LEN_08BIT, 0x80},
+	{0xd136, CRL_REG_LEN_08BIT, 0x80},
+	{0xd137, CRL_REG_LEN_08BIT, 0x06},
+	{0xd138, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd139, CRL_REG_LEN_08BIT, 0x64},
+	{0xd13a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd13b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd13c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd13d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd13e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd13f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd140, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd141, CRL_REG_LEN_08BIT, 0x63},
+	{0xd142, CRL_REG_LEN_08BIT, 0x00},
+	{0xd143, CRL_REG_LEN_08BIT, 0x40},
+	{0xd144, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd145, CRL_REG_LEN_08BIT, 0x23},
+	{0xd146, CRL_REG_LEN_08BIT, 0x00},
+	{0xd147, CRL_REG_LEN_08BIT, 0x00},
+	{0xd148, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd149, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14b, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd14c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd14d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd14e, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd14f, CRL_REG_LEN_08BIT, 0x44},
+	{0xd150, CRL_REG_LEN_08BIT, 0x19},
+	{0xd151, CRL_REG_LEN_08BIT, 0x00},
+	{0xd152, CRL_REG_LEN_08BIT, 0x80},
+	{0xd153, CRL_REG_LEN_08BIT, 0x06},
+	{0xd154, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd155, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd156, CRL_REG_LEN_08BIT, 0x3d},
+	{0xd157, CRL_REG_LEN_08BIT, 0x05},
+	{0xd158, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd159, CRL_REG_LEN_08BIT, 0x67},
+	{0xd15a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd15d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd15e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd160, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd161, CRL_REG_LEN_08BIT, 0x63},
+	{0xd162, CRL_REG_LEN_08BIT, 0x00},
+	{0xd163, CRL_REG_LEN_08BIT, 0x98},
+	{0xd164, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd165, CRL_REG_LEN_08BIT, 0x03},
+	{0xd166, CRL_REG_LEN_08BIT, 0x00},
+	{0xd167, CRL_REG_LEN_08BIT, 0x00},
+	{0xd168, CRL_REG_LEN_08BIT, 0x10},
+	{0xd169, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd16c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd16d, CRL_REG_LEN_08BIT, 0x48},
+	{0xd16e, CRL_REG_LEN_08BIT, 0x67},
+	{0xd16f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd170, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd171, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd172, CRL_REG_LEN_08BIT, 0x00},
+	{0xd173, CRL_REG_LEN_08BIT, 0x19},
+	{0xd174, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd175, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd176, CRL_REG_LEN_08BIT, 0x00},
+	{0xd177, CRL_REG_LEN_08BIT, 0x00},
+	{0xd178, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd179, CRL_REG_LEN_08BIT, 0x68},
+	{0xd17a, CRL_REG_LEN_08BIT, 0x67},
+	{0xd17b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd17c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd17d, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd17e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd17f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd180, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd181, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd182, CRL_REG_LEN_08BIT, 0x00},
+	{0xd183, CRL_REG_LEN_08BIT, 0x00},
+	{0xd184, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd185, CRL_REG_LEN_08BIT, 0x85},
+	{0xd186, CRL_REG_LEN_08BIT, 0x00},
+	{0xd187, CRL_REG_LEN_08BIT, 0x98},
+	{0xd188, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd189, CRL_REG_LEN_08BIT, 0x63},
+	{0xd18a, CRL_REG_LEN_08BIT, 0x30},
+	{0xd18b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd18c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd18d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd18e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd18f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd190, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd191, CRL_REG_LEN_08BIT, 0x83},
+	{0xd192, CRL_REG_LEN_08BIT, 0xff},
+	{0xd193, CRL_REG_LEN_08BIT, 0xff},
+	{0xd194, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd195, CRL_REG_LEN_08BIT, 0x64},
+	{0xd196, CRL_REG_LEN_08BIT, 0x00},
+	{0xd197, CRL_REG_LEN_08BIT, 0x48},
+	{0xd198, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd199, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd19a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd19b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd19c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd19d, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd19e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd19f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1a1, CRL_REG_LEN_08BIT, 0x60},
+	{0xd1a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1a5, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1a6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd1a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1a9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd1aa, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1ab, CRL_REG_LEN_08BIT, 0x22},
+	{0xd1ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ad, CRL_REG_LEN_08BIT, 0x80},
+	{0xd1ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1af, CRL_REG_LEN_08BIT, 0x70},
+	{0xd1b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1b1, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd1b2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1b3, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1b4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1b5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1b6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1b9, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1bd, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd1be, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1bf, CRL_REG_LEN_08BIT, 0x42},
+	{0xd1c0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1c1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd1c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1c5, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd1c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd1c9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd1ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cb, CRL_REG_LEN_08BIT, 0x08},
+	{0xd1cc, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1cd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1d1, CRL_REG_LEN_08BIT, 0x67},
+	{0xd1d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd1d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1d6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1d9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1da, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1dc, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1dd, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1df, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1e0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd1e1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e3, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd1e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1e5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd1e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd1e8, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1e9, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1ea, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1eb, CRL_REG_LEN_08BIT, 0xf6},
+	{0xd1ec, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f1, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1f2, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1f3, CRL_REG_LEN_08BIT, 0x86},
+	{0xd1f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1f5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f9, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd1fa, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd1fb, CRL_REG_LEN_08BIT, 0x45},
+	{0xd1fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1fd, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd1fe, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1ff, CRL_REG_LEN_08BIT, 0x87},
+	{0xd200, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd201, CRL_REG_LEN_08BIT, 0x05},
+	{0xd202, CRL_REG_LEN_08BIT, 0x18},
+	{0xd203, CRL_REG_LEN_08BIT, 0x00},
+	{0xd204, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd205, CRL_REG_LEN_08BIT, 0x66},
+	{0xd206, CRL_REG_LEN_08BIT, 0x00},
+	{0xd207, CRL_REG_LEN_08BIT, 0x00},
+	{0xd208, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd209, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd20a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd20b, CRL_REG_LEN_08BIT, 0x46},
+	{0xd20c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd20d, CRL_REG_LEN_08BIT, 0x07},
+	{0xd20e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd20f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd210, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd211, CRL_REG_LEN_08BIT, 0x84},
+	{0xd212, CRL_REG_LEN_08BIT, 0x55},
+	{0xd213, CRL_REG_LEN_08BIT, 0x88},
+	{0xd214, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd215, CRL_REG_LEN_08BIT, 0x65},
+	{0xd216, CRL_REG_LEN_08BIT, 0x00},
+	{0xd217, CRL_REG_LEN_08BIT, 0x00},
+	{0xd218, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd219, CRL_REG_LEN_08BIT, 0x04},
+	{0xd21a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd21b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd21c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd21d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21f, CRL_REG_LEN_08BIT, 0xce},
+	{0xd220, CRL_REG_LEN_08BIT, 0x19},
+	{0xd221, CRL_REG_LEN_08BIT, 0x00},
+	{0xd222, CRL_REG_LEN_08BIT, 0x80},
+	{0xd223, CRL_REG_LEN_08BIT, 0x06},
+	{0xd224, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd225, CRL_REG_LEN_08BIT, 0x63},
+	{0xd226, CRL_REG_LEN_08BIT, 0x00},
+	{0xd227, CRL_REG_LEN_08BIT, 0x00},
+	{0xd228, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd229, CRL_REG_LEN_08BIT, 0x63},
+	{0xd22a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22b, CRL_REG_LEN_08BIT, 0x40},
+	{0xd22c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd22d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd22e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd230, CRL_REG_LEN_08BIT, 0x13},
+	{0xd231, CRL_REG_LEN_08BIT, 0xff},
+	{0xd232, CRL_REG_LEN_08BIT, 0xff},
+	{0xd233, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd234, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd235, CRL_REG_LEN_08BIT, 0x00},
+	{0xd236, CRL_REG_LEN_08BIT, 0x00},
+	{0xd237, CRL_REG_LEN_08BIT, 0x40},
+	{0xd238, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd239, CRL_REG_LEN_08BIT, 0x64},
+	{0xd23a, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23b, CRL_REG_LEN_08BIT, 0x86},
+	{0xd23c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd23d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd23e, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23f, CRL_REG_LEN_08BIT, 0x87},
+	{0xd240, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd241, CRL_REG_LEN_08BIT, 0x03},
+	{0xd242, CRL_REG_LEN_08BIT, 0x40},
+	{0xd243, CRL_REG_LEN_08BIT, 0x00},
+	{0xd244, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd245, CRL_REG_LEN_08BIT, 0x64},
+	{0xd246, CRL_REG_LEN_08BIT, 0x55},
+	{0xd247, CRL_REG_LEN_08BIT, 0x88},
+	{0xd248, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd249, CRL_REG_LEN_08BIT, 0x05},
+	{0xd24a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd24c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd24d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd24e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd250, CRL_REG_LEN_08BIT, 0x03},
+	{0xd251, CRL_REG_LEN_08BIT, 0xff},
+	{0xd252, CRL_REG_LEN_08BIT, 0xff},
+	{0xd253, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd254, CRL_REG_LEN_08BIT, 0x19},
+	{0xd255, CRL_REG_LEN_08BIT, 0x00},
+	{0xd256, CRL_REG_LEN_08BIT, 0x80},
+	{0xd257, CRL_REG_LEN_08BIT, 0x06},
+	{0xd258, CRL_REG_LEN_08BIT, 0x94},
+	{0xd259, CRL_REG_LEN_08BIT, 0x84},
+	{0xd25a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd25b, CRL_REG_LEN_08BIT, 0x72},
+	{0xd25c, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd25d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd25e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd25f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd260, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd261, CRL_REG_LEN_08BIT, 0x00},
+	{0xd262, CRL_REG_LEN_08BIT, 0x00},
+	{0xd263, CRL_REG_LEN_08BIT, 0x3f},
+	{0xd264, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd265, CRL_REG_LEN_08BIT, 0x60},
+	{0xd266, CRL_REG_LEN_08BIT, 0x01},
+	{0xd267, CRL_REG_LEN_08BIT, 0x00},
+	{0xd268, CRL_REG_LEN_08BIT, 0x85},
+	{0xd269, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd26a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26c, CRL_REG_LEN_08BIT, 0x98},
+	{0xd26d, CRL_REG_LEN_08BIT, 0x70},
+	{0xd26e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd270, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd271, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd272, CRL_REG_LEN_08BIT, 0x00},
+	{0xd273, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd274, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd275, CRL_REG_LEN_08BIT, 0x63},
+	{0xd276, CRL_REG_LEN_08BIT, 0x20},
+	{0xd277, CRL_REG_LEN_08BIT, 0x00},
+	{0xd278, CRL_REG_LEN_08BIT, 0x10},
+	{0xd279, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27b, CRL_REG_LEN_08BIT, 0x07},
+	{0xd27c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd27d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd280, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd281, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd282, CRL_REG_LEN_08BIT, 0x00},
+	{0xd283, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd284, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd285, CRL_REG_LEN_08BIT, 0x63},
+	{0xd286, CRL_REG_LEN_08BIT, 0x28},
+	{0xd287, CRL_REG_LEN_08BIT, 0x02},
+	{0xd288, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd289, CRL_REG_LEN_08BIT, 0x84},
+	{0xd28a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd28b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd28c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd28d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd28e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd28f, CRL_REG_LEN_08BIT, 0x66},
+	{0xd290, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd291, CRL_REG_LEN_08BIT, 0x63},
+	{0xd292, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd293, CRL_REG_LEN_08BIT, 0x06},
+	{0xd294, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd295, CRL_REG_LEN_08BIT, 0x6a},
+	{0xd296, CRL_REG_LEN_08BIT, 0x00},
+	{0xd297, CRL_REG_LEN_08BIT, 0x77},
+	{0xd298, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd299, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29a, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd29b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd29c, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd29d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd29f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a3, CRL_REG_LEN_08BIT, 0x3c},
+	{0xd2a4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd2a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd2a9, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd2aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ab, CRL_REG_LEN_08BIT, 0x78},
+	{0xd2ac, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd2ad, CRL_REG_LEN_08BIT, 0x63},
+	{0xd2ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2af, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd2b1, CRL_REG_LEN_08BIT, 0x64},
+	{0xd2b2, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd2b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd2b4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b8, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2b9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2bb, CRL_REG_LEN_08BIT, 0x34},
+	{0xd2bc, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2bd, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2bf, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c0, CRL_REG_LEN_08BIT, 0xb9},
+	{0xd2c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c3, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2c4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd2c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2c9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd2ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cc, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2cd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cf, CRL_REG_LEN_08BIT, 0x2c},
+	{0xd2d0, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2d1, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2d2, CRL_REG_LEN_08BIT, 0x58},
+	{0xd2d3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2d4, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2d5, CRL_REG_LEN_08BIT, 0x81},
+	{0xd2d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2d7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2d8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2d9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd2da, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2dc, CRL_REG_LEN_08BIT, 0x10},
+	{0xd2dd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2df, CRL_REG_LEN_08BIT, 0x05},
+	{0xd2e0, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2e1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2e4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd2e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd2e6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e8, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2ea, CRL_REG_LEN_08BIT, 0x28},
+	{0xd2eb, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2ec, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2ed, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ef, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2f0, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2f1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd2f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f4, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f7, CRL_REG_LEN_08BIT, 0x20},
+	{0xd2f8, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd2f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fc, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2fd, CRL_REG_LEN_08BIT, 0x61},
+	{0xd2fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ff, CRL_REG_LEN_08BIT, 0x18},
+	{0xd300, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd301, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd302, CRL_REG_LEN_08BIT, 0x01},
+	{0xd303, CRL_REG_LEN_08BIT, 0x00},
+	{0xd304, CRL_REG_LEN_08BIT, 0x10},
+	{0xd305, CRL_REG_LEN_08BIT, 0x00},
+	{0xd306, CRL_REG_LEN_08BIT, 0x00},
+	{0xd307, CRL_REG_LEN_08BIT, 0x03},
+	{0xd308, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd309, CRL_REG_LEN_08BIT, 0x80},
+	{0xd30a, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd30c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd30f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd310, CRL_REG_LEN_08BIT, 0x18},
+	{0xd311, CRL_REG_LEN_08BIT, 0x60},
+	{0xd312, CRL_REG_LEN_08BIT, 0x80},
+	{0xd313, CRL_REG_LEN_08BIT, 0x06},
+	{0xd314, CRL_REG_LEN_08BIT, 0x85},
+	{0xd315, CRL_REG_LEN_08BIT, 0x01},
+	{0xd316, CRL_REG_LEN_08BIT, 0x00},
+	{0xd317, CRL_REG_LEN_08BIT, 0x14},
+	{0xd318, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd319, CRL_REG_LEN_08BIT, 0x83},
+	{0xd31a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd31b, CRL_REG_LEN_08BIT, 0x29},
+	{0xd31c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd31d, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd31e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd31f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd320, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd321, CRL_REG_LEN_08BIT, 0x84},
+	{0xd322, CRL_REG_LEN_08BIT, 0x00},
+	{0xd323, CRL_REG_LEN_08BIT, 0x00},
+	{0xd324, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd325, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd326, CRL_REG_LEN_08BIT, 0x38},
+	{0xd327, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd328, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd329, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd32a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32b, CRL_REG_LEN_08BIT, 0x09},
+	{0xd32c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd32d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd32e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd330, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd331, CRL_REG_LEN_08BIT, 0x06},
+	{0xd332, CRL_REG_LEN_08BIT, 0x18},
+	{0xd333, CRL_REG_LEN_08BIT, 0x00},
+	{0xd334, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd335, CRL_REG_LEN_08BIT, 0x65},
+	{0xd336, CRL_REG_LEN_08BIT, 0x00},
+	{0xd337, CRL_REG_LEN_08BIT, 0x00},
+	{0xd338, CRL_REG_LEN_08BIT, 0x84},
+	{0xd339, CRL_REG_LEN_08BIT, 0x81},
+	{0xd33a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd33b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd33c, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33d, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd33f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd340, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd341, CRL_REG_LEN_08BIT, 0x07},
+	{0xd342, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd343, CRL_REG_LEN_08BIT, 0x00},
+	{0xd344, CRL_REG_LEN_08BIT, 0x03},
+	{0xd345, CRL_REG_LEN_08BIT, 0xff},
+	{0xd346, CRL_REG_LEN_08BIT, 0xff},
+	{0xd347, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd348, CRL_REG_LEN_08BIT, 0x18},
+	{0xd349, CRL_REG_LEN_08BIT, 0x60},
+	{0xd34a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd34b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd34c, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd34d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34f, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd350, CRL_REG_LEN_08BIT, 0x18},
+	{0xd351, CRL_REG_LEN_08BIT, 0x60},
+	{0xd352, CRL_REG_LEN_08BIT, 0x80},
+	{0xd353, CRL_REG_LEN_08BIT, 0x06},
+	{0xd354, CRL_REG_LEN_08BIT, 0x00},
+	{0xd355, CRL_REG_LEN_08BIT, 0x00},
+	{0xd356, CRL_REG_LEN_08BIT, 0x00},
+	{0xd357, CRL_REG_LEN_08BIT, 0x11},
+	{0xd358, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd359, CRL_REG_LEN_08BIT, 0x83},
+	{0xd35a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd35b, CRL_REG_LEN_08BIT, 0x43},
+	{0xd35c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd35d, CRL_REG_LEN_08BIT, 0x6c},
+	{0xd35e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd35f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd360, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd361, CRL_REG_LEN_08BIT, 0x84},
+	{0xd362, CRL_REG_LEN_08BIT, 0x28},
+	{0xd363, CRL_REG_LEN_08BIT, 0x02},
+	{0xd364, CRL_REG_LEN_08BIT, 0x07},
+	{0xd365, CRL_REG_LEN_08BIT, 0xff},
+	{0xd366, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd367, CRL_REG_LEN_08BIT, 0x30},
+	{0xd368, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd369, CRL_REG_LEN_08BIT, 0x63},
+	{0xd36a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36b, CRL_REG_LEN_08BIT, 0x08},
+	{0xd36c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd36d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36f, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd370, CRL_REG_LEN_08BIT, 0x85},
+	{0xd371, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd372, CRL_REG_LEN_08BIT, 0x00},
+	{0xd373, CRL_REG_LEN_08BIT, 0x00},
+	{0xd374, CRL_REG_LEN_08BIT, 0x03},
+	{0xd375, CRL_REG_LEN_08BIT, 0xff},
+	{0xd376, CRL_REG_LEN_08BIT, 0xff},
+	{0xd377, CRL_REG_LEN_08BIT, 0xe7},
+	{0xd378, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd379, CRL_REG_LEN_08BIT, 0x01},
+	{0xd37a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd37b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd37c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd37d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd37e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd380, CRL_REG_LEN_08BIT, 0x03},
+	{0xd381, CRL_REG_LEN_08BIT, 0xff},
+	{0xd382, CRL_REG_LEN_08BIT, 0xff},
+	{0xd383, CRL_REG_LEN_08BIT, 0xdb},
+	{0xd384, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd385, CRL_REG_LEN_08BIT, 0x01},
+	{0xd386, CRL_REG_LEN_08BIT, 0x18},
+	{0xd387, CRL_REG_LEN_08BIT, 0x14},
+	{0xd388, CRL_REG_LEN_08BIT, 0x03},
+	{0xd389, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38a, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38b, CRL_REG_LEN_08BIT, 0xce},
+	{0xd38c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd38d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd38e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd390, CRL_REG_LEN_08BIT, 0x03},
+	{0xd391, CRL_REG_LEN_08BIT, 0xff},
+	{0xd392, CRL_REG_LEN_08BIT, 0xff},
+	{0xd393, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd394, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd395, CRL_REG_LEN_08BIT, 0x63},
+	{0xd396, CRL_REG_LEN_08BIT, 0x00},
+	{0xd397, CRL_REG_LEN_08BIT, 0xff},
+	{0xd398, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd399, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd39a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd39b, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd39c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd39d, CRL_REG_LEN_08BIT, 0x84},
+	{0xd39e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd39f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a1, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd3a2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd3a3, CRL_REG_LEN_08BIT, 0x0e},
+	{0xd3a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a5, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd3a6, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd3a7, CRL_REG_LEN_08BIT, 0x42},
+	{0xd3a8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3a9, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3aa, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ac, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3ad, CRL_REG_LEN_08BIT, 0x66},
+	{0xd3ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3b1, CRL_REG_LEN_08BIT, 0x05},
+	{0xd3b2, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b8, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b9, CRL_REG_LEN_08BIT, 0x41},
+	{0xd3ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bb, CRL_REG_LEN_08BIT, 0x04},
+	{0xd3bc, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3bd, CRL_REG_LEN_08BIT, 0x81},
+	{0xd3be, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bf, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3c0, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3c1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd3c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c3, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3c4, CRL_REG_LEN_08BIT, 0x86},
+	{0xd3c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c7, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3c8, CRL_REG_LEN_08BIT, 0x44},
+	{0xd3c9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ca, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3cd, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cf, CRL_REG_LEN_08BIT, 0x1c},
+	{0xd3d0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3d1, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3d2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3d3, CRL_REG_LEN_08BIT, 0xfc},
+	{0xd3d4, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd3d5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3db, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3dd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3de, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3df, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3e0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3e1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e3, CRL_REG_LEN_08BIT, 0x68},
+	{0xd3e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd3e5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd3e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e8, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3e9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3eb, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3ec, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f0, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f2, CRL_REG_LEN_08BIT, 0xd9},
+	{0xd3f3, CRL_REG_LEN_08BIT, 0x98},
+	{0xd3f4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3f9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3fa, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3fb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3fd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3fe, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd3ff, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd400, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd401, CRL_REG_LEN_08BIT, 0x63},
+	{0xd402, CRL_REG_LEN_08BIT, 0x00},
+	{0xd403, CRL_REG_LEN_08BIT, 0x00},
+	{0xd404, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd405, CRL_REG_LEN_08BIT, 0x23},
+	{0xd406, CRL_REG_LEN_08BIT, 0x00},
+	{0xd407, CRL_REG_LEN_08BIT, 0x01},
+	{0xd408, CRL_REG_LEN_08BIT, 0x10},
+	{0xd409, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40b, CRL_REG_LEN_08BIT, 0x25},
+	{0xd40c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd40d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd410, CRL_REG_LEN_08BIT, 0x00},
+	{0xd411, CRL_REG_LEN_08BIT, 0x00},
+	{0xd412, CRL_REG_LEN_08BIT, 0x00},
+	{0xd413, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd414, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd415, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd416, CRL_REG_LEN_08BIT, 0x00},
+	{0xd417, CRL_REG_LEN_08BIT, 0x02},
+	{0xd418, CRL_REG_LEN_08BIT, 0x07},
+	{0xd419, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41a, CRL_REG_LEN_08BIT, 0xd6},
+	{0xd41b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd41c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd41d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd420, CRL_REG_LEN_08BIT, 0x18},
+	{0xd421, CRL_REG_LEN_08BIT, 0x60},
+	{0xd422, CRL_REG_LEN_08BIT, 0x80},
+	{0xd423, CRL_REG_LEN_08BIT, 0x06},
+	{0xd424, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd425, CRL_REG_LEN_08BIT, 0x63},
+	{0xd426, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd427, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd428, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd429, CRL_REG_LEN_08BIT, 0x63},
+	{0xd42a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd42d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd42e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd430, CRL_REG_LEN_08BIT, 0x10},
+	{0xd431, CRL_REG_LEN_08BIT, 0x00},
+	{0xd432, CRL_REG_LEN_08BIT, 0x00},
+	{0xd433, CRL_REG_LEN_08BIT, 0x1b},
+	{0xd434, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd435, CRL_REG_LEN_08BIT, 0x00},
+	{0xd436, CRL_REG_LEN_08BIT, 0x00},
+	{0xd437, CRL_REG_LEN_08BIT, 0x00},
+	{0xd438, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd439, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd43a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd43c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd43d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd43e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd440, CRL_REG_LEN_08BIT, 0x18},
+	{0xd441, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd442, CRL_REG_LEN_08BIT, 0x80},
+	{0xd443, CRL_REG_LEN_08BIT, 0x06},
+	{0xd444, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd445, CRL_REG_LEN_08BIT, 0x67},
+	{0xd446, CRL_REG_LEN_08BIT, 0x30},
+	{0xd447, CRL_REG_LEN_08BIT, 0x00},
+	{0xd448, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd449, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd44a, CRL_REG_LEN_08BIT, 0xce},
+	{0xd44b, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd44c, CRL_REG_LEN_08BIT, 0x19},
+	{0xd44d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd44e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd44f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd450, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd451, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd452, CRL_REG_LEN_08BIT, 0x06},
+	{0xd453, CRL_REG_LEN_08BIT, 0x14},
+	{0xd454, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd455, CRL_REG_LEN_08BIT, 0x83},
+	{0xd456, CRL_REG_LEN_08BIT, 0x28},
+	{0xd457, CRL_REG_LEN_08BIT, 0x00},
+	{0xd458, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd459, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd45a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd45c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd45d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd45e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd45f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd460, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd461, CRL_REG_LEN_08BIT, 0x84},
+	{0xd462, CRL_REG_LEN_08BIT, 0x00},
+	{0xd463, CRL_REG_LEN_08BIT, 0x00},
+	{0xd464, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd465, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd466, CRL_REG_LEN_08BIT, 0x58},
+	{0xd467, CRL_REG_LEN_08BIT, 0x00},
+	{0xd468, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd469, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd46a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46b, CRL_REG_LEN_08BIT, 0xff},
+	{0xd46c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd46d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd46e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd470, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd471, CRL_REG_LEN_08BIT, 0x46},
+	{0xd472, CRL_REG_LEN_08BIT, 0x00},
+	{0xd473, CRL_REG_LEN_08BIT, 0x03},
+	{0xd474, CRL_REG_LEN_08BIT, 0x94},
+	{0xd475, CRL_REG_LEN_08BIT, 0x85},
+	{0xd476, CRL_REG_LEN_08BIT, 0x00},
+	{0xd477, CRL_REG_LEN_08BIT, 0x00},
+	{0xd478, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd479, CRL_REG_LEN_08BIT, 0x63},
+	{0xd47a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47b, CRL_REG_LEN_08BIT, 0x98},
+	{0xd47c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd47d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd47e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd480, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd481, CRL_REG_LEN_08BIT, 0xff},
+	{0xd482, CRL_REG_LEN_08BIT, 0xff},
+	{0xd483, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd484, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd485, CRL_REG_LEN_08BIT, 0x05},
+	{0xd486, CRL_REG_LEN_08BIT, 0x18},
+	{0xd487, CRL_REG_LEN_08BIT, 0x00},
+	{0xd488, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd489, CRL_REG_LEN_08BIT, 0x68},
+	{0xd48a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd48c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd48d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd490, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd491, CRL_REG_LEN_08BIT, 0x48},
+	{0xd492, CRL_REG_LEN_08BIT, 0x00},
+	{0xd493, CRL_REG_LEN_08BIT, 0x01},
+	{0xd494, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd495, CRL_REG_LEN_08BIT, 0xff},
+	{0xd496, CRL_REG_LEN_08BIT, 0xff},
+	{0xd497, CRL_REG_LEN_08BIT, 0xea},
+	{0xd498, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd499, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd49a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd49c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd49d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd49e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4a1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4a2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4a3, CRL_REG_LEN_08BIT, 0x14},
+	{0xd4a4, CRL_REG_LEN_08BIT, 0x07},
+	{0xd4a5, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4a6, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd4a7, CRL_REG_LEN_08BIT, 0x05},
+	{0xd4a8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4a9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd4aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ab, CRL_REG_LEN_08BIT, 0x10},
+	{0xd4ac, CRL_REG_LEN_08BIT, 0x85},
+	{0xd4ad, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b0, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4b1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b2, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b7, CRL_REG_LEN_08BIT, 0x04},
+	{0xd4b8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4b9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4bb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4bc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4bd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4be, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4bf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4c0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4c1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4c2, CRL_REG_LEN_08BIT, 0x09},
+	{0xd4c3, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4c4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4c5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4c6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4c8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4c9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ca, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4cb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4cc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4cd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ce, CRL_REG_LEN_08BIT, 0xc9},
+	{0xd4cf, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4d0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4d1, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4d2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4d9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4dc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4dd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4df, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4e1, CRL_REG_LEN_08BIT, 0x84},
+	{0xd4e2, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd4e3, CRL_REG_LEN_08BIT, 0x12},
+	{0xd4e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd4e5, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e8, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd4e9, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4eb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ec, CRL_REG_LEN_08BIT, 0x13},
+	{0xd4ed, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ee, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ef, CRL_REG_LEN_08BIT, 0xfe},
+	{0xd4f0, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fc, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ff, CRL_REG_LEN_08BIT, 0x00},
+	{0xd500, CRL_REG_LEN_08BIT, 0x00},
+	{0xd501, CRL_REG_LEN_08BIT, 0x00},
+	{0xd502, CRL_REG_LEN_08BIT, 0x00},
+	{0xd503, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0e, CRL_REG_LEN_08BIT, 0x33},
+	{0x6f0f, CRL_REG_LEN_08BIT, 0x33},
+	{0x460e, CRL_REG_LEN_08BIT, 0x08},
+	{0x460f, CRL_REG_LEN_08BIT, 0x01},
+	{0x4610, CRL_REG_LEN_08BIT, 0x00},
+	{0x4611, CRL_REG_LEN_08BIT, 0x01},
+	{0x4612, CRL_REG_LEN_08BIT, 0x00},
+	{0x4613, CRL_REG_LEN_08BIT, 0x01},
+	{0x4605, CRL_REG_LEN_08BIT, 0x08},/*YUV 8bit*/
+	{0x4608, CRL_REG_LEN_08BIT, 0x00},
+	{0x4609, CRL_REG_LEN_08BIT, 0x08},
+	{0x6804, CRL_REG_LEN_08BIT, 0x00},
+	{0x6805, CRL_REG_LEN_08BIT, 0x06},
+	{0x6806, CRL_REG_LEN_08BIT, 0x00},
+	{0x5120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3504, CRL_REG_LEN_08BIT, 0x00},
+	{0x6800, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x5000, CRL_REG_LEN_08BIT, 0xff},
+	{0x5001, CRL_REG_LEN_08BIT, 0xbf},
+	{0x5002, CRL_REG_LEN_08BIT, 0x7e},
+	{0x5003, CRL_REG_LEN_08BIT, 0x0c},
+	{0x503d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc450, CRL_REG_LEN_08BIT, 0x01},
+	{0xc452, CRL_REG_LEN_08BIT, 0x04},
+	{0xc453, CRL_REG_LEN_08BIT, 0x00},
+	{0xc454, CRL_REG_LEN_08BIT, 0x01},
+	{0xc455, CRL_REG_LEN_08BIT, 0x00},
+	{0xc456, CRL_REG_LEN_08BIT, 0x00},
+	{0xc457, CRL_REG_LEN_08BIT, 0x00},
+	{0xc458, CRL_REG_LEN_08BIT, 0x00},
+	{0xc459, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc45f, CRL_REG_LEN_08BIT, 0x01},
+	{0xc460, CRL_REG_LEN_08BIT, 0x01},
+	{0xc461, CRL_REG_LEN_08BIT, 0x01},
+	{0xc462, CRL_REG_LEN_08BIT, 0x01},
+	{0xc464, CRL_REG_LEN_08BIT, 0x88},
+	{0xc465, CRL_REG_LEN_08BIT, 0x00},
+	{0xc466, CRL_REG_LEN_08BIT, 0x8a},
+	{0xc467, CRL_REG_LEN_08BIT, 0x00},
+	{0xc468, CRL_REG_LEN_08BIT, 0x86},
+	{0xc469, CRL_REG_LEN_08BIT, 0x00},
+	{0xc46a, CRL_REG_LEN_08BIT, 0x40},
+	{0xc46b, CRL_REG_LEN_08BIT, 0x50},
+	{0xc46c, CRL_REG_LEN_08BIT, 0x30},
+	{0xc46d, CRL_REG_LEN_08BIT, 0x28},
+	{0xc46e, CRL_REG_LEN_08BIT, 0x60},
+	{0xc46f, CRL_REG_LEN_08BIT, 0x40},
+	{0xc47c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc47d, CRL_REG_LEN_08BIT, 0x38},
+	{0xc47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc480, CRL_REG_LEN_08BIT, 0x00},
+	{0xc481, CRL_REG_LEN_08BIT, 0xff},
+	{0xc482, CRL_REG_LEN_08BIT, 0x00},
+	{0xc483, CRL_REG_LEN_08BIT, 0x40},
+	{0xc484, CRL_REG_LEN_08BIT, 0x00},
+	{0xc485, CRL_REG_LEN_08BIT, 0x18},
+	{0xc486, CRL_REG_LEN_08BIT, 0x00},
+	{0xc487, CRL_REG_LEN_08BIT, 0x18},
+	{0xc488, CRL_REG_LEN_08BIT, 0x20},
+	{0xc489, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x20},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48d, CRL_REG_LEN_08BIT, 0x04},
+	{0xc48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48f, CRL_REG_LEN_08BIT, 0x04},
+	{0xc490, CRL_REG_LEN_08BIT, 0x07},
+	{0xc492, CRL_REG_LEN_08BIT, 0x20},
+	{0xc493, CRL_REG_LEN_08BIT, 0x08},
+	{0xc498, CRL_REG_LEN_08BIT, 0x02},
+	{0xc499, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49a, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49c, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49f, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a5, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4a8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a9, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4aa, CRL_REG_LEN_08BIT, 0x0d},
+	{0xc4ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4ac, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4ad, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4b4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b5, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b7, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4ba, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4be, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4bf, CRL_REG_LEN_08BIT, 0x33},
+	{0xc4c8, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4c9, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4ca, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0xd8},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0xc4d0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4d1, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4e0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4e1, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4e2, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4e4, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4e5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4e6, CRL_REG_LEN_08BIT, 0x30},
+	{0xc4e7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4e8, CRL_REG_LEN_08BIT, 0x50},
+	{0xc4e9, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4ea, CRL_REG_LEN_08BIT, 0x70},
+	{0xc4eb, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4ec, CRL_REG_LEN_08BIT, 0x90},
+	{0xc4ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc4ee, CRL_REG_LEN_08BIT, 0xb0},
+	{0xc4ef, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc4f0, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4f1, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc4f2, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4f3, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4f4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4f6, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f8, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4f9, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fe, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4ff, CRL_REG_LEN_08BIT, 0x02},
+	{0xc500, CRL_REG_LEN_08BIT, 0x48},
+	{0xc501, CRL_REG_LEN_08BIT, 0x74},
+	{0xc502, CRL_REG_LEN_08BIT, 0x58},
+	{0xc503, CRL_REG_LEN_08BIT, 0x80},
+	{0xc504, CRL_REG_LEN_08BIT, 0x05},
+	{0xc505, CRL_REG_LEN_08BIT, 0x80},
+	{0xc506, CRL_REG_LEN_08BIT, 0x03},
+	{0xc507, CRL_REG_LEN_08BIT, 0x80},
+	{0xc508, CRL_REG_LEN_08BIT, 0x01},
+	{0xc509, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc50a, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50b, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc50c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50d, CRL_REG_LEN_08BIT, 0x2c},
+	{0xc50e, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50f, CRL_REG_LEN_08BIT, 0x0a},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x00},
+	{0xc512, CRL_REG_LEN_08BIT, 0x4d},
+	{0xc513, CRL_REG_LEN_08BIT, 0x84},
+	{0xc514, CRL_REG_LEN_08BIT, 0x04},
+	{0xc515, CRL_REG_LEN_08BIT, 0x00},
+	{0xc518, CRL_REG_LEN_08BIT, 0x03},
+	{0xc519, CRL_REG_LEN_08BIT, 0x48},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x07},
+	{0xc51b, CRL_REG_LEN_08BIT, 0x70},
+	{0xc2e0, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e1, CRL_REG_LEN_08BIT, 0x51},
+	{0xc2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e3, CRL_REG_LEN_08BIT, 0xd6},
+	{0xc2e4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2e5, CRL_REG_LEN_08BIT, 0x5e},
+	{0xc2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2ea, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2eb, CRL_REG_LEN_08BIT, 0x90},
+	{0xc2ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2ee, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2ef, CRL_REG_LEN_08BIT, 0x64},
+	{0xc308, CRL_REG_LEN_08BIT, 0x00},
+	{0xc309, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xc30e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc310, CRL_REG_LEN_08BIT, 0x01},
+	{0xc311, CRL_REG_LEN_08BIT, 0x60},
+	{0xc312, CRL_REG_LEN_08BIT, 0xff},
+	{0xc313, CRL_REG_LEN_08BIT, 0x08},
+	{0xc314, CRL_REG_LEN_08BIT, 0x01},
+	{0xc315, CRL_REG_LEN_08BIT, 0x7f},
+	{0xc316, CRL_REG_LEN_08BIT, 0xff},
+	{0xc317, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc318, CRL_REG_LEN_08BIT, 0x00},
+	{0xc319, CRL_REG_LEN_08BIT, 0x0c},
+	{0xc31a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31b, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc31c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31d, CRL_REG_LEN_08BIT, 0x14},
+	{0xc31e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31f, CRL_REG_LEN_08BIT, 0xc5},
+	{0xc320, CRL_REG_LEN_08BIT, 0xff},
+	{0xc321, CRL_REG_LEN_08BIT, 0x4b},
+	{0xc322, CRL_REG_LEN_08BIT, 0xff},
+	{0xc323, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc324, CRL_REG_LEN_08BIT, 0xff},
+	{0xc325, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc326, CRL_REG_LEN_08BIT, 0x00},
+	{0xc327, CRL_REG_LEN_08BIT, 0x46},
+	{0xc328, CRL_REG_LEN_08BIT, 0xff},
+	{0xc329, CRL_REG_LEN_08BIT, 0xd2},
+	{0xc32a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32b, CRL_REG_LEN_08BIT, 0xe4},
+	{0xc32c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32d, CRL_REG_LEN_08BIT, 0xbb},
+	{0xc32e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc32f, CRL_REG_LEN_08BIT, 0x61},
+	{0xc330, CRL_REG_LEN_08BIT, 0xff},
+	{0xc331, CRL_REG_LEN_08BIT, 0xf9},
+	{0xc332, CRL_REG_LEN_08BIT, 0x00},
+	{0xc333, CRL_REG_LEN_08BIT, 0xd9},
+	{0xc334, CRL_REG_LEN_08BIT, 0x00},
+	{0xc335, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc336, CRL_REG_LEN_08BIT, 0x00},
+	{0xc337, CRL_REG_LEN_08BIT, 0xb1},
+	{0xc338, CRL_REG_LEN_08BIT, 0xff},
+	{0xc339, CRL_REG_LEN_08BIT, 0x64},
+	{0xc33a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33b, CRL_REG_LEN_08BIT, 0xeb},
+	{0xc33c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33d, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc33e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc33f, CRL_REG_LEN_08BIT, 0x48},
+	{0xc340, CRL_REG_LEN_08BIT, 0xff},
+	{0xc341, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc342, CRL_REG_LEN_08BIT, 0xff},
+	{0xc343, CRL_REG_LEN_08BIT, 0xed},
+	{0xc344, CRL_REG_LEN_08BIT, 0xff},
+	{0xc345, CRL_REG_LEN_08BIT, 0xad},
+	{0xc346, CRL_REG_LEN_08BIT, 0x00},
+	{0xc347, CRL_REG_LEN_08BIT, 0x66},
+	{0xc348, CRL_REG_LEN_08BIT, 0x01},
+	{0xc349, CRL_REG_LEN_08BIT, 0x00},
+	{0x6700, CRL_REG_LEN_08BIT, 0x04},
+	{0x6701, CRL_REG_LEN_08BIT, 0x7b},
+	{0x6702, CRL_REG_LEN_08BIT, 0xfd},
+	{0x6703, CRL_REG_LEN_08BIT, 0xf9},
+	{0x6704, CRL_REG_LEN_08BIT, 0x3d},
+	{0x6705, CRL_REG_LEN_08BIT, 0x71},
+	{0x6706, CRL_REG_LEN_08BIT, 0x78},
+	{0x6708, CRL_REG_LEN_08BIT, 0x05},
+	{0x6f06, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f07, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0a, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f00, CRL_REG_LEN_08BIT, 0x03},
+	{0xc34c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc34d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc34e, CRL_REG_LEN_08BIT, 0x46},
+	{0xc34f, CRL_REG_LEN_08BIT, 0x55},
+	{0xc350, CRL_REG_LEN_08BIT, 0x00},
+	{0xc351, CRL_REG_LEN_08BIT, 0x40},
+	{0xc352, CRL_REG_LEN_08BIT, 0x00},
+	{0xc353, CRL_REG_LEN_08BIT, 0xff},
+	{0xc354, CRL_REG_LEN_08BIT, 0x04},
+	{0xc355, CRL_REG_LEN_08BIT, 0x08},
+	{0xc356, CRL_REG_LEN_08BIT, 0x01},
+	{0xc357, CRL_REG_LEN_08BIT, 0xef},
+	{0xc358, CRL_REG_LEN_08BIT, 0x30},
+	{0xc359, CRL_REG_LEN_08BIT, 0x01},
+	{0xc35a, CRL_REG_LEN_08BIT, 0x64},
+	{0xc35b, CRL_REG_LEN_08BIT, 0x46},
+	{0xc35c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3621, CRL_REG_LEN_08BIT, 0x73},
+	{0x3702, CRL_REG_LEN_08BIT, 0x20},
+	{0x3703, CRL_REG_LEN_08BIT, 0x48},
+	{0x3704, CRL_REG_LEN_08BIT, 0x32},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0xA4},
+	{0x3804, CRL_REG_LEN_08BIT, 0x00},
+	{0x3805, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3806, CRL_REG_LEN_08BIT, 0x02},
+	{0x3807, CRL_REG_LEN_08BIT, 0x89},
+	{0x3808, CRL_REG_LEN_08BIT, 0x02},
+	{0x3809, CRL_REG_LEN_08BIT, 0x80},
+	{0x380a, CRL_REG_LEN_08BIT, 0x01},
+	{0x380b, CRL_REG_LEN_08BIT, 0xE0},
+	{0x380c, CRL_REG_LEN_08BIT, 0x04},
+	{0x380d, CRL_REG_LEN_08BIT, 0xAC},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x05},
+	{0x6e43, CRL_REG_LEN_08BIT, 0x3A},
+	{0x3810, CRL_REG_LEN_08BIT, 0x00},
+	{0x3811, CRL_REG_LEN_08BIT, 0x08},
+	{0x3812, CRL_REG_LEN_08BIT, 0x00},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x381e, CRL_REG_LEN_08BIT, 0x00},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0C},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4605, CRL_REG_LEN_08BIT, 0x08},
+	{0x4606, CRL_REG_LEN_08BIT, 0x09},
+	{0x4607, CRL_REG_LEN_08BIT, 0x58},
+	{0xc488, CRL_REG_LEN_08BIT, 0x53},
+	{0xc489, CRL_REG_LEN_08BIT, 0x20},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x53},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0xD8},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0xD8},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x00},
+	{0xc512, CRL_REG_LEN_08BIT, 0x4D},
+	{0xc513, CRL_REG_LEN_08BIT, 0x84},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0xc518, CRL_REG_LEN_08BIT, 0x05},
+	{0xc519, CRL_REG_LEN_08BIT, 0x3A},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x04},
+	{0xc51b, CRL_REG_LEN_08BIT, 0xAC},
+	{0x5608, CRL_REG_LEN_08BIT, 0x15},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8C},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301a, CRL_REG_LEN_08BIT, 0xf0},
+	{0xceb0, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb1, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb2, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb3, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb4, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb5, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xceb6, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xceb7, CRL_REG_LEN_08BIT, 0x00},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0c},
+};
+
+static struct crl_dynamic_register_access ov10635_h_flip_regs[] = {
+	{
+		.address = 0x381d,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x3,
+	}
+};
+
+static struct crl_dynamic_register_access ov10635_v_flip_regs[] = {
+	{
+		.address = 0x381c,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xc0,
+	}
+};
+
+/* Needed for acpi support for runtime detection */
+static struct crl_sensor_detect_config ov10635_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 8,
+	},
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 8,
+	}
+};
+
+static struct crl_pll_configuration ov10635_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 20,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	}
+};
+
+static struct crl_subdev_rect_rep ov10635_1280_800_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	},
+};
+
+static struct crl_subdev_rect_rep ov10635_1280_720_rects_BT656[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 720,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 720,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_subdev_rect_rep ov10635_640_480_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 640,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_register_write_rep ov10635_powerup_regs[] = {
+	{OV10635_REG_RESET, CRL_REG_LEN_08BIT, 0x01},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+};
+
+static struct crl_register_write_rep ov10635_poweroff_regs[] = {
+	{OV10635_REG_RESET, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_power_seq_entity ov10635_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 0,
+	},
+};
+
+static struct crl_mode_rep ov10635_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10635_1280_800_rects),
+		.sd_rects = ov10635_1280_800_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 800,
+		.min_llp = 2250,
+		.min_fll = 1320,
+		.mode_regs_items = ARRAY_SIZE(ov10635_1280_800_YUV_HDR),
+		.mode_regs = ov10635_1280_800_YUV_HDR,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10635_1280_720_rects_BT656),
+		.sd_rects = ov10635_1280_720_rects_BT656,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.min_llp = 2250,
+		.min_fll = 1320,
+		.mode_regs_items = ARRAY_SIZE(ov10635_1280_720_YUV_HDR_BT656),
+		.mode_regs = ov10635_1280_720_YUV_HDR_BT656,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10635_640_480_rects),
+		.sd_rects = ov10635_640_480_rects,
+		.binn_hor = 2,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.min_llp = 2250,
+		.min_fll = 1320,
+		.mode_regs_items = ARRAY_SIZE(ov10635_640_480_YUV_HDR),
+		.mode_regs = ov10635_640_480_YUV_HDR,
+	},
+};
+
+static struct crl_sensor_subdev_config ov10635_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov10635 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov10635 pixel array",
+	}
+};
+
+static struct crl_sensor_limits ov10635_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1280,
+	.y_addr_max = 800,
+	.min_frame_length_lines = 240,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 320,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data ov10635_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	}
+};
+
+static struct crl_register_write_rep ov10635_yuyv_regs[] = {
+	{0x4300, CRL_REG_LEN_08BIT, 0x38},
+};
+
+static struct crl_register_write_rep ov10635_uyvy_regs[] = {
+	{0x4300, CRL_REG_LEN_08BIT, 0x3a},
+};
+
+static struct crl_csi_data_fmt ov10635_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(ov10635_yuyv_regs),
+		.regs = ov10635_yuyv_regs,
+	},
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(ov10635_uyvy_regs),
+		.regs = ov10635_uyvy_regs,
+	},
+};
+
+static struct crl_v4l2_ctrl ov10635_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10635_h_flip_regs),
+		.regs = ov10635_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10635_v_flip_regs),
+		.regs = ov10635_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+};
+
+struct crl_sensor_configuration ov10635_crl_configuration = {
+
+	.powerup_regs_items = ARRAY_SIZE(ov10635_powerup_regs),
+	.powerup_regs = ov10635_powerup_regs,
+
+	.poweroff_regs_items = ARRAY_SIZE(ov10635_poweroff_regs),
+	.poweroff_regs = ov10635_poweroff_regs,
+
+	.power_items = ARRAY_SIZE(ov10635_power_items),
+	.power_entities = ov10635_power_items,
+
+	.id_reg_items = ARRAY_SIZE(ov10635_sensor_detect_regset),
+	.id_regs = ov10635_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov10635_sensor_subdevs),
+	.subdevs = ov10635_sensor_subdevs,
+
+	.pll_config_items = ARRAY_SIZE(ov10635_pll_configurations),
+	.pll_configs = ov10635_pll_configurations,
+
+	.sensor_limits = &ov10635_sensor_limits,
+
+	.modes_items = ARRAY_SIZE(ov10635_modes),
+	.modes = ov10635_modes,
+
+	.streamon_regs_items = 0,
+	.streamon_regs = 0,
+
+	.streamoff_regs_items = 0,
+	.streamoff_regs = 0,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov10635_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov10635_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov10635_crl_csi_data_fmt),
+	.csi_fmts = ov10635_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov10635_flip_configurations),
+	.flip_data = ov10635_flip_configurations,
+};
+
+#endif  /* __CRLMODULE_OV10635_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov10640_configuration.h b/drivers/media/i2c/crlmodule/crl_ov10640_configuration.h
new file mode 100644
index 000000000000..ab8378bc0988
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov10640_configuration.h
@@ -0,0 +1,3235 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Shuguang Gong <shuguang.gong@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV10640_CONFIGURATION_H_
+#define __CRLMODULE_OV10640_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define OV10640_REG_STREAM		0x3012
+#define OV10640_REG_RESET		0x3013
+
+#define OV10640_HMAX			65535
+#define OV10640_VMAX			65535
+#define OV10640_MAX_SHS1		(OV10640_VMAX - 6)
+#define OV10640_MAX_SHS3		0x7F
+#define OV10640_MAX_DGAIN		0x3FFF
+
+/* 800Mbps for ov10640 1280x1080 30fps */
+static struct crl_register_write_rep ov10640_pll_800mbps[] = {
+	{0x3000, CRL_REG_LEN_08BIT, 0x03},
+	{0x3001, CRL_REG_LEN_08BIT, 0x48},
+	{0x3002, CRL_REG_LEN_08BIT, 0x07},
+	{0x3004, CRL_REG_LEN_08BIT, 0x03},
+	{0x3005, CRL_REG_LEN_08BIT, 0x48},
+	{0x3006, CRL_REG_LEN_08BIT, 0x07},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep ov10640_powerup_standby[] = {
+	{OV10640_REG_RESET, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_power_seq_entity ov10640_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 0,
+	},
+};
+
+static struct crl_register_write_rep ov10640_1280_1080_LONG_RAW[] = {
+	{0x328a, CRL_REG_LEN_08BIT, 0x11},
+	{0x313f, CRL_REG_LEN_08BIT, 0x80},
+	{0x3132, CRL_REG_LEN_08BIT, 0x24},
+	{0x3014, CRL_REG_LEN_08BIT, 0x03},
+	{0x3023, CRL_REG_LEN_08BIT, 0x05},
+	{0x3032, CRL_REG_LEN_08BIT, 0x35},
+	{0x3033, CRL_REG_LEN_08BIT, 0x04},
+	{0x3054, CRL_REG_LEN_08BIT, 0x00},
+	{0x3055, CRL_REG_LEN_08BIT, 0x08},
+	{0x3056, CRL_REG_LEN_08BIT, 0x01},
+	{0x3057, CRL_REG_LEN_08BIT, 0xff},
+	{0x3058, CRL_REG_LEN_08BIT, 0xaf},
+	{0x3059, CRL_REG_LEN_08BIT, 0x44},
+	{0x305a, CRL_REG_LEN_08BIT, 0x02},
+	{0x305b, CRL_REG_LEN_08BIT, 0x00},
+	{0x305c, CRL_REG_LEN_08BIT, 0x30},
+	{0x305d, CRL_REG_LEN_08BIT, 0x9e},
+	{0x305e, CRL_REG_LEN_08BIT, 0x19},
+	{0x305f, CRL_REG_LEN_08BIT, 0x18},
+	{0x3060, CRL_REG_LEN_08BIT, 0xf9},
+	{0x3061, CRL_REG_LEN_08BIT, 0xf0},
+	{0x308c, CRL_REG_LEN_08BIT, 0xB3},
+	{0x308f, CRL_REG_LEN_08BIT, 0x10},
+	{0x3091, CRL_REG_LEN_08BIT, 0x00},
+	{0x3093, CRL_REG_LEN_08BIT, 0x01},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x80},
+	{0x30af, CRL_REG_LEN_08BIT, 0x80},
+	{0x30b0, CRL_REG_LEN_08BIT, 0xff},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x3f},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x22},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x22},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30be, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x80},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c6, CRL_REG_LEN_08BIT, 0x80},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x80},
+	{0x3119, CRL_REG_LEN_08BIT, 0x45},
+	{0x311a, CRL_REG_LEN_08BIT, 0x01},
+	{0x311b, CRL_REG_LEN_08BIT, 0x4a},
+	{0x3074, CRL_REG_LEN_08BIT, 0x00},
+	{0x3075, CRL_REG_LEN_08BIT, 0x00},
+	{0x3076, CRL_REG_LEN_08BIT, 0x00},
+	{0x3077, CRL_REG_LEN_08BIT, 0x02},
+	{0x3078, CRL_REG_LEN_08BIT, 0x05},
+	{0x3079, CRL_REG_LEN_08BIT, 0x07},
+	{0x307a, CRL_REG_LEN_08BIT, 0x04},
+	{0x307b, CRL_REG_LEN_08BIT, 0x41},
+	{0x307c, CRL_REG_LEN_08BIT, 0x05},
+	{0x307d, CRL_REG_LEN_08BIT, 0x00},
+	{0x307e, CRL_REG_LEN_08BIT, 0x04},
+	{0x307f, CRL_REG_LEN_08BIT, 0x38},
+	{0x3084, CRL_REG_LEN_08BIT, 0x00},
+	{0x3085, CRL_REG_LEN_08BIT, 0x04},
+	{0x3086, CRL_REG_LEN_08BIT, 0x00},
+	{0x3087, CRL_REG_LEN_08BIT, 0x04},
+	{0x3088, CRL_REG_LEN_08BIT, 0x00},
+	{0x3089, CRL_REG_LEN_08BIT, 0x40},
+	{0x308d, CRL_REG_LEN_08BIT, 0x92},
+	{0x3094, CRL_REG_LEN_08BIT, 0xa5},
+	{0x30fa, CRL_REG_LEN_08BIT, 0x06},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x01},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3127, CRL_REG_LEN_08BIT, 0x63},
+	{0x3128, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3129, CRL_REG_LEN_08BIT, 0x00},
+	{0x31be, CRL_REG_LEN_08BIT, 0x01},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x78},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x40},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x78},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x80},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x78},
+	{0x30aa, CRL_REG_LEN_08BIT, 0xe0},
+	{0x30ab, CRL_REG_LEN_08BIT, 0xf9},
+	{0x30ac, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3440, CRL_REG_LEN_08BIT, 0x04},
+	{0x3444, CRL_REG_LEN_08BIT, 0x28},
+	{0x344e, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3457, CRL_REG_LEN_08BIT, 0x33},
+	{0x345e, CRL_REG_LEN_08BIT, 0x38},
+	{0x3461, CRL_REG_LEN_08BIT, 0xa8},
+	{0x7002, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7001, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7048, CRL_REG_LEN_08BIT, 0x00},
+	{0x7049, CRL_REG_LEN_08BIT, 0x02},
+	{0x704a, CRL_REG_LEN_08BIT, 0x02},
+	{0x704b, CRL_REG_LEN_08BIT, 0x00},
+	{0x704c, CRL_REG_LEN_08BIT, 0x01},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x7043, CRL_REG_LEN_08BIT, 0x04},
+	{0x7040, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7047, CRL_REG_LEN_08BIT, 0x00},
+	{0x7044, CRL_REG_LEN_08BIT, 0x01},
+	{0x7000, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7084, CRL_REG_LEN_08BIT, 0x01},
+	{0x7085, CRL_REG_LEN_08BIT, 0x03},
+	{0x7086, CRL_REG_LEN_08BIT, 0x02},
+	{0x7087, CRL_REG_LEN_08BIT, 0x40},
+	{0x7088, CRL_REG_LEN_08BIT, 0x01},
+	{0x7089, CRL_REG_LEN_08BIT, 0x20},
+	{0x707f, CRL_REG_LEN_08BIT, 0x04},
+	{0x707c, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0x01},
+	{0x7003, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x02},
+	{0x70c2, CRL_REG_LEN_08BIT, 0x02},
+	{0x70c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0x03},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x98},
+	{0x70bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x70bd, CRL_REG_LEN_08BIT, 0x80},
+	{0x7004, CRL_REG_LEN_08BIT, 0x02},
+	{0x7005, CRL_REG_LEN_08BIT, 0x00},
+	{0x7006, CRL_REG_LEN_08BIT, 0x01},
+	{0x7007, CRL_REG_LEN_08BIT, 0x80},
+	{0x7008, CRL_REG_LEN_08BIT, 0x02},
+	{0x7009, CRL_REG_LEN_08BIT, 0x00},
+	{0x700a, CRL_REG_LEN_08BIT, 0x04},
+	{0x700b, CRL_REG_LEN_08BIT, 0x00},
+	{0x700e, CRL_REG_LEN_08BIT, 0x00},
+	{0x700f, CRL_REG_LEN_08BIT, 0x60},
+	{0x701a, CRL_REG_LEN_08BIT, 0x02},
+	{0x701b, CRL_REG_LEN_08BIT, 0x00},
+	{0x701c, CRL_REG_LEN_08BIT, 0x01},
+	{0x701d, CRL_REG_LEN_08BIT, 0x80},
+	{0x701e, CRL_REG_LEN_08BIT, 0x02},
+	{0x701f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7020, CRL_REG_LEN_08BIT, 0x04},
+	{0x7021, CRL_REG_LEN_08BIT, 0x00},
+	{0x7024, CRL_REG_LEN_08BIT, 0x00},
+	{0x7025, CRL_REG_LEN_08BIT, 0x60},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e4, CRL_REG_LEN_08BIT, 0x10},
+	{0x70e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x70eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e8, CRL_REG_LEN_08BIT, 0x10},
+	{0x70e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xfd},
+	{0x70ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x70eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x70f0, CRL_REG_LEN_08BIT, 0xfd},
+	{0x70f1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30fb, CRL_REG_LEN_08BIT, 0x06},
+	{0x30fc, CRL_REG_LEN_08BIT, 0x80},
+	{0x30fd, CRL_REG_LEN_08BIT, 0x02},
+	{0x30fe, CRL_REG_LEN_08BIT, 0x93},
+	{0x6000, CRL_REG_LEN_08BIT, 0xc1},
+	{0x6001, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6002, CRL_REG_LEN_08BIT, 0xba},
+	{0x6003, CRL_REG_LEN_08BIT, 0xa4},
+	{0x6004, CRL_REG_LEN_08BIT, 0xb5},
+	{0x6005, CRL_REG_LEN_08BIT, 0xa0},
+	{0x6006, CRL_REG_LEN_08BIT, 0x82},
+	{0x6007, CRL_REG_LEN_08BIT, 0xa7},
+	{0x6008, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6009, CRL_REG_LEN_08BIT, 0x5c},
+	{0x600a, CRL_REG_LEN_08BIT, 0x9e},
+	{0x600b, CRL_REG_LEN_08BIT, 0xc0},
+	{0x600c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x600d, CRL_REG_LEN_08BIT, 0x33},
+	{0x600e, CRL_REG_LEN_08BIT, 0xcc},
+	{0x600f, CRL_REG_LEN_08BIT, 0xe2},
+	{0x6010, CRL_REG_LEN_08BIT, 0xc1},
+	{0x6011, CRL_REG_LEN_08BIT, 0xab},
+	{0x6012, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6013, CRL_REG_LEN_08BIT, 0x00},
+	{0x6014, CRL_REG_LEN_08BIT, 0x00},
+	{0x6015, CRL_REG_LEN_08BIT, 0x00},
+	{0x6016, CRL_REG_LEN_08BIT, 0x00},
+	{0x6017, CRL_REG_LEN_08BIT, 0x00},
+	{0x6018, CRL_REG_LEN_08BIT, 0x00},
+	{0x6019, CRL_REG_LEN_08BIT, 0x00},
+	{0x601a, CRL_REG_LEN_08BIT, 0x00},
+	{0x601b, CRL_REG_LEN_08BIT, 0x00},
+	{0x601c, CRL_REG_LEN_08BIT, 0x00},
+	{0x601d, CRL_REG_LEN_08BIT, 0x00},
+	{0x601e, CRL_REG_LEN_08BIT, 0x9c},
+	{0x601f, CRL_REG_LEN_08BIT, 0x94},
+	{0x6020, CRL_REG_LEN_08BIT, 0x90},
+	{0x6021, CRL_REG_LEN_08BIT, 0xc5},
+	{0x6022, CRL_REG_LEN_08BIT, 0x01},
+	{0x6023, CRL_REG_LEN_08BIT, 0x54},
+	{0x6024, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6025, CRL_REG_LEN_08BIT, 0x61},
+	{0x6026, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6027, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6028, CRL_REG_LEN_08BIT, 0x04},
+	{0x6029, CRL_REG_LEN_08BIT, 0x35},
+	{0x602a, CRL_REG_LEN_08BIT, 0xb1},
+	{0x602b, CRL_REG_LEN_08BIT, 0xb2},
+	{0x602c, CRL_REG_LEN_08BIT, 0xb3},
+	{0x602d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x602e, CRL_REG_LEN_08BIT, 0xd3},
+	{0x602f, CRL_REG_LEN_08BIT, 0x12},
+	{0x6030, CRL_REG_LEN_08BIT, 0x31},
+	{0x6031, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6032, CRL_REG_LEN_08BIT, 0x06},
+	{0x6033, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6034, CRL_REG_LEN_08BIT, 0xc4},
+	{0x6035, CRL_REG_LEN_08BIT, 0xce},
+	{0x6036, CRL_REG_LEN_08BIT, 0x18},
+	{0x6037, CRL_REG_LEN_08BIT, 0xcf},
+	{0x6038, CRL_REG_LEN_08BIT, 0x1e},
+	{0x6039, CRL_REG_LEN_08BIT, 0xd0},
+	{0x603a, CRL_REG_LEN_08BIT, 0x24},
+	{0x603b, CRL_REG_LEN_08BIT, 0xc5},
+	{0x603c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x603d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x603e, CRL_REG_LEN_08BIT, 0xcc},
+	{0x603f, CRL_REG_LEN_08BIT, 0x52},
+	{0x6040, CRL_REG_LEN_08BIT, 0x2b},
+	{0x6041, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6042, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6043, CRL_REG_LEN_08BIT, 0x02},
+	{0x6044, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6045, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6046, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6047, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6048, CRL_REG_LEN_08BIT, 0x0f},
+	{0x6049, CRL_REG_LEN_08BIT, 0x1a},
+	{0x604a, CRL_REG_LEN_08BIT, 0x2a},
+	{0x604b, CRL_REG_LEN_08BIT, 0xd4},
+	{0x604c, CRL_REG_LEN_08BIT, 0xf6},
+	{0x604d, CRL_REG_LEN_08BIT, 0xba},
+	{0x604e, CRL_REG_LEN_08BIT, 0x56},
+	{0x604f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6050, CRL_REG_LEN_08BIT, 0x2e},
+	{0x6051, CRL_REG_LEN_08BIT, 0x54},
+	{0x6052, CRL_REG_LEN_08BIT, 0x26},
+	{0x6053, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6054, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6055, CRL_REG_LEN_08BIT, 0x60},
+	{0x6056, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6057, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6058, CRL_REG_LEN_08BIT, 0x27},
+	{0x6059, CRL_REG_LEN_08BIT, 0x27},
+	{0x605a, CRL_REG_LEN_08BIT, 0x08},
+	{0x605b, CRL_REG_LEN_08BIT, 0x1a},
+	{0x605c, CRL_REG_LEN_08BIT, 0xcc},
+	{0x605d, CRL_REG_LEN_08BIT, 0x88},
+	{0x605e, CRL_REG_LEN_08BIT, 0x00},
+	{0x605f, CRL_REG_LEN_08BIT, 0x12},
+	{0x6060, CRL_REG_LEN_08BIT, 0x2c},
+	{0x6061, CRL_REG_LEN_08BIT, 0x60},
+	{0x6062, CRL_REG_LEN_08BIT, 0xc2},
+	{0x6063, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6064, CRL_REG_LEN_08BIT, 0xa5},
+	{0x6065, CRL_REG_LEN_08BIT, 0xb5},
+	{0x6066, CRL_REG_LEN_08BIT, 0xa0},
+	{0x6067, CRL_REG_LEN_08BIT, 0x82},
+	{0x6068, CRL_REG_LEN_08BIT, 0x5c},
+	{0x6069, CRL_REG_LEN_08BIT, 0xd4},
+	{0x606a, CRL_REG_LEN_08BIT, 0xbe},
+	{0x606b, CRL_REG_LEN_08BIT, 0xd4},
+	{0x606c, CRL_REG_LEN_08BIT, 0xbe},
+	{0x606d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x606e, CRL_REG_LEN_08BIT, 0x01},
+	{0x606f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x6070, CRL_REG_LEN_08BIT, 0x74},
+	{0x6071, CRL_REG_LEN_08BIT, 0x00},
+	{0x6072, CRL_REG_LEN_08BIT, 0x61},
+	{0x6073, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6074, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6075, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6076, CRL_REG_LEN_08BIT, 0xdf},
+	{0x6077, CRL_REG_LEN_08BIT, 0xc6},
+	{0x6078, CRL_REG_LEN_08BIT, 0x35},
+	{0x6079, CRL_REG_LEN_08BIT, 0xd2},
+	{0x607a, CRL_REG_LEN_08BIT, 0xcc},
+	{0x607b, CRL_REG_LEN_08BIT, 0x06},
+	{0x607c, CRL_REG_LEN_08BIT, 0x31},
+	{0x607d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x607e, CRL_REG_LEN_08BIT, 0xc5},
+	{0x607f, CRL_REG_LEN_08BIT, 0xbb},
+	{0x6080, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6081, CRL_REG_LEN_08BIT, 0x18},
+	{0x6082, CRL_REG_LEN_08BIT, 0xc6},
+	{0x6083, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6084, CRL_REG_LEN_08BIT, 0xbd},
+	{0x6085, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6086, CRL_REG_LEN_08BIT, 0x52},
+	{0x6087, CRL_REG_LEN_08BIT, 0x2b},
+	{0x6088, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6089, CRL_REG_LEN_08BIT, 0xd3},
+	{0x608a, CRL_REG_LEN_08BIT, 0x01},
+	{0x608b, CRL_REG_LEN_08BIT, 0xcc},
+	{0x608c, CRL_REG_LEN_08BIT, 0x0a},
+	{0x608d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x608e, CRL_REG_LEN_08BIT, 0xd3},
+	{0x608f, CRL_REG_LEN_08BIT, 0x0f},
+	{0x6090, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6091, CRL_REG_LEN_08BIT, 0x71},
+	{0x6092, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6093, CRL_REG_LEN_08BIT, 0xd4},
+	{0x6094, CRL_REG_LEN_08BIT, 0xf6},
+	{0x6095, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6096, CRL_REG_LEN_08BIT, 0x22},
+	{0x6097, CRL_REG_LEN_08BIT, 0x70},
+	{0x6098, CRL_REG_LEN_08BIT, 0xca},
+	{0x6099, CRL_REG_LEN_08BIT, 0x26},
+	{0x609a, CRL_REG_LEN_08BIT, 0xd2},
+	{0x609b, CRL_REG_LEN_08BIT, 0xcc},
+	{0x609c, CRL_REG_LEN_08BIT, 0x60},
+	{0x609d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x609e, CRL_REG_LEN_08BIT, 0xd3},
+	{0x609f, CRL_REG_LEN_08BIT, 0x27},
+	{0x60a0, CRL_REG_LEN_08BIT, 0x27},
+	{0x60a1, CRL_REG_LEN_08BIT, 0x08},
+	{0x60a2, CRL_REG_LEN_08BIT, 0x1a},
+	{0x60a3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60a4, CRL_REG_LEN_08BIT, 0x88},
+	{0x60a5, CRL_REG_LEN_08BIT, 0x12},
+	{0x60a6, CRL_REG_LEN_08BIT, 0x2c},
+	{0x60a7, CRL_REG_LEN_08BIT, 0x60},
+	{0x60a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x60a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x60aa, CRL_REG_LEN_08BIT, 0xc0},
+	{0x60ab, CRL_REG_LEN_08BIT, 0xb9},
+	{0x60ac, CRL_REG_LEN_08BIT, 0xa3},
+	{0x60ad, CRL_REG_LEN_08BIT, 0xb5},
+	{0x60ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x60af, CRL_REG_LEN_08BIT, 0xa0},
+	{0x60b0, CRL_REG_LEN_08BIT, 0x82},
+	{0x60b1, CRL_REG_LEN_08BIT, 0x5c},
+	{0x60b2, CRL_REG_LEN_08BIT, 0xd4},
+	{0x60b3, CRL_REG_LEN_08BIT, 0xa0},
+	{0x60b4, CRL_REG_LEN_08BIT, 0x9d},
+	{0x60b5, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60b6, CRL_REG_LEN_08BIT, 0x26},
+	{0x60b7, CRL_REG_LEN_08BIT, 0xb0},
+	{0x60b8, CRL_REG_LEN_08BIT, 0xb7},
+	{0x60b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x60ba, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60bb, CRL_REG_LEN_08BIT, 0x0a},
+	{0x60bc, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60bd, CRL_REG_LEN_08BIT, 0x10},
+	{0x60be, CRL_REG_LEN_08BIT, 0x9c},
+	{0x60bf, CRL_REG_LEN_08BIT, 0x94},
+	{0x60c0, CRL_REG_LEN_08BIT, 0x90},
+	{0x60c1, CRL_REG_LEN_08BIT, 0xc8},
+	{0x60c2, CRL_REG_LEN_08BIT, 0xba},
+	{0x60c3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x60c4, CRL_REG_LEN_08BIT, 0x74},
+	{0x60c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x60c6, CRL_REG_LEN_08BIT, 0x61},
+	{0x60c7, CRL_REG_LEN_08BIT, 0x2a},
+	{0x60c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x60c9, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60ca, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60cb, CRL_REG_LEN_08BIT, 0xdf},
+	{0x60cc, CRL_REG_LEN_08BIT, 0xc4},
+	{0x60cd, CRL_REG_LEN_08BIT, 0x35},
+	{0x60ce, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60cf, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60d0, CRL_REG_LEN_08BIT, 0x06},
+	{0x60d1, CRL_REG_LEN_08BIT, 0x31},
+	{0x60d2, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60d3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60d4, CRL_REG_LEN_08BIT, 0x15},
+	{0x60d5, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60d6, CRL_REG_LEN_08BIT, 0xbb},
+	{0x60d7, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60d8, CRL_REG_LEN_08BIT, 0x1a},
+	{0x60d9, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60da, CRL_REG_LEN_08BIT, 0xbe},
+	{0x60db, CRL_REG_LEN_08BIT, 0xce},
+	{0x60dc, CRL_REG_LEN_08BIT, 0x52},
+	{0x60dd, CRL_REG_LEN_08BIT, 0xcf},
+	{0x60de, CRL_REG_LEN_08BIT, 0x56},
+	{0x60df, CRL_REG_LEN_08BIT, 0xd0},
+	{0x60e0, CRL_REG_LEN_08BIT, 0x5b},
+	{0x60e1, CRL_REG_LEN_08BIT, 0x2b},
+	{0x60e2, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60e3, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x60e5, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60e6, CRL_REG_LEN_08BIT, 0x0a},
+	{0x60e7, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60e8, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60e9, CRL_REG_LEN_08BIT, 0x0f},
+	{0x60ea, CRL_REG_LEN_08BIT, 0xd9},
+	{0x60eb, CRL_REG_LEN_08BIT, 0xc7},
+	{0x60ec, CRL_REG_LEN_08BIT, 0xda},
+	{0x60ed, CRL_REG_LEN_08BIT, 0xce},
+	{0x60ee, CRL_REG_LEN_08BIT, 0x1a},
+	{0x60ef, CRL_REG_LEN_08BIT, 0xd4},
+	{0x60f0, CRL_REG_LEN_08BIT, 0xf6},
+	{0x60f1, CRL_REG_LEN_08BIT, 0xd4},
+	{0x60f2, CRL_REG_LEN_08BIT, 0xa9},
+	{0x60f3, CRL_REG_LEN_08BIT, 0x27},
+	{0x60f4, CRL_REG_LEN_08BIT, 0x00},
+	{0x60f5, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60f6, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60f7, CRL_REG_LEN_08BIT, 0x60},
+	{0x60f8, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60f9, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60fa, CRL_REG_LEN_08BIT, 0x2d},
+	{0x60fb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x60fc, CRL_REG_LEN_08BIT, 0xdf},
+	{0x60fd, CRL_REG_LEN_08BIT, 0xda},
+	{0x60fe, CRL_REG_LEN_08BIT, 0xe5},
+	{0x60ff, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6100, CRL_REG_LEN_08BIT, 0x12},
+	{0x6101, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6102, CRL_REG_LEN_08BIT, 0x88},
+	{0x6103, CRL_REG_LEN_08BIT, 0xd6},
+	{0x6104, CRL_REG_LEN_08BIT, 0xb1},
+	{0x6105, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6106, CRL_REG_LEN_08BIT, 0xba},
+	{0x6107, CRL_REG_LEN_08BIT, 0xaf},
+	{0x6108, CRL_REG_LEN_08BIT, 0xdc},
+	{0x6109, CRL_REG_LEN_08BIT, 0x00},
+	{0x610a, CRL_REG_LEN_08BIT, 0xcb},
+	{0x610b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x610c, CRL_REG_LEN_08BIT, 0xb9},
+	{0x610d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x610e, CRL_REG_LEN_08BIT, 0xb5},
+	{0x610f, CRL_REG_LEN_08BIT, 0x5c},
+	{0x6110, CRL_REG_LEN_08BIT, 0x12},
+	{0x6111, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6112, CRL_REG_LEN_08BIT, 0x61},
+	{0x6113, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6114, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6115, CRL_REG_LEN_08BIT, 0xdf},
+	{0x6116, CRL_REG_LEN_08BIT, 0xc7},
+	{0x6117, CRL_REG_LEN_08BIT, 0x35},
+	{0x6118, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6119, CRL_REG_LEN_08BIT, 0xcc},
+	{0x611a, CRL_REG_LEN_08BIT, 0x06},
+	{0x611b, CRL_REG_LEN_08BIT, 0x31},
+	{0x611c, CRL_REG_LEN_08BIT, 0xc6},
+	{0x611d, CRL_REG_LEN_08BIT, 0xbb},
+	{0x611e, CRL_REG_LEN_08BIT, 0xd2},
+	{0x611f, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6120, CRL_REG_LEN_08BIT, 0x18},
+	{0x6121, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6122, CRL_REG_LEN_08BIT, 0xbe},
+	{0x6123, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6124, CRL_REG_LEN_08BIT, 0x52},
+	{0x6125, CRL_REG_LEN_08BIT, 0xc7},
+	{0x6126, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6127, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6128, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6129, CRL_REG_LEN_08BIT, 0xb4},
+	{0x612a, CRL_REG_LEN_08BIT, 0xb7},
+	{0x612b, CRL_REG_LEN_08BIT, 0x94},
+	{0x612c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x612d, CRL_REG_LEN_08BIT, 0x12},
+	{0x612e, CRL_REG_LEN_08BIT, 0x26},
+	{0x612f, CRL_REG_LEN_08BIT, 0x42},
+	{0x6130, CRL_REG_LEN_08BIT, 0x46},
+	{0x6131, CRL_REG_LEN_08BIT, 0x42},
+	{0x6132, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6133, CRL_REG_LEN_08BIT, 0x20},
+	{0x6134, CRL_REG_LEN_08BIT, 0x27},
+	{0x6135, CRL_REG_LEN_08BIT, 0x00},
+	{0x6136, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6137, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6138, CRL_REG_LEN_08BIT, 0x88},
+	{0x6139, CRL_REG_LEN_08BIT, 0x60},
+	{0x613a, CRL_REG_LEN_08BIT, 0x2c},
+	{0x613b, CRL_REG_LEN_08BIT, 0x12},
+	{0x613c, CRL_REG_LEN_08BIT, 0x40},
+	{0x613d, CRL_REG_LEN_08BIT, 0xb8},
+	{0x613e, CRL_REG_LEN_08BIT, 0x90},
+	{0x613f, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6140, CRL_REG_LEN_08BIT, 0xba},
+	{0x6141, CRL_REG_LEN_08BIT, 0x00},
+	{0x6142, CRL_REG_LEN_08BIT, 0x00},
+	{0x6143, CRL_REG_LEN_08BIT, 0x00},
+	{0x6144, CRL_REG_LEN_08BIT, 0x00},
+	{0x6145, CRL_REG_LEN_08BIT, 0x00},
+	{0x6146, CRL_REG_LEN_08BIT, 0x00},
+	{0x6147, CRL_REG_LEN_08BIT, 0xaa},
+	{0x6148, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6149, CRL_REG_LEN_08BIT, 0x00},
+	{0x614a, CRL_REG_LEN_08BIT, 0x00},
+	{0x614b, CRL_REG_LEN_08BIT, 0x00},
+	{0x614c, CRL_REG_LEN_08BIT, 0x00},
+	{0x614d, CRL_REG_LEN_08BIT, 0xa6},
+	{0x614e, CRL_REG_LEN_08BIT, 0xb7},
+	{0x614f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6150, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6151, CRL_REG_LEN_08BIT, 0x00},
+	{0x6152, CRL_REG_LEN_08BIT, 0x71},
+	{0x6153, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6154, CRL_REG_LEN_08BIT, 0x30},
+	{0x6155, CRL_REG_LEN_08BIT, 0xba},
+	{0x6156, CRL_REG_LEN_08BIT, 0x00},
+	{0x6157, CRL_REG_LEN_08BIT, 0x00},
+	{0x6158, CRL_REG_LEN_08BIT, 0x00},
+	{0x6159, CRL_REG_LEN_08BIT, 0x00},
+	{0x615a, CRL_REG_LEN_08BIT, 0xd3},
+	{0x615b, CRL_REG_LEN_08BIT, 0x10},
+	{0x615c, CRL_REG_LEN_08BIT, 0x70},
+	{0x615d, CRL_REG_LEN_08BIT, 0x00},
+	{0x615e, CRL_REG_LEN_08BIT, 0x00},
+	{0x615f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6160, CRL_REG_LEN_08BIT, 0x00},
+	{0x6161, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6162, CRL_REG_LEN_08BIT, 0xba},
+	{0x6163, CRL_REG_LEN_08BIT, 0xb0},
+	{0x6164, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6165, CRL_REG_LEN_08BIT, 0x00},
+	{0x6166, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6167, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6168, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6169, CRL_REG_LEN_08BIT, 0x9d},
+	{0x616a, CRL_REG_LEN_08BIT, 0x9d},
+	{0x616b, CRL_REG_LEN_08BIT, 0xd3},
+	{0x616c, CRL_REG_LEN_08BIT, 0x10},
+	{0x616d, CRL_REG_LEN_08BIT, 0x9c},
+	{0x616e, CRL_REG_LEN_08BIT, 0x94},
+	{0x616f, CRL_REG_LEN_08BIT, 0x90},
+	{0x6170, CRL_REG_LEN_08BIT, 0xc8},
+	{0x6171, CRL_REG_LEN_08BIT, 0xba},
+	{0x6172, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6173, CRL_REG_LEN_08BIT, 0x60},
+	{0x6174, CRL_REG_LEN_08BIT, 0x2c},
+	{0x6175, CRL_REG_LEN_08BIT, 0x50},
+	{0x6176, CRL_REG_LEN_08BIT, 0x11},
+	{0x6177, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6178, CRL_REG_LEN_08BIT, 0x00},
+	{0x6179, CRL_REG_LEN_08BIT, 0x30},
+	{0x617a, CRL_REG_LEN_08BIT, 0xd5},
+	{0x617b, CRL_REG_LEN_08BIT, 0x00},
+	{0x617c, CRL_REG_LEN_08BIT, 0xba},
+	{0x617d, CRL_REG_LEN_08BIT, 0xb0},
+	{0x617e, CRL_REG_LEN_08BIT, 0xb7},
+	{0x617f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6180, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6181, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6182, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6183, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6184, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6185, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6186, CRL_REG_LEN_08BIT, 0x10},
+	{0x6187, CRL_REG_LEN_08BIT, 0x9c},
+	{0x6188, CRL_REG_LEN_08BIT, 0x94},
+	{0x6189, CRL_REG_LEN_08BIT, 0x90},
+	{0x618a, CRL_REG_LEN_08BIT, 0xc8},
+	{0x618b, CRL_REG_LEN_08BIT, 0xba},
+	{0x618c, CRL_REG_LEN_08BIT, 0xd5},
+	{0x618d, CRL_REG_LEN_08BIT, 0x00},
+	{0x618e, CRL_REG_LEN_08BIT, 0x01},
+	{0x618f, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6190, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6191, CRL_REG_LEN_08BIT, 0x12},
+	{0x6192, CRL_REG_LEN_08BIT, 0x12},
+	{0x6193, CRL_REG_LEN_08BIT, 0x00},
+	{0x6194, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6195, CRL_REG_LEN_08BIT, 0x9c},
+	{0x6196, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6197, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6198, CRL_REG_LEN_08BIT, 0x60},
+	{0x6199, CRL_REG_LEN_08BIT, 0xd2},
+	{0x619a, CRL_REG_LEN_08BIT, 0x04},
+	{0x619b, CRL_REG_LEN_08BIT, 0xd5},
+	{0x619c, CRL_REG_LEN_08BIT, 0x1a},
+	{0x619d, CRL_REG_LEN_08BIT, 0xcc},
+	{0x619e, CRL_REG_LEN_08BIT, 0x12},
+	{0x619f, CRL_REG_LEN_08BIT, 0x00},
+	{0x61a0, CRL_REG_LEN_08BIT, 0x12},
+	{0x61a1, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61a2, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61a3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61a4, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61a5, CRL_REG_LEN_08BIT, 0x60},
+	{0x61a6, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61a7, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61a8, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61a9, CRL_REG_LEN_08BIT, 0x12},
+	{0x61aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x61ab, CRL_REG_LEN_08BIT, 0x12},
+	{0x61ac, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61ad, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61ae, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61af, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61b0, CRL_REG_LEN_08BIT, 0x60},
+	{0x61b1, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61b2, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61b3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61b4, CRL_REG_LEN_08BIT, 0x12},
+	{0x61b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x61b6, CRL_REG_LEN_08BIT, 0x12},
+	{0x61b7, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61b9, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61ba, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61bb, CRL_REG_LEN_08BIT, 0x60},
+	{0x61bc, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61bd, CRL_REG_LEN_08BIT, 0xd5},
+	{0x61be, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61bf, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61c0, CRL_REG_LEN_08BIT, 0x12},
+	{0x61c1, CRL_REG_LEN_08BIT, 0x12},
+	{0x61c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x61c3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61c4, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61c5, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61c6, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61c7, CRL_REG_LEN_08BIT, 0x74},
+	{0x61c8, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61c9, CRL_REG_LEN_08BIT, 0xd5},
+	{0x61ca, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61cb, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61cc, CRL_REG_LEN_08BIT, 0x12},
+	{0x61cd, CRL_REG_LEN_08BIT, 0x00},
+	{0x61ce, CRL_REG_LEN_08BIT, 0x12},
+	{0x61cf, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61d0, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61d1, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61d2, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61d3, CRL_REG_LEN_08BIT, 0x74},
+	{0x61d4, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61d5, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61d6, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61d7, CRL_REG_LEN_08BIT, 0x12},
+	{0x61d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x61d9, CRL_REG_LEN_08BIT, 0x12},
+	{0x61da, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61db, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61dc, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61dd, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61de, CRL_REG_LEN_08BIT, 0x74},
+	{0x61df, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61e0, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61e1, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61e2, CRL_REG_LEN_08BIT, 0x12},
+	{0x61e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x61e4, CRL_REG_LEN_08BIT, 0x12},
+	{0x61e5, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61e6, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61e7, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61e8, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61e9, CRL_REG_LEN_08BIT, 0x74},
+	{0x61ea, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61eb, CRL_REG_LEN_08BIT, 0xd5},
+	{0x61ec, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61ed, CRL_REG_LEN_08BIT, 0x12},
+	{0x61ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x61ef, CRL_REG_LEN_08BIT, 0x12},
+	{0x61f0, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61f1, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61f2, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6400, CRL_REG_LEN_08BIT, 0x04},
+	{0x6401, CRL_REG_LEN_08BIT, 0x04},
+	{0x6402, CRL_REG_LEN_08BIT, 0x00},
+	{0x6403, CRL_REG_LEN_08BIT, 0xff},
+	{0x6404, CRL_REG_LEN_08BIT, 0x00},
+	{0x6405, CRL_REG_LEN_08BIT, 0x08},
+	{0x6406, CRL_REG_LEN_08BIT, 0x00},
+	{0x6407, CRL_REG_LEN_08BIT, 0xff},
+	{0x6408, CRL_REG_LEN_08BIT, 0x04},
+	{0x6409, CRL_REG_LEN_08BIT, 0x70},
+	{0x640a, CRL_REG_LEN_08BIT, 0x00},
+	{0x640b, CRL_REG_LEN_08BIT, 0xff},
+	{0x640c, CRL_REG_LEN_08BIT, 0x05},
+	{0x640d, CRL_REG_LEN_08BIT, 0x14},
+	{0x640e, CRL_REG_LEN_08BIT, 0x04},
+	{0x640f, CRL_REG_LEN_08BIT, 0x71},
+	{0x6410, CRL_REG_LEN_08BIT, 0x05},
+	{0x6411, CRL_REG_LEN_08BIT, 0x74},
+	{0x6412, CRL_REG_LEN_08BIT, 0x00},
+	{0x6413, CRL_REG_LEN_08BIT, 0xff},
+	{0x6414, CRL_REG_LEN_08BIT, 0x05},
+	{0x6415, CRL_REG_LEN_08BIT, 0x54},
+	{0x6416, CRL_REG_LEN_08BIT, 0x05},
+	{0x6417, CRL_REG_LEN_08BIT, 0x44},
+	{0x6418, CRL_REG_LEN_08BIT, 0x04},
+	{0x6419, CRL_REG_LEN_08BIT, 0x30},
+	{0x641a, CRL_REG_LEN_08BIT, 0x05},
+	{0x641b, CRL_REG_LEN_08BIT, 0x46},
+	{0x641c, CRL_REG_LEN_08BIT, 0x00},
+	{0x641d, CRL_REG_LEN_08BIT, 0xff},
+	{0x641e, CRL_REG_LEN_08BIT, 0x04},
+	{0x641f, CRL_REG_LEN_08BIT, 0x31},
+	{0x6420, CRL_REG_LEN_08BIT, 0x04},
+	{0x6421, CRL_REG_LEN_08BIT, 0x30},
+	{0x6422, CRL_REG_LEN_08BIT, 0x00},
+	{0x6423, CRL_REG_LEN_08BIT, 0xff},
+	{0x6424, CRL_REG_LEN_08BIT, 0x04},
+	{0x6425, CRL_REG_LEN_08BIT, 0x20},
+	{0x6426, CRL_REG_LEN_08BIT, 0x05},
+	{0x6427, CRL_REG_LEN_08BIT, 0x06},
+	{0x6428, CRL_REG_LEN_08BIT, 0x00},
+	{0x6429, CRL_REG_LEN_08BIT, 0xff},
+	{0x642a, CRL_REG_LEN_08BIT, 0x08},
+	{0x642b, CRL_REG_LEN_08BIT, 0x2a},
+	{0x642c, CRL_REG_LEN_08BIT, 0x08},
+	{0x642d, CRL_REG_LEN_08BIT, 0x31},
+	{0x642e, CRL_REG_LEN_08BIT, 0x00},
+	{0x642f, CRL_REG_LEN_08BIT, 0xff},
+	{0x6430, CRL_REG_LEN_08BIT, 0x08},
+	{0x6431, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6432, CRL_REG_LEN_08BIT, 0x08},
+	{0x6433, CRL_REG_LEN_08BIT, 0x31},
+	{0x6434, CRL_REG_LEN_08BIT, 0x06},
+	{0x6435, CRL_REG_LEN_08BIT, 0x20},
+	{0x6436, CRL_REG_LEN_08BIT, 0x07},
+	{0x6437, CRL_REG_LEN_08BIT, 0x00},
+	{0x6438, CRL_REG_LEN_08BIT, 0x08},
+	{0x6439, CRL_REG_LEN_08BIT, 0x40},
+	{0x643a, CRL_REG_LEN_08BIT, 0x00},
+	{0x643b, CRL_REG_LEN_08BIT, 0xff},
+	{0x643c, CRL_REG_LEN_08BIT, 0x08},
+	{0x643d, CRL_REG_LEN_08BIT, 0x2a},
+	{0x643e, CRL_REG_LEN_08BIT, 0x08},
+	{0x643f, CRL_REG_LEN_08BIT, 0x36},
+	{0x6440, CRL_REG_LEN_08BIT, 0x06},
+	{0x6441, CRL_REG_LEN_08BIT, 0x10},
+	{0x6442, CRL_REG_LEN_08BIT, 0x07},
+	{0x6443, CRL_REG_LEN_08BIT, 0x00},
+	{0x6444, CRL_REG_LEN_08BIT, 0x08},
+	{0x6445, CRL_REG_LEN_08BIT, 0x40},
+	{0x6446, CRL_REG_LEN_08BIT, 0x00},
+	{0x6447, CRL_REG_LEN_08BIT, 0xff},
+	{0x6448, CRL_REG_LEN_08BIT, 0x08},
+	{0x6449, CRL_REG_LEN_08BIT, 0x2a},
+	{0x644a, CRL_REG_LEN_08BIT, 0x08},
+	{0x644b, CRL_REG_LEN_08BIT, 0x3b},
+	{0x644c, CRL_REG_LEN_08BIT, 0x06},
+	{0x644d, CRL_REG_LEN_08BIT, 0x00},
+	{0x644e, CRL_REG_LEN_08BIT, 0x07},
+	{0x644f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6450, CRL_REG_LEN_08BIT, 0x08},
+	{0x6451, CRL_REG_LEN_08BIT, 0x40},
+	{0x6452, CRL_REG_LEN_08BIT, 0x00},
+	{0x6453, CRL_REG_LEN_08BIT, 0xff},
+	{0x6454, CRL_REG_LEN_08BIT, 0x06},
+	{0x6455, CRL_REG_LEN_08BIT, 0x00},
+	{0x6456, CRL_REG_LEN_08BIT, 0x07},
+	{0x6457, CRL_REG_LEN_08BIT, 0x05},
+	{0x6458, CRL_REG_LEN_08BIT, 0x01},
+	{0x6459, CRL_REG_LEN_08BIT, 0xaf},
+	{0x645a, CRL_REG_LEN_08BIT, 0x01},
+	{0x645b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x645c, CRL_REG_LEN_08BIT, 0x01},
+	{0x645d, CRL_REG_LEN_08BIT, 0x90},
+	{0x645e, CRL_REG_LEN_08BIT, 0x01},
+	{0x645f, CRL_REG_LEN_08BIT, 0xc8},
+	{0x6460, CRL_REG_LEN_08BIT, 0x00},
+	{0x6461, CRL_REG_LEN_08BIT, 0xff},
+	{0x6462, CRL_REG_LEN_08BIT, 0x01},
+	{0x6463, CRL_REG_LEN_08BIT, 0xac},
+	{0x6464, CRL_REG_LEN_08BIT, 0x01},
+	{0x6465, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6466, CRL_REG_LEN_08BIT, 0x01},
+	{0x6467, CRL_REG_LEN_08BIT, 0x90},
+	{0x6468, CRL_REG_LEN_08BIT, 0x01},
+	{0x6469, CRL_REG_LEN_08BIT, 0xe8},
+	{0x646a, CRL_REG_LEN_08BIT, 0x00},
+	{0x646b, CRL_REG_LEN_08BIT, 0xff},
+	{0x646c, CRL_REG_LEN_08BIT, 0x01},
+	{0x646d, CRL_REG_LEN_08BIT, 0xad},
+	{0x646e, CRL_REG_LEN_08BIT, 0x01},
+	{0x646f, CRL_REG_LEN_08BIT, 0x0d},
+	{0x6470, CRL_REG_LEN_08BIT, 0x01},
+	{0x6471, CRL_REG_LEN_08BIT, 0x90},
+	{0x6472, CRL_REG_LEN_08BIT, 0x01},
+	{0x6473, CRL_REG_LEN_08BIT, 0xe8},
+	{0x6474, CRL_REG_LEN_08BIT, 0x00},
+	{0x6475, CRL_REG_LEN_08BIT, 0xff},
+	{0x6476, CRL_REG_LEN_08BIT, 0x01},
+	{0x6477, CRL_REG_LEN_08BIT, 0xae},
+	{0x6478, CRL_REG_LEN_08BIT, 0x01},
+	{0x6479, CRL_REG_LEN_08BIT, 0x0e},
+	{0x647a, CRL_REG_LEN_08BIT, 0x01},
+	{0x647b, CRL_REG_LEN_08BIT, 0x90},
+	{0x647c, CRL_REG_LEN_08BIT, 0x01},
+	{0x647d, CRL_REG_LEN_08BIT, 0xe8},
+	{0x647e, CRL_REG_LEN_08BIT, 0x00},
+	{0x647f, CRL_REG_LEN_08BIT, 0xff},
+	{0x6480, CRL_REG_LEN_08BIT, 0x01},
+	{0x6481, CRL_REG_LEN_08BIT, 0xb0},
+	{0x6482, CRL_REG_LEN_08BIT, 0x01},
+	{0x6483, CRL_REG_LEN_08BIT, 0xb1},
+	{0x6484, CRL_REG_LEN_08BIT, 0x01},
+	{0x6485, CRL_REG_LEN_08BIT, 0xb2},
+	{0x6486, CRL_REG_LEN_08BIT, 0x01},
+	{0x6487, CRL_REG_LEN_08BIT, 0xb3},
+	{0x6488, CRL_REG_LEN_08BIT, 0x01},
+	{0x6489, CRL_REG_LEN_08BIT, 0xb4},
+	{0x648a, CRL_REG_LEN_08BIT, 0x01},
+	{0x648b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x648c, CRL_REG_LEN_08BIT, 0x01},
+	{0x648d, CRL_REG_LEN_08BIT, 0xb6},
+	{0x648e, CRL_REG_LEN_08BIT, 0x01},
+	{0x648f, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6490, CRL_REG_LEN_08BIT, 0x01},
+	{0x6491, CRL_REG_LEN_08BIT, 0xb8},
+	{0x6492, CRL_REG_LEN_08BIT, 0x01},
+	{0x6493, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6494, CRL_REG_LEN_08BIT, 0x01},
+	{0x6495, CRL_REG_LEN_08BIT, 0xba},
+	{0x6496, CRL_REG_LEN_08BIT, 0x01},
+	{0x6497, CRL_REG_LEN_08BIT, 0xbb},
+	{0x6498, CRL_REG_LEN_08BIT, 0x01},
+	{0x6499, CRL_REG_LEN_08BIT, 0xbc},
+	{0x649a, CRL_REG_LEN_08BIT, 0x01},
+	{0x649b, CRL_REG_LEN_08BIT, 0xbd},
+	{0x649c, CRL_REG_LEN_08BIT, 0x01},
+	{0x649d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x649e, CRL_REG_LEN_08BIT, 0x01},
+	{0x649f, CRL_REG_LEN_08BIT, 0xbf},
+	{0x64a0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0x64a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x64a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x64a4, CRL_REG_LEN_08BIT, 0x06},
+	{0x64a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x64a6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64a7, CRL_REG_LEN_08BIT, 0xf6},
+	{0x64a8, CRL_REG_LEN_08BIT, 0x04},
+	{0x64a9, CRL_REG_LEN_08BIT, 0x30},
+	{0x64aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x64ab, CRL_REG_LEN_08BIT, 0xff},
+	{0x64ac, CRL_REG_LEN_08BIT, 0x06},
+	{0x64ad, CRL_REG_LEN_08BIT, 0x10},
+	{0x64ae, CRL_REG_LEN_08BIT, 0x01},
+	{0x64af, CRL_REG_LEN_08BIT, 0xf6},
+	{0x64b0, CRL_REG_LEN_08BIT, 0x04},
+	{0x64b1, CRL_REG_LEN_08BIT, 0x30},
+	{0x64b2, CRL_REG_LEN_08BIT, 0x06},
+	{0x64b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x64b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x64b5, CRL_REG_LEN_08BIT, 0xff},
+	{0x64b6, CRL_REG_LEN_08BIT, 0x06},
+	{0x64b7, CRL_REG_LEN_08BIT, 0x20},
+	{0x64b8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64b9, CRL_REG_LEN_08BIT, 0xf6},
+	{0x64ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x64bb, CRL_REG_LEN_08BIT, 0x30},
+	{0x64bc, CRL_REG_LEN_08BIT, 0x06},
+	{0x64bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x64be, CRL_REG_LEN_08BIT, 0x00},
+	{0x64bf, CRL_REG_LEN_08BIT, 0xff},
+	{0x64c0, CRL_REG_LEN_08BIT, 0x04},
+	{0x64c1, CRL_REG_LEN_08BIT, 0x31},
+	{0x64c2, CRL_REG_LEN_08BIT, 0x04},
+	{0x64c3, CRL_REG_LEN_08BIT, 0x30},
+	{0x64c4, CRL_REG_LEN_08BIT, 0x01},
+	{0x64c5, CRL_REG_LEN_08BIT, 0x20},
+	{0x64c6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64c7, CRL_REG_LEN_08BIT, 0x31},
+	{0x64c8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x64ca, CRL_REG_LEN_08BIT, 0x01},
+	{0x64cb, CRL_REG_LEN_08BIT, 0x33},
+	{0x64cc, CRL_REG_LEN_08BIT, 0x01},
+	{0x64cd, CRL_REG_LEN_08BIT, 0x34},
+	{0x64ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x64cf, CRL_REG_LEN_08BIT, 0x35},
+	{0x64d0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d1, CRL_REG_LEN_08BIT, 0x36},
+	{0x64d2, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d3, CRL_REG_LEN_08BIT, 0x37},
+	{0x64d4, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d5, CRL_REG_LEN_08BIT, 0x38},
+	{0x64d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d7, CRL_REG_LEN_08BIT, 0x39},
+	{0x64d8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d9, CRL_REG_LEN_08BIT, 0x3a},
+	{0x64da, CRL_REG_LEN_08BIT, 0x01},
+	{0x64db, CRL_REG_LEN_08BIT, 0x3b},
+	{0x64dc, CRL_REG_LEN_08BIT, 0x01},
+	{0x64dd, CRL_REG_LEN_08BIT, 0x3c},
+	{0x64de, CRL_REG_LEN_08BIT, 0x01},
+	{0x64df, CRL_REG_LEN_08BIT, 0x3d},
+	{0x64e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64e1, CRL_REG_LEN_08BIT, 0x3e},
+	{0x64e2, CRL_REG_LEN_08BIT, 0x01},
+	{0x64e3, CRL_REG_LEN_08BIT, 0x3f},
+	{0x64e4, CRL_REG_LEN_08BIT, 0x02},
+	{0x64e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0x64e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x64e7, CRL_REG_LEN_08BIT, 0xff},
+	{0x64e8, CRL_REG_LEN_08BIT, 0x04},
+	{0x64e9, CRL_REG_LEN_08BIT, 0x31},
+	{0x64ea, CRL_REG_LEN_08BIT, 0x04},
+	{0x64eb, CRL_REG_LEN_08BIT, 0x30},
+	{0x64ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x64ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x64ee, CRL_REG_LEN_08BIT, 0x01},
+	{0x64ef, CRL_REG_LEN_08BIT, 0x11},
+	{0x64f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f1, CRL_REG_LEN_08BIT, 0x12},
+	{0x64f2, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f3, CRL_REG_LEN_08BIT, 0x13},
+	{0x64f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x64f6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f7, CRL_REG_LEN_08BIT, 0x15},
+	{0x64f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f9, CRL_REG_LEN_08BIT, 0x16},
+	{0x64fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x64fb, CRL_REG_LEN_08BIT, 0x17},
+	{0x64fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x64fd, CRL_REG_LEN_08BIT, 0x18},
+	{0x64fe, CRL_REG_LEN_08BIT, 0x01},
+	{0x64ff, CRL_REG_LEN_08BIT, 0x19},
+	{0x6500, CRL_REG_LEN_08BIT, 0x01},
+	{0x6501, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6502, CRL_REG_LEN_08BIT, 0x01},
+	{0x6503, CRL_REG_LEN_08BIT, 0x1b},
+	{0x6504, CRL_REG_LEN_08BIT, 0x01},
+	{0x6505, CRL_REG_LEN_08BIT, 0x1c},
+	{0x6506, CRL_REG_LEN_08BIT, 0x01},
+	{0x6507, CRL_REG_LEN_08BIT, 0x1d},
+	{0x6508, CRL_REG_LEN_08BIT, 0x01},
+	{0x6509, CRL_REG_LEN_08BIT, 0x1e},
+	{0x650a, CRL_REG_LEN_08BIT, 0x01},
+	{0x650b, CRL_REG_LEN_08BIT, 0x1f},
+	{0x650c, CRL_REG_LEN_08BIT, 0x02},
+	{0x650d, CRL_REG_LEN_08BIT, 0xa0},
+	{0x650e, CRL_REG_LEN_08BIT, 0x00},
+	{0x650f, CRL_REG_LEN_08BIT, 0xff},
+	{0x6510, CRL_REG_LEN_08BIT, 0x04},
+	{0x6511, CRL_REG_LEN_08BIT, 0x20},
+	{0x6512, CRL_REG_LEN_08BIT, 0x05},
+	{0x6513, CRL_REG_LEN_08BIT, 0x86},
+	{0x6514, CRL_REG_LEN_08BIT, 0x03},
+	{0x6515, CRL_REG_LEN_08BIT, 0x0b},
+	{0x6516, CRL_REG_LEN_08BIT, 0x05},
+	{0x6517, CRL_REG_LEN_08BIT, 0x86},
+	{0x6518, CRL_REG_LEN_08BIT, 0x00},
+	{0x6519, CRL_REG_LEN_08BIT, 0x00},
+	{0x651a, CRL_REG_LEN_08BIT, 0x05},
+	{0x651b, CRL_REG_LEN_08BIT, 0x06},
+	{0x651c, CRL_REG_LEN_08BIT, 0x00},
+	{0x651d, CRL_REG_LEN_08BIT, 0x04},
+	{0x651e, CRL_REG_LEN_08BIT, 0x05},
+	{0x651f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6520, CRL_REG_LEN_08BIT, 0x00},
+	{0x6521, CRL_REG_LEN_08BIT, 0x04},
+	{0x6522, CRL_REG_LEN_08BIT, 0x05},
+	{0x6523, CRL_REG_LEN_08BIT, 0x00},
+	{0x6524, CRL_REG_LEN_08BIT, 0x05},
+	{0x6525, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6526, CRL_REG_LEN_08BIT, 0x03},
+	{0x6527, CRL_REG_LEN_08BIT, 0x9a},
+	{0x6528, CRL_REG_LEN_08BIT, 0x05},
+	{0x6529, CRL_REG_LEN_08BIT, 0x86},
+	{0x652a, CRL_REG_LEN_08BIT, 0x00},
+	{0x652b, CRL_REG_LEN_08BIT, 0x00},
+	{0x652c, CRL_REG_LEN_08BIT, 0x05},
+	{0x652d, CRL_REG_LEN_08BIT, 0x06},
+	{0x652e, CRL_REG_LEN_08BIT, 0x00},
+	{0x652f, CRL_REG_LEN_08BIT, 0x01},
+	{0x6530, CRL_REG_LEN_08BIT, 0x05},
+	{0x6531, CRL_REG_LEN_08BIT, 0x04},
+	{0x6532, CRL_REG_LEN_08BIT, 0x00},
+	{0x6533, CRL_REG_LEN_08BIT, 0x04},
+	{0x6534, CRL_REG_LEN_08BIT, 0x05},
+	{0x6535, CRL_REG_LEN_08BIT, 0x00},
+	{0x6536, CRL_REG_LEN_08BIT, 0x05},
+	{0x6537, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6538, CRL_REG_LEN_08BIT, 0x03},
+	{0x6539, CRL_REG_LEN_08BIT, 0x99},
+	{0x653a, CRL_REG_LEN_08BIT, 0x05},
+	{0x653b, CRL_REG_LEN_08BIT, 0x06},
+	{0x653c, CRL_REG_LEN_08BIT, 0x00},
+	{0x653d, CRL_REG_LEN_08BIT, 0x00},
+	{0x653e, CRL_REG_LEN_08BIT, 0x05},
+	{0x653f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6540, CRL_REG_LEN_08BIT, 0x00},
+	{0x6541, CRL_REG_LEN_08BIT, 0x04},
+	{0x6542, CRL_REG_LEN_08BIT, 0x05},
+	{0x6543, CRL_REG_LEN_08BIT, 0x00},
+	{0x6544, CRL_REG_LEN_08BIT, 0x05},
+	{0x6545, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6546, CRL_REG_LEN_08BIT, 0x03},
+	{0x6547, CRL_REG_LEN_08BIT, 0x98},
+	{0x6548, CRL_REG_LEN_08BIT, 0x05},
+	{0x6549, CRL_REG_LEN_08BIT, 0x06},
+	{0x654a, CRL_REG_LEN_08BIT, 0x00},
+	{0x654b, CRL_REG_LEN_08BIT, 0x00},
+	{0x654c, CRL_REG_LEN_08BIT, 0x05},
+	{0x654d, CRL_REG_LEN_08BIT, 0x04},
+	{0x654e, CRL_REG_LEN_08BIT, 0x00},
+	{0x654f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6550, CRL_REG_LEN_08BIT, 0x05},
+	{0x6551, CRL_REG_LEN_08BIT, 0x00},
+	{0x6552, CRL_REG_LEN_08BIT, 0x05},
+	{0x6553, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6554, CRL_REG_LEN_08BIT, 0x03},
+	{0x6555, CRL_REG_LEN_08BIT, 0x97},
+	{0x6556, CRL_REG_LEN_08BIT, 0x05},
+	{0x6557, CRL_REG_LEN_08BIT, 0x06},
+	{0x6558, CRL_REG_LEN_08BIT, 0x05},
+	{0x6559, CRL_REG_LEN_08BIT, 0x04},
+	{0x655a, CRL_REG_LEN_08BIT, 0x00},
+	{0x655b, CRL_REG_LEN_08BIT, 0x04},
+	{0x655c, CRL_REG_LEN_08BIT, 0x05},
+	{0x655d, CRL_REG_LEN_08BIT, 0x00},
+	{0x655e, CRL_REG_LEN_08BIT, 0x05},
+	{0x655f, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6560, CRL_REG_LEN_08BIT, 0x03},
+	{0x6561, CRL_REG_LEN_08BIT, 0x96},
+	{0x6562, CRL_REG_LEN_08BIT, 0x05},
+	{0x6563, CRL_REG_LEN_08BIT, 0x06},
+	{0x6564, CRL_REG_LEN_08BIT, 0x05},
+	{0x6565, CRL_REG_LEN_08BIT, 0x04},
+	{0x6566, CRL_REG_LEN_08BIT, 0x00},
+	{0x6567, CRL_REG_LEN_08BIT, 0x04},
+	{0x6568, CRL_REG_LEN_08BIT, 0x05},
+	{0x6569, CRL_REG_LEN_08BIT, 0x00},
+	{0x656a, CRL_REG_LEN_08BIT, 0x05},
+	{0x656b, CRL_REG_LEN_08BIT, 0x0a},
+	{0x656c, CRL_REG_LEN_08BIT, 0x03},
+	{0x656d, CRL_REG_LEN_08BIT, 0x95},
+	{0x656e, CRL_REG_LEN_08BIT, 0x05},
+	{0x656f, CRL_REG_LEN_08BIT, 0x06},
+	{0x6570, CRL_REG_LEN_08BIT, 0x05},
+	{0x6571, CRL_REG_LEN_08BIT, 0x04},
+	{0x6572, CRL_REG_LEN_08BIT, 0x00},
+	{0x6573, CRL_REG_LEN_08BIT, 0x04},
+	{0x6574, CRL_REG_LEN_08BIT, 0x05},
+	{0x6575, CRL_REG_LEN_08BIT, 0x00},
+	{0x6576, CRL_REG_LEN_08BIT, 0x05},
+	{0x6577, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6578, CRL_REG_LEN_08BIT, 0x03},
+	{0x6579, CRL_REG_LEN_08BIT, 0x94},
+	{0x657a, CRL_REG_LEN_08BIT, 0x05},
+	{0x657b, CRL_REG_LEN_08BIT, 0x06},
+	{0x657c, CRL_REG_LEN_08BIT, 0x00},
+	{0x657d, CRL_REG_LEN_08BIT, 0x00},
+	{0x657e, CRL_REG_LEN_08BIT, 0x05},
+	{0x657f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6580, CRL_REG_LEN_08BIT, 0x00},
+	{0x6581, CRL_REG_LEN_08BIT, 0x04},
+	{0x6582, CRL_REG_LEN_08BIT, 0x05},
+	{0x6583, CRL_REG_LEN_08BIT, 0x00},
+	{0x6584, CRL_REG_LEN_08BIT, 0x05},
+	{0x6585, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6586, CRL_REG_LEN_08BIT, 0x03},
+	{0x6587, CRL_REG_LEN_08BIT, 0x93},
+	{0x6588, CRL_REG_LEN_08BIT, 0x05},
+	{0x6589, CRL_REG_LEN_08BIT, 0x06},
+	{0x658a, CRL_REG_LEN_08BIT, 0x00},
+	{0x658b, CRL_REG_LEN_08BIT, 0x00},
+	{0x658c, CRL_REG_LEN_08BIT, 0x05},
+	{0x658d, CRL_REG_LEN_08BIT, 0x04},
+	{0x658e, CRL_REG_LEN_08BIT, 0x00},
+	{0x658f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6590, CRL_REG_LEN_08BIT, 0x05},
+	{0x6591, CRL_REG_LEN_08BIT, 0x00},
+	{0x6592, CRL_REG_LEN_08BIT, 0x05},
+	{0x6593, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6594, CRL_REG_LEN_08BIT, 0x03},
+	{0x6595, CRL_REG_LEN_08BIT, 0x92},
+	{0x6596, CRL_REG_LEN_08BIT, 0x05},
+	{0x6597, CRL_REG_LEN_08BIT, 0x06},
+	{0x6598, CRL_REG_LEN_08BIT, 0x05},
+	{0x6599, CRL_REG_LEN_08BIT, 0x04},
+	{0x659a, CRL_REG_LEN_08BIT, 0x00},
+	{0x659b, CRL_REG_LEN_08BIT, 0x04},
+	{0x659c, CRL_REG_LEN_08BIT, 0x05},
+	{0x659d, CRL_REG_LEN_08BIT, 0x00},
+	{0x659e, CRL_REG_LEN_08BIT, 0x05},
+	{0x659f, CRL_REG_LEN_08BIT, 0x0a},
+	{0x65a0, CRL_REG_LEN_08BIT, 0x03},
+	{0x65a1, CRL_REG_LEN_08BIT, 0x91},
+	{0x65a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x65a3, CRL_REG_LEN_08BIT, 0x06},
+	{0x65a4, CRL_REG_LEN_08BIT, 0x05},
+	{0x65a5, CRL_REG_LEN_08BIT, 0x04},
+	{0x65a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x65a7, CRL_REG_LEN_08BIT, 0x04},
+	{0x65a8, CRL_REG_LEN_08BIT, 0x05},
+	{0x65a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x65aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x65ab, CRL_REG_LEN_08BIT, 0x0a},
+	{0x65ac, CRL_REG_LEN_08BIT, 0x03},
+	{0x65ad, CRL_REG_LEN_08BIT, 0x90},
+	{0x65ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x65af, CRL_REG_LEN_08BIT, 0x06},
+	{0x65b0, CRL_REG_LEN_08BIT, 0x05},
+	{0x65b1, CRL_REG_LEN_08BIT, 0x04},
+	{0x65b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x65b3, CRL_REG_LEN_08BIT, 0x04},
+	{0x65b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x65b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x65b6, CRL_REG_LEN_08BIT, 0x05},
+	{0x65b7, CRL_REG_LEN_08BIT, 0x0a},
+	{0x65b8, CRL_REG_LEN_08BIT, 0x02},
+	{0x65b9, CRL_REG_LEN_08BIT, 0x90},
+	{0x65ba, CRL_REG_LEN_08BIT, 0x05},
+	{0x65bb, CRL_REG_LEN_08BIT, 0x06},
+	{0x65bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x65bd, CRL_REG_LEN_08BIT, 0xff},
+	{0x65be, CRL_REG_LEN_08BIT, 0x04},
+	{0x65bf, CRL_REG_LEN_08BIT, 0x70},
+	{0x65c0, CRL_REG_LEN_08BIT, 0x08},
+	{0x65c1, CRL_REG_LEN_08BIT, 0x76},
+	{0x65c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x65c3, CRL_REG_LEN_08BIT, 0xff},
+	{0x65c4, CRL_REG_LEN_08BIT, 0x08},
+	{0x65c5, CRL_REG_LEN_08BIT, 0x76},
+	{0x65c6, CRL_REG_LEN_08BIT, 0x04},
+	{0x65c7, CRL_REG_LEN_08BIT, 0x0c},
+	{0x65c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x65c9, CRL_REG_LEN_08BIT, 0x07},
+	{0x65ca, CRL_REG_LEN_08BIT, 0x04},
+	{0x65cb, CRL_REG_LEN_08BIT, 0x04},
+	{0x65cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x65cd, CRL_REG_LEN_08BIT, 0xff},
+	{0x65ce, CRL_REG_LEN_08BIT, 0x00},
+	{0x65cf, CRL_REG_LEN_08BIT, 0xff},
+	{0x65d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x65d1, CRL_REG_LEN_08BIT, 0xff},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x7f},
+	{0x303c, CRL_REG_LEN_08BIT, 0xfe},
+	{0x303d, CRL_REG_LEN_08BIT, 0x19},
+	{0x303e, CRL_REG_LEN_08BIT, 0xd7},
+	{0x303f, CRL_REG_LEN_08BIT, 0x09},
+	{0x3040, CRL_REG_LEN_08BIT, 0x78},
+	{0x3042, CRL_REG_LEN_08BIT, 0x05},
+	{0x328a, CRL_REG_LEN_08BIT, 0x10},
+};
+
+static struct crl_register_write_rep ov10640_1280_1088_LONG_RAW[] = {
+	{0x328a, CRL_REG_LEN_08BIT, 0x11},
+	{0x313f, CRL_REG_LEN_08BIT, 0x80},
+	{0x3132, CRL_REG_LEN_08BIT, 0x24},
+	{0x3014, CRL_REG_LEN_08BIT, 0x03},
+	{0x3023, CRL_REG_LEN_08BIT, 0x05},
+	{0x3032, CRL_REG_LEN_08BIT, 0x35},
+	{0x3033, CRL_REG_LEN_08BIT, 0x04},
+	{0x3054, CRL_REG_LEN_08BIT, 0x00},
+	{0x3055, CRL_REG_LEN_08BIT, 0x08},
+	{0x3056, CRL_REG_LEN_08BIT, 0x01},
+	{0x3057, CRL_REG_LEN_08BIT, 0xff},
+	{0x3058, CRL_REG_LEN_08BIT, 0xaf},
+	{0x3059, CRL_REG_LEN_08BIT, 0x44},
+	{0x305a, CRL_REG_LEN_08BIT, 0x02},
+	{0x305b, CRL_REG_LEN_08BIT, 0x00},
+	{0x305c, CRL_REG_LEN_08BIT, 0x30},
+	{0x305d, CRL_REG_LEN_08BIT, 0x9e},
+	{0x305e, CRL_REG_LEN_08BIT, 0x19},
+	{0x305f, CRL_REG_LEN_08BIT, 0x18},
+	{0x3060, CRL_REG_LEN_08BIT, 0xf9},
+	{0x3061, CRL_REG_LEN_08BIT, 0xf0},
+	{0x308c, CRL_REG_LEN_08BIT, 0xB3},
+	{0x308f, CRL_REG_LEN_08BIT, 0x10},
+	{0x3091, CRL_REG_LEN_08BIT, 0x00},
+	{0x3093, CRL_REG_LEN_08BIT, 0x01},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x80},
+	{0x30af, CRL_REG_LEN_08BIT, 0x80},
+	{0x30b0, CRL_REG_LEN_08BIT, 0xff},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x3f},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x22},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x22},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30be, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x80},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c6, CRL_REG_LEN_08BIT, 0x80},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x80},
+	{0x3119, CRL_REG_LEN_08BIT, 0x45},
+	{0x311a, CRL_REG_LEN_08BIT, 0x01},
+	{0x311b, CRL_REG_LEN_08BIT, 0x4a},
+	{0x3074, CRL_REG_LEN_08BIT, 0x00},
+	{0x3075, CRL_REG_LEN_08BIT, 0x00},
+	{0x3076, CRL_REG_LEN_08BIT, 0x00},
+	{0x3077, CRL_REG_LEN_08BIT, 0x02},
+	{0x3078, CRL_REG_LEN_08BIT, 0x05},
+	{0x3079, CRL_REG_LEN_08BIT, 0x07},
+	{0x307a, CRL_REG_LEN_08BIT, 0x04},
+	{0x307b, CRL_REG_LEN_08BIT, 0x45},
+	{0x307c, CRL_REG_LEN_08BIT, 0x05},
+	{0x307d, CRL_REG_LEN_08BIT, 0x00},
+	{0x307e, CRL_REG_LEN_08BIT, 0x04},
+	{0x307f, CRL_REG_LEN_08BIT, 0x40},
+	{0x3084, CRL_REG_LEN_08BIT, 0x00},
+	{0x3085, CRL_REG_LEN_08BIT, 0x04},
+	{0x3086, CRL_REG_LEN_08BIT, 0x00},
+	{0x3087, CRL_REG_LEN_08BIT, 0x04},
+	{0x3088, CRL_REG_LEN_08BIT, 0x00},
+	{0x3089, CRL_REG_LEN_08BIT, 0x40},
+	{0x308d, CRL_REG_LEN_08BIT, 0x92},
+	{0x3094, CRL_REG_LEN_08BIT, 0xa5},
+	{0x30fa, CRL_REG_LEN_08BIT, 0x06},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x01},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3127, CRL_REG_LEN_08BIT, 0x63},
+	{0x3128, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3129, CRL_REG_LEN_08BIT, 0x00},
+	{0x31be, CRL_REG_LEN_08BIT, 0x01},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x78},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x40},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x78},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x80},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x78},
+	{0x30aa, CRL_REG_LEN_08BIT, 0xe0},
+	{0x30ab, CRL_REG_LEN_08BIT, 0xf9},
+	{0x30ac, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3440, CRL_REG_LEN_08BIT, 0x04},
+	{0x3444, CRL_REG_LEN_08BIT, 0x28},
+	{0x344e, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3457, CRL_REG_LEN_08BIT, 0x33},
+	{0x345e, CRL_REG_LEN_08BIT, 0x38},
+	{0x3461, CRL_REG_LEN_08BIT, 0xa8},
+	{0x7002, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7001, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7048, CRL_REG_LEN_08BIT, 0x00},
+	{0x7049, CRL_REG_LEN_08BIT, 0x02},
+	{0x704a, CRL_REG_LEN_08BIT, 0x02},
+	{0x704b, CRL_REG_LEN_08BIT, 0x00},
+	{0x704c, CRL_REG_LEN_08BIT, 0x01},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x7043, CRL_REG_LEN_08BIT, 0x04},
+	{0x7040, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7047, CRL_REG_LEN_08BIT, 0x00},
+	{0x7044, CRL_REG_LEN_08BIT, 0x01},
+	{0x7000, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7084, CRL_REG_LEN_08BIT, 0x01},
+	{0x7085, CRL_REG_LEN_08BIT, 0x03},
+	{0x7086, CRL_REG_LEN_08BIT, 0x02},
+	{0x7087, CRL_REG_LEN_08BIT, 0x40},
+	{0x7088, CRL_REG_LEN_08BIT, 0x01},
+	{0x7089, CRL_REG_LEN_08BIT, 0x20},
+	{0x707f, CRL_REG_LEN_08BIT, 0x04},
+	{0x707c, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0x01},
+	{0x7003, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x02},
+	{0x70c2, CRL_REG_LEN_08BIT, 0x02},
+	{0x70c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0x03},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x98},
+	{0x70bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x70bd, CRL_REG_LEN_08BIT, 0x80},
+	{0x7004, CRL_REG_LEN_08BIT, 0x02},
+	{0x7005, CRL_REG_LEN_08BIT, 0x00},
+	{0x7006, CRL_REG_LEN_08BIT, 0x01},
+	{0x7007, CRL_REG_LEN_08BIT, 0x80},
+	{0x7008, CRL_REG_LEN_08BIT, 0x02},
+	{0x7009, CRL_REG_LEN_08BIT, 0x00},
+	{0x700a, CRL_REG_LEN_08BIT, 0x04},
+	{0x700b, CRL_REG_LEN_08BIT, 0x00},
+	{0x700e, CRL_REG_LEN_08BIT, 0x00},
+	{0x700f, CRL_REG_LEN_08BIT, 0x60},
+	{0x701a, CRL_REG_LEN_08BIT, 0x02},
+	{0x701b, CRL_REG_LEN_08BIT, 0x00},
+	{0x701c, CRL_REG_LEN_08BIT, 0x01},
+	{0x701d, CRL_REG_LEN_08BIT, 0x80},
+	{0x701e, CRL_REG_LEN_08BIT, 0x02},
+	{0x701f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7020, CRL_REG_LEN_08BIT, 0x04},
+	{0x7021, CRL_REG_LEN_08BIT, 0x00},
+	{0x7024, CRL_REG_LEN_08BIT, 0x00},
+	{0x7025, CRL_REG_LEN_08BIT, 0x60},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e4, CRL_REG_LEN_08BIT, 0x10},
+	{0x70e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x70eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e8, CRL_REG_LEN_08BIT, 0x10},
+	{0x70e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xfd},
+	{0x70ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x70eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x70f0, CRL_REG_LEN_08BIT, 0xfd},
+	{0x70f1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30fb, CRL_REG_LEN_08BIT, 0x06},
+	{0x30fc, CRL_REG_LEN_08BIT, 0x80},
+	{0x30fd, CRL_REG_LEN_08BIT, 0x02},
+	{0x30fe, CRL_REG_LEN_08BIT, 0x93},
+	{0x6000, CRL_REG_LEN_08BIT, 0xc1},
+	{0x6001, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6002, CRL_REG_LEN_08BIT, 0xba},
+	{0x6003, CRL_REG_LEN_08BIT, 0xa4},
+	{0x6004, CRL_REG_LEN_08BIT, 0xb5},
+	{0x6005, CRL_REG_LEN_08BIT, 0xa0},
+	{0x6006, CRL_REG_LEN_08BIT, 0x82},
+	{0x6007, CRL_REG_LEN_08BIT, 0xa7},
+	{0x6008, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6009, CRL_REG_LEN_08BIT, 0x5c},
+	{0x600a, CRL_REG_LEN_08BIT, 0x9e},
+	{0x600b, CRL_REG_LEN_08BIT, 0xc0},
+	{0x600c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x600d, CRL_REG_LEN_08BIT, 0x33},
+	{0x600e, CRL_REG_LEN_08BIT, 0xcc},
+	{0x600f, CRL_REG_LEN_08BIT, 0xe2},
+	{0x6010, CRL_REG_LEN_08BIT, 0xc1},
+	{0x6011, CRL_REG_LEN_08BIT, 0xab},
+	{0x6012, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6013, CRL_REG_LEN_08BIT, 0x00},
+	{0x6014, CRL_REG_LEN_08BIT, 0x00},
+	{0x6015, CRL_REG_LEN_08BIT, 0x00},
+	{0x6016, CRL_REG_LEN_08BIT, 0x00},
+	{0x6017, CRL_REG_LEN_08BIT, 0x00},
+	{0x6018, CRL_REG_LEN_08BIT, 0x00},
+	{0x6019, CRL_REG_LEN_08BIT, 0x00},
+	{0x601a, CRL_REG_LEN_08BIT, 0x00},
+	{0x601b, CRL_REG_LEN_08BIT, 0x00},
+	{0x601c, CRL_REG_LEN_08BIT, 0x00},
+	{0x601d, CRL_REG_LEN_08BIT, 0x00},
+	{0x601e, CRL_REG_LEN_08BIT, 0x9c},
+	{0x601f, CRL_REG_LEN_08BIT, 0x94},
+	{0x6020, CRL_REG_LEN_08BIT, 0x90},
+	{0x6021, CRL_REG_LEN_08BIT, 0xc5},
+	{0x6022, CRL_REG_LEN_08BIT, 0x01},
+	{0x6023, CRL_REG_LEN_08BIT, 0x54},
+	{0x6024, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6025, CRL_REG_LEN_08BIT, 0x61},
+	{0x6026, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6027, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6028, CRL_REG_LEN_08BIT, 0x04},
+	{0x6029, CRL_REG_LEN_08BIT, 0x35},
+	{0x602a, CRL_REG_LEN_08BIT, 0xb1},
+	{0x602b, CRL_REG_LEN_08BIT, 0xb2},
+	{0x602c, CRL_REG_LEN_08BIT, 0xb3},
+	{0x602d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x602e, CRL_REG_LEN_08BIT, 0xd3},
+	{0x602f, CRL_REG_LEN_08BIT, 0x12},
+	{0x6030, CRL_REG_LEN_08BIT, 0x31},
+	{0x6031, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6032, CRL_REG_LEN_08BIT, 0x06},
+	{0x6033, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6034, CRL_REG_LEN_08BIT, 0xc4},
+	{0x6035, CRL_REG_LEN_08BIT, 0xce},
+	{0x6036, CRL_REG_LEN_08BIT, 0x18},
+	{0x6037, CRL_REG_LEN_08BIT, 0xcf},
+	{0x6038, CRL_REG_LEN_08BIT, 0x1e},
+	{0x6039, CRL_REG_LEN_08BIT, 0xd0},
+	{0x603a, CRL_REG_LEN_08BIT, 0x24},
+	{0x603b, CRL_REG_LEN_08BIT, 0xc5},
+	{0x603c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x603d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x603e, CRL_REG_LEN_08BIT, 0xcc},
+	{0x603f, CRL_REG_LEN_08BIT, 0x52},
+	{0x6040, CRL_REG_LEN_08BIT, 0x2b},
+	{0x6041, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6042, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6043, CRL_REG_LEN_08BIT, 0x02},
+	{0x6044, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6045, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6046, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6047, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6048, CRL_REG_LEN_08BIT, 0x0f},
+	{0x6049, CRL_REG_LEN_08BIT, 0x1a},
+	{0x604a, CRL_REG_LEN_08BIT, 0x2a},
+	{0x604b, CRL_REG_LEN_08BIT, 0xd4},
+	{0x604c, CRL_REG_LEN_08BIT, 0xf6},
+	{0x604d, CRL_REG_LEN_08BIT, 0xba},
+	{0x604e, CRL_REG_LEN_08BIT, 0x56},
+	{0x604f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6050, CRL_REG_LEN_08BIT, 0x2e},
+	{0x6051, CRL_REG_LEN_08BIT, 0x54},
+	{0x6052, CRL_REG_LEN_08BIT, 0x26},
+	{0x6053, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6054, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6055, CRL_REG_LEN_08BIT, 0x60},
+	{0x6056, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6057, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6058, CRL_REG_LEN_08BIT, 0x27},
+	{0x6059, CRL_REG_LEN_08BIT, 0x27},
+	{0x605a, CRL_REG_LEN_08BIT, 0x08},
+	{0x605b, CRL_REG_LEN_08BIT, 0x1a},
+	{0x605c, CRL_REG_LEN_08BIT, 0xcc},
+	{0x605d, CRL_REG_LEN_08BIT, 0x88},
+	{0x605e, CRL_REG_LEN_08BIT, 0x00},
+	{0x605f, CRL_REG_LEN_08BIT, 0x12},
+	{0x6060, CRL_REG_LEN_08BIT, 0x2c},
+	{0x6061, CRL_REG_LEN_08BIT, 0x60},
+	{0x6062, CRL_REG_LEN_08BIT, 0xc2},
+	{0x6063, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6064, CRL_REG_LEN_08BIT, 0xa5},
+	{0x6065, CRL_REG_LEN_08BIT, 0xb5},
+	{0x6066, CRL_REG_LEN_08BIT, 0xa0},
+	{0x6067, CRL_REG_LEN_08BIT, 0x82},
+	{0x6068, CRL_REG_LEN_08BIT, 0x5c},
+	{0x6069, CRL_REG_LEN_08BIT, 0xd4},
+	{0x606a, CRL_REG_LEN_08BIT, 0xbe},
+	{0x606b, CRL_REG_LEN_08BIT, 0xd4},
+	{0x606c, CRL_REG_LEN_08BIT, 0xbe},
+	{0x606d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x606e, CRL_REG_LEN_08BIT, 0x01},
+	{0x606f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x6070, CRL_REG_LEN_08BIT, 0x74},
+	{0x6071, CRL_REG_LEN_08BIT, 0x00},
+	{0x6072, CRL_REG_LEN_08BIT, 0x61},
+	{0x6073, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6074, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6075, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6076, CRL_REG_LEN_08BIT, 0xdf},
+	{0x6077, CRL_REG_LEN_08BIT, 0xc6},
+	{0x6078, CRL_REG_LEN_08BIT, 0x35},
+	{0x6079, CRL_REG_LEN_08BIT, 0xd2},
+	{0x607a, CRL_REG_LEN_08BIT, 0xcc},
+	{0x607b, CRL_REG_LEN_08BIT, 0x06},
+	{0x607c, CRL_REG_LEN_08BIT, 0x31},
+	{0x607d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x607e, CRL_REG_LEN_08BIT, 0xc5},
+	{0x607f, CRL_REG_LEN_08BIT, 0xbb},
+	{0x6080, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6081, CRL_REG_LEN_08BIT, 0x18},
+	{0x6082, CRL_REG_LEN_08BIT, 0xc6},
+	{0x6083, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6084, CRL_REG_LEN_08BIT, 0xbd},
+	{0x6085, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6086, CRL_REG_LEN_08BIT, 0x52},
+	{0x6087, CRL_REG_LEN_08BIT, 0x2b},
+	{0x6088, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6089, CRL_REG_LEN_08BIT, 0xd3},
+	{0x608a, CRL_REG_LEN_08BIT, 0x01},
+	{0x608b, CRL_REG_LEN_08BIT, 0xcc},
+	{0x608c, CRL_REG_LEN_08BIT, 0x0a},
+	{0x608d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x608e, CRL_REG_LEN_08BIT, 0xd3},
+	{0x608f, CRL_REG_LEN_08BIT, 0x0f},
+	{0x6090, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6091, CRL_REG_LEN_08BIT, 0x71},
+	{0x6092, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6093, CRL_REG_LEN_08BIT, 0xd4},
+	{0x6094, CRL_REG_LEN_08BIT, 0xf6},
+	{0x6095, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6096, CRL_REG_LEN_08BIT, 0x22},
+	{0x6097, CRL_REG_LEN_08BIT, 0x70},
+	{0x6098, CRL_REG_LEN_08BIT, 0xca},
+	{0x6099, CRL_REG_LEN_08BIT, 0x26},
+	{0x609a, CRL_REG_LEN_08BIT, 0xd2},
+	{0x609b, CRL_REG_LEN_08BIT, 0xcc},
+	{0x609c, CRL_REG_LEN_08BIT, 0x60},
+	{0x609d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x609e, CRL_REG_LEN_08BIT, 0xd3},
+	{0x609f, CRL_REG_LEN_08BIT, 0x27},
+	{0x60a0, CRL_REG_LEN_08BIT, 0x27},
+	{0x60a1, CRL_REG_LEN_08BIT, 0x08},
+	{0x60a2, CRL_REG_LEN_08BIT, 0x1a},
+	{0x60a3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60a4, CRL_REG_LEN_08BIT, 0x88},
+	{0x60a5, CRL_REG_LEN_08BIT, 0x12},
+	{0x60a6, CRL_REG_LEN_08BIT, 0x2c},
+	{0x60a7, CRL_REG_LEN_08BIT, 0x60},
+	{0x60a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x60a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x60aa, CRL_REG_LEN_08BIT, 0xc0},
+	{0x60ab, CRL_REG_LEN_08BIT, 0xb9},
+	{0x60ac, CRL_REG_LEN_08BIT, 0xa3},
+	{0x60ad, CRL_REG_LEN_08BIT, 0xb5},
+	{0x60ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x60af, CRL_REG_LEN_08BIT, 0xa0},
+	{0x60b0, CRL_REG_LEN_08BIT, 0x82},
+	{0x60b1, CRL_REG_LEN_08BIT, 0x5c},
+	{0x60b2, CRL_REG_LEN_08BIT, 0xd4},
+	{0x60b3, CRL_REG_LEN_08BIT, 0xa0},
+	{0x60b4, CRL_REG_LEN_08BIT, 0x9d},
+	{0x60b5, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60b6, CRL_REG_LEN_08BIT, 0x26},
+	{0x60b7, CRL_REG_LEN_08BIT, 0xb0},
+	{0x60b8, CRL_REG_LEN_08BIT, 0xb7},
+	{0x60b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x60ba, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60bb, CRL_REG_LEN_08BIT, 0x0a},
+	{0x60bc, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60bd, CRL_REG_LEN_08BIT, 0x10},
+	{0x60be, CRL_REG_LEN_08BIT, 0x9c},
+	{0x60bf, CRL_REG_LEN_08BIT, 0x94},
+	{0x60c0, CRL_REG_LEN_08BIT, 0x90},
+	{0x60c1, CRL_REG_LEN_08BIT, 0xc8},
+	{0x60c2, CRL_REG_LEN_08BIT, 0xba},
+	{0x60c3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x60c4, CRL_REG_LEN_08BIT, 0x74},
+	{0x60c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x60c6, CRL_REG_LEN_08BIT, 0x61},
+	{0x60c7, CRL_REG_LEN_08BIT, 0x2a},
+	{0x60c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x60c9, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60ca, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60cb, CRL_REG_LEN_08BIT, 0xdf},
+	{0x60cc, CRL_REG_LEN_08BIT, 0xc4},
+	{0x60cd, CRL_REG_LEN_08BIT, 0x35},
+	{0x60ce, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60cf, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60d0, CRL_REG_LEN_08BIT, 0x06},
+	{0x60d1, CRL_REG_LEN_08BIT, 0x31},
+	{0x60d2, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60d3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60d4, CRL_REG_LEN_08BIT, 0x15},
+	{0x60d5, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60d6, CRL_REG_LEN_08BIT, 0xbb},
+	{0x60d7, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60d8, CRL_REG_LEN_08BIT, 0x1a},
+	{0x60d9, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60da, CRL_REG_LEN_08BIT, 0xbe},
+	{0x60db, CRL_REG_LEN_08BIT, 0xce},
+	{0x60dc, CRL_REG_LEN_08BIT, 0x52},
+	{0x60dd, CRL_REG_LEN_08BIT, 0xcf},
+	{0x60de, CRL_REG_LEN_08BIT, 0x56},
+	{0x60df, CRL_REG_LEN_08BIT, 0xd0},
+	{0x60e0, CRL_REG_LEN_08BIT, 0x5b},
+	{0x60e1, CRL_REG_LEN_08BIT, 0x2b},
+	{0x60e2, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60e3, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x60e5, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60e6, CRL_REG_LEN_08BIT, 0x0a},
+	{0x60e7, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60e8, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60e9, CRL_REG_LEN_08BIT, 0x0f},
+	{0x60ea, CRL_REG_LEN_08BIT, 0xd9},
+	{0x60eb, CRL_REG_LEN_08BIT, 0xc7},
+	{0x60ec, CRL_REG_LEN_08BIT, 0xda},
+	{0x60ed, CRL_REG_LEN_08BIT, 0xce},
+	{0x60ee, CRL_REG_LEN_08BIT, 0x1a},
+	{0x60ef, CRL_REG_LEN_08BIT, 0xd4},
+	{0x60f0, CRL_REG_LEN_08BIT, 0xf6},
+	{0x60f1, CRL_REG_LEN_08BIT, 0xd4},
+	{0x60f2, CRL_REG_LEN_08BIT, 0xa9},
+	{0x60f3, CRL_REG_LEN_08BIT, 0x27},
+	{0x60f4, CRL_REG_LEN_08BIT, 0x00},
+	{0x60f5, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60f6, CRL_REG_LEN_08BIT, 0xcc},
+	{0x60f7, CRL_REG_LEN_08BIT, 0x60},
+	{0x60f8, CRL_REG_LEN_08BIT, 0xd2},
+	{0x60f9, CRL_REG_LEN_08BIT, 0xd3},
+	{0x60fa, CRL_REG_LEN_08BIT, 0x2d},
+	{0x60fb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x60fc, CRL_REG_LEN_08BIT, 0xdf},
+	{0x60fd, CRL_REG_LEN_08BIT, 0xda},
+	{0x60fe, CRL_REG_LEN_08BIT, 0xe5},
+	{0x60ff, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6100, CRL_REG_LEN_08BIT, 0x12},
+	{0x6101, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6102, CRL_REG_LEN_08BIT, 0x88},
+	{0x6103, CRL_REG_LEN_08BIT, 0xd6},
+	{0x6104, CRL_REG_LEN_08BIT, 0xb1},
+	{0x6105, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6106, CRL_REG_LEN_08BIT, 0xba},
+	{0x6107, CRL_REG_LEN_08BIT, 0xaf},
+	{0x6108, CRL_REG_LEN_08BIT, 0xdc},
+	{0x6109, CRL_REG_LEN_08BIT, 0x00},
+	{0x610a, CRL_REG_LEN_08BIT, 0xcb},
+	{0x610b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x610c, CRL_REG_LEN_08BIT, 0xb9},
+	{0x610d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x610e, CRL_REG_LEN_08BIT, 0xb5},
+	{0x610f, CRL_REG_LEN_08BIT, 0x5c},
+	{0x6110, CRL_REG_LEN_08BIT, 0x12},
+	{0x6111, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6112, CRL_REG_LEN_08BIT, 0x61},
+	{0x6113, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6114, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6115, CRL_REG_LEN_08BIT, 0xdf},
+	{0x6116, CRL_REG_LEN_08BIT, 0xc7},
+	{0x6117, CRL_REG_LEN_08BIT, 0x35},
+	{0x6118, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6119, CRL_REG_LEN_08BIT, 0xcc},
+	{0x611a, CRL_REG_LEN_08BIT, 0x06},
+	{0x611b, CRL_REG_LEN_08BIT, 0x31},
+	{0x611c, CRL_REG_LEN_08BIT, 0xc6},
+	{0x611d, CRL_REG_LEN_08BIT, 0xbb},
+	{0x611e, CRL_REG_LEN_08BIT, 0xd2},
+	{0x611f, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6120, CRL_REG_LEN_08BIT, 0x18},
+	{0x6121, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6122, CRL_REG_LEN_08BIT, 0xbe},
+	{0x6123, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6124, CRL_REG_LEN_08BIT, 0x52},
+	{0x6125, CRL_REG_LEN_08BIT, 0xc7},
+	{0x6126, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6127, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6128, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6129, CRL_REG_LEN_08BIT, 0xb4},
+	{0x612a, CRL_REG_LEN_08BIT, 0xb7},
+	{0x612b, CRL_REG_LEN_08BIT, 0x94},
+	{0x612c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x612d, CRL_REG_LEN_08BIT, 0x12},
+	{0x612e, CRL_REG_LEN_08BIT, 0x26},
+	{0x612f, CRL_REG_LEN_08BIT, 0x42},
+	{0x6130, CRL_REG_LEN_08BIT, 0x46},
+	{0x6131, CRL_REG_LEN_08BIT, 0x42},
+	{0x6132, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6133, CRL_REG_LEN_08BIT, 0x20},
+	{0x6134, CRL_REG_LEN_08BIT, 0x27},
+	{0x6135, CRL_REG_LEN_08BIT, 0x00},
+	{0x6136, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6137, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6138, CRL_REG_LEN_08BIT, 0x88},
+	{0x6139, CRL_REG_LEN_08BIT, 0x60},
+	{0x613a, CRL_REG_LEN_08BIT, 0x2c},
+	{0x613b, CRL_REG_LEN_08BIT, 0x12},
+	{0x613c, CRL_REG_LEN_08BIT, 0x40},
+	{0x613d, CRL_REG_LEN_08BIT, 0xb8},
+	{0x613e, CRL_REG_LEN_08BIT, 0x90},
+	{0x613f, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6140, CRL_REG_LEN_08BIT, 0xba},
+	{0x6141, CRL_REG_LEN_08BIT, 0x00},
+	{0x6142, CRL_REG_LEN_08BIT, 0x00},
+	{0x6143, CRL_REG_LEN_08BIT, 0x00},
+	{0x6144, CRL_REG_LEN_08BIT, 0x00},
+	{0x6145, CRL_REG_LEN_08BIT, 0x00},
+	{0x6146, CRL_REG_LEN_08BIT, 0x00},
+	{0x6147, CRL_REG_LEN_08BIT, 0xaa},
+	{0x6148, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6149, CRL_REG_LEN_08BIT, 0x00},
+	{0x614a, CRL_REG_LEN_08BIT, 0x00},
+	{0x614b, CRL_REG_LEN_08BIT, 0x00},
+	{0x614c, CRL_REG_LEN_08BIT, 0x00},
+	{0x614d, CRL_REG_LEN_08BIT, 0xa6},
+	{0x614e, CRL_REG_LEN_08BIT, 0xb7},
+	{0x614f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6150, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6151, CRL_REG_LEN_08BIT, 0x00},
+	{0x6152, CRL_REG_LEN_08BIT, 0x71},
+	{0x6153, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6154, CRL_REG_LEN_08BIT, 0x30},
+	{0x6155, CRL_REG_LEN_08BIT, 0xba},
+	{0x6156, CRL_REG_LEN_08BIT, 0x00},
+	{0x6157, CRL_REG_LEN_08BIT, 0x00},
+	{0x6158, CRL_REG_LEN_08BIT, 0x00},
+	{0x6159, CRL_REG_LEN_08BIT, 0x00},
+	{0x615a, CRL_REG_LEN_08BIT, 0xd3},
+	{0x615b, CRL_REG_LEN_08BIT, 0x10},
+	{0x615c, CRL_REG_LEN_08BIT, 0x70},
+	{0x615d, CRL_REG_LEN_08BIT, 0x00},
+	{0x615e, CRL_REG_LEN_08BIT, 0x00},
+	{0x615f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6160, CRL_REG_LEN_08BIT, 0x00},
+	{0x6161, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6162, CRL_REG_LEN_08BIT, 0xba},
+	{0x6163, CRL_REG_LEN_08BIT, 0xb0},
+	{0x6164, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6165, CRL_REG_LEN_08BIT, 0x00},
+	{0x6166, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6167, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6168, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6169, CRL_REG_LEN_08BIT, 0x9d},
+	{0x616a, CRL_REG_LEN_08BIT, 0x9d},
+	{0x616b, CRL_REG_LEN_08BIT, 0xd3},
+	{0x616c, CRL_REG_LEN_08BIT, 0x10},
+	{0x616d, CRL_REG_LEN_08BIT, 0x9c},
+	{0x616e, CRL_REG_LEN_08BIT, 0x94},
+	{0x616f, CRL_REG_LEN_08BIT, 0x90},
+	{0x6170, CRL_REG_LEN_08BIT, 0xc8},
+	{0x6171, CRL_REG_LEN_08BIT, 0xba},
+	{0x6172, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6173, CRL_REG_LEN_08BIT, 0x60},
+	{0x6174, CRL_REG_LEN_08BIT, 0x2c},
+	{0x6175, CRL_REG_LEN_08BIT, 0x50},
+	{0x6176, CRL_REG_LEN_08BIT, 0x11},
+	{0x6177, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6178, CRL_REG_LEN_08BIT, 0x00},
+	{0x6179, CRL_REG_LEN_08BIT, 0x30},
+	{0x617a, CRL_REG_LEN_08BIT, 0xd5},
+	{0x617b, CRL_REG_LEN_08BIT, 0x00},
+	{0x617c, CRL_REG_LEN_08BIT, 0xba},
+	{0x617d, CRL_REG_LEN_08BIT, 0xb0},
+	{0x617e, CRL_REG_LEN_08BIT, 0xb7},
+	{0x617f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6180, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6181, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6182, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6183, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6184, CRL_REG_LEN_08BIT, 0x9d},
+	{0x6185, CRL_REG_LEN_08BIT, 0xd3},
+	{0x6186, CRL_REG_LEN_08BIT, 0x10},
+	{0x6187, CRL_REG_LEN_08BIT, 0x9c},
+	{0x6188, CRL_REG_LEN_08BIT, 0x94},
+	{0x6189, CRL_REG_LEN_08BIT, 0x90},
+	{0x618a, CRL_REG_LEN_08BIT, 0xc8},
+	{0x618b, CRL_REG_LEN_08BIT, 0xba},
+	{0x618c, CRL_REG_LEN_08BIT, 0xd5},
+	{0x618d, CRL_REG_LEN_08BIT, 0x00},
+	{0x618e, CRL_REG_LEN_08BIT, 0x01},
+	{0x618f, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6190, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6191, CRL_REG_LEN_08BIT, 0x12},
+	{0x6192, CRL_REG_LEN_08BIT, 0x12},
+	{0x6193, CRL_REG_LEN_08BIT, 0x00},
+	{0x6194, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6195, CRL_REG_LEN_08BIT, 0x9c},
+	{0x6196, CRL_REG_LEN_08BIT, 0xd2},
+	{0x6197, CRL_REG_LEN_08BIT, 0xcc},
+	{0x6198, CRL_REG_LEN_08BIT, 0x60},
+	{0x6199, CRL_REG_LEN_08BIT, 0xd2},
+	{0x619a, CRL_REG_LEN_08BIT, 0x04},
+	{0x619b, CRL_REG_LEN_08BIT, 0xd5},
+	{0x619c, CRL_REG_LEN_08BIT, 0x1a},
+	{0x619d, CRL_REG_LEN_08BIT, 0xcc},
+	{0x619e, CRL_REG_LEN_08BIT, 0x12},
+	{0x619f, CRL_REG_LEN_08BIT, 0x00},
+	{0x61a0, CRL_REG_LEN_08BIT, 0x12},
+	{0x61a1, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61a2, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61a3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61a4, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61a5, CRL_REG_LEN_08BIT, 0x60},
+	{0x61a6, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61a7, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61a8, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61a9, CRL_REG_LEN_08BIT, 0x12},
+	{0x61aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x61ab, CRL_REG_LEN_08BIT, 0x12},
+	{0x61ac, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61ad, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61ae, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61af, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61b0, CRL_REG_LEN_08BIT, 0x60},
+	{0x61b1, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61b2, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61b3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61b4, CRL_REG_LEN_08BIT, 0x12},
+	{0x61b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x61b6, CRL_REG_LEN_08BIT, 0x12},
+	{0x61b7, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61b9, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61ba, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61bb, CRL_REG_LEN_08BIT, 0x60},
+	{0x61bc, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61bd, CRL_REG_LEN_08BIT, 0xd5},
+	{0x61be, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61bf, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61c0, CRL_REG_LEN_08BIT, 0x12},
+	{0x61c1, CRL_REG_LEN_08BIT, 0x12},
+	{0x61c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x61c3, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61c4, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61c5, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61c6, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61c7, CRL_REG_LEN_08BIT, 0x74},
+	{0x61c8, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61c9, CRL_REG_LEN_08BIT, 0xd5},
+	{0x61ca, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61cb, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61cc, CRL_REG_LEN_08BIT, 0x12},
+	{0x61cd, CRL_REG_LEN_08BIT, 0x00},
+	{0x61ce, CRL_REG_LEN_08BIT, 0x12},
+	{0x61cf, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61d0, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61d1, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61d2, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61d3, CRL_REG_LEN_08BIT, 0x74},
+	{0x61d4, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61d5, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61d6, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61d7, CRL_REG_LEN_08BIT, 0x12},
+	{0x61d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x61d9, CRL_REG_LEN_08BIT, 0x12},
+	{0x61da, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61db, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61dc, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61dd, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61de, CRL_REG_LEN_08BIT, 0x74},
+	{0x61df, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61e0, CRL_REG_LEN_08BIT, 0x1a},
+	{0x61e1, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61e2, CRL_REG_LEN_08BIT, 0x12},
+	{0x61e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x61e4, CRL_REG_LEN_08BIT, 0x12},
+	{0x61e5, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61e6, CRL_REG_LEN_08BIT, 0x8a},
+	{0x61e7, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61e8, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61e9, CRL_REG_LEN_08BIT, 0x74},
+	{0x61ea, CRL_REG_LEN_08BIT, 0xd2},
+	{0x61eb, CRL_REG_LEN_08BIT, 0xd5},
+	{0x61ec, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61ed, CRL_REG_LEN_08BIT, 0x12},
+	{0x61ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x61ef, CRL_REG_LEN_08BIT, 0x12},
+	{0x61f0, CRL_REG_LEN_08BIT, 0xcc},
+	{0x61f1, CRL_REG_LEN_08BIT, 0x9c},
+	{0x61f2, CRL_REG_LEN_08BIT, 0xd5},
+	{0x6400, CRL_REG_LEN_08BIT, 0x04},
+	{0x6401, CRL_REG_LEN_08BIT, 0x04},
+	{0x6402, CRL_REG_LEN_08BIT, 0x00},
+	{0x6403, CRL_REG_LEN_08BIT, 0xff},
+	{0x6404, CRL_REG_LEN_08BIT, 0x00},
+	{0x6405, CRL_REG_LEN_08BIT, 0x08},
+	{0x6406, CRL_REG_LEN_08BIT, 0x00},
+	{0x6407, CRL_REG_LEN_08BIT, 0xff},
+	{0x6408, CRL_REG_LEN_08BIT, 0x04},
+	{0x6409, CRL_REG_LEN_08BIT, 0x70},
+	{0x640a, CRL_REG_LEN_08BIT, 0x00},
+	{0x640b, CRL_REG_LEN_08BIT, 0xff},
+	{0x640c, CRL_REG_LEN_08BIT, 0x05},
+	{0x640d, CRL_REG_LEN_08BIT, 0x14},
+	{0x640e, CRL_REG_LEN_08BIT, 0x04},
+	{0x640f, CRL_REG_LEN_08BIT, 0x71},
+	{0x6410, CRL_REG_LEN_08BIT, 0x05},
+	{0x6411, CRL_REG_LEN_08BIT, 0x74},
+	{0x6412, CRL_REG_LEN_08BIT, 0x00},
+	{0x6413, CRL_REG_LEN_08BIT, 0xff},
+	{0x6414, CRL_REG_LEN_08BIT, 0x05},
+	{0x6415, CRL_REG_LEN_08BIT, 0x54},
+	{0x6416, CRL_REG_LEN_08BIT, 0x05},
+	{0x6417, CRL_REG_LEN_08BIT, 0x44},
+	{0x6418, CRL_REG_LEN_08BIT, 0x04},
+	{0x6419, CRL_REG_LEN_08BIT, 0x30},
+	{0x641a, CRL_REG_LEN_08BIT, 0x05},
+	{0x641b, CRL_REG_LEN_08BIT, 0x46},
+	{0x641c, CRL_REG_LEN_08BIT, 0x00},
+	{0x641d, CRL_REG_LEN_08BIT, 0xff},
+	{0x641e, CRL_REG_LEN_08BIT, 0x04},
+	{0x641f, CRL_REG_LEN_08BIT, 0x31},
+	{0x6420, CRL_REG_LEN_08BIT, 0x04},
+	{0x6421, CRL_REG_LEN_08BIT, 0x30},
+	{0x6422, CRL_REG_LEN_08BIT, 0x00},
+	{0x6423, CRL_REG_LEN_08BIT, 0xff},
+	{0x6424, CRL_REG_LEN_08BIT, 0x04},
+	{0x6425, CRL_REG_LEN_08BIT, 0x20},
+	{0x6426, CRL_REG_LEN_08BIT, 0x05},
+	{0x6427, CRL_REG_LEN_08BIT, 0x06},
+	{0x6428, CRL_REG_LEN_08BIT, 0x00},
+	{0x6429, CRL_REG_LEN_08BIT, 0xff},
+	{0x642a, CRL_REG_LEN_08BIT, 0x08},
+	{0x642b, CRL_REG_LEN_08BIT, 0x2a},
+	{0x642c, CRL_REG_LEN_08BIT, 0x08},
+	{0x642d, CRL_REG_LEN_08BIT, 0x31},
+	{0x642e, CRL_REG_LEN_08BIT, 0x00},
+	{0x642f, CRL_REG_LEN_08BIT, 0xff},
+	{0x6430, CRL_REG_LEN_08BIT, 0x08},
+	{0x6431, CRL_REG_LEN_08BIT, 0x2a},
+	{0x6432, CRL_REG_LEN_08BIT, 0x08},
+	{0x6433, CRL_REG_LEN_08BIT, 0x31},
+	{0x6434, CRL_REG_LEN_08BIT, 0x06},
+	{0x6435, CRL_REG_LEN_08BIT, 0x20},
+	{0x6436, CRL_REG_LEN_08BIT, 0x07},
+	{0x6437, CRL_REG_LEN_08BIT, 0x00},
+	{0x6438, CRL_REG_LEN_08BIT, 0x08},
+	{0x6439, CRL_REG_LEN_08BIT, 0x40},
+	{0x643a, CRL_REG_LEN_08BIT, 0x00},
+	{0x643b, CRL_REG_LEN_08BIT, 0xff},
+	{0x643c, CRL_REG_LEN_08BIT, 0x08},
+	{0x643d, CRL_REG_LEN_08BIT, 0x2a},
+	{0x643e, CRL_REG_LEN_08BIT, 0x08},
+	{0x643f, CRL_REG_LEN_08BIT, 0x36},
+	{0x6440, CRL_REG_LEN_08BIT, 0x06},
+	{0x6441, CRL_REG_LEN_08BIT, 0x10},
+	{0x6442, CRL_REG_LEN_08BIT, 0x07},
+	{0x6443, CRL_REG_LEN_08BIT, 0x00},
+	{0x6444, CRL_REG_LEN_08BIT, 0x08},
+	{0x6445, CRL_REG_LEN_08BIT, 0x40},
+	{0x6446, CRL_REG_LEN_08BIT, 0x00},
+	{0x6447, CRL_REG_LEN_08BIT, 0xff},
+	{0x6448, CRL_REG_LEN_08BIT, 0x08},
+	{0x6449, CRL_REG_LEN_08BIT, 0x2a},
+	{0x644a, CRL_REG_LEN_08BIT, 0x08},
+	{0x644b, CRL_REG_LEN_08BIT, 0x3b},
+	{0x644c, CRL_REG_LEN_08BIT, 0x06},
+	{0x644d, CRL_REG_LEN_08BIT, 0x00},
+	{0x644e, CRL_REG_LEN_08BIT, 0x07},
+	{0x644f, CRL_REG_LEN_08BIT, 0x00},
+	{0x6450, CRL_REG_LEN_08BIT, 0x08},
+	{0x6451, CRL_REG_LEN_08BIT, 0x40},
+	{0x6452, CRL_REG_LEN_08BIT, 0x00},
+	{0x6453, CRL_REG_LEN_08BIT, 0xff},
+	{0x6454, CRL_REG_LEN_08BIT, 0x06},
+	{0x6455, CRL_REG_LEN_08BIT, 0x00},
+	{0x6456, CRL_REG_LEN_08BIT, 0x07},
+	{0x6457, CRL_REG_LEN_08BIT, 0x05},
+	{0x6458, CRL_REG_LEN_08BIT, 0x01},
+	{0x6459, CRL_REG_LEN_08BIT, 0xaf},
+	{0x645a, CRL_REG_LEN_08BIT, 0x01},
+	{0x645b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x645c, CRL_REG_LEN_08BIT, 0x01},
+	{0x645d, CRL_REG_LEN_08BIT, 0x90},
+	{0x645e, CRL_REG_LEN_08BIT, 0x01},
+	{0x645f, CRL_REG_LEN_08BIT, 0xc8},
+	{0x6460, CRL_REG_LEN_08BIT, 0x00},
+	{0x6461, CRL_REG_LEN_08BIT, 0xff},
+	{0x6462, CRL_REG_LEN_08BIT, 0x01},
+	{0x6463, CRL_REG_LEN_08BIT, 0xac},
+	{0x6464, CRL_REG_LEN_08BIT, 0x01},
+	{0x6465, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6466, CRL_REG_LEN_08BIT, 0x01},
+	{0x6467, CRL_REG_LEN_08BIT, 0x90},
+	{0x6468, CRL_REG_LEN_08BIT, 0x01},
+	{0x6469, CRL_REG_LEN_08BIT, 0xe8},
+	{0x646a, CRL_REG_LEN_08BIT, 0x00},
+	{0x646b, CRL_REG_LEN_08BIT, 0xff},
+	{0x646c, CRL_REG_LEN_08BIT, 0x01},
+	{0x646d, CRL_REG_LEN_08BIT, 0xad},
+	{0x646e, CRL_REG_LEN_08BIT, 0x01},
+	{0x646f, CRL_REG_LEN_08BIT, 0x0d},
+	{0x6470, CRL_REG_LEN_08BIT, 0x01},
+	{0x6471, CRL_REG_LEN_08BIT, 0x90},
+	{0x6472, CRL_REG_LEN_08BIT, 0x01},
+	{0x6473, CRL_REG_LEN_08BIT, 0xe8},
+	{0x6474, CRL_REG_LEN_08BIT, 0x00},
+	{0x6475, CRL_REG_LEN_08BIT, 0xff},
+	{0x6476, CRL_REG_LEN_08BIT, 0x01},
+	{0x6477, CRL_REG_LEN_08BIT, 0xae},
+	{0x6478, CRL_REG_LEN_08BIT, 0x01},
+	{0x6479, CRL_REG_LEN_08BIT, 0x0e},
+	{0x647a, CRL_REG_LEN_08BIT, 0x01},
+	{0x647b, CRL_REG_LEN_08BIT, 0x90},
+	{0x647c, CRL_REG_LEN_08BIT, 0x01},
+	{0x647d, CRL_REG_LEN_08BIT, 0xe8},
+	{0x647e, CRL_REG_LEN_08BIT, 0x00},
+	{0x647f, CRL_REG_LEN_08BIT, 0xff},
+	{0x6480, CRL_REG_LEN_08BIT, 0x01},
+	{0x6481, CRL_REG_LEN_08BIT, 0xb0},
+	{0x6482, CRL_REG_LEN_08BIT, 0x01},
+	{0x6483, CRL_REG_LEN_08BIT, 0xb1},
+	{0x6484, CRL_REG_LEN_08BIT, 0x01},
+	{0x6485, CRL_REG_LEN_08BIT, 0xb2},
+	{0x6486, CRL_REG_LEN_08BIT, 0x01},
+	{0x6487, CRL_REG_LEN_08BIT, 0xb3},
+	{0x6488, CRL_REG_LEN_08BIT, 0x01},
+	{0x6489, CRL_REG_LEN_08BIT, 0xb4},
+	{0x648a, CRL_REG_LEN_08BIT, 0x01},
+	{0x648b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x648c, CRL_REG_LEN_08BIT, 0x01},
+	{0x648d, CRL_REG_LEN_08BIT, 0xb6},
+	{0x648e, CRL_REG_LEN_08BIT, 0x01},
+	{0x648f, CRL_REG_LEN_08BIT, 0xb7},
+	{0x6490, CRL_REG_LEN_08BIT, 0x01},
+	{0x6491, CRL_REG_LEN_08BIT, 0xb8},
+	{0x6492, CRL_REG_LEN_08BIT, 0x01},
+	{0x6493, CRL_REG_LEN_08BIT, 0xb9},
+	{0x6494, CRL_REG_LEN_08BIT, 0x01},
+	{0x6495, CRL_REG_LEN_08BIT, 0xba},
+	{0x6496, CRL_REG_LEN_08BIT, 0x01},
+	{0x6497, CRL_REG_LEN_08BIT, 0xbb},
+	{0x6498, CRL_REG_LEN_08BIT, 0x01},
+	{0x6499, CRL_REG_LEN_08BIT, 0xbc},
+	{0x649a, CRL_REG_LEN_08BIT, 0x01},
+	{0x649b, CRL_REG_LEN_08BIT, 0xbd},
+	{0x649c, CRL_REG_LEN_08BIT, 0x01},
+	{0x649d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x649e, CRL_REG_LEN_08BIT, 0x01},
+	{0x649f, CRL_REG_LEN_08BIT, 0xbf},
+	{0x64a0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0x64a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x64a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x64a4, CRL_REG_LEN_08BIT, 0x06},
+	{0x64a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x64a6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64a7, CRL_REG_LEN_08BIT, 0xf6},
+	{0x64a8, CRL_REG_LEN_08BIT, 0x04},
+	{0x64a9, CRL_REG_LEN_08BIT, 0x30},
+	{0x64aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x64ab, CRL_REG_LEN_08BIT, 0xff},
+	{0x64ac, CRL_REG_LEN_08BIT, 0x06},
+	{0x64ad, CRL_REG_LEN_08BIT, 0x10},
+	{0x64ae, CRL_REG_LEN_08BIT, 0x01},
+	{0x64af, CRL_REG_LEN_08BIT, 0xf6},
+	{0x64b0, CRL_REG_LEN_08BIT, 0x04},
+	{0x64b1, CRL_REG_LEN_08BIT, 0x30},
+	{0x64b2, CRL_REG_LEN_08BIT, 0x06},
+	{0x64b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x64b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x64b5, CRL_REG_LEN_08BIT, 0xff},
+	{0x64b6, CRL_REG_LEN_08BIT, 0x06},
+	{0x64b7, CRL_REG_LEN_08BIT, 0x20},
+	{0x64b8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64b9, CRL_REG_LEN_08BIT, 0xf6},
+	{0x64ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x64bb, CRL_REG_LEN_08BIT, 0x30},
+	{0x64bc, CRL_REG_LEN_08BIT, 0x06},
+	{0x64bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x64be, CRL_REG_LEN_08BIT, 0x00},
+	{0x64bf, CRL_REG_LEN_08BIT, 0xff},
+	{0x64c0, CRL_REG_LEN_08BIT, 0x04},
+	{0x64c1, CRL_REG_LEN_08BIT, 0x31},
+	{0x64c2, CRL_REG_LEN_08BIT, 0x04},
+	{0x64c3, CRL_REG_LEN_08BIT, 0x30},
+	{0x64c4, CRL_REG_LEN_08BIT, 0x01},
+	{0x64c5, CRL_REG_LEN_08BIT, 0x20},
+	{0x64c6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64c7, CRL_REG_LEN_08BIT, 0x31},
+	{0x64c8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x64ca, CRL_REG_LEN_08BIT, 0x01},
+	{0x64cb, CRL_REG_LEN_08BIT, 0x33},
+	{0x64cc, CRL_REG_LEN_08BIT, 0x01},
+	{0x64cd, CRL_REG_LEN_08BIT, 0x34},
+	{0x64ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x64cf, CRL_REG_LEN_08BIT, 0x35},
+	{0x64d0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d1, CRL_REG_LEN_08BIT, 0x36},
+	{0x64d2, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d3, CRL_REG_LEN_08BIT, 0x37},
+	{0x64d4, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d5, CRL_REG_LEN_08BIT, 0x38},
+	{0x64d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d7, CRL_REG_LEN_08BIT, 0x39},
+	{0x64d8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64d9, CRL_REG_LEN_08BIT, 0x3a},
+	{0x64da, CRL_REG_LEN_08BIT, 0x01},
+	{0x64db, CRL_REG_LEN_08BIT, 0x3b},
+	{0x64dc, CRL_REG_LEN_08BIT, 0x01},
+	{0x64dd, CRL_REG_LEN_08BIT, 0x3c},
+	{0x64de, CRL_REG_LEN_08BIT, 0x01},
+	{0x64df, CRL_REG_LEN_08BIT, 0x3d},
+	{0x64e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64e1, CRL_REG_LEN_08BIT, 0x3e},
+	{0x64e2, CRL_REG_LEN_08BIT, 0x01},
+	{0x64e3, CRL_REG_LEN_08BIT, 0x3f},
+	{0x64e4, CRL_REG_LEN_08BIT, 0x02},
+	{0x64e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0x64e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x64e7, CRL_REG_LEN_08BIT, 0xff},
+	{0x64e8, CRL_REG_LEN_08BIT, 0x04},
+	{0x64e9, CRL_REG_LEN_08BIT, 0x31},
+	{0x64ea, CRL_REG_LEN_08BIT, 0x04},
+	{0x64eb, CRL_REG_LEN_08BIT, 0x30},
+	{0x64ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x64ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x64ee, CRL_REG_LEN_08BIT, 0x01},
+	{0x64ef, CRL_REG_LEN_08BIT, 0x11},
+	{0x64f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f1, CRL_REG_LEN_08BIT, 0x12},
+	{0x64f2, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f3, CRL_REG_LEN_08BIT, 0x13},
+	{0x64f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x64f6, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f7, CRL_REG_LEN_08BIT, 0x15},
+	{0x64f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x64f9, CRL_REG_LEN_08BIT, 0x16},
+	{0x64fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x64fb, CRL_REG_LEN_08BIT, 0x17},
+	{0x64fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x64fd, CRL_REG_LEN_08BIT, 0x18},
+	{0x64fe, CRL_REG_LEN_08BIT, 0x01},
+	{0x64ff, CRL_REG_LEN_08BIT, 0x19},
+	{0x6500, CRL_REG_LEN_08BIT, 0x01},
+	{0x6501, CRL_REG_LEN_08BIT, 0x1a},
+	{0x6502, CRL_REG_LEN_08BIT, 0x01},
+	{0x6503, CRL_REG_LEN_08BIT, 0x1b},
+	{0x6504, CRL_REG_LEN_08BIT, 0x01},
+	{0x6505, CRL_REG_LEN_08BIT, 0x1c},
+	{0x6506, CRL_REG_LEN_08BIT, 0x01},
+	{0x6507, CRL_REG_LEN_08BIT, 0x1d},
+	{0x6508, CRL_REG_LEN_08BIT, 0x01},
+	{0x6509, CRL_REG_LEN_08BIT, 0x1e},
+	{0x650a, CRL_REG_LEN_08BIT, 0x01},
+	{0x650b, CRL_REG_LEN_08BIT, 0x1f},
+	{0x650c, CRL_REG_LEN_08BIT, 0x02},
+	{0x650d, CRL_REG_LEN_08BIT, 0xa0},
+	{0x650e, CRL_REG_LEN_08BIT, 0x00},
+	{0x650f, CRL_REG_LEN_08BIT, 0xff},
+	{0x6510, CRL_REG_LEN_08BIT, 0x04},
+	{0x6511, CRL_REG_LEN_08BIT, 0x20},
+	{0x6512, CRL_REG_LEN_08BIT, 0x05},
+	{0x6513, CRL_REG_LEN_08BIT, 0x86},
+	{0x6514, CRL_REG_LEN_08BIT, 0x03},
+	{0x6515, CRL_REG_LEN_08BIT, 0x0b},
+	{0x6516, CRL_REG_LEN_08BIT, 0x05},
+	{0x6517, CRL_REG_LEN_08BIT, 0x86},
+	{0x6518, CRL_REG_LEN_08BIT, 0x00},
+	{0x6519, CRL_REG_LEN_08BIT, 0x00},
+	{0x651a, CRL_REG_LEN_08BIT, 0x05},
+	{0x651b, CRL_REG_LEN_08BIT, 0x06},
+	{0x651c, CRL_REG_LEN_08BIT, 0x00},
+	{0x651d, CRL_REG_LEN_08BIT, 0x04},
+	{0x651e, CRL_REG_LEN_08BIT, 0x05},
+	{0x651f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6520, CRL_REG_LEN_08BIT, 0x00},
+	{0x6521, CRL_REG_LEN_08BIT, 0x04},
+	{0x6522, CRL_REG_LEN_08BIT, 0x05},
+	{0x6523, CRL_REG_LEN_08BIT, 0x00},
+	{0x6524, CRL_REG_LEN_08BIT, 0x05},
+	{0x6525, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6526, CRL_REG_LEN_08BIT, 0x03},
+	{0x6527, CRL_REG_LEN_08BIT, 0x9a},
+	{0x6528, CRL_REG_LEN_08BIT, 0x05},
+	{0x6529, CRL_REG_LEN_08BIT, 0x86},
+	{0x652a, CRL_REG_LEN_08BIT, 0x00},
+	{0x652b, CRL_REG_LEN_08BIT, 0x00},
+	{0x652c, CRL_REG_LEN_08BIT, 0x05},
+	{0x652d, CRL_REG_LEN_08BIT, 0x06},
+	{0x652e, CRL_REG_LEN_08BIT, 0x00},
+	{0x652f, CRL_REG_LEN_08BIT, 0x01},
+	{0x6530, CRL_REG_LEN_08BIT, 0x05},
+	{0x6531, CRL_REG_LEN_08BIT, 0x04},
+	{0x6532, CRL_REG_LEN_08BIT, 0x00},
+	{0x6533, CRL_REG_LEN_08BIT, 0x04},
+	{0x6534, CRL_REG_LEN_08BIT, 0x05},
+	{0x6535, CRL_REG_LEN_08BIT, 0x00},
+	{0x6536, CRL_REG_LEN_08BIT, 0x05},
+	{0x6537, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6538, CRL_REG_LEN_08BIT, 0x03},
+	{0x6539, CRL_REG_LEN_08BIT, 0x99},
+	{0x653a, CRL_REG_LEN_08BIT, 0x05},
+	{0x653b, CRL_REG_LEN_08BIT, 0x06},
+	{0x653c, CRL_REG_LEN_08BIT, 0x00},
+	{0x653d, CRL_REG_LEN_08BIT, 0x00},
+	{0x653e, CRL_REG_LEN_08BIT, 0x05},
+	{0x653f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6540, CRL_REG_LEN_08BIT, 0x00},
+	{0x6541, CRL_REG_LEN_08BIT, 0x04},
+	{0x6542, CRL_REG_LEN_08BIT, 0x05},
+	{0x6543, CRL_REG_LEN_08BIT, 0x00},
+	{0x6544, CRL_REG_LEN_08BIT, 0x05},
+	{0x6545, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6546, CRL_REG_LEN_08BIT, 0x03},
+	{0x6547, CRL_REG_LEN_08BIT, 0x98},
+	{0x6548, CRL_REG_LEN_08BIT, 0x05},
+	{0x6549, CRL_REG_LEN_08BIT, 0x06},
+	{0x654a, CRL_REG_LEN_08BIT, 0x00},
+	{0x654b, CRL_REG_LEN_08BIT, 0x00},
+	{0x654c, CRL_REG_LEN_08BIT, 0x05},
+	{0x654d, CRL_REG_LEN_08BIT, 0x04},
+	{0x654e, CRL_REG_LEN_08BIT, 0x00},
+	{0x654f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6550, CRL_REG_LEN_08BIT, 0x05},
+	{0x6551, CRL_REG_LEN_08BIT, 0x00},
+	{0x6552, CRL_REG_LEN_08BIT, 0x05},
+	{0x6553, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6554, CRL_REG_LEN_08BIT, 0x03},
+	{0x6555, CRL_REG_LEN_08BIT, 0x97},
+	{0x6556, CRL_REG_LEN_08BIT, 0x05},
+	{0x6557, CRL_REG_LEN_08BIT, 0x06},
+	{0x6558, CRL_REG_LEN_08BIT, 0x05},
+	{0x6559, CRL_REG_LEN_08BIT, 0x04},
+	{0x655a, CRL_REG_LEN_08BIT, 0x00},
+	{0x655b, CRL_REG_LEN_08BIT, 0x04},
+	{0x655c, CRL_REG_LEN_08BIT, 0x05},
+	{0x655d, CRL_REG_LEN_08BIT, 0x00},
+	{0x655e, CRL_REG_LEN_08BIT, 0x05},
+	{0x655f, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6560, CRL_REG_LEN_08BIT, 0x03},
+	{0x6561, CRL_REG_LEN_08BIT, 0x96},
+	{0x6562, CRL_REG_LEN_08BIT, 0x05},
+	{0x6563, CRL_REG_LEN_08BIT, 0x06},
+	{0x6564, CRL_REG_LEN_08BIT, 0x05},
+	{0x6565, CRL_REG_LEN_08BIT, 0x04},
+	{0x6566, CRL_REG_LEN_08BIT, 0x00},
+	{0x6567, CRL_REG_LEN_08BIT, 0x04},
+	{0x6568, CRL_REG_LEN_08BIT, 0x05},
+	{0x6569, CRL_REG_LEN_08BIT, 0x00},
+	{0x656a, CRL_REG_LEN_08BIT, 0x05},
+	{0x656b, CRL_REG_LEN_08BIT, 0x0a},
+	{0x656c, CRL_REG_LEN_08BIT, 0x03},
+	{0x656d, CRL_REG_LEN_08BIT, 0x95},
+	{0x656e, CRL_REG_LEN_08BIT, 0x05},
+	{0x656f, CRL_REG_LEN_08BIT, 0x06},
+	{0x6570, CRL_REG_LEN_08BIT, 0x05},
+	{0x6571, CRL_REG_LEN_08BIT, 0x04},
+	{0x6572, CRL_REG_LEN_08BIT, 0x00},
+	{0x6573, CRL_REG_LEN_08BIT, 0x04},
+	{0x6574, CRL_REG_LEN_08BIT, 0x05},
+	{0x6575, CRL_REG_LEN_08BIT, 0x00},
+	{0x6576, CRL_REG_LEN_08BIT, 0x05},
+	{0x6577, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6578, CRL_REG_LEN_08BIT, 0x03},
+	{0x6579, CRL_REG_LEN_08BIT, 0x94},
+	{0x657a, CRL_REG_LEN_08BIT, 0x05},
+	{0x657b, CRL_REG_LEN_08BIT, 0x06},
+	{0x657c, CRL_REG_LEN_08BIT, 0x00},
+	{0x657d, CRL_REG_LEN_08BIT, 0x00},
+	{0x657e, CRL_REG_LEN_08BIT, 0x05},
+	{0x657f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6580, CRL_REG_LEN_08BIT, 0x00},
+	{0x6581, CRL_REG_LEN_08BIT, 0x04},
+	{0x6582, CRL_REG_LEN_08BIT, 0x05},
+	{0x6583, CRL_REG_LEN_08BIT, 0x00},
+	{0x6584, CRL_REG_LEN_08BIT, 0x05},
+	{0x6585, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6586, CRL_REG_LEN_08BIT, 0x03},
+	{0x6587, CRL_REG_LEN_08BIT, 0x93},
+	{0x6588, CRL_REG_LEN_08BIT, 0x05},
+	{0x6589, CRL_REG_LEN_08BIT, 0x06},
+	{0x658a, CRL_REG_LEN_08BIT, 0x00},
+	{0x658b, CRL_REG_LEN_08BIT, 0x00},
+	{0x658c, CRL_REG_LEN_08BIT, 0x05},
+	{0x658d, CRL_REG_LEN_08BIT, 0x04},
+	{0x658e, CRL_REG_LEN_08BIT, 0x00},
+	{0x658f, CRL_REG_LEN_08BIT, 0x04},
+	{0x6590, CRL_REG_LEN_08BIT, 0x05},
+	{0x6591, CRL_REG_LEN_08BIT, 0x00},
+	{0x6592, CRL_REG_LEN_08BIT, 0x05},
+	{0x6593, CRL_REG_LEN_08BIT, 0x0a},
+	{0x6594, CRL_REG_LEN_08BIT, 0x03},
+	{0x6595, CRL_REG_LEN_08BIT, 0x92},
+	{0x6596, CRL_REG_LEN_08BIT, 0x05},
+	{0x6597, CRL_REG_LEN_08BIT, 0x06},
+	{0x6598, CRL_REG_LEN_08BIT, 0x05},
+	{0x6599, CRL_REG_LEN_08BIT, 0x04},
+	{0x659a, CRL_REG_LEN_08BIT, 0x00},
+	{0x659b, CRL_REG_LEN_08BIT, 0x04},
+	{0x659c, CRL_REG_LEN_08BIT, 0x05},
+	{0x659d, CRL_REG_LEN_08BIT, 0x00},
+	{0x659e, CRL_REG_LEN_08BIT, 0x05},
+	{0x659f, CRL_REG_LEN_08BIT, 0x0a},
+	{0x65a0, CRL_REG_LEN_08BIT, 0x03},
+	{0x65a1, CRL_REG_LEN_08BIT, 0x91},
+	{0x65a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x65a3, CRL_REG_LEN_08BIT, 0x06},
+	{0x65a4, CRL_REG_LEN_08BIT, 0x05},
+	{0x65a5, CRL_REG_LEN_08BIT, 0x04},
+	{0x65a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x65a7, CRL_REG_LEN_08BIT, 0x04},
+	{0x65a8, CRL_REG_LEN_08BIT, 0x05},
+	{0x65a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x65aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x65ab, CRL_REG_LEN_08BIT, 0x0a},
+	{0x65ac, CRL_REG_LEN_08BIT, 0x03},
+	{0x65ad, CRL_REG_LEN_08BIT, 0x90},
+	{0x65ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x65af, CRL_REG_LEN_08BIT, 0x06},
+	{0x65b0, CRL_REG_LEN_08BIT, 0x05},
+	{0x65b1, CRL_REG_LEN_08BIT, 0x04},
+	{0x65b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x65b3, CRL_REG_LEN_08BIT, 0x04},
+	{0x65b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x65b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x65b6, CRL_REG_LEN_08BIT, 0x05},
+	{0x65b7, CRL_REG_LEN_08BIT, 0x0a},
+	{0x65b8, CRL_REG_LEN_08BIT, 0x02},
+	{0x65b9, CRL_REG_LEN_08BIT, 0x90},
+	{0x65ba, CRL_REG_LEN_08BIT, 0x05},
+	{0x65bb, CRL_REG_LEN_08BIT, 0x06},
+	{0x65bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x65bd, CRL_REG_LEN_08BIT, 0xff},
+	{0x65be, CRL_REG_LEN_08BIT, 0x04},
+	{0x65bf, CRL_REG_LEN_08BIT, 0x70},
+	{0x65c0, CRL_REG_LEN_08BIT, 0x08},
+	{0x65c1, CRL_REG_LEN_08BIT, 0x76},
+	{0x65c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x65c3, CRL_REG_LEN_08BIT, 0xff},
+	{0x65c4, CRL_REG_LEN_08BIT, 0x08},
+	{0x65c5, CRL_REG_LEN_08BIT, 0x76},
+	{0x65c6, CRL_REG_LEN_08BIT, 0x04},
+	{0x65c7, CRL_REG_LEN_08BIT, 0x0c},
+	{0x65c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x65c9, CRL_REG_LEN_08BIT, 0x07},
+	{0x65ca, CRL_REG_LEN_08BIT, 0x04},
+	{0x65cb, CRL_REG_LEN_08BIT, 0x04},
+	{0x65cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x65cd, CRL_REG_LEN_08BIT, 0xff},
+	{0x65ce, CRL_REG_LEN_08BIT, 0x00},
+	{0x65cf, CRL_REG_LEN_08BIT, 0xff},
+	{0x65d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x65d1, CRL_REG_LEN_08BIT, 0xff},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x7f},
+	{0x303c, CRL_REG_LEN_08BIT, 0xfe},
+	{0x303d, CRL_REG_LEN_08BIT, 0x19},
+	{0x303e, CRL_REG_LEN_08BIT, 0xd7},
+	{0x303f, CRL_REG_LEN_08BIT, 0x09},
+	{0x3040, CRL_REG_LEN_08BIT, 0x78},
+	{0x3042, CRL_REG_LEN_08BIT, 0x05},
+	{0x328a, CRL_REG_LEN_08BIT, 0x10},
+};
+
+static struct crl_register_write_rep ov10640_streamon_regs[] = {
+	{OV10640_REG_STREAM, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep ov10640_streamoff_regs[] = {
+	{OV10640_REG_STREAM, CRL_REG_LEN_08BIT, 0x00},
+};
+
+static struct crl_arithmetic_ops ov10640_ls2_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	}
+};
+
+static struct crl_dynamic_register_access ov10640_h_flip_regs[] = {
+	{
+		.address = 0x3090,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov10640_ls2_ops),
+		.ops = ov10640_ls2_ops,
+		.mask = 0x04,
+	}
+};
+
+static struct crl_arithmetic_ops ov10640_ls3_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 3,
+	}
+};
+
+static struct crl_dynamic_register_access ov10640_v_flip_regs[] = {
+	{
+		.address = 0x3090,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov10640_ls3_ops),
+		.ops = ov10640_ls3_ops,
+		.mask = 0x08,
+	}
+};
+
+static struct crl_arithmetic_ops ov10640_hsb_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	}
+};
+
+static struct crl_dynamic_register_access ov10640_llp_regs[] = {
+	{
+		.address = 0x3080,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3081,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov10640_fll_regs[] = {
+	{
+		.address = 0x3082,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3083,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov10640_ana_gain_regs[] = {
+	{
+		.address = 0x30EB,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	}
+};
+
+/* Long digital gain register */
+static struct crl_dynamic_register_access ov10640_gl_regs[] = {
+	{
+		.address = 0x30EC, /* High Byte */
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0x3f,
+	},
+	{
+		.address = 0x30ED, /* Low Byte */
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_arithmetic_ops ov10640_ls1_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	}
+};
+
+static struct crl_arithmetic_ops ov10640_ls5_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 5,
+	}
+};
+
+/* enable ae debug */
+static struct crl_dynamic_register_access ov10640_ae_debug_regs[] = {
+	{
+		.address = 0x30FA,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov10640_ls5_ops),
+		.ops = ov10640_ls5_ops,
+		.mask = 0x60,
+	},
+};
+
+/* Short digital gain register */
+static struct crl_dynamic_register_access ov10640_gs_regs[] = {
+	{
+		.address = 0x30EE,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0x3f,
+	},
+	{
+		.address = 0x30EF,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* Very short digital gain register */
+static struct crl_dynamic_register_access ov10640_gvs_regs[] = {
+	{
+		.address = 0x30F0,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0x3f,
+	},
+	{
+		.address = 0x30F1,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* Long exposure register, also used in linear(non-HDR) mode */
+static struct crl_dynamic_register_access ov10640_el_regs[] = {
+	{
+		.address = 0x30E6, /* High Byte */
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30E7, /* Low Byte */
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* Short exposure register */
+static struct crl_dynamic_register_access ov10640_es_regs[] = {
+	{
+		.address = 0x30E8,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_hsb_ops),
+		.ops = ov10640_hsb_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30E9,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* Very short exposure register */
+static struct crl_dynamic_register_access ov10640_evs_regs[] = {
+	{
+		.address = 0x30EA,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* MSB register */
+static struct crl_dynamic_register_access ov10640_msb_regs[] = {
+	{
+		.address = 0x328a,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov10640_ls1_ops),
+		.ops = ov10640_ls1_ops,
+		.mask = 0x02,
+	},
+};
+
+/* Needed for acpi support for runtime detection */
+static struct crl_sensor_detect_config ov10640_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 8,
+	},
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 8,
+	},
+};
+
+/* ctrl-val == 1 ? (1 * 0x0F + 0x45) : (0 * 0x0F + 0x45) -> 0x54 and 0x45 */
+static struct crl_arithmetic_ops ov10640_wdr_ops[] = {
+	{
+		.op = CRL_MULTIPLY,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x0F,
+	},
+	{
+		.op = CRL_ADD,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x45,
+	}
+};
+
+static struct crl_dynamic_register_access ov10640_wdr_regs[] = {
+	{ 0x3119, CRL_REG_LEN_08BIT, 0xff,
+		ARRAY_SIZE(ov10640_wdr_ops),
+		ov10640_wdr_ops, 0 },
+};
+
+static struct crl_arithmetic_ops ov10640_linear_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_REG_VAL,
+		.operand.entity_val = 0x31BE,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 0x01,
+	},
+};
+
+static struct crl_dynamic_register_access ov10640_linear_regs[] = {
+	{
+		.address = 0x31BE,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov10640_linear_ops),
+		.ops = ov10640_linear_ops,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_pll_configuration ov10640_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 72000000, /* Ignore the value here, no use */
+		.pixel_rate_pa = 72000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(ov10640_pll_800mbps),
+		.pll_regs = ov10640_pll_800mbps,
+	}
+};
+
+static struct crl_subdev_rect_rep ov10640_1280_1080_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = {0, 0, 1280, 1080},
+		.out_rect = {0, 0, 1280, 1080},
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = {0, 0, 1280, 1080},
+		.out_rect = {0, 0, 1280, 1080},
+	}
+};
+
+static struct crl_subdev_rect_rep ov10640_1280_1088_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = {0, 0, 1280, 1088},
+		.out_rect = {0, 0, 1280, 1088},
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = {0, 0, 1280, 1088},
+		.out_rect = {0, 0, 1280, 1088},
+	}
+};
+
+static struct crl_mode_rep ov10640_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10640_1280_1080_rects),
+		.sd_rects = ov10640_1280_1080_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 1080,
+		.min_llp = 2000,
+		.min_fll = 1200,
+		.mode_regs_items = ARRAY_SIZE(ov10640_1280_1080_LONG_RAW),
+		.mode_regs = ov10640_1280_1080_LONG_RAW,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10640_1280_1088_rects),
+		.sd_rects = ov10640_1280_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 1088,
+		.min_llp = 2000,
+		.min_fll = 1200,
+		.mode_regs_items = ARRAY_SIZE(ov10640_1280_1088_LONG_RAW),
+		.mode_regs = ov10640_1280_1088_LONG_RAW,
+	},
+};
+
+static struct crl_sensor_subdev_config ov10640_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov10640 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov10640 pixel array",
+	}
+};
+
+static struct crl_sensor_limits ov10640_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1280,
+	.y_addr_max = 1088,
+	.min_frame_length_lines = 320,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 380,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data ov10640_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	}
+};
+
+static struct crl_csi_data_fmt ov10640_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	}
+};
+
+static struct crl_v4l2_ctrl ov10640_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_h_flip_regs),
+		.regs = ov10640_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_v_flip_regs),
+		.regs = ov10640_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1280,
+		.data.std_data.max = OV10640_HMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 2000,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_llp_regs),
+		.regs = ov10640_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1088,
+		.data.std_data.max = OV10640_VMAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1200,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_fll_regs),
+		.regs = ov10640_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 160,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_ana_gain_regs),
+		.regs = ov10640_ana_gain_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_AUTO_EXPOSURE_DEBUG,
+		.name = "CRL_CID_AUTO_EXPOSURE_DEBUG",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 3,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_ae_debug_regs),
+		.regs = ov10640_ae_debug_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 1,
+		.data.std_data.max = OV10640_MAX_SHS1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x040,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_el_regs),
+		.regs = ov10640_el_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = OV10640_MAX_DGAIN,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x100,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_gl_regs),
+		.regs = ov10640_gl_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_S,
+		.name = "CRL_CID_DIGITAL_GAIN_S",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = OV10640_MAX_DGAIN,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x100,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_gs_regs),
+		.regs = ov10640_gs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_VS,
+		.name = "CRL_CID_DIGITAL_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = OV10640_MAX_DGAIN,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x100,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_gvs_regs),
+		.regs = ov10640_gvs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_STREAMING,
+		.ctrl_id = CRL_CID_SENSOR_BIT_LINEAR,
+		.name = "Sensor bit linear",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_VOLATILE | V4L2_CTRL_FLAG_READ_ONLY,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_linear_regs),
+		.regs = ov10640_linear_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_MSB_ALIGN,
+		.name = "CRL_CID_MSB_ALIGN",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_msb_regs),
+		.regs = ov10640_msb_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.name = "CRL_CID_EXPOSURE_SHS1",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1,
+		.data.std_data.max = OV10640_MAX_SHS1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_es_regs),
+		.regs = ov10640_es_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS3,
+		.name = "CRL_CID_EXPOSURE_SHS3",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x11,
+		.data.std_data.max = OV10640_MAX_SHS3,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x20,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_evs_regs),
+		.regs = ov10640_evs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_WDR_MODE,
+		.name = "V4L2_CID_WDR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10640_wdr_regs),
+		.regs = ov10640_wdr_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+#define OV10640_OTP_BLANK0_START_ADDR 0x349E
+#define OV10640_OTP_BLANK0_END_ADDR 0x34AD
+#define OV10640_OTP_BLANK1_START_ADDR 0x34AE
+#define OV10640_OTP_BLANK1_END_ADDR 0x34BD
+#define OV10640_OTP_BLANK0_LEN (OV10640_OTP_BLANK0_END_ADDR - \
+		OV10640_OTP_BLANK0_START_ADDR + 1)
+#define OV10640_OTP_BLANK1_LEN (OV10640_OTP_BLANK1_END_ADDR -  \
+		OV10640_OTP_BLANK1_START_ADDR + 1)
+
+static struct crl_register_write_rep ov10640_nvm_preop_regset[] = {
+	/* Start streaming */
+	{OV10640_REG_STREAM, CRL_REG_LEN_08BIT, 0x01},
+	/* clear blank 0 data registers buffer */
+	{ 0x349E, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x349F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34A9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34AA, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34AB, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34AC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34AD, CRL_REG_LEN_08BIT, 0x00 },
+	/* set registers buffer range */
+	{ 0x3496, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3497, CRL_REG_LEN_08BIT, 0x0F },
+	/* select blank 0 */
+	{ 0x3495, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x00, 0x00, 0x01 },
+	/* enable read strobe */
+	{ 0x349C, CRL_REG_LEN_08BIT, 0x01 },
+	/* Wait for the data to load into the buffer */
+	{ 0x0000, CRL_REG_LEN_DELAY, 25 },
+
+	/* clear blank 1 data registers buffer */
+	{ 0x34AE, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34AF, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34B9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34BA, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34BB, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34BC, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x34BD, CRL_REG_LEN_08BIT, 0x00 },
+	/* set registers buffer range */
+	{ 0x3496, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3497, CRL_REG_LEN_08BIT, 0x0F },
+	/* select blank 1 */
+	{ 0x3495, CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE, 0x01, 0x00, 0x01 },
+	/* enable read strobe */
+	{ 0x349C, CRL_REG_LEN_08BIT, 0x01 },
+	/* Wait for the data to load into the buffer */
+	{ 0x0000, CRL_REG_LEN_DELAY, 25 },
+};
+
+static struct crl_register_write_rep ov10640_nvm_postop_regset[] = {
+	{OV10640_REG_STREAM, CRL_REG_LEN_08BIT, 0x00} /* Stop streaming */
+};
+
+static struct crl_nvm_blob ov10640_nvm_blobs[] = {
+	{CRL_I2C_ADDRESS_NO_OVERRIDE, OV10640_OTP_BLANK0_START_ADDR, OV10640_OTP_BLANK0_LEN},
+	{CRL_I2C_ADDRESS_NO_OVERRIDE, OV10640_OTP_BLANK1_START_ADDR, OV10640_OTP_BLANK1_LEN},
+};
+
+struct crl_sensor_configuration ov10640_crl_configuration = {
+	.powerup_regs_items = ARRAY_SIZE(ov10640_powerup_standby),
+	.powerup_regs = ov10640_powerup_standby,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.power_items = ARRAY_SIZE(ov10640_power_items),
+	.power_entities = ov10640_power_items,
+
+	.id_reg_items = ARRAY_SIZE(ov10640_sensor_detect_regset),
+	.id_regs = ov10640_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov10640_sensor_subdevs),
+	.subdevs = ov10640_sensor_subdevs,
+
+	.sensor_limits = &ov10640_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov10640_pll_configurations),
+	.pll_configs = ov10640_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov10640_modes),
+	.modes = ov10640_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov10640_streamon_regs),
+	.streamon_regs = ov10640_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov10640_streamoff_regs),
+	.streamoff_regs = ov10640_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov10640_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov10640_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov10640_crl_csi_data_fmt),
+	.csi_fmts = ov10640_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov10640_flip_configurations),
+	.flip_data = ov10640_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_8BIT,
+	.crl_nvm_info.nvm_preop_regs_items =
+		ARRAY_SIZE(ov10640_nvm_preop_regset),
+	.crl_nvm_info.nvm_preop_regs = ov10640_nvm_preop_regset,
+	.crl_nvm_info.nvm_postop_regs_items =
+		ARRAY_SIZE(ov10640_nvm_postop_regset),
+	.crl_nvm_info.nvm_postop_regs = ov10640_nvm_postop_regset,
+	.crl_nvm_info.nvm_blobs_items = ARRAY_SIZE(ov10640_nvm_blobs),
+	.crl_nvm_info.nvm_config = ov10640_nvm_blobs,
+};
+
+#endif  /* __CRLMODULE_OV10640_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov13860_configuration.h b/drivers/media/i2c/crlmodule/crl_ov13860_configuration.h
new file mode 100644
index 000000000000..5b701f44fea3
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov13860_configuration.h
@@ -0,0 +1,1537 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation
+ *
+ * Author: Kamal Ramamoorthy <kamalanathan.ramamoorthy@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV13860_CONFIGURATION_H_
+#define __CRLMODULE_OV13860_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep ov13860_pll_600mbps[] = {
+	{ 0x0300, CRL_REG_LEN_08BIT, 0x00 },/* pll1_pre_div = default*/
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x00 },/* pll1_multiplier Bit[8-9] = default */
+	{ 0x0302, CRL_REG_LEN_08BIT, 0x32 },/* pll1_multiplier Bit[0-7] = default */
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x01 },/* pll1_divm = /(1 + 1) */
+	{ 0x0304, CRL_REG_LEN_08BIT, 0x07 },/* pll1_div_mipi = default */
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x01 },/* pll1 pix clock div */
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },/* pll1 sys clock div */
+	{ 0x0308, CRL_REG_LEN_08BIT, 0x00 },/* pll1 bypass = default */
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x01 },/* pll1 cp = default */
+	{ 0x030A, CRL_REG_LEN_08BIT, 0x00 },/* pll1 ctr = default */
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x00 },/* pll2_pre_div = default */
+	{ 0x030c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x28 },/* pll2_r_divp = default */
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x02 },/* pll2_r_divs = default */
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x07 },/* pll2_r_divsp = default */
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x01 },/* pll2_cp = default */
+	{ 0x0311, CRL_REG_LEN_08BIT, 0x00 },/* pll2_cp = default */
+	{ 0x0312, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0313, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x031B, CRL_REG_LEN_08BIT, 0x00 },/* pll1 rst = default */
+	{ 0x031C, CRL_REG_LEN_08BIT, 0x00 },/* pll2 rst = default */
+	{ 0x031E, CRL_REG_LEN_08BIT, 0x01 },/* pll ctr::mipi_bitsel_man = 1 */
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x1a },/* pclk period */
+};
+
+static struct crl_register_write_rep ov13860_pll_1200mbps[] = {
+	{ 0x0300, CRL_REG_LEN_08BIT, 0x00 },/* pll1_pre_div = default*/
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x00 },/* pll1_multiplier Bit[8-9] = default */
+	{ 0x0302, CRL_REG_LEN_08BIT, 0x32 },/* pll1_multiplier Bit[0-7] = default */
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x00 },/* pll1_divm = /(1 + 0) */
+	{ 0x0304, CRL_REG_LEN_08BIT, 0x07 },/* pll1_div_mipi = default */
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x01 },/* pll1 pix clock div */
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },/* pll1 sys clock div */
+	{ 0x0308, CRL_REG_LEN_08BIT, 0x00 },/* pll1 bypass = default */
+	{ 0x0309, CRL_REG_LEN_08BIT, 0x01 },/* pll1 cp = default */
+	{ 0x030A, CRL_REG_LEN_08BIT, 0x00 },/* pll1 ctr = default */
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x00 },/* pll2_pre_div = default */
+	{ 0x030c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x28 },/* pll2_r_divp = default */
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x02 },/* pll2_r_divs = default */
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x07 },/* pll2_r_divsp = default */
+	{ 0x0310, CRL_REG_LEN_08BIT, 0x01 },/* pll2_cp = default */
+	{ 0x0311, CRL_REG_LEN_08BIT, 0x00 },/* pll2_cp = default */
+	{ 0x0312, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0313, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x031B, CRL_REG_LEN_08BIT, 0x00 },/* pll1 rst = default */
+	{ 0x031C, CRL_REG_LEN_08BIT, 0x00 },/* pll2 rst = default */
+	{ 0x031E, CRL_REG_LEN_08BIT, 0x01 },/* pll ctr::mipi_bitsel_man = 1 */
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x0d },/* pclk period */
+};
+
+static struct crl_register_write_rep ov13860_powerup_regset[] = {
+	{ 0x3010, CRL_REG_LEN_08BIT, 0x01 }, /* MIPI PHY1 = 1 */
+
+	/*
+	 * MIPI sc ctrl = 1
+	 * Bit [7:4] num lane
+	 * Bit [0] phy pad enable
+	*/
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x21 },
+
+	{ 0x340C, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x340D, CRL_REG_LEN_08BIT, 0xff },
+
+	/*
+	 * R Manual
+	 * Bit 0:aec_manual, Bit 1:acg_manual, Bit 2 vts manual
+	 * Bit 4:delay option, Bit 5:gain delay option
+	 */
+	{ 0x3503, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x3507, CRL_REG_LEN_08BIT, 0x00 },/* MEC Median Exposure Bit[15:8] */
+	{ 0x3508, CRL_REG_LEN_08BIT, 0x00 },/* MEC Median Exposure Bit[7:8] */
+
+	{ 0x3509, CRL_REG_LEN_08BIT, 0x12 },/* R CTRL9 = default */
+
+	{ 0x350A, CRL_REG_LEN_08BIT, 0x00 },/* MEC Long gain [10:8] */
+	{ 0x350B, CRL_REG_LEN_08BIT, 0xff },/* MEC Long gain [7:0] */
+
+	{ 0x350F, CRL_REG_LEN_08BIT, 0x10 },/* Median gain [7:0] */
+
+	{ 0x3541, CRL_REG_LEN_08BIT, 0x02 },/* MEC Short exposure [15:8] */
+	{ 0x3542, CRL_REG_LEN_08BIT, 0x00 },/* Median gain [7:0] */
+	{ 0x3543, CRL_REG_LEN_08BIT, 0x00 },/* Magic */
+
+	/*
+	 * HDR related setting
+	 */
+	{ 0x3547, CRL_REG_LEN_08BIT, 0x00 },/* Very short exposure */
+	{ 0x3548, CRL_REG_LEN_08BIT, 0x00 },/* Very short exposure */
+	{ 0x3549, CRL_REG_LEN_08BIT, 0x12 },/* Magic */
+	{ 0x354B, CRL_REG_LEN_08BIT, 0x10 },/* MEC short gain [7:0] */
+	{ 0x354F, CRL_REG_LEN_08BIT, 0x10 },/* MEC very short gain [7:0] */
+
+	/* Analog setting control */
+	{ 0x3600, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x3601, CRL_REG_LEN_08BIT, 0xd4 },
+	{ 0x3603, CRL_REG_LEN_08BIT, 0x97 },
+	{ 0x3604, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x360A, CRL_REG_LEN_08BIT, 0x35 },
+	{ 0x360C, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x360D, CRL_REG_LEN_08BIT, 0x53 },
+	{ 0x3618, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3620, CRL_REG_LEN_08BIT, 0x55 },
+	{ 0x3622, CRL_REG_LEN_08BIT, 0x8C },
+	{ 0x3623, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3628, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3660, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x3662, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3663, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3664, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x366B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3701, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3702, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3703, CRL_REG_LEN_08BIT, 0x3B },
+	{ 0x3704, CRL_REG_LEN_08BIT, 0x26 },
+	{ 0x3705, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3706, CRL_REG_LEN_08BIT, 0x3F },
+	{ 0x3708, CRL_REG_LEN_08BIT, 0x3C },
+	{ 0x3709, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x370E, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x3710, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3712, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x3714, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3717, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3719, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x371E, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x371F, CRL_REG_LEN_08BIT, 0x7F },
+	{ 0x3720, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3721, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x3726, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x3727, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x3728, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3729, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x372A, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x372B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x372E, CRL_REG_LEN_08BIT, 0x2B },
+	{ 0x3730, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3731, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3732, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3733, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3734, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3735, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3736, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3737, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3744, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3745, CRL_REG_LEN_08BIT, 0x5E },
+	{ 0x3746, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3747, CRL_REG_LEN_08BIT, 0x1F },
+	{ 0x3748, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x374A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3760, CRL_REG_LEN_08BIT, 0xD1 },
+	{ 0x3761, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x3762, CRL_REG_LEN_08BIT, 0x53 },
+	{ 0x3763, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3767, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x3768, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3769, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x376C, CRL_REG_LEN_08BIT, 0x43 },
+	{ 0x376D, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x376E, CRL_REG_LEN_08BIT, 0x53 },
+	{ 0x378C, CRL_REG_LEN_08BIT, 0x1F },
+	{ 0x378D, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x378F, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3790, CRL_REG_LEN_08BIT, 0x5A },
+	{ 0x3791, CRL_REG_LEN_08BIT, 0x5A },
+	{ 0x3792, CRL_REG_LEN_08BIT, 0x21 },
+	{ 0x3794, CRL_REG_LEN_08BIT, 0x71 },
+	{ 0x3796, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x379F, CRL_REG_LEN_08BIT, 0x3E },
+	{ 0x37A0, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x37A1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37A2, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x37A3, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x37A4, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37A5, CRL_REG_LEN_08BIT, 0xA9 },
+	{ 0x37B3, CRL_REG_LEN_08BIT, 0xDC },
+	{ 0x37B4, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0x37B7, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0x37B9, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x382A, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x382F, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0x3835, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3837, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3845, CRL_REG_LEN_08BIT, 0x10 },
+
+	{ 0x3D85, CRL_REG_LEN_08BIT, 0x16 },/* OTP_REGS */
+	{ 0x3D8C, CRL_REG_LEN_08BIT, 0x79 },/* OTP_REGS */
+	{ 0x3D8D, CRL_REG_LEN_08BIT, 0x7F },/* OTP_REGS */
+
+	{ 0x4000, CRL_REG_LEN_08BIT, 0x17 },/* BLC_00 */
+
+	/*
+	 * Magic Registers
+	 */
+	{ 0x400F, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4011, CRL_REG_LEN_08BIT, 0xFB },
+	{ 0x4017, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x401A, CRL_REG_LEN_08BIT, 0x0E },
+	{ 0x4020, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4024, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4026, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4028, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x402A, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x402C, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x402E, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4030, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4032, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4034, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4036, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4038, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x403A, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x403C, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x403E, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4052, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4053, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4054, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4055, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4056, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4057, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4058, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4059, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4202, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4203, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4d00, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x4d01, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x4d02, CRL_REG_LEN_08BIT, 0xCA },
+	{ 0x4d03, CRL_REG_LEN_08BIT, 0xD7 },
+	{ 0x4d04, CRL_REG_LEN_08BIT, 0xAE },
+	{ 0x4d05, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x4813, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4815, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x0D },
+	{ 0x486E, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x4B01, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4B06, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4C01, CRL_REG_LEN_08BIT, 0xDF },
+
+	/*
+	 * DSP control related registers required for RAW
+	 * Sensor path
+	 */
+	{ 0x5001, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x5002, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5003, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5004, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x5005, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x501D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x501F, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x5021, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5022, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x5058, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5200, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5209, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x520A, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x520B, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x520C, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x520E, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x5210, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x5211, CRL_REG_LEN_08BIT, 0xA0 },
+	{ 0x5280, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5292, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5C80, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x5C81, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x5C82, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x5C83, CRL_REG_LEN_08BIT, 0x5F },
+	{ 0x5D00, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4001, CRL_REG_LEN_08BIT, 0x60 }, /* BLC control */
+
+	/*
+	 * Magic Registers
+	 */
+	{ 0x560F, CRL_REG_LEN_08BIT, 0xFC },
+	{ 0x5610, CRL_REG_LEN_08BIT, 0xF0 },
+	{ 0x5611, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x562F, CRL_REG_LEN_08BIT, 0xFC },
+	{ 0x5630, CRL_REG_LEN_08BIT, 0xF0 },
+	{ 0x5631, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x564F, CRL_REG_LEN_08BIT, 0xFC },
+	{ 0x5650, CRL_REG_LEN_08BIT, 0xF0 },
+	{ 0x5651, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x566F, CRL_REG_LEN_08BIT, 0xFC },
+	{ 0x5670, CRL_REG_LEN_08BIT, 0xF0 },
+	{ 0x5671, CRL_REG_LEN_08BIT, 0x10 },
+};
+
+static struct crl_register_write_rep ov13860_mode_13m[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x0D },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x88 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x23 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0xA0 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x10 },/* h_output_size high 4208 x 3120 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x70 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x0C },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x30 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x11 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x99 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x88 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x13 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x18 }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x03 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x04 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_8m[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x0D },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x88 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x23 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0xA0 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high 3264 x 2448 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xC0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x09 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x90 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x11 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x99 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x88 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x13 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x18 }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x03 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x04 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_4k2k[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x0D },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x88 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x23 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0xA0 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x10 },/* h_output_size high 4096 x 2160 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x08 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x70 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x11 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x99 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x88 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x13 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x18 }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x03 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x04 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_uhd[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x0D },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x88 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x23 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0xA0 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0F },/* h_output_size high 3840 x 2160 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x08 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x70 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x11 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x99 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x88 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x13 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x18 }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x03 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x04 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_6m[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x0D },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x88 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x23 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0xA0 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high 3264 x 1836 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xC0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x07 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x2C },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x11 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x00 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x99 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x88 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x13 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x18 }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x03 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x04 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_3m[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x06 },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0xB8 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x63 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0x90 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x08 },/* h_output_size high 2048 x 1536 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x06 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x00 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x31 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x02 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x40 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0xD9 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x48 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x09 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x0C }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x71 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_1952_1088[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x06 },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0xB8 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x63 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0x90 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },/* h_output_size high 1952 x 1088 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xA0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x04 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x40 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x31 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x02 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x40 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0xD9 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x48 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x09 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x0C }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x71 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_720[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x03 },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x44 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x63 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0x90 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x05 },/* h_output_size high 1280 x 720 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x02 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0xD0 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x31 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x02 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x40 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0xD9 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x48 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x09 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x0C }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x71 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_mode_480[] = {
+
+	/*
+	 * Exposure & Gain
+	 */
+	{ 0x3501, CRL_REG_LEN_08BIT, 0x03 },/* Long Exposure */
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x44 },/* Long Exposure */
+
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x63 },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0x90 },
+
+	/*
+	 * Windowing
+	 */
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x14 },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x10 },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8B },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x43 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x02 },/* h_output_size high 640 x 480 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x80 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x01 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0xE0 },/* v_output_size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* Manual horizontal window offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* Manual horizontal window offset low */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },/* Manual vertical window offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },/* Horizontal sub-sample odd inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x31 },/* Vertical sub-sample odd inc */
+	{ 0x383D, CRL_REG_LEN_08BIT, 0xFF },/* Vertical sub-sample odd inc */
+
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x02 },/* Binning */
+	{ 0x3842, CRL_REG_LEN_08BIT, 0x40 },/* Binning */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0xD9 },/* Binning */
+
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x0C }, /* ablc_use_num */
+	{ 0x383C, CRL_REG_LEN_08BIT, 0x48 }, /* Boundary Pix num */
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x09 }, /* Magic */
+	{ 0x4019, CRL_REG_LEN_08BIT, 0x0C }, /* Magic */
+	{ 0x4051, CRL_REG_LEN_08BIT, 0x01 }, /* Magic */
+	{ 0x4066, CRL_REG_LEN_08BIT, 0x02 }, /* Magic */
+
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x71 }, /* Magic */
+	{ 0x5204, CRL_REG_LEN_08BIT, 0x00 }, /* Magic */
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x80 }, /* Magic */
+};
+
+static struct crl_register_write_rep ov13860_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep ov13860_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_arithmetic_ops ov13860_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov13860_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_dynamic_register_access ov13860_v_flip_regs[] = {
+	{
+		.address = 0x3820,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov13860_vflip_ops),
+		.ops = ov13860_vflip_ops,
+		.mask = 0x2,
+	 },
+};
+
+static struct crl_dynamic_register_access ov13860_h_flip_regs[] = {
+	{
+		.address = 0x3821,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov13860_hflip_ops),
+		.ops = ov13860_hflip_ops,
+		.mask = 0x2,
+	 },
+};
+
+struct crl_register_write_rep ov13860_poweroff_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01  },
+};
+
+static struct crl_dynamic_register_access ov13860_ana_gain_global_regs[] = {
+	{
+		.address = 0x350A,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x7ff,
+	 },
+};
+
+static struct crl_dynamic_register_access ov13860_exposure_regs[] = {
+	{
+		.address = 0x3501,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	}
+};
+
+static struct crl_dynamic_register_access ov13860_vblank_regs[] = {
+	{
+		.address = 0x380E,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	 },
+};
+
+static struct crl_dynamic_register_access ov13860_hblank_regs[] = {
+	{
+		.address = 0x380C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	 },
+};
+
+static struct crl_sensor_detect_config ov13860_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+	{
+		.reg = { 0x300C, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+};
+
+static struct crl_pll_configuration ov13860_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 600000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 150000000,
+		.pixel_rate_pa = 240000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(ov13860_pll_1200mbps),
+		.pll_regs = ov13860_pll_1200mbps,
+	 },
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 300000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 75000000,
+		.pixel_rate_pa = 240000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(ov13860_pll_600mbps),
+		.pll_regs = ov13860_pll_600mbps,
+	 }
+};
+
+static struct crl_subdev_rect_rep ov13860_13m_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4208,
+		.out_rect.height = 3120,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_8m_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 2448,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_4k2k_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4096,
+		.out_rect.height = 2160,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_uhd_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3840,
+		.out_rect.height = 2160,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_6m_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 1836,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_3m_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 2048,
+		.out_rect.height = 1536,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_1952_1088_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1952,
+		.out_rect.height = 1088,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_720_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov13860_480_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 4224,
+		.out_rect.height = 3120,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 4224,
+		.in_rect.height = 3120,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 640,
+		.out_rect.height = 480,
+	 },
+};
+
+static struct crl_mode_rep ov13860_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov13860_13m_rects),
+		.sd_rects = ov13860_13m_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4208,
+		.height = 3120,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_13m),
+		.mode_regs = ov13860_mode_13m,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_8m_rects),
+		.sd_rects = ov13860_8m_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3280,
+		.height = 2448,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_8m),
+		.mode_regs = ov13860_mode_8m,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_4k2k_rects),
+		.sd_rects = ov13860_4k2k_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 4096,
+		.height = 2160,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_4k2k),
+		.mode_regs = ov13860_mode_4k2k,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_uhd_rects),
+		.sd_rects = ov13860_uhd_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3840,
+		.height = 2160,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_uhd),
+		.mode_regs = ov13860_mode_uhd,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_6m_rects),
+		.sd_rects = ov13860_6m_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3280,
+		.height = 1836,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_6m),
+		.mode_regs = ov13860_mode_6m,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_3m_rects),
+		.sd_rects = ov13860_3m_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 2048,
+		.height = 1536,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_3m),
+		.mode_regs = ov13860_mode_3m,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_1952_1088_rects),
+		.sd_rects = ov13860_1952_1088_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 1088,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_1952_1088),
+		.mode_regs = ov13860_mode_1952_1088,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_720_rects),
+		.sd_rects = ov13860_720_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_720),
+		.mode_regs = ov13860_mode_720,
+	 },
+		{
+		.sd_rects_items = ARRAY_SIZE(ov13860_480_rects),
+		.sd_rects = ov13860_480_rects,
+		.binn_hor = 2,
+		.binn_vert = 2,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov13860_mode_480),
+		.mode_regs = ov13860_mode_480,
+	 },
+};
+
+static struct crl_sensor_subdev_config ov13860_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov13860 binner",
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov13860 pixel array",
+	 },
+};
+
+static struct crl_sensor_limits ov13860_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 4224,
+	.y_addr_max = 3120,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 16,
+	.scaler_n_min = 16,
+	.scaler_n_max = 16,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data ov13860_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	 },
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	 },
+};
+
+static struct crl_csi_data_fmt ov13860_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = 0,
+	},
+};
+
+static struct crl_v4l2_ctrl ov13860_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+		{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov13860_ana_gain_global_regs),
+		.regs = ov13860_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov13860_exposure_regs),
+		.regs = ov13860_exposure_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov13860_h_flip_regs),
+		.regs = ov13860_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov13860_v_flip_regs),
+		.regs = ov13860_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VBLANK,
+		.name = "V4L2_CID_VBLANK",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov13860_vblank_regs),
+		.regs = ov13860_vblank_regs,
+		.dep_items = 0, /* FLL changed automatically */
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HBLANK,
+		.name = "V4L2_CID_HBLANK",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov13860_hblank_regs),
+		.regs = ov13860_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity ov13860_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+	},
+};
+
+struct crl_sensor_configuration ov13860_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov13860_power_items),
+	.power_entities = ov13860_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(ov13860_powerup_regset),
+	.powerup_regs = ov13860_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(ov13860_sensor_detect_regset),
+	.id_regs = ov13860_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov13860_sensor_subdevs),
+	.subdevs = ov13860_sensor_subdevs,
+
+	.sensor_limits = &ov13860_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov13860_pll_configurations),
+	.pll_configs = ov13860_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov13860_modes),
+	.modes = ov13860_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov13860_streamon_regs),
+	.streamon_regs = ov13860_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov13860_streamoff_regs),
+	.streamoff_regs = ov13860_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov13860_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov13860_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov13860_crl_csi_data_fmt),
+	.csi_fmts = ov13860_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov13860_flip_configurations),
+	.flip_data = ov13860_flip_configurations,
+};
+
+#endif  /* __CRLMODULE_OV13860_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov2740_configuration.h b/drivers/media/i2c/crlmodule/crl_ov2740_configuration.h
new file mode 100644
index 000000000000..1060d6b62f04
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov2740_configuration.h
@@ -0,0 +1,761 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Roy Yang <royx.yang@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV2740_CONFIGURATION_H_
+#define __CRLMODULE_OV2740_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep ov2740_powerup_regset[] = {
+	/*Reset*/
+	{0x0103, CRL_REG_LEN_08BIT, 0x01},
+	{0x0302, CRL_REG_LEN_08BIT, 0x4b},/* 26;1e */
+	{0x030d, CRL_REG_LEN_08BIT, 0x4b},/* 26;1e */
+	{0x030e, CRL_REG_LEN_08BIT, 0x02},
+	{0x030a, CRL_REG_LEN_08BIT, 0x01},
+	{0x0312, CRL_REG_LEN_08BIT, 0x11},/* 01 */
+	{0x3000, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x32},/* 12(2 lane for 32; 1lane for 12) */
+	{0x3031, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3080, CRL_REG_LEN_08BIT, 0x08},
+	{0x3083, CRL_REG_LEN_08BIT, 0xB4},
+	{0x3103, CRL_REG_LEN_08BIT, 0x00},
+	{0x3104, CRL_REG_LEN_08BIT, 0x01},
+	{0x3106, CRL_REG_LEN_08BIT, 0x01},
+	{0x3500, CRL_REG_LEN_08BIT, 0x00},
+	{0x3501, CRL_REG_LEN_08BIT, 0x44},
+	{0x3502, CRL_REG_LEN_08BIT, 0x40},
+	{0x3503, CRL_REG_LEN_08BIT, 0x88},
+	{0x3507, CRL_REG_LEN_08BIT, 0x00},
+	{0x3508, CRL_REG_LEN_08BIT, 0x00},
+	{0x3509, CRL_REG_LEN_08BIT, 0x80},
+	{0x350c, CRL_REG_LEN_08BIT, 0x00},
+	{0x350d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3511, CRL_REG_LEN_08BIT, 0x00},
+	{0x3512, CRL_REG_LEN_08BIT, 0x20},
+	{0x3632, CRL_REG_LEN_08BIT, 0x00},
+	{0x3633, CRL_REG_LEN_08BIT, 0x10},
+	{0x3634, CRL_REG_LEN_08BIT, 0x10},
+	{0x3635, CRL_REG_LEN_08BIT, 0x10},
+	{0x3645, CRL_REG_LEN_08BIT, 0x13},
+	{0x3646, CRL_REG_LEN_08BIT, 0x81},
+	{0x3636, CRL_REG_LEN_08BIT, 0x10},
+	{0x3651, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3656, CRL_REG_LEN_08BIT, 0x02},
+	{0x3659, CRL_REG_LEN_08BIT, 0x04},
+	{0x365a, CRL_REG_LEN_08BIT, 0xda},
+	{0x365b, CRL_REG_LEN_08BIT, 0xa2},
+	{0x365c, CRL_REG_LEN_08BIT, 0x04},
+	{0x365d, CRL_REG_LEN_08BIT, 0x1d},
+	{0x365e, CRL_REG_LEN_08BIT, 0x1a},
+	{0x3662, CRL_REG_LEN_08BIT, 0xd7},
+	{0x3667, CRL_REG_LEN_08BIT, 0x78},
+	{0x3669, CRL_REG_LEN_08BIT, 0x0a},
+	{0x366a, CRL_REG_LEN_08BIT, 0x92},
+	{0x3700, CRL_REG_LEN_08BIT, 0x54},
+	{0x3702, CRL_REG_LEN_08BIT, 0x10},
+	{0x3706, CRL_REG_LEN_08BIT, 0x42},
+	{0x3709, CRL_REG_LEN_08BIT, 0x30},
+	{0x370b, CRL_REG_LEN_08BIT, 0xc2},
+	{0x3714, CRL_REG_LEN_08BIT, 0x63},
+	{0x3715, CRL_REG_LEN_08BIT, 0x01},
+	{0x3716, CRL_REG_LEN_08BIT, 0x00},
+	{0x371a, CRL_REG_LEN_08BIT, 0x3e},
+	{0x3732, CRL_REG_LEN_08BIT, 0x0e},
+	{0x3733, CRL_REG_LEN_08BIT, 0x10},
+	{0x375f, CRL_REG_LEN_08BIT, 0x0e},
+	{0x3768, CRL_REG_LEN_08BIT, 0x30},
+	{0x3769, CRL_REG_LEN_08BIT, 0x44},
+	{0x376a, CRL_REG_LEN_08BIT, 0x22},
+	{0x377b, CRL_REG_LEN_08BIT, 0x20},
+	{0x377c, CRL_REG_LEN_08BIT, 0x00},
+	{0x377d, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3798, CRL_REG_LEN_08BIT, 0x00},
+	{0x37a1, CRL_REG_LEN_08BIT, 0x55},
+	{0x37a8, CRL_REG_LEN_08BIT, 0x6d},
+	{0x37c2, CRL_REG_LEN_08BIT, 0x04},
+	{0x37c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x37c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0x00},
+	{0x3804, CRL_REG_LEN_08BIT, 0x07},
+	{0x3805, CRL_REG_LEN_08BIT, 0x8f},
+	{0x3806, CRL_REG_LEN_08BIT, 0x04},
+	{0x3807, CRL_REG_LEN_08BIT, 0x47},
+	{0x3808, CRL_REG_LEN_08BIT, 0x07},
+	{0x3809, CRL_REG_LEN_08BIT, 0x88},
+	{0x380a, CRL_REG_LEN_08BIT, 0x04},
+	{0x380b, CRL_REG_LEN_08BIT, 0x40},
+	{0x380c, CRL_REG_LEN_08BIT, 0x08},
+	{0x380d, CRL_REG_LEN_08BIT, 0x70},
+	{0x380e, CRL_REG_LEN_08BIT, 0x04},
+	{0x380f, CRL_REG_LEN_08BIT, 0x56},
+	{0x3810, CRL_REG_LEN_08BIT, 0x00},
+	{0x3811, CRL_REG_LEN_08BIT, 0x04},
+	{0x3812, CRL_REG_LEN_08BIT, 0x00},
+	{0x3813, CRL_REG_LEN_08BIT, 0x04},
+	{0x3814, CRL_REG_LEN_08BIT, 0x01},
+	{0x3815, CRL_REG_LEN_08BIT, 0x01},
+	{0x3820, CRL_REG_LEN_08BIT, 0x80},
+	{0x3821, CRL_REG_LEN_08BIT, 0x46},
+	{0x3822, CRL_REG_LEN_08BIT, 0x84},
+	{0x3829, CRL_REG_LEN_08BIT, 0x00},
+	{0x382a, CRL_REG_LEN_08BIT, 0x01},
+	{0x382b, CRL_REG_LEN_08BIT, 0x01},
+	{0x3830, CRL_REG_LEN_08BIT, 0x04},
+	{0x3836, CRL_REG_LEN_08BIT, 0x01},
+	{0x3837, CRL_REG_LEN_08BIT, 0x08},
+	{0x3839, CRL_REG_LEN_08BIT, 0x01},
+	{0x383a, CRL_REG_LEN_08BIT, 0x00},
+	{0x383b, CRL_REG_LEN_08BIT, 0x08},
+	{0x383c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x4001, CRL_REG_LEN_08BIT, 0x20},
+	{0x4009, CRL_REG_LEN_08BIT, 0x07},
+	{0x4003, CRL_REG_LEN_08BIT, 0x10},
+	{0x4010, CRL_REG_LEN_08BIT, 0xe0},
+	{0x4016, CRL_REG_LEN_08BIT, 0x00},
+	{0x4017, CRL_REG_LEN_08BIT, 0x10},
+	{0x4044, CRL_REG_LEN_08BIT, 0x02},
+	{0x4304, CRL_REG_LEN_08BIT, 0x08},
+	{0x4307, CRL_REG_LEN_08BIT, 0x30},
+	{0x4320, CRL_REG_LEN_08BIT, 0x80},
+	{0x4322, CRL_REG_LEN_08BIT, 0x00},
+	{0x4323, CRL_REG_LEN_08BIT, 0x00},
+	{0x4324, CRL_REG_LEN_08BIT, 0x00},
+	{0x4325, CRL_REG_LEN_08BIT, 0x00},
+	{0x4326, CRL_REG_LEN_08BIT, 0x00},
+	{0x4327, CRL_REG_LEN_08BIT, 0x00},
+	{0x4328, CRL_REG_LEN_08BIT, 0x00},
+	{0x4329, CRL_REG_LEN_08BIT, 0x00},
+	{0x432c, CRL_REG_LEN_08BIT, 0x03},
+	{0x432d, CRL_REG_LEN_08BIT, 0x81},
+	{0x4501, CRL_REG_LEN_08BIT, 0x84},
+	{0x4502, CRL_REG_LEN_08BIT, 0x40},
+	{0x4503, CRL_REG_LEN_08BIT, 0x18},
+	{0x4504, CRL_REG_LEN_08BIT, 0x04},
+	{0x4508, CRL_REG_LEN_08BIT, 0x02},
+	{0x4601, CRL_REG_LEN_08BIT, 0x10},
+	{0x4800, CRL_REG_LEN_08BIT, 0x00},
+	{0x4816, CRL_REG_LEN_08BIT, 0x52},
+	{0x4837, CRL_REG_LEN_08BIT, 0x16},
+	{0x5000, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5001, CRL_REG_LEN_08BIT, 0x00},
+	{0x5005, CRL_REG_LEN_08BIT, 0x38},
+	{0x501e, CRL_REG_LEN_08BIT, 0x0d},
+	{0x5040, CRL_REG_LEN_08BIT, 0x00},
+	{0x5901, CRL_REG_LEN_08BIT, 0x00},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0x00},
+	{0x3804, CRL_REG_LEN_08BIT, 0x07},
+	{0x3805, CRL_REG_LEN_08BIT, 0x8f},
+	{0x3806, CRL_REG_LEN_08BIT, 0x04},
+	{0x3807, CRL_REG_LEN_08BIT, 0x47},
+	{0x3808, CRL_REG_LEN_08BIT, 0x07},
+	{0x3809, CRL_REG_LEN_08BIT, 0x8c},
+	{0x380a, CRL_REG_LEN_08BIT, 0x04},
+	{0x380b, CRL_REG_LEN_08BIT, 0x44},
+	{0x3810, CRL_REG_LEN_08BIT, 0x00},
+	{0x3811, CRL_REG_LEN_08BIT, 0x00},/* 00 */
+	{0x3812, CRL_REG_LEN_08BIT, 0x00},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},/* 00 */
+	{0x4003, CRL_REG_LEN_08BIT, 0x40},/* set Black level to 0x40 */
+};
+
+static struct crl_register_write_rep ov2740_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep ov2740_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep ov2740_data_fmt_width10[] = {
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x0a }
+};
+
+static struct crl_arithmetic_ops ov2740_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov2740_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov2740_hblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov2740_exposure_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	 },
+};
+
+static struct crl_dynamic_register_access ov2740_v_flip_regs[] = {
+	{
+		.address = 0x3820,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2740_vflip_ops),
+		.ops = ov2740_vflip_ops,
+		.mask = 0x1,
+	 },
+};
+
+static struct crl_dynamic_register_access ov2740_h_flip_regs[] = {
+	{
+		.address = 0x3821,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2740_hflip_ops),
+		.ops = ov2740_hflip_ops,
+		.mask = 0x1,
+	 },
+};
+
+static struct crl_dynamic_register_access ov2740_dig_gain_regs[] = {
+	{
+		.address = 0x500A,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+	{
+		.address = 0x500C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+	{
+		.address = 0x500E,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+struct crl_register_write_rep ov2740_poweroff_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01  },
+};
+
+static struct crl_dynamic_register_access ov2740_ana_gain_global_regs[] = {
+	{
+		.address = 0x3508,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x7ff,
+	 },
+};
+
+static struct crl_dynamic_register_access ov2740_exposure_regs[] = {
+	{
+		.address = 0x3500,
+		.len = CRL_REG_LEN_24BIT,
+		.ops_items = ARRAY_SIZE(ov2740_exposure_ops),
+		.ops = ov2740_exposure_ops,
+		.mask = 0x0ffff0,
+	 },
+};
+
+static struct crl_dynamic_register_access ov2740_vblank_regs[] = {
+	{
+		.address = 0x380E,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	 },
+};
+
+static struct crl_dynamic_register_access ov2740_hblank_regs[] = {
+	{
+		.address = 0x380C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = ARRAY_SIZE(ov2740_hblank_ops),
+		.ops = ov2740_hblank_ops,
+		.mask = 0xffff,
+	 },
+};
+
+static struct crl_sensor_detect_config ov2740_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+	{
+		.reg = { 0x300C, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+};
+
+static struct crl_pll_configuration ov2740_pll_configurations[] = {
+	{
+		.input_clk = 19200000,
+		.op_sys_clk = 72000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 28800000,
+		.pixel_rate_pa = 28800000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	 },
+
+};
+
+static struct crl_subdev_rect_rep ov2740_1932x1092_rects_native[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1932,
+		.in_rect.height = 1092,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1932,
+		.out_rect.height = 1092,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1932,
+		.in_rect.height = 1092,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1932,
+		.out_rect.height = 1092,
+	 },
+};
+
+static struct crl_mode_rep ov2740_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2740_1932x1092_rects_native),
+		.sd_rects = ov2740_1932x1092_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1932,
+		.height = 1092,
+		.min_llp = 2160,
+		.min_fll = 1110,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = 0,
+	},
+};
+
+static struct crl_sensor_subdev_config ov2740_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov2740 binner",
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov2740 pixel array",
+	 },
+};
+
+static struct crl_sensor_limits ov2740_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1932,
+	.y_addr_max = 1092,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 2160,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data ov2740_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	 },
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	 },
+};
+
+static struct crl_csi_data_fmt ov2740_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = ov2740_data_fmt_width10,
+	 },
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov2740_data_fmt_width10,
+	 },
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov2740_data_fmt_width10,
+	 },
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov2740_data_fmt_width10,
+	 },
+};
+
+static struct crl_v4l2_ctrl ov2740_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_ana_gain_global_regs),
+		.regs = ov2740_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_exposure_regs),
+		.regs = ov2740_exposure_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_h_flip_regs),
+		.regs = ov2740_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_v_flip_regs),
+		.regs = ov2740_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1110,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_vblank_regs),
+		.regs = ov2740_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 2160,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_hblank_regs),
+		.regs = ov2740_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4095,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1024,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2740_dig_gain_regs),
+		.regs = ov2740_dig_gain_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_WDR_MODE,
+		.name = "V4L2_CID_WDR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops ov2740_frame_desc_width_ops[] = {
+	{
+	 .op = CRL_ASSIGNMENT,
+	 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+	 .operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops ov2740_frame_desc_height_ops[] = {
+	{
+	 .op = CRL_ASSIGNMENT,
+	 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+	 .operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc ov2740_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(ov2740_frame_desc_width_ops),
+			 .ops = ov2740_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(ov2740_frame_desc_height_ops),
+			  .ops = ov2740_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity ov2740_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 19200000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 0,
+		.delay = 1000,
+	},
+};
+
+static struct crl_sensor_configuration ov2740_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov2740_power_items),
+	.power_entities = ov2740_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(ov2740_powerup_regset),
+	.powerup_regs = ov2740_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+
+	.id_reg_items = ARRAY_SIZE(ov2740_sensor_detect_regset),
+	.id_regs = ov2740_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov2740_sensor_subdevs),
+	.subdevs = ov2740_sensor_subdevs,
+
+	.sensor_limits = &ov2740_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov2740_pll_configurations),
+	.pll_configs = ov2740_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov2740_modes),
+	.modes = ov2740_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov2740_streamon_regs),
+	.streamon_regs = ov2740_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov2740_streamoff_regs),
+	.streamoff_regs = ov2740_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov2740_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov2740_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov2740_crl_csi_data_fmt),
+	.csi_fmts = ov2740_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov2740_flip_configurations),
+	.flip_data = ov2740_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_16BIT,
+	.crl_nvm_info.nvm_preop_regs_items = 0,
+	.crl_nvm_info.nvm_postop_regs_items = 0,
+	.crl_nvm_info.nvm_blobs_items = 0,
+
+	.frame_desc_entries = ARRAY_SIZE(ov2740_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = ov2740_frame_desc,
+
+	.msr_file_name = "",
+};
+
+#endif  /* __CRLMODULE_OV2740_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov2775_configuration.h b/drivers/media/i2c/crlmodule/crl_ov2775_configuration.h
new file mode 100644
index 000000000000..cffc0cccb865
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov2775_configuration.h
@@ -0,0 +1,8177 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2018 Intel Corporation
+ *
+ * Author: Leo Zhao <leo.zhao@intel.com>
+ * Author: Mingda Xu <mingda.xu@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV2775_CONFIGURATION_H_
+#define __CRLMODULE_OV2775_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+#define OV2775_CAPTURE_MODE_MAX 4
+
+static struct crl_register_write_rep
+	ov2775_linear_hcg_30fps_mipi960_regset[] = {
+	{0x3013, CRL_REG_LEN_08BIT, 0x01},
+	{0x3000, CRL_REG_LEN_08BIT, 0x02},
+	{0x3001, CRL_REG_LEN_08BIT, 0x28},
+	{0x3002, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x01},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},
+	{0x3005, CRL_REG_LEN_08BIT, 0x26},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x07},
+	{0x3008, CRL_REG_LEN_08BIT, 0x01},
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},
+	{0x300c, CRL_REG_LEN_08BIT, 0x6c},
+	{0x300e, CRL_REG_LEN_08BIT, 0x80},
+	{0x300f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3012, CRL_REG_LEN_08BIT, 0x00},
+	{0x3013, CRL_REG_LEN_08BIT, 0x00},
+	{0x3014, CRL_REG_LEN_08BIT, 0xc4},
+	{0x3015, CRL_REG_LEN_08BIT, 0x00},
+	{0x3017, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x00},
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},
+	{0x301a, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0x0e},
+	{0x301e, CRL_REG_LEN_08BIT, 0x17},
+	{0x301f, CRL_REG_LEN_08BIT, 0xe1},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x3031, CRL_REG_LEN_08BIT, 0x62},
+	{0x3032, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3033, CRL_REG_LEN_08BIT, 0x30},
+	{0x3034, CRL_REG_LEN_08BIT, 0x3f},
+	{0x3035, CRL_REG_LEN_08BIT, 0x5f},
+	{0x3036, CRL_REG_LEN_08BIT, 0x02},
+	{0x3037, CRL_REG_LEN_08BIT, 0x9f},
+	{0x3038, CRL_REG_LEN_08BIT, 0x04},
+	{0x3039, CRL_REG_LEN_08BIT, 0xb7},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x07},
+	{0x303c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x303d, CRL_REG_LEN_08BIT, 0x00},
+	{0x303e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x303f, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3040, CRL_REG_LEN_08BIT, 0xf3},
+	{0x3041, CRL_REG_LEN_08BIT, 0x29},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf6},
+	{0x3043, CRL_REG_LEN_08BIT, 0x65},
+	{0x3044, CRL_REG_LEN_08BIT, 0x06},
+	{0x3045, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3046, CRL_REG_LEN_08BIT, 0x59},
+	{0x3047, CRL_REG_LEN_08BIT, 0x07},
+	{0x3048, CRL_REG_LEN_08BIT, 0x82},
+	{0x3049, CRL_REG_LEN_08BIT, 0xcf},
+	{0x304a, CRL_REG_LEN_08BIT, 0x12},
+	{0x304b, CRL_REG_LEN_08BIT, 0x40},
+	{0x304c, CRL_REG_LEN_08BIT, 0x33},
+	{0x304d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x304e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x304f, CRL_REG_LEN_08BIT, 0x3d},
+	{0x3050, CRL_REG_LEN_08BIT, 0x10},
+	{0x3060, CRL_REG_LEN_08BIT, 0x00},
+	{0x3061, CRL_REG_LEN_08BIT, 0x64},
+	{0x3062, CRL_REG_LEN_08BIT, 0x00},
+	{0x3063, CRL_REG_LEN_08BIT, 0xe4},
+	{0x3066, CRL_REG_LEN_08BIT, 0x80},
+	{0x3080, CRL_REG_LEN_08BIT, 0x00},
+	{0x3081, CRL_REG_LEN_08BIT, 0x00},
+	{0x3082, CRL_REG_LEN_08BIT, 0x01},
+	{0x3083, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3084, CRL_REG_LEN_08BIT, 0x06},
+	{0x3085, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x10},
+	{0x3087, CRL_REG_LEN_08BIT, 0x10},
+	{0x3089, CRL_REG_LEN_08BIT, 0x00},
+	{0x308a, CRL_REG_LEN_08BIT, 0x01},
+	{0x3093, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a1, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x30a4, CRL_REG_LEN_08BIT, 0x07},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x8b},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x3f},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x04},
+	{0x30aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ac, CRL_REG_LEN_08BIT, 0x07},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x80},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x08},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x98},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x65},
+	{0x30b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x10},
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x30ba, CRL_REG_LEN_08BIT, 0x10},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x03},
+	{0x30be, CRL_REG_LEN_08BIT, 0x5c},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x20},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x4a},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d3, CRL_REG_LEN_08BIT, 0x80},
+	{0x30d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d9, CRL_REG_LEN_08BIT, 0x09},
+	{0x30da, CRL_REG_LEN_08BIT, 0x64},
+	{0x30dd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30de, CRL_REG_LEN_08BIT, 0x16},
+	{0x30df, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e0, CRL_REG_LEN_08BIT, 0x17},
+	{0x30e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e2, CRL_REG_LEN_08BIT, 0x18},
+	{0x30e3, CRL_REG_LEN_08BIT, 0x10},
+	{0x30e4, CRL_REG_LEN_08BIT, 0x04},
+	{0x30e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x30eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ec, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x3101, CRL_REG_LEN_08BIT, 0x00},
+	{0x3102, CRL_REG_LEN_08BIT, 0x00},
+	{0x3103, CRL_REG_LEN_08BIT, 0x00},
+	{0x3104, CRL_REG_LEN_08BIT, 0x00},
+	{0x3105, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3106, CRL_REG_LEN_08BIT, 0x87},
+	{0x3107, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3108, CRL_REG_LEN_08BIT, 0x9d},
+	{0x3109, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310a, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310b, CRL_REG_LEN_08BIT, 0x6a},
+	{0x310c, CRL_REG_LEN_08BIT, 0x3a},
+	{0x310d, CRL_REG_LEN_08BIT, 0x5a},
+	{0x310e, CRL_REG_LEN_08BIT, 0x00},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x00},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3123, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3124, CRL_REG_LEN_08BIT, 0x00},
+	{0x3125, CRL_REG_LEN_08BIT, 0x70},
+	{0x3126, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3127, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3128, CRL_REG_LEN_08BIT, 0x00},
+	{0x3129, CRL_REG_LEN_08BIT, 0x3a},
+	{0x312a, CRL_REG_LEN_08BIT, 0x02},
+	{0x312b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312c, CRL_REG_LEN_08BIT, 0x00},
+	{0x312d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312e, CRL_REG_LEN_08BIT, 0x1d},
+	{0x312f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3130, CRL_REG_LEN_08BIT, 0x00},
+	{0x3131, CRL_REG_LEN_08BIT, 0x00},
+	{0x3132, CRL_REG_LEN_08BIT, 0x00},
+	{0x3140, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3141, CRL_REG_LEN_08BIT, 0x03},
+	{0x3142, CRL_REG_LEN_08BIT, 0x00},
+	{0x3143, CRL_REG_LEN_08BIT, 0x00},
+	{0x3144, CRL_REG_LEN_08BIT, 0x00},
+	{0x3145, CRL_REG_LEN_08BIT, 0x00},
+	{0x3146, CRL_REG_LEN_08BIT, 0x00},
+	{0x3147, CRL_REG_LEN_08BIT, 0x00},
+	{0x3148, CRL_REG_LEN_08BIT, 0x00},
+	{0x3149, CRL_REG_LEN_08BIT, 0x00},
+	{0x314a, CRL_REG_LEN_08BIT, 0x00},
+	{0x314b, CRL_REG_LEN_08BIT, 0x00},
+	{0x314c, CRL_REG_LEN_08BIT, 0x00},
+	{0x314d, CRL_REG_LEN_08BIT, 0x00},
+	{0x314e, CRL_REG_LEN_08BIT, 0x1c},
+	{0x314f, CRL_REG_LEN_08BIT, 0xff},
+	{0x3150, CRL_REG_LEN_08BIT, 0xff},
+	{0x3151, CRL_REG_LEN_08BIT, 0xff},
+	{0x3152, CRL_REG_LEN_08BIT, 0x10},
+	{0x3153, CRL_REG_LEN_08BIT, 0x10},
+	{0x3154, CRL_REG_LEN_08BIT, 0x10},
+	{0x3155, CRL_REG_LEN_08BIT, 0x00},
+	{0x3156, CRL_REG_LEN_08BIT, 0x03},
+	{0x3157, CRL_REG_LEN_08BIT, 0x00},
+	{0x3158, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3159, CRL_REG_LEN_08BIT, 0xff},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3160, CRL_REG_LEN_08BIT, 0x01},
+	{0x3161, CRL_REG_LEN_08BIT, 0x00},
+	{0x3162, CRL_REG_LEN_08BIT, 0x01},
+	{0x3163, CRL_REG_LEN_08BIT, 0x00},
+	{0x3164, CRL_REG_LEN_08BIT, 0x01},
+	{0x3165, CRL_REG_LEN_08BIT, 0x00},
+	{0x3190, CRL_REG_LEN_08BIT, 0x08},
+	{0x3191, CRL_REG_LEN_08BIT, 0x99},
+	{0x3193, CRL_REG_LEN_08BIT, 0x08},
+	{0x3194, CRL_REG_LEN_08BIT, 0x13},
+	{0x3195, CRL_REG_LEN_08BIT, 0x33},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x10},
+	{0x3198, CRL_REG_LEN_08BIT, 0x00},
+	{0x3199, CRL_REG_LEN_08BIT, 0x7f},
+	{0x319a, CRL_REG_LEN_08BIT, 0x80},
+	{0x319b, CRL_REG_LEN_08BIT, 0xff},
+	{0x319c, CRL_REG_LEN_08BIT, 0x80},
+	{0x319d, CRL_REG_LEN_08BIT, 0xbf},
+	{0x319e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x319f, CRL_REG_LEN_08BIT, 0xff},
+	{0x31a0, CRL_REG_LEN_08BIT, 0x24},
+	{0x31a1, CRL_REG_LEN_08BIT, 0x55},
+	{0x31a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x31a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b2, CRL_REG_LEN_08BIT, 0x02},
+	{0x31b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b5, CRL_REG_LEN_08BIT, 0x01},
+	{0x31b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x31ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d0, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d1, CRL_REG_LEN_08BIT, 0x34},
+	{0x31d2, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d4, CRL_REG_LEN_08BIT, 0x2d},
+	{0x31d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x31d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x31d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d9, CRL_REG_LEN_08BIT, 0x64},
+	{0x31da, CRL_REG_LEN_08BIT, 0x00},
+	{0x31db, CRL_REG_LEN_08BIT, 0x30},
+	{0x31dc, CRL_REG_LEN_08BIT, 0x04},
+	{0x31dd, CRL_REG_LEN_08BIT, 0x69},
+	{0x31de, CRL_REG_LEN_08BIT, 0x0a},
+	{0x31df, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31e0, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e1, CRL_REG_LEN_08BIT, 0x32},
+	{0x31e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x08},
+	{0x31e5, CRL_REG_LEN_08BIT, 0x80},
+	{0x31e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e7, CRL_REG_LEN_08BIT, 0x2c},
+	{0x31e8, CRL_REG_LEN_08BIT, 0x6c},
+	{0x31e9, CRL_REG_LEN_08BIT, 0xac},
+	{0x31ea, CRL_REG_LEN_08BIT, 0xec},
+	{0x31eb, CRL_REG_LEN_08BIT, 0x3f},
+	{0x31ec, CRL_REG_LEN_08BIT, 0x0f},
+	{0x31ed, CRL_REG_LEN_08BIT, 0x20},
+	{0x31ee, CRL_REG_LEN_08BIT, 0x04},
+	{0x31ef, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f0, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f1, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f3, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f4, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f5, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f6, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f7, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f8, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f9, CRL_REG_LEN_08BIT, 0x90},
+	{0x31fa, CRL_REG_LEN_08BIT, 0x04},
+	{0x31fb, CRL_REG_LEN_08BIT, 0x48},
+	{0x31fd, CRL_REG_LEN_08BIT, 0xcb},
+	{0x31fe, CRL_REG_LEN_08BIT, 0x01},
+	{0x31ff, CRL_REG_LEN_08BIT, 0x03},
+	{0x3200, CRL_REG_LEN_08BIT, 0x00},
+	{0x3201, CRL_REG_LEN_08BIT, 0xff},
+	{0x3202, CRL_REG_LEN_08BIT, 0x00},
+	{0x3203, CRL_REG_LEN_08BIT, 0xff},
+	{0x3204, CRL_REG_LEN_08BIT, 0xff},
+	{0x3205, CRL_REG_LEN_08BIT, 0xff},
+	{0x3206, CRL_REG_LEN_08BIT, 0xff},
+	{0x3207, CRL_REG_LEN_08BIT, 0xff},
+	{0x3208, CRL_REG_LEN_08BIT, 0xff},
+	{0x3209, CRL_REG_LEN_08BIT, 0xff},
+	{0x320a, CRL_REG_LEN_08BIT, 0xff},
+	{0x320b, CRL_REG_LEN_08BIT, 0x1b},
+	{0x320c, CRL_REG_LEN_08BIT, 0x1f},
+	{0x320d, CRL_REG_LEN_08BIT, 0x1e},
+	{0x320e, CRL_REG_LEN_08BIT, 0x30},
+	{0x320f, CRL_REG_LEN_08BIT, 0x2d},
+	{0x3210, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3211, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3212, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3213, CRL_REG_LEN_08BIT, 0x24},
+	{0x3214, CRL_REG_LEN_08BIT, 0x22},
+	{0x3215, CRL_REG_LEN_08BIT, 0x00},
+	{0x3216, CRL_REG_LEN_08BIT, 0x04},
+	{0x3217, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3218, CRL_REG_LEN_08BIT, 0x6c},
+	{0x3219, CRL_REG_LEN_08BIT, 0xac},
+	{0x321a, CRL_REG_LEN_08BIT, 0xec},
+	{0x321b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3230, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3231, CRL_REG_LEN_08BIT, 0x00},
+	{0x3232, CRL_REG_LEN_08BIT, 0x80},
+	{0x3233, CRL_REG_LEN_08BIT, 0x00},
+	{0x3234, CRL_REG_LEN_08BIT, 0x10},
+	{0x3235, CRL_REG_LEN_08BIT, 0xaa},
+	{0x3236, CRL_REG_LEN_08BIT, 0x55},
+	{0x3237, CRL_REG_LEN_08BIT, 0x99},
+	{0x3238, CRL_REG_LEN_08BIT, 0x66},
+	{0x3239, CRL_REG_LEN_08BIT, 0x08},
+	{0x323a, CRL_REG_LEN_08BIT, 0x88},
+	{0x323b, CRL_REG_LEN_08BIT, 0x00},
+	{0x323c, CRL_REG_LEN_08BIT, 0x00},
+	{0x323d, CRL_REG_LEN_08BIT, 0x03},
+	{0x3250, CRL_REG_LEN_08BIT, 0x33},
+	{0x3251, CRL_REG_LEN_08BIT, 0x00},
+	{0x3252, CRL_REG_LEN_08BIT, 0x20},
+	{0x3253, CRL_REG_LEN_08BIT, 0x00},
+	{0x3254, CRL_REG_LEN_08BIT, 0x00},
+	{0x3255, CRL_REG_LEN_08BIT, 0x01},
+	{0x3256, CRL_REG_LEN_08BIT, 0x00},
+	{0x3257, CRL_REG_LEN_08BIT, 0x00},
+	{0x3258, CRL_REG_LEN_08BIT, 0x00},
+	{0x3270, CRL_REG_LEN_08BIT, 0x01},
+	{0x3271, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3272, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3273, CRL_REG_LEN_08BIT, 0x01},
+	{0x3274, CRL_REG_LEN_08BIT, 0x00},
+	{0x3275, CRL_REG_LEN_08BIT, 0x40},
+	{0x3276, CRL_REG_LEN_08BIT, 0x02},
+	{0x3277, CRL_REG_LEN_08BIT, 0x08},
+	{0x3278, CRL_REG_LEN_08BIT, 0x10},
+	{0x3279, CRL_REG_LEN_08BIT, 0x04},
+	{0x327a, CRL_REG_LEN_08BIT, 0x00},
+	{0x327b, CRL_REG_LEN_08BIT, 0x03},
+	{0x327c, CRL_REG_LEN_08BIT, 0x10},
+	{0x327d, CRL_REG_LEN_08BIT, 0x60},
+	{0x327e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x327f, CRL_REG_LEN_08BIT, 0x06},
+	{0x3288, CRL_REG_LEN_08BIT, 0x10},
+	{0x3289, CRL_REG_LEN_08BIT, 0x00},
+	{0x328a, CRL_REG_LEN_08BIT, 0x08},
+	{0x328b, CRL_REG_LEN_08BIT, 0x00},
+	{0x328c, CRL_REG_LEN_08BIT, 0x04},
+	{0x328d, CRL_REG_LEN_08BIT, 0x00},
+	{0x328e, CRL_REG_LEN_08BIT, 0x02},
+	{0x328f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3290, CRL_REG_LEN_08BIT, 0x20},
+	{0x3291, CRL_REG_LEN_08BIT, 0x00},
+	{0x3292, CRL_REG_LEN_08BIT, 0x10},
+	{0x3293, CRL_REG_LEN_08BIT, 0x00},
+	{0x3294, CRL_REG_LEN_08BIT, 0x08},
+	{0x3295, CRL_REG_LEN_08BIT, 0x00},
+	{0x3296, CRL_REG_LEN_08BIT, 0x04},
+	{0x3297, CRL_REG_LEN_08BIT, 0x00},
+	{0x3298, CRL_REG_LEN_08BIT, 0x40},
+	{0x3299, CRL_REG_LEN_08BIT, 0x00},
+	{0x329a, CRL_REG_LEN_08BIT, 0x20},
+	{0x329b, CRL_REG_LEN_08BIT, 0x00},
+	{0x329c, CRL_REG_LEN_08BIT, 0x10},
+	{0x329d, CRL_REG_LEN_08BIT, 0x00},
+	{0x329e, CRL_REG_LEN_08BIT, 0x08},
+	{0x329f, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a0, CRL_REG_LEN_08BIT, 0x7f},
+	{0x32a1, CRL_REG_LEN_08BIT, 0xff},
+	{0x32a2, CRL_REG_LEN_08BIT, 0x40},
+	{0x32a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a4, CRL_REG_LEN_08BIT, 0x20},
+	{0x32a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a6, CRL_REG_LEN_08BIT, 0x10},
+	{0x32a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ad, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x32af, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x32be, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c8, CRL_REG_LEN_08BIT, 0x87},
+	{0x32c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x3330, CRL_REG_LEN_08BIT, 0x03},
+	{0x3331, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3332, CRL_REG_LEN_08BIT, 0x02},
+	{0x3333, CRL_REG_LEN_08BIT, 0x24},
+	{0x3334, CRL_REG_LEN_08BIT, 0x00},
+	{0x3335, CRL_REG_LEN_08BIT, 0x00},
+	{0x3336, CRL_REG_LEN_08BIT, 0x00},
+	{0x3337, CRL_REG_LEN_08BIT, 0x00},
+	{0x3338, CRL_REG_LEN_08BIT, 0x03},
+	{0x3339, CRL_REG_LEN_08BIT, 0xc8},
+	{0x333a, CRL_REG_LEN_08BIT, 0x02},
+	{0x333b, CRL_REG_LEN_08BIT, 0x24},
+	{0x333c, CRL_REG_LEN_08BIT, 0x00},
+	{0x333d, CRL_REG_LEN_08BIT, 0x00},
+	{0x333e, CRL_REG_LEN_08BIT, 0x00},
+	{0x333f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3340, CRL_REG_LEN_08BIT, 0x03},
+	{0x3341, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3342, CRL_REG_LEN_08BIT, 0x02},
+	{0x3343, CRL_REG_LEN_08BIT, 0x24},
+	{0x3344, CRL_REG_LEN_08BIT, 0x00},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3346, CRL_REG_LEN_08BIT, 0x00},
+	{0x3347, CRL_REG_LEN_08BIT, 0x00},
+	{0x3348, CRL_REG_LEN_08BIT, 0x40},
+	{0x3349, CRL_REG_LEN_08BIT, 0x00},
+	{0x334a, CRL_REG_LEN_08BIT, 0x00},
+	{0x334b, CRL_REG_LEN_08BIT, 0x00},
+	{0x334c, CRL_REG_LEN_08BIT, 0x00},
+	{0x334d, CRL_REG_LEN_08BIT, 0x00},
+	{0x334e, CRL_REG_LEN_08BIT, 0x80},
+	{0x3360, CRL_REG_LEN_08BIT, 0x01},
+	{0x3361, CRL_REG_LEN_08BIT, 0x00},
+	{0x3362, CRL_REG_LEN_08BIT, 0x01},
+	{0x3363, CRL_REG_LEN_08BIT, 0x00},
+	{0x3364, CRL_REG_LEN_08BIT, 0x01},
+	{0x3365, CRL_REG_LEN_08BIT, 0x00},
+	{0x3366, CRL_REG_LEN_08BIT, 0x01},
+	{0x3367, CRL_REG_LEN_08BIT, 0x00},
+	{0x3368, CRL_REG_LEN_08BIT, 0x01},
+	{0x3369, CRL_REG_LEN_08BIT, 0x00},
+	{0x336a, CRL_REG_LEN_08BIT, 0x01},
+	{0x336b, CRL_REG_LEN_08BIT, 0x00},
+	{0x336c, CRL_REG_LEN_08BIT, 0x01},
+	{0x336d, CRL_REG_LEN_08BIT, 0x00},
+	{0x336e, CRL_REG_LEN_08BIT, 0x01},
+	{0x336f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3370, CRL_REG_LEN_08BIT, 0x01},
+	{0x3371, CRL_REG_LEN_08BIT, 0x00},
+	{0x3372, CRL_REG_LEN_08BIT, 0x01},
+	{0x3373, CRL_REG_LEN_08BIT, 0x00},
+	{0x3374, CRL_REG_LEN_08BIT, 0x01},
+	{0x3375, CRL_REG_LEN_08BIT, 0x00},
+	{0x3376, CRL_REG_LEN_08BIT, 0x01},
+	{0x3377, CRL_REG_LEN_08BIT, 0x00},
+	{0x3378, CRL_REG_LEN_08BIT, 0x00},
+	{0x3379, CRL_REG_LEN_08BIT, 0x00},
+	{0x337a, CRL_REG_LEN_08BIT, 0x00},
+	{0x337b, CRL_REG_LEN_08BIT, 0x00},
+	{0x337c, CRL_REG_LEN_08BIT, 0x00},
+	{0x337d, CRL_REG_LEN_08BIT, 0x00},
+	{0x337e, CRL_REG_LEN_08BIT, 0x00},
+	{0x337f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3380, CRL_REG_LEN_08BIT, 0x00},
+	{0x3381, CRL_REG_LEN_08BIT, 0x00},
+	{0x3382, CRL_REG_LEN_08BIT, 0x00},
+	{0x3383, CRL_REG_LEN_08BIT, 0x00},
+	{0x3384, CRL_REG_LEN_08BIT, 0x00},
+	{0x3385, CRL_REG_LEN_08BIT, 0x00},
+	{0x3386, CRL_REG_LEN_08BIT, 0x00},
+	{0x3387, CRL_REG_LEN_08BIT, 0x00},
+	{0x3388, CRL_REG_LEN_08BIT, 0x00},
+	{0x3389, CRL_REG_LEN_08BIT, 0x00},
+	{0x338a, CRL_REG_LEN_08BIT, 0x00},
+	{0x338b, CRL_REG_LEN_08BIT, 0x00},
+	{0x338c, CRL_REG_LEN_08BIT, 0x00},
+	{0x338d, CRL_REG_LEN_08BIT, 0x00},
+	{0x338e, CRL_REG_LEN_08BIT, 0x00},
+	{0x338f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3390, CRL_REG_LEN_08BIT, 0x00},
+	{0x3391, CRL_REG_LEN_08BIT, 0x00},
+	{0x3392, CRL_REG_LEN_08BIT, 0x00},
+	{0x3393, CRL_REG_LEN_08BIT, 0x00},
+	{0x3394, CRL_REG_LEN_08BIT, 0x00},
+	{0x3395, CRL_REG_LEN_08BIT, 0x00},
+	{0x3396, CRL_REG_LEN_08BIT, 0x00},
+	{0x3397, CRL_REG_LEN_08BIT, 0x00},
+	{0x3398, CRL_REG_LEN_08BIT, 0x00},
+	{0x3399, CRL_REG_LEN_08BIT, 0x00},
+	{0x339a, CRL_REG_LEN_08BIT, 0x00},
+	{0x339b, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b1, CRL_REG_LEN_08BIT, 0x50},
+	{0x33b2, CRL_REG_LEN_08BIT, 0x01},
+	{0x33b3, CRL_REG_LEN_08BIT, 0xff},
+	{0x33b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0x33b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0x33b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x33ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x33bb, CRL_REG_LEN_08BIT, 0x1f},
+	{0x33bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bd, CRL_REG_LEN_08BIT, 0x01},
+	{0x33be, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bf, CRL_REG_LEN_08BIT, 0x01},
+	{0x33c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e0, CRL_REG_LEN_08BIT, 0x14},
+	{0x33e1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33e2, CRL_REG_LEN_08BIT, 0x02},
+	{0x33e3, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e5, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e7, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e8, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33e9, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ea, CRL_REG_LEN_08BIT, 0x02},
+	{0x33eb, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ec, CRL_REG_LEN_08BIT, 0x03},
+	{0x33ed, CRL_REG_LEN_08BIT, 0x01},
+	{0x33ee, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ef, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f0, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f1, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33f4, CRL_REG_LEN_08BIT, 0x03},
+	{0x33f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x33f6, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x33f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x33f9, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x33fc, CRL_REG_LEN_08BIT, 0x04},
+	{0x33fd, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33fe, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ff, CRL_REG_LEN_08BIT, 0x02},
+	{0x3400, CRL_REG_LEN_08BIT, 0x02},
+	{0x3401, CRL_REG_LEN_08BIT, 0x03},
+	{0x3402, CRL_REG_LEN_08BIT, 0x01},
+	{0x3403, CRL_REG_LEN_08BIT, 0x02},
+	{0x3404, CRL_REG_LEN_08BIT, 0x08},
+	{0x3405, CRL_REG_LEN_08BIT, 0x08},
+	{0x3406, CRL_REG_LEN_08BIT, 0x04},
+	{0x3407, CRL_REG_LEN_08BIT, 0x04},
+	{0x3408, CRL_REG_LEN_08BIT, 0x00},
+	{0x3409, CRL_REG_LEN_08BIT, 0x03},
+	{0x340a, CRL_REG_LEN_08BIT, 0x14},
+	{0x340b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x340c, CRL_REG_LEN_08BIT, 0x04},
+	{0x340d, CRL_REG_LEN_08BIT, 0x02},
+	{0x340e, CRL_REG_LEN_08BIT, 0x01},
+	{0x340f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3410, CRL_REG_LEN_08BIT, 0x00},
+	{0x3411, CRL_REG_LEN_08BIT, 0x04},
+	{0x3412, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3413, CRL_REG_LEN_08BIT, 0x02},
+	{0x3414, CRL_REG_LEN_08BIT, 0x02},
+	{0x3415, CRL_REG_LEN_08BIT, 0x02},
+	{0x3416, CRL_REG_LEN_08BIT, 0x03},
+	{0x3417, CRL_REG_LEN_08BIT, 0x02},
+	{0x3418, CRL_REG_LEN_08BIT, 0x05},
+	{0x3419, CRL_REG_LEN_08BIT, 0x0a},
+	{0x341a, CRL_REG_LEN_08BIT, 0x08},
+	{0x341b, CRL_REG_LEN_08BIT, 0x04},
+	{0x341c, CRL_REG_LEN_08BIT, 0x04},
+	{0x341d, CRL_REG_LEN_08BIT, 0x00},
+	{0x341e, CRL_REG_LEN_08BIT, 0x03},
+	{0x3440, CRL_REG_LEN_08BIT, 0x00},
+	{0x3441, CRL_REG_LEN_08BIT, 0x00},
+	{0x3442, CRL_REG_LEN_08BIT, 0x00},
+	{0x3443, CRL_REG_LEN_08BIT, 0x00},
+	{0x3444, CRL_REG_LEN_08BIT, 0x02},
+	{0x3445, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3446, CRL_REG_LEN_08BIT, 0x02},
+	{0x3447, CRL_REG_LEN_08BIT, 0x08},
+	{0x3448, CRL_REG_LEN_08BIT, 0x00},
+	{0x3460, CRL_REG_LEN_08BIT, 0x40},
+	{0x3461, CRL_REG_LEN_08BIT, 0x40},
+	{0x3462, CRL_REG_LEN_08BIT, 0x40},
+	{0x3463, CRL_REG_LEN_08BIT, 0x40},
+	{0x3464, CRL_REG_LEN_08BIT, 0x03},
+	{0x3465, CRL_REG_LEN_08BIT, 0x01},
+	{0x3466, CRL_REG_LEN_08BIT, 0x01},
+	{0x3467, CRL_REG_LEN_08BIT, 0x02},
+	{0x3468, CRL_REG_LEN_08BIT, 0x30},
+	{0x3469, CRL_REG_LEN_08BIT, 0x00},
+	{0x346a, CRL_REG_LEN_08BIT, 0x33},
+	{0x346b, CRL_REG_LEN_08BIT, 0xbf},
+	{0x3480, CRL_REG_LEN_08BIT, 0x40},
+	{0x3481, CRL_REG_LEN_08BIT, 0x00},
+	{0x3482, CRL_REG_LEN_08BIT, 0x00},
+	{0x3483, CRL_REG_LEN_08BIT, 0x00},
+	{0x3484, CRL_REG_LEN_08BIT, 0x0d},
+	{0x3485, CRL_REG_LEN_08BIT, 0x00},
+	{0x3486, CRL_REG_LEN_08BIT, 0x00},
+	{0x3487, CRL_REG_LEN_08BIT, 0x00},
+	{0x3488, CRL_REG_LEN_08BIT, 0x00},
+	{0x3489, CRL_REG_LEN_08BIT, 0x00},
+	{0x348a, CRL_REG_LEN_08BIT, 0x00},
+	{0x348b, CRL_REG_LEN_08BIT, 0x04},
+	{0x348c, CRL_REG_LEN_08BIT, 0x00},
+	{0x348d, CRL_REG_LEN_08BIT, 0x01},
+	{0x348f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3030, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x7000, CRL_REG_LEN_08BIT, 0x58},
+	{0x7001, CRL_REG_LEN_08BIT, 0x7a},
+	{0x7002, CRL_REG_LEN_08BIT, 0x1a},
+	{0x7003, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7004, CRL_REG_LEN_08BIT, 0x03},
+	{0x7005, CRL_REG_LEN_08BIT, 0xda},
+	{0x7006, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7007, CRL_REG_LEN_08BIT, 0x03},
+	{0x7008, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7009, CRL_REG_LEN_08BIT, 0x06},
+	{0x700a, CRL_REG_LEN_08BIT, 0xe6},
+	{0x700b, CRL_REG_LEN_08BIT, 0xec},
+	{0x700c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700d, CRL_REG_LEN_08BIT, 0xff},
+	{0x700e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700f, CRL_REG_LEN_08BIT, 0x73},
+	{0x7010, CRL_REG_LEN_08BIT, 0xda},
+	{0x7011, CRL_REG_LEN_08BIT, 0x72},
+	{0x7012, CRL_REG_LEN_08BIT, 0x76},
+	{0x7013, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7014, CRL_REG_LEN_08BIT, 0xee},
+	{0x7015, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7016, CRL_REG_LEN_08BIT, 0xac},
+	{0x7017, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7018, CRL_REG_LEN_08BIT, 0xac},
+	{0x7019, CRL_REG_LEN_08BIT, 0xd1},
+	{0x701a, CRL_REG_LEN_08BIT, 0x50},
+	{0x701b, CRL_REG_LEN_08BIT, 0xac},
+	{0x701c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x701d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x701e, CRL_REG_LEN_08BIT, 0x2e},
+	{0x701f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7020, CRL_REG_LEN_08BIT, 0x00},
+	{0x7021, CRL_REG_LEN_08BIT, 0xdc},
+	{0x7022, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7023, CRL_REG_LEN_08BIT, 0xb0},
+	{0x7024, CRL_REG_LEN_08BIT, 0x6e},
+	{0x7025, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7026, CRL_REG_LEN_08BIT, 0x01},
+	{0x7027, CRL_REG_LEN_08BIT, 0xd7},
+	{0x7028, CRL_REG_LEN_08BIT, 0xed},
+	{0x7029, CRL_REG_LEN_08BIT, 0xe1},
+	{0x702a, CRL_REG_LEN_08BIT, 0x36},
+	{0x702b, CRL_REG_LEN_08BIT, 0x30},
+	{0x702c, CRL_REG_LEN_08BIT, 0xd3},
+	{0x702d, CRL_REG_LEN_08BIT, 0x2e},
+	{0x702e, CRL_REG_LEN_08BIT, 0x54},
+	{0x702f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7030, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7031, CRL_REG_LEN_08BIT, 0x22},
+	{0x7032, CRL_REG_LEN_08BIT, 0x66},
+	{0x7033, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7034, CRL_REG_LEN_08BIT, 0x24},
+	{0x7035, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7036, CRL_REG_LEN_08BIT, 0x28},
+	{0x7037, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7038, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7039, CRL_REG_LEN_08BIT, 0xa1},
+	{0x703a, CRL_REG_LEN_08BIT, 0xac},
+	{0x703b, CRL_REG_LEN_08BIT, 0xd8},
+	{0x703c, CRL_REG_LEN_08BIT, 0xd6},
+	{0x703d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x703e, CRL_REG_LEN_08BIT, 0x04},
+	{0x703f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7040, CRL_REG_LEN_08BIT, 0xb7},
+	{0x7041, CRL_REG_LEN_08BIT, 0x04},
+	{0x7042, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7043, CRL_REG_LEN_08BIT, 0x08},
+	{0x7044, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7045, CRL_REG_LEN_08BIT, 0xd9},
+	{0x7046, CRL_REG_LEN_08BIT, 0xad},
+	{0x7047, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7048, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7049, CRL_REG_LEN_08BIT, 0x19},
+	{0x704a, CRL_REG_LEN_08BIT, 0xc1},
+	{0x704b, CRL_REG_LEN_08BIT, 0x27},
+	{0x704c, CRL_REG_LEN_08BIT, 0xe7},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x704e, CRL_REG_LEN_08BIT, 0x50},
+	{0x704f, CRL_REG_LEN_08BIT, 0x20},
+	{0x7050, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7051, CRL_REG_LEN_08BIT, 0x02},
+	{0x7052, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7053, CRL_REG_LEN_08BIT, 0x17},
+	{0x7054, CRL_REG_LEN_08BIT, 0xdb},
+	{0x7055, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7056, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7057, CRL_REG_LEN_08BIT, 0x00},
+	{0x7058, CRL_REG_LEN_08BIT, 0x28},
+	{0x7059, CRL_REG_LEN_08BIT, 0x54},
+	{0x705a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x705b, CRL_REG_LEN_08BIT, 0x14},
+	{0x705c, CRL_REG_LEN_08BIT, 0xab},
+	{0x705d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x705e, CRL_REG_LEN_08BIT, 0x06},
+	{0x705f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7060, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7061, CRL_REG_LEN_08BIT, 0x00},
+	{0x7062, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7063, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7064, CRL_REG_LEN_08BIT, 0x07},
+	{0x7065, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7066, CRL_REG_LEN_08BIT, 0x05},
+	{0x7067, CRL_REG_LEN_08BIT, 0xee},
+	{0x7068, CRL_REG_LEN_08BIT, 0xe6},
+	{0x7069, CRL_REG_LEN_08BIT, 0xad},
+	{0x706a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x706b, CRL_REG_LEN_08BIT, 0x26},
+	{0x706c, CRL_REG_LEN_08BIT, 0x19},
+	{0x706d, CRL_REG_LEN_08BIT, 0xc1},
+	{0x706e, CRL_REG_LEN_08BIT, 0x3a},
+	{0x706f, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7070, CRL_REG_LEN_08BIT, 0xaf},
+	{0x7071, CRL_REG_LEN_08BIT, 0x00},
+	{0x7072, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7073, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7074, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7075, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7076, CRL_REG_LEN_08BIT, 0xe7},
+	{0x7077, CRL_REG_LEN_08BIT, 0x00},
+	{0x7078, CRL_REG_LEN_08BIT, 0x15},
+	{0x7079, CRL_REG_LEN_08BIT, 0xc2},
+	{0x707a, CRL_REG_LEN_08BIT, 0x40},
+	{0x707b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x707c, CRL_REG_LEN_08BIT, 0xa4},
+	{0x707d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x707e, CRL_REG_LEN_08BIT, 0x3c},
+	{0x707f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7081, CRL_REG_LEN_08BIT, 0x64},
+	{0x7082, CRL_REG_LEN_08BIT, 0x29},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7084, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7085, CRL_REG_LEN_08BIT, 0x12},
+	{0x7086, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7087, CRL_REG_LEN_08BIT, 0x01},
+	{0x7088, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7089, CRL_REG_LEN_08BIT, 0xbc},
+	{0x708a, CRL_REG_LEN_08BIT, 0x01},
+	{0x708b, CRL_REG_LEN_08BIT, 0xac},
+	{0x708c, CRL_REG_LEN_08BIT, 0x37},
+	{0x708d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x708e, CRL_REG_LEN_08BIT, 0xac},
+	{0x708f, CRL_REG_LEN_08BIT, 0x45},
+	{0x7090, CRL_REG_LEN_08BIT, 0xad},
+	{0x7091, CRL_REG_LEN_08BIT, 0x28},
+	{0x7092, CRL_REG_LEN_08BIT, 0x00},
+	{0x7093, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7094, CRL_REG_LEN_08BIT, 0x00},
+	{0x7095, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7096, CRL_REG_LEN_08BIT, 0x01},
+	{0x7097, CRL_REG_LEN_08BIT, 0x36},
+	{0x7098, CRL_REG_LEN_08BIT, 0xd3},
+	{0x7099, CRL_REG_LEN_08BIT, 0x30},
+	{0x709a, CRL_REG_LEN_08BIT, 0x04},
+	{0x709b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x709c, CRL_REG_LEN_08BIT, 0xd8},
+	{0x709d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x709e, CRL_REG_LEN_08BIT, 0xe9},
+	{0x709f, CRL_REG_LEN_08BIT, 0x00},
+	{0x70a0, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70a1, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a2, CRL_REG_LEN_08BIT, 0x62},
+	{0x70a3, CRL_REG_LEN_08BIT, 0x07},
+	{0x70a4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70a5, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a6, CRL_REG_LEN_08BIT, 0xad},
+	{0x70a7, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70a8, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70aa, CRL_REG_LEN_08BIT, 0x15},
+	{0x70ab, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70ac, CRL_REG_LEN_08BIT, 0x59},
+	{0x70ad, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70ae, CRL_REG_LEN_08BIT, 0xc9},
+	{0x70af, CRL_REG_LEN_08BIT, 0xc0},
+	{0x70b0, CRL_REG_LEN_08BIT, 0x55},
+	{0x70b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b2, CRL_REG_LEN_08BIT, 0x46},
+	{0x70b3, CRL_REG_LEN_08BIT, 0xa1},
+	{0x70b4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70b5, CRL_REG_LEN_08BIT, 0x64},
+	{0x70b6, CRL_REG_LEN_08BIT, 0x29},
+	{0x70b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x70ba, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70bb, CRL_REG_LEN_08BIT, 0x02},
+	{0x70bc, CRL_REG_LEN_08BIT, 0xd0},
+	{0x70bd, CRL_REG_LEN_08BIT, 0xdc},
+	{0x70be, CRL_REG_LEN_08BIT, 0xac},
+	{0x70bf, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x37},
+	{0x70c2, CRL_REG_LEN_08BIT, 0xac},
+	{0x70c3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x45},
+	{0x70c5, CRL_REG_LEN_08BIT, 0xad},
+	{0x70c6, CRL_REG_LEN_08BIT, 0x28},
+	{0x70c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ca, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70cb, CRL_REG_LEN_08BIT, 0x01},
+	{0x70cc, CRL_REG_LEN_08BIT, 0x36},
+	{0x70cd, CRL_REG_LEN_08BIT, 0x30},
+	{0x70ce, CRL_REG_LEN_08BIT, 0xe0},
+	{0x70cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0x70d0, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70d1, CRL_REG_LEN_08BIT, 0x0b},
+	{0x70d2, CRL_REG_LEN_08BIT, 0xd6},
+	{0x70d3, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70d4, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70d6, CRL_REG_LEN_08BIT, 0x62},
+	{0x70d7, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d8, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70d9, CRL_REG_LEN_08BIT, 0x05},
+	{0x70da, CRL_REG_LEN_08BIT, 0xad},
+	{0x70db, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70dc, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70dd, CRL_REG_LEN_08BIT, 0x46},
+	{0x70de, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70df, CRL_REG_LEN_08BIT, 0x07},
+	{0x70e0, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e2, CRL_REG_LEN_08BIT, 0xe3},
+	{0x70e3, CRL_REG_LEN_08BIT, 0x18},
+	{0x70e4, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70e5, CRL_REG_LEN_08BIT, 0xa2},
+	{0x70e6, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x64},
+	{0x70e8, CRL_REG_LEN_08BIT, 0xd1},
+	{0x70e9, CRL_REG_LEN_08BIT, 0xdd},
+	{0x70ea, CRL_REG_LEN_08BIT, 0xac},
+	{0x70eb, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70ed, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x19},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x46},
+	{0x70f0, CRL_REG_LEN_08BIT, 0x50},
+	{0x70f1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x70f2, CRL_REG_LEN_08BIT, 0xee},
+	{0x70f3, CRL_REG_LEN_08BIT, 0xe8},
+	{0x70f4, CRL_REG_LEN_08BIT, 0xe6},
+	{0x70f5, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70f6, CRL_REG_LEN_08BIT, 0x31},
+	{0x70f7, CRL_REG_LEN_08BIT, 0xe1},
+	{0x70f8, CRL_REG_LEN_08BIT, 0x36},
+	{0x70f9, CRL_REG_LEN_08BIT, 0x30},
+	{0x70fa, CRL_REG_LEN_08BIT, 0xd3},
+	{0x70fb, CRL_REG_LEN_08BIT, 0x2e},
+	{0x70fc, CRL_REG_LEN_08BIT, 0x54},
+	{0x70fd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x70fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x70ff, CRL_REG_LEN_08BIT, 0xec},
+	{0x7100, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7101, CRL_REG_LEN_08BIT, 0x50},
+	{0x7102, CRL_REG_LEN_08BIT, 0x20},
+	{0x7103, CRL_REG_LEN_08BIT, 0x04},
+	{0x7104, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7105, CRL_REG_LEN_08BIT, 0x02},
+	{0x7106, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7107, CRL_REG_LEN_08BIT, 0x18},
+	{0x7108, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7109, CRL_REG_LEN_08BIT, 0xb8},
+	{0x710a, CRL_REG_LEN_08BIT, 0x00},
+	{0x710b, CRL_REG_LEN_08BIT, 0x28},
+	{0x710c, CRL_REG_LEN_08BIT, 0x54},
+	{0x710d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x710e, CRL_REG_LEN_08BIT, 0x02},
+	{0x710f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7110, CRL_REG_LEN_08BIT, 0xda},
+	{0x7111, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7112, CRL_REG_LEN_08BIT, 0x04},
+	{0x7113, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7114, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7115, CRL_REG_LEN_08BIT, 0xab},
+	{0x7116, CRL_REG_LEN_08BIT, 0x00},
+	{0x7117, CRL_REG_LEN_08BIT, 0x62},
+	{0x7118, CRL_REG_LEN_08BIT, 0x07},
+	{0x7119, CRL_REG_LEN_08BIT, 0xb9},
+	{0x711a, CRL_REG_LEN_08BIT, 0x05},
+	{0x711b, CRL_REG_LEN_08BIT, 0xad},
+	{0x711c, CRL_REG_LEN_08BIT, 0xc3},
+	{0x711d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x711e, CRL_REG_LEN_08BIT, 0xe7},
+	{0x711f, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7120, CRL_REG_LEN_08BIT, 0x64},
+	{0x7121, CRL_REG_LEN_08BIT, 0x29},
+	{0x7122, CRL_REG_LEN_08BIT, 0x00},
+	{0x7123, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7124, CRL_REG_LEN_08BIT, 0x02},
+	{0x7125, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7126, CRL_REG_LEN_08BIT, 0x00},
+	{0x7127, CRL_REG_LEN_08BIT, 0x45},
+	{0x7128, CRL_REG_LEN_08BIT, 0xad},
+	{0x7129, CRL_REG_LEN_08BIT, 0xe2},
+	{0x712a, CRL_REG_LEN_08BIT, 0x28},
+	{0x712b, CRL_REG_LEN_08BIT, 0x00},
+	{0x712c, CRL_REG_LEN_08BIT, 0xb8},
+	{0x712d, CRL_REG_LEN_08BIT, 0x00},
+	{0x712e, CRL_REG_LEN_08BIT, 0xe0},
+	{0x712f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7130, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7131, CRL_REG_LEN_08BIT, 0xe9},
+	{0x7132, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7133, CRL_REG_LEN_08BIT, 0x03},
+	{0x7134, CRL_REG_LEN_08BIT, 0x00},
+	{0x7135, CRL_REG_LEN_08BIT, 0x30},
+	{0x7136, CRL_REG_LEN_08BIT, 0x62},
+	{0x7137, CRL_REG_LEN_08BIT, 0x07},
+	{0x7138, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7139, CRL_REG_LEN_08BIT, 0x05},
+	{0x713a, CRL_REG_LEN_08BIT, 0xad},
+	{0x713b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x713c, CRL_REG_LEN_08BIT, 0xcf},
+	{0x713d, CRL_REG_LEN_08BIT, 0x42},
+	{0x713e, CRL_REG_LEN_08BIT, 0xe4},
+	{0x713f, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7140, CRL_REG_LEN_08BIT, 0x07},
+	{0x7141, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7142, CRL_REG_LEN_08BIT, 0x00},
+	{0x7143, CRL_REG_LEN_08BIT, 0x00},
+	{0x7144, CRL_REG_LEN_08BIT, 0x17},
+	{0x7145, CRL_REG_LEN_08BIT, 0xc2},
+	{0x7146, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7147, CRL_REG_LEN_08BIT, 0xde},
+	{0x7148, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7149, CRL_REG_LEN_08BIT, 0xdf},
+	{0x714a, CRL_REG_LEN_08BIT, 0xac},
+	{0x714b, CRL_REG_LEN_08BIT, 0xd1},
+	{0x714c, CRL_REG_LEN_08BIT, 0x44},
+	{0x714d, CRL_REG_LEN_08BIT, 0xac},
+	{0x714e, CRL_REG_LEN_08BIT, 0xb9},
+	{0x714f, CRL_REG_LEN_08BIT, 0x76},
+	{0x7150, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7151, CRL_REG_LEN_08BIT, 0x08},
+	{0x7152, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7153, CRL_REG_LEN_08BIT, 0xfe},
+	{0x7154, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7155, CRL_REG_LEN_08BIT, 0xca},
+	{0x7156, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7157, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7158, CRL_REG_LEN_08BIT, 0xab},
+	{0x7159, CRL_REG_LEN_08BIT, 0x00},
+	{0x715a, CRL_REG_LEN_08BIT, 0xe1},
+	{0x715b, CRL_REG_LEN_08BIT, 0x36},
+	{0x715c, CRL_REG_LEN_08BIT, 0x30},
+	{0x715d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x715e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x715f, CRL_REG_LEN_08BIT, 0x29},
+	{0x7160, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7161, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7162, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7163, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7164, CRL_REG_LEN_08BIT, 0x01},
+	{0x7165, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7166, CRL_REG_LEN_08BIT, 0x0c},
+	{0x7167, CRL_REG_LEN_08BIT, 0x45},
+	{0x7168, CRL_REG_LEN_08BIT, 0xa4},
+	{0x7169, CRL_REG_LEN_08BIT, 0xbd},
+	{0x716a, CRL_REG_LEN_08BIT, 0x03},
+	{0x716b, CRL_REG_LEN_08BIT, 0xec},
+	{0x716c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x716d, CRL_REG_LEN_08BIT, 0x3d},
+	{0x716e, CRL_REG_LEN_08BIT, 0xc3},
+	{0x716f, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7170, CRL_REG_LEN_08BIT, 0x42},
+	{0x7171, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7172, CRL_REG_LEN_08BIT, 0x00},
+	{0x7173, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7174, CRL_REG_LEN_08BIT, 0xd5},
+	{0x7175, CRL_REG_LEN_08BIT, 0x00},
+	{0x7176, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7177, CRL_REG_LEN_08BIT, 0x00},
+	{0x7178, CRL_REG_LEN_08BIT, 0x74},
+	{0x7179, CRL_REG_LEN_08BIT, 0xbd},
+	{0x717a, CRL_REG_LEN_08BIT, 0x03},
+	{0x717b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x717c, CRL_REG_LEN_08BIT, 0x39},
+	{0x717d, CRL_REG_LEN_08BIT, 0x40},
+	{0x717e, CRL_REG_LEN_08BIT, 0x58},
+	{0x717f, CRL_REG_LEN_08BIT, 0xdd},
+	{0x7180, CRL_REG_LEN_08BIT, 0x19},
+	{0x7181, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7182, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7183, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7184, CRL_REG_LEN_08BIT, 0x06},
+	{0x7185, CRL_REG_LEN_08BIT, 0x17},
+	{0x7186, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7187, CRL_REG_LEN_08BIT, 0xc6},
+	{0x7188, CRL_REG_LEN_08BIT, 0xe8},
+	{0x7189, CRL_REG_LEN_08BIT, 0x00},
+	{0x718a, CRL_REG_LEN_08BIT, 0xc0},
+	{0x718b, CRL_REG_LEN_08BIT, 0xc8},
+	{0x718c, CRL_REG_LEN_08BIT, 0xe6},
+	{0x718d, CRL_REG_LEN_08BIT, 0x95},
+	{0x718e, CRL_REG_LEN_08BIT, 0x15},
+	{0x718f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7190, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7191, CRL_REG_LEN_08BIT, 0x19},
+	{0x7192, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7193, CRL_REG_LEN_08BIT, 0xf6},
+	{0x7194, CRL_REG_LEN_08BIT, 0x14},
+	{0x7195, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7196, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7197, CRL_REG_LEN_08BIT, 0xd1},
+	{0x7198, CRL_REG_LEN_08BIT, 0xac},
+	{0x7199, CRL_REG_LEN_08BIT, 0x37},
+	{0x719a, CRL_REG_LEN_08BIT, 0xbc},
+	{0x719b, CRL_REG_LEN_08BIT, 0x35},
+	{0x719c, CRL_REG_LEN_08BIT, 0x36},
+	{0x719d, CRL_REG_LEN_08BIT, 0x30},
+	{0x719e, CRL_REG_LEN_08BIT, 0xe1},
+	{0x719f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x71a0, CRL_REG_LEN_08BIT, 0x7a},
+	{0x71a1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x71a2, CRL_REG_LEN_08BIT, 0x0c},
+	{0x71a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x71a4, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71a5, CRL_REG_LEN_08BIT, 0xc7},
+	{0x71a6, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x71a8, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x71aa, CRL_REG_LEN_08BIT, 0x56},
+	{0x71ab, CRL_REG_LEN_08BIT, 0xc0},
+	{0x71ac, CRL_REG_LEN_08BIT, 0xda},
+	{0x71ad, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71ae, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71af, CRL_REG_LEN_08BIT, 0x56},
+	{0x71b0, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71b1, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71b2, CRL_REG_LEN_08BIT, 0x08},
+	{0x71b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b4, CRL_REG_LEN_08BIT, 0x57},
+	{0x71b5, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71b6, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71b7, CRL_REG_LEN_08BIT, 0x36},
+	{0x71b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b9, CRL_REG_LEN_08BIT, 0x54},
+	{0x71ba, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71bb, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71bc, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71bd, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71be, CRL_REG_LEN_08BIT, 0x56},
+	{0x71bf, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71c0, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71c1, CRL_REG_LEN_08BIT, 0x08},
+	{0x71c2, CRL_REG_LEN_08BIT, 0x57},
+	{0x71c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c4, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71c5, CRL_REG_LEN_08BIT, 0x36},
+	{0x71c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c7, CRL_REG_LEN_08BIT, 0x54},
+	{0x71c8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71c9, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71ca, CRL_REG_LEN_08BIT, 0x18},
+	{0x71cb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x71cd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x71cf, CRL_REG_LEN_08BIT, 0x56},
+	{0x71d0, CRL_REG_LEN_08BIT, 0x08},
+	{0x71d1, CRL_REG_LEN_08BIT, 0x57},
+	{0x71d2, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71d3, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71d4, CRL_REG_LEN_08BIT, 0x42},
+	{0x71d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x71d6, CRL_REG_LEN_08BIT, 0x54},
+	{0x71d7, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71d8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71d9, CRL_REG_LEN_08BIT, 0xab},
+	{0x71da, CRL_REG_LEN_08BIT, 0x00},
+	{0x71db, CRL_REG_LEN_08BIT, 0x66},
+	{0x71dc, CRL_REG_LEN_08BIT, 0x62},
+	{0x71dd, CRL_REG_LEN_08BIT, 0x06},
+	{0x71de, CRL_REG_LEN_08BIT, 0x74},
+	{0x71df, CRL_REG_LEN_08BIT, 0xb9},
+	{0x71e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x71e1, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e2, CRL_REG_LEN_08BIT, 0x14},
+	{0x71e3, CRL_REG_LEN_08BIT, 0x0e},
+	{0x71e4, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e5, CRL_REG_LEN_08BIT, 0x04},
+	{0x71e6, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7600, CRL_REG_LEN_08BIT, 0x04},
+	{0x7601, CRL_REG_LEN_08BIT, 0x80},
+	{0x7602, CRL_REG_LEN_08BIT, 0x07},
+	{0x7603, CRL_REG_LEN_08BIT, 0x44},
+	{0x7604, CRL_REG_LEN_08BIT, 0x05},
+	{0x7605, CRL_REG_LEN_08BIT, 0x33},
+	{0x7606, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7607, CRL_REG_LEN_08BIT, 0x00},
+	{0x7608, CRL_REG_LEN_08BIT, 0x07},
+	{0x7609, CRL_REG_LEN_08BIT, 0x40},
+	{0x760a, CRL_REG_LEN_08BIT, 0x04},
+	{0x760b, CRL_REG_LEN_08BIT, 0xe5},
+	{0x760c, CRL_REG_LEN_08BIT, 0x06},
+	{0x760d, CRL_REG_LEN_08BIT, 0x50},
+	{0x760e, CRL_REG_LEN_08BIT, 0x04},
+	{0x760f, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7610, CRL_REG_LEN_08BIT, 0x00},
+	{0x7611, CRL_REG_LEN_08BIT, 0x00},
+	{0x7612, CRL_REG_LEN_08BIT, 0x06},
+	{0x7613, CRL_REG_LEN_08BIT, 0x5c},
+	{0x7614, CRL_REG_LEN_08BIT, 0x00},
+	{0x7615, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7616, CRL_REG_LEN_08BIT, 0x06},
+	{0x7617, CRL_REG_LEN_08BIT, 0x1c},
+	{0x7618, CRL_REG_LEN_08BIT, 0x00},
+	{0x7619, CRL_REG_LEN_08BIT, 0x02},
+	{0x761a, CRL_REG_LEN_08BIT, 0x06},
+	{0x761b, CRL_REG_LEN_08BIT, 0xa2},
+	{0x761c, CRL_REG_LEN_08BIT, 0x00},
+	{0x761d, CRL_REG_LEN_08BIT, 0x01},
+	{0x761e, CRL_REG_LEN_08BIT, 0x06},
+	{0x761f, CRL_REG_LEN_08BIT, 0xae},
+	{0x7620, CRL_REG_LEN_08BIT, 0x00},
+	{0x7621, CRL_REG_LEN_08BIT, 0x0e},
+	{0x7622, CRL_REG_LEN_08BIT, 0x05},
+	{0x7623, CRL_REG_LEN_08BIT, 0x30},
+	{0x7624, CRL_REG_LEN_08BIT, 0x07},
+	{0x7625, CRL_REG_LEN_08BIT, 0x00},
+	{0x7626, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7627, CRL_REG_LEN_08BIT, 0x00},
+	{0x7628, CRL_REG_LEN_08BIT, 0x04},
+	{0x7629, CRL_REG_LEN_08BIT, 0xe5},
+	{0x762a, CRL_REG_LEN_08BIT, 0x05},
+	{0x762b, CRL_REG_LEN_08BIT, 0x33},
+	{0x762c, CRL_REG_LEN_08BIT, 0x06},
+	{0x762d, CRL_REG_LEN_08BIT, 0x12},
+	{0x762e, CRL_REG_LEN_08BIT, 0x00},
+	{0x762f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7630, CRL_REG_LEN_08BIT, 0x06},
+	{0x7631, CRL_REG_LEN_08BIT, 0x52},
+	{0x7632, CRL_REG_LEN_08BIT, 0x00},
+	{0x7633, CRL_REG_LEN_08BIT, 0x01},
+	{0x7634, CRL_REG_LEN_08BIT, 0x06},
+	{0x7635, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7636, CRL_REG_LEN_08BIT, 0x04},
+	{0x7637, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7638, CRL_REG_LEN_08BIT, 0x00},
+	{0x7639, CRL_REG_LEN_08BIT, 0x01},
+	{0x763a, CRL_REG_LEN_08BIT, 0x05},
+	{0x763b, CRL_REG_LEN_08BIT, 0x30},
+	{0x763c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x763d, CRL_REG_LEN_08BIT, 0x00},
+	{0x763e, CRL_REG_LEN_08BIT, 0x06},
+	{0x763f, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7640, CRL_REG_LEN_08BIT, 0x00},
+	{0x7641, CRL_REG_LEN_08BIT, 0x02},
+	{0x7642, CRL_REG_LEN_08BIT, 0x06},
+	{0x7643, CRL_REG_LEN_08BIT, 0x26},
+	{0x7644, CRL_REG_LEN_08BIT, 0x00},
+	{0x7645, CRL_REG_LEN_08BIT, 0x02},
+	{0x7646, CRL_REG_LEN_08BIT, 0x05},
+	{0x7647, CRL_REG_LEN_08BIT, 0x33},
+	{0x7648, CRL_REG_LEN_08BIT, 0x06},
+	{0x7649, CRL_REG_LEN_08BIT, 0x20},
+	{0x764a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x764b, CRL_REG_LEN_08BIT, 0x00},
+	{0x764c, CRL_REG_LEN_08BIT, 0x06},
+	{0x764d, CRL_REG_LEN_08BIT, 0x56},
+	{0x764e, CRL_REG_LEN_08BIT, 0x00},
+	{0x764f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7650, CRL_REG_LEN_08BIT, 0x06},
+	{0x7651, CRL_REG_LEN_08BIT, 0x16},
+	{0x7652, CRL_REG_LEN_08BIT, 0x05},
+	{0x7653, CRL_REG_LEN_08BIT, 0x33},
+	{0x7654, CRL_REG_LEN_08BIT, 0x06},
+	{0x7655, CRL_REG_LEN_08BIT, 0x10},
+	{0x7656, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7657, CRL_REG_LEN_08BIT, 0x00},
+	{0x7658, CRL_REG_LEN_08BIT, 0x06},
+	{0x7659, CRL_REG_LEN_08BIT, 0x10},
+	{0x765a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765b, CRL_REG_LEN_08BIT, 0x00},
+	{0x765c, CRL_REG_LEN_08BIT, 0x06},
+	{0x765d, CRL_REG_LEN_08BIT, 0x20},
+	{0x765e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7660, CRL_REG_LEN_08BIT, 0x00},
+	{0x7661, CRL_REG_LEN_08BIT, 0x00},
+	{0x7662, CRL_REG_LEN_08BIT, 0x00},
+	{0x7663, CRL_REG_LEN_08BIT, 0x02},
+	{0x7664, CRL_REG_LEN_08BIT, 0x04},
+	{0x7665, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7666, CRL_REG_LEN_08BIT, 0x04},
+	{0x7667, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7668, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7669, CRL_REG_LEN_08BIT, 0x00},
+	{0x766a, CRL_REG_LEN_08BIT, 0x00},
+	{0x766b, CRL_REG_LEN_08BIT, 0x00},
+	{0x766c, CRL_REG_LEN_08BIT, 0x00},
+	{0x766d, CRL_REG_LEN_08BIT, 0x01},
+	{0x766e, CRL_REG_LEN_08BIT, 0x04},
+	{0x766f, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7670, CRL_REG_LEN_08BIT, 0x04},
+	{0x7671, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7672, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7673, CRL_REG_LEN_08BIT, 0x00},
+	{0x7674, CRL_REG_LEN_08BIT, 0x00},
+	{0x7675, CRL_REG_LEN_08BIT, 0x02},
+	{0x7676, CRL_REG_LEN_08BIT, 0x04},
+	{0x7677, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7678, CRL_REG_LEN_08BIT, 0x00},
+	{0x7679, CRL_REG_LEN_08BIT, 0x02},
+	{0x767a, CRL_REG_LEN_08BIT, 0x04},
+	{0x767b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x767c, CRL_REG_LEN_08BIT, 0x00},
+	{0x767d, CRL_REG_LEN_08BIT, 0x02},
+	{0x767e, CRL_REG_LEN_08BIT, 0x04},
+	{0x767f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7680, CRL_REG_LEN_08BIT, 0x05},
+	{0x7681, CRL_REG_LEN_08BIT, 0x83},
+	{0x7682, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7683, CRL_REG_LEN_08BIT, 0x00},
+	{0x7684, CRL_REG_LEN_08BIT, 0x00},
+	{0x7685, CRL_REG_LEN_08BIT, 0x02},
+	{0x7686, CRL_REG_LEN_08BIT, 0x04},
+	{0x7687, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7688, CRL_REG_LEN_08BIT, 0x00},
+	{0x7689, CRL_REG_LEN_08BIT, 0x02},
+	{0x768a, CRL_REG_LEN_08BIT, 0x04},
+	{0x768b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x768c, CRL_REG_LEN_08BIT, 0x00},
+	{0x768d, CRL_REG_LEN_08BIT, 0x02},
+	{0x768e, CRL_REG_LEN_08BIT, 0x04},
+	{0x768f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7690, CRL_REG_LEN_08BIT, 0x05},
+	{0x7691, CRL_REG_LEN_08BIT, 0x83},
+	{0x7692, CRL_REG_LEN_08BIT, 0x03},
+	{0x7693, CRL_REG_LEN_08BIT, 0x0b},
+	{0x7694, CRL_REG_LEN_08BIT, 0x05},
+	{0x7695, CRL_REG_LEN_08BIT, 0x83},
+	{0x7696, CRL_REG_LEN_08BIT, 0x00},
+	{0x7697, CRL_REG_LEN_08BIT, 0x07},
+	{0x7698, CRL_REG_LEN_08BIT, 0x05},
+	{0x7699, CRL_REG_LEN_08BIT, 0x03},
+	{0x769a, CRL_REG_LEN_08BIT, 0x00},
+	{0x769b, CRL_REG_LEN_08BIT, 0x05},
+	{0x769c, CRL_REG_LEN_08BIT, 0x05},
+	{0x769d, CRL_REG_LEN_08BIT, 0x32},
+	{0x769e, CRL_REG_LEN_08BIT, 0x05},
+	{0x769f, CRL_REG_LEN_08BIT, 0x30},
+	{0x76a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a1, CRL_REG_LEN_08BIT, 0x02},
+	{0x76a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a3, CRL_REG_LEN_08BIT, 0x78},
+	{0x76a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a5, CRL_REG_LEN_08BIT, 0x01},
+	{0x76a6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a7, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76a8, CRL_REG_LEN_08BIT, 0x03},
+	{0x76a9, CRL_REG_LEN_08BIT, 0x9a},
+	{0x76aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ab, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ad, CRL_REG_LEN_08BIT, 0x04},
+	{0x76ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x76af, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76b8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x76bb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76bc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76bd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76be, CRL_REG_LEN_08BIT, 0x03},
+	{0x76bf, CRL_REG_LEN_08BIT, 0x99},
+	{0x76c0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c1, CRL_REG_LEN_08BIT, 0x83},
+	{0x76c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c3, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c5, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x76ca, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cb, CRL_REG_LEN_08BIT, 0x30},
+	{0x76cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76cd, CRL_REG_LEN_08BIT, 0x02},
+	{0x76ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cf, CRL_REG_LEN_08BIT, 0x78},
+	{0x76d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d1, CRL_REG_LEN_08BIT, 0x01},
+	{0x76d2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76d4, CRL_REG_LEN_08BIT, 0x03},
+	{0x76d5, CRL_REG_LEN_08BIT, 0x98},
+	{0x76d6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d7, CRL_REG_LEN_08BIT, 0x83},
+	{0x76d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x76da, CRL_REG_LEN_08BIT, 0x05},
+	{0x76db, CRL_REG_LEN_08BIT, 0x03},
+	{0x76dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76dd, CRL_REG_LEN_08BIT, 0x01},
+	{0x76de, CRL_REG_LEN_08BIT, 0x05},
+	{0x76df, CRL_REG_LEN_08BIT, 0x32},
+	{0x76e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e1, CRL_REG_LEN_08BIT, 0x30},
+	{0x76e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x76e4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e5, CRL_REG_LEN_08BIT, 0x78},
+	{0x76e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76e8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e9, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76ea, CRL_REG_LEN_08BIT, 0x03},
+	{0x76eb, CRL_REG_LEN_08BIT, 0x97},
+	{0x76ec, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ed, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76f2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76f4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76f8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x76fb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76fc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76fd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x76ff, CRL_REG_LEN_08BIT, 0x96},
+	{0x7700, CRL_REG_LEN_08BIT, 0x05},
+	{0x7701, CRL_REG_LEN_08BIT, 0x83},
+	{0x7702, CRL_REG_LEN_08BIT, 0x05},
+	{0x7703, CRL_REG_LEN_08BIT, 0x03},
+	{0x7704, CRL_REG_LEN_08BIT, 0x05},
+	{0x7705, CRL_REG_LEN_08BIT, 0x32},
+	{0x7706, CRL_REG_LEN_08BIT, 0x05},
+	{0x7707, CRL_REG_LEN_08BIT, 0x30},
+	{0x7708, CRL_REG_LEN_08BIT, 0x00},
+	{0x7709, CRL_REG_LEN_08BIT, 0x02},
+	{0x770a, CRL_REG_LEN_08BIT, 0x05},
+	{0x770b, CRL_REG_LEN_08BIT, 0x78},
+	{0x770c, CRL_REG_LEN_08BIT, 0x00},
+	{0x770d, CRL_REG_LEN_08BIT, 0x01},
+	{0x770e, CRL_REG_LEN_08BIT, 0x05},
+	{0x770f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7710, CRL_REG_LEN_08BIT, 0x03},
+	{0x7711, CRL_REG_LEN_08BIT, 0x95},
+	{0x7712, CRL_REG_LEN_08BIT, 0x05},
+	{0x7713, CRL_REG_LEN_08BIT, 0x83},
+	{0x7714, CRL_REG_LEN_08BIT, 0x05},
+	{0x7715, CRL_REG_LEN_08BIT, 0x03},
+	{0x7716, CRL_REG_LEN_08BIT, 0x05},
+	{0x7717, CRL_REG_LEN_08BIT, 0x32},
+	{0x7718, CRL_REG_LEN_08BIT, 0x05},
+	{0x7719, CRL_REG_LEN_08BIT, 0x30},
+	{0x771a, CRL_REG_LEN_08BIT, 0x00},
+	{0x771b, CRL_REG_LEN_08BIT, 0x02},
+	{0x771c, CRL_REG_LEN_08BIT, 0x05},
+	{0x771d, CRL_REG_LEN_08BIT, 0x78},
+	{0x771e, CRL_REG_LEN_08BIT, 0x00},
+	{0x771f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7720, CRL_REG_LEN_08BIT, 0x05},
+	{0x7721, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7722, CRL_REG_LEN_08BIT, 0x03},
+	{0x7723, CRL_REG_LEN_08BIT, 0x94},
+	{0x7724, CRL_REG_LEN_08BIT, 0x05},
+	{0x7725, CRL_REG_LEN_08BIT, 0x83},
+	{0x7726, CRL_REG_LEN_08BIT, 0x00},
+	{0x7727, CRL_REG_LEN_08BIT, 0x01},
+	{0x7728, CRL_REG_LEN_08BIT, 0x05},
+	{0x7729, CRL_REG_LEN_08BIT, 0x03},
+	{0x772a, CRL_REG_LEN_08BIT, 0x00},
+	{0x772b, CRL_REG_LEN_08BIT, 0x01},
+	{0x772c, CRL_REG_LEN_08BIT, 0x05},
+	{0x772d, CRL_REG_LEN_08BIT, 0x32},
+	{0x772e, CRL_REG_LEN_08BIT, 0x05},
+	{0x772f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7730, CRL_REG_LEN_08BIT, 0x00},
+	{0x7731, CRL_REG_LEN_08BIT, 0x02},
+	{0x7732, CRL_REG_LEN_08BIT, 0x05},
+	{0x7733, CRL_REG_LEN_08BIT, 0x78},
+	{0x7734, CRL_REG_LEN_08BIT, 0x00},
+	{0x7735, CRL_REG_LEN_08BIT, 0x01},
+	{0x7736, CRL_REG_LEN_08BIT, 0x05},
+	{0x7737, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7738, CRL_REG_LEN_08BIT, 0x03},
+	{0x7739, CRL_REG_LEN_08BIT, 0x93},
+	{0x773a, CRL_REG_LEN_08BIT, 0x05},
+	{0x773b, CRL_REG_LEN_08BIT, 0x83},
+	{0x773c, CRL_REG_LEN_08BIT, 0x00},
+	{0x773d, CRL_REG_LEN_08BIT, 0x00},
+	{0x773e, CRL_REG_LEN_08BIT, 0x05},
+	{0x773f, CRL_REG_LEN_08BIT, 0x03},
+	{0x7740, CRL_REG_LEN_08BIT, 0x00},
+	{0x7741, CRL_REG_LEN_08BIT, 0x00},
+	{0x7742, CRL_REG_LEN_08BIT, 0x05},
+	{0x7743, CRL_REG_LEN_08BIT, 0x32},
+	{0x7744, CRL_REG_LEN_08BIT, 0x05},
+	{0x7745, CRL_REG_LEN_08BIT, 0x30},
+	{0x7746, CRL_REG_LEN_08BIT, 0x00},
+	{0x7747, CRL_REG_LEN_08BIT, 0x02},
+	{0x7748, CRL_REG_LEN_08BIT, 0x05},
+	{0x7749, CRL_REG_LEN_08BIT, 0x78},
+	{0x774a, CRL_REG_LEN_08BIT, 0x00},
+	{0x774b, CRL_REG_LEN_08BIT, 0x01},
+	{0x774c, CRL_REG_LEN_08BIT, 0x05},
+	{0x774d, CRL_REG_LEN_08BIT, 0x7c},
+	{0x774e, CRL_REG_LEN_08BIT, 0x03},
+	{0x774f, CRL_REG_LEN_08BIT, 0x92},
+	{0x7750, CRL_REG_LEN_08BIT, 0x05},
+	{0x7751, CRL_REG_LEN_08BIT, 0x83},
+	{0x7752, CRL_REG_LEN_08BIT, 0x05},
+	{0x7753, CRL_REG_LEN_08BIT, 0x03},
+	{0x7754, CRL_REG_LEN_08BIT, 0x00},
+	{0x7755, CRL_REG_LEN_08BIT, 0x00},
+	{0x7756, CRL_REG_LEN_08BIT, 0x05},
+	{0x7757, CRL_REG_LEN_08BIT, 0x32},
+	{0x7758, CRL_REG_LEN_08BIT, 0x05},
+	{0x7759, CRL_REG_LEN_08BIT, 0x30},
+	{0x775a, CRL_REG_LEN_08BIT, 0x00},
+	{0x775b, CRL_REG_LEN_08BIT, 0x02},
+	{0x775c, CRL_REG_LEN_08BIT, 0x05},
+	{0x775d, CRL_REG_LEN_08BIT, 0x78},
+	{0x775e, CRL_REG_LEN_08BIT, 0x00},
+	{0x775f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7760, CRL_REG_LEN_08BIT, 0x05},
+	{0x7761, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7762, CRL_REG_LEN_08BIT, 0x03},
+	{0x7763, CRL_REG_LEN_08BIT, 0x91},
+	{0x7764, CRL_REG_LEN_08BIT, 0x05},
+	{0x7765, CRL_REG_LEN_08BIT, 0x83},
+	{0x7766, CRL_REG_LEN_08BIT, 0x05},
+	{0x7767, CRL_REG_LEN_08BIT, 0x03},
+	{0x7768, CRL_REG_LEN_08BIT, 0x05},
+	{0x7769, CRL_REG_LEN_08BIT, 0x32},
+	{0x776a, CRL_REG_LEN_08BIT, 0x05},
+	{0x776b, CRL_REG_LEN_08BIT, 0x30},
+	{0x776c, CRL_REG_LEN_08BIT, 0x00},
+	{0x776d, CRL_REG_LEN_08BIT, 0x02},
+	{0x776e, CRL_REG_LEN_08BIT, 0x05},
+	{0x776f, CRL_REG_LEN_08BIT, 0x78},
+	{0x7770, CRL_REG_LEN_08BIT, 0x00},
+	{0x7771, CRL_REG_LEN_08BIT, 0x01},
+	{0x7772, CRL_REG_LEN_08BIT, 0x05},
+	{0x7773, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7774, CRL_REG_LEN_08BIT, 0x03},
+	{0x7775, CRL_REG_LEN_08BIT, 0x90},
+	{0x7776, CRL_REG_LEN_08BIT, 0x05},
+	{0x7777, CRL_REG_LEN_08BIT, 0x83},
+	{0x7778, CRL_REG_LEN_08BIT, 0x05},
+	{0x7779, CRL_REG_LEN_08BIT, 0x03},
+	{0x777a, CRL_REG_LEN_08BIT, 0x05},
+	{0x777b, CRL_REG_LEN_08BIT, 0x32},
+	{0x777c, CRL_REG_LEN_08BIT, 0x05},
+	{0x777d, CRL_REG_LEN_08BIT, 0x30},
+	{0x777e, CRL_REG_LEN_08BIT, 0x00},
+	{0x777f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7780, CRL_REG_LEN_08BIT, 0x05},
+	{0x7781, CRL_REG_LEN_08BIT, 0x78},
+	{0x7782, CRL_REG_LEN_08BIT, 0x00},
+	{0x7783, CRL_REG_LEN_08BIT, 0x01},
+	{0x7784, CRL_REG_LEN_08BIT, 0x05},
+	{0x7785, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7786, CRL_REG_LEN_08BIT, 0x02},
+	{0x7787, CRL_REG_LEN_08BIT, 0x90},
+	{0x7788, CRL_REG_LEN_08BIT, 0x05},
+	{0x7789, CRL_REG_LEN_08BIT, 0x03},
+	{0x778a, CRL_REG_LEN_08BIT, 0x07},
+	{0x778b, CRL_REG_LEN_08BIT, 0x00},
+	{0x778c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x778d, CRL_REG_LEN_08BIT, 0x00},
+	{0x778e, CRL_REG_LEN_08BIT, 0x08},
+	{0x778f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7790, CRL_REG_LEN_08BIT, 0x08},
+	{0x7791, CRL_REG_LEN_08BIT, 0xee},
+	{0x7792, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7793, CRL_REG_LEN_08BIT, 0x00},
+	{0x7794, CRL_REG_LEN_08BIT, 0x05},
+	{0x7795, CRL_REG_LEN_08BIT, 0x33},
+	{0x7796, CRL_REG_LEN_08BIT, 0x04},
+	{0x7797, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7798, CRL_REG_LEN_08BIT, 0x06},
+	{0x7799, CRL_REG_LEN_08BIT, 0x52},
+	{0x779a, CRL_REG_LEN_08BIT, 0x04},
+	{0x779b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x779c, CRL_REG_LEN_08BIT, 0x00},
+	{0x779d, CRL_REG_LEN_08BIT, 0x00},
+	{0x779e, CRL_REG_LEN_08BIT, 0x06},
+	{0x779f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77a2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77a6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77aa, CRL_REG_LEN_08BIT, 0x06},
+	{0x77ab, CRL_REG_LEN_08BIT, 0xae},
+	{0x77ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x77af, CRL_REG_LEN_08BIT, 0x30},
+	{0x77b0, CRL_REG_LEN_08BIT, 0x09},
+	{0x77b1, CRL_REG_LEN_08BIT, 0x19},
+	{0x77b2, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x77b5, CRL_REG_LEN_08BIT, 0x33},
+	{0x77b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77b7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77b8, CRL_REG_LEN_08BIT, 0x06},
+	{0x77b9, CRL_REG_LEN_08BIT, 0x52},
+	{0x77ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x77bb, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x77be, CRL_REG_LEN_08BIT, 0x06},
+	{0x77bf, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77c2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77c6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ca, CRL_REG_LEN_08BIT, 0x06},
+	{0x77cb, CRL_REG_LEN_08BIT, 0xae},
+	{0x77cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77cd, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x77cf, CRL_REG_LEN_08BIT, 0x30},
+	{0x77d0, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77d6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77d8, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d9, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77da, CRL_REG_LEN_08BIT, 0x05},
+	{0x77db, CRL_REG_LEN_08BIT, 0x33},
+	{0x77dc, CRL_REG_LEN_08BIT, 0x07},
+	{0x77dd, CRL_REG_LEN_08BIT, 0x10},
+	{0x77de, CRL_REG_LEN_08BIT, 0x00},
+	{0x77df, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e1, CRL_REG_LEN_08BIT, 0xbb},
+	{0x77e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e5, CRL_REG_LEN_08BIT, 0xaa},
+	{0x77e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e9, CRL_REG_LEN_08BIT, 0x99},
+	{0x77ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x77eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ed, CRL_REG_LEN_08BIT, 0x88},
+	{0x77ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f1, CRL_REG_LEN_08BIT, 0x77},
+	{0x77f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f5, CRL_REG_LEN_08BIT, 0x66},
+	{0x77f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f9, CRL_REG_LEN_08BIT, 0x55},
+	{0x77fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x77fd, CRL_REG_LEN_08BIT, 0x44},
+	{0x77fe, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ff, CRL_REG_LEN_08BIT, 0x00},
+	{0x7800, CRL_REG_LEN_08BIT, 0x01},
+	{0x7801, CRL_REG_LEN_08BIT, 0x33},
+	{0x7802, CRL_REG_LEN_08BIT, 0x00},
+	{0x7803, CRL_REG_LEN_08BIT, 0x00},
+	{0x7804, CRL_REG_LEN_08BIT, 0x01},
+	{0x7805, CRL_REG_LEN_08BIT, 0x22},
+	{0x7806, CRL_REG_LEN_08BIT, 0x00},
+	{0x7807, CRL_REG_LEN_08BIT, 0x00},
+	{0x7808, CRL_REG_LEN_08BIT, 0x01},
+	{0x7809, CRL_REG_LEN_08BIT, 0x11},
+	{0x780a, CRL_REG_LEN_08BIT, 0x00},
+	{0x780b, CRL_REG_LEN_08BIT, 0x00},
+	{0x780c, CRL_REG_LEN_08BIT, 0x01},
+	{0x780d, CRL_REG_LEN_08BIT, 0x00},
+	{0x780e, CRL_REG_LEN_08BIT, 0x01},
+	{0x780f, CRL_REG_LEN_08BIT, 0xff},
+	{0x7810, CRL_REG_LEN_08BIT, 0x07},
+	{0x7811, CRL_REG_LEN_08BIT, 0x00},
+	{0x7812, CRL_REG_LEN_08BIT, 0x02},
+	{0x7813, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7814, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7815, CRL_REG_LEN_08BIT, 0x00},
+	{0x7816, CRL_REG_LEN_08BIT, 0x08},
+	{0x7817, CRL_REG_LEN_08BIT, 0x35},
+	{0x7818, CRL_REG_LEN_08BIT, 0x06},
+	{0x7819, CRL_REG_LEN_08BIT, 0x52},
+	{0x781a, CRL_REG_LEN_08BIT, 0x04},
+	{0x781b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x781c, CRL_REG_LEN_08BIT, 0x00},
+	{0x781d, CRL_REG_LEN_08BIT, 0x00},
+	{0x781e, CRL_REG_LEN_08BIT, 0x06},
+	{0x781f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7820, CRL_REG_LEN_08BIT, 0x05},
+	{0x7821, CRL_REG_LEN_08BIT, 0x33},
+	{0x7822, CRL_REG_LEN_08BIT, 0x09},
+	{0x7823, CRL_REG_LEN_08BIT, 0x19},
+	{0x7824, CRL_REG_LEN_08BIT, 0x06},
+	{0x7825, CRL_REG_LEN_08BIT, 0x1e},
+	{0x7826, CRL_REG_LEN_08BIT, 0x05},
+	{0x7827, CRL_REG_LEN_08BIT, 0x33},
+	{0x7828, CRL_REG_LEN_08BIT, 0x00},
+	{0x7829, CRL_REG_LEN_08BIT, 0x01},
+	{0x782a, CRL_REG_LEN_08BIT, 0x06},
+	{0x782b, CRL_REG_LEN_08BIT, 0x24},
+	{0x782c, CRL_REG_LEN_08BIT, 0x06},
+	{0x782d, CRL_REG_LEN_08BIT, 0x20},
+	{0x782e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x782f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7830, CRL_REG_LEN_08BIT, 0x08},
+	{0x7831, CRL_REG_LEN_08BIT, 0x35},
+	{0x7832, CRL_REG_LEN_08BIT, 0x07},
+	{0x7833, CRL_REG_LEN_08BIT, 0x10},
+	{0x7834, CRL_REG_LEN_08BIT, 0x00},
+	{0x7835, CRL_REG_LEN_08BIT, 0x00},
+	{0x7836, CRL_REG_LEN_08BIT, 0x01},
+	{0x7837, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7838, CRL_REG_LEN_08BIT, 0x00},
+	{0x7839, CRL_REG_LEN_08BIT, 0x00},
+	{0x783a, CRL_REG_LEN_08BIT, 0x01},
+	{0x783b, CRL_REG_LEN_08BIT, 0xaa},
+	{0x783c, CRL_REG_LEN_08BIT, 0x00},
+	{0x783d, CRL_REG_LEN_08BIT, 0x00},
+	{0x783e, CRL_REG_LEN_08BIT, 0x01},
+	{0x783f, CRL_REG_LEN_08BIT, 0x99},
+	{0x7840, CRL_REG_LEN_08BIT, 0x00},
+	{0x7841, CRL_REG_LEN_08BIT, 0x00},
+	{0x7842, CRL_REG_LEN_08BIT, 0x01},
+	{0x7843, CRL_REG_LEN_08BIT, 0x88},
+	{0x7844, CRL_REG_LEN_08BIT, 0x00},
+	{0x7845, CRL_REG_LEN_08BIT, 0x00},
+	{0x7846, CRL_REG_LEN_08BIT, 0x01},
+	{0x7847, CRL_REG_LEN_08BIT, 0x77},
+	{0x7848, CRL_REG_LEN_08BIT, 0x00},
+	{0x7849, CRL_REG_LEN_08BIT, 0x00},
+	{0x784a, CRL_REG_LEN_08BIT, 0x01},
+	{0x784b, CRL_REG_LEN_08BIT, 0x66},
+	{0x784c, CRL_REG_LEN_08BIT, 0x00},
+	{0x784d, CRL_REG_LEN_08BIT, 0x00},
+	{0x784e, CRL_REG_LEN_08BIT, 0x01},
+	{0x784f, CRL_REG_LEN_08BIT, 0x55},
+	{0x7850, CRL_REG_LEN_08BIT, 0x00},
+	{0x7851, CRL_REG_LEN_08BIT, 0x00},
+	{0x7852, CRL_REG_LEN_08BIT, 0x01},
+	{0x7853, CRL_REG_LEN_08BIT, 0x44},
+	{0x7854, CRL_REG_LEN_08BIT, 0x00},
+	{0x7855, CRL_REG_LEN_08BIT, 0x00},
+	{0x7856, CRL_REG_LEN_08BIT, 0x01},
+	{0x7857, CRL_REG_LEN_08BIT, 0x33},
+	{0x7858, CRL_REG_LEN_08BIT, 0x00},
+	{0x7859, CRL_REG_LEN_08BIT, 0x00},
+	{0x785a, CRL_REG_LEN_08BIT, 0x01},
+	{0x785b, CRL_REG_LEN_08BIT, 0x22},
+	{0x785c, CRL_REG_LEN_08BIT, 0x00},
+	{0x785d, CRL_REG_LEN_08BIT, 0x00},
+	{0x785e, CRL_REG_LEN_08BIT, 0x01},
+	{0x785f, CRL_REG_LEN_08BIT, 0x11},
+	{0x7860, CRL_REG_LEN_08BIT, 0x00},
+	{0x7861, CRL_REG_LEN_08BIT, 0x00},
+	{0x7862, CRL_REG_LEN_08BIT, 0x01},
+	{0x7863, CRL_REG_LEN_08BIT, 0x00},
+	{0x7864, CRL_REG_LEN_08BIT, 0x07},
+	{0x7865, CRL_REG_LEN_08BIT, 0x00},
+	{0x7866, CRL_REG_LEN_08BIT, 0x01},
+	{0x7867, CRL_REG_LEN_08BIT, 0xff},
+	{0x7868, CRL_REG_LEN_08BIT, 0x02},
+	{0x7869, CRL_REG_LEN_08BIT, 0xa0},
+	{0x786a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x786b, CRL_REG_LEN_08BIT, 0x00},
+	{0x786c, CRL_REG_LEN_08BIT, 0x08},
+	{0x786d, CRL_REG_LEN_08BIT, 0x3a},
+	{0x786e, CRL_REG_LEN_08BIT, 0x08},
+	{0x786f, CRL_REG_LEN_08BIT, 0x6a},
+	{0x7870, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7871, CRL_REG_LEN_08BIT, 0x00},
+	{0x7872, CRL_REG_LEN_08BIT, 0x04},
+	{0x7873, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7874, CRL_REG_LEN_08BIT, 0x09},
+	{0x7875, CRL_REG_LEN_08BIT, 0x19},
+	{0x7876, CRL_REG_LEN_08BIT, 0x04},
+	{0x7877, CRL_REG_LEN_08BIT, 0x99},
+	{0x7878, CRL_REG_LEN_08BIT, 0x07},
+	{0x7879, CRL_REG_LEN_08BIT, 0x14},
+	{0x787a, CRL_REG_LEN_08BIT, 0x00},
+	{0x787b, CRL_REG_LEN_08BIT, 0x01},
+	{0x787c, CRL_REG_LEN_08BIT, 0x04},
+	{0x787d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x787e, CRL_REG_LEN_08BIT, 0x00},
+	{0x787f, CRL_REG_LEN_08BIT, 0x07},
+	{0x7880, CRL_REG_LEN_08BIT, 0x04},
+	{0x7881, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7882, CRL_REG_LEN_08BIT, 0x00},
+	{0x7883, CRL_REG_LEN_08BIT, 0x00},
+	{0x7884, CRL_REG_LEN_08BIT, 0x04},
+	{0x7885, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7886, CRL_REG_LEN_08BIT, 0x04},
+	{0x7887, CRL_REG_LEN_08BIT, 0x80},
+	{0x7888, CRL_REG_LEN_08BIT, 0x04},
+	{0x7889, CRL_REG_LEN_08BIT, 0x00},
+	{0x788a, CRL_REG_LEN_08BIT, 0x05},
+	{0x788b, CRL_REG_LEN_08BIT, 0x03},
+	{0x788c, CRL_REG_LEN_08BIT, 0x06},
+	{0x788d, CRL_REG_LEN_08BIT, 0x00},
+	{0x788e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x788f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7890, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7891, CRL_REG_LEN_08BIT, 0x00},
+	{0x7892, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7893, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x48},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x3001, CRL_REG_LEN_08BIT, 0x32},
+	{0x3005, CRL_REG_LEN_08BIT, 0x13},
+	{0x3014, CRL_REG_LEN_08BIT, 0x44},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x1d},
+	{0x30b1, CRL_REG_LEN_08BIT, 0xe2},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x60},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x5c},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3195, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x10},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x40},
+	{0x3250, CRL_REG_LEN_08BIT, 0xf7},
+	{0x3012, CRL_REG_LEN_08BIT, 0x01},
+};
+
+/* ov2775_1928x1088_linearlcg_30fps_mipi960_regset */
+static struct crl_register_write_rep
+	ov2775_linear_lcg_30fps_mipi960_regset[] = {
+	{0x3013, CRL_REG_LEN_08BIT, 0x01},
+	{0x3000, CRL_REG_LEN_08BIT, 0x02},
+	{0x3001, CRL_REG_LEN_08BIT, 0x28},
+	{0x3002, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x01},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},
+	{0x3005, CRL_REG_LEN_08BIT, 0x26},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x07},
+	{0x3008, CRL_REG_LEN_08BIT, 0x01},
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},
+	{0x300c, CRL_REG_LEN_08BIT, 0x6c},
+	{0x300e, CRL_REG_LEN_08BIT, 0x80},
+	{0x300f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3012, CRL_REG_LEN_08BIT, 0x00},
+	{0x3013, CRL_REG_LEN_08BIT, 0x00},
+	{0x3014, CRL_REG_LEN_08BIT, 0xc4},
+	{0x3015, CRL_REG_LEN_08BIT, 0x00},
+	{0x3017, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x00},
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},
+	{0x301a, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0x0e},
+	{0x301e, CRL_REG_LEN_08BIT, 0x17},
+	{0x301f, CRL_REG_LEN_08BIT, 0xe1},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x3031, CRL_REG_LEN_08BIT, 0x62},
+	{0x3032, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3033, CRL_REG_LEN_08BIT, 0x30},
+	{0x3034, CRL_REG_LEN_08BIT, 0x3f},
+	{0x3035, CRL_REG_LEN_08BIT, 0x5f},
+	{0x3036, CRL_REG_LEN_08BIT, 0x02},
+	{0x3037, CRL_REG_LEN_08BIT, 0x9f},
+	{0x3038, CRL_REG_LEN_08BIT, 0x04},
+	{0x3039, CRL_REG_LEN_08BIT, 0xb7},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x07},
+	{0x303c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x303d, CRL_REG_LEN_08BIT, 0x00},
+	{0x303e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x303f, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3040, CRL_REG_LEN_08BIT, 0xf3},
+	{0x3041, CRL_REG_LEN_08BIT, 0x29},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf6},
+	{0x3043, CRL_REG_LEN_08BIT, 0x65},
+	{0x3044, CRL_REG_LEN_08BIT, 0x06},
+	{0x3045, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3046, CRL_REG_LEN_08BIT, 0x59},
+	{0x3047, CRL_REG_LEN_08BIT, 0x07},
+	{0x3048, CRL_REG_LEN_08BIT, 0x82},
+	{0x3049, CRL_REG_LEN_08BIT, 0xcf},
+	{0x304a, CRL_REG_LEN_08BIT, 0x12},
+	{0x304b, CRL_REG_LEN_08BIT, 0x40},
+	{0x304c, CRL_REG_LEN_08BIT, 0x33},
+	{0x304d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x304e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x304f, CRL_REG_LEN_08BIT, 0x3d},
+	{0x3050, CRL_REG_LEN_08BIT, 0x10},
+	{0x3060, CRL_REG_LEN_08BIT, 0x00},
+	{0x3061, CRL_REG_LEN_08BIT, 0x64},
+	{0x3062, CRL_REG_LEN_08BIT, 0x00},
+	{0x3063, CRL_REG_LEN_08BIT, 0xe4},
+	{0x3066, CRL_REG_LEN_08BIT, 0x80},
+	{0x3080, CRL_REG_LEN_08BIT, 0x00},
+	{0x3081, CRL_REG_LEN_08BIT, 0x00},
+	{0x3082, CRL_REG_LEN_08BIT, 0x01},
+	{0x3083, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3084, CRL_REG_LEN_08BIT, 0x06},
+	{0x3085, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x10},
+	{0x3087, CRL_REG_LEN_08BIT, 0x10},
+	{0x3089, CRL_REG_LEN_08BIT, 0x00},
+	{0x308a, CRL_REG_LEN_08BIT, 0x01},
+	{0x3093, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a1, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x30a4, CRL_REG_LEN_08BIT, 0x07},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x8b},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x3f},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x04},
+	{0x30aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ac, CRL_REG_LEN_08BIT, 0x07},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x80},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x08},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x98},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x65},
+	{0x30b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x10},
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x30ba, CRL_REG_LEN_08BIT, 0x10},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x03},
+	{0x30be, CRL_REG_LEN_08BIT, 0x5c},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x20},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x4a},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d3, CRL_REG_LEN_08BIT, 0x80},
+	{0x30d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d9, CRL_REG_LEN_08BIT, 0x09},
+	{0x30da, CRL_REG_LEN_08BIT, 0x64},
+	{0x30dd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30de, CRL_REG_LEN_08BIT, 0x16},
+	{0x30df, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e0, CRL_REG_LEN_08BIT, 0x17},
+	{0x30e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e2, CRL_REG_LEN_08BIT, 0x18},
+	{0x30e3, CRL_REG_LEN_08BIT, 0x10},
+	{0x30e4, CRL_REG_LEN_08BIT, 0x04},
+	{0x30e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x30eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ec, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x3101, CRL_REG_LEN_08BIT, 0x00},
+	{0x3102, CRL_REG_LEN_08BIT, 0x00},
+	{0x3103, CRL_REG_LEN_08BIT, 0x00},
+	{0x3104, CRL_REG_LEN_08BIT, 0x00},
+	{0x3105, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3106, CRL_REG_LEN_08BIT, 0x87},
+	{0x3107, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3108, CRL_REG_LEN_08BIT, 0x9d},
+	{0x3109, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310a, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310b, CRL_REG_LEN_08BIT, 0x6a},
+	{0x310c, CRL_REG_LEN_08BIT, 0x3a},
+	{0x310d, CRL_REG_LEN_08BIT, 0x5a},
+	{0x310e, CRL_REG_LEN_08BIT, 0x00},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x00},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3123, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3124, CRL_REG_LEN_08BIT, 0x00},
+	{0x3125, CRL_REG_LEN_08BIT, 0x70},
+	{0x3126, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3127, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3128, CRL_REG_LEN_08BIT, 0x00},
+	{0x3129, CRL_REG_LEN_08BIT, 0x3a},
+	{0x312a, CRL_REG_LEN_08BIT, 0x02},
+	{0x312b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312c, CRL_REG_LEN_08BIT, 0x00},
+	{0x312d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312e, CRL_REG_LEN_08BIT, 0x1d},
+	{0x312f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3130, CRL_REG_LEN_08BIT, 0x00},
+	{0x3131, CRL_REG_LEN_08BIT, 0x00},
+	{0x3132, CRL_REG_LEN_08BIT, 0x00},
+	{0x3140, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3141, CRL_REG_LEN_08BIT, 0x03},
+	{0x3142, CRL_REG_LEN_08BIT, 0x00},
+	{0x3143, CRL_REG_LEN_08BIT, 0x00},
+	{0x3144, CRL_REG_LEN_08BIT, 0x00},
+	{0x3145, CRL_REG_LEN_08BIT, 0x00},
+	{0x3146, CRL_REG_LEN_08BIT, 0x00},
+	{0x3147, CRL_REG_LEN_08BIT, 0x00},
+	{0x3148, CRL_REG_LEN_08BIT, 0x00},
+	{0x3149, CRL_REG_LEN_08BIT, 0x00},
+	{0x314a, CRL_REG_LEN_08BIT, 0x00},
+	{0x314b, CRL_REG_LEN_08BIT, 0x00},
+	{0x314c, CRL_REG_LEN_08BIT, 0x00},
+	{0x314d, CRL_REG_LEN_08BIT, 0x00},
+	{0x314e, CRL_REG_LEN_08BIT, 0x1c},
+	{0x314f, CRL_REG_LEN_08BIT, 0xff},
+	{0x3150, CRL_REG_LEN_08BIT, 0xff},
+	{0x3151, CRL_REG_LEN_08BIT, 0xff},
+	{0x3152, CRL_REG_LEN_08BIT, 0x10},
+	{0x3153, CRL_REG_LEN_08BIT, 0x10},
+	{0x3154, CRL_REG_LEN_08BIT, 0x10},
+	{0x3155, CRL_REG_LEN_08BIT, 0x00},
+	{0x3156, CRL_REG_LEN_08BIT, 0x03},
+	{0x3157, CRL_REG_LEN_08BIT, 0x00},
+	{0x3158, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3159, CRL_REG_LEN_08BIT, 0xff},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3160, CRL_REG_LEN_08BIT, 0x01},
+	{0x3161, CRL_REG_LEN_08BIT, 0x00},
+	{0x3162, CRL_REG_LEN_08BIT, 0x01},
+	{0x3163, CRL_REG_LEN_08BIT, 0x00},
+	{0x3164, CRL_REG_LEN_08BIT, 0x01},
+	{0x3165, CRL_REG_LEN_08BIT, 0x00},
+	{0x3190, CRL_REG_LEN_08BIT, 0x08},
+	{0x3191, CRL_REG_LEN_08BIT, 0x99},
+	{0x3193, CRL_REG_LEN_08BIT, 0x08},
+	{0x3194, CRL_REG_LEN_08BIT, 0x13},
+	{0x3195, CRL_REG_LEN_08BIT, 0x33},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x10},
+	{0x3198, CRL_REG_LEN_08BIT, 0x00},
+	{0x3199, CRL_REG_LEN_08BIT, 0x7f},
+	{0x319a, CRL_REG_LEN_08BIT, 0x80},
+	{0x319b, CRL_REG_LEN_08BIT, 0xff},
+	{0x319c, CRL_REG_LEN_08BIT, 0x80},
+	{0x319d, CRL_REG_LEN_08BIT, 0xbf},
+	{0x319e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x319f, CRL_REG_LEN_08BIT, 0xff},
+	{0x31a0, CRL_REG_LEN_08BIT, 0x24},
+	{0x31a1, CRL_REG_LEN_08BIT, 0x55},
+	{0x31a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x31a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b2, CRL_REG_LEN_08BIT, 0x02},
+	{0x31b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b5, CRL_REG_LEN_08BIT, 0x01},
+	{0x31b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x31ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d0, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d1, CRL_REG_LEN_08BIT, 0x34},
+	{0x31d2, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d4, CRL_REG_LEN_08BIT, 0x2d},
+	{0x31d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x31d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x31d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d9, CRL_REG_LEN_08BIT, 0x64},
+	{0x31da, CRL_REG_LEN_08BIT, 0x00},
+	{0x31db, CRL_REG_LEN_08BIT, 0x30},
+	{0x31dc, CRL_REG_LEN_08BIT, 0x04},
+	{0x31dd, CRL_REG_LEN_08BIT, 0x69},
+	{0x31de, CRL_REG_LEN_08BIT, 0x0a},
+	{0x31df, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31e0, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e1, CRL_REG_LEN_08BIT, 0x32},
+	{0x31e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x08},
+	{0x31e5, CRL_REG_LEN_08BIT, 0x80},
+	{0x31e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e7, CRL_REG_LEN_08BIT, 0x2c},
+	{0x31e8, CRL_REG_LEN_08BIT, 0x6c},
+	{0x31e9, CRL_REG_LEN_08BIT, 0xac},
+	{0x31ea, CRL_REG_LEN_08BIT, 0xec},
+	{0x31eb, CRL_REG_LEN_08BIT, 0x3f},
+	{0x31ec, CRL_REG_LEN_08BIT, 0x0f},
+	{0x31ed, CRL_REG_LEN_08BIT, 0x20},
+	{0x31ee, CRL_REG_LEN_08BIT, 0x04},
+	{0x31ef, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f0, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f1, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f3, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f4, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f5, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f6, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f7, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f8, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f9, CRL_REG_LEN_08BIT, 0x90},
+	{0x31fa, CRL_REG_LEN_08BIT, 0x04},
+	{0x31fb, CRL_REG_LEN_08BIT, 0x48},
+	{0x31fd, CRL_REG_LEN_08BIT, 0xcb},
+	{0x31fe, CRL_REG_LEN_08BIT, 0x01},
+	{0x31ff, CRL_REG_LEN_08BIT, 0x03},
+	{0x3200, CRL_REG_LEN_08BIT, 0x00},
+	{0x3201, CRL_REG_LEN_08BIT, 0xff},
+	{0x3202, CRL_REG_LEN_08BIT, 0x00},
+	{0x3203, CRL_REG_LEN_08BIT, 0xff},
+	{0x3204, CRL_REG_LEN_08BIT, 0xff},
+	{0x3205, CRL_REG_LEN_08BIT, 0xff},
+	{0x3206, CRL_REG_LEN_08BIT, 0xff},
+	{0x3207, CRL_REG_LEN_08BIT, 0xff},
+	{0x3208, CRL_REG_LEN_08BIT, 0xff},
+	{0x3209, CRL_REG_LEN_08BIT, 0xff},
+	{0x320a, CRL_REG_LEN_08BIT, 0xff},
+	{0x320b, CRL_REG_LEN_08BIT, 0x1b},
+	{0x320c, CRL_REG_LEN_08BIT, 0x1f},
+	{0x320d, CRL_REG_LEN_08BIT, 0x1e},
+	{0x320e, CRL_REG_LEN_08BIT, 0x30},
+	{0x320f, CRL_REG_LEN_08BIT, 0x2d},
+	{0x3210, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3211, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3212, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3213, CRL_REG_LEN_08BIT, 0x24},
+	{0x3214, CRL_REG_LEN_08BIT, 0x22},
+	{0x3215, CRL_REG_LEN_08BIT, 0x00},
+	{0x3216, CRL_REG_LEN_08BIT, 0x04},
+	{0x3217, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3218, CRL_REG_LEN_08BIT, 0x6c},
+	{0x3219, CRL_REG_LEN_08BIT, 0xac},
+	{0x321a, CRL_REG_LEN_08BIT, 0xec},
+	{0x321b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3230, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3231, CRL_REG_LEN_08BIT, 0x00},
+	{0x3232, CRL_REG_LEN_08BIT, 0x80},
+	{0x3233, CRL_REG_LEN_08BIT, 0x00},
+	{0x3234, CRL_REG_LEN_08BIT, 0x10},
+	{0x3235, CRL_REG_LEN_08BIT, 0xaa},
+	{0x3236, CRL_REG_LEN_08BIT, 0x55},
+	{0x3237, CRL_REG_LEN_08BIT, 0x99},
+	{0x3238, CRL_REG_LEN_08BIT, 0x66},
+	{0x3239, CRL_REG_LEN_08BIT, 0x08},
+	{0x323a, CRL_REG_LEN_08BIT, 0x88},
+	{0x323b, CRL_REG_LEN_08BIT, 0x00},
+	{0x323c, CRL_REG_LEN_08BIT, 0x00},
+	{0x323d, CRL_REG_LEN_08BIT, 0x03},
+	{0x3250, CRL_REG_LEN_08BIT, 0x33},
+	{0x3251, CRL_REG_LEN_08BIT, 0x00},
+	{0x3252, CRL_REG_LEN_08BIT, 0x20},
+	{0x3253, CRL_REG_LEN_08BIT, 0x00},
+	{0x3254, CRL_REG_LEN_08BIT, 0x00},
+	{0x3255, CRL_REG_LEN_08BIT, 0x01},
+	{0x3256, CRL_REG_LEN_08BIT, 0x00},
+	{0x3257, CRL_REG_LEN_08BIT, 0x00},
+	{0x3258, CRL_REG_LEN_08BIT, 0x00},
+	{0x3270, CRL_REG_LEN_08BIT, 0x01},
+	{0x3271, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3272, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3273, CRL_REG_LEN_08BIT, 0x01},
+	{0x3274, CRL_REG_LEN_08BIT, 0x00},
+	{0x3275, CRL_REG_LEN_08BIT, 0x40},
+	{0x3276, CRL_REG_LEN_08BIT, 0x02},
+	{0x3277, CRL_REG_LEN_08BIT, 0x08},
+	{0x3278, CRL_REG_LEN_08BIT, 0x10},
+	{0x3279, CRL_REG_LEN_08BIT, 0x04},
+	{0x327a, CRL_REG_LEN_08BIT, 0x00},
+	{0x327b, CRL_REG_LEN_08BIT, 0x03},
+	{0x327c, CRL_REG_LEN_08BIT, 0x10},
+	{0x327d, CRL_REG_LEN_08BIT, 0x60},
+	{0x327e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x327f, CRL_REG_LEN_08BIT, 0x06},
+	{0x3288, CRL_REG_LEN_08BIT, 0x10},
+	{0x3289, CRL_REG_LEN_08BIT, 0x00},
+	{0x328a, CRL_REG_LEN_08BIT, 0x08},
+	{0x328b, CRL_REG_LEN_08BIT, 0x00},
+	{0x328c, CRL_REG_LEN_08BIT, 0x04},
+	{0x328d, CRL_REG_LEN_08BIT, 0x00},
+	{0x328e, CRL_REG_LEN_08BIT, 0x02},
+	{0x328f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3290, CRL_REG_LEN_08BIT, 0x20},
+	{0x3291, CRL_REG_LEN_08BIT, 0x00},
+	{0x3292, CRL_REG_LEN_08BIT, 0x10},
+	{0x3293, CRL_REG_LEN_08BIT, 0x00},
+	{0x3294, CRL_REG_LEN_08BIT, 0x08},
+	{0x3295, CRL_REG_LEN_08BIT, 0x00},
+	{0x3296, CRL_REG_LEN_08BIT, 0x04},
+	{0x3297, CRL_REG_LEN_08BIT, 0x00},
+	{0x3298, CRL_REG_LEN_08BIT, 0x40},
+	{0x3299, CRL_REG_LEN_08BIT, 0x00},
+	{0x329a, CRL_REG_LEN_08BIT, 0x20},
+	{0x329b, CRL_REG_LEN_08BIT, 0x00},
+	{0x329c, CRL_REG_LEN_08BIT, 0x10},
+	{0x329d, CRL_REG_LEN_08BIT, 0x00},
+	{0x329e, CRL_REG_LEN_08BIT, 0x08},
+	{0x329f, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a0, CRL_REG_LEN_08BIT, 0x7f},
+	{0x32a1, CRL_REG_LEN_08BIT, 0xff},
+	{0x32a2, CRL_REG_LEN_08BIT, 0x40},
+	{0x32a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a4, CRL_REG_LEN_08BIT, 0x20},
+	{0x32a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a6, CRL_REG_LEN_08BIT, 0x10},
+	{0x32a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ad, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x32af, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x32be, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c8, CRL_REG_LEN_08BIT, 0x87},
+	{0x32c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x3330, CRL_REG_LEN_08BIT, 0x03},
+	{0x3331, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3332, CRL_REG_LEN_08BIT, 0x02},
+	{0x3333, CRL_REG_LEN_08BIT, 0x24},
+	{0x3334, CRL_REG_LEN_08BIT, 0x00},
+	{0x3335, CRL_REG_LEN_08BIT, 0x00},
+	{0x3336, CRL_REG_LEN_08BIT, 0x00},
+	{0x3337, CRL_REG_LEN_08BIT, 0x00},
+	{0x3338, CRL_REG_LEN_08BIT, 0x03},
+	{0x3339, CRL_REG_LEN_08BIT, 0xc8},
+	{0x333a, CRL_REG_LEN_08BIT, 0x02},
+	{0x333b, CRL_REG_LEN_08BIT, 0x24},
+	{0x333c, CRL_REG_LEN_08BIT, 0x00},
+	{0x333d, CRL_REG_LEN_08BIT, 0x00},
+	{0x333e, CRL_REG_LEN_08BIT, 0x00},
+	{0x333f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3340, CRL_REG_LEN_08BIT, 0x03},
+	{0x3341, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3342, CRL_REG_LEN_08BIT, 0x02},
+	{0x3343, CRL_REG_LEN_08BIT, 0x24},
+	{0x3344, CRL_REG_LEN_08BIT, 0x00},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3346, CRL_REG_LEN_08BIT, 0x00},
+	{0x3347, CRL_REG_LEN_08BIT, 0x00},
+	{0x3348, CRL_REG_LEN_08BIT, 0x40},
+	{0x3349, CRL_REG_LEN_08BIT, 0x00},
+	{0x334a, CRL_REG_LEN_08BIT, 0x00},
+	{0x334b, CRL_REG_LEN_08BIT, 0x00},
+	{0x334c, CRL_REG_LEN_08BIT, 0x00},
+	{0x334d, CRL_REG_LEN_08BIT, 0x00},
+	{0x334e, CRL_REG_LEN_08BIT, 0x80},
+	{0x3360, CRL_REG_LEN_08BIT, 0x01},
+	{0x3361, CRL_REG_LEN_08BIT, 0x00},
+	{0x3362, CRL_REG_LEN_08BIT, 0x01},
+	{0x3363, CRL_REG_LEN_08BIT, 0x00},
+	{0x3364, CRL_REG_LEN_08BIT, 0x01},
+	{0x3365, CRL_REG_LEN_08BIT, 0x00},
+	{0x3366, CRL_REG_LEN_08BIT, 0x01},
+	{0x3367, CRL_REG_LEN_08BIT, 0x00},
+	{0x3368, CRL_REG_LEN_08BIT, 0x01},
+	{0x3369, CRL_REG_LEN_08BIT, 0x00},
+	{0x336a, CRL_REG_LEN_08BIT, 0x01},
+	{0x336b, CRL_REG_LEN_08BIT, 0x00},
+	{0x336c, CRL_REG_LEN_08BIT, 0x01},
+	{0x336d, CRL_REG_LEN_08BIT, 0x00},
+	{0x336e, CRL_REG_LEN_08BIT, 0x01},
+	{0x336f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3370, CRL_REG_LEN_08BIT, 0x01},
+	{0x3371, CRL_REG_LEN_08BIT, 0x00},
+	{0x3372, CRL_REG_LEN_08BIT, 0x01},
+	{0x3373, CRL_REG_LEN_08BIT, 0x00},
+	{0x3374, CRL_REG_LEN_08BIT, 0x01},
+	{0x3375, CRL_REG_LEN_08BIT, 0x00},
+	{0x3376, CRL_REG_LEN_08BIT, 0x01},
+	{0x3377, CRL_REG_LEN_08BIT, 0x00},
+	{0x3378, CRL_REG_LEN_08BIT, 0x00},
+	{0x3379, CRL_REG_LEN_08BIT, 0x00},
+	{0x337a, CRL_REG_LEN_08BIT, 0x00},
+	{0x337b, CRL_REG_LEN_08BIT, 0x00},
+	{0x337c, CRL_REG_LEN_08BIT, 0x00},
+	{0x337d, CRL_REG_LEN_08BIT, 0x00},
+	{0x337e, CRL_REG_LEN_08BIT, 0x00},
+	{0x337f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3380, CRL_REG_LEN_08BIT, 0x00},
+	{0x3381, CRL_REG_LEN_08BIT, 0x00},
+	{0x3382, CRL_REG_LEN_08BIT, 0x00},
+	{0x3383, CRL_REG_LEN_08BIT, 0x00},
+	{0x3384, CRL_REG_LEN_08BIT, 0x00},
+	{0x3385, CRL_REG_LEN_08BIT, 0x00},
+	{0x3386, CRL_REG_LEN_08BIT, 0x00},
+	{0x3387, CRL_REG_LEN_08BIT, 0x00},
+	{0x3388, CRL_REG_LEN_08BIT, 0x00},
+	{0x3389, CRL_REG_LEN_08BIT, 0x00},
+	{0x338a, CRL_REG_LEN_08BIT, 0x00},
+	{0x338b, CRL_REG_LEN_08BIT, 0x00},
+	{0x338c, CRL_REG_LEN_08BIT, 0x00},
+	{0x338d, CRL_REG_LEN_08BIT, 0x00},
+	{0x338e, CRL_REG_LEN_08BIT, 0x00},
+	{0x338f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3390, CRL_REG_LEN_08BIT, 0x00},
+	{0x3391, CRL_REG_LEN_08BIT, 0x00},
+	{0x3392, CRL_REG_LEN_08BIT, 0x00},
+	{0x3393, CRL_REG_LEN_08BIT, 0x00},
+	{0x3394, CRL_REG_LEN_08BIT, 0x00},
+	{0x3395, CRL_REG_LEN_08BIT, 0x00},
+	{0x3396, CRL_REG_LEN_08BIT, 0x00},
+	{0x3397, CRL_REG_LEN_08BIT, 0x00},
+	{0x3398, CRL_REG_LEN_08BIT, 0x00},
+	{0x3399, CRL_REG_LEN_08BIT, 0x00},
+	{0x339a, CRL_REG_LEN_08BIT, 0x00},
+	{0x339b, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b1, CRL_REG_LEN_08BIT, 0x50},
+	{0x33b2, CRL_REG_LEN_08BIT, 0x01},
+	{0x33b3, CRL_REG_LEN_08BIT, 0xff},
+	{0x33b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0x33b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0x33b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x33ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x33bb, CRL_REG_LEN_08BIT, 0x1f},
+	{0x33bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bd, CRL_REG_LEN_08BIT, 0x01},
+	{0x33be, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bf, CRL_REG_LEN_08BIT, 0x01},
+	{0x33c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e0, CRL_REG_LEN_08BIT, 0x14},
+	{0x33e1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33e2, CRL_REG_LEN_08BIT, 0x02},
+	{0x33e3, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e5, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e7, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e8, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33e9, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ea, CRL_REG_LEN_08BIT, 0x02},
+	{0x33eb, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ec, CRL_REG_LEN_08BIT, 0x03},
+	{0x33ed, CRL_REG_LEN_08BIT, 0x01},
+	{0x33ee, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ef, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f0, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f1, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33f4, CRL_REG_LEN_08BIT, 0x03},
+	{0x33f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x33f6, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x33f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x33f9, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x33fc, CRL_REG_LEN_08BIT, 0x04},
+	{0x33fd, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33fe, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ff, CRL_REG_LEN_08BIT, 0x02},
+	{0x3400, CRL_REG_LEN_08BIT, 0x02},
+	{0x3401, CRL_REG_LEN_08BIT, 0x03},
+	{0x3402, CRL_REG_LEN_08BIT, 0x01},
+	{0x3403, CRL_REG_LEN_08BIT, 0x02},
+	{0x3404, CRL_REG_LEN_08BIT, 0x08},
+	{0x3405, CRL_REG_LEN_08BIT, 0x08},
+	{0x3406, CRL_REG_LEN_08BIT, 0x04},
+	{0x3407, CRL_REG_LEN_08BIT, 0x04},
+	{0x3408, CRL_REG_LEN_08BIT, 0x00},
+	{0x3409, CRL_REG_LEN_08BIT, 0x03},
+	{0x340a, CRL_REG_LEN_08BIT, 0x14},
+	{0x340b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x340c, CRL_REG_LEN_08BIT, 0x04},
+	{0x340d, CRL_REG_LEN_08BIT, 0x02},
+	{0x340e, CRL_REG_LEN_08BIT, 0x01},
+	{0x340f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3410, CRL_REG_LEN_08BIT, 0x00},
+	{0x3411, CRL_REG_LEN_08BIT, 0x04},
+	{0x3412, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3413, CRL_REG_LEN_08BIT, 0x02},
+	{0x3414, CRL_REG_LEN_08BIT, 0x02},
+	{0x3415, CRL_REG_LEN_08BIT, 0x02},
+	{0x3416, CRL_REG_LEN_08BIT, 0x03},
+	{0x3417, CRL_REG_LEN_08BIT, 0x02},
+	{0x3418, CRL_REG_LEN_08BIT, 0x05},
+	{0x3419, CRL_REG_LEN_08BIT, 0x0a},
+	{0x341a, CRL_REG_LEN_08BIT, 0x08},
+	{0x341b, CRL_REG_LEN_08BIT, 0x04},
+	{0x341c, CRL_REG_LEN_08BIT, 0x04},
+	{0x341d, CRL_REG_LEN_08BIT, 0x00},
+	{0x341e, CRL_REG_LEN_08BIT, 0x03},
+	{0x3440, CRL_REG_LEN_08BIT, 0x00},
+	{0x3441, CRL_REG_LEN_08BIT, 0x00},
+	{0x3442, CRL_REG_LEN_08BIT, 0x00},
+	{0x3443, CRL_REG_LEN_08BIT, 0x00},
+	{0x3444, CRL_REG_LEN_08BIT, 0x02},
+	{0x3445, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3446, CRL_REG_LEN_08BIT, 0x02},
+	{0x3447, CRL_REG_LEN_08BIT, 0x08},
+	{0x3448, CRL_REG_LEN_08BIT, 0x00},
+	{0x3460, CRL_REG_LEN_08BIT, 0x40},
+	{0x3461, CRL_REG_LEN_08BIT, 0x40},
+	{0x3462, CRL_REG_LEN_08BIT, 0x40},
+	{0x3463, CRL_REG_LEN_08BIT, 0x40},
+	{0x3464, CRL_REG_LEN_08BIT, 0x03},
+	{0x3465, CRL_REG_LEN_08BIT, 0x01},
+	{0x3466, CRL_REG_LEN_08BIT, 0x01},
+	{0x3467, CRL_REG_LEN_08BIT, 0x02},
+	{0x3468, CRL_REG_LEN_08BIT, 0x30},
+	{0x3469, CRL_REG_LEN_08BIT, 0x00},
+	{0x346a, CRL_REG_LEN_08BIT, 0x33},
+	{0x346b, CRL_REG_LEN_08BIT, 0xbf},
+	{0x3480, CRL_REG_LEN_08BIT, 0x40},
+	{0x3481, CRL_REG_LEN_08BIT, 0x00},
+	{0x3482, CRL_REG_LEN_08BIT, 0x00},
+	{0x3483, CRL_REG_LEN_08BIT, 0x00},
+	{0x3484, CRL_REG_LEN_08BIT, 0x0d},
+	{0x3485, CRL_REG_LEN_08BIT, 0x00},
+	{0x3486, CRL_REG_LEN_08BIT, 0x00},
+	{0x3487, CRL_REG_LEN_08BIT, 0x00},
+	{0x3488, CRL_REG_LEN_08BIT, 0x00},
+	{0x3489, CRL_REG_LEN_08BIT, 0x00},
+	{0x348a, CRL_REG_LEN_08BIT, 0x00},
+	{0x348b, CRL_REG_LEN_08BIT, 0x04},
+	{0x348c, CRL_REG_LEN_08BIT, 0x00},
+	{0x348d, CRL_REG_LEN_08BIT, 0x01},
+	{0x348f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3030, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x7000, CRL_REG_LEN_08BIT, 0x58},
+	{0x7001, CRL_REG_LEN_08BIT, 0x7a},
+	{0x7002, CRL_REG_LEN_08BIT, 0x1a},
+	{0x7003, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7004, CRL_REG_LEN_08BIT, 0x03},
+	{0x7005, CRL_REG_LEN_08BIT, 0xda},
+	{0x7006, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7007, CRL_REG_LEN_08BIT, 0x03},
+	{0x7008, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7009, CRL_REG_LEN_08BIT, 0x06},
+	{0x700a, CRL_REG_LEN_08BIT, 0xe6},
+	{0x700b, CRL_REG_LEN_08BIT, 0xec},
+	{0x700c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700d, CRL_REG_LEN_08BIT, 0xff},
+	{0x700e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700f, CRL_REG_LEN_08BIT, 0x73},
+	{0x7010, CRL_REG_LEN_08BIT, 0xda},
+	{0x7011, CRL_REG_LEN_08BIT, 0x72},
+	{0x7012, CRL_REG_LEN_08BIT, 0x76},
+	{0x7013, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7014, CRL_REG_LEN_08BIT, 0xee},
+	{0x7015, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7016, CRL_REG_LEN_08BIT, 0xac},
+	{0x7017, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7018, CRL_REG_LEN_08BIT, 0xac},
+	{0x7019, CRL_REG_LEN_08BIT, 0xd1},
+	{0x701a, CRL_REG_LEN_08BIT, 0x50},
+	{0x701b, CRL_REG_LEN_08BIT, 0xac},
+	{0x701c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x701d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x701e, CRL_REG_LEN_08BIT, 0x2e},
+	{0x701f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7020, CRL_REG_LEN_08BIT, 0x00},
+	{0x7021, CRL_REG_LEN_08BIT, 0xdc},
+	{0x7022, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7023, CRL_REG_LEN_08BIT, 0xb0},
+	{0x7024, CRL_REG_LEN_08BIT, 0x6e},
+	{0x7025, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7026, CRL_REG_LEN_08BIT, 0x01},
+	{0x7027, CRL_REG_LEN_08BIT, 0xd7},
+	{0x7028, CRL_REG_LEN_08BIT, 0xed},
+	{0x7029, CRL_REG_LEN_08BIT, 0xe1},
+	{0x702a, CRL_REG_LEN_08BIT, 0x36},
+	{0x702b, CRL_REG_LEN_08BIT, 0x30},
+	{0x702c, CRL_REG_LEN_08BIT, 0xd3},
+	{0x702d, CRL_REG_LEN_08BIT, 0x2e},
+	{0x702e, CRL_REG_LEN_08BIT, 0x54},
+	{0x702f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7030, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7031, CRL_REG_LEN_08BIT, 0x22},
+	{0x7032, CRL_REG_LEN_08BIT, 0x66},
+	{0x7033, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7034, CRL_REG_LEN_08BIT, 0x24},
+	{0x7035, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7036, CRL_REG_LEN_08BIT, 0x28},
+	{0x7037, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7038, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7039, CRL_REG_LEN_08BIT, 0xa1},
+	{0x703a, CRL_REG_LEN_08BIT, 0xac},
+	{0x703b, CRL_REG_LEN_08BIT, 0xd8},
+	{0x703c, CRL_REG_LEN_08BIT, 0xd6},
+	{0x703d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x703e, CRL_REG_LEN_08BIT, 0x04},
+	{0x703f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7040, CRL_REG_LEN_08BIT, 0xb7},
+	{0x7041, CRL_REG_LEN_08BIT, 0x04},
+	{0x7042, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7043, CRL_REG_LEN_08BIT, 0x08},
+	{0x7044, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7045, CRL_REG_LEN_08BIT, 0xd9},
+	{0x7046, CRL_REG_LEN_08BIT, 0xad},
+	{0x7047, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7048, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7049, CRL_REG_LEN_08BIT, 0x19},
+	{0x704a, CRL_REG_LEN_08BIT, 0xc1},
+	{0x704b, CRL_REG_LEN_08BIT, 0x27},
+	{0x704c, CRL_REG_LEN_08BIT, 0xe7},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x704e, CRL_REG_LEN_08BIT, 0x50},
+	{0x704f, CRL_REG_LEN_08BIT, 0x20},
+	{0x7050, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7051, CRL_REG_LEN_08BIT, 0x02},
+	{0x7052, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7053, CRL_REG_LEN_08BIT, 0x17},
+	{0x7054, CRL_REG_LEN_08BIT, 0xdb},
+	{0x7055, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7056, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7057, CRL_REG_LEN_08BIT, 0x00},
+	{0x7058, CRL_REG_LEN_08BIT, 0x28},
+	{0x7059, CRL_REG_LEN_08BIT, 0x54},
+	{0x705a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x705b, CRL_REG_LEN_08BIT, 0x14},
+	{0x705c, CRL_REG_LEN_08BIT, 0xab},
+	{0x705d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x705e, CRL_REG_LEN_08BIT, 0x06},
+	{0x705f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7060, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7061, CRL_REG_LEN_08BIT, 0x00},
+	{0x7062, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7063, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7064, CRL_REG_LEN_08BIT, 0x07},
+	{0x7065, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7066, CRL_REG_LEN_08BIT, 0x05},
+	{0x7067, CRL_REG_LEN_08BIT, 0xee},
+	{0x7068, CRL_REG_LEN_08BIT, 0xe6},
+	{0x7069, CRL_REG_LEN_08BIT, 0xad},
+	{0x706a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x706b, CRL_REG_LEN_08BIT, 0x26},
+	{0x706c, CRL_REG_LEN_08BIT, 0x19},
+	{0x706d, CRL_REG_LEN_08BIT, 0xc1},
+	{0x706e, CRL_REG_LEN_08BIT, 0x3a},
+	{0x706f, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7070, CRL_REG_LEN_08BIT, 0xaf},
+	{0x7071, CRL_REG_LEN_08BIT, 0x00},
+	{0x7072, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7073, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7074, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7075, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7076, CRL_REG_LEN_08BIT, 0xe7},
+	{0x7077, CRL_REG_LEN_08BIT, 0x00},
+	{0x7078, CRL_REG_LEN_08BIT, 0x15},
+	{0x7079, CRL_REG_LEN_08BIT, 0xc2},
+	{0x707a, CRL_REG_LEN_08BIT, 0x40},
+	{0x707b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x707c, CRL_REG_LEN_08BIT, 0xa4},
+	{0x707d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x707e, CRL_REG_LEN_08BIT, 0x3c},
+	{0x707f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7081, CRL_REG_LEN_08BIT, 0x64},
+	{0x7082, CRL_REG_LEN_08BIT, 0x29},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7084, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7085, CRL_REG_LEN_08BIT, 0x12},
+	{0x7086, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7087, CRL_REG_LEN_08BIT, 0x01},
+	{0x7088, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7089, CRL_REG_LEN_08BIT, 0xbc},
+	{0x708a, CRL_REG_LEN_08BIT, 0x01},
+	{0x708b, CRL_REG_LEN_08BIT, 0xac},
+	{0x708c, CRL_REG_LEN_08BIT, 0x37},
+	{0x708d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x708e, CRL_REG_LEN_08BIT, 0xac},
+	{0x708f, CRL_REG_LEN_08BIT, 0x45},
+	{0x7090, CRL_REG_LEN_08BIT, 0xad},
+	{0x7091, CRL_REG_LEN_08BIT, 0x28},
+	{0x7092, CRL_REG_LEN_08BIT, 0x00},
+	{0x7093, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7094, CRL_REG_LEN_08BIT, 0x00},
+	{0x7095, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7096, CRL_REG_LEN_08BIT, 0x01},
+	{0x7097, CRL_REG_LEN_08BIT, 0x36},
+	{0x7098, CRL_REG_LEN_08BIT, 0xd3},
+	{0x7099, CRL_REG_LEN_08BIT, 0x30},
+	{0x709a, CRL_REG_LEN_08BIT, 0x04},
+	{0x709b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x709c, CRL_REG_LEN_08BIT, 0xd8},
+	{0x709d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x709e, CRL_REG_LEN_08BIT, 0xe9},
+	{0x709f, CRL_REG_LEN_08BIT, 0x00},
+	{0x70a0, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70a1, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a2, CRL_REG_LEN_08BIT, 0x62},
+	{0x70a3, CRL_REG_LEN_08BIT, 0x07},
+	{0x70a4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70a5, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a6, CRL_REG_LEN_08BIT, 0xad},
+	{0x70a7, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70a8, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70aa, CRL_REG_LEN_08BIT, 0x15},
+	{0x70ab, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70ac, CRL_REG_LEN_08BIT, 0x59},
+	{0x70ad, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70ae, CRL_REG_LEN_08BIT, 0xc9},
+	{0x70af, CRL_REG_LEN_08BIT, 0xc0},
+	{0x70b0, CRL_REG_LEN_08BIT, 0x55},
+	{0x70b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b2, CRL_REG_LEN_08BIT, 0x46},
+	{0x70b3, CRL_REG_LEN_08BIT, 0xa1},
+	{0x70b4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70b5, CRL_REG_LEN_08BIT, 0x64},
+	{0x70b6, CRL_REG_LEN_08BIT, 0x29},
+	{0x70b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x70ba, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70bb, CRL_REG_LEN_08BIT, 0x02},
+	{0x70bc, CRL_REG_LEN_08BIT, 0xd0},
+	{0x70bd, CRL_REG_LEN_08BIT, 0xdc},
+	{0x70be, CRL_REG_LEN_08BIT, 0xac},
+	{0x70bf, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x37},
+	{0x70c2, CRL_REG_LEN_08BIT, 0xac},
+	{0x70c3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x45},
+	{0x70c5, CRL_REG_LEN_08BIT, 0xad},
+	{0x70c6, CRL_REG_LEN_08BIT, 0x28},
+	{0x70c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ca, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70cb, CRL_REG_LEN_08BIT, 0x01},
+	{0x70cc, CRL_REG_LEN_08BIT, 0x36},
+	{0x70cd, CRL_REG_LEN_08BIT, 0x30},
+	{0x70ce, CRL_REG_LEN_08BIT, 0xe0},
+	{0x70cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0x70d0, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70d1, CRL_REG_LEN_08BIT, 0x0b},
+	{0x70d2, CRL_REG_LEN_08BIT, 0xd6},
+	{0x70d3, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70d4, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70d6, CRL_REG_LEN_08BIT, 0x62},
+	{0x70d7, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d8, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70d9, CRL_REG_LEN_08BIT, 0x05},
+	{0x70da, CRL_REG_LEN_08BIT, 0xad},
+	{0x70db, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70dc, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70dd, CRL_REG_LEN_08BIT, 0x46},
+	{0x70de, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70df, CRL_REG_LEN_08BIT, 0x07},
+	{0x70e0, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e2, CRL_REG_LEN_08BIT, 0xe3},
+	{0x70e3, CRL_REG_LEN_08BIT, 0x18},
+	{0x70e4, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70e5, CRL_REG_LEN_08BIT, 0xa2},
+	{0x70e6, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x64},
+	{0x70e8, CRL_REG_LEN_08BIT, 0xd1},
+	{0x70e9, CRL_REG_LEN_08BIT, 0xdd},
+	{0x70ea, CRL_REG_LEN_08BIT, 0xac},
+	{0x70eb, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70ed, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x19},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x46},
+	{0x70f0, CRL_REG_LEN_08BIT, 0x50},
+	{0x70f1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x70f2, CRL_REG_LEN_08BIT, 0xee},
+	{0x70f3, CRL_REG_LEN_08BIT, 0xe8},
+	{0x70f4, CRL_REG_LEN_08BIT, 0xe6},
+	{0x70f5, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70f6, CRL_REG_LEN_08BIT, 0x31},
+	{0x70f7, CRL_REG_LEN_08BIT, 0xe1},
+	{0x70f8, CRL_REG_LEN_08BIT, 0x36},
+	{0x70f9, CRL_REG_LEN_08BIT, 0x30},
+	{0x70fa, CRL_REG_LEN_08BIT, 0xd3},
+	{0x70fb, CRL_REG_LEN_08BIT, 0x2e},
+	{0x70fc, CRL_REG_LEN_08BIT, 0x54},
+	{0x70fd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x70fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x70ff, CRL_REG_LEN_08BIT, 0xec},
+	{0x7100, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7101, CRL_REG_LEN_08BIT, 0x50},
+	{0x7102, CRL_REG_LEN_08BIT, 0x20},
+	{0x7103, CRL_REG_LEN_08BIT, 0x04},
+	{0x7104, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7105, CRL_REG_LEN_08BIT, 0x02},
+	{0x7106, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7107, CRL_REG_LEN_08BIT, 0x18},
+	{0x7108, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7109, CRL_REG_LEN_08BIT, 0xb8},
+	{0x710a, CRL_REG_LEN_08BIT, 0x00},
+	{0x710b, CRL_REG_LEN_08BIT, 0x28},
+	{0x710c, CRL_REG_LEN_08BIT, 0x54},
+	{0x710d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x710e, CRL_REG_LEN_08BIT, 0x02},
+	{0x710f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7110, CRL_REG_LEN_08BIT, 0xda},
+	{0x7111, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7112, CRL_REG_LEN_08BIT, 0x04},
+	{0x7113, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7114, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7115, CRL_REG_LEN_08BIT, 0xab},
+	{0x7116, CRL_REG_LEN_08BIT, 0x00},
+	{0x7117, CRL_REG_LEN_08BIT, 0x62},
+	{0x7118, CRL_REG_LEN_08BIT, 0x07},
+	{0x7119, CRL_REG_LEN_08BIT, 0xb9},
+	{0x711a, CRL_REG_LEN_08BIT, 0x05},
+	{0x711b, CRL_REG_LEN_08BIT, 0xad},
+	{0x711c, CRL_REG_LEN_08BIT, 0xc3},
+	{0x711d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x711e, CRL_REG_LEN_08BIT, 0xe7},
+	{0x711f, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7120, CRL_REG_LEN_08BIT, 0x64},
+	{0x7121, CRL_REG_LEN_08BIT, 0x29},
+	{0x7122, CRL_REG_LEN_08BIT, 0x00},
+	{0x7123, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7124, CRL_REG_LEN_08BIT, 0x02},
+	{0x7125, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7126, CRL_REG_LEN_08BIT, 0x00},
+	{0x7127, CRL_REG_LEN_08BIT, 0x45},
+	{0x7128, CRL_REG_LEN_08BIT, 0xad},
+	{0x7129, CRL_REG_LEN_08BIT, 0xe2},
+	{0x712a, CRL_REG_LEN_08BIT, 0x28},
+	{0x712b, CRL_REG_LEN_08BIT, 0x00},
+	{0x712c, CRL_REG_LEN_08BIT, 0xb8},
+	{0x712d, CRL_REG_LEN_08BIT, 0x00},
+	{0x712e, CRL_REG_LEN_08BIT, 0xe0},
+	{0x712f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7130, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7131, CRL_REG_LEN_08BIT, 0xe9},
+	{0x7132, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7133, CRL_REG_LEN_08BIT, 0x03},
+	{0x7134, CRL_REG_LEN_08BIT, 0x00},
+	{0x7135, CRL_REG_LEN_08BIT, 0x30},
+	{0x7136, CRL_REG_LEN_08BIT, 0x62},
+	{0x7137, CRL_REG_LEN_08BIT, 0x07},
+	{0x7138, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7139, CRL_REG_LEN_08BIT, 0x05},
+	{0x713a, CRL_REG_LEN_08BIT, 0xad},
+	{0x713b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x713c, CRL_REG_LEN_08BIT, 0xcf},
+	{0x713d, CRL_REG_LEN_08BIT, 0x42},
+	{0x713e, CRL_REG_LEN_08BIT, 0xe4},
+	{0x713f, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7140, CRL_REG_LEN_08BIT, 0x07},
+	{0x7141, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7142, CRL_REG_LEN_08BIT, 0x00},
+	{0x7143, CRL_REG_LEN_08BIT, 0x00},
+	{0x7144, CRL_REG_LEN_08BIT, 0x17},
+	{0x7145, CRL_REG_LEN_08BIT, 0xc2},
+	{0x7146, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7147, CRL_REG_LEN_08BIT, 0xde},
+	{0x7148, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7149, CRL_REG_LEN_08BIT, 0xdf},
+	{0x714a, CRL_REG_LEN_08BIT, 0xac},
+	{0x714b, CRL_REG_LEN_08BIT, 0xd1},
+	{0x714c, CRL_REG_LEN_08BIT, 0x44},
+	{0x714d, CRL_REG_LEN_08BIT, 0xac},
+	{0x714e, CRL_REG_LEN_08BIT, 0xb9},
+	{0x714f, CRL_REG_LEN_08BIT, 0x76},
+	{0x7150, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7151, CRL_REG_LEN_08BIT, 0x08},
+	{0x7152, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7153, CRL_REG_LEN_08BIT, 0xfe},
+	{0x7154, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7155, CRL_REG_LEN_08BIT, 0xca},
+	{0x7156, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7157, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7158, CRL_REG_LEN_08BIT, 0xab},
+	{0x7159, CRL_REG_LEN_08BIT, 0x00},
+	{0x715a, CRL_REG_LEN_08BIT, 0xe1},
+	{0x715b, CRL_REG_LEN_08BIT, 0x36},
+	{0x715c, CRL_REG_LEN_08BIT, 0x30},
+	{0x715d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x715e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x715f, CRL_REG_LEN_08BIT, 0x29},
+	{0x7160, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7161, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7162, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7163, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7164, CRL_REG_LEN_08BIT, 0x01},
+	{0x7165, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7166, CRL_REG_LEN_08BIT, 0x0c},
+	{0x7167, CRL_REG_LEN_08BIT, 0x45},
+	{0x7168, CRL_REG_LEN_08BIT, 0xa4},
+	{0x7169, CRL_REG_LEN_08BIT, 0xbd},
+	{0x716a, CRL_REG_LEN_08BIT, 0x03},
+	{0x716b, CRL_REG_LEN_08BIT, 0xec},
+	{0x716c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x716d, CRL_REG_LEN_08BIT, 0x3d},
+	{0x716e, CRL_REG_LEN_08BIT, 0xc3},
+	{0x716f, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7170, CRL_REG_LEN_08BIT, 0x42},
+	{0x7171, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7172, CRL_REG_LEN_08BIT, 0x00},
+	{0x7173, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7174, CRL_REG_LEN_08BIT, 0xd5},
+	{0x7175, CRL_REG_LEN_08BIT, 0x00},
+	{0x7176, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7177, CRL_REG_LEN_08BIT, 0x00},
+	{0x7178, CRL_REG_LEN_08BIT, 0x74},
+	{0x7179, CRL_REG_LEN_08BIT, 0xbd},
+	{0x717a, CRL_REG_LEN_08BIT, 0x03},
+	{0x717b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x717c, CRL_REG_LEN_08BIT, 0x39},
+	{0x717d, CRL_REG_LEN_08BIT, 0x40},
+	{0x717e, CRL_REG_LEN_08BIT, 0x58},
+	{0x717f, CRL_REG_LEN_08BIT, 0xdd},
+	{0x7180, CRL_REG_LEN_08BIT, 0x19},
+	{0x7181, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7182, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7183, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7184, CRL_REG_LEN_08BIT, 0x06},
+	{0x7185, CRL_REG_LEN_08BIT, 0x17},
+	{0x7186, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7187, CRL_REG_LEN_08BIT, 0xc6},
+	{0x7188, CRL_REG_LEN_08BIT, 0xe8},
+	{0x7189, CRL_REG_LEN_08BIT, 0x00},
+	{0x718a, CRL_REG_LEN_08BIT, 0xc0},
+	{0x718b, CRL_REG_LEN_08BIT, 0xc8},
+	{0x718c, CRL_REG_LEN_08BIT, 0xe6},
+	{0x718d, CRL_REG_LEN_08BIT, 0x95},
+	{0x718e, CRL_REG_LEN_08BIT, 0x15},
+	{0x718f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7190, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7191, CRL_REG_LEN_08BIT, 0x19},
+	{0x7192, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7193, CRL_REG_LEN_08BIT, 0xf6},
+	{0x7194, CRL_REG_LEN_08BIT, 0x14},
+	{0x7195, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7196, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7197, CRL_REG_LEN_08BIT, 0xd1},
+	{0x7198, CRL_REG_LEN_08BIT, 0xac},
+	{0x7199, CRL_REG_LEN_08BIT, 0x37},
+	{0x719a, CRL_REG_LEN_08BIT, 0xbc},
+	{0x719b, CRL_REG_LEN_08BIT, 0x35},
+	{0x719c, CRL_REG_LEN_08BIT, 0x36},
+	{0x719d, CRL_REG_LEN_08BIT, 0x30},
+	{0x719e, CRL_REG_LEN_08BIT, 0xe1},
+	{0x719f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x71a0, CRL_REG_LEN_08BIT, 0x7a},
+	{0x71a1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x71a2, CRL_REG_LEN_08BIT, 0x0c},
+	{0x71a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x71a4, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71a5, CRL_REG_LEN_08BIT, 0xc7},
+	{0x71a6, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x71a8, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x71aa, CRL_REG_LEN_08BIT, 0x56},
+	{0x71ab, CRL_REG_LEN_08BIT, 0xc0},
+	{0x71ac, CRL_REG_LEN_08BIT, 0xda},
+	{0x71ad, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71ae, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71af, CRL_REG_LEN_08BIT, 0x56},
+	{0x71b0, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71b1, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71b2, CRL_REG_LEN_08BIT, 0x08},
+	{0x71b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b4, CRL_REG_LEN_08BIT, 0x57},
+	{0x71b5, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71b6, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71b7, CRL_REG_LEN_08BIT, 0x36},
+	{0x71b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b9, CRL_REG_LEN_08BIT, 0x54},
+	{0x71ba, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71bb, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71bc, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71bd, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71be, CRL_REG_LEN_08BIT, 0x56},
+	{0x71bf, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71c0, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71c1, CRL_REG_LEN_08BIT, 0x08},
+	{0x71c2, CRL_REG_LEN_08BIT, 0x57},
+	{0x71c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c4, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71c5, CRL_REG_LEN_08BIT, 0x36},
+	{0x71c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c7, CRL_REG_LEN_08BIT, 0x54},
+	{0x71c8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71c9, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71ca, CRL_REG_LEN_08BIT, 0x18},
+	{0x71cb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x71cd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x71cf, CRL_REG_LEN_08BIT, 0x56},
+	{0x71d0, CRL_REG_LEN_08BIT, 0x08},
+	{0x71d1, CRL_REG_LEN_08BIT, 0x57},
+	{0x71d2, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71d3, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71d4, CRL_REG_LEN_08BIT, 0x42},
+	{0x71d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x71d6, CRL_REG_LEN_08BIT, 0x54},
+	{0x71d7, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71d8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71d9, CRL_REG_LEN_08BIT, 0xab},
+	{0x71da, CRL_REG_LEN_08BIT, 0x00},
+	{0x71db, CRL_REG_LEN_08BIT, 0x66},
+	{0x71dc, CRL_REG_LEN_08BIT, 0x62},
+	{0x71dd, CRL_REG_LEN_08BIT, 0x06},
+	{0x71de, CRL_REG_LEN_08BIT, 0x74},
+	{0x71df, CRL_REG_LEN_08BIT, 0xb9},
+	{0x71e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x71e1, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e2, CRL_REG_LEN_08BIT, 0x14},
+	{0x71e3, CRL_REG_LEN_08BIT, 0x0e},
+	{0x71e4, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e5, CRL_REG_LEN_08BIT, 0x04},
+	{0x71e6, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7600, CRL_REG_LEN_08BIT, 0x04},
+	{0x7601, CRL_REG_LEN_08BIT, 0x80},
+	{0x7602, CRL_REG_LEN_08BIT, 0x07},
+	{0x7603, CRL_REG_LEN_08BIT, 0x44},
+	{0x7604, CRL_REG_LEN_08BIT, 0x05},
+	{0x7605, CRL_REG_LEN_08BIT, 0x33},
+	{0x7606, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7607, CRL_REG_LEN_08BIT, 0x00},
+	{0x7608, CRL_REG_LEN_08BIT, 0x07},
+	{0x7609, CRL_REG_LEN_08BIT, 0x40},
+	{0x760a, CRL_REG_LEN_08BIT, 0x04},
+	{0x760b, CRL_REG_LEN_08BIT, 0xe5},
+	{0x760c, CRL_REG_LEN_08BIT, 0x06},
+	{0x760d, CRL_REG_LEN_08BIT, 0x50},
+	{0x760e, CRL_REG_LEN_08BIT, 0x04},
+	{0x760f, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7610, CRL_REG_LEN_08BIT, 0x00},
+	{0x7611, CRL_REG_LEN_08BIT, 0x00},
+	{0x7612, CRL_REG_LEN_08BIT, 0x06},
+	{0x7613, CRL_REG_LEN_08BIT, 0x5c},
+	{0x7614, CRL_REG_LEN_08BIT, 0x00},
+	{0x7615, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7616, CRL_REG_LEN_08BIT, 0x06},
+	{0x7617, CRL_REG_LEN_08BIT, 0x1c},
+	{0x7618, CRL_REG_LEN_08BIT, 0x00},
+	{0x7619, CRL_REG_LEN_08BIT, 0x02},
+	{0x761a, CRL_REG_LEN_08BIT, 0x06},
+	{0x761b, CRL_REG_LEN_08BIT, 0xa2},
+	{0x761c, CRL_REG_LEN_08BIT, 0x00},
+	{0x761d, CRL_REG_LEN_08BIT, 0x01},
+	{0x761e, CRL_REG_LEN_08BIT, 0x06},
+	{0x761f, CRL_REG_LEN_08BIT, 0xae},
+	{0x7620, CRL_REG_LEN_08BIT, 0x00},
+	{0x7621, CRL_REG_LEN_08BIT, 0x0e},
+	{0x7622, CRL_REG_LEN_08BIT, 0x05},
+	{0x7623, CRL_REG_LEN_08BIT, 0x30},
+	{0x7624, CRL_REG_LEN_08BIT, 0x07},
+	{0x7625, CRL_REG_LEN_08BIT, 0x00},
+	{0x7626, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7627, CRL_REG_LEN_08BIT, 0x00},
+	{0x7628, CRL_REG_LEN_08BIT, 0x04},
+	{0x7629, CRL_REG_LEN_08BIT, 0xe5},
+	{0x762a, CRL_REG_LEN_08BIT, 0x05},
+	{0x762b, CRL_REG_LEN_08BIT, 0x33},
+	{0x762c, CRL_REG_LEN_08BIT, 0x06},
+	{0x762d, CRL_REG_LEN_08BIT, 0x12},
+	{0x762e, CRL_REG_LEN_08BIT, 0x00},
+	{0x762f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7630, CRL_REG_LEN_08BIT, 0x06},
+	{0x7631, CRL_REG_LEN_08BIT, 0x52},
+	{0x7632, CRL_REG_LEN_08BIT, 0x00},
+	{0x7633, CRL_REG_LEN_08BIT, 0x01},
+	{0x7634, CRL_REG_LEN_08BIT, 0x06},
+	{0x7635, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7636, CRL_REG_LEN_08BIT, 0x04},
+	{0x7637, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7638, CRL_REG_LEN_08BIT, 0x00},
+	{0x7639, CRL_REG_LEN_08BIT, 0x01},
+	{0x763a, CRL_REG_LEN_08BIT, 0x05},
+	{0x763b, CRL_REG_LEN_08BIT, 0x30},
+	{0x763c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x763d, CRL_REG_LEN_08BIT, 0x00},
+	{0x763e, CRL_REG_LEN_08BIT, 0x06},
+	{0x763f, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7640, CRL_REG_LEN_08BIT, 0x00},
+	{0x7641, CRL_REG_LEN_08BIT, 0x02},
+	{0x7642, CRL_REG_LEN_08BIT, 0x06},
+	{0x7643, CRL_REG_LEN_08BIT, 0x26},
+	{0x7644, CRL_REG_LEN_08BIT, 0x00},
+	{0x7645, CRL_REG_LEN_08BIT, 0x02},
+	{0x7646, CRL_REG_LEN_08BIT, 0x05},
+	{0x7647, CRL_REG_LEN_08BIT, 0x33},
+	{0x7648, CRL_REG_LEN_08BIT, 0x06},
+	{0x7649, CRL_REG_LEN_08BIT, 0x20},
+	{0x764a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x764b, CRL_REG_LEN_08BIT, 0x00},
+	{0x764c, CRL_REG_LEN_08BIT, 0x06},
+	{0x764d, CRL_REG_LEN_08BIT, 0x56},
+	{0x764e, CRL_REG_LEN_08BIT, 0x00},
+	{0x764f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7650, CRL_REG_LEN_08BIT, 0x06},
+	{0x7651, CRL_REG_LEN_08BIT, 0x16},
+	{0x7652, CRL_REG_LEN_08BIT, 0x05},
+	{0x7653, CRL_REG_LEN_08BIT, 0x33},
+	{0x7654, CRL_REG_LEN_08BIT, 0x06},
+	{0x7655, CRL_REG_LEN_08BIT, 0x10},
+	{0x7656, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7657, CRL_REG_LEN_08BIT, 0x00},
+	{0x7658, CRL_REG_LEN_08BIT, 0x06},
+	{0x7659, CRL_REG_LEN_08BIT, 0x10},
+	{0x765a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765b, CRL_REG_LEN_08BIT, 0x00},
+	{0x765c, CRL_REG_LEN_08BIT, 0x06},
+	{0x765d, CRL_REG_LEN_08BIT, 0x20},
+	{0x765e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7660, CRL_REG_LEN_08BIT, 0x00},
+	{0x7661, CRL_REG_LEN_08BIT, 0x00},
+	{0x7662, CRL_REG_LEN_08BIT, 0x00},
+	{0x7663, CRL_REG_LEN_08BIT, 0x02},
+	{0x7664, CRL_REG_LEN_08BIT, 0x04},
+	{0x7665, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7666, CRL_REG_LEN_08BIT, 0x04},
+	{0x7667, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7668, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7669, CRL_REG_LEN_08BIT, 0x00},
+	{0x766a, CRL_REG_LEN_08BIT, 0x00},
+	{0x766b, CRL_REG_LEN_08BIT, 0x00},
+	{0x766c, CRL_REG_LEN_08BIT, 0x00},
+	{0x766d, CRL_REG_LEN_08BIT, 0x01},
+	{0x766e, CRL_REG_LEN_08BIT, 0x04},
+	{0x766f, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7670, CRL_REG_LEN_08BIT, 0x04},
+	{0x7671, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7672, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7673, CRL_REG_LEN_08BIT, 0x00},
+	{0x7674, CRL_REG_LEN_08BIT, 0x00},
+	{0x7675, CRL_REG_LEN_08BIT, 0x02},
+	{0x7676, CRL_REG_LEN_08BIT, 0x04},
+	{0x7677, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7678, CRL_REG_LEN_08BIT, 0x00},
+	{0x7679, CRL_REG_LEN_08BIT, 0x02},
+	{0x767a, CRL_REG_LEN_08BIT, 0x04},
+	{0x767b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x767c, CRL_REG_LEN_08BIT, 0x00},
+	{0x767d, CRL_REG_LEN_08BIT, 0x02},
+	{0x767e, CRL_REG_LEN_08BIT, 0x04},
+	{0x767f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7680, CRL_REG_LEN_08BIT, 0x05},
+	{0x7681, CRL_REG_LEN_08BIT, 0x83},
+	{0x7682, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7683, CRL_REG_LEN_08BIT, 0x00},
+	{0x7684, CRL_REG_LEN_08BIT, 0x00},
+	{0x7685, CRL_REG_LEN_08BIT, 0x02},
+	{0x7686, CRL_REG_LEN_08BIT, 0x04},
+	{0x7687, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7688, CRL_REG_LEN_08BIT, 0x00},
+	{0x7689, CRL_REG_LEN_08BIT, 0x02},
+	{0x768a, CRL_REG_LEN_08BIT, 0x04},
+	{0x768b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x768c, CRL_REG_LEN_08BIT, 0x00},
+	{0x768d, CRL_REG_LEN_08BIT, 0x02},
+	{0x768e, CRL_REG_LEN_08BIT, 0x04},
+	{0x768f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7690, CRL_REG_LEN_08BIT, 0x05},
+	{0x7691, CRL_REG_LEN_08BIT, 0x83},
+	{0x7692, CRL_REG_LEN_08BIT, 0x03},
+	{0x7693, CRL_REG_LEN_08BIT, 0x0b},
+	{0x7694, CRL_REG_LEN_08BIT, 0x05},
+	{0x7695, CRL_REG_LEN_08BIT, 0x83},
+	{0x7696, CRL_REG_LEN_08BIT, 0x00},
+	{0x7697, CRL_REG_LEN_08BIT, 0x07},
+	{0x7698, CRL_REG_LEN_08BIT, 0x05},
+	{0x7699, CRL_REG_LEN_08BIT, 0x03},
+	{0x769a, CRL_REG_LEN_08BIT, 0x00},
+	{0x769b, CRL_REG_LEN_08BIT, 0x05},
+	{0x769c, CRL_REG_LEN_08BIT, 0x05},
+	{0x769d, CRL_REG_LEN_08BIT, 0x32},
+	{0x769e, CRL_REG_LEN_08BIT, 0x05},
+	{0x769f, CRL_REG_LEN_08BIT, 0x30},
+	{0x76a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a1, CRL_REG_LEN_08BIT, 0x02},
+	{0x76a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a3, CRL_REG_LEN_08BIT, 0x78},
+	{0x76a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a5, CRL_REG_LEN_08BIT, 0x01},
+	{0x76a6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a7, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76a8, CRL_REG_LEN_08BIT, 0x03},
+	{0x76a9, CRL_REG_LEN_08BIT, 0x9a},
+	{0x76aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ab, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ad, CRL_REG_LEN_08BIT, 0x04},
+	{0x76ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x76af, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76b8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x76bb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76bc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76bd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76be, CRL_REG_LEN_08BIT, 0x03},
+	{0x76bf, CRL_REG_LEN_08BIT, 0x99},
+	{0x76c0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c1, CRL_REG_LEN_08BIT, 0x83},
+	{0x76c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c3, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c5, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x76ca, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cb, CRL_REG_LEN_08BIT, 0x30},
+	{0x76cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76cd, CRL_REG_LEN_08BIT, 0x02},
+	{0x76ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cf, CRL_REG_LEN_08BIT, 0x78},
+	{0x76d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d1, CRL_REG_LEN_08BIT, 0x01},
+	{0x76d2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76d4, CRL_REG_LEN_08BIT, 0x03},
+	{0x76d5, CRL_REG_LEN_08BIT, 0x98},
+	{0x76d6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d7, CRL_REG_LEN_08BIT, 0x83},
+	{0x76d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x76da, CRL_REG_LEN_08BIT, 0x05},
+	{0x76db, CRL_REG_LEN_08BIT, 0x03},
+	{0x76dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76dd, CRL_REG_LEN_08BIT, 0x01},
+	{0x76de, CRL_REG_LEN_08BIT, 0x05},
+	{0x76df, CRL_REG_LEN_08BIT, 0x32},
+	{0x76e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e1, CRL_REG_LEN_08BIT, 0x30},
+	{0x76e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x76e4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e5, CRL_REG_LEN_08BIT, 0x78},
+	{0x76e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76e8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e9, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76ea, CRL_REG_LEN_08BIT, 0x03},
+	{0x76eb, CRL_REG_LEN_08BIT, 0x97},
+	{0x76ec, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ed, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76f2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76f4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76f8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x76fb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76fc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76fd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x76ff, CRL_REG_LEN_08BIT, 0x96},
+	{0x7700, CRL_REG_LEN_08BIT, 0x05},
+	{0x7701, CRL_REG_LEN_08BIT, 0x83},
+	{0x7702, CRL_REG_LEN_08BIT, 0x05},
+	{0x7703, CRL_REG_LEN_08BIT, 0x03},
+	{0x7704, CRL_REG_LEN_08BIT, 0x05},
+	{0x7705, CRL_REG_LEN_08BIT, 0x32},
+	{0x7706, CRL_REG_LEN_08BIT, 0x05},
+	{0x7707, CRL_REG_LEN_08BIT, 0x30},
+	{0x7708, CRL_REG_LEN_08BIT, 0x00},
+	{0x7709, CRL_REG_LEN_08BIT, 0x02},
+	{0x770a, CRL_REG_LEN_08BIT, 0x05},
+	{0x770b, CRL_REG_LEN_08BIT, 0x78},
+	{0x770c, CRL_REG_LEN_08BIT, 0x00},
+	{0x770d, CRL_REG_LEN_08BIT, 0x01},
+	{0x770e, CRL_REG_LEN_08BIT, 0x05},
+	{0x770f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7710, CRL_REG_LEN_08BIT, 0x03},
+	{0x7711, CRL_REG_LEN_08BIT, 0x95},
+	{0x7712, CRL_REG_LEN_08BIT, 0x05},
+	{0x7713, CRL_REG_LEN_08BIT, 0x83},
+	{0x7714, CRL_REG_LEN_08BIT, 0x05},
+	{0x7715, CRL_REG_LEN_08BIT, 0x03},
+	{0x7716, CRL_REG_LEN_08BIT, 0x05},
+	{0x7717, CRL_REG_LEN_08BIT, 0x32},
+	{0x7718, CRL_REG_LEN_08BIT, 0x05},
+	{0x7719, CRL_REG_LEN_08BIT, 0x30},
+	{0x771a, CRL_REG_LEN_08BIT, 0x00},
+	{0x771b, CRL_REG_LEN_08BIT, 0x02},
+	{0x771c, CRL_REG_LEN_08BIT, 0x05},
+	{0x771d, CRL_REG_LEN_08BIT, 0x78},
+	{0x771e, CRL_REG_LEN_08BIT, 0x00},
+	{0x771f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7720, CRL_REG_LEN_08BIT, 0x05},
+	{0x7721, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7722, CRL_REG_LEN_08BIT, 0x03},
+	{0x7723, CRL_REG_LEN_08BIT, 0x94},
+	{0x7724, CRL_REG_LEN_08BIT, 0x05},
+	{0x7725, CRL_REG_LEN_08BIT, 0x83},
+	{0x7726, CRL_REG_LEN_08BIT, 0x00},
+	{0x7727, CRL_REG_LEN_08BIT, 0x01},
+	{0x7728, CRL_REG_LEN_08BIT, 0x05},
+	{0x7729, CRL_REG_LEN_08BIT, 0x03},
+	{0x772a, CRL_REG_LEN_08BIT, 0x00},
+	{0x772b, CRL_REG_LEN_08BIT, 0x01},
+	{0x772c, CRL_REG_LEN_08BIT, 0x05},
+	{0x772d, CRL_REG_LEN_08BIT, 0x32},
+	{0x772e, CRL_REG_LEN_08BIT, 0x05},
+	{0x772f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7730, CRL_REG_LEN_08BIT, 0x00},
+	{0x7731, CRL_REG_LEN_08BIT, 0x02},
+	{0x7732, CRL_REG_LEN_08BIT, 0x05},
+	{0x7733, CRL_REG_LEN_08BIT, 0x78},
+	{0x7734, CRL_REG_LEN_08BIT, 0x00},
+	{0x7735, CRL_REG_LEN_08BIT, 0x01},
+	{0x7736, CRL_REG_LEN_08BIT, 0x05},
+	{0x7737, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7738, CRL_REG_LEN_08BIT, 0x03},
+	{0x7739, CRL_REG_LEN_08BIT, 0x93},
+	{0x773a, CRL_REG_LEN_08BIT, 0x05},
+	{0x773b, CRL_REG_LEN_08BIT, 0x83},
+	{0x773c, CRL_REG_LEN_08BIT, 0x00},
+	{0x773d, CRL_REG_LEN_08BIT, 0x00},
+	{0x773e, CRL_REG_LEN_08BIT, 0x05},
+	{0x773f, CRL_REG_LEN_08BIT, 0x03},
+	{0x7740, CRL_REG_LEN_08BIT, 0x00},
+	{0x7741, CRL_REG_LEN_08BIT, 0x00},
+	{0x7742, CRL_REG_LEN_08BIT, 0x05},
+	{0x7743, CRL_REG_LEN_08BIT, 0x32},
+	{0x7744, CRL_REG_LEN_08BIT, 0x05},
+	{0x7745, CRL_REG_LEN_08BIT, 0x30},
+	{0x7746, CRL_REG_LEN_08BIT, 0x00},
+	{0x7747, CRL_REG_LEN_08BIT, 0x02},
+	{0x7748, CRL_REG_LEN_08BIT, 0x05},
+	{0x7749, CRL_REG_LEN_08BIT, 0x78},
+	{0x774a, CRL_REG_LEN_08BIT, 0x00},
+	{0x774b, CRL_REG_LEN_08BIT, 0x01},
+	{0x774c, CRL_REG_LEN_08BIT, 0x05},
+	{0x774d, CRL_REG_LEN_08BIT, 0x7c},
+	{0x774e, CRL_REG_LEN_08BIT, 0x03},
+	{0x774f, CRL_REG_LEN_08BIT, 0x92},
+	{0x7750, CRL_REG_LEN_08BIT, 0x05},
+	{0x7751, CRL_REG_LEN_08BIT, 0x83},
+	{0x7752, CRL_REG_LEN_08BIT, 0x05},
+	{0x7753, CRL_REG_LEN_08BIT, 0x03},
+	{0x7754, CRL_REG_LEN_08BIT, 0x00},
+	{0x7755, CRL_REG_LEN_08BIT, 0x00},
+	{0x7756, CRL_REG_LEN_08BIT, 0x05},
+	{0x7757, CRL_REG_LEN_08BIT, 0x32},
+	{0x7758, CRL_REG_LEN_08BIT, 0x05},
+	{0x7759, CRL_REG_LEN_08BIT, 0x30},
+	{0x775a, CRL_REG_LEN_08BIT, 0x00},
+	{0x775b, CRL_REG_LEN_08BIT, 0x02},
+	{0x775c, CRL_REG_LEN_08BIT, 0x05},
+	{0x775d, CRL_REG_LEN_08BIT, 0x78},
+	{0x775e, CRL_REG_LEN_08BIT, 0x00},
+	{0x775f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7760, CRL_REG_LEN_08BIT, 0x05},
+	{0x7761, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7762, CRL_REG_LEN_08BIT, 0x03},
+	{0x7763, CRL_REG_LEN_08BIT, 0x91},
+	{0x7764, CRL_REG_LEN_08BIT, 0x05},
+	{0x7765, CRL_REG_LEN_08BIT, 0x83},
+	{0x7766, CRL_REG_LEN_08BIT, 0x05},
+	{0x7767, CRL_REG_LEN_08BIT, 0x03},
+	{0x7768, CRL_REG_LEN_08BIT, 0x05},
+	{0x7769, CRL_REG_LEN_08BIT, 0x32},
+	{0x776a, CRL_REG_LEN_08BIT, 0x05},
+	{0x776b, CRL_REG_LEN_08BIT, 0x30},
+	{0x776c, CRL_REG_LEN_08BIT, 0x00},
+	{0x776d, CRL_REG_LEN_08BIT, 0x02},
+	{0x776e, CRL_REG_LEN_08BIT, 0x05},
+	{0x776f, CRL_REG_LEN_08BIT, 0x78},
+	{0x7770, CRL_REG_LEN_08BIT, 0x00},
+	{0x7771, CRL_REG_LEN_08BIT, 0x01},
+	{0x7772, CRL_REG_LEN_08BIT, 0x05},
+	{0x7773, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7774, CRL_REG_LEN_08BIT, 0x03},
+	{0x7775, CRL_REG_LEN_08BIT, 0x90},
+	{0x7776, CRL_REG_LEN_08BIT, 0x05},
+	{0x7777, CRL_REG_LEN_08BIT, 0x83},
+	{0x7778, CRL_REG_LEN_08BIT, 0x05},
+	{0x7779, CRL_REG_LEN_08BIT, 0x03},
+	{0x777a, CRL_REG_LEN_08BIT, 0x05},
+	{0x777b, CRL_REG_LEN_08BIT, 0x32},
+	{0x777c, CRL_REG_LEN_08BIT, 0x05},
+	{0x777d, CRL_REG_LEN_08BIT, 0x30},
+	{0x777e, CRL_REG_LEN_08BIT, 0x00},
+	{0x777f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7780, CRL_REG_LEN_08BIT, 0x05},
+	{0x7781, CRL_REG_LEN_08BIT, 0x78},
+	{0x7782, CRL_REG_LEN_08BIT, 0x00},
+	{0x7783, CRL_REG_LEN_08BIT, 0x01},
+	{0x7784, CRL_REG_LEN_08BIT, 0x05},
+	{0x7785, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7786, CRL_REG_LEN_08BIT, 0x02},
+	{0x7787, CRL_REG_LEN_08BIT, 0x90},
+	{0x7788, CRL_REG_LEN_08BIT, 0x05},
+	{0x7789, CRL_REG_LEN_08BIT, 0x03},
+	{0x778a, CRL_REG_LEN_08BIT, 0x07},
+	{0x778b, CRL_REG_LEN_08BIT, 0x00},
+	{0x778c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x778d, CRL_REG_LEN_08BIT, 0x00},
+	{0x778e, CRL_REG_LEN_08BIT, 0x08},
+	{0x778f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7790, CRL_REG_LEN_08BIT, 0x08},
+	{0x7791, CRL_REG_LEN_08BIT, 0xee},
+	{0x7792, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7793, CRL_REG_LEN_08BIT, 0x00},
+	{0x7794, CRL_REG_LEN_08BIT, 0x05},
+	{0x7795, CRL_REG_LEN_08BIT, 0x33},
+	{0x7796, CRL_REG_LEN_08BIT, 0x04},
+	{0x7797, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7798, CRL_REG_LEN_08BIT, 0x06},
+	{0x7799, CRL_REG_LEN_08BIT, 0x52},
+	{0x779a, CRL_REG_LEN_08BIT, 0x04},
+	{0x779b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x779c, CRL_REG_LEN_08BIT, 0x00},
+	{0x779d, CRL_REG_LEN_08BIT, 0x00},
+	{0x779e, CRL_REG_LEN_08BIT, 0x06},
+	{0x779f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77a2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77a6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77aa, CRL_REG_LEN_08BIT, 0x06},
+	{0x77ab, CRL_REG_LEN_08BIT, 0xae},
+	{0x77ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x77af, CRL_REG_LEN_08BIT, 0x30},
+	{0x77b0, CRL_REG_LEN_08BIT, 0x09},
+	{0x77b1, CRL_REG_LEN_08BIT, 0x19},
+	{0x77b2, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x77b5, CRL_REG_LEN_08BIT, 0x33},
+	{0x77b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77b7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77b8, CRL_REG_LEN_08BIT, 0x06},
+	{0x77b9, CRL_REG_LEN_08BIT, 0x52},
+	{0x77ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x77bb, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x77be, CRL_REG_LEN_08BIT, 0x06},
+	{0x77bf, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77c2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77c6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ca, CRL_REG_LEN_08BIT, 0x06},
+	{0x77cb, CRL_REG_LEN_08BIT, 0xae},
+	{0x77cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77cd, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x77cf, CRL_REG_LEN_08BIT, 0x30},
+	{0x77d0, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77d6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77d8, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d9, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77da, CRL_REG_LEN_08BIT, 0x05},
+	{0x77db, CRL_REG_LEN_08BIT, 0x33},
+	{0x77dc, CRL_REG_LEN_08BIT, 0x07},
+	{0x77dd, CRL_REG_LEN_08BIT, 0x10},
+	{0x77de, CRL_REG_LEN_08BIT, 0x00},
+	{0x77df, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e1, CRL_REG_LEN_08BIT, 0xbb},
+	{0x77e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e5, CRL_REG_LEN_08BIT, 0xaa},
+	{0x77e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e9, CRL_REG_LEN_08BIT, 0x99},
+	{0x77ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x77eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ed, CRL_REG_LEN_08BIT, 0x88},
+	{0x77ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f1, CRL_REG_LEN_08BIT, 0x77},
+	{0x77f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f5, CRL_REG_LEN_08BIT, 0x66},
+	{0x77f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f9, CRL_REG_LEN_08BIT, 0x55},
+	{0x77fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x77fd, CRL_REG_LEN_08BIT, 0x44},
+	{0x77fe, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ff, CRL_REG_LEN_08BIT, 0x00},
+	{0x7800, CRL_REG_LEN_08BIT, 0x01},
+	{0x7801, CRL_REG_LEN_08BIT, 0x33},
+	{0x7802, CRL_REG_LEN_08BIT, 0x00},
+	{0x7803, CRL_REG_LEN_08BIT, 0x00},
+	{0x7804, CRL_REG_LEN_08BIT, 0x01},
+	{0x7805, CRL_REG_LEN_08BIT, 0x22},
+	{0x7806, CRL_REG_LEN_08BIT, 0x00},
+	{0x7807, CRL_REG_LEN_08BIT, 0x00},
+	{0x7808, CRL_REG_LEN_08BIT, 0x01},
+	{0x7809, CRL_REG_LEN_08BIT, 0x11},
+	{0x780a, CRL_REG_LEN_08BIT, 0x00},
+	{0x780b, CRL_REG_LEN_08BIT, 0x00},
+	{0x780c, CRL_REG_LEN_08BIT, 0x01},
+	{0x780d, CRL_REG_LEN_08BIT, 0x00},
+	{0x780e, CRL_REG_LEN_08BIT, 0x01},
+	{0x780f, CRL_REG_LEN_08BIT, 0xff},
+	{0x7810, CRL_REG_LEN_08BIT, 0x07},
+	{0x7811, CRL_REG_LEN_08BIT, 0x00},
+	{0x7812, CRL_REG_LEN_08BIT, 0x02},
+	{0x7813, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7814, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7815, CRL_REG_LEN_08BIT, 0x00},
+	{0x7816, CRL_REG_LEN_08BIT, 0x08},
+	{0x7817, CRL_REG_LEN_08BIT, 0x35},
+	{0x7818, CRL_REG_LEN_08BIT, 0x06},
+	{0x7819, CRL_REG_LEN_08BIT, 0x52},
+	{0x781a, CRL_REG_LEN_08BIT, 0x04},
+	{0x781b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x781c, CRL_REG_LEN_08BIT, 0x00},
+	{0x781d, CRL_REG_LEN_08BIT, 0x00},
+	{0x781e, CRL_REG_LEN_08BIT, 0x06},
+	{0x781f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7820, CRL_REG_LEN_08BIT, 0x05},
+	{0x7821, CRL_REG_LEN_08BIT, 0x33},
+	{0x7822, CRL_REG_LEN_08BIT, 0x09},
+	{0x7823, CRL_REG_LEN_08BIT, 0x19},
+	{0x7824, CRL_REG_LEN_08BIT, 0x06},
+	{0x7825, CRL_REG_LEN_08BIT, 0x1e},
+	{0x7826, CRL_REG_LEN_08BIT, 0x05},
+	{0x7827, CRL_REG_LEN_08BIT, 0x33},
+	{0x7828, CRL_REG_LEN_08BIT, 0x00},
+	{0x7829, CRL_REG_LEN_08BIT, 0x01},
+	{0x782a, CRL_REG_LEN_08BIT, 0x06},
+	{0x782b, CRL_REG_LEN_08BIT, 0x24},
+	{0x782c, CRL_REG_LEN_08BIT, 0x06},
+	{0x782d, CRL_REG_LEN_08BIT, 0x20},
+	{0x782e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x782f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7830, CRL_REG_LEN_08BIT, 0x08},
+	{0x7831, CRL_REG_LEN_08BIT, 0x35},
+	{0x7832, CRL_REG_LEN_08BIT, 0x07},
+	{0x7833, CRL_REG_LEN_08BIT, 0x10},
+	{0x7834, CRL_REG_LEN_08BIT, 0x00},
+	{0x7835, CRL_REG_LEN_08BIT, 0x00},
+	{0x7836, CRL_REG_LEN_08BIT, 0x01},
+	{0x7837, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7838, CRL_REG_LEN_08BIT, 0x00},
+	{0x7839, CRL_REG_LEN_08BIT, 0x00},
+	{0x783a, CRL_REG_LEN_08BIT, 0x01},
+	{0x783b, CRL_REG_LEN_08BIT, 0xaa},
+	{0x783c, CRL_REG_LEN_08BIT, 0x00},
+	{0x783d, CRL_REG_LEN_08BIT, 0x00},
+	{0x783e, CRL_REG_LEN_08BIT, 0x01},
+	{0x783f, CRL_REG_LEN_08BIT, 0x99},
+	{0x7840, CRL_REG_LEN_08BIT, 0x00},
+	{0x7841, CRL_REG_LEN_08BIT, 0x00},
+	{0x7842, CRL_REG_LEN_08BIT, 0x01},
+	{0x7843, CRL_REG_LEN_08BIT, 0x88},
+	{0x7844, CRL_REG_LEN_08BIT, 0x00},
+	{0x7845, CRL_REG_LEN_08BIT, 0x00},
+	{0x7846, CRL_REG_LEN_08BIT, 0x01},
+	{0x7847, CRL_REG_LEN_08BIT, 0x77},
+	{0x7848, CRL_REG_LEN_08BIT, 0x00},
+	{0x7849, CRL_REG_LEN_08BIT, 0x00},
+	{0x784a, CRL_REG_LEN_08BIT, 0x01},
+	{0x784b, CRL_REG_LEN_08BIT, 0x66},
+	{0x784c, CRL_REG_LEN_08BIT, 0x00},
+	{0x784d, CRL_REG_LEN_08BIT, 0x00},
+	{0x784e, CRL_REG_LEN_08BIT, 0x01},
+	{0x784f, CRL_REG_LEN_08BIT, 0x55},
+	{0x7850, CRL_REG_LEN_08BIT, 0x00},
+	{0x7851, CRL_REG_LEN_08BIT, 0x00},
+	{0x7852, CRL_REG_LEN_08BIT, 0x01},
+	{0x7853, CRL_REG_LEN_08BIT, 0x44},
+	{0x7854, CRL_REG_LEN_08BIT, 0x00},
+	{0x7855, CRL_REG_LEN_08BIT, 0x00},
+	{0x7856, CRL_REG_LEN_08BIT, 0x01},
+	{0x7857, CRL_REG_LEN_08BIT, 0x33},
+	{0x7858, CRL_REG_LEN_08BIT, 0x00},
+	{0x7859, CRL_REG_LEN_08BIT, 0x00},
+	{0x785a, CRL_REG_LEN_08BIT, 0x01},
+	{0x785b, CRL_REG_LEN_08BIT, 0x22},
+	{0x785c, CRL_REG_LEN_08BIT, 0x00},
+	{0x785d, CRL_REG_LEN_08BIT, 0x00},
+	{0x785e, CRL_REG_LEN_08BIT, 0x01},
+	{0x785f, CRL_REG_LEN_08BIT, 0x11},
+	{0x7860, CRL_REG_LEN_08BIT, 0x00},
+	{0x7861, CRL_REG_LEN_08BIT, 0x00},
+	{0x7862, CRL_REG_LEN_08BIT, 0x01},
+	{0x7863, CRL_REG_LEN_08BIT, 0x00},
+	{0x7864, CRL_REG_LEN_08BIT, 0x07},
+	{0x7865, CRL_REG_LEN_08BIT, 0x00},
+	{0x7866, CRL_REG_LEN_08BIT, 0x01},
+	{0x7867, CRL_REG_LEN_08BIT, 0xff},
+	{0x7868, CRL_REG_LEN_08BIT, 0x02},
+	{0x7869, CRL_REG_LEN_08BIT, 0xa0},
+	{0x786a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x786b, CRL_REG_LEN_08BIT, 0x00},
+	{0x786c, CRL_REG_LEN_08BIT, 0x08},
+	{0x786d, CRL_REG_LEN_08BIT, 0x3a},
+	{0x786e, CRL_REG_LEN_08BIT, 0x08},
+	{0x786f, CRL_REG_LEN_08BIT, 0x6a},
+	{0x7870, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7871, CRL_REG_LEN_08BIT, 0x00},
+	{0x7872, CRL_REG_LEN_08BIT, 0x04},
+	{0x7873, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7874, CRL_REG_LEN_08BIT, 0x09},
+	{0x7875, CRL_REG_LEN_08BIT, 0x19},
+	{0x7876, CRL_REG_LEN_08BIT, 0x04},
+	{0x7877, CRL_REG_LEN_08BIT, 0x99},
+	{0x7878, CRL_REG_LEN_08BIT, 0x07},
+	{0x7879, CRL_REG_LEN_08BIT, 0x14},
+	{0x787a, CRL_REG_LEN_08BIT, 0x00},
+	{0x787b, CRL_REG_LEN_08BIT, 0x01},
+	{0x787c, CRL_REG_LEN_08BIT, 0x04},
+	{0x787d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x787e, CRL_REG_LEN_08BIT, 0x00},
+	{0x787f, CRL_REG_LEN_08BIT, 0x07},
+	{0x7880, CRL_REG_LEN_08BIT, 0x04},
+	{0x7881, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7882, CRL_REG_LEN_08BIT, 0x00},
+	{0x7883, CRL_REG_LEN_08BIT, 0x00},
+	{0x7884, CRL_REG_LEN_08BIT, 0x04},
+	{0x7885, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7886, CRL_REG_LEN_08BIT, 0x04},
+	{0x7887, CRL_REG_LEN_08BIT, 0x80},
+	{0x7888, CRL_REG_LEN_08BIT, 0x04},
+	{0x7889, CRL_REG_LEN_08BIT, 0x00},
+	{0x788a, CRL_REG_LEN_08BIT, 0x05},
+	{0x788b, CRL_REG_LEN_08BIT, 0x03},
+	{0x788c, CRL_REG_LEN_08BIT, 0x06},
+	{0x788d, CRL_REG_LEN_08BIT, 0x00},
+	{0x788e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x788f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7890, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7891, CRL_REG_LEN_08BIT, 0x00},
+	{0x7892, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7893, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x48},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x3001, CRL_REG_LEN_08BIT, 0x32},
+	{0x3005, CRL_REG_LEN_08BIT, 0x13},
+	{0x3014, CRL_REG_LEN_08BIT, 0x44},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x1d},
+	{0x30b1, CRL_REG_LEN_08BIT, 0xe2},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x60},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x5c},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3195, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x10},
+	{0x3250, CRL_REG_LEN_08BIT, 0xf7},
+	{0x3012, CRL_REG_LEN_08BIT, 0x01},
+};
+
+/* ov2775_1928x1088_2x12_30fps_mipi960_regset */
+static struct crl_register_write_rep ov2775_2x12_30fps_mipi960_regset[] = {
+	{0x3013, CRL_REG_LEN_08BIT, 0x01},
+	{0x3000, CRL_REG_LEN_08BIT, 0x02},
+	{0x3001, CRL_REG_LEN_08BIT, 0x28},
+	{0x3002, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x01},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},
+	{0x3005, CRL_REG_LEN_08BIT, 0x26},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x07},
+	{0x3008, CRL_REG_LEN_08BIT, 0x01},
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},
+	{0x300c, CRL_REG_LEN_08BIT, 0x6c},
+	{0x300e, CRL_REG_LEN_08BIT, 0x80},
+	{0x300f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3012, CRL_REG_LEN_08BIT, 0x00},
+	{0x3013, CRL_REG_LEN_08BIT, 0x00},
+	{0x3014, CRL_REG_LEN_08BIT, 0xc4},
+	{0x3015, CRL_REG_LEN_08BIT, 0x00},
+	{0x3017, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x00},
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},
+	{0x301a, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0x0e},
+	{0x301e, CRL_REG_LEN_08BIT, 0x17},
+	{0x301f, CRL_REG_LEN_08BIT, 0xe1},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x3031, CRL_REG_LEN_08BIT, 0x62},
+	{0x3032, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3033, CRL_REG_LEN_08BIT, 0x30},
+	{0x3034, CRL_REG_LEN_08BIT, 0x3f},
+	{0x3035, CRL_REG_LEN_08BIT, 0x5f},
+	{0x3036, CRL_REG_LEN_08BIT, 0x02},
+	{0x3037, CRL_REG_LEN_08BIT, 0x9f},
+	{0x3038, CRL_REG_LEN_08BIT, 0x04},
+	{0x3039, CRL_REG_LEN_08BIT, 0xb7},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x07},
+	{0x303c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x303d, CRL_REG_LEN_08BIT, 0x00},
+	{0x303e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x303f, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3040, CRL_REG_LEN_08BIT, 0xf3},
+	{0x3041, CRL_REG_LEN_08BIT, 0x29},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf6},
+	{0x3043, CRL_REG_LEN_08BIT, 0x65},
+	{0x3044, CRL_REG_LEN_08BIT, 0x06},
+	{0x3045, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3046, CRL_REG_LEN_08BIT, 0x59},
+	{0x3047, CRL_REG_LEN_08BIT, 0x07},
+	{0x3048, CRL_REG_LEN_08BIT, 0x82},
+	{0x3049, CRL_REG_LEN_08BIT, 0xcf},
+	{0x304a, CRL_REG_LEN_08BIT, 0x12},
+	{0x304b, CRL_REG_LEN_08BIT, 0x40},
+	{0x304c, CRL_REG_LEN_08BIT, 0x33},
+	{0x304d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x304e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x304f, CRL_REG_LEN_08BIT, 0x3d},
+	{0x3050, CRL_REG_LEN_08BIT, 0x10},
+	{0x3060, CRL_REG_LEN_08BIT, 0x00},
+	{0x3061, CRL_REG_LEN_08BIT, 0x64},
+	{0x3062, CRL_REG_LEN_08BIT, 0x00},
+	{0x3063, CRL_REG_LEN_08BIT, 0xe4},
+	{0x3066, CRL_REG_LEN_08BIT, 0x80},
+	{0x3080, CRL_REG_LEN_08BIT, 0x00},
+	{0x3081, CRL_REG_LEN_08BIT, 0x00},
+	{0x3082, CRL_REG_LEN_08BIT, 0x01},
+	{0x3083, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3084, CRL_REG_LEN_08BIT, 0x06},
+	{0x3085, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x10},
+	{0x3087, CRL_REG_LEN_08BIT, 0x10},
+	{0x3089, CRL_REG_LEN_08BIT, 0x00},
+	{0x308a, CRL_REG_LEN_08BIT, 0x01},
+	{0x3093, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a1, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x30a4, CRL_REG_LEN_08BIT, 0x07},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x8b},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x3f},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x04},
+	{0x30aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ac, CRL_REG_LEN_08BIT, 0x07},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x80},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x08},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x98},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x65},
+	{0x30b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x10},
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x30ba, CRL_REG_LEN_08BIT, 0x10},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x03},
+	{0x30be, CRL_REG_LEN_08BIT, 0x5c},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x20},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x4a},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d3, CRL_REG_LEN_08BIT, 0x80},
+	{0x30d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d9, CRL_REG_LEN_08BIT, 0x09},
+	{0x30da, CRL_REG_LEN_08BIT, 0x64},
+	{0x30dd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30de, CRL_REG_LEN_08BIT, 0x16},
+	{0x30df, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e0, CRL_REG_LEN_08BIT, 0x17},
+	{0x30e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e2, CRL_REG_LEN_08BIT, 0x18},
+	{0x30e3, CRL_REG_LEN_08BIT, 0x10},
+	{0x30e4, CRL_REG_LEN_08BIT, 0x04},
+	{0x30e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x30eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ec, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x3101, CRL_REG_LEN_08BIT, 0x00},
+	{0x3102, CRL_REG_LEN_08BIT, 0x00},
+	{0x3103, CRL_REG_LEN_08BIT, 0x00},
+	{0x3104, CRL_REG_LEN_08BIT, 0x00},
+	{0x3105, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3106, CRL_REG_LEN_08BIT, 0x87},
+	{0x3107, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3108, CRL_REG_LEN_08BIT, 0x9d},
+	{0x3109, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310a, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310b, CRL_REG_LEN_08BIT, 0x6a},
+	{0x310c, CRL_REG_LEN_08BIT, 0x3a},
+	{0x310d, CRL_REG_LEN_08BIT, 0x5a},
+	{0x310e, CRL_REG_LEN_08BIT, 0x00},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x00},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3123, CRL_REG_LEN_08BIT, 0x00},
+	{0x3124, CRL_REG_LEN_08BIT, 0x00},
+	{0x3125, CRL_REG_LEN_08BIT, 0x70},
+	{0x3126, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3127, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3128, CRL_REG_LEN_08BIT, 0x00},
+	{0x3129, CRL_REG_LEN_08BIT, 0x3a},
+	{0x312a, CRL_REG_LEN_08BIT, 0x02},
+	{0x312b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312c, CRL_REG_LEN_08BIT, 0x00},
+	{0x312d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312e, CRL_REG_LEN_08BIT, 0x1d},
+	{0x312f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3130, CRL_REG_LEN_08BIT, 0x00},
+	{0x3131, CRL_REG_LEN_08BIT, 0x00},
+	{0x3132, CRL_REG_LEN_08BIT, 0x00},
+	{0x3140, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3141, CRL_REG_LEN_08BIT, 0x03},
+	{0x3142, CRL_REG_LEN_08BIT, 0x00},
+	{0x3143, CRL_REG_LEN_08BIT, 0x00},
+	{0x3144, CRL_REG_LEN_08BIT, 0x00},
+	{0x3145, CRL_REG_LEN_08BIT, 0x00},
+	{0x3146, CRL_REG_LEN_08BIT, 0x00},
+	{0x3147, CRL_REG_LEN_08BIT, 0x00},
+	{0x3148, CRL_REG_LEN_08BIT, 0x00},
+	{0x3149, CRL_REG_LEN_08BIT, 0x00},
+	{0x314a, CRL_REG_LEN_08BIT, 0x00},
+	{0x314b, CRL_REG_LEN_08BIT, 0x00},
+	{0x314c, CRL_REG_LEN_08BIT, 0x00},
+	{0x314d, CRL_REG_LEN_08BIT, 0x00},
+	{0x314e, CRL_REG_LEN_08BIT, 0x1c},
+	{0x314f, CRL_REG_LEN_08BIT, 0xff},
+	{0x3150, CRL_REG_LEN_08BIT, 0xff},
+	{0x3151, CRL_REG_LEN_08BIT, 0xff},
+	{0x3152, CRL_REG_LEN_08BIT, 0x10},
+	{0x3153, CRL_REG_LEN_08BIT, 0x10},
+	{0x3154, CRL_REG_LEN_08BIT, 0x10},
+	{0x3155, CRL_REG_LEN_08BIT, 0x00},
+	{0x3156, CRL_REG_LEN_08BIT, 0x03},
+	{0x3157, CRL_REG_LEN_08BIT, 0x00},
+	{0x3158, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3159, CRL_REG_LEN_08BIT, 0xff},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3160, CRL_REG_LEN_08BIT, 0x01},
+	{0x3161, CRL_REG_LEN_08BIT, 0x00},
+	{0x3162, CRL_REG_LEN_08BIT, 0x01},
+	{0x3163, CRL_REG_LEN_08BIT, 0x00},
+	{0x3164, CRL_REG_LEN_08BIT, 0x01},
+	{0x3165, CRL_REG_LEN_08BIT, 0x00},
+	{0x3190, CRL_REG_LEN_08BIT, 0x01},
+	{0x3191, CRL_REG_LEN_08BIT, 0x99},
+	{0x3193, CRL_REG_LEN_08BIT, 0x08},
+	{0x3194, CRL_REG_LEN_08BIT, 0x13},
+	{0x3195, CRL_REG_LEN_08BIT, 0x33},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x10},
+	{0x3198, CRL_REG_LEN_08BIT, 0x00},
+	{0x3199, CRL_REG_LEN_08BIT, 0x3f},
+	{0x319a, CRL_REG_LEN_08BIT, 0x40},
+	{0x319b, CRL_REG_LEN_08BIT, 0x7f},
+	{0x319c, CRL_REG_LEN_08BIT, 0x80},
+	{0x319d, CRL_REG_LEN_08BIT, 0xbf},
+	{0x319e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x319f, CRL_REG_LEN_08BIT, 0xff},
+	{0x31a0, CRL_REG_LEN_08BIT, 0x24},
+	{0x31a1, CRL_REG_LEN_08BIT, 0x55},
+	{0x31a2, CRL_REG_LEN_08BIT, 0x00},
+	/* vfifo manual override */
+	{0x31a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x31a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b2, CRL_REG_LEN_08BIT, 0x02},
+	{0x31b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b5, CRL_REG_LEN_08BIT, 0x01},
+	{0x31b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x31ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d0, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d1, CRL_REG_LEN_08BIT, 0x34},
+	{0x31d2, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d4, CRL_REG_LEN_08BIT, 0x2d},
+	{0x31d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x31d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x31d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d9, CRL_REG_LEN_08BIT, 0x64},
+	{0x31da, CRL_REG_LEN_08BIT, 0x00},
+	{0x31db, CRL_REG_LEN_08BIT, 0x30},
+	{0x31dc, CRL_REG_LEN_08BIT, 0x04},
+	{0x31dd, CRL_REG_LEN_08BIT, 0x69},
+	{0x31de, CRL_REG_LEN_08BIT, 0x0a},
+	{0x31df, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31e0, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e1, CRL_REG_LEN_08BIT, 0x32},
+	{0x31e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x08},
+	{0x31e5, CRL_REG_LEN_08BIT, 0x80},
+	{0x31e6, CRL_REG_LEN_08BIT, 0x00},
+	/* MIPI data type, 0x31e7-0x31eb */
+	{0x31e7, CRL_REG_LEN_08BIT, 0x2c},
+	{0x31e8, CRL_REG_LEN_08BIT, 0x6c},
+	{0x31e9, CRL_REG_LEN_08BIT, 0xac},
+	{0x31ea, CRL_REG_LEN_08BIT, 0xec},
+	{0x31eb, CRL_REG_LEN_08BIT, 0x3f},
+	{0x31ec, CRL_REG_LEN_08BIT, 0x0f},
+	{0x31ed, CRL_REG_LEN_08BIT, 0x20},
+	{0x31ee, CRL_REG_LEN_08BIT, 0x04},
+	{0x31ef, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f0, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f1, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f3, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f4, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f5, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f6, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f7, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f8, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f9, CRL_REG_LEN_08BIT, 0x90},
+	{0x31fa, CRL_REG_LEN_08BIT, 0x04},
+	{0x31fb, CRL_REG_LEN_08BIT, 0x48},
+	{0x31fd, CRL_REG_LEN_08BIT, 0xcb},
+	{0x31fe, CRL_REG_LEN_08BIT, 0x01},
+	{0x31ff, CRL_REG_LEN_08BIT, 0x03},
+	{0x3200, CRL_REG_LEN_08BIT, 0x00},
+	{0x3201, CRL_REG_LEN_08BIT, 0xff},
+	{0x3202, CRL_REG_LEN_08BIT, 0x00},
+	{0x3203, CRL_REG_LEN_08BIT, 0xff},
+	{0x3204, CRL_REG_LEN_08BIT, 0xff},
+	{0x3205, CRL_REG_LEN_08BIT, 0xff},
+	{0x3206, CRL_REG_LEN_08BIT, 0xff},
+	{0x3207, CRL_REG_LEN_08BIT, 0xff},
+	{0x3208, CRL_REG_LEN_08BIT, 0xff},
+	{0x3209, CRL_REG_LEN_08BIT, 0xff},
+	{0x320a, CRL_REG_LEN_08BIT, 0xff},
+	{0x320b, CRL_REG_LEN_08BIT, 0x1b},
+	{0x320c, CRL_REG_LEN_08BIT, 0x1f},
+	{0x320d, CRL_REG_LEN_08BIT, 0x1e},
+	{0x320e, CRL_REG_LEN_08BIT, 0x30},
+	{0x320f, CRL_REG_LEN_08BIT, 0x2d},
+	{0x3210, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3211, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3212, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3213, CRL_REG_LEN_08BIT, 0x24},
+	{0x3214, CRL_REG_LEN_08BIT, 0x22},
+	{0x3215, CRL_REG_LEN_08BIT, 0x00},
+	{0x3216, CRL_REG_LEN_08BIT, 0x04},
+	/* mipi data tag, 0x3217-0x321a */
+	{0x3217, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3218, CRL_REG_LEN_08BIT, 0x6c},
+	{0x3219, CRL_REG_LEN_08BIT, 0xac},
+	{0x321a, CRL_REG_LEN_08BIT, 0xec},
+	{0x321b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3230, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3231, CRL_REG_LEN_08BIT, 0x00},
+	{0x3232, CRL_REG_LEN_08BIT, 0x80},
+	{0x3233, CRL_REG_LEN_08BIT, 0x00},
+	{0x3234, CRL_REG_LEN_08BIT, 0x10},
+	{0x3235, CRL_REG_LEN_08BIT, 0xaa},
+	{0x3236, CRL_REG_LEN_08BIT, 0x55},
+	{0x3237, CRL_REG_LEN_08BIT, 0x99},
+	{0x3238, CRL_REG_LEN_08BIT, 0x66},
+	{0x3239, CRL_REG_LEN_08BIT, 0x08},
+	{0x323a, CRL_REG_LEN_08BIT, 0x88},
+	{0x323b, CRL_REG_LEN_08BIT, 0x00},
+	{0x323c, CRL_REG_LEN_08BIT, 0x00},
+	{0x323d, CRL_REG_LEN_08BIT, 0x03},
+	{0x3250, CRL_REG_LEN_08BIT, 0x33},
+	{0x3251, CRL_REG_LEN_08BIT, 0x00},
+	{0x3252, CRL_REG_LEN_08BIT, 0x20},
+	{0x3253, CRL_REG_LEN_08BIT, 0x00},
+	{0x3254, CRL_REG_LEN_08BIT, 0x11},
+	{0x3255, CRL_REG_LEN_08BIT, 0x01},
+	{0x3256, CRL_REG_LEN_08BIT, 0x00},
+	{0x3257, CRL_REG_LEN_08BIT, 0x00},
+	{0x3258, CRL_REG_LEN_08BIT, 0x00},
+	{0x3270, CRL_REG_LEN_08BIT, 0x01},
+	{0x3271, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3272, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3273, CRL_REG_LEN_08BIT, 0x01},
+	{0x3274, CRL_REG_LEN_08BIT, 0x00},
+	{0x3275, CRL_REG_LEN_08BIT, 0x40},
+	{0x3276, CRL_REG_LEN_08BIT, 0x02},
+	{0x3277, CRL_REG_LEN_08BIT, 0x08},
+	{0x3278, CRL_REG_LEN_08BIT, 0x10},
+	{0x3279, CRL_REG_LEN_08BIT, 0x04},
+	{0x327a, CRL_REG_LEN_08BIT, 0x00},
+	{0x327b, CRL_REG_LEN_08BIT, 0x03},
+	{0x327c, CRL_REG_LEN_08BIT, 0x10},
+	{0x327d, CRL_REG_LEN_08BIT, 0x60},
+	{0x327e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x327f, CRL_REG_LEN_08BIT, 0x06},
+	{0x3288, CRL_REG_LEN_08BIT, 0x10},
+	{0x3289, CRL_REG_LEN_08BIT, 0x00},
+	{0x328a, CRL_REG_LEN_08BIT, 0x08},
+	{0x328b, CRL_REG_LEN_08BIT, 0x00},
+	{0x328c, CRL_REG_LEN_08BIT, 0x04},
+	{0x328d, CRL_REG_LEN_08BIT, 0x00},
+	{0x328e, CRL_REG_LEN_08BIT, 0x02},
+	{0x328f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3290, CRL_REG_LEN_08BIT, 0x20},
+	{0x3291, CRL_REG_LEN_08BIT, 0x00},
+	{0x3292, CRL_REG_LEN_08BIT, 0x10},
+	{0x3293, CRL_REG_LEN_08BIT, 0x00},
+	{0x3294, CRL_REG_LEN_08BIT, 0x08},
+	{0x3295, CRL_REG_LEN_08BIT, 0x00},
+	{0x3296, CRL_REG_LEN_08BIT, 0x04},
+	{0x3297, CRL_REG_LEN_08BIT, 0x00},
+	{0x3298, CRL_REG_LEN_08BIT, 0x40},
+	{0x3299, CRL_REG_LEN_08BIT, 0x00},
+	{0x329a, CRL_REG_LEN_08BIT, 0x20},
+	{0x329b, CRL_REG_LEN_08BIT, 0x00},
+	{0x329c, CRL_REG_LEN_08BIT, 0x10},
+	{0x329d, CRL_REG_LEN_08BIT, 0x00},
+	{0x329e, CRL_REG_LEN_08BIT, 0x08},
+	{0x329f, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a0, CRL_REG_LEN_08BIT, 0x7f},
+	{0x32a1, CRL_REG_LEN_08BIT, 0xff},
+	{0x32a2, CRL_REG_LEN_08BIT, 0x40},
+	{0x32a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a4, CRL_REG_LEN_08BIT, 0x20},
+	{0x32a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a6, CRL_REG_LEN_08BIT, 0x10},
+	{0x32a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ad, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x32af, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x32be, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c8, CRL_REG_LEN_08BIT, 0x87},
+	{0x32c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x3330, CRL_REG_LEN_08BIT, 0x03},
+	{0x3331, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3332, CRL_REG_LEN_08BIT, 0x02},
+	{0x3333, CRL_REG_LEN_08BIT, 0x24},
+	{0x3334, CRL_REG_LEN_08BIT, 0x00},
+	{0x3335, CRL_REG_LEN_08BIT, 0x00},
+	{0x3336, CRL_REG_LEN_08BIT, 0x00},
+	{0x3337, CRL_REG_LEN_08BIT, 0x00},
+	{0x3338, CRL_REG_LEN_08BIT, 0x03},
+	{0x3339, CRL_REG_LEN_08BIT, 0xc8},
+	{0x333a, CRL_REG_LEN_08BIT, 0x02},
+	{0x333b, CRL_REG_LEN_08BIT, 0x24},
+	{0x333c, CRL_REG_LEN_08BIT, 0x00},
+	{0x333d, CRL_REG_LEN_08BIT, 0x00},
+	{0x333e, CRL_REG_LEN_08BIT, 0x00},
+	{0x333f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3340, CRL_REG_LEN_08BIT, 0x03},
+	{0x3341, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3342, CRL_REG_LEN_08BIT, 0x02},
+	{0x3343, CRL_REG_LEN_08BIT, 0x24},
+	{0x3344, CRL_REG_LEN_08BIT, 0x00},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3346, CRL_REG_LEN_08BIT, 0x00},
+	{0x3347, CRL_REG_LEN_08BIT, 0x00},
+	{0x3348, CRL_REG_LEN_08BIT, 0x40},
+	{0x3349, CRL_REG_LEN_08BIT, 0x00},
+	{0x334a, CRL_REG_LEN_08BIT, 0x00},
+	{0x334b, CRL_REG_LEN_08BIT, 0x00},
+	{0x334c, CRL_REG_LEN_08BIT, 0x00},
+	{0x334d, CRL_REG_LEN_08BIT, 0x00},
+	{0x334e, CRL_REG_LEN_08BIT, 0x80},
+	{0x3360, CRL_REG_LEN_08BIT, 0x01},
+	{0x3361, CRL_REG_LEN_08BIT, 0x00},
+	{0x3362, CRL_REG_LEN_08BIT, 0x01},
+	{0x3363, CRL_REG_LEN_08BIT, 0x00},
+	{0x3364, CRL_REG_LEN_08BIT, 0x01},
+	{0x3365, CRL_REG_LEN_08BIT, 0x00},
+	{0x3366, CRL_REG_LEN_08BIT, 0x01},
+	{0x3367, CRL_REG_LEN_08BIT, 0x00},
+	{0x3368, CRL_REG_LEN_08BIT, 0x01},
+	{0x3369, CRL_REG_LEN_08BIT, 0x00},
+	{0x336a, CRL_REG_LEN_08BIT, 0x01},
+	{0x336b, CRL_REG_LEN_08BIT, 0x00},
+	{0x336c, CRL_REG_LEN_08BIT, 0x01},
+	{0x336d, CRL_REG_LEN_08BIT, 0x00},
+	{0x336e, CRL_REG_LEN_08BIT, 0x01},
+	{0x336f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3370, CRL_REG_LEN_08BIT, 0x01},
+	{0x3371, CRL_REG_LEN_08BIT, 0x00},
+	{0x3372, CRL_REG_LEN_08BIT, 0x01},
+	{0x3373, CRL_REG_LEN_08BIT, 0x00},
+	{0x3374, CRL_REG_LEN_08BIT, 0x01},
+	{0x3375, CRL_REG_LEN_08BIT, 0x00},
+	{0x3376, CRL_REG_LEN_08BIT, 0x01},
+	{0x3377, CRL_REG_LEN_08BIT, 0x00},
+	{0x3378, CRL_REG_LEN_08BIT, 0x00},
+	{0x3379, CRL_REG_LEN_08BIT, 0x00},
+	{0x337a, CRL_REG_LEN_08BIT, 0x00},
+	{0x337b, CRL_REG_LEN_08BIT, 0x00},
+	{0x337c, CRL_REG_LEN_08BIT, 0x00},
+	{0x337d, CRL_REG_LEN_08BIT, 0x00},
+	{0x337e, CRL_REG_LEN_08BIT, 0x00},
+	{0x337f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3380, CRL_REG_LEN_08BIT, 0x00},
+	{0x3381, CRL_REG_LEN_08BIT, 0x00},
+	{0x3382, CRL_REG_LEN_08BIT, 0x00},
+	{0x3383, CRL_REG_LEN_08BIT, 0x00},
+	{0x3384, CRL_REG_LEN_08BIT, 0x00},
+	{0x3385, CRL_REG_LEN_08BIT, 0x00},
+	{0x3386, CRL_REG_LEN_08BIT, 0x00},
+	{0x3387, CRL_REG_LEN_08BIT, 0x00},
+	{0x3388, CRL_REG_LEN_08BIT, 0x00},
+	{0x3389, CRL_REG_LEN_08BIT, 0x00},
+	{0x338a, CRL_REG_LEN_08BIT, 0x00},
+	{0x338b, CRL_REG_LEN_08BIT, 0x00},
+	{0x338c, CRL_REG_LEN_08BIT, 0x00},
+	{0x338d, CRL_REG_LEN_08BIT, 0x00},
+	{0x338e, CRL_REG_LEN_08BIT, 0x00},
+	{0x338f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3390, CRL_REG_LEN_08BIT, 0x00},
+	{0x3391, CRL_REG_LEN_08BIT, 0x00},
+	{0x3392, CRL_REG_LEN_08BIT, 0x00},
+	{0x3393, CRL_REG_LEN_08BIT, 0x00},
+	{0x3394, CRL_REG_LEN_08BIT, 0x00},
+	{0x3395, CRL_REG_LEN_08BIT, 0x00},
+	{0x3396, CRL_REG_LEN_08BIT, 0x00},
+	{0x3397, CRL_REG_LEN_08BIT, 0x00},
+	{0x3398, CRL_REG_LEN_08BIT, 0x00},
+	{0x3399, CRL_REG_LEN_08BIT, 0x00},
+	{0x339a, CRL_REG_LEN_08BIT, 0x00},
+	{0x339b, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b1, CRL_REG_LEN_08BIT, 0x50},
+	{0x33b2, CRL_REG_LEN_08BIT, 0x01},
+	{0x33b3, CRL_REG_LEN_08BIT, 0xff},
+	{0x33b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0x33b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0x33b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x33ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x33bb, CRL_REG_LEN_08BIT, 0x1f},
+	{0x33bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bd, CRL_REG_LEN_08BIT, 0x01},
+	{0x33be, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bf, CRL_REG_LEN_08BIT, 0x01},
+	{0x33c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e0, CRL_REG_LEN_08BIT, 0x14},
+	{0x33e1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33e2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x33e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e5, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e7, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e8, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33e9, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ea, CRL_REG_LEN_08BIT, 0x02},
+	{0x33eb, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ec, CRL_REG_LEN_08BIT, 0x03},
+	{0x33ed, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ee, CRL_REG_LEN_08BIT, 0x05},
+	{0x33ef, CRL_REG_LEN_08BIT, 0x0a},
+	{0x33f0, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f1, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33f4, CRL_REG_LEN_08BIT, 0x03},
+	{0x33f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x33f6, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x33f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x33f9, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x33fc, CRL_REG_LEN_08BIT, 0x04},
+	{0x33fd, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33fe, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ff, CRL_REG_LEN_08BIT, 0x02},
+	{0x3400, CRL_REG_LEN_08BIT, 0x02},
+	{0x3401, CRL_REG_LEN_08BIT, 0x03},
+	{0x3402, CRL_REG_LEN_08BIT, 0x01},
+	{0x3403, CRL_REG_LEN_08BIT, 0x02},
+	{0x3404, CRL_REG_LEN_08BIT, 0x08},
+	{0x3405, CRL_REG_LEN_08BIT, 0x08},
+	{0x3406, CRL_REG_LEN_08BIT, 0x04},
+	{0x3407, CRL_REG_LEN_08BIT, 0x04},
+	{0x3408, CRL_REG_LEN_08BIT, 0x00},
+	{0x3409, CRL_REG_LEN_08BIT, 0x03},
+	{0x340a, CRL_REG_LEN_08BIT, 0x14},
+	{0x340b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x340c, CRL_REG_LEN_08BIT, 0x04},
+	{0x340d, CRL_REG_LEN_08BIT, 0x02},
+	{0x340e, CRL_REG_LEN_08BIT, 0x01},
+	{0x340f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3410, CRL_REG_LEN_08BIT, 0x00},
+	{0x3411, CRL_REG_LEN_08BIT, 0x04},
+	{0x3412, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3413, CRL_REG_LEN_08BIT, 0x02},
+	{0x3414, CRL_REG_LEN_08BIT, 0x02},
+	{0x3415, CRL_REG_LEN_08BIT, 0x02},
+	{0x3416, CRL_REG_LEN_08BIT, 0x03},
+	{0x3417, CRL_REG_LEN_08BIT, 0x02},
+	{0x3418, CRL_REG_LEN_08BIT, 0x05},
+	{0x3419, CRL_REG_LEN_08BIT, 0x0a},
+	{0x341a, CRL_REG_LEN_08BIT, 0x08},
+	{0x341b, CRL_REG_LEN_08BIT, 0x04},
+	{0x341c, CRL_REG_LEN_08BIT, 0x04},
+	{0x341d, CRL_REG_LEN_08BIT, 0x00},
+	{0x341e, CRL_REG_LEN_08BIT, 0x03},
+	{0x3440, CRL_REG_LEN_08BIT, 0x00},
+	{0x3441, CRL_REG_LEN_08BIT, 0x00},
+	{0x3442, CRL_REG_LEN_08BIT, 0x00},
+	{0x3443, CRL_REG_LEN_08BIT, 0x00},
+	{0x3444, CRL_REG_LEN_08BIT, 0x02},
+	{0x3445, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3446, CRL_REG_LEN_08BIT, 0x02},
+	{0x3447, CRL_REG_LEN_08BIT, 0x08},
+	{0x3448, CRL_REG_LEN_08BIT, 0x00},
+	{0x3460, CRL_REG_LEN_08BIT, 0x40},
+	{0x3461, CRL_REG_LEN_08BIT, 0x40},
+	{0x3462, CRL_REG_LEN_08BIT, 0x40},
+	{0x3463, CRL_REG_LEN_08BIT, 0x40},
+	{0x3464, CRL_REG_LEN_08BIT, 0x03},
+	{0x3465, CRL_REG_LEN_08BIT, 0x01},
+	{0x3466, CRL_REG_LEN_08BIT, 0x01},
+	{0x3467, CRL_REG_LEN_08BIT, 0x02},
+	{0x3468, CRL_REG_LEN_08BIT, 0x30},
+	{0x3469, CRL_REG_LEN_08BIT, 0x00},
+	{0x346a, CRL_REG_LEN_08BIT, 0x35},
+	{0x346b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3480, CRL_REG_LEN_08BIT, 0x40},
+	{0x3481, CRL_REG_LEN_08BIT, 0x00},
+	{0x3482, CRL_REG_LEN_08BIT, 0x00},
+	{0x3483, CRL_REG_LEN_08BIT, 0x00},
+	{0x3484, CRL_REG_LEN_08BIT, 0x0d},
+	{0x3485, CRL_REG_LEN_08BIT, 0x00},
+	{0x3486, CRL_REG_LEN_08BIT, 0x00},
+	{0x3487, CRL_REG_LEN_08BIT, 0x00},
+	{0x3488, CRL_REG_LEN_08BIT, 0x00},
+	{0x3489, CRL_REG_LEN_08BIT, 0x00},
+	{0x348a, CRL_REG_LEN_08BIT, 0x00},
+	{0x348b, CRL_REG_LEN_08BIT, 0x04},
+	{0x348c, CRL_REG_LEN_08BIT, 0x00},
+	{0x348d, CRL_REG_LEN_08BIT, 0x01},
+	{0x348f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3030, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x7000, CRL_REG_LEN_08BIT, 0x58},
+	{0x7001, CRL_REG_LEN_08BIT, 0x7a},
+	{0x7002, CRL_REG_LEN_08BIT, 0x1a},
+	{0x7003, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7004, CRL_REG_LEN_08BIT, 0x03},
+	{0x7005, CRL_REG_LEN_08BIT, 0xda},
+	{0x7006, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7007, CRL_REG_LEN_08BIT, 0x03},
+	{0x7008, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7009, CRL_REG_LEN_08BIT, 0x06},
+	{0x700a, CRL_REG_LEN_08BIT, 0xe6},
+	{0x700b, CRL_REG_LEN_08BIT, 0xec},
+	{0x700c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700d, CRL_REG_LEN_08BIT, 0xff},
+	{0x700e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700f, CRL_REG_LEN_08BIT, 0x73},
+	{0x7010, CRL_REG_LEN_08BIT, 0xda},
+	{0x7011, CRL_REG_LEN_08BIT, 0x72},
+	{0x7012, CRL_REG_LEN_08BIT, 0x76},
+	{0x7013, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7014, CRL_REG_LEN_08BIT, 0xee},
+	{0x7015, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7016, CRL_REG_LEN_08BIT, 0xac},
+	{0x7017, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7018, CRL_REG_LEN_08BIT, 0xac},
+	{0x7019, CRL_REG_LEN_08BIT, 0xd1},
+	{0x701a, CRL_REG_LEN_08BIT, 0x50},
+	{0x701b, CRL_REG_LEN_08BIT, 0xac},
+	{0x701c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x701d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x701e, CRL_REG_LEN_08BIT, 0x2e},
+	{0x701f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7020, CRL_REG_LEN_08BIT, 0x00},
+	{0x7021, CRL_REG_LEN_08BIT, 0xdc},
+	{0x7022, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7023, CRL_REG_LEN_08BIT, 0xb0},
+	{0x7024, CRL_REG_LEN_08BIT, 0x6e},
+	{0x7025, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7026, CRL_REG_LEN_08BIT, 0x01},
+	{0x7027, CRL_REG_LEN_08BIT, 0xd7},
+	{0x7028, CRL_REG_LEN_08BIT, 0xed},
+	{0x7029, CRL_REG_LEN_08BIT, 0xe1},
+	{0x702a, CRL_REG_LEN_08BIT, 0x36},
+	{0x702b, CRL_REG_LEN_08BIT, 0x30},
+	{0x702c, CRL_REG_LEN_08BIT, 0xd3},
+	{0x702d, CRL_REG_LEN_08BIT, 0x2e},
+	{0x702e, CRL_REG_LEN_08BIT, 0x54},
+	{0x702f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7030, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7031, CRL_REG_LEN_08BIT, 0x22},
+	{0x7032, CRL_REG_LEN_08BIT, 0x66},
+	{0x7033, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7034, CRL_REG_LEN_08BIT, 0x24},
+	{0x7035, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7036, CRL_REG_LEN_08BIT, 0x28},
+	{0x7037, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7038, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7039, CRL_REG_LEN_08BIT, 0xa1},
+	{0x703a, CRL_REG_LEN_08BIT, 0xac},
+	{0x703b, CRL_REG_LEN_08BIT, 0xd8},
+	{0x703c, CRL_REG_LEN_08BIT, 0xd6},
+	{0x703d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x703e, CRL_REG_LEN_08BIT, 0x04},
+	{0x703f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7040, CRL_REG_LEN_08BIT, 0xb7},
+	{0x7041, CRL_REG_LEN_08BIT, 0x04},
+	{0x7042, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7043, CRL_REG_LEN_08BIT, 0x08},
+	{0x7044, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7045, CRL_REG_LEN_08BIT, 0xd9},
+	{0x7046, CRL_REG_LEN_08BIT, 0xad},
+	{0x7047, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7048, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7049, CRL_REG_LEN_08BIT, 0x19},
+	{0x704a, CRL_REG_LEN_08BIT, 0xc1},
+	{0x704b, CRL_REG_LEN_08BIT, 0x27},
+	{0x704c, CRL_REG_LEN_08BIT, 0xe7},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x704e, CRL_REG_LEN_08BIT, 0x50},
+	{0x704f, CRL_REG_LEN_08BIT, 0x20},
+	{0x7050, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7051, CRL_REG_LEN_08BIT, 0x02},
+	{0x7052, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7053, CRL_REG_LEN_08BIT, 0x17},
+	{0x7054, CRL_REG_LEN_08BIT, 0xdb},
+	{0x7055, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7056, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7057, CRL_REG_LEN_08BIT, 0x00},
+	{0x7058, CRL_REG_LEN_08BIT, 0x28},
+	{0x7059, CRL_REG_LEN_08BIT, 0x54},
+	{0x705a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x705b, CRL_REG_LEN_08BIT, 0x14},
+	{0x705c, CRL_REG_LEN_08BIT, 0xab},
+	{0x705d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x705e, CRL_REG_LEN_08BIT, 0x06},
+	{0x705f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7060, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7061, CRL_REG_LEN_08BIT, 0x00},
+	{0x7062, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7063, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7064, CRL_REG_LEN_08BIT, 0x07},
+	{0x7065, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7066, CRL_REG_LEN_08BIT, 0x05},
+	{0x7067, CRL_REG_LEN_08BIT, 0xee},
+	{0x7068, CRL_REG_LEN_08BIT, 0xe6},
+	{0x7069, CRL_REG_LEN_08BIT, 0xad},
+	{0x706a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x706b, CRL_REG_LEN_08BIT, 0x26},
+	{0x706c, CRL_REG_LEN_08BIT, 0x19},
+	{0x706d, CRL_REG_LEN_08BIT, 0xc1},
+	{0x706e, CRL_REG_LEN_08BIT, 0x3a},
+	{0x706f, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7070, CRL_REG_LEN_08BIT, 0xaf},
+	{0x7071, CRL_REG_LEN_08BIT, 0x00},
+	{0x7072, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7073, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7074, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7075, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7076, CRL_REG_LEN_08BIT, 0xe7},
+	{0x7077, CRL_REG_LEN_08BIT, 0x00},
+	{0x7078, CRL_REG_LEN_08BIT, 0x15},
+	{0x7079, CRL_REG_LEN_08BIT, 0xc2},
+	{0x707a, CRL_REG_LEN_08BIT, 0x40},
+	{0x707b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x707c, CRL_REG_LEN_08BIT, 0xa4},
+	{0x707d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x707e, CRL_REG_LEN_08BIT, 0x3c},
+	{0x707f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7081, CRL_REG_LEN_08BIT, 0x64},
+	{0x7082, CRL_REG_LEN_08BIT, 0x29},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7084, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7085, CRL_REG_LEN_08BIT, 0x12},
+	{0x7086, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7087, CRL_REG_LEN_08BIT, 0x01},
+	{0x7088, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7089, CRL_REG_LEN_08BIT, 0xbc},
+	{0x708a, CRL_REG_LEN_08BIT, 0x01},
+	{0x708b, CRL_REG_LEN_08BIT, 0xac},
+	{0x708c, CRL_REG_LEN_08BIT, 0x37},
+	{0x708d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x708e, CRL_REG_LEN_08BIT, 0xac},
+	{0x708f, CRL_REG_LEN_08BIT, 0x45},
+	{0x7090, CRL_REG_LEN_08BIT, 0xad},
+	{0x7091, CRL_REG_LEN_08BIT, 0x28},
+	{0x7092, CRL_REG_LEN_08BIT, 0x00},
+	{0x7093, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7094, CRL_REG_LEN_08BIT, 0x00},
+	{0x7095, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7096, CRL_REG_LEN_08BIT, 0x01},
+	{0x7097, CRL_REG_LEN_08BIT, 0x36},
+	{0x7098, CRL_REG_LEN_08BIT, 0xd3},
+	{0x7099, CRL_REG_LEN_08BIT, 0x30},
+	{0x709a, CRL_REG_LEN_08BIT, 0x04},
+	{0x709b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x709c, CRL_REG_LEN_08BIT, 0xd8},
+	{0x709d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x709e, CRL_REG_LEN_08BIT, 0xe9},
+	{0x709f, CRL_REG_LEN_08BIT, 0x00},
+	{0x70a0, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70a1, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a2, CRL_REG_LEN_08BIT, 0x62},
+	{0x70a3, CRL_REG_LEN_08BIT, 0x07},
+	{0x70a4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70a5, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a6, CRL_REG_LEN_08BIT, 0xad},
+	{0x70a7, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70a8, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70aa, CRL_REG_LEN_08BIT, 0x15},
+	{0x70ab, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70ac, CRL_REG_LEN_08BIT, 0x59},
+	{0x70ad, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70ae, CRL_REG_LEN_08BIT, 0xc9},
+	{0x70af, CRL_REG_LEN_08BIT, 0xc0},
+	{0x70b0, CRL_REG_LEN_08BIT, 0x55},
+	{0x70b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b2, CRL_REG_LEN_08BIT, 0x46},
+	{0x70b3, CRL_REG_LEN_08BIT, 0xa1},
+	{0x70b4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70b5, CRL_REG_LEN_08BIT, 0x64},
+	{0x70b6, CRL_REG_LEN_08BIT, 0x29},
+	{0x70b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x70ba, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70bb, CRL_REG_LEN_08BIT, 0x02},
+	{0x70bc, CRL_REG_LEN_08BIT, 0xd0},
+	{0x70bd, CRL_REG_LEN_08BIT, 0xdc},
+	{0x70be, CRL_REG_LEN_08BIT, 0xac},
+	{0x70bf, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x37},
+	{0x70c2, CRL_REG_LEN_08BIT, 0xac},
+	{0x70c3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x45},
+	{0x70c5, CRL_REG_LEN_08BIT, 0xad},
+	{0x70c6, CRL_REG_LEN_08BIT, 0x28},
+	{0x70c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ca, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70cb, CRL_REG_LEN_08BIT, 0x01},
+	{0x70cc, CRL_REG_LEN_08BIT, 0x36},
+	{0x70cd, CRL_REG_LEN_08BIT, 0x30},
+	{0x70ce, CRL_REG_LEN_08BIT, 0xe0},
+	{0x70cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0x70d0, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70d1, CRL_REG_LEN_08BIT, 0x0b},
+	{0x70d2, CRL_REG_LEN_08BIT, 0xd6},
+	{0x70d3, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70d4, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70d6, CRL_REG_LEN_08BIT, 0x62},
+	{0x70d7, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d8, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70d9, CRL_REG_LEN_08BIT, 0x05},
+	{0x70da, CRL_REG_LEN_08BIT, 0xad},
+	{0x70db, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70dc, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70dd, CRL_REG_LEN_08BIT, 0x46},
+	{0x70de, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70df, CRL_REG_LEN_08BIT, 0x07},
+	{0x70e0, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e2, CRL_REG_LEN_08BIT, 0xe3},
+	{0x70e3, CRL_REG_LEN_08BIT, 0x18},
+	{0x70e4, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70e5, CRL_REG_LEN_08BIT, 0xa2},
+	{0x70e6, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x64},
+	{0x70e8, CRL_REG_LEN_08BIT, 0xd1},
+	{0x70e9, CRL_REG_LEN_08BIT, 0xdd},
+	{0x70ea, CRL_REG_LEN_08BIT, 0xac},
+	{0x70eb, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70ed, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x19},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x46},
+	{0x70f0, CRL_REG_LEN_08BIT, 0x50},
+	{0x70f1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x70f2, CRL_REG_LEN_08BIT, 0xee},
+	{0x70f3, CRL_REG_LEN_08BIT, 0xe8},
+	{0x70f4, CRL_REG_LEN_08BIT, 0xe6},
+	{0x70f5, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70f6, CRL_REG_LEN_08BIT, 0x31},
+	{0x70f7, CRL_REG_LEN_08BIT, 0xe1},
+	{0x70f8, CRL_REG_LEN_08BIT, 0x36},
+	{0x70f9, CRL_REG_LEN_08BIT, 0x30},
+	{0x70fa, CRL_REG_LEN_08BIT, 0xd3},
+	{0x70fb, CRL_REG_LEN_08BIT, 0x2e},
+	{0x70fc, CRL_REG_LEN_08BIT, 0x54},
+	{0x70fd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x70fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x70ff, CRL_REG_LEN_08BIT, 0xec},
+	{0x7100, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7101, CRL_REG_LEN_08BIT, 0x50},
+	{0x7102, CRL_REG_LEN_08BIT, 0x20},
+	{0x7103, CRL_REG_LEN_08BIT, 0x04},
+	{0x7104, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7105, CRL_REG_LEN_08BIT, 0x02},
+	{0x7106, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7107, CRL_REG_LEN_08BIT, 0x18},
+	{0x7108, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7109, CRL_REG_LEN_08BIT, 0xb8},
+	{0x710a, CRL_REG_LEN_08BIT, 0x00},
+	{0x710b, CRL_REG_LEN_08BIT, 0x28},
+	{0x710c, CRL_REG_LEN_08BIT, 0x54},
+	{0x710d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x710e, CRL_REG_LEN_08BIT, 0x02},
+	{0x710f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7110, CRL_REG_LEN_08BIT, 0xda},
+	{0x7111, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7112, CRL_REG_LEN_08BIT, 0x04},
+	{0x7113, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7114, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7115, CRL_REG_LEN_08BIT, 0xab},
+	{0x7116, CRL_REG_LEN_08BIT, 0x00},
+	{0x7117, CRL_REG_LEN_08BIT, 0x62},
+	{0x7118, CRL_REG_LEN_08BIT, 0x07},
+	{0x7119, CRL_REG_LEN_08BIT, 0xb9},
+	{0x711a, CRL_REG_LEN_08BIT, 0x05},
+	{0x711b, CRL_REG_LEN_08BIT, 0xad},
+	{0x711c, CRL_REG_LEN_08BIT, 0xc3},
+	{0x711d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x711e, CRL_REG_LEN_08BIT, 0xe7},
+	{0x711f, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7120, CRL_REG_LEN_08BIT, 0x64},
+	{0x7121, CRL_REG_LEN_08BIT, 0x29},
+	{0x7122, CRL_REG_LEN_08BIT, 0x00},
+	{0x7123, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7124, CRL_REG_LEN_08BIT, 0x02},
+	{0x7125, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7126, CRL_REG_LEN_08BIT, 0x00},
+	{0x7127, CRL_REG_LEN_08BIT, 0x45},
+	{0x7128, CRL_REG_LEN_08BIT, 0xad},
+	{0x7129, CRL_REG_LEN_08BIT, 0xe2},
+	{0x712a, CRL_REG_LEN_08BIT, 0x28},
+	{0x712b, CRL_REG_LEN_08BIT, 0x00},
+	{0x712c, CRL_REG_LEN_08BIT, 0xb8},
+	{0x712d, CRL_REG_LEN_08BIT, 0x00},
+	{0x712e, CRL_REG_LEN_08BIT, 0xe0},
+	{0x712f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7130, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7131, CRL_REG_LEN_08BIT, 0xe9},
+	{0x7132, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7133, CRL_REG_LEN_08BIT, 0x03},
+	{0x7134, CRL_REG_LEN_08BIT, 0x00},
+	{0x7135, CRL_REG_LEN_08BIT, 0x30},
+	{0x7136, CRL_REG_LEN_08BIT, 0x62},
+	{0x7137, CRL_REG_LEN_08BIT, 0x07},
+	{0x7138, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7139, CRL_REG_LEN_08BIT, 0x05},
+	{0x713a, CRL_REG_LEN_08BIT, 0xad},
+	{0x713b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x713c, CRL_REG_LEN_08BIT, 0xcf},
+	{0x713d, CRL_REG_LEN_08BIT, 0x42},
+	{0x713e, CRL_REG_LEN_08BIT, 0xe4},
+	{0x713f, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7140, CRL_REG_LEN_08BIT, 0x07},
+	{0x7141, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7142, CRL_REG_LEN_08BIT, 0x00},
+	{0x7143, CRL_REG_LEN_08BIT, 0x00},
+	{0x7144, CRL_REG_LEN_08BIT, 0x17},
+	{0x7145, CRL_REG_LEN_08BIT, 0xc2},
+	{0x7146, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7147, CRL_REG_LEN_08BIT, 0xde},
+	{0x7148, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7149, CRL_REG_LEN_08BIT, 0xdf},
+	{0x714a, CRL_REG_LEN_08BIT, 0xac},
+	{0x714b, CRL_REG_LEN_08BIT, 0xd1},
+	{0x714c, CRL_REG_LEN_08BIT, 0x44},
+	{0x714d, CRL_REG_LEN_08BIT, 0xac},
+	{0x714e, CRL_REG_LEN_08BIT, 0xb9},
+	{0x714f, CRL_REG_LEN_08BIT, 0x76},
+	{0x7150, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7151, CRL_REG_LEN_08BIT, 0x08},
+	{0x7152, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7153, CRL_REG_LEN_08BIT, 0xfe},
+	{0x7154, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7155, CRL_REG_LEN_08BIT, 0xca},
+	{0x7156, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7157, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7158, CRL_REG_LEN_08BIT, 0xab},
+	{0x7159, CRL_REG_LEN_08BIT, 0x00},
+	{0x715a, CRL_REG_LEN_08BIT, 0xe1},
+	{0x715b, CRL_REG_LEN_08BIT, 0x36},
+	{0x715c, CRL_REG_LEN_08BIT, 0x30},
+	{0x715d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x715e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x715f, CRL_REG_LEN_08BIT, 0x29},
+	{0x7160, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7161, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7162, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7163, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7164, CRL_REG_LEN_08BIT, 0x01},
+	{0x7165, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7166, CRL_REG_LEN_08BIT, 0x0c},
+	{0x7167, CRL_REG_LEN_08BIT, 0x45},
+	{0x7168, CRL_REG_LEN_08BIT, 0xa4},
+	{0x7169, CRL_REG_LEN_08BIT, 0xbd},
+	{0x716a, CRL_REG_LEN_08BIT, 0x03},
+	{0x716b, CRL_REG_LEN_08BIT, 0xec},
+	{0x716c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x716d, CRL_REG_LEN_08BIT, 0x3d},
+	{0x716e, CRL_REG_LEN_08BIT, 0xc3},
+	{0x716f, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7170, CRL_REG_LEN_08BIT, 0x42},
+	{0x7171, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7172, CRL_REG_LEN_08BIT, 0x00},
+	{0x7173, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7174, CRL_REG_LEN_08BIT, 0xd5},
+	{0x7175, CRL_REG_LEN_08BIT, 0x00},
+	{0x7176, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7177, CRL_REG_LEN_08BIT, 0x00},
+	{0x7178, CRL_REG_LEN_08BIT, 0x74},
+	{0x7179, CRL_REG_LEN_08BIT, 0xbd},
+	{0x717a, CRL_REG_LEN_08BIT, 0x03},
+	{0x717b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x717c, CRL_REG_LEN_08BIT, 0x39},
+	{0x717d, CRL_REG_LEN_08BIT, 0x40},
+	{0x717e, CRL_REG_LEN_08BIT, 0x58},
+	{0x717f, CRL_REG_LEN_08BIT, 0xdd},
+	{0x7180, CRL_REG_LEN_08BIT, 0x19},
+	{0x7181, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7182, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7183, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7184, CRL_REG_LEN_08BIT, 0x06},
+	{0x7185, CRL_REG_LEN_08BIT, 0x17},
+	{0x7186, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7187, CRL_REG_LEN_08BIT, 0xc6},
+	{0x7188, CRL_REG_LEN_08BIT, 0xe8},
+	{0x7189, CRL_REG_LEN_08BIT, 0x00},
+	{0x718a, CRL_REG_LEN_08BIT, 0xc0},
+	{0x718b, CRL_REG_LEN_08BIT, 0xc8},
+	{0x718c, CRL_REG_LEN_08BIT, 0xe6},
+	{0x718d, CRL_REG_LEN_08BIT, 0x95},
+	{0x718e, CRL_REG_LEN_08BIT, 0x15},
+	{0x718f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7190, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7191, CRL_REG_LEN_08BIT, 0x19},
+	{0x7192, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7193, CRL_REG_LEN_08BIT, 0xf6},
+	{0x7194, CRL_REG_LEN_08BIT, 0x14},
+	{0x7195, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7196, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7197, CRL_REG_LEN_08BIT, 0xd1},
+	{0x7198, CRL_REG_LEN_08BIT, 0xac},
+	{0x7199, CRL_REG_LEN_08BIT, 0x37},
+	{0x719a, CRL_REG_LEN_08BIT, 0xbc},
+	{0x719b, CRL_REG_LEN_08BIT, 0x35},
+	{0x719c, CRL_REG_LEN_08BIT, 0x36},
+	{0x719d, CRL_REG_LEN_08BIT, 0x30},
+	{0x719e, CRL_REG_LEN_08BIT, 0xe1},
+	{0x719f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x71a0, CRL_REG_LEN_08BIT, 0x7a},
+	{0x71a1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x71a2, CRL_REG_LEN_08BIT, 0x0c},
+	{0x71a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x71a4, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71a5, CRL_REG_LEN_08BIT, 0xc7},
+	{0x71a6, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x71a8, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x71aa, CRL_REG_LEN_08BIT, 0x56},
+	{0x71ab, CRL_REG_LEN_08BIT, 0xc0},
+	{0x71ac, CRL_REG_LEN_08BIT, 0xda},
+	{0x71ad, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71ae, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71af, CRL_REG_LEN_08BIT, 0x56},
+	{0x71b0, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71b1, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71b2, CRL_REG_LEN_08BIT, 0x08},
+	{0x71b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b4, CRL_REG_LEN_08BIT, 0x57},
+	{0x71b5, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71b6, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71b7, CRL_REG_LEN_08BIT, 0x36},
+	{0x71b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b9, CRL_REG_LEN_08BIT, 0x54},
+	{0x71ba, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71bb, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71bc, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71bd, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71be, CRL_REG_LEN_08BIT, 0x56},
+	{0x71bf, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71c0, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71c1, CRL_REG_LEN_08BIT, 0x08},
+	{0x71c2, CRL_REG_LEN_08BIT, 0x57},
+	{0x71c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c4, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71c5, CRL_REG_LEN_08BIT, 0x36},
+	{0x71c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c7, CRL_REG_LEN_08BIT, 0x54},
+	{0x71c8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71c9, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71ca, CRL_REG_LEN_08BIT, 0x18},
+	{0x71cb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x71cd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x71cf, CRL_REG_LEN_08BIT, 0x56},
+	{0x71d0, CRL_REG_LEN_08BIT, 0x08},
+	{0x71d1, CRL_REG_LEN_08BIT, 0x57},
+	{0x71d2, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71d3, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71d4, CRL_REG_LEN_08BIT, 0x42},
+	{0x71d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x71d6, CRL_REG_LEN_08BIT, 0x54},
+	{0x71d7, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71d8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71d9, CRL_REG_LEN_08BIT, 0xab},
+	{0x71da, CRL_REG_LEN_08BIT, 0x00},
+	{0x71db, CRL_REG_LEN_08BIT, 0x66},
+	{0x71dc, CRL_REG_LEN_08BIT, 0x62},
+	{0x71dd, CRL_REG_LEN_08BIT, 0x06},
+	{0x71de, CRL_REG_LEN_08BIT, 0x74},
+	{0x71df, CRL_REG_LEN_08BIT, 0xb9},
+	{0x71e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x71e1, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e2, CRL_REG_LEN_08BIT, 0x14},
+	{0x71e3, CRL_REG_LEN_08BIT, 0x0e},
+	{0x71e4, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e5, CRL_REG_LEN_08BIT, 0x04},
+	{0x71e6, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7600, CRL_REG_LEN_08BIT, 0x04},
+	{0x7601, CRL_REG_LEN_08BIT, 0x80},
+	{0x7602, CRL_REG_LEN_08BIT, 0x07},
+	{0x7603, CRL_REG_LEN_08BIT, 0x44},
+	{0x7604, CRL_REG_LEN_08BIT, 0x05},
+	{0x7605, CRL_REG_LEN_08BIT, 0x33},
+	{0x7606, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7607, CRL_REG_LEN_08BIT, 0x00},
+	{0x7608, CRL_REG_LEN_08BIT, 0x07},
+	{0x7609, CRL_REG_LEN_08BIT, 0x40},
+	{0x760a, CRL_REG_LEN_08BIT, 0x04},
+	{0x760b, CRL_REG_LEN_08BIT, 0xe5},
+	{0x760c, CRL_REG_LEN_08BIT, 0x06},
+	{0x760d, CRL_REG_LEN_08BIT, 0x50},
+	{0x760e, CRL_REG_LEN_08BIT, 0x04},
+	{0x760f, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7610, CRL_REG_LEN_08BIT, 0x00},
+	{0x7611, CRL_REG_LEN_08BIT, 0x00},
+	{0x7612, CRL_REG_LEN_08BIT, 0x06},
+	{0x7613, CRL_REG_LEN_08BIT, 0x5c},
+	{0x7614, CRL_REG_LEN_08BIT, 0x00},
+	{0x7615, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7616, CRL_REG_LEN_08BIT, 0x06},
+	{0x7617, CRL_REG_LEN_08BIT, 0x1c},
+	{0x7618, CRL_REG_LEN_08BIT, 0x00},
+	{0x7619, CRL_REG_LEN_08BIT, 0x02},
+	{0x761a, CRL_REG_LEN_08BIT, 0x06},
+	{0x761b, CRL_REG_LEN_08BIT, 0xa2},
+	{0x761c, CRL_REG_LEN_08BIT, 0x00},
+	{0x761d, CRL_REG_LEN_08BIT, 0x01},
+	{0x761e, CRL_REG_LEN_08BIT, 0x06},
+	{0x761f, CRL_REG_LEN_08BIT, 0xae},
+	{0x7620, CRL_REG_LEN_08BIT, 0x00},
+	{0x7621, CRL_REG_LEN_08BIT, 0x0e},
+	{0x7622, CRL_REG_LEN_08BIT, 0x05},
+	{0x7623, CRL_REG_LEN_08BIT, 0x30},
+	{0x7624, CRL_REG_LEN_08BIT, 0x07},
+	{0x7625, CRL_REG_LEN_08BIT, 0x00},
+	{0x7626, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7627, CRL_REG_LEN_08BIT, 0x00},
+	{0x7628, CRL_REG_LEN_08BIT, 0x04},
+	{0x7629, CRL_REG_LEN_08BIT, 0xe5},
+	{0x762a, CRL_REG_LEN_08BIT, 0x05},
+	{0x762b, CRL_REG_LEN_08BIT, 0x33},
+	{0x762c, CRL_REG_LEN_08BIT, 0x06},
+	{0x762d, CRL_REG_LEN_08BIT, 0x12},
+	{0x762e, CRL_REG_LEN_08BIT, 0x00},
+	{0x762f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7630, CRL_REG_LEN_08BIT, 0x06},
+	{0x7631, CRL_REG_LEN_08BIT, 0x52},
+	{0x7632, CRL_REG_LEN_08BIT, 0x00},
+	{0x7633, CRL_REG_LEN_08BIT, 0x01},
+	{0x7634, CRL_REG_LEN_08BIT, 0x06},
+	{0x7635, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7636, CRL_REG_LEN_08BIT, 0x04},
+	{0x7637, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7638, CRL_REG_LEN_08BIT, 0x00},
+	{0x7639, CRL_REG_LEN_08BIT, 0x01},
+	{0x763a, CRL_REG_LEN_08BIT, 0x05},
+	{0x763b, CRL_REG_LEN_08BIT, 0x30},
+	{0x763c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x763d, CRL_REG_LEN_08BIT, 0x00},
+	{0x763e, CRL_REG_LEN_08BIT, 0x06},
+	{0x763f, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7640, CRL_REG_LEN_08BIT, 0x00},
+	{0x7641, CRL_REG_LEN_08BIT, 0x02},
+	{0x7642, CRL_REG_LEN_08BIT, 0x06},
+	{0x7643, CRL_REG_LEN_08BIT, 0x26},
+	{0x7644, CRL_REG_LEN_08BIT, 0x00},
+	{0x7645, CRL_REG_LEN_08BIT, 0x02},
+	{0x7646, CRL_REG_LEN_08BIT, 0x05},
+	{0x7647, CRL_REG_LEN_08BIT, 0x33},
+	{0x7648, CRL_REG_LEN_08BIT, 0x06},
+	{0x7649, CRL_REG_LEN_08BIT, 0x20},
+	{0x764a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x764b, CRL_REG_LEN_08BIT, 0x00},
+	{0x764c, CRL_REG_LEN_08BIT, 0x06},
+	{0x764d, CRL_REG_LEN_08BIT, 0x56},
+	{0x764e, CRL_REG_LEN_08BIT, 0x00},
+	{0x764f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7650, CRL_REG_LEN_08BIT, 0x06},
+	{0x7651, CRL_REG_LEN_08BIT, 0x16},
+	{0x7652, CRL_REG_LEN_08BIT, 0x05},
+	{0x7653, CRL_REG_LEN_08BIT, 0x33},
+	{0x7654, CRL_REG_LEN_08BIT, 0x06},
+	{0x7655, CRL_REG_LEN_08BIT, 0x10},
+	{0x7656, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7657, CRL_REG_LEN_08BIT, 0x00},
+	{0x7658, CRL_REG_LEN_08BIT, 0x06},
+	{0x7659, CRL_REG_LEN_08BIT, 0x10},
+	{0x765a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765b, CRL_REG_LEN_08BIT, 0x00},
+	{0x765c, CRL_REG_LEN_08BIT, 0x06},
+	{0x765d, CRL_REG_LEN_08BIT, 0x20},
+	{0x765e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7660, CRL_REG_LEN_08BIT, 0x00},
+	{0x7661, CRL_REG_LEN_08BIT, 0x00},
+	{0x7662, CRL_REG_LEN_08BIT, 0x00},
+	{0x7663, CRL_REG_LEN_08BIT, 0x02},
+	{0x7664, CRL_REG_LEN_08BIT, 0x04},
+	{0x7665, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7666, CRL_REG_LEN_08BIT, 0x04},
+	{0x7667, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7668, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7669, CRL_REG_LEN_08BIT, 0x00},
+	{0x766a, CRL_REG_LEN_08BIT, 0x00},
+	{0x766b, CRL_REG_LEN_08BIT, 0x00},
+	{0x766c, CRL_REG_LEN_08BIT, 0x00},
+	{0x766d, CRL_REG_LEN_08BIT, 0x01},
+	{0x766e, CRL_REG_LEN_08BIT, 0x04},
+	{0x766f, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7670, CRL_REG_LEN_08BIT, 0x04},
+	{0x7671, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7672, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7673, CRL_REG_LEN_08BIT, 0x00},
+	{0x7674, CRL_REG_LEN_08BIT, 0x00},
+	{0x7675, CRL_REG_LEN_08BIT, 0x02},
+	{0x7676, CRL_REG_LEN_08BIT, 0x04},
+	{0x7677, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7678, CRL_REG_LEN_08BIT, 0x00},
+	{0x7679, CRL_REG_LEN_08BIT, 0x02},
+	{0x767a, CRL_REG_LEN_08BIT, 0x04},
+	{0x767b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x767c, CRL_REG_LEN_08BIT, 0x00},
+	{0x767d, CRL_REG_LEN_08BIT, 0x02},
+	{0x767e, CRL_REG_LEN_08BIT, 0x04},
+	{0x767f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7680, CRL_REG_LEN_08BIT, 0x05},
+	{0x7681, CRL_REG_LEN_08BIT, 0x83},
+	{0x7682, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7683, CRL_REG_LEN_08BIT, 0x00},
+	{0x7684, CRL_REG_LEN_08BIT, 0x00},
+	{0x7685, CRL_REG_LEN_08BIT, 0x02},
+	{0x7686, CRL_REG_LEN_08BIT, 0x04},
+	{0x7687, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7688, CRL_REG_LEN_08BIT, 0x00},
+	{0x7689, CRL_REG_LEN_08BIT, 0x02},
+	{0x768a, CRL_REG_LEN_08BIT, 0x04},
+	{0x768b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x768c, CRL_REG_LEN_08BIT, 0x00},
+	{0x768d, CRL_REG_LEN_08BIT, 0x02},
+	{0x768e, CRL_REG_LEN_08BIT, 0x04},
+	{0x768f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7690, CRL_REG_LEN_08BIT, 0x05},
+	{0x7691, CRL_REG_LEN_08BIT, 0x83},
+	{0x7692, CRL_REG_LEN_08BIT, 0x03},
+	{0x7693, CRL_REG_LEN_08BIT, 0x0b},
+	{0x7694, CRL_REG_LEN_08BIT, 0x05},
+	{0x7695, CRL_REG_LEN_08BIT, 0x83},
+	{0x7696, CRL_REG_LEN_08BIT, 0x00},
+	{0x7697, CRL_REG_LEN_08BIT, 0x07},
+	{0x7698, CRL_REG_LEN_08BIT, 0x05},
+	{0x7699, CRL_REG_LEN_08BIT, 0x03},
+	{0x769a, CRL_REG_LEN_08BIT, 0x00},
+	{0x769b, CRL_REG_LEN_08BIT, 0x05},
+	{0x769c, CRL_REG_LEN_08BIT, 0x05},
+	{0x769d, CRL_REG_LEN_08BIT, 0x32},
+	{0x769e, CRL_REG_LEN_08BIT, 0x05},
+	{0x769f, CRL_REG_LEN_08BIT, 0x30},
+	{0x76a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a1, CRL_REG_LEN_08BIT, 0x02},
+	{0x76a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a3, CRL_REG_LEN_08BIT, 0x78},
+	{0x76a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a5, CRL_REG_LEN_08BIT, 0x01},
+	{0x76a6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a7, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76a8, CRL_REG_LEN_08BIT, 0x03},
+	{0x76a9, CRL_REG_LEN_08BIT, 0x9a},
+	{0x76aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ab, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ad, CRL_REG_LEN_08BIT, 0x04},
+	{0x76ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x76af, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76b8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x76bb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76bc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76bd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76be, CRL_REG_LEN_08BIT, 0x03},
+	{0x76bf, CRL_REG_LEN_08BIT, 0x99},
+	{0x76c0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c1, CRL_REG_LEN_08BIT, 0x83},
+	{0x76c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c3, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c5, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x76ca, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cb, CRL_REG_LEN_08BIT, 0x30},
+	{0x76cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76cd, CRL_REG_LEN_08BIT, 0x02},
+	{0x76ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cf, CRL_REG_LEN_08BIT, 0x78},
+	{0x76d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d1, CRL_REG_LEN_08BIT, 0x01},
+	{0x76d2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76d4, CRL_REG_LEN_08BIT, 0x03},
+	{0x76d5, CRL_REG_LEN_08BIT, 0x98},
+	{0x76d6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d7, CRL_REG_LEN_08BIT, 0x83},
+	{0x76d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x76da, CRL_REG_LEN_08BIT, 0x05},
+	{0x76db, CRL_REG_LEN_08BIT, 0x03},
+	{0x76dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76dd, CRL_REG_LEN_08BIT, 0x01},
+	{0x76de, CRL_REG_LEN_08BIT, 0x05},
+	{0x76df, CRL_REG_LEN_08BIT, 0x32},
+	{0x76e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e1, CRL_REG_LEN_08BIT, 0x30},
+	{0x76e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x76e4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e5, CRL_REG_LEN_08BIT, 0x78},
+	{0x76e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76e8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e9, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76ea, CRL_REG_LEN_08BIT, 0x03},
+	{0x76eb, CRL_REG_LEN_08BIT, 0x97},
+	{0x76ec, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ed, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76f2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76f4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76f8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x76fb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76fc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76fd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x76ff, CRL_REG_LEN_08BIT, 0x96},
+	{0x7700, CRL_REG_LEN_08BIT, 0x05},
+	{0x7701, CRL_REG_LEN_08BIT, 0x83},
+	{0x7702, CRL_REG_LEN_08BIT, 0x05},
+	{0x7703, CRL_REG_LEN_08BIT, 0x03},
+	{0x7704, CRL_REG_LEN_08BIT, 0x05},
+	{0x7705, CRL_REG_LEN_08BIT, 0x32},
+	{0x7706, CRL_REG_LEN_08BIT, 0x05},
+	{0x7707, CRL_REG_LEN_08BIT, 0x30},
+	{0x7708, CRL_REG_LEN_08BIT, 0x00},
+	{0x7709, CRL_REG_LEN_08BIT, 0x02},
+	{0x770a, CRL_REG_LEN_08BIT, 0x05},
+	{0x770b, CRL_REG_LEN_08BIT, 0x78},
+	{0x770c, CRL_REG_LEN_08BIT, 0x00},
+	{0x770d, CRL_REG_LEN_08BIT, 0x01},
+	{0x770e, CRL_REG_LEN_08BIT, 0x05},
+	{0x770f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7710, CRL_REG_LEN_08BIT, 0x03},
+	{0x7711, CRL_REG_LEN_08BIT, 0x95},
+	{0x7712, CRL_REG_LEN_08BIT, 0x05},
+	{0x7713, CRL_REG_LEN_08BIT, 0x83},
+	{0x7714, CRL_REG_LEN_08BIT, 0x05},
+	{0x7715, CRL_REG_LEN_08BIT, 0x03},
+	{0x7716, CRL_REG_LEN_08BIT, 0x05},
+	{0x7717, CRL_REG_LEN_08BIT, 0x32},
+	{0x7718, CRL_REG_LEN_08BIT, 0x05},
+	{0x7719, CRL_REG_LEN_08BIT, 0x30},
+	{0x771a, CRL_REG_LEN_08BIT, 0x00},
+	{0x771b, CRL_REG_LEN_08BIT, 0x02},
+	{0x771c, CRL_REG_LEN_08BIT, 0x05},
+	{0x771d, CRL_REG_LEN_08BIT, 0x78},
+	{0x771e, CRL_REG_LEN_08BIT, 0x00},
+	{0x771f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7720, CRL_REG_LEN_08BIT, 0x05},
+	{0x7721, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7722, CRL_REG_LEN_08BIT, 0x03},
+	{0x7723, CRL_REG_LEN_08BIT, 0x94},
+	{0x7724, CRL_REG_LEN_08BIT, 0x05},
+	{0x7725, CRL_REG_LEN_08BIT, 0x83},
+	{0x7726, CRL_REG_LEN_08BIT, 0x00},
+	{0x7727, CRL_REG_LEN_08BIT, 0x01},
+	{0x7728, CRL_REG_LEN_08BIT, 0x05},
+	{0x7729, CRL_REG_LEN_08BIT, 0x03},
+	{0x772a, CRL_REG_LEN_08BIT, 0x00},
+	{0x772b, CRL_REG_LEN_08BIT, 0x01},
+	{0x772c, CRL_REG_LEN_08BIT, 0x05},
+	{0x772d, CRL_REG_LEN_08BIT, 0x32},
+	{0x772e, CRL_REG_LEN_08BIT, 0x05},
+	{0x772f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7730, CRL_REG_LEN_08BIT, 0x00},
+	{0x7731, CRL_REG_LEN_08BIT, 0x02},
+	{0x7732, CRL_REG_LEN_08BIT, 0x05},
+	{0x7733, CRL_REG_LEN_08BIT, 0x78},
+	{0x7734, CRL_REG_LEN_08BIT, 0x00},
+	{0x7735, CRL_REG_LEN_08BIT, 0x01},
+	{0x7736, CRL_REG_LEN_08BIT, 0x05},
+	{0x7737, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7738, CRL_REG_LEN_08BIT, 0x03},
+	{0x7739, CRL_REG_LEN_08BIT, 0x93},
+	{0x773a, CRL_REG_LEN_08BIT, 0x05},
+	{0x773b, CRL_REG_LEN_08BIT, 0x83},
+	{0x773c, CRL_REG_LEN_08BIT, 0x00},
+	{0x773d, CRL_REG_LEN_08BIT, 0x00},
+	{0x773e, CRL_REG_LEN_08BIT, 0x05},
+	{0x773f, CRL_REG_LEN_08BIT, 0x03},
+	{0x7740, CRL_REG_LEN_08BIT, 0x00},
+	{0x7741, CRL_REG_LEN_08BIT, 0x00},
+	{0x7742, CRL_REG_LEN_08BIT, 0x05},
+	{0x7743, CRL_REG_LEN_08BIT, 0x32},
+	{0x7744, CRL_REG_LEN_08BIT, 0x05},
+	{0x7745, CRL_REG_LEN_08BIT, 0x30},
+	{0x7746, CRL_REG_LEN_08BIT, 0x00},
+	{0x7747, CRL_REG_LEN_08BIT, 0x02},
+	{0x7748, CRL_REG_LEN_08BIT, 0x05},
+	{0x7749, CRL_REG_LEN_08BIT, 0x78},
+	{0x774a, CRL_REG_LEN_08BIT, 0x00},
+	{0x774b, CRL_REG_LEN_08BIT, 0x01},
+	{0x774c, CRL_REG_LEN_08BIT, 0x05},
+	{0x774d, CRL_REG_LEN_08BIT, 0x7c},
+	{0x774e, CRL_REG_LEN_08BIT, 0x03},
+	{0x774f, CRL_REG_LEN_08BIT, 0x92},
+	{0x7750, CRL_REG_LEN_08BIT, 0x05},
+	{0x7751, CRL_REG_LEN_08BIT, 0x83},
+	{0x7752, CRL_REG_LEN_08BIT, 0x05},
+	{0x7753, CRL_REG_LEN_08BIT, 0x03},
+	{0x7754, CRL_REG_LEN_08BIT, 0x00},
+	{0x7755, CRL_REG_LEN_08BIT, 0x00},
+	{0x7756, CRL_REG_LEN_08BIT, 0x05},
+	{0x7757, CRL_REG_LEN_08BIT, 0x32},
+	{0x7758, CRL_REG_LEN_08BIT, 0x05},
+	{0x7759, CRL_REG_LEN_08BIT, 0x30},
+	{0x775a, CRL_REG_LEN_08BIT, 0x00},
+	{0x775b, CRL_REG_LEN_08BIT, 0x02},
+	{0x775c, CRL_REG_LEN_08BIT, 0x05},
+	{0x775d, CRL_REG_LEN_08BIT, 0x78},
+	{0x775e, CRL_REG_LEN_08BIT, 0x00},
+	{0x775f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7760, CRL_REG_LEN_08BIT, 0x05},
+	{0x7761, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7762, CRL_REG_LEN_08BIT, 0x03},
+	{0x7763, CRL_REG_LEN_08BIT, 0x91},
+	{0x7764, CRL_REG_LEN_08BIT, 0x05},
+	{0x7765, CRL_REG_LEN_08BIT, 0x83},
+	{0x7766, CRL_REG_LEN_08BIT, 0x05},
+	{0x7767, CRL_REG_LEN_08BIT, 0x03},
+	{0x7768, CRL_REG_LEN_08BIT, 0x05},
+	{0x7769, CRL_REG_LEN_08BIT, 0x32},
+	{0x776a, CRL_REG_LEN_08BIT, 0x05},
+	{0x776b, CRL_REG_LEN_08BIT, 0x30},
+	{0x776c, CRL_REG_LEN_08BIT, 0x00},
+	{0x776d, CRL_REG_LEN_08BIT, 0x02},
+	{0x776e, CRL_REG_LEN_08BIT, 0x05},
+	{0x776f, CRL_REG_LEN_08BIT, 0x78},
+	{0x7770, CRL_REG_LEN_08BIT, 0x00},
+	{0x7771, CRL_REG_LEN_08BIT, 0x01},
+	{0x7772, CRL_REG_LEN_08BIT, 0x05},
+	{0x7773, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7774, CRL_REG_LEN_08BIT, 0x03},
+	{0x7775, CRL_REG_LEN_08BIT, 0x90},
+	{0x7776, CRL_REG_LEN_08BIT, 0x05},
+	{0x7777, CRL_REG_LEN_08BIT, 0x83},
+	{0x7778, CRL_REG_LEN_08BIT, 0x05},
+	{0x7779, CRL_REG_LEN_08BIT, 0x03},
+	{0x777a, CRL_REG_LEN_08BIT, 0x05},
+	{0x777b, CRL_REG_LEN_08BIT, 0x32},
+	{0x777c, CRL_REG_LEN_08BIT, 0x05},
+	{0x777d, CRL_REG_LEN_08BIT, 0x30},
+	{0x777e, CRL_REG_LEN_08BIT, 0x00},
+	{0x777f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7780, CRL_REG_LEN_08BIT, 0x05},
+	{0x7781, CRL_REG_LEN_08BIT, 0x78},
+	{0x7782, CRL_REG_LEN_08BIT, 0x00},
+	{0x7783, CRL_REG_LEN_08BIT, 0x01},
+	{0x7784, CRL_REG_LEN_08BIT, 0x05},
+	{0x7785, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7786, CRL_REG_LEN_08BIT, 0x02},
+	{0x7787, CRL_REG_LEN_08BIT, 0x90},
+	{0x7788, CRL_REG_LEN_08BIT, 0x05},
+	{0x7789, CRL_REG_LEN_08BIT, 0x03},
+	{0x778a, CRL_REG_LEN_08BIT, 0x07},
+	{0x778b, CRL_REG_LEN_08BIT, 0x00},
+	{0x778c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x778d, CRL_REG_LEN_08BIT, 0x00},
+	{0x778e, CRL_REG_LEN_08BIT, 0x08},
+	{0x778f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7790, CRL_REG_LEN_08BIT, 0x08},
+	{0x7791, CRL_REG_LEN_08BIT, 0xee},
+	{0x7792, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7793, CRL_REG_LEN_08BIT, 0x00},
+	{0x7794, CRL_REG_LEN_08BIT, 0x05},
+	{0x7795, CRL_REG_LEN_08BIT, 0x33},
+	{0x7796, CRL_REG_LEN_08BIT, 0x04},
+	{0x7797, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7798, CRL_REG_LEN_08BIT, 0x06},
+	{0x7799, CRL_REG_LEN_08BIT, 0x52},
+	{0x779a, CRL_REG_LEN_08BIT, 0x04},
+	{0x779b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x779c, CRL_REG_LEN_08BIT, 0x00},
+	{0x779d, CRL_REG_LEN_08BIT, 0x00},
+	{0x779e, CRL_REG_LEN_08BIT, 0x06},
+	{0x779f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77a2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77a6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77aa, CRL_REG_LEN_08BIT, 0x06},
+	{0x77ab, CRL_REG_LEN_08BIT, 0xae},
+	{0x77ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x77af, CRL_REG_LEN_08BIT, 0x30},
+	{0x77b0, CRL_REG_LEN_08BIT, 0x09},
+	{0x77b1, CRL_REG_LEN_08BIT, 0x19},
+	{0x77b2, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x77b5, CRL_REG_LEN_08BIT, 0x33},
+	{0x77b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77b7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77b8, CRL_REG_LEN_08BIT, 0x06},
+	{0x77b9, CRL_REG_LEN_08BIT, 0x52},
+	{0x77ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x77bb, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x77be, CRL_REG_LEN_08BIT, 0x06},
+	{0x77bf, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77c2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77c6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ca, CRL_REG_LEN_08BIT, 0x06},
+	{0x77cb, CRL_REG_LEN_08BIT, 0xae},
+	{0x77cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77cd, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x77cf, CRL_REG_LEN_08BIT, 0x30},
+	{0x77d0, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77d6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77d8, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d9, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77da, CRL_REG_LEN_08BIT, 0x05},
+	{0x77db, CRL_REG_LEN_08BIT, 0x33},
+	{0x77dc, CRL_REG_LEN_08BIT, 0x07},
+	{0x77dd, CRL_REG_LEN_08BIT, 0x10},
+	{0x77de, CRL_REG_LEN_08BIT, 0x00},
+	{0x77df, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e1, CRL_REG_LEN_08BIT, 0xbb},
+	{0x77e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e5, CRL_REG_LEN_08BIT, 0xaa},
+	{0x77e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e9, CRL_REG_LEN_08BIT, 0x99},
+	{0x77ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x77eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ed, CRL_REG_LEN_08BIT, 0x88},
+	{0x77ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f1, CRL_REG_LEN_08BIT, 0x77},
+	{0x77f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f5, CRL_REG_LEN_08BIT, 0x66},
+	{0x77f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f9, CRL_REG_LEN_08BIT, 0x55},
+	{0x77fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x77fd, CRL_REG_LEN_08BIT, 0x44},
+	{0x77fe, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ff, CRL_REG_LEN_08BIT, 0x00},
+	{0x7800, CRL_REG_LEN_08BIT, 0x01},
+	{0x7801, CRL_REG_LEN_08BIT, 0x33},
+	{0x7802, CRL_REG_LEN_08BIT, 0x00},
+	{0x7803, CRL_REG_LEN_08BIT, 0x00},
+	{0x7804, CRL_REG_LEN_08BIT, 0x01},
+	{0x7805, CRL_REG_LEN_08BIT, 0x22},
+	{0x7806, CRL_REG_LEN_08BIT, 0x00},
+	{0x7807, CRL_REG_LEN_08BIT, 0x00},
+	{0x7808, CRL_REG_LEN_08BIT, 0x01},
+	{0x7809, CRL_REG_LEN_08BIT, 0x11},
+	{0x780a, CRL_REG_LEN_08BIT, 0x00},
+	{0x780b, CRL_REG_LEN_08BIT, 0x00},
+	{0x780c, CRL_REG_LEN_08BIT, 0x01},
+	{0x780d, CRL_REG_LEN_08BIT, 0x00},
+	{0x780e, CRL_REG_LEN_08BIT, 0x01},
+	{0x780f, CRL_REG_LEN_08BIT, 0xff},
+	{0x7810, CRL_REG_LEN_08BIT, 0x07},
+	{0x7811, CRL_REG_LEN_08BIT, 0x00},
+	{0x7812, CRL_REG_LEN_08BIT, 0x02},
+	{0x7813, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7814, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7815, CRL_REG_LEN_08BIT, 0x00},
+	{0x7816, CRL_REG_LEN_08BIT, 0x08},
+	{0x7817, CRL_REG_LEN_08BIT, 0x35},
+	{0x7818, CRL_REG_LEN_08BIT, 0x06},
+	{0x7819, CRL_REG_LEN_08BIT, 0x52},
+	{0x781a, CRL_REG_LEN_08BIT, 0x04},
+	{0x781b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x781c, CRL_REG_LEN_08BIT, 0x00},
+	{0x781d, CRL_REG_LEN_08BIT, 0x00},
+	{0x781e, CRL_REG_LEN_08BIT, 0x06},
+	{0x781f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7820, CRL_REG_LEN_08BIT, 0x05},
+	{0x7821, CRL_REG_LEN_08BIT, 0x33},
+	{0x7822, CRL_REG_LEN_08BIT, 0x09},
+	{0x7823, CRL_REG_LEN_08BIT, 0x19},
+	{0x7824, CRL_REG_LEN_08BIT, 0x06},
+	{0x7825, CRL_REG_LEN_08BIT, 0x1e},
+	{0x7826, CRL_REG_LEN_08BIT, 0x05},
+	{0x7827, CRL_REG_LEN_08BIT, 0x33},
+	{0x7828, CRL_REG_LEN_08BIT, 0x00},
+	{0x7829, CRL_REG_LEN_08BIT, 0x01},
+	{0x782a, CRL_REG_LEN_08BIT, 0x06},
+	{0x782b, CRL_REG_LEN_08BIT, 0x24},
+	{0x782c, CRL_REG_LEN_08BIT, 0x06},
+	{0x782d, CRL_REG_LEN_08BIT, 0x20},
+	{0x782e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x782f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7830, CRL_REG_LEN_08BIT, 0x08},
+	{0x7831, CRL_REG_LEN_08BIT, 0x35},
+	{0x7832, CRL_REG_LEN_08BIT, 0x07},
+	{0x7833, CRL_REG_LEN_08BIT, 0x10},
+	{0x7834, CRL_REG_LEN_08BIT, 0x00},
+	{0x7835, CRL_REG_LEN_08BIT, 0x00},
+	{0x7836, CRL_REG_LEN_08BIT, 0x01},
+	{0x7837, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7838, CRL_REG_LEN_08BIT, 0x00},
+	{0x7839, CRL_REG_LEN_08BIT, 0x00},
+	{0x783a, CRL_REG_LEN_08BIT, 0x01},
+	{0x783b, CRL_REG_LEN_08BIT, 0xaa},
+	{0x783c, CRL_REG_LEN_08BIT, 0x00},
+	{0x783d, CRL_REG_LEN_08BIT, 0x00},
+	{0x783e, CRL_REG_LEN_08BIT, 0x01},
+	{0x783f, CRL_REG_LEN_08BIT, 0x99},
+	{0x7840, CRL_REG_LEN_08BIT, 0x00},
+	{0x7841, CRL_REG_LEN_08BIT, 0x00},
+	{0x7842, CRL_REG_LEN_08BIT, 0x01},
+	{0x7843, CRL_REG_LEN_08BIT, 0x88},
+	{0x7844, CRL_REG_LEN_08BIT, 0x00},
+	{0x7845, CRL_REG_LEN_08BIT, 0x00},
+	{0x7846, CRL_REG_LEN_08BIT, 0x01},
+	{0x7847, CRL_REG_LEN_08BIT, 0x77},
+	{0x7848, CRL_REG_LEN_08BIT, 0x00},
+	{0x7849, CRL_REG_LEN_08BIT, 0x00},
+	{0x784a, CRL_REG_LEN_08BIT, 0x01},
+	{0x784b, CRL_REG_LEN_08BIT, 0x66},
+	{0x784c, CRL_REG_LEN_08BIT, 0x00},
+	{0x784d, CRL_REG_LEN_08BIT, 0x00},
+	{0x784e, CRL_REG_LEN_08BIT, 0x01},
+	{0x784f, CRL_REG_LEN_08BIT, 0x55},
+	{0x7850, CRL_REG_LEN_08BIT, 0x00},
+	{0x7851, CRL_REG_LEN_08BIT, 0x00},
+	{0x7852, CRL_REG_LEN_08BIT, 0x01},
+	{0x7853, CRL_REG_LEN_08BIT, 0x44},
+	{0x7854, CRL_REG_LEN_08BIT, 0x00},
+	{0x7855, CRL_REG_LEN_08BIT, 0x00},
+	{0x7856, CRL_REG_LEN_08BIT, 0x01},
+	{0x7857, CRL_REG_LEN_08BIT, 0x33},
+	{0x7858, CRL_REG_LEN_08BIT, 0x00},
+	{0x7859, CRL_REG_LEN_08BIT, 0x00},
+	{0x785a, CRL_REG_LEN_08BIT, 0x01},
+	{0x785b, CRL_REG_LEN_08BIT, 0x22},
+	{0x785c, CRL_REG_LEN_08BIT, 0x00},
+	{0x785d, CRL_REG_LEN_08BIT, 0x00},
+	{0x785e, CRL_REG_LEN_08BIT, 0x01},
+	{0x785f, CRL_REG_LEN_08BIT, 0x11},
+	{0x7860, CRL_REG_LEN_08BIT, 0x00},
+	{0x7861, CRL_REG_LEN_08BIT, 0x00},
+	{0x7862, CRL_REG_LEN_08BIT, 0x01},
+	{0x7863, CRL_REG_LEN_08BIT, 0x00},
+	{0x7864, CRL_REG_LEN_08BIT, 0x07},
+	{0x7865, CRL_REG_LEN_08BIT, 0x00},
+	{0x7866, CRL_REG_LEN_08BIT, 0x01},
+	{0x7867, CRL_REG_LEN_08BIT, 0xff},
+	{0x7868, CRL_REG_LEN_08BIT, 0x02},
+	{0x7869, CRL_REG_LEN_08BIT, 0xa0},
+	{0x786a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x786b, CRL_REG_LEN_08BIT, 0x00},
+	{0x786c, CRL_REG_LEN_08BIT, 0x08},
+	{0x786d, CRL_REG_LEN_08BIT, 0x3a},
+	{0x786e, CRL_REG_LEN_08BIT, 0x08},
+	{0x786f, CRL_REG_LEN_08BIT, 0x6a},
+	{0x7870, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7871, CRL_REG_LEN_08BIT, 0x00},
+	{0x7872, CRL_REG_LEN_08BIT, 0x04},
+	{0x7873, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7874, CRL_REG_LEN_08BIT, 0x09},
+	{0x7875, CRL_REG_LEN_08BIT, 0x19},
+	{0x7876, CRL_REG_LEN_08BIT, 0x04},
+	{0x7877, CRL_REG_LEN_08BIT, 0x99},
+	{0x7878, CRL_REG_LEN_08BIT, 0x07},
+	{0x7879, CRL_REG_LEN_08BIT, 0x14},
+	{0x787a, CRL_REG_LEN_08BIT, 0x00},
+	{0x787b, CRL_REG_LEN_08BIT, 0x01},
+	{0x787c, CRL_REG_LEN_08BIT, 0x04},
+	{0x787d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x787e, CRL_REG_LEN_08BIT, 0x00},
+	{0x787f, CRL_REG_LEN_08BIT, 0x07},
+	{0x7880, CRL_REG_LEN_08BIT, 0x04},
+	{0x7881, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7882, CRL_REG_LEN_08BIT, 0x00},
+	{0x7883, CRL_REG_LEN_08BIT, 0x00},
+	{0x7884, CRL_REG_LEN_08BIT, 0x04},
+	{0x7885, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7886, CRL_REG_LEN_08BIT, 0x04},
+	{0x7887, CRL_REG_LEN_08BIT, 0x80},
+	{0x7888, CRL_REG_LEN_08BIT, 0x04},
+	{0x7889, CRL_REG_LEN_08BIT, 0x00},
+	{0x788a, CRL_REG_LEN_08BIT, 0x05},
+	{0x788b, CRL_REG_LEN_08BIT, 0x03},
+	{0x788c, CRL_REG_LEN_08BIT, 0x06},
+	{0x788d, CRL_REG_LEN_08BIT, 0x00},
+	{0x788e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x788f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7890, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7891, CRL_REG_LEN_08BIT, 0x00},
+	{0x7892, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7893, CRL_REG_LEN_08BIT, 0x00},
+	{0x3001, CRL_REG_LEN_08BIT, 0x32},
+	{0x3005, CRL_REG_LEN_08BIT, 0x13},
+	{0x3014, CRL_REG_LEN_08BIT, 0x44},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x48},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x3b},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x92},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x64},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x00},
+	{0x3195, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x03},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x13},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x1a},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3250, CRL_REG_LEN_08BIT, 0xf7},
+	{0x3012, CRL_REG_LEN_08BIT, 0x01},
+};
+
+/* ov2775_1928x1088_3x12_30fps_mipi960_regset */
+static struct crl_register_write_rep ov2775_3x12_30fps_mipi960_regset[] = {
+	{0x3013, CRL_REG_LEN_08BIT, 0x01},
+	{0x3000, CRL_REG_LEN_08BIT, 0x02},
+	{0x3001, CRL_REG_LEN_08BIT, 0x28},
+	{0x3002, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x01},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},
+	{0x3005, CRL_REG_LEN_08BIT, 0x26},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x07},
+	{0x3008, CRL_REG_LEN_08BIT, 0x01},
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},
+	{0x300c, CRL_REG_LEN_08BIT, 0x6c},
+	{0x300e, CRL_REG_LEN_08BIT, 0x80},
+	{0x300f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3012, CRL_REG_LEN_08BIT, 0x00},
+	{0x3013, CRL_REG_LEN_08BIT, 0x00},
+	{0x3014, CRL_REG_LEN_08BIT, 0xc4},
+	{0x3015, CRL_REG_LEN_08BIT, 0x00},
+	{0x3017, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x00},
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},
+	{0x301a, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0x0e},
+	{0x301e, CRL_REG_LEN_08BIT, 0x17},
+	{0x301f, CRL_REG_LEN_08BIT, 0xe1},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x3031, CRL_REG_LEN_08BIT, 0x62},
+	{0x3032, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3033, CRL_REG_LEN_08BIT, 0x30},
+	{0x3034, CRL_REG_LEN_08BIT, 0x3f},
+	{0x3035, CRL_REG_LEN_08BIT, 0x5f},
+	{0x3036, CRL_REG_LEN_08BIT, 0x02},
+	{0x3037, CRL_REG_LEN_08BIT, 0x9f},
+	{0x3038, CRL_REG_LEN_08BIT, 0x04},
+	{0x3039, CRL_REG_LEN_08BIT, 0xb7},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x07},
+	{0x303c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x303d, CRL_REG_LEN_08BIT, 0x00},
+	{0x303e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x303f, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3040, CRL_REG_LEN_08BIT, 0xf3},
+	{0x3041, CRL_REG_LEN_08BIT, 0x29},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf6},
+	{0x3043, CRL_REG_LEN_08BIT, 0x65},
+	{0x3044, CRL_REG_LEN_08BIT, 0x06},
+	{0x3045, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3046, CRL_REG_LEN_08BIT, 0x59},
+	{0x3047, CRL_REG_LEN_08BIT, 0x07},
+	{0x3048, CRL_REG_LEN_08BIT, 0x82},
+	{0x3049, CRL_REG_LEN_08BIT, 0xcf},
+	{0x304a, CRL_REG_LEN_08BIT, 0x12},
+	{0x304b, CRL_REG_LEN_08BIT, 0x40},
+	{0x304c, CRL_REG_LEN_08BIT, 0x33},
+	{0x304d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x304e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x304f, CRL_REG_LEN_08BIT, 0x3d},
+	{0x3050, CRL_REG_LEN_08BIT, 0x10},
+	{0x3060, CRL_REG_LEN_08BIT, 0x00},
+	{0x3061, CRL_REG_LEN_08BIT, 0x64},
+	{0x3062, CRL_REG_LEN_08BIT, 0x00},
+	{0x3063, CRL_REG_LEN_08BIT, 0xe4},
+	{0x3066, CRL_REG_LEN_08BIT, 0x80},
+	{0x3080, CRL_REG_LEN_08BIT, 0x00},
+	{0x3081, CRL_REG_LEN_08BIT, 0x00},
+	{0x3082, CRL_REG_LEN_08BIT, 0x01},
+	{0x3083, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3084, CRL_REG_LEN_08BIT, 0x06},
+	{0x3085, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x10},
+	{0x3087, CRL_REG_LEN_08BIT, 0x10},
+	{0x3089, CRL_REG_LEN_08BIT, 0x00},
+	{0x308a, CRL_REG_LEN_08BIT, 0x01},
+	{0x3093, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a1, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x30a4, CRL_REG_LEN_08BIT, 0x07},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x8b},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x3f},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x04},
+	{0x30aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ac, CRL_REG_LEN_08BIT, 0x07},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x80},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x08},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x98},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x65},
+	{0x30b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x10},
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x30ba, CRL_REG_LEN_08BIT, 0x10},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x03},
+	{0x30be, CRL_REG_LEN_08BIT, 0x5c},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x20},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x4a},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d3, CRL_REG_LEN_08BIT, 0x80},
+	{0x30d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d9, CRL_REG_LEN_08BIT, 0x09},
+	{0x30da, CRL_REG_LEN_08BIT, 0x64},
+	{0x30dd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30de, CRL_REG_LEN_08BIT, 0x16},
+	{0x30df, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e0, CRL_REG_LEN_08BIT, 0x17},
+	{0x30e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e2, CRL_REG_LEN_08BIT, 0x18},
+	{0x30e3, CRL_REG_LEN_08BIT, 0x10},
+	{0x30e4, CRL_REG_LEN_08BIT, 0x04},
+	{0x30e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x30eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ec, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x3101, CRL_REG_LEN_08BIT, 0x00},
+	{0x3102, CRL_REG_LEN_08BIT, 0x00},
+	{0x3103, CRL_REG_LEN_08BIT, 0x00},
+	{0x3104, CRL_REG_LEN_08BIT, 0x00},
+	{0x3105, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3106, CRL_REG_LEN_08BIT, 0x87},
+	{0x3107, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3108, CRL_REG_LEN_08BIT, 0x9d},
+	{0x3109, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310a, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310b, CRL_REG_LEN_08BIT, 0x6a},
+	{0x310c, CRL_REG_LEN_08BIT, 0x3a},
+	{0x310d, CRL_REG_LEN_08BIT, 0x5a},
+	{0x310e, CRL_REG_LEN_08BIT, 0x00},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x00},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3123, CRL_REG_LEN_08BIT, 0x00},
+	{0x3124, CRL_REG_LEN_08BIT, 0x00},
+	{0x3125, CRL_REG_LEN_08BIT, 0x70},
+	{0x3126, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3127, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3128, CRL_REG_LEN_08BIT, 0x00},
+	{0x3129, CRL_REG_LEN_08BIT, 0x3a},
+	{0x312a, CRL_REG_LEN_08BIT, 0x02},
+	{0x312b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312c, CRL_REG_LEN_08BIT, 0x00},
+	{0x312d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312e, CRL_REG_LEN_08BIT, 0x1d},
+	{0x312f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3130, CRL_REG_LEN_08BIT, 0x00},
+	{0x3131, CRL_REG_LEN_08BIT, 0x00},
+	{0x3132, CRL_REG_LEN_08BIT, 0x00},
+	{0x3140, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3141, CRL_REG_LEN_08BIT, 0x03},
+	{0x3142, CRL_REG_LEN_08BIT, 0x00},
+	{0x3143, CRL_REG_LEN_08BIT, 0x00},
+	{0x3144, CRL_REG_LEN_08BIT, 0x00},
+	{0x3145, CRL_REG_LEN_08BIT, 0x00},
+	{0x3146, CRL_REG_LEN_08BIT, 0x00},
+	{0x3147, CRL_REG_LEN_08BIT, 0x00},
+	{0x3148, CRL_REG_LEN_08BIT, 0x00},
+	{0x3149, CRL_REG_LEN_08BIT, 0x00},
+	{0x314a, CRL_REG_LEN_08BIT, 0x00},
+	{0x314b, CRL_REG_LEN_08BIT, 0x00},
+	{0x314c, CRL_REG_LEN_08BIT, 0x00},
+	{0x314d, CRL_REG_LEN_08BIT, 0x00},
+	{0x314e, CRL_REG_LEN_08BIT, 0x1c},
+	{0x314f, CRL_REG_LEN_08BIT, 0xff},
+	{0x3150, CRL_REG_LEN_08BIT, 0xff},
+	{0x3151, CRL_REG_LEN_08BIT, 0xff},
+	{0x3152, CRL_REG_LEN_08BIT, 0x10},
+	{0x3153, CRL_REG_LEN_08BIT, 0x10},
+	{0x3154, CRL_REG_LEN_08BIT, 0x10},
+	{0x3155, CRL_REG_LEN_08BIT, 0x00},
+	{0x3156, CRL_REG_LEN_08BIT, 0x03},
+	{0x3157, CRL_REG_LEN_08BIT, 0x00},
+	{0x3158, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3159, CRL_REG_LEN_08BIT, 0xff},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3160, CRL_REG_LEN_08BIT, 0x01},
+	{0x3161, CRL_REG_LEN_08BIT, 0x00},
+	{0x3162, CRL_REG_LEN_08BIT, 0x01},
+	{0x3163, CRL_REG_LEN_08BIT, 0x00},
+	{0x3164, CRL_REG_LEN_08BIT, 0x01},
+	{0x3165, CRL_REG_LEN_08BIT, 0x00},
+	{0x3190, CRL_REG_LEN_08BIT, 0x05},
+	{0x3191, CRL_REG_LEN_08BIT, 0x99},
+	{0x3193, CRL_REG_LEN_08BIT, 0x08},
+	{0x3194, CRL_REG_LEN_08BIT, 0x13},
+	{0x3195, CRL_REG_LEN_08BIT, 0x33},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x10},
+	{0x3198, CRL_REG_LEN_08BIT, 0x00},
+	{0x3199, CRL_REG_LEN_08BIT, 0x3f},
+	{0x319a, CRL_REG_LEN_08BIT, 0x40},
+	{0x319b, CRL_REG_LEN_08BIT, 0x7f},
+	{0x319c, CRL_REG_LEN_08BIT, 0x80},
+	{0x319d, CRL_REG_LEN_08BIT, 0xbf},
+	{0x319e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x319f, CRL_REG_LEN_08BIT, 0xff},
+	{0x31a0, CRL_REG_LEN_08BIT, 0x24},
+	{0x31a1, CRL_REG_LEN_08BIT, 0x55},
+	{0x31a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a3, CRL_REG_LEN_08BIT, 0x08},
+	{0x31a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b2, CRL_REG_LEN_08BIT, 0x02},
+	{0x31b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b5, CRL_REG_LEN_08BIT, 0x01},
+	{0x31b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x31ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d0, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d1, CRL_REG_LEN_08BIT, 0x34},
+	{0x31d2, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d4, CRL_REG_LEN_08BIT, 0x2d},
+	{0x31d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x31d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x31d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d9, CRL_REG_LEN_08BIT, 0x64},
+	{0x31da, CRL_REG_LEN_08BIT, 0x00},
+	{0x31db, CRL_REG_LEN_08BIT, 0x30},
+	{0x31dc, CRL_REG_LEN_08BIT, 0x04},
+	{0x31dd, CRL_REG_LEN_08BIT, 0x69},
+	{0x31de, CRL_REG_LEN_08BIT, 0x0a},
+	{0x31df, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31e0, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e1, CRL_REG_LEN_08BIT, 0x32},
+	{0x31e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x08},
+	{0x31e5, CRL_REG_LEN_08BIT, 0x80},
+	{0x31e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e7, CRL_REG_LEN_08BIT, 0x2c},
+	{0x31e8, CRL_REG_LEN_08BIT, 0x6c},
+	{0x31e9, CRL_REG_LEN_08BIT, 0xac},
+	{0x31ea, CRL_REG_LEN_08BIT, 0xec},
+	{0x31eb, CRL_REG_LEN_08BIT, 0x3f},
+	{0x31ec, CRL_REG_LEN_08BIT, 0x0f},
+	{0x31ed, CRL_REG_LEN_08BIT, 0x20},
+	{0x31ee, CRL_REG_LEN_08BIT, 0x04},
+	{0x31ef, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f0, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f1, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f3, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f4, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f5, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f6, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f7, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f8, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f9, CRL_REG_LEN_08BIT, 0x90},
+	{0x31fa, CRL_REG_LEN_08BIT, 0x04},
+	{0x31fb, CRL_REG_LEN_08BIT, 0x48},
+	{0x31fd, CRL_REG_LEN_08BIT, 0xcb},
+	{0x31fe, CRL_REG_LEN_08BIT, 0x01},
+	{0x31ff, CRL_REG_LEN_08BIT, 0x03},
+	{0x3200, CRL_REG_LEN_08BIT, 0x00},
+	{0x3201, CRL_REG_LEN_08BIT, 0xff},
+	{0x3202, CRL_REG_LEN_08BIT, 0x00},
+	{0x3203, CRL_REG_LEN_08BIT, 0xff},
+	{0x3204, CRL_REG_LEN_08BIT, 0xff},
+	{0x3205, CRL_REG_LEN_08BIT, 0xff},
+	{0x3206, CRL_REG_LEN_08BIT, 0xff},
+	{0x3207, CRL_REG_LEN_08BIT, 0xff},
+	{0x3208, CRL_REG_LEN_08BIT, 0xff},
+	{0x3209, CRL_REG_LEN_08BIT, 0xff},
+	{0x320a, CRL_REG_LEN_08BIT, 0xff},
+	{0x320b, CRL_REG_LEN_08BIT, 0x1b},
+	{0x320c, CRL_REG_LEN_08BIT, 0x1f},
+	{0x320d, CRL_REG_LEN_08BIT, 0x1e},
+	{0x320e, CRL_REG_LEN_08BIT, 0x30},
+	{0x320f, CRL_REG_LEN_08BIT, 0x2d},
+	{0x3210, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3211, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3212, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3213, CRL_REG_LEN_08BIT, 0x24},
+	{0x3214, CRL_REG_LEN_08BIT, 0x22},
+	{0x3215, CRL_REG_LEN_08BIT, 0x00},
+	{0x3216, CRL_REG_LEN_08BIT, 0x04},
+	{0x3217, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3218, CRL_REG_LEN_08BIT, 0x6c},
+	{0x3219, CRL_REG_LEN_08BIT, 0xac},
+	{0x321a, CRL_REG_LEN_08BIT, 0xec},
+	{0x321b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3230, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3231, CRL_REG_LEN_08BIT, 0x00},
+	{0x3232, CRL_REG_LEN_08BIT, 0x80},
+	{0x3233, CRL_REG_LEN_08BIT, 0x00},
+	{0x3234, CRL_REG_LEN_08BIT, 0x10},
+	{0x3235, CRL_REG_LEN_08BIT, 0xaa},
+	{0x3236, CRL_REG_LEN_08BIT, 0x55},
+	{0x3237, CRL_REG_LEN_08BIT, 0x99},
+	{0x3238, CRL_REG_LEN_08BIT, 0x66},
+	{0x3239, CRL_REG_LEN_08BIT, 0x08},
+	{0x323a, CRL_REG_LEN_08BIT, 0x88},
+	{0x323b, CRL_REG_LEN_08BIT, 0x00},
+	{0x323c, CRL_REG_LEN_08BIT, 0x00},
+	{0x323d, CRL_REG_LEN_08BIT, 0x03},
+	{0x3250, CRL_REG_LEN_08BIT, 0x33},
+	{0x3251, CRL_REG_LEN_08BIT, 0x00},
+	{0x3252, CRL_REG_LEN_08BIT, 0x20},
+	{0x3253, CRL_REG_LEN_08BIT, 0x00},
+	{0x3254, CRL_REG_LEN_08BIT, 0x11},
+	{0x3255, CRL_REG_LEN_08BIT, 0x01},
+	{0x3256, CRL_REG_LEN_08BIT, 0x00},
+	{0x3257, CRL_REG_LEN_08BIT, 0x00},
+	{0x3258, CRL_REG_LEN_08BIT, 0x00},
+	{0x3270, CRL_REG_LEN_08BIT, 0x01},
+	{0x3271, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3272, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3273, CRL_REG_LEN_08BIT, 0x01},
+	{0x3274, CRL_REG_LEN_08BIT, 0x00},
+	{0x3275, CRL_REG_LEN_08BIT, 0x40},
+	{0x3276, CRL_REG_LEN_08BIT, 0x02},
+	{0x3277, CRL_REG_LEN_08BIT, 0x08},
+	{0x3278, CRL_REG_LEN_08BIT, 0x10},
+	{0x3279, CRL_REG_LEN_08BIT, 0x04},
+	{0x327a, CRL_REG_LEN_08BIT, 0x00},
+	{0x327b, CRL_REG_LEN_08BIT, 0x03},
+	{0x327c, CRL_REG_LEN_08BIT, 0x10},
+	{0x327d, CRL_REG_LEN_08BIT, 0x60},
+	{0x327e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x327f, CRL_REG_LEN_08BIT, 0x06},
+	{0x3288, CRL_REG_LEN_08BIT, 0x10},
+	{0x3289, CRL_REG_LEN_08BIT, 0x00},
+	{0x328a, CRL_REG_LEN_08BIT, 0x08},
+	{0x328b, CRL_REG_LEN_08BIT, 0x00},
+	{0x328c, CRL_REG_LEN_08BIT, 0x04},
+	{0x328d, CRL_REG_LEN_08BIT, 0x00},
+	{0x328e, CRL_REG_LEN_08BIT, 0x02},
+	{0x328f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3290, CRL_REG_LEN_08BIT, 0x20},
+	{0x3291, CRL_REG_LEN_08BIT, 0x00},
+	{0x3292, CRL_REG_LEN_08BIT, 0x10},
+	{0x3293, CRL_REG_LEN_08BIT, 0x00},
+	{0x3294, CRL_REG_LEN_08BIT, 0x08},
+	{0x3295, CRL_REG_LEN_08BIT, 0x00},
+	{0x3296, CRL_REG_LEN_08BIT, 0x04},
+	{0x3297, CRL_REG_LEN_08BIT, 0x00},
+	{0x3298, CRL_REG_LEN_08BIT, 0x40},
+	{0x3299, CRL_REG_LEN_08BIT, 0x00},
+	{0x329a, CRL_REG_LEN_08BIT, 0x20},
+	{0x329b, CRL_REG_LEN_08BIT, 0x00},
+	{0x329c, CRL_REG_LEN_08BIT, 0x10},
+	{0x329d, CRL_REG_LEN_08BIT, 0x00},
+	{0x329e, CRL_REG_LEN_08BIT, 0x08},
+	{0x329f, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a0, CRL_REG_LEN_08BIT, 0x7f},
+	{0x32a1, CRL_REG_LEN_08BIT, 0xff},
+	{0x32a2, CRL_REG_LEN_08BIT, 0x40},
+	{0x32a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a4, CRL_REG_LEN_08BIT, 0x20},
+	{0x32a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a6, CRL_REG_LEN_08BIT, 0x10},
+	{0x32a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ad, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x32af, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x32be, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c8, CRL_REG_LEN_08BIT, 0x87},
+	{0x32c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x3330, CRL_REG_LEN_08BIT, 0x03},
+	{0x3331, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3332, CRL_REG_LEN_08BIT, 0x02},
+	{0x3333, CRL_REG_LEN_08BIT, 0x24},
+	{0x3334, CRL_REG_LEN_08BIT, 0x00},
+	{0x3335, CRL_REG_LEN_08BIT, 0x00},
+	{0x3336, CRL_REG_LEN_08BIT, 0x00},
+	{0x3337, CRL_REG_LEN_08BIT, 0x00},
+	{0x3338, CRL_REG_LEN_08BIT, 0x03},
+	{0x3339, CRL_REG_LEN_08BIT, 0xc8},
+	{0x333a, CRL_REG_LEN_08BIT, 0x02},
+	{0x333b, CRL_REG_LEN_08BIT, 0x24},
+	{0x333c, CRL_REG_LEN_08BIT, 0x00},
+	{0x333d, CRL_REG_LEN_08BIT, 0x00},
+	{0x333e, CRL_REG_LEN_08BIT, 0x00},
+	{0x333f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3340, CRL_REG_LEN_08BIT, 0x03},
+	{0x3341, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3342, CRL_REG_LEN_08BIT, 0x02},
+	{0x3343, CRL_REG_LEN_08BIT, 0x24},
+	{0x3344, CRL_REG_LEN_08BIT, 0x00},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3346, CRL_REG_LEN_08BIT, 0x00},
+	{0x3347, CRL_REG_LEN_08BIT, 0x00},
+	{0x3348, CRL_REG_LEN_08BIT, 0x40},
+	{0x3349, CRL_REG_LEN_08BIT, 0x00},
+	{0x334a, CRL_REG_LEN_08BIT, 0x00},
+	{0x334b, CRL_REG_LEN_08BIT, 0x00},
+	{0x334c, CRL_REG_LEN_08BIT, 0x00},
+	{0x334d, CRL_REG_LEN_08BIT, 0x00},
+	{0x334e, CRL_REG_LEN_08BIT, 0x80},
+	{0x3360, CRL_REG_LEN_08BIT, 0x01},
+	{0x3361, CRL_REG_LEN_08BIT, 0x00},
+	{0x3362, CRL_REG_LEN_08BIT, 0x01},
+	{0x3363, CRL_REG_LEN_08BIT, 0x00},
+	{0x3364, CRL_REG_LEN_08BIT, 0x01},
+	{0x3365, CRL_REG_LEN_08BIT, 0x00},
+	{0x3366, CRL_REG_LEN_08BIT, 0x01},
+	{0x3367, CRL_REG_LEN_08BIT, 0x00},
+	{0x3368, CRL_REG_LEN_08BIT, 0x01},
+	{0x3369, CRL_REG_LEN_08BIT, 0x00},
+	{0x336a, CRL_REG_LEN_08BIT, 0x01},
+	{0x336b, CRL_REG_LEN_08BIT, 0x00},
+	{0x336c, CRL_REG_LEN_08BIT, 0x01},
+	{0x336d, CRL_REG_LEN_08BIT, 0x00},
+	{0x336e, CRL_REG_LEN_08BIT, 0x01},
+	{0x336f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3370, CRL_REG_LEN_08BIT, 0x01},
+	{0x3371, CRL_REG_LEN_08BIT, 0x00},
+	{0x3372, CRL_REG_LEN_08BIT, 0x01},
+	{0x3373, CRL_REG_LEN_08BIT, 0x00},
+	{0x3374, CRL_REG_LEN_08BIT, 0x01},
+	{0x3375, CRL_REG_LEN_08BIT, 0x00},
+	{0x3376, CRL_REG_LEN_08BIT, 0x01},
+	{0x3377, CRL_REG_LEN_08BIT, 0x00},
+	{0x3378, CRL_REG_LEN_08BIT, 0x00},
+	{0x3379, CRL_REG_LEN_08BIT, 0x00},
+	{0x337a, CRL_REG_LEN_08BIT, 0x00},
+	{0x337b, CRL_REG_LEN_08BIT, 0x00},
+	{0x337c, CRL_REG_LEN_08BIT, 0x00},
+	{0x337d, CRL_REG_LEN_08BIT, 0x00},
+	{0x337e, CRL_REG_LEN_08BIT, 0x00},
+	{0x337f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3380, CRL_REG_LEN_08BIT, 0x00},
+	{0x3381, CRL_REG_LEN_08BIT, 0x00},
+	{0x3382, CRL_REG_LEN_08BIT, 0x00},
+	{0x3383, CRL_REG_LEN_08BIT, 0x00},
+	{0x3384, CRL_REG_LEN_08BIT, 0x00},
+	{0x3385, CRL_REG_LEN_08BIT, 0x00},
+	{0x3386, CRL_REG_LEN_08BIT, 0x00},
+	{0x3387, CRL_REG_LEN_08BIT, 0x00},
+	{0x3388, CRL_REG_LEN_08BIT, 0x00},
+	{0x3389, CRL_REG_LEN_08BIT, 0x00},
+	{0x338a, CRL_REG_LEN_08BIT, 0x00},
+	{0x338b, CRL_REG_LEN_08BIT, 0x00},
+	{0x338c, CRL_REG_LEN_08BIT, 0x00},
+	{0x338d, CRL_REG_LEN_08BIT, 0x00},
+	{0x338e, CRL_REG_LEN_08BIT, 0x00},
+	{0x338f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3390, CRL_REG_LEN_08BIT, 0x00},
+	{0x3391, CRL_REG_LEN_08BIT, 0x00},
+	{0x3392, CRL_REG_LEN_08BIT, 0x00},
+	{0x3393, CRL_REG_LEN_08BIT, 0x00},
+	{0x3394, CRL_REG_LEN_08BIT, 0x00},
+	{0x3395, CRL_REG_LEN_08BIT, 0x00},
+	{0x3396, CRL_REG_LEN_08BIT, 0x00},
+	{0x3397, CRL_REG_LEN_08BIT, 0x00},
+	{0x3398, CRL_REG_LEN_08BIT, 0x00},
+	{0x3399, CRL_REG_LEN_08BIT, 0x00},
+	{0x339a, CRL_REG_LEN_08BIT, 0x00},
+	{0x339b, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b1, CRL_REG_LEN_08BIT, 0x50},
+	{0x33b2, CRL_REG_LEN_08BIT, 0x01},
+	{0x33b3, CRL_REG_LEN_08BIT, 0xff},
+	{0x33b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0x33b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0x33b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x33ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x33bb, CRL_REG_LEN_08BIT, 0x1f},
+	{0x33bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bd, CRL_REG_LEN_08BIT, 0x01},
+	{0x33be, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bf, CRL_REG_LEN_08BIT, 0x01},
+	{0x33c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e0, CRL_REG_LEN_08BIT, 0x14},
+	{0x33e1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33e2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x33e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e5, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e7, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e8, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33e9, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ea, CRL_REG_LEN_08BIT, 0x02},
+	{0x33eb, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ec, CRL_REG_LEN_08BIT, 0x03},
+	{0x33ed, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ee, CRL_REG_LEN_08BIT, 0x05},
+	{0x33ef, CRL_REG_LEN_08BIT, 0x0a},
+	{0x33f0, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f1, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33f4, CRL_REG_LEN_08BIT, 0x03},
+	{0x33f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x33f6, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x33f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x33f9, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x33fc, CRL_REG_LEN_08BIT, 0x04},
+	{0x33fd, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33fe, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ff, CRL_REG_LEN_08BIT, 0x02},
+	{0x3400, CRL_REG_LEN_08BIT, 0x02},
+	{0x3401, CRL_REG_LEN_08BIT, 0x03},
+	{0x3402, CRL_REG_LEN_08BIT, 0x01},
+	{0x3403, CRL_REG_LEN_08BIT, 0x02},
+	{0x3404, CRL_REG_LEN_08BIT, 0x08},
+	{0x3405, CRL_REG_LEN_08BIT, 0x08},
+	{0x3406, CRL_REG_LEN_08BIT, 0x04},
+	{0x3407, CRL_REG_LEN_08BIT, 0x04},
+	{0x3408, CRL_REG_LEN_08BIT, 0x00},
+	{0x3409, CRL_REG_LEN_08BIT, 0x03},
+	{0x340a, CRL_REG_LEN_08BIT, 0x14},
+	{0x340b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x340c, CRL_REG_LEN_08BIT, 0x04},
+	{0x340d, CRL_REG_LEN_08BIT, 0x02},
+	{0x340e, CRL_REG_LEN_08BIT, 0x01},
+	{0x340f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3410, CRL_REG_LEN_08BIT, 0x00},
+	{0x3411, CRL_REG_LEN_08BIT, 0x04},
+	{0x3412, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3413, CRL_REG_LEN_08BIT, 0x02},
+	{0x3414, CRL_REG_LEN_08BIT, 0x02},
+	{0x3415, CRL_REG_LEN_08BIT, 0x02},
+	{0x3416, CRL_REG_LEN_08BIT, 0x03},
+	{0x3417, CRL_REG_LEN_08BIT, 0x02},
+	{0x3418, CRL_REG_LEN_08BIT, 0x05},
+	{0x3419, CRL_REG_LEN_08BIT, 0x0a},
+	{0x341a, CRL_REG_LEN_08BIT, 0x08},
+	{0x341b, CRL_REG_LEN_08BIT, 0x04},
+	{0x341c, CRL_REG_LEN_08BIT, 0x04},
+	{0x341d, CRL_REG_LEN_08BIT, 0x00},
+	{0x341e, CRL_REG_LEN_08BIT, 0x03},
+	{0x3440, CRL_REG_LEN_08BIT, 0x00},
+	{0x3441, CRL_REG_LEN_08BIT, 0x00},
+	{0x3442, CRL_REG_LEN_08BIT, 0x00},
+	{0x3443, CRL_REG_LEN_08BIT, 0x00},
+	{0x3444, CRL_REG_LEN_08BIT, 0x02},
+	{0x3445, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3446, CRL_REG_LEN_08BIT, 0x02},
+	{0x3447, CRL_REG_LEN_08BIT, 0x08},
+	{0x3448, CRL_REG_LEN_08BIT, 0x00},
+	{0x3460, CRL_REG_LEN_08BIT, 0x40},
+	{0x3461, CRL_REG_LEN_08BIT, 0x40},
+	{0x3462, CRL_REG_LEN_08BIT, 0x40},
+	{0x3463, CRL_REG_LEN_08BIT, 0x40},
+	{0x3464, CRL_REG_LEN_08BIT, 0x03},
+	{0x3465, CRL_REG_LEN_08BIT, 0x01},
+	{0x3466, CRL_REG_LEN_08BIT, 0x01},
+	{0x3467, CRL_REG_LEN_08BIT, 0x02},
+	{0x3468, CRL_REG_LEN_08BIT, 0x30},
+	{0x3469, CRL_REG_LEN_08BIT, 0x00},
+	{0x346a, CRL_REG_LEN_08BIT, 0x35},
+	{0x346b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3480, CRL_REG_LEN_08BIT, 0x40},
+	{0x3481, CRL_REG_LEN_08BIT, 0x00},
+	{0x3482, CRL_REG_LEN_08BIT, 0x00},
+	{0x3483, CRL_REG_LEN_08BIT, 0x00},
+	{0x3484, CRL_REG_LEN_08BIT, 0x0d},
+	{0x3485, CRL_REG_LEN_08BIT, 0x00},
+	{0x3486, CRL_REG_LEN_08BIT, 0x00},
+	{0x3487, CRL_REG_LEN_08BIT, 0x00},
+	{0x3488, CRL_REG_LEN_08BIT, 0x00},
+	{0x3489, CRL_REG_LEN_08BIT, 0x00},
+	{0x348a, CRL_REG_LEN_08BIT, 0x00},
+	{0x348b, CRL_REG_LEN_08BIT, 0x04},
+	{0x348c, CRL_REG_LEN_08BIT, 0x00},
+	{0x348d, CRL_REG_LEN_08BIT, 0x01},
+	{0x348f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3030, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x7000, CRL_REG_LEN_08BIT, 0x58},
+	{0x7001, CRL_REG_LEN_08BIT, 0x7a},
+	{0x7002, CRL_REG_LEN_08BIT, 0x1a},
+	{0x7003, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7004, CRL_REG_LEN_08BIT, 0x03},
+	{0x7005, CRL_REG_LEN_08BIT, 0xda},
+	{0x7006, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7007, CRL_REG_LEN_08BIT, 0x03},
+	{0x7008, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7009, CRL_REG_LEN_08BIT, 0x06},
+	{0x700a, CRL_REG_LEN_08BIT, 0xe6},
+	{0x700b, CRL_REG_LEN_08BIT, 0xec},
+	{0x700c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700d, CRL_REG_LEN_08BIT, 0xff},
+	{0x700e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700f, CRL_REG_LEN_08BIT, 0x73},
+	{0x7010, CRL_REG_LEN_08BIT, 0xda},
+	{0x7011, CRL_REG_LEN_08BIT, 0x72},
+	{0x7012, CRL_REG_LEN_08BIT, 0x76},
+	{0x7013, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7014, CRL_REG_LEN_08BIT, 0xee},
+	{0x7015, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7016, CRL_REG_LEN_08BIT, 0xac},
+	{0x7017, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7018, CRL_REG_LEN_08BIT, 0xac},
+	{0x7019, CRL_REG_LEN_08BIT, 0xd1},
+	{0x701a, CRL_REG_LEN_08BIT, 0x50},
+	{0x701b, CRL_REG_LEN_08BIT, 0xac},
+	{0x701c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x701d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x701e, CRL_REG_LEN_08BIT, 0x2e},
+	{0x701f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7020, CRL_REG_LEN_08BIT, 0x00},
+	{0x7021, CRL_REG_LEN_08BIT, 0xdc},
+	{0x7022, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7023, CRL_REG_LEN_08BIT, 0xb0},
+	{0x7024, CRL_REG_LEN_08BIT, 0x6e},
+	{0x7025, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7026, CRL_REG_LEN_08BIT, 0x01},
+	{0x7027, CRL_REG_LEN_08BIT, 0xd7},
+	{0x7028, CRL_REG_LEN_08BIT, 0xed},
+	{0x7029, CRL_REG_LEN_08BIT, 0xe1},
+	{0x702a, CRL_REG_LEN_08BIT, 0x36},
+	{0x702b, CRL_REG_LEN_08BIT, 0x30},
+	{0x702c, CRL_REG_LEN_08BIT, 0xd3},
+	{0x702d, CRL_REG_LEN_08BIT, 0x2e},
+	{0x702e, CRL_REG_LEN_08BIT, 0x54},
+	{0x702f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7030, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7031, CRL_REG_LEN_08BIT, 0x22},
+	{0x7032, CRL_REG_LEN_08BIT, 0x66},
+	{0x7033, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7034, CRL_REG_LEN_08BIT, 0x24},
+	{0x7035, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7036, CRL_REG_LEN_08BIT, 0x28},
+	{0x7037, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7038, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7039, CRL_REG_LEN_08BIT, 0xa1},
+	{0x703a, CRL_REG_LEN_08BIT, 0xac},
+	{0x703b, CRL_REG_LEN_08BIT, 0xd8},
+	{0x703c, CRL_REG_LEN_08BIT, 0xd6},
+	{0x703d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x703e, CRL_REG_LEN_08BIT, 0x04},
+	{0x703f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7040, CRL_REG_LEN_08BIT, 0xb7},
+	{0x7041, CRL_REG_LEN_08BIT, 0x04},
+	{0x7042, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7043, CRL_REG_LEN_08BIT, 0x08},
+	{0x7044, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7045, CRL_REG_LEN_08BIT, 0xd9},
+	{0x7046, CRL_REG_LEN_08BIT, 0xad},
+	{0x7047, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7048, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7049, CRL_REG_LEN_08BIT, 0x19},
+	{0x704a, CRL_REG_LEN_08BIT, 0xc1},
+	{0x704b, CRL_REG_LEN_08BIT, 0x27},
+	{0x704c, CRL_REG_LEN_08BIT, 0xe7},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x704e, CRL_REG_LEN_08BIT, 0x50},
+	{0x704f, CRL_REG_LEN_08BIT, 0x20},
+	{0x7050, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7051, CRL_REG_LEN_08BIT, 0x02},
+	{0x7052, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7053, CRL_REG_LEN_08BIT, 0x17},
+	{0x7054, CRL_REG_LEN_08BIT, 0xdb},
+	{0x7055, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7056, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7057, CRL_REG_LEN_08BIT, 0x00},
+	{0x7058, CRL_REG_LEN_08BIT, 0x28},
+	{0x7059, CRL_REG_LEN_08BIT, 0x54},
+	{0x705a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x705b, CRL_REG_LEN_08BIT, 0x14},
+	{0x705c, CRL_REG_LEN_08BIT, 0xab},
+	{0x705d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x705e, CRL_REG_LEN_08BIT, 0x06},
+	{0x705f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7060, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7061, CRL_REG_LEN_08BIT, 0x00},
+	{0x7062, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7063, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7064, CRL_REG_LEN_08BIT, 0x07},
+	{0x7065, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7066, CRL_REG_LEN_08BIT, 0x05},
+	{0x7067, CRL_REG_LEN_08BIT, 0xee},
+	{0x7068, CRL_REG_LEN_08BIT, 0xe6},
+	{0x7069, CRL_REG_LEN_08BIT, 0xad},
+	{0x706a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x706b, CRL_REG_LEN_08BIT, 0x26},
+	{0x706c, CRL_REG_LEN_08BIT, 0x19},
+	{0x706d, CRL_REG_LEN_08BIT, 0xc1},
+	{0x706e, CRL_REG_LEN_08BIT, 0x3a},
+	{0x706f, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7070, CRL_REG_LEN_08BIT, 0xaf},
+	{0x7071, CRL_REG_LEN_08BIT, 0x00},
+	{0x7072, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7073, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7074, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7075, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7076, CRL_REG_LEN_08BIT, 0xe7},
+	{0x7077, CRL_REG_LEN_08BIT, 0x00},
+	{0x7078, CRL_REG_LEN_08BIT, 0x15},
+	{0x7079, CRL_REG_LEN_08BIT, 0xc2},
+	{0x707a, CRL_REG_LEN_08BIT, 0x40},
+	{0x707b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x707c, CRL_REG_LEN_08BIT, 0xa4},
+	{0x707d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x707e, CRL_REG_LEN_08BIT, 0x3c},
+	{0x707f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7081, CRL_REG_LEN_08BIT, 0x64},
+	{0x7082, CRL_REG_LEN_08BIT, 0x29},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7084, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7085, CRL_REG_LEN_08BIT, 0x12},
+	{0x7086, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7087, CRL_REG_LEN_08BIT, 0x01},
+	{0x7088, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7089, CRL_REG_LEN_08BIT, 0xbc},
+	{0x708a, CRL_REG_LEN_08BIT, 0x01},
+	{0x708b, CRL_REG_LEN_08BIT, 0xac},
+	{0x708c, CRL_REG_LEN_08BIT, 0x37},
+	{0x708d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x708e, CRL_REG_LEN_08BIT, 0xac},
+	{0x708f, CRL_REG_LEN_08BIT, 0x45},
+	{0x7090, CRL_REG_LEN_08BIT, 0xad},
+	{0x7091, CRL_REG_LEN_08BIT, 0x28},
+	{0x7092, CRL_REG_LEN_08BIT, 0x00},
+	{0x7093, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7094, CRL_REG_LEN_08BIT, 0x00},
+	{0x7095, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7096, CRL_REG_LEN_08BIT, 0x01},
+	{0x7097, CRL_REG_LEN_08BIT, 0x36},
+	{0x7098, CRL_REG_LEN_08BIT, 0xd3},
+	{0x7099, CRL_REG_LEN_08BIT, 0x30},
+	{0x709a, CRL_REG_LEN_08BIT, 0x04},
+	{0x709b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x709c, CRL_REG_LEN_08BIT, 0xd8},
+	{0x709d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x709e, CRL_REG_LEN_08BIT, 0xe9},
+	{0x709f, CRL_REG_LEN_08BIT, 0x00},
+	{0x70a0, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70a1, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a2, CRL_REG_LEN_08BIT, 0x62},
+	{0x70a3, CRL_REG_LEN_08BIT, 0x07},
+	{0x70a4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70a5, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a6, CRL_REG_LEN_08BIT, 0xad},
+	{0x70a7, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70a8, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70aa, CRL_REG_LEN_08BIT, 0x15},
+	{0x70ab, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70ac, CRL_REG_LEN_08BIT, 0x59},
+	{0x70ad, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70ae, CRL_REG_LEN_08BIT, 0xc9},
+	{0x70af, CRL_REG_LEN_08BIT, 0xc0},
+	{0x70b0, CRL_REG_LEN_08BIT, 0x55},
+	{0x70b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b2, CRL_REG_LEN_08BIT, 0x46},
+	{0x70b3, CRL_REG_LEN_08BIT, 0xa1},
+	{0x70b4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70b5, CRL_REG_LEN_08BIT, 0x64},
+	{0x70b6, CRL_REG_LEN_08BIT, 0x29},
+	{0x70b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x70ba, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70bb, CRL_REG_LEN_08BIT, 0x02},
+	{0x70bc, CRL_REG_LEN_08BIT, 0xd0},
+	{0x70bd, CRL_REG_LEN_08BIT, 0xdc},
+	{0x70be, CRL_REG_LEN_08BIT, 0xac},
+	{0x70bf, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x37},
+	{0x70c2, CRL_REG_LEN_08BIT, 0xac},
+	{0x70c3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x45},
+	{0x70c5, CRL_REG_LEN_08BIT, 0xad},
+	{0x70c6, CRL_REG_LEN_08BIT, 0x28},
+	{0x70c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ca, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70cb, CRL_REG_LEN_08BIT, 0x01},
+	{0x70cc, CRL_REG_LEN_08BIT, 0x36},
+	{0x70cd, CRL_REG_LEN_08BIT, 0x30},
+	{0x70ce, CRL_REG_LEN_08BIT, 0xe0},
+	{0x70cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0x70d0, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70d1, CRL_REG_LEN_08BIT, 0x0b},
+	{0x70d2, CRL_REG_LEN_08BIT, 0xd6},
+	{0x70d3, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70d4, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70d6, CRL_REG_LEN_08BIT, 0x62},
+	{0x70d7, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d8, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70d9, CRL_REG_LEN_08BIT, 0x05},
+	{0x70da, CRL_REG_LEN_08BIT, 0xad},
+	{0x70db, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70dc, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70dd, CRL_REG_LEN_08BIT, 0x46},
+	{0x70de, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70df, CRL_REG_LEN_08BIT, 0x07},
+	{0x70e0, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e2, CRL_REG_LEN_08BIT, 0xe3},
+	{0x70e3, CRL_REG_LEN_08BIT, 0x18},
+	{0x70e4, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70e5, CRL_REG_LEN_08BIT, 0xa2},
+	{0x70e6, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x64},
+	{0x70e8, CRL_REG_LEN_08BIT, 0xd1},
+	{0x70e9, CRL_REG_LEN_08BIT, 0xdd},
+	{0x70ea, CRL_REG_LEN_08BIT, 0xac},
+	{0x70eb, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70ed, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x19},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x46},
+	{0x70f0, CRL_REG_LEN_08BIT, 0x50},
+	{0x70f1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x70f2, CRL_REG_LEN_08BIT, 0xee},
+	{0x70f3, CRL_REG_LEN_08BIT, 0xe8},
+	{0x70f4, CRL_REG_LEN_08BIT, 0xe6},
+	{0x70f5, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70f6, CRL_REG_LEN_08BIT, 0x31},
+	{0x70f7, CRL_REG_LEN_08BIT, 0xe1},
+	{0x70f8, CRL_REG_LEN_08BIT, 0x36},
+	{0x70f9, CRL_REG_LEN_08BIT, 0x30},
+	{0x70fa, CRL_REG_LEN_08BIT, 0xd3},
+	{0x70fb, CRL_REG_LEN_08BIT, 0x2e},
+	{0x70fc, CRL_REG_LEN_08BIT, 0x54},
+	{0x70fd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x70fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x70ff, CRL_REG_LEN_08BIT, 0xec},
+	{0x7100, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7101, CRL_REG_LEN_08BIT, 0x50},
+	{0x7102, CRL_REG_LEN_08BIT, 0x20},
+	{0x7103, CRL_REG_LEN_08BIT, 0x04},
+	{0x7104, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7105, CRL_REG_LEN_08BIT, 0x02},
+	{0x7106, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7107, CRL_REG_LEN_08BIT, 0x18},
+	{0x7108, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7109, CRL_REG_LEN_08BIT, 0xb8},
+	{0x710a, CRL_REG_LEN_08BIT, 0x00},
+	{0x710b, CRL_REG_LEN_08BIT, 0x28},
+	{0x710c, CRL_REG_LEN_08BIT, 0x54},
+	{0x710d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x710e, CRL_REG_LEN_08BIT, 0x02},
+	{0x710f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7110, CRL_REG_LEN_08BIT, 0xda},
+	{0x7111, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7112, CRL_REG_LEN_08BIT, 0x04},
+	{0x7113, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7114, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7115, CRL_REG_LEN_08BIT, 0xab},
+	{0x7116, CRL_REG_LEN_08BIT, 0x00},
+	{0x7117, CRL_REG_LEN_08BIT, 0x62},
+	{0x7118, CRL_REG_LEN_08BIT, 0x07},
+	{0x7119, CRL_REG_LEN_08BIT, 0xb9},
+	{0x711a, CRL_REG_LEN_08BIT, 0x05},
+	{0x711b, CRL_REG_LEN_08BIT, 0xad},
+	{0x711c, CRL_REG_LEN_08BIT, 0xc3},
+	{0x711d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x711e, CRL_REG_LEN_08BIT, 0xe7},
+	{0x711f, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7120, CRL_REG_LEN_08BIT, 0x64},
+	{0x7121, CRL_REG_LEN_08BIT, 0x29},
+	{0x7122, CRL_REG_LEN_08BIT, 0x00},
+	{0x7123, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7124, CRL_REG_LEN_08BIT, 0x02},
+	{0x7125, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7126, CRL_REG_LEN_08BIT, 0x00},
+	{0x7127, CRL_REG_LEN_08BIT, 0x45},
+	{0x7128, CRL_REG_LEN_08BIT, 0xad},
+	{0x7129, CRL_REG_LEN_08BIT, 0xe2},
+	{0x712a, CRL_REG_LEN_08BIT, 0x28},
+	{0x712b, CRL_REG_LEN_08BIT, 0x00},
+	{0x712c, CRL_REG_LEN_08BIT, 0xb8},
+	{0x712d, CRL_REG_LEN_08BIT, 0x00},
+	{0x712e, CRL_REG_LEN_08BIT, 0xe0},
+	{0x712f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7130, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7131, CRL_REG_LEN_08BIT, 0xe9},
+	{0x7132, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7133, CRL_REG_LEN_08BIT, 0x03},
+	{0x7134, CRL_REG_LEN_08BIT, 0x00},
+	{0x7135, CRL_REG_LEN_08BIT, 0x30},
+	{0x7136, CRL_REG_LEN_08BIT, 0x62},
+	{0x7137, CRL_REG_LEN_08BIT, 0x07},
+	{0x7138, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7139, CRL_REG_LEN_08BIT, 0x05},
+	{0x713a, CRL_REG_LEN_08BIT, 0xad},
+	{0x713b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x713c, CRL_REG_LEN_08BIT, 0xcf},
+	{0x713d, CRL_REG_LEN_08BIT, 0x42},
+	{0x713e, CRL_REG_LEN_08BIT, 0xe4},
+	{0x713f, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7140, CRL_REG_LEN_08BIT, 0x07},
+	{0x7141, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7142, CRL_REG_LEN_08BIT, 0x00},
+	{0x7143, CRL_REG_LEN_08BIT, 0x00},
+	{0x7144, CRL_REG_LEN_08BIT, 0x17},
+	{0x7145, CRL_REG_LEN_08BIT, 0xc2},
+	{0x7146, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7147, CRL_REG_LEN_08BIT, 0xde},
+	{0x7148, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7149, CRL_REG_LEN_08BIT, 0xdf},
+	{0x714a, CRL_REG_LEN_08BIT, 0xac},
+	{0x714b, CRL_REG_LEN_08BIT, 0xd1},
+	{0x714c, CRL_REG_LEN_08BIT, 0x44},
+	{0x714d, CRL_REG_LEN_08BIT, 0xac},
+	{0x714e, CRL_REG_LEN_08BIT, 0xb9},
+	{0x714f, CRL_REG_LEN_08BIT, 0x76},
+	{0x7150, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7151, CRL_REG_LEN_08BIT, 0x08},
+	{0x7152, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7153, CRL_REG_LEN_08BIT, 0xfe},
+	{0x7154, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7155, CRL_REG_LEN_08BIT, 0xca},
+	{0x7156, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7157, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7158, CRL_REG_LEN_08BIT, 0xab},
+	{0x7159, CRL_REG_LEN_08BIT, 0x00},
+	{0x715a, CRL_REG_LEN_08BIT, 0xe1},
+	{0x715b, CRL_REG_LEN_08BIT, 0x36},
+	{0x715c, CRL_REG_LEN_08BIT, 0x30},
+	{0x715d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x715e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x715f, CRL_REG_LEN_08BIT, 0x29},
+	{0x7160, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7161, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7162, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7163, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7164, CRL_REG_LEN_08BIT, 0x01},
+	{0x7165, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7166, CRL_REG_LEN_08BIT, 0x0c},
+	{0x7167, CRL_REG_LEN_08BIT, 0x45},
+	{0x7168, CRL_REG_LEN_08BIT, 0xa4},
+	{0x7169, CRL_REG_LEN_08BIT, 0xbd},
+	{0x716a, CRL_REG_LEN_08BIT, 0x03},
+	{0x716b, CRL_REG_LEN_08BIT, 0xec},
+	{0x716c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x716d, CRL_REG_LEN_08BIT, 0x3d},
+	{0x716e, CRL_REG_LEN_08BIT, 0xc3},
+	{0x716f, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7170, CRL_REG_LEN_08BIT, 0x42},
+	{0x7171, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7172, CRL_REG_LEN_08BIT, 0x00},
+	{0x7173, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7174, CRL_REG_LEN_08BIT, 0xd5},
+	{0x7175, CRL_REG_LEN_08BIT, 0x00},
+	{0x7176, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7177, CRL_REG_LEN_08BIT, 0x00},
+	{0x7178, CRL_REG_LEN_08BIT, 0x74},
+	{0x7179, CRL_REG_LEN_08BIT, 0xbd},
+	{0x717a, CRL_REG_LEN_08BIT, 0x03},
+	{0x717b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x717c, CRL_REG_LEN_08BIT, 0x39},
+	{0x717d, CRL_REG_LEN_08BIT, 0x40},
+	{0x717e, CRL_REG_LEN_08BIT, 0x58},
+	{0x717f, CRL_REG_LEN_08BIT, 0xdd},
+	{0x7180, CRL_REG_LEN_08BIT, 0x19},
+	{0x7181, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7182, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7183, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7184, CRL_REG_LEN_08BIT, 0x06},
+	{0x7185, CRL_REG_LEN_08BIT, 0x17},
+	{0x7186, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7187, CRL_REG_LEN_08BIT, 0xc6},
+	{0x7188, CRL_REG_LEN_08BIT, 0xe8},
+	{0x7189, CRL_REG_LEN_08BIT, 0x00},
+	{0x718a, CRL_REG_LEN_08BIT, 0xc0},
+	{0x718b, CRL_REG_LEN_08BIT, 0xc8},
+	{0x718c, CRL_REG_LEN_08BIT, 0xe6},
+	{0x718d, CRL_REG_LEN_08BIT, 0x95},
+	{0x718e, CRL_REG_LEN_08BIT, 0x15},
+	{0x718f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7190, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7191, CRL_REG_LEN_08BIT, 0x19},
+	{0x7192, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7193, CRL_REG_LEN_08BIT, 0xf6},
+	{0x7194, CRL_REG_LEN_08BIT, 0x14},
+	{0x7195, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7196, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7197, CRL_REG_LEN_08BIT, 0xd1},
+	{0x7198, CRL_REG_LEN_08BIT, 0xac},
+	{0x7199, CRL_REG_LEN_08BIT, 0x37},
+	{0x719a, CRL_REG_LEN_08BIT, 0xbc},
+	{0x719b, CRL_REG_LEN_08BIT, 0x35},
+	{0x719c, CRL_REG_LEN_08BIT, 0x36},
+	{0x719d, CRL_REG_LEN_08BIT, 0x30},
+	{0x719e, CRL_REG_LEN_08BIT, 0xe1},
+	{0x719f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x71a0, CRL_REG_LEN_08BIT, 0x7a},
+	{0x71a1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x71a2, CRL_REG_LEN_08BIT, 0x0c},
+	{0x71a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x71a4, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71a5, CRL_REG_LEN_08BIT, 0xc7},
+	{0x71a6, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x71a8, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x71aa, CRL_REG_LEN_08BIT, 0x56},
+	{0x71ab, CRL_REG_LEN_08BIT, 0xc0},
+	{0x71ac, CRL_REG_LEN_08BIT, 0xda},
+	{0x71ad, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71ae, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71af, CRL_REG_LEN_08BIT, 0x56},
+	{0x71b0, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71b1, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71b2, CRL_REG_LEN_08BIT, 0x08},
+	{0x71b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b4, CRL_REG_LEN_08BIT, 0x57},
+	{0x71b5, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71b6, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71b7, CRL_REG_LEN_08BIT, 0x36},
+	{0x71b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b9, CRL_REG_LEN_08BIT, 0x54},
+	{0x71ba, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71bb, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71bc, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71bd, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71be, CRL_REG_LEN_08BIT, 0x56},
+	{0x71bf, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71c0, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71c1, CRL_REG_LEN_08BIT, 0x08},
+	{0x71c2, CRL_REG_LEN_08BIT, 0x57},
+	{0x71c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c4, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71c5, CRL_REG_LEN_08BIT, 0x36},
+	{0x71c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c7, CRL_REG_LEN_08BIT, 0x54},
+	{0x71c8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71c9, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71ca, CRL_REG_LEN_08BIT, 0x18},
+	{0x71cb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x71cd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x71cf, CRL_REG_LEN_08BIT, 0x56},
+	{0x71d0, CRL_REG_LEN_08BIT, 0x08},
+	{0x71d1, CRL_REG_LEN_08BIT, 0x57},
+	{0x71d2, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71d3, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71d4, CRL_REG_LEN_08BIT, 0x42},
+	{0x71d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x71d6, CRL_REG_LEN_08BIT, 0x54},
+	{0x71d7, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71d8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71d9, CRL_REG_LEN_08BIT, 0xab},
+	{0x71da, CRL_REG_LEN_08BIT, 0x00},
+	{0x71db, CRL_REG_LEN_08BIT, 0x66},
+	{0x71dc, CRL_REG_LEN_08BIT, 0x62},
+	{0x71dd, CRL_REG_LEN_08BIT, 0x06},
+	{0x71de, CRL_REG_LEN_08BIT, 0x74},
+	{0x71df, CRL_REG_LEN_08BIT, 0xb9},
+	{0x71e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x71e1, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e2, CRL_REG_LEN_08BIT, 0x14},
+	{0x71e3, CRL_REG_LEN_08BIT, 0x0e},
+	{0x71e4, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e5, CRL_REG_LEN_08BIT, 0x04},
+	{0x71e6, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7600, CRL_REG_LEN_08BIT, 0x04},
+	{0x7601, CRL_REG_LEN_08BIT, 0x80},
+	{0x7602, CRL_REG_LEN_08BIT, 0x07},
+	{0x7603, CRL_REG_LEN_08BIT, 0x44},
+	{0x7604, CRL_REG_LEN_08BIT, 0x05},
+	{0x7605, CRL_REG_LEN_08BIT, 0x33},
+	{0x7606, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7607, CRL_REG_LEN_08BIT, 0x00},
+	{0x7608, CRL_REG_LEN_08BIT, 0x07},
+	{0x7609, CRL_REG_LEN_08BIT, 0x40},
+	{0x760a, CRL_REG_LEN_08BIT, 0x04},
+	{0x760b, CRL_REG_LEN_08BIT, 0xe5},
+	{0x760c, CRL_REG_LEN_08BIT, 0x06},
+	{0x760d, CRL_REG_LEN_08BIT, 0x50},
+	{0x760e, CRL_REG_LEN_08BIT, 0x04},
+	{0x760f, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7610, CRL_REG_LEN_08BIT, 0x00},
+	{0x7611, CRL_REG_LEN_08BIT, 0x00},
+	{0x7612, CRL_REG_LEN_08BIT, 0x06},
+	{0x7613, CRL_REG_LEN_08BIT, 0x5c},
+	{0x7614, CRL_REG_LEN_08BIT, 0x00},
+	{0x7615, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7616, CRL_REG_LEN_08BIT, 0x06},
+	{0x7617, CRL_REG_LEN_08BIT, 0x1c},
+	{0x7618, CRL_REG_LEN_08BIT, 0x00},
+	{0x7619, CRL_REG_LEN_08BIT, 0x02},
+	{0x761a, CRL_REG_LEN_08BIT, 0x06},
+	{0x761b, CRL_REG_LEN_08BIT, 0xa2},
+	{0x761c, CRL_REG_LEN_08BIT, 0x00},
+	{0x761d, CRL_REG_LEN_08BIT, 0x01},
+	{0x761e, CRL_REG_LEN_08BIT, 0x06},
+	{0x761f, CRL_REG_LEN_08BIT, 0xae},
+	{0x7620, CRL_REG_LEN_08BIT, 0x00},
+	{0x7621, CRL_REG_LEN_08BIT, 0x0e},
+	{0x7622, CRL_REG_LEN_08BIT, 0x05},
+	{0x7623, CRL_REG_LEN_08BIT, 0x30},
+	{0x7624, CRL_REG_LEN_08BIT, 0x07},
+	{0x7625, CRL_REG_LEN_08BIT, 0x00},
+	{0x7626, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7627, CRL_REG_LEN_08BIT, 0x00},
+	{0x7628, CRL_REG_LEN_08BIT, 0x04},
+	{0x7629, CRL_REG_LEN_08BIT, 0xe5},
+	{0x762a, CRL_REG_LEN_08BIT, 0x05},
+	{0x762b, CRL_REG_LEN_08BIT, 0x33},
+	{0x762c, CRL_REG_LEN_08BIT, 0x06},
+	{0x762d, CRL_REG_LEN_08BIT, 0x12},
+	{0x762e, CRL_REG_LEN_08BIT, 0x00},
+	{0x762f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7630, CRL_REG_LEN_08BIT, 0x06},
+	{0x7631, CRL_REG_LEN_08BIT, 0x52},
+	{0x7632, CRL_REG_LEN_08BIT, 0x00},
+	{0x7633, CRL_REG_LEN_08BIT, 0x01},
+	{0x7634, CRL_REG_LEN_08BIT, 0x06},
+	{0x7635, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7636, CRL_REG_LEN_08BIT, 0x04},
+	{0x7637, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7638, CRL_REG_LEN_08BIT, 0x00},
+	{0x7639, CRL_REG_LEN_08BIT, 0x01},
+	{0x763a, CRL_REG_LEN_08BIT, 0x05},
+	{0x763b, CRL_REG_LEN_08BIT, 0x30},
+	{0x763c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x763d, CRL_REG_LEN_08BIT, 0x00},
+	{0x763e, CRL_REG_LEN_08BIT, 0x06},
+	{0x763f, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7640, CRL_REG_LEN_08BIT, 0x00},
+	{0x7641, CRL_REG_LEN_08BIT, 0x02},
+	{0x7642, CRL_REG_LEN_08BIT, 0x06},
+	{0x7643, CRL_REG_LEN_08BIT, 0x26},
+	{0x7644, CRL_REG_LEN_08BIT, 0x00},
+	{0x7645, CRL_REG_LEN_08BIT, 0x02},
+	{0x7646, CRL_REG_LEN_08BIT, 0x05},
+	{0x7647, CRL_REG_LEN_08BIT, 0x33},
+	{0x7648, CRL_REG_LEN_08BIT, 0x06},
+	{0x7649, CRL_REG_LEN_08BIT, 0x20},
+	{0x764a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x764b, CRL_REG_LEN_08BIT, 0x00},
+	{0x764c, CRL_REG_LEN_08BIT, 0x06},
+	{0x764d, CRL_REG_LEN_08BIT, 0x56},
+	{0x764e, CRL_REG_LEN_08BIT, 0x00},
+	{0x764f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7650, CRL_REG_LEN_08BIT, 0x06},
+	{0x7651, CRL_REG_LEN_08BIT, 0x16},
+	{0x7652, CRL_REG_LEN_08BIT, 0x05},
+	{0x7653, CRL_REG_LEN_08BIT, 0x33},
+	{0x7654, CRL_REG_LEN_08BIT, 0x06},
+	{0x7655, CRL_REG_LEN_08BIT, 0x10},
+	{0x7656, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7657, CRL_REG_LEN_08BIT, 0x00},
+	{0x7658, CRL_REG_LEN_08BIT, 0x06},
+	{0x7659, CRL_REG_LEN_08BIT, 0x10},
+	{0x765a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765b, CRL_REG_LEN_08BIT, 0x00},
+	{0x765c, CRL_REG_LEN_08BIT, 0x06},
+	{0x765d, CRL_REG_LEN_08BIT, 0x20},
+	{0x765e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7660, CRL_REG_LEN_08BIT, 0x00},
+	{0x7661, CRL_REG_LEN_08BIT, 0x00},
+	{0x7662, CRL_REG_LEN_08BIT, 0x00},
+	{0x7663, CRL_REG_LEN_08BIT, 0x02},
+	{0x7664, CRL_REG_LEN_08BIT, 0x04},
+	{0x7665, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7666, CRL_REG_LEN_08BIT, 0x04},
+	{0x7667, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7668, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7669, CRL_REG_LEN_08BIT, 0x00},
+	{0x766a, CRL_REG_LEN_08BIT, 0x00},
+	{0x766b, CRL_REG_LEN_08BIT, 0x00},
+	{0x766c, CRL_REG_LEN_08BIT, 0x00},
+	{0x766d, CRL_REG_LEN_08BIT, 0x01},
+	{0x766e, CRL_REG_LEN_08BIT, 0x04},
+	{0x766f, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7670, CRL_REG_LEN_08BIT, 0x04},
+	{0x7671, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7672, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7673, CRL_REG_LEN_08BIT, 0x00},
+	{0x7674, CRL_REG_LEN_08BIT, 0x00},
+	{0x7675, CRL_REG_LEN_08BIT, 0x02},
+	{0x7676, CRL_REG_LEN_08BIT, 0x04},
+	{0x7677, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7678, CRL_REG_LEN_08BIT, 0x00},
+	{0x7679, CRL_REG_LEN_08BIT, 0x02},
+	{0x767a, CRL_REG_LEN_08BIT, 0x04},
+	{0x767b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x767c, CRL_REG_LEN_08BIT, 0x00},
+	{0x767d, CRL_REG_LEN_08BIT, 0x02},
+	{0x767e, CRL_REG_LEN_08BIT, 0x04},
+	{0x767f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7680, CRL_REG_LEN_08BIT, 0x05},
+	{0x7681, CRL_REG_LEN_08BIT, 0x83},
+	{0x7682, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7683, CRL_REG_LEN_08BIT, 0x00},
+	{0x7684, CRL_REG_LEN_08BIT, 0x00},
+	{0x7685, CRL_REG_LEN_08BIT, 0x02},
+	{0x7686, CRL_REG_LEN_08BIT, 0x04},
+	{0x7687, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7688, CRL_REG_LEN_08BIT, 0x00},
+	{0x7689, CRL_REG_LEN_08BIT, 0x02},
+	{0x768a, CRL_REG_LEN_08BIT, 0x04},
+	{0x768b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x768c, CRL_REG_LEN_08BIT, 0x00},
+	{0x768d, CRL_REG_LEN_08BIT, 0x02},
+	{0x768e, CRL_REG_LEN_08BIT, 0x04},
+	{0x768f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7690, CRL_REG_LEN_08BIT, 0x05},
+	{0x7691, CRL_REG_LEN_08BIT, 0x83},
+	{0x7692, CRL_REG_LEN_08BIT, 0x03},
+	{0x7693, CRL_REG_LEN_08BIT, 0x0b},
+	{0x7694, CRL_REG_LEN_08BIT, 0x05},
+	{0x7695, CRL_REG_LEN_08BIT, 0x83},
+	{0x7696, CRL_REG_LEN_08BIT, 0x00},
+	{0x7697, CRL_REG_LEN_08BIT, 0x07},
+	{0x7698, CRL_REG_LEN_08BIT, 0x05},
+	{0x7699, CRL_REG_LEN_08BIT, 0x03},
+	{0x769a, CRL_REG_LEN_08BIT, 0x00},
+	{0x769b, CRL_REG_LEN_08BIT, 0x05},
+	{0x769c, CRL_REG_LEN_08BIT, 0x05},
+	{0x769d, CRL_REG_LEN_08BIT, 0x32},
+	{0x769e, CRL_REG_LEN_08BIT, 0x05},
+	{0x769f, CRL_REG_LEN_08BIT, 0x30},
+	{0x76a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a1, CRL_REG_LEN_08BIT, 0x02},
+	{0x76a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a3, CRL_REG_LEN_08BIT, 0x78},
+	{0x76a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a5, CRL_REG_LEN_08BIT, 0x01},
+	{0x76a6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a7, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76a8, CRL_REG_LEN_08BIT, 0x03},
+	{0x76a9, CRL_REG_LEN_08BIT, 0x9a},
+	{0x76aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ab, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ad, CRL_REG_LEN_08BIT, 0x04},
+	{0x76ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x76af, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76b8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x76bb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76bc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76bd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76be, CRL_REG_LEN_08BIT, 0x03},
+	{0x76bf, CRL_REG_LEN_08BIT, 0x99},
+	{0x76c0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c1, CRL_REG_LEN_08BIT, 0x83},
+	{0x76c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c3, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c5, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x76ca, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cb, CRL_REG_LEN_08BIT, 0x30},
+	{0x76cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76cd, CRL_REG_LEN_08BIT, 0x02},
+	{0x76ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cf, CRL_REG_LEN_08BIT, 0x78},
+	{0x76d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d1, CRL_REG_LEN_08BIT, 0x01},
+	{0x76d2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76d4, CRL_REG_LEN_08BIT, 0x03},
+	{0x76d5, CRL_REG_LEN_08BIT, 0x98},
+	{0x76d6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d7, CRL_REG_LEN_08BIT, 0x83},
+	{0x76d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x76da, CRL_REG_LEN_08BIT, 0x05},
+	{0x76db, CRL_REG_LEN_08BIT, 0x03},
+	{0x76dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76dd, CRL_REG_LEN_08BIT, 0x01},
+	{0x76de, CRL_REG_LEN_08BIT, 0x05},
+	{0x76df, CRL_REG_LEN_08BIT, 0x32},
+	{0x76e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e1, CRL_REG_LEN_08BIT, 0x30},
+	{0x76e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x76e4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e5, CRL_REG_LEN_08BIT, 0x78},
+	{0x76e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76e8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e9, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76ea, CRL_REG_LEN_08BIT, 0x03},
+	{0x76eb, CRL_REG_LEN_08BIT, 0x97},
+	{0x76ec, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ed, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76f2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76f4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76f8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x76fb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76fc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76fd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x76ff, CRL_REG_LEN_08BIT, 0x96},
+	{0x7700, CRL_REG_LEN_08BIT, 0x05},
+	{0x7701, CRL_REG_LEN_08BIT, 0x83},
+	{0x7702, CRL_REG_LEN_08BIT, 0x05},
+	{0x7703, CRL_REG_LEN_08BIT, 0x03},
+	{0x7704, CRL_REG_LEN_08BIT, 0x05},
+	{0x7705, CRL_REG_LEN_08BIT, 0x32},
+	{0x7706, CRL_REG_LEN_08BIT, 0x05},
+	{0x7707, CRL_REG_LEN_08BIT, 0x30},
+	{0x7708, CRL_REG_LEN_08BIT, 0x00},
+	{0x7709, CRL_REG_LEN_08BIT, 0x02},
+	{0x770a, CRL_REG_LEN_08BIT, 0x05},
+	{0x770b, CRL_REG_LEN_08BIT, 0x78},
+	{0x770c, CRL_REG_LEN_08BIT, 0x00},
+	{0x770d, CRL_REG_LEN_08BIT, 0x01},
+	{0x770e, CRL_REG_LEN_08BIT, 0x05},
+	{0x770f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7710, CRL_REG_LEN_08BIT, 0x03},
+	{0x7711, CRL_REG_LEN_08BIT, 0x95},
+	{0x7712, CRL_REG_LEN_08BIT, 0x05},
+	{0x7713, CRL_REG_LEN_08BIT, 0x83},
+	{0x7714, CRL_REG_LEN_08BIT, 0x05},
+	{0x7715, CRL_REG_LEN_08BIT, 0x03},
+	{0x7716, CRL_REG_LEN_08BIT, 0x05},
+	{0x7717, CRL_REG_LEN_08BIT, 0x32},
+	{0x7718, CRL_REG_LEN_08BIT, 0x05},
+	{0x7719, CRL_REG_LEN_08BIT, 0x30},
+	{0x771a, CRL_REG_LEN_08BIT, 0x00},
+	{0x771b, CRL_REG_LEN_08BIT, 0x02},
+	{0x771c, CRL_REG_LEN_08BIT, 0x05},
+	{0x771d, CRL_REG_LEN_08BIT, 0x78},
+	{0x771e, CRL_REG_LEN_08BIT, 0x00},
+	{0x771f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7720, CRL_REG_LEN_08BIT, 0x05},
+	{0x7721, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7722, CRL_REG_LEN_08BIT, 0x03},
+	{0x7723, CRL_REG_LEN_08BIT, 0x94},
+	{0x7724, CRL_REG_LEN_08BIT, 0x05},
+	{0x7725, CRL_REG_LEN_08BIT, 0x83},
+	{0x7726, CRL_REG_LEN_08BIT, 0x00},
+	{0x7727, CRL_REG_LEN_08BIT, 0x01},
+	{0x7728, CRL_REG_LEN_08BIT, 0x05},
+	{0x7729, CRL_REG_LEN_08BIT, 0x03},
+	{0x772a, CRL_REG_LEN_08BIT, 0x00},
+	{0x772b, CRL_REG_LEN_08BIT, 0x01},
+	{0x772c, CRL_REG_LEN_08BIT, 0x05},
+	{0x772d, CRL_REG_LEN_08BIT, 0x32},
+	{0x772e, CRL_REG_LEN_08BIT, 0x05},
+	{0x772f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7730, CRL_REG_LEN_08BIT, 0x00},
+	{0x7731, CRL_REG_LEN_08BIT, 0x02},
+	{0x7732, CRL_REG_LEN_08BIT, 0x05},
+	{0x7733, CRL_REG_LEN_08BIT, 0x78},
+	{0x7734, CRL_REG_LEN_08BIT, 0x00},
+	{0x7735, CRL_REG_LEN_08BIT, 0x01},
+	{0x7736, CRL_REG_LEN_08BIT, 0x05},
+	{0x7737, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7738, CRL_REG_LEN_08BIT, 0x03},
+	{0x7739, CRL_REG_LEN_08BIT, 0x93},
+	{0x773a, CRL_REG_LEN_08BIT, 0x05},
+	{0x773b, CRL_REG_LEN_08BIT, 0x83},
+	{0x773c, CRL_REG_LEN_08BIT, 0x00},
+	{0x773d, CRL_REG_LEN_08BIT, 0x00},
+	{0x773e, CRL_REG_LEN_08BIT, 0x05},
+	{0x773f, CRL_REG_LEN_08BIT, 0x03},
+	{0x7740, CRL_REG_LEN_08BIT, 0x00},
+	{0x7741, CRL_REG_LEN_08BIT, 0x00},
+	{0x7742, CRL_REG_LEN_08BIT, 0x05},
+	{0x7743, CRL_REG_LEN_08BIT, 0x32},
+	{0x7744, CRL_REG_LEN_08BIT, 0x05},
+	{0x7745, CRL_REG_LEN_08BIT, 0x30},
+	{0x7746, CRL_REG_LEN_08BIT, 0x00},
+	{0x7747, CRL_REG_LEN_08BIT, 0x02},
+	{0x7748, CRL_REG_LEN_08BIT, 0x05},
+	{0x7749, CRL_REG_LEN_08BIT, 0x78},
+	{0x774a, CRL_REG_LEN_08BIT, 0x00},
+	{0x774b, CRL_REG_LEN_08BIT, 0x01},
+	{0x774c, CRL_REG_LEN_08BIT, 0x05},
+	{0x774d, CRL_REG_LEN_08BIT, 0x7c},
+	{0x774e, CRL_REG_LEN_08BIT, 0x03},
+	{0x774f, CRL_REG_LEN_08BIT, 0x92},
+	{0x7750, CRL_REG_LEN_08BIT, 0x05},
+	{0x7751, CRL_REG_LEN_08BIT, 0x83},
+	{0x7752, CRL_REG_LEN_08BIT, 0x05},
+	{0x7753, CRL_REG_LEN_08BIT, 0x03},
+	{0x7754, CRL_REG_LEN_08BIT, 0x00},
+	{0x7755, CRL_REG_LEN_08BIT, 0x00},
+	{0x7756, CRL_REG_LEN_08BIT, 0x05},
+	{0x7757, CRL_REG_LEN_08BIT, 0x32},
+	{0x7758, CRL_REG_LEN_08BIT, 0x05},
+	{0x7759, CRL_REG_LEN_08BIT, 0x30},
+	{0x775a, CRL_REG_LEN_08BIT, 0x00},
+	{0x775b, CRL_REG_LEN_08BIT, 0x02},
+	{0x775c, CRL_REG_LEN_08BIT, 0x05},
+	{0x775d, CRL_REG_LEN_08BIT, 0x78},
+	{0x775e, CRL_REG_LEN_08BIT, 0x00},
+	{0x775f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7760, CRL_REG_LEN_08BIT, 0x05},
+	{0x7761, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7762, CRL_REG_LEN_08BIT, 0x03},
+	{0x7763, CRL_REG_LEN_08BIT, 0x91},
+	{0x7764, CRL_REG_LEN_08BIT, 0x05},
+	{0x7765, CRL_REG_LEN_08BIT, 0x83},
+	{0x7766, CRL_REG_LEN_08BIT, 0x05},
+	{0x7767, CRL_REG_LEN_08BIT, 0x03},
+	{0x7768, CRL_REG_LEN_08BIT, 0x05},
+	{0x7769, CRL_REG_LEN_08BIT, 0x32},
+	{0x776a, CRL_REG_LEN_08BIT, 0x05},
+	{0x776b, CRL_REG_LEN_08BIT, 0x30},
+	{0x776c, CRL_REG_LEN_08BIT, 0x00},
+	{0x776d, CRL_REG_LEN_08BIT, 0x02},
+	{0x776e, CRL_REG_LEN_08BIT, 0x05},
+	{0x776f, CRL_REG_LEN_08BIT, 0x78},
+	{0x7770, CRL_REG_LEN_08BIT, 0x00},
+	{0x7771, CRL_REG_LEN_08BIT, 0x01},
+	{0x7772, CRL_REG_LEN_08BIT, 0x05},
+	{0x7773, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7774, CRL_REG_LEN_08BIT, 0x03},
+	{0x7775, CRL_REG_LEN_08BIT, 0x90},
+	{0x7776, CRL_REG_LEN_08BIT, 0x05},
+	{0x7777, CRL_REG_LEN_08BIT, 0x83},
+	{0x7778, CRL_REG_LEN_08BIT, 0x05},
+	{0x7779, CRL_REG_LEN_08BIT, 0x03},
+	{0x777a, CRL_REG_LEN_08BIT, 0x05},
+	{0x777b, CRL_REG_LEN_08BIT, 0x32},
+	{0x777c, CRL_REG_LEN_08BIT, 0x05},
+	{0x777d, CRL_REG_LEN_08BIT, 0x30},
+	{0x777e, CRL_REG_LEN_08BIT, 0x00},
+	{0x777f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7780, CRL_REG_LEN_08BIT, 0x05},
+	{0x7781, CRL_REG_LEN_08BIT, 0x78},
+	{0x7782, CRL_REG_LEN_08BIT, 0x00},
+	{0x7783, CRL_REG_LEN_08BIT, 0x01},
+	{0x7784, CRL_REG_LEN_08BIT, 0x05},
+	{0x7785, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7786, CRL_REG_LEN_08BIT, 0x02},
+	{0x7787, CRL_REG_LEN_08BIT, 0x90},
+	{0x7788, CRL_REG_LEN_08BIT, 0x05},
+	{0x7789, CRL_REG_LEN_08BIT, 0x03},
+	{0x778a, CRL_REG_LEN_08BIT, 0x07},
+	{0x778b, CRL_REG_LEN_08BIT, 0x00},
+	{0x778c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x778d, CRL_REG_LEN_08BIT, 0x00},
+	{0x778e, CRL_REG_LEN_08BIT, 0x08},
+	{0x778f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7790, CRL_REG_LEN_08BIT, 0x08},
+	{0x7791, CRL_REG_LEN_08BIT, 0xee},
+	{0x7792, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7793, CRL_REG_LEN_08BIT, 0x00},
+	{0x7794, CRL_REG_LEN_08BIT, 0x05},
+	{0x7795, CRL_REG_LEN_08BIT, 0x33},
+	{0x7796, CRL_REG_LEN_08BIT, 0x04},
+	{0x7797, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7798, CRL_REG_LEN_08BIT, 0x06},
+	{0x7799, CRL_REG_LEN_08BIT, 0x52},
+	{0x779a, CRL_REG_LEN_08BIT, 0x04},
+	{0x779b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x779c, CRL_REG_LEN_08BIT, 0x00},
+	{0x779d, CRL_REG_LEN_08BIT, 0x00},
+	{0x779e, CRL_REG_LEN_08BIT, 0x06},
+	{0x779f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77a2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77a6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77aa, CRL_REG_LEN_08BIT, 0x06},
+	{0x77ab, CRL_REG_LEN_08BIT, 0xae},
+	{0x77ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x77af, CRL_REG_LEN_08BIT, 0x30},
+	{0x77b0, CRL_REG_LEN_08BIT, 0x09},
+	{0x77b1, CRL_REG_LEN_08BIT, 0x19},
+	{0x77b2, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x77b5, CRL_REG_LEN_08BIT, 0x33},
+	{0x77b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77b7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77b8, CRL_REG_LEN_08BIT, 0x06},
+	{0x77b9, CRL_REG_LEN_08BIT, 0x52},
+	{0x77ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x77bb, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x77be, CRL_REG_LEN_08BIT, 0x06},
+	{0x77bf, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77c2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77c6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ca, CRL_REG_LEN_08BIT, 0x06},
+	{0x77cb, CRL_REG_LEN_08BIT, 0xae},
+	{0x77cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77cd, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x77cf, CRL_REG_LEN_08BIT, 0x30},
+	{0x77d0, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77d6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77d8, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d9, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77da, CRL_REG_LEN_08BIT, 0x05},
+	{0x77db, CRL_REG_LEN_08BIT, 0x33},
+	{0x77dc, CRL_REG_LEN_08BIT, 0x07},
+	{0x77dd, CRL_REG_LEN_08BIT, 0x10},
+	{0x77de, CRL_REG_LEN_08BIT, 0x00},
+	{0x77df, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e1, CRL_REG_LEN_08BIT, 0xbb},
+	{0x77e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e5, CRL_REG_LEN_08BIT, 0xaa},
+	{0x77e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e9, CRL_REG_LEN_08BIT, 0x99},
+	{0x77ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x77eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ed, CRL_REG_LEN_08BIT, 0x88},
+	{0x77ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f1, CRL_REG_LEN_08BIT, 0x77},
+	{0x77f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f5, CRL_REG_LEN_08BIT, 0x66},
+	{0x77f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f9, CRL_REG_LEN_08BIT, 0x55},
+	{0x77fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x77fd, CRL_REG_LEN_08BIT, 0x44},
+	{0x77fe, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ff, CRL_REG_LEN_08BIT, 0x00},
+	{0x7800, CRL_REG_LEN_08BIT, 0x01},
+	{0x7801, CRL_REG_LEN_08BIT, 0x33},
+	{0x7802, CRL_REG_LEN_08BIT, 0x00},
+	{0x7803, CRL_REG_LEN_08BIT, 0x00},
+	{0x7804, CRL_REG_LEN_08BIT, 0x01},
+	{0x7805, CRL_REG_LEN_08BIT, 0x22},
+	{0x7806, CRL_REG_LEN_08BIT, 0x00},
+	{0x7807, CRL_REG_LEN_08BIT, 0x00},
+	{0x7808, CRL_REG_LEN_08BIT, 0x01},
+	{0x7809, CRL_REG_LEN_08BIT, 0x11},
+	{0x780a, CRL_REG_LEN_08BIT, 0x00},
+	{0x780b, CRL_REG_LEN_08BIT, 0x00},
+	{0x780c, CRL_REG_LEN_08BIT, 0x01},
+	{0x780d, CRL_REG_LEN_08BIT, 0x00},
+	{0x780e, CRL_REG_LEN_08BIT, 0x01},
+	{0x780f, CRL_REG_LEN_08BIT, 0xff},
+	{0x7810, CRL_REG_LEN_08BIT, 0x07},
+	{0x7811, CRL_REG_LEN_08BIT, 0x00},
+	{0x7812, CRL_REG_LEN_08BIT, 0x02},
+	{0x7813, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7814, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7815, CRL_REG_LEN_08BIT, 0x00},
+	{0x7816, CRL_REG_LEN_08BIT, 0x08},
+	{0x7817, CRL_REG_LEN_08BIT, 0x35},
+	{0x7818, CRL_REG_LEN_08BIT, 0x06},
+	{0x7819, CRL_REG_LEN_08BIT, 0x52},
+	{0x781a, CRL_REG_LEN_08BIT, 0x04},
+	{0x781b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x781c, CRL_REG_LEN_08BIT, 0x00},
+	{0x781d, CRL_REG_LEN_08BIT, 0x00},
+	{0x781e, CRL_REG_LEN_08BIT, 0x06},
+	{0x781f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7820, CRL_REG_LEN_08BIT, 0x05},
+	{0x7821, CRL_REG_LEN_08BIT, 0x33},
+	{0x7822, CRL_REG_LEN_08BIT, 0x09},
+	{0x7823, CRL_REG_LEN_08BIT, 0x19},
+	{0x7824, CRL_REG_LEN_08BIT, 0x06},
+	{0x7825, CRL_REG_LEN_08BIT, 0x1e},
+	{0x7826, CRL_REG_LEN_08BIT, 0x05},
+	{0x7827, CRL_REG_LEN_08BIT, 0x33},
+	{0x7828, CRL_REG_LEN_08BIT, 0x00},
+	{0x7829, CRL_REG_LEN_08BIT, 0x01},
+	{0x782a, CRL_REG_LEN_08BIT, 0x06},
+	{0x782b, CRL_REG_LEN_08BIT, 0x24},
+	{0x782c, CRL_REG_LEN_08BIT, 0x06},
+	{0x782d, CRL_REG_LEN_08BIT, 0x20},
+	{0x782e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x782f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7830, CRL_REG_LEN_08BIT, 0x08},
+	{0x7831, CRL_REG_LEN_08BIT, 0x35},
+	{0x7832, CRL_REG_LEN_08BIT, 0x07},
+	{0x7833, CRL_REG_LEN_08BIT, 0x10},
+	{0x7834, CRL_REG_LEN_08BIT, 0x00},
+	{0x7835, CRL_REG_LEN_08BIT, 0x00},
+	{0x7836, CRL_REG_LEN_08BIT, 0x01},
+	{0x7837, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7838, CRL_REG_LEN_08BIT, 0x00},
+	{0x7839, CRL_REG_LEN_08BIT, 0x00},
+	{0x783a, CRL_REG_LEN_08BIT, 0x01},
+	{0x783b, CRL_REG_LEN_08BIT, 0xaa},
+	{0x783c, CRL_REG_LEN_08BIT, 0x00},
+	{0x783d, CRL_REG_LEN_08BIT, 0x00},
+	{0x783e, CRL_REG_LEN_08BIT, 0x01},
+	{0x783f, CRL_REG_LEN_08BIT, 0x99},
+	{0x7840, CRL_REG_LEN_08BIT, 0x00},
+	{0x7841, CRL_REG_LEN_08BIT, 0x00},
+	{0x7842, CRL_REG_LEN_08BIT, 0x01},
+	{0x7843, CRL_REG_LEN_08BIT, 0x88},
+	{0x7844, CRL_REG_LEN_08BIT, 0x00},
+	{0x7845, CRL_REG_LEN_08BIT, 0x00},
+	{0x7846, CRL_REG_LEN_08BIT, 0x01},
+	{0x7847, CRL_REG_LEN_08BIT, 0x77},
+	{0x7848, CRL_REG_LEN_08BIT, 0x00},
+	{0x7849, CRL_REG_LEN_08BIT, 0x00},
+	{0x784a, CRL_REG_LEN_08BIT, 0x01},
+	{0x784b, CRL_REG_LEN_08BIT, 0x66},
+	{0x784c, CRL_REG_LEN_08BIT, 0x00},
+	{0x784d, CRL_REG_LEN_08BIT, 0x00},
+	{0x784e, CRL_REG_LEN_08BIT, 0x01},
+	{0x784f, CRL_REG_LEN_08BIT, 0x55},
+	{0x7850, CRL_REG_LEN_08BIT, 0x00},
+	{0x7851, CRL_REG_LEN_08BIT, 0x00},
+	{0x7852, CRL_REG_LEN_08BIT, 0x01},
+	{0x7853, CRL_REG_LEN_08BIT, 0x44},
+	{0x7854, CRL_REG_LEN_08BIT, 0x00},
+	{0x7855, CRL_REG_LEN_08BIT, 0x00},
+	{0x7856, CRL_REG_LEN_08BIT, 0x01},
+	{0x7857, CRL_REG_LEN_08BIT, 0x33},
+	{0x7858, CRL_REG_LEN_08BIT, 0x00},
+	{0x7859, CRL_REG_LEN_08BIT, 0x00},
+	{0x785a, CRL_REG_LEN_08BIT, 0x01},
+	{0x785b, CRL_REG_LEN_08BIT, 0x22},
+	{0x785c, CRL_REG_LEN_08BIT, 0x00},
+	{0x785d, CRL_REG_LEN_08BIT, 0x00},
+	{0x785e, CRL_REG_LEN_08BIT, 0x01},
+	{0x785f, CRL_REG_LEN_08BIT, 0x11},
+	{0x7860, CRL_REG_LEN_08BIT, 0x00},
+	{0x7861, CRL_REG_LEN_08BIT, 0x00},
+	{0x7862, CRL_REG_LEN_08BIT, 0x01},
+	{0x7863, CRL_REG_LEN_08BIT, 0x00},
+	{0x7864, CRL_REG_LEN_08BIT, 0x07},
+	{0x7865, CRL_REG_LEN_08BIT, 0x00},
+	{0x7866, CRL_REG_LEN_08BIT, 0x01},
+	{0x7867, CRL_REG_LEN_08BIT, 0xff},
+	{0x7868, CRL_REG_LEN_08BIT, 0x02},
+	{0x7869, CRL_REG_LEN_08BIT, 0xa0},
+	{0x786a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x786b, CRL_REG_LEN_08BIT, 0x00},
+	{0x786c, CRL_REG_LEN_08BIT, 0x08},
+	{0x786d, CRL_REG_LEN_08BIT, 0x3a},
+	{0x786e, CRL_REG_LEN_08BIT, 0x08},
+	{0x786f, CRL_REG_LEN_08BIT, 0x6a},
+	{0x7870, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7871, CRL_REG_LEN_08BIT, 0x00},
+	{0x7872, CRL_REG_LEN_08BIT, 0x04},
+	{0x7873, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7874, CRL_REG_LEN_08BIT, 0x09},
+	{0x7875, CRL_REG_LEN_08BIT, 0x19},
+	{0x7876, CRL_REG_LEN_08BIT, 0x04},
+	{0x7877, CRL_REG_LEN_08BIT, 0x99},
+	{0x7878, CRL_REG_LEN_08BIT, 0x07},
+	{0x7879, CRL_REG_LEN_08BIT, 0x14},
+	{0x787a, CRL_REG_LEN_08BIT, 0x00},
+	{0x787b, CRL_REG_LEN_08BIT, 0x01},
+	{0x787c, CRL_REG_LEN_08BIT, 0x04},
+	{0x787d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x787e, CRL_REG_LEN_08BIT, 0x00},
+	{0x787f, CRL_REG_LEN_08BIT, 0x07},
+	{0x7880, CRL_REG_LEN_08BIT, 0x04},
+	{0x7881, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7882, CRL_REG_LEN_08BIT, 0x00},
+	{0x7883, CRL_REG_LEN_08BIT, 0x00},
+	{0x7884, CRL_REG_LEN_08BIT, 0x04},
+	{0x7885, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7886, CRL_REG_LEN_08BIT, 0x04},
+	{0x7887, CRL_REG_LEN_08BIT, 0x80},
+	{0x7888, CRL_REG_LEN_08BIT, 0x04},
+	{0x7889, CRL_REG_LEN_08BIT, 0x00},
+	{0x788a, CRL_REG_LEN_08BIT, 0x05},
+	{0x788b, CRL_REG_LEN_08BIT, 0x03},
+	{0x788c, CRL_REG_LEN_08BIT, 0x06},
+	{0x788d, CRL_REG_LEN_08BIT, 0x00},
+	{0x788e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x788f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7890, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7891, CRL_REG_LEN_08BIT, 0x00},
+	{0x7892, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7893, CRL_REG_LEN_08BIT, 0x00},
+	{0x3001, CRL_REG_LEN_08BIT, 0x23},
+	{0x3005, CRL_REG_LEN_08BIT, 0x13},
+	{0x3014, CRL_REG_LEN_08BIT, 0x44},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x48},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x3e},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x9e},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x5a},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x00},
+	{0x3195, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x03},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x13},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x1a},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3250, CRL_REG_LEN_08BIT, 0xf7},
+	{0x3012, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_register_write_rep ov2775_powerup_standby_regset[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+struct crl_register_write_rep ov2775_poweroff_regset[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep ov2775_streamon_regs[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep ov2775_streamoff_regs[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_arithmetic_ops ov2775_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 3,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_vblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_hblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_exposure_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_ana_gain_l_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_ana_gain_vs_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_digital_gain_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_v_flip_regs[] = {
+	{
+		.address = 0x30C0,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_vflip_ops),
+		.ops = ov2775_vflip_ops,
+		.mask = 0x08,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_h_flip_regs[] = {
+	{
+		.address = 0x30C0,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_hflip_ops),
+		.ops = ov2775_hflip_ops,
+		.mask = 0x04,
+	},
+};
+
+/* 0: 1x, 1: 2x, 2: 4x, 3: 8x
+ * linear mode analog gain uses ana_gain_h
+ */
+static struct crl_dynamic_register_access ov2775_ana_gain_h_regs[] = {
+	{
+		.address = 0x30BB,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x03,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_ana_gain_l_regs[] = {
+	{
+		.address = 0x30BB,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_ana_gain_l_ops),
+		.ops = ov2775_ana_gain_l_ops,
+		.mask = 0x0c,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_ana_gain_vs_regs[] = {
+	{
+		.address = 0x30BB,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_ana_gain_vs_ops),
+		.ops = ov2775_ana_gain_vs_ops,
+		.mask = 0x30,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_digital_gain_h_regs[] = {
+	{
+		.address = 0x315A,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_digital_gain_ops),
+		.ops = ov2775_digital_gain_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x315B,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_digital_gain_l_regs[] = {
+	{
+		.address = 0x315C,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_digital_gain_ops),
+		.ops = ov2775_digital_gain_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x315D,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_digital_gain_vs_regs[] = {
+	{
+		.address = 0x315E,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_digital_gain_ops),
+		.ops = ov2775_digital_gain_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x315F,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_exposure_dcg_regs[] = {
+	{
+		.address = 0x30B6,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_exposure_ops),
+		.ops = ov2775_exposure_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B7,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* 03B8 and 03B9 are integer part, 03BA is fractional part with N/32
+ * just use integer part
+ */
+static struct crl_dynamic_register_access ov2775_exposure_vs_regs[] = {
+	{
+		.address = 0x30B8,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_exposure_ops),
+		.ops = ov2775_exposure_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B9,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_vblank_regs[] = {
+	{
+		.address = 0x30B2,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_vblank_ops),
+		.ops = ov2775_vblank_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B3,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_hblank_regs[] = {
+	{
+		.address = 0x30B0,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_hblank_ops),
+		.ops = ov2775_hblank_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B1,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_sensor_detect_config ov2775_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+};
+
+/* pixel_rate = op_sys_clk*2 * csi_lanes / bitsperpixel */
+static struct crl_pll_configuration ov2775_pll_configurations[] = {
+	{
+		.input_clk = 19200000,
+		.op_sys_clk = 202000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 50200000,
+		.pixel_rate_pa = 50200000,
+		.csi_lanes = 1,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+	{
+		.input_clk = 19200000,
+		.op_sys_clk = 202000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 50200000,
+		.pixel_rate_pa = 50200000,
+		.csi_lanes = 1,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 480000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 80000000,
+		.pixel_rate_pa = 80000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 480000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 80000000,
+		.pixel_rate_pa = 80000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+};
+
+static struct crl_subdev_rect_rep ov2775_1920x1088_rects_native[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1088,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1088,
+	},
+};
+
+static struct crl_mode_rep ov2775_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1920x1088_rects_native),
+		.sd_rects = ov2775_1920x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items =
+			ARRAY_SIZE(ov2775_linear_hcg_30fps_mipi960_regset),
+		.mode_regs = ov2775_linear_hcg_30fps_mipi960_regset,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1920x1088_rects_native),
+		.sd_rects = ov2775_1920x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items =
+			ARRAY_SIZE(ov2775_linear_lcg_30fps_mipi960_regset),
+		.mode_regs = ov2775_linear_lcg_30fps_mipi960_regset,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1920x1088_rects_native),
+		.sd_rects = ov2775_1920x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov2775_2x12_30fps_mipi960_regset),
+		.mode_regs = ov2775_2x12_30fps_mipi960_regset,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1920x1088_rects_native),
+		.sd_rects = ov2775_1920x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov2775_3x12_30fps_mipi960_regset),
+		.mode_regs = ov2775_3x12_30fps_mipi960_regset,
+	},
+};
+
+static struct crl_sensor_subdev_config ov2775_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov2775 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov2775 pixel array",
+	},
+};
+
+static struct crl_sensor_limits ov2775_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1936,
+	.y_addr_max = 1096,
+	.min_frame_length_lines = 1126,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 3550,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data ov2775_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+};
+
+static struct crl_csi_data_fmt ov2775_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+};
+
+static struct crl_v4l2_ctrl ov2775_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_S,
+		.name = "CRL_CID_ANALOG_GAIN_HCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_ana_gain_h_regs),
+		.regs = ov2775_ana_gain_h_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_L,
+		.name = "CRL_CID_ANALOG_GAIN_LCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_ana_gain_l_regs),
+		.regs = ov2775_ana_gain_l_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_VS,
+		.name = "CRL_CID_ANALOG_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_ana_gain_vs_regs),
+		.regs = ov2775_ana_gain_vs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_L,
+		.name = "CRL_CID_DIGITAL_GAIN_LCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_digital_gain_l_regs),
+		.regs = ov2775_digital_gain_l_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_S,
+		.name = "CRL_CID_DIGITAL_GAIN_HCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_digital_gain_h_regs),
+		.regs = ov2775_digital_gain_h_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_VS,
+		.name = "CRL_CID_DIGITAL_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_digital_gain_vs_regs),
+		.regs = ov2775_digital_gain_vs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.name = "CRL_CID_EXPOSURE_DCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 1,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_exposure_dcg_regs),
+		.regs = ov2775_exposure_dcg_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS2,
+		.name = "CRL_CID_EXPOSURE_VS",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 1,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_exposure_vs_regs),
+		.regs = ov2775_exposure_vs_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_h_flip_regs),
+		.regs = ov2775_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_v_flip_regs),
+		.regs = ov2775_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1126,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_vblank_regs),
+		.regs = ov2775_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 3550,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_hblank_regs),
+		.regs = ov2775_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_SENSOR_MODE,
+		.name = "CRL_CID_SENSOR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = OV2775_CAPTURE_MODE_MAX - 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc ov2775_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(ov2775_frame_desc_width_ops),
+			 .ops = ov2775_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(ov2775_frame_desc_height_ops),
+			  .ops = ov2775_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(ov2775_frame_desc_width_ops),
+			 .ops = ov2775_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(ov2775_frame_desc_height_ops),
+			  .ops = ov2775_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 1,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(ov2775_frame_desc_width_ops),
+			 .ops = ov2775_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(ov2775_frame_desc_height_ops),
+			  .ops = ov2775_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 2,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity ov2775_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+		.delay = 1000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_CUSTOM,
+		.ent_number = 284, /* PWDN pin on CNL, 268 + 16 */
+		.val = 1,
+		.undo_val = 1,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 1,
+		.delay = 5000,
+	},
+};
+
+static struct crl_sensor_configuration ov2775_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov2775_power_items),
+	.power_entities = ov2775_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(ov2775_powerup_standby_regset),
+	.powerup_regs = ov2775_powerup_standby_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(ov2775_sensor_detect_regset),
+	.id_regs = ov2775_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov2775_sensor_subdevs),
+	.subdevs = ov2775_sensor_subdevs,
+
+	.sensor_limits = &ov2775_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov2775_pll_configurations),
+	.pll_configs = ov2775_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov2775_modes),
+	.modes = ov2775_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov2775_streamon_regs),
+	.streamon_regs = ov2775_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov2775_streamoff_regs),
+	.streamoff_regs = ov2775_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov2775_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov2775_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov2775_crl_csi_data_fmt),
+	.csi_fmts = ov2775_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov2775_flip_configurations),
+	.flip_data = ov2775_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_16BIT,
+	.crl_nvm_info.nvm_preop_regs_items = 0,
+	.crl_nvm_info.nvm_postop_regs_items = 0,
+	.crl_nvm_info.nvm_blobs_items = 0,
+
+	.frame_desc_entries = ARRAY_SIZE(ov2775_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = ov2775_frame_desc,
+};
+
+#endif  /* __CRLMODULE_OV2775_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov5670_configuration.h b/drivers/media/i2c/crlmodule/crl_ov5670_configuration.h
new file mode 100644
index 000000000000..7badb609dd45
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov5670_configuration.h
@@ -0,0 +1,1136 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation
+ *
+ * Author: Tommi Franttila <tommi.franttila@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_ov5670_CONFIGURATION_H_
+#define __CRLMODULE_ov5670_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep ov5670_pll_840mbps[] = {
+	{ 0x030a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0300, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0302, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x0304, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0312, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x030c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x030d, CRL_REG_LEN_08BIT, 0x1e },
+	{ 0x030f, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x030e, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep ov5670_powerup_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3000, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3002, CRL_REG_LEN_08BIT, 0x21 },
+	{ 0x3005, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3007, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3015, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3018, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x301a, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301b, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301c, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301d, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301e, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3021, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3030, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x303c, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x303e, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3040, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3041, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3042, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3106, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x3500, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3502, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3503, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3504, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3505, CRL_REG_LEN_08BIT, 0x83 },
+	{ 0x3508, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3509, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x350e, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x350f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3510, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3511, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3512, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3601, CRL_REG_LEN_08BIT, 0xc8 },
+	{ 0x3610, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3612, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3614, CRL_REG_LEN_08BIT, 0x5b },
+	{ 0x3615, CRL_REG_LEN_08BIT, 0x96 },
+	{ 0x3621, CRL_REG_LEN_08BIT, 0xd0 },
+	{ 0x3622, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3623, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3633, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3634, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3635, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3636, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3645, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3646, CRL_REG_LEN_08BIT, 0x82 },
+	{ 0x3650, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3652, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3655, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3656, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x365a, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x365e, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3668, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x366a, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x366e, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x366d, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x366f, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3700, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x3701, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3702, CRL_REG_LEN_08BIT, 0x3a },
+	{ 0x3703, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x3704, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3705, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3706, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x3707, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3708, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x3709, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x370a, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x370b, CRL_REG_LEN_08BIT, 0x1b },
+	{ 0x3714, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x371a, CRL_REG_LEN_08BIT, 0x3e },
+	{ 0x3733, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3734, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x373a, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x373b, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x373c, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x373f, CRL_REG_LEN_08BIT, 0xa0 },
+	{ 0x3755, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3758, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x375b, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3766, CRL_REG_LEN_08BIT, 0x5f },
+	{ 0x3768, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3769, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x3773, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3774, CRL_REG_LEN_08BIT, 0x1f },
+	{ 0x3776, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x37a0, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37a1, CRL_REG_LEN_08BIT, 0x5c },
+	{ 0x37a7, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37a8, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x37aa, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37ab, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x37b3, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x37c2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x37c5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37c8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3807, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3816, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3817, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3818, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3819, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3822, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3826, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3827, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3830, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3837, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3838, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3841, CRL_REG_LEN_08BIT, 0xff }, /* Auto size function enabled */
+	{ 0x3846, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3861, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3862, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3863, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x3a11, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3a12, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x3b00, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b02, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b03, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b04, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b05, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c00, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x3c01, CRL_REG_LEN_08BIT, 0xab },
+	{ 0x3c02, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3c03, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c04, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c05, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3c06, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c07, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3c0c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c0d, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c0e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c0f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c40, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3c41, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3c43, CRL_REG_LEN_08BIT, 0x7d },
+	{ 0x3c45, CRL_REG_LEN_08BIT, 0xd7 },
+	{ 0x3c47, CRL_REG_LEN_08BIT, 0xfc },
+	{ 0x3c50, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3c52, CRL_REG_LEN_08BIT, 0xaa },
+	{ 0x3c54, CRL_REG_LEN_08BIT, 0x71 },
+	{ 0x3c56, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3d85, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x3d8d, CRL_REG_LEN_08BIT, 0xea },
+	{ 0x3f03, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3f0a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3f0b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4001, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x0d },
+	{ 0x4017, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4020, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4021, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4024, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4025, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4026, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4027, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4028, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4029, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402d, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4040, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4041, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x4042, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4043, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x4044, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4045, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x4046, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4047, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x4048, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4049, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x4303, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4307, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x4500, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x4501, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4502, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4503, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4508, CRL_REG_LEN_08BIT, 0xaa },
+	{ 0x4509, CRL_REG_LEN_08BIT, 0xaa },
+	{ 0x450a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x450b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4700, CRL_REG_LEN_08BIT, 0xa4 },
+	{ 0x4800, CRL_REG_LEN_08BIT, 0x4c },
+	{ 0x4816, CRL_REG_LEN_08BIT, 0x53 },
+	{ 0x481f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x56 },
+	{ 0x5001, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5002, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x5004, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x5006, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x5007, CRL_REG_LEN_08BIT, 0xe0 },
+	{ 0x5008, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5009, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x5901, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5a01, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5a03, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5a04, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x5a05, CRL_REG_LEN_08BIT, 0xe0 },
+	{ 0x5a06, CRL_REG_LEN_08BIT, 0x09 },
+	{ 0x5a07, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x5a08, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x5e00, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3734, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x5b00, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5b01, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x5b02, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5b03, CRL_REG_LEN_08BIT, 0xdb },
+	{ 0x3d8c, CRL_REG_LEN_08BIT, 0x71 },
+	{ 0x370b, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3618, CRL_REG_LEN_08BIT, 0x2a },
+	{ 0x5780, CRL_REG_LEN_08BIT, 0x3e },
+	{ 0x5781, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x5782, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x5783, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5784, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5785, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5786, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5787, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5788, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5789, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x578a, CRL_REG_LEN_08BIT, 0xfd },
+	{ 0x578b, CRL_REG_LEN_08BIT, 0xf5 },
+	{ 0x578c, CRL_REG_LEN_08BIT, 0xf5 },
+	{ 0x578d, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x578e, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x578f, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x5790, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x5791, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x5792, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5793, CRL_REG_LEN_08BIT, 0x52 },
+	{ 0x5794, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3503, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x380e, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x380f, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x3002, CRL_REG_LEN_08BIT, 0x61 },
+	{ 0x3010, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x300D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5045, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x5048, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3610, CRL_REG_LEN_08BIT, 0xa8 },
+	{ 0x3733, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3734, CRL_REG_LEN_08BIT, 0x40 },
+};
+
+static struct crl_register_write_rep ov5670_mode_1944[] = {
+	/* Auto size function in use, but no cropping in this mode */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x03 },
+};
+
+static struct crl_register_write_rep ov5670_mode_1940[] = {
+	/* Auto size function in use, cropping from the centre of the image */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep ov5670_mode_1458[] = {
+	/* Auto size function in use, cropping from the centre of the image */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0xB2 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x03 },
+};
+
+static struct crl_register_write_rep ov5670_mode_1456[] = {
+	/* Auto size function in use, cropping from the centre of the image */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0xB0 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep ov5670_mode_1152[] = {
+	/* Auto size function in use, cropping from the centre of the image */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xC0 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0xc6 },
+};
+
+static struct crl_register_write_rep ov5670_mode_1080[] = {
+	/* Auto size function in use, cropping from the centre of the image */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0xc0 },
+};
+
+static struct crl_register_write_rep ov5670_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep ov5670_streamoff_regs[] = {
+	/* MIPI stream off when current frame finish */
+	{ 0x4202, CRL_REG_LEN_08BIT, 0x0f },
+	/* Wait to finish the current frame */
+	{ 0x0000, CRL_REG_LEN_DELAY, 0x40 },
+	/* Sensor to standby */
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep ov5670_data_fmt_width10[] = {
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x0a }
+};
+
+static struct crl_arithmetic_ops ov5670_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_arithmetic_ops ov5670_swap_flip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 5,
+	},
+};
+
+static struct crl_arithmetic_ops ov5670_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_arithmetic_ops ov5670_hblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_arithmetic_ops ov5670_exposure_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	},
+};
+
+static struct crl_dynamic_register_access ov5670_v_flip_regs[] = {
+	{
+		.address = 0x3820,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov5670_vflip_ops),
+		.ops = ov5670_vflip_ops,
+		.mask = 0x2,
+	},
+	{
+		.address = 0x450B,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov5670_swap_flip_ops),
+		.ops = ov5670_swap_flip_ops,
+		.mask = 0x20,
+	},
+};
+
+static struct crl_dynamic_register_access ov5670_h_flip_regs[] = {
+	{
+		.address = 0x3821,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov5670_hflip_ops),
+		.ops = ov5670_hflip_ops,
+		.mask = 0x2,
+	},
+};
+
+struct crl_register_write_rep ov5670_poweroff_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01  },
+};
+
+static struct crl_dynamic_register_access ov5670_ana_gain_global_regs[] = {
+	{
+		.address = 0x3508,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x7ff,
+	},
+};
+
+static struct crl_dynamic_register_access ov5670_exposure_regs[] = {
+	{
+		.address = 0x3500,
+		.len = CRL_REG_LEN_24BIT,
+		.ops_items = ARRAY_SIZE(ov5670_exposure_ops),
+		.ops = ov5670_exposure_ops,
+		.mask = 0x0ffff0,
+	},
+};
+
+static struct crl_dynamic_register_access ov5670_vblank_regs[] = {
+	{
+		.address = 0x380E,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access ov5670_hblank_regs[] = {
+	{
+		.address = 0x380C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = ARRAY_SIZE(ov5670_hblank_ops),
+		.ops = ov5670_hblank_ops,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_sensor_detect_config ov5670_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+	{
+		.reg = { 0x300C, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+};
+
+static const s64 ov5670_op_sys_clock[] =  { 420000000, };
+
+static struct crl_pll_configuration ov5670_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 420000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 240000000,
+		.pixel_rate_pa = 199180800,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(ov5670_pll_840mbps),
+		.pll_regs = ov5670_pll_840mbps,
+	},
+};
+
+static struct crl_subdev_rect_rep ov5670_1944_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 0, 0, 2592, 1944 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 0, 0, 2592, 1944 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 0, 0, 2592, 1944 },
+	},
+};
+
+static struct crl_subdev_rect_rep ov5670_1940_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 16, 2, 2560, 1940 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 2560, 1940 },
+		.out_rect = { 0, 0, 2560, 1940 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2560, 1940 },
+		.out_rect = { 0, 0, 2560, 1940 },
+	},
+};
+
+static struct crl_subdev_rect_rep ov5670_1458_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 0, 244, 2592, 1458 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 2592, 1458 },
+		.out_rect = { 0, 0, 2592, 1458 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2592, 1458 },
+		.out_rect = { 0, 0, 2592, 1458 },
+	},
+};
+
+static struct crl_subdev_rect_rep ov5670_1456_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 16, 244, 2560, 1456 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 2560, 1456 },
+		.out_rect = { 0, 0, 2560, 1456 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 2560, 1456 },
+		.out_rect = { 0, 0, 2560, 1456 },
+	},
+};
+
+static struct crl_subdev_rect_rep ov5670_1152_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 304, 396, 1984, 1152 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 1984, 1152 },
+		.out_rect = { 0, 0, 1984, 1152 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 1984, 1152 },
+		.out_rect = { 0, 0, 1984, 1152 },
+	},
+};
+
+static struct crl_subdev_rect_rep ov5670_1080_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 2592, 1944 },
+		.out_rect = { 336, 432, 1920, 1080 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect = { 0, 0, 1920, 1080 },
+		.out_rect = { 0, 0, 1920, 1080 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 1920, 1080 },
+		.out_rect = { 0, 0, 1920, 1080 },
+	},
+};
+
+static struct crl_mode_rep ov5670_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov5670_1944_rects),
+		.sd_rects = ov5670_1944_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2592,
+		.height = 1944,
+		.min_llp = 3360,
+		.min_fll = 1976,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov5670_mode_1944),
+		.mode_regs = ov5670_mode_1944,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov5670_1940_rects),
+		.sd_rects = ov5670_1940_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2560,
+		.height = 1940,
+		.min_llp = 3366,
+		.min_fll = 1972,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov5670_mode_1940),
+		.mode_regs = ov5670_mode_1940,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov5670_1458_rects),
+		.sd_rects = ov5670_1458_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2592,
+		.height = 1458,
+		.min_llp = 4455,
+		.min_fll = 1490,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov5670_mode_1458),
+		.mode_regs = ov5670_mode_1458,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov5670_1456_rects),
+		.sd_rects = ov5670_1456_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 2560,
+		.height = 1456,
+		.min_llp = 4461,
+		.min_fll = 1488,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov5670_mode_1456),
+		.mode_regs = ov5670_mode_1456,
+	},
+
+	{
+		.sd_rects_items = ARRAY_SIZE(ov5670_1152_rects),
+		.sd_rects = ov5670_1152_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1984,
+		.height = 1152,
+		.min_llp = 2803,
+		.min_fll = 1184,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov5670_mode_1152),
+		.mode_regs = ov5670_mode_1152,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov5670_1080_rects),
+		.sd_rects = ov5670_1080_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.min_llp = 2985,
+		.min_fll = 1112,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov5670_mode_1080),
+		.mode_regs = ov5670_mode_1080,
+	},
+};
+
+static struct crl_sensor_subdev_config ov5670_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "ov5670 scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov5670 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov5670 pixel array",
+	},
+};
+
+static struct crl_sensor_limits ov5670_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 2592,
+	.y_addr_max = 1944,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 2700,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 255,
+	.scaler_n_min = 16,
+	.scaler_n_max = 16,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data ov5670_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+};
+
+static struct crl_csi_data_fmt ov5670_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = ov5670_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov5670_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov5670_data_fmt_width10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov5670_data_fmt_width10,
+	},
+};
+
+static struct crl_v4l2_ctrl ov5670_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max =
+			ARRAY_SIZE(ov5670_pll_configurations) - 1,
+		.data.v4l2_int_menu.menu = ov5670_op_sys_clock,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov5670_ana_gain_global_regs),
+		.regs = ov5670_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov5670_exposure_regs),
+		.regs = ov5670_exposure_regs,
+		.dep_items = 0, /* FLL is changed automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov5670_h_flip_regs),
+		.regs = ov5670_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov5670_v_flip_regs),
+		.regs = ov5670_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 2474,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov5670_vblank_regs),
+		.regs = ov5670_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 3880,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov5670_hblank_regs),
+		.regs = ov5670_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+#define ov5670_OTP_START_ADDR 0x7010
+#define ov5670_OTP_END_ADDR 0x7063
+
+#define ov5670_OTP_LEN (ov5670_OTP_END_ADDR - ov5670_OTP_START_ADDR + 1)
+#define ov5670_OTP_L_ADDR(x) (x & 0xff)
+#define ov5670_OTP_H_ADDR(x) ((x >> 8) & 0xff)
+
+static struct crl_register_write_rep ov5670_nvm_preop_regset[] = {
+	/* Start streaming */
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 },
+	/* Manual mode, program disable */
+	{ 0x3D84, CRL_REG_LEN_08BIT, 0xC0 },
+	/* Manual OTP start address for access */
+	{ 0x3D88, CRL_REG_LEN_08BIT, ov5670_OTP_H_ADDR(ov5670_OTP_START_ADDR)},
+	{ 0x3D89, CRL_REG_LEN_08BIT, ov5670_OTP_L_ADDR(ov5670_OTP_START_ADDR)},
+	/* Manual OTP end address for access */
+	{ 0x3D8A, CRL_REG_LEN_08BIT, ov5670_OTP_H_ADDR(ov5670_OTP_END_ADDR)},
+	{ 0x3D8B, CRL_REG_LEN_08BIT, ov5670_OTP_L_ADDR(ov5670_OTP_END_ADDR)},
+	/* OTP load enable */
+	{ 0x3D81, CRL_REG_LEN_08BIT, 0x01 },
+	/* Wait for the data to load into the buffer */
+	{ 0x0000, CRL_REG_LEN_DELAY, 0x05 },
+};
+
+static struct crl_register_write_rep ov5670_nvm_postop_regset[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }, /* Stop streaming */
+};
+
+static struct crl_nvm_blob ov5670_nvm_blobs[] = {
+	{CRL_I2C_ADDRESS_NO_OVERRIDE, ov5670_OTP_START_ADDR, ov5670_OTP_LEN },
+};
+
+static struct crl_arithmetic_ops ov5670_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops ov5670_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc ov5670_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(ov5670_frame_desc_width_ops),
+			.ops = ov5670_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(ov5670_frame_desc_height_ops),
+			.ops = ov5670_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static const struct crl_power_seq_entity ov5670_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VANA",
+		.val = 2800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VDIG",
+		.val = 1200000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VIO",
+		.val = 1800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VAF",
+		.val = 3000000,
+		.delay = 2000,
+	},
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.delay = 10700,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA_BY_NUMBER,
+	},
+
+};
+
+static struct crl_sensor_configuration ov5670_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov5670_power_items),
+	.power_entities = ov5670_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(ov5670_powerup_regset),
+	.powerup_regs = ov5670_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(ov5670_sensor_detect_regset),
+	.id_regs = ov5670_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov5670_sensor_subdevs),
+	.subdevs = ov5670_sensor_subdevs,
+
+	.sensor_limits = &ov5670_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov5670_pll_configurations),
+	.pll_configs = ov5670_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov5670_modes),
+	.modes = ov5670_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov5670_streamon_regs),
+	.streamon_regs = ov5670_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov5670_streamoff_regs),
+	.streamoff_regs = ov5670_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov5670_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov5670_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov5670_crl_csi_data_fmt),
+	.csi_fmts = ov5670_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov5670_flip_configurations),
+	.flip_data = ov5670_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_16BIT,
+	.crl_nvm_info.nvm_preop_regs_items =
+		ARRAY_SIZE(ov5670_nvm_preop_regset),
+	.crl_nvm_info.nvm_preop_regs = ov5670_nvm_preop_regset,
+	.crl_nvm_info.nvm_postop_regs_items =
+		ARRAY_SIZE(ov5670_nvm_postop_regset),
+	.crl_nvm_info.nvm_postop_regs = ov5670_nvm_postop_regset,
+	.crl_nvm_info.nvm_blobs_items = ARRAY_SIZE(ov5670_nvm_blobs),
+	.crl_nvm_info.nvm_config = ov5670_nvm_blobs,
+
+	.frame_desc_entries = ARRAY_SIZE(ov5670_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = ov5670_frame_desc,
+};
+
+#endif  /* __CRLMODULE_ov5670_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov8858_configuration.h b/drivers/media/i2c/crlmodule/crl_ov8858_configuration.h
new file mode 100644
index 000000000000..63faedcf85ce
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov8858_configuration.h
@@ -0,0 +1,1429 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV8858_CONFIGURATION_H_
+#define __CRLMODULE_OV8858_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep ov8858_pll_360mbps[] = {
+	{ 0x0300, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0301, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0302, CRL_REG_LEN_08BIT, 0x1e },/* pll1_multiplier = 30 */
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x00 },/* pll1_divm = /(1 + 0) */
+	{ 0x0304, CRL_REG_LEN_08BIT, 0x03 },/* pll1_div_mipi = /8 */
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0306, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x030A, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x030B, CRL_REG_LEN_08BIT, 0x01 },/* pll2_pre_div = /2 */
+	{ 0x030c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x030D, CRL_REG_LEN_08BIT, 0x44 },/* pll2_r_divp = 30 */
+	{ 0x030E, CRL_REG_LEN_08BIT, 0x01 },/* pll2_r_divs = /2 */
+	{ 0x030F, CRL_REG_LEN_08BIT, 0x04 },/* pll2_r_divsp = /(1 + 4) */
+	/* pll2_pre_div0 = /1, pll2_r_divdac = /(1 + 1) */
+	{ 0x0312, CRL_REG_LEN_08BIT, 0x02 },
+	/* mipi_lane_mode = 1+3, mipi_lvds_sel = 1 = MIPI enable,
+	 * r_phy_pd_mipi_man = 0, lane_dis_option = 0
+	 */
+	{ 0x3018, CRL_REG_LEN_08BIT, 0x72 },
+};
+
+
+static struct crl_register_write_rep ov8858_powerup_regset[] = {
+	/*Reset*/
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3007, CRL_REG_LEN_08BIT, 0x80 },
+	/* Npump clock div = /2, Ppump clock div = /4 */
+	{ 0x3015, CRL_REG_LEN_08BIT, 0x01 },
+	/* Clock switch output = normal, pclk_div = /1 */
+	{ 0x3020, CRL_REG_LEN_08BIT, 0x93 },
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3032, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3022, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3034, CRL_REG_LEN_08BIT, 0x00 },
+	/* sclk_div = /1, sclk_pre_div = /1, chip debug = 1 */
+	{ 0x3106, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3305, CRL_REG_LEN_08BIT, 0xF1 },
+	{ 0x3307, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3308, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3309, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x330A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x330B, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x330C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x330D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x330E, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x330F, CRL_REG_LEN_08BIT, 0x40 },
+	/*
+	 * Digital fraction gain delay option = Delay 1 frame,
+	 * Gain change delay option = Delay 1 frame,
+	 * Gain delay option = Delay 1 frame,
+	 * Gain manual as sensor gain = Input gain as real gain format,
+	 * Exposure delay option (must be 0 = Delay 1 frame,
+	 * Exposure change delay option (must be 0) = Delay 1 frame
+	 */
+	{ 0x3503, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3505, CRL_REG_LEN_08BIT, 0x80 },/* gain conversation option */
+	/*
+	 * [10:7] are integer gain, [6:0] are fraction gain. For example:
+	 * 0x80 is 1x gain, CRL_REG_LEN_08BIT, 0x100 is 2x gain,
+	 * CRL_REG_LEN_08BIT, 0x1C0 is 3.5x gain
+	 */
+	{ 0x3508, CRL_REG_LEN_08BIT, 0x02 },/* long gain = 0x0200 */
+	{ 0x3509, CRL_REG_LEN_08BIT, 0x00 },/* long gain = 0x0200 */
+	{ 0x350C, CRL_REG_LEN_08BIT, 0x00 },/* short gain = 0x0080 */
+	{ 0x350D, CRL_REG_LEN_08BIT, 0x80 },/* short gain = 0x0080 */
+	{ 0x3510, CRL_REG_LEN_08BIT, 0x00 },/* short exposure = 0x000200 */
+	{ 0x3511, CRL_REG_LEN_08BIT, 0x02 },/* short exposure = 0x000200 */
+	{ 0x3512, CRL_REG_LEN_08BIT, 0x00 },/* short exposure = 0x000200 */
+	{ 0x3600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3601, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3602, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3603, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3604, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x3605, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3606, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3607, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3608, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x3609, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x360A, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x360B, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x360C, CRL_REG_LEN_08BIT, 0xD4 },
+	{ 0x360D, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x360E, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x360F, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3610, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3611, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3612, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3613, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3614, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x3615, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3616, CRL_REG_LEN_08BIT, 0x4A },
+	{ 0x3617, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3618, CRL_REG_LEN_08BIT, 0x5a },
+	{ 0x3619, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x361A, CRL_REG_LEN_08BIT, 0x99 },
+	{ 0x361B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x361C, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x361D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x361E, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x361F, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3638, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3633, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3634, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3635, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3636, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x3645, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3646, CRL_REG_LEN_08BIT, 0x83 },
+	{ 0x364A, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3700, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3701, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3702, CRL_REG_LEN_08BIT, 0x50 },
+	{ 0x3703, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x3704, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x3705, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3706, CRL_REG_LEN_08BIT, 0x82 },
+	{ 0x3707, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3708, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3709, CRL_REG_LEN_08BIT, 0x66 },
+	{ 0x370A, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x370B, CRL_REG_LEN_08BIT, 0x82 },
+	{ 0x370C, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3712, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x3714, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x3718, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3719, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x371E, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x371F, CRL_REG_LEN_08BIT, 0x7F },
+	{ 0x3720, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x3721, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x3724, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3725, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3726, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3728, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x3729, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x372A, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x372B, CRL_REG_LEN_08BIT, 0xA6 },
+	{ 0x372C, CRL_REG_LEN_08BIT, 0xA6 },
+	{ 0x372D, CRL_REG_LEN_08BIT, 0xA6 },
+	{ 0x372E, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x372F, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3730, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3731, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x3732, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x3733, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3734, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3736, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x373A, CRL_REG_LEN_08BIT, 0x0A },
+	{ 0x373B, CRL_REG_LEN_08BIT, 0x0B },
+	{ 0x373C, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x373E, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x3750, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3751, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3755, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3758, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3759, CRL_REG_LEN_08BIT, 0x4C },
+	{ 0x375A, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x375B, CRL_REG_LEN_08BIT, 0x26 },
+	{ 0x375C, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x375D, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x375E, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x375F, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x3760, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3761, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3762, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3763, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3766, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x376B, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3772, CRL_REG_LEN_08BIT, 0x46 },
+	{ 0x3773, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3774, CRL_REG_LEN_08BIT, 0x2C },
+	{ 0x3775, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3776, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3777, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3778, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x37A0, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37A1, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x37A2, CRL_REG_LEN_08BIT, 0x7A },
+	{ 0x37A3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37A4, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37A5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37A6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37A7, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37A8, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x37A9, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x37AA, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x37AB, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x37AC, CRL_REG_LEN_08BIT, 0x5C },
+	{ 0x37AD, CRL_REG_LEN_08BIT, 0x55 },
+	{ 0x37AE, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x37AF, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x37B0, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37B1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37B2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37B3, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0x37B4, CRL_REG_LEN_08BIT, 0x84 },
+	{ 0x37B5, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x37B6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37B7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37B8, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37B9, CRL_REG_LEN_08BIT, 0xFF },
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },/* h_crop_start high */
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x0C },/* h_crop_start low */
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },/* v_crop_start high */
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x0C },/* v_crop_start low */
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x0C },/* h_crop_end high */
+	{ 0x3805, CRL_REG_LEN_08BIT, 0xD3 },/* h_crop_end low */
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x09 },/* v_crop_end high */
+	{ 0x3807, CRL_REG_LEN_08BIT, 0xA3 },/* v_crop_end low */
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xC0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x09 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x90 },/* v_output_size low */
+	{ 0x380C, CRL_REG_LEN_08BIT, 0x07 },/* horizontal timing size high */
+	{ 0x380D, CRL_REG_LEN_08BIT, 0x94 },/* horizontal timing size low */
+	{ 0x380E, CRL_REG_LEN_08BIT, 0x0A },/* vertical timing size high */
+	{ 0x380F, CRL_REG_LEN_08BIT, 0x0D },/* vertical timing size low */
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },/* h_win offset high */
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x04 },/* h_win offset low */
+	{ 0x3812, CRL_REG_LEN_08BIT, 0x00 },/* v_win offset high */
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x02 },/* v_win offset low */
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x01 },/* h_odd_inc */
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x01 },/* h_even_inc */
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },/* format1 */
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x40 },/* format2 */
+	{ 0x382A, CRL_REG_LEN_08BIT, 0x01 },/* v_odd_inc */
+	{ 0x382B, CRL_REG_LEN_08BIT, 0x01 },/* v_even_inc */
+	{ 0x3830, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x3836, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3837, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3841, CRL_REG_LEN_08BIT, 0xFF },/* AUTO_SIZE_CTRL */
+	{ 0x3846, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3D85, CRL_REG_LEN_08BIT, 0x16 },/* OTP_REG85 */
+	{ 0x3D8C, CRL_REG_LEN_08BIT, 0x73 },
+	{ 0x3D8D, CRL_REG_LEN_08BIT, 0xde },
+	{ 0x3F08, CRL_REG_LEN_08BIT, 0x10 },/* PSRAM control register */
+	{ 0x4000, CRL_REG_LEN_08BIT, 0xF1 },/* BLC CTRL00 = default */
+	{ 0x4001, CRL_REG_LEN_08BIT, 0x00 },/* BLC CTRL01 */
+	{ 0x4002, CRL_REG_LEN_08BIT, 0x27 },/* BLC offset = 0x27 */
+	{ 0x4005, CRL_REG_LEN_08BIT, 0x10 },/* BLC target = 0x0010 */
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x81 },/* BLC CTRL09 */
+	{ 0x400B, CRL_REG_LEN_08BIT, 0x0C },/* BLC CTRL0B = default */
+	{ 0x4011, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x401B, CRL_REG_LEN_08BIT, 0x00 },/* Zero line R coeff. = 0x0000 */
+	{ 0x401D, CRL_REG_LEN_08BIT, 0x00 },/* Zero line T coeff. = 0x0000 */
+	{ 0x401F, CRL_REG_LEN_08BIT, 0x00 },/* BLC CTRL1F */
+	{ 0x4020, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4021, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4024, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x4025, CRL_REG_LEN_08BIT, 0x36 },
+	{ 0x4026, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x4027, CRL_REG_LEN_08BIT, 0x37 },
+	{ 0x4028, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4029, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x402A, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x402B, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x402C, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402D, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x402E, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x402F, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4034, CRL_REG_LEN_08BIT, 0x3F },
+	{ 0x403D, CRL_REG_LEN_08BIT, 0x04 },/* BLC CTRL3D */
+	{ 0x4300, CRL_REG_LEN_08BIT, 0xFF },/* clip_max[11:4] = 0xFFF */
+	{ 0x4301, CRL_REG_LEN_08BIT, 0x00 },/* clip_min[11:4] = 0 */
+	{ 0x4302, CRL_REG_LEN_08BIT, 0x0F },/* clip_min/max[3:0] */
+	{ 0x4316, CRL_REG_LEN_08BIT, 0x00 },/* CTRL16 = default */
+	{ 0x4503, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x97 },
+	/* wkup_dly = Mark1 wakeup delay/2^10 = 0x25 */
+	{ 0x4808, CRL_REG_LEN_08BIT, 0x25 },
+	{ 0x4816, CRL_REG_LEN_08BIT, 0x12 },/* Embedded data type */
+	{ 0x5A08, CRL_REG_LEN_08BIT, 0x02 },/* Data in beginning of the frame */
+	{ 0x5041, CRL_REG_LEN_08BIT, 0x01 },/* ISP CTRL41 - embedded data=on */
+	{ 0x4307, CRL_REG_LEN_08BIT, 0x31 },/* Embedded_en */
+	{ 0x481F, CRL_REG_LEN_08BIT, 0x32 },/* clk_prepare_min = 0x32 */
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x16 },/* pclk_period = 0x14 */
+	{ 0x4850, CRL_REG_LEN_08BIT, 0x10 },/* LANE SEL01 */
+	{ 0x4851, CRL_REG_LEN_08BIT, 0x32 },/* LANE SEL02 */
+	{ 0x4B00, CRL_REG_LEN_08BIT, 0x2A },
+	{ 0x4B0D, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4D00, CRL_REG_LEN_08BIT, 0x04 },/* TPM_CTRL_REG */
+	{ 0x4D01, CRL_REG_LEN_08BIT, 0x18 },/* TPM_CTRL_REG */
+	{ 0x4D02, CRL_REG_LEN_08BIT, 0xC3 },/* TPM_CTRL_REG */
+	{ 0x4D03, CRL_REG_LEN_08BIT, 0xFF },/* TPM_CTRL_REG */
+	{ 0x4D04, CRL_REG_LEN_08BIT, 0xFF },/* TPM_CTRL_REG */
+	{ 0x4D05, CRL_REG_LEN_08BIT, 0xFF },/* TPM_CTRL_REG */
+	/*
+	 * Lens correction (LENC) function enable = 0
+	 * Slave sensor AWB Gain function enable = 1
+	 * Slave sensor AWB Statistics function enable = 1
+	 * Master sensor AWB Gain function enable = 1
+	 * Master sensor AWB Statistics function enable = 1
+	 * Black DPC function enable = 1
+	 * White DPC function enable =1
+	 */
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x7E },
+	{ 0x5001, CRL_REG_LEN_08BIT, 0x01 },/* BLC function enable = 1 */
+	/*
+	 * Horizontal scale function enable = 0
+	 * WBMATCH bypass mode = Select slave sensor's gain
+	 * WBMATCH function enable = 0
+	 * Master MWB gain support RGBC = 0
+	 * OTP_DPC function enable = 1
+	 * Manual mode of VarioPixel function enable = 0
+	 * Manual enable of VarioPixel function enable = 0
+	 * Use VSYNC to latch ISP modules's function enable signals = 0
+	 */
+	{ 0x5002, CRL_REG_LEN_08BIT, 0x08 },
+	/*
+	 * Bypass all ISP modules after BLC module = 0
+	 * DPC_DBC buffer control enable = 1
+	 * WBMATCH VSYNC selection = Select master sensor's VSYNC fall
+	 * Select master AWB gain to embed line = AWB gain before manual mode
+	 * Enable BLC's input flip_i signal = 0
+	 */
+	{ 0x5003, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5041, CRL_REG_LEN_08BIT, 0x1D },/* ISP CTRL41 - embedded data=on */
+	{ 0x5046, CRL_REG_LEN_08BIT, 0x12 },/* ISP CTRL46 = default */
+	/*
+	 * Tail enable = 1
+	 * Saturate cross cluster enable = 1
+	 * Remove cross cluster enable = 1
+	 * Enable to remove connected defect pixels in same channel = 1
+	 * Enable to remove connected defect pixels in different channel = 1
+	 * Smooth enable, use average G for recovery = 1
+	 * Black/white sensor mode enable = 0
+	 * Manual mode enable = 0
+	 */
+	{ 0x5780, CRL_REG_LEN_08BIT, 0x3e },
+	{ 0x5781, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x5782, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x5783, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5784, CRL_REG_LEN_08BIT, 0x01 },/* DPC CTRL04 */
+	{ 0x5785, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5786, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5787, CRL_REG_LEN_08BIT, 0x04 },/* DPC CTRL07 */
+	{ 0x5788, CRL_REG_LEN_08BIT, 0x02 },/* DPC CTRL08 */
+	{ 0x5789, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x578A, CRL_REG_LEN_08BIT, 0xfd },/* DPC CTRL0A */
+	{ 0x578B, CRL_REG_LEN_08BIT, 0xf5 },/* DPC CTRL0B */
+	{ 0x578C, CRL_REG_LEN_08BIT, 0xf5 },/* DPC CTRL0C */
+	{ 0x578D, CRL_REG_LEN_08BIT, 0x03 },/* DPC CTRL0D */
+	{ 0x578E, CRL_REG_LEN_08BIT, 0x08 },/* DPC CTRL0E */
+	{ 0x578F, CRL_REG_LEN_08BIT, 0x0c },/* DPC CTRL0F */
+	{ 0x5790, CRL_REG_LEN_08BIT, 0x08 },/* DPC CTRL10 */
+	{ 0x5791, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5792, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5793, CRL_REG_LEN_08BIT, 0x52 },
+	{ 0x5794, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x586E, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x586F, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x58F8, CRL_REG_LEN_08BIT, 0x3d },
+	{ 0x5871, CRL_REG_LEN_08BIT, 0x0d },
+	{ 0x5870, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x5901, CRL_REG_LEN_08BIT, 0x00 },/* VAP CTRL01 = default */
+	{ 0x5B00, CRL_REG_LEN_08BIT, 0x02 },/* OTP CTRL00 */
+	{ 0x5B01, CRL_REG_LEN_08BIT, 0x10 },/* OTP CTRL01 */
+	{ 0x5B02, CRL_REG_LEN_08BIT, 0x03 },/* OTP CTRL02 */
+	{ 0x5B03, CRL_REG_LEN_08BIT, 0xCF },/* OTP CTRL03 */
+	{ 0x5B05, CRL_REG_LEN_08BIT, 0x6C },/* OTP CTRL05 = default */
+	{ 0x5E00, CRL_REG_LEN_08BIT, 0x00 },/* PRE CTRL00 = default */
+	{ 0x5E01, CRL_REG_LEN_08BIT, 0x41 },/* PRE_CTRL01 = default */
+	{ 0x4825, CRL_REG_LEN_08BIT, 0x3a },
+	{ 0x4826, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4808, CRL_REG_LEN_08BIT, 0x25 },
+	{ 0x3763, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3768, CRL_REG_LEN_08BIT, 0xcc },
+	{ 0x470b, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x4202, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x400d, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4040, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x403e, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4041, CRL_REG_LEN_08BIT, 0xc6 },
+	{ 0x400a, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep ov8858_mode_8m_native[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high 3264 x 2448 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xc0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x09 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x90 },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x97 },
+};
+
+static struct crl_register_write_rep ov8858_mode_6m_native[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high 3264 x 1836 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xc0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x07 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x2c },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x97 },
+};
+
+static struct crl_register_write_rep ov8858_mode_8m_full[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high 3280 x 2464 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xD0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x09 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0xA0 },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x97 },
+};
+
+static struct crl_register_write_rep ov8858_mode_6m_full[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x0C },/* h_output_size high 3280 x 1852 */
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xD0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x07 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x3c },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x0C },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x97 },
+};
+
+static struct crl_register_write_rep ov8858_mode_1080[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0xa0 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },/* h_output_size high*/
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x80 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x04 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x38 },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0xef },
+};
+
+static struct crl_register_write_rep ov8858_mode_1920x1440_crop[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0xa0 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },/* h_output_size high*/
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x80 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x05 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0xA0 },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0xef },
+};
+
+static struct crl_register_write_rep ov8858_mode_1984x1116_crop[] = {
+	{ 0x382d, CRL_REG_LEN_08BIT, 0xa0 },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },/* h_output_size high*/
+	{ 0x3809, CRL_REG_LEN_08BIT, 0xC0 },/* h_output_size low */
+	{ 0x380A, CRL_REG_LEN_08BIT, 0x04 },/* v_output_size high */
+	{ 0x380B, CRL_REG_LEN_08BIT, 0x5C },/* v_output_size low */
+	{ 0x4022, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4023, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x4600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0xef },
+};
+
+static struct crl_register_write_rep ov8858_streamon_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep ov8858_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep ov8858_data_fmt_width10[] = {
+	{ 0x3031, CRL_REG_LEN_08BIT, 0x0a }
+};
+
+static struct crl_arithmetic_ops ov8858_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov8858_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov8858_hblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 1,
+	 },
+};
+
+static struct crl_arithmetic_ops ov8858_exposure_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	 },
+};
+
+static struct crl_dynamic_register_access ov8858_v_flip_regs[] = {
+	{
+		.address = 0x3820,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov8858_vflip_ops),
+		.ops = ov8858_vflip_ops,
+		.mask = 0x2,
+	 },
+};
+
+static struct crl_dynamic_register_access ov8858_dig_gain_regs[] = {
+	{
+		.address = 0x5032,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+	{
+		.address = 0x5034,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+	{
+		.address = 0x5036,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	},
+};
+
+static struct crl_dynamic_register_access ov8858_h_flip_regs[] = {
+	{
+		.address = 0x3821,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov8858_hflip_ops),
+		.ops = ov8858_hflip_ops,
+		.mask = 0x2,
+	 },
+};
+
+struct crl_register_write_rep ov8858_poweroff_regset[] = {
+	{ 0x0103, CRL_REG_LEN_08BIT, 0x01  },
+};
+
+static struct crl_dynamic_register_access ov8858_ana_gain_global_regs[] = {
+	{
+		.address = 0x3508,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x7ff,
+	 },
+};
+
+static struct crl_dynamic_register_access ov8858_exposure_regs[] = {
+	{
+		.address = 0x3500,
+		.len = CRL_REG_LEN_24BIT,
+		.ops_items = ARRAY_SIZE(ov8858_exposure_ops),
+		.ops = ov8858_exposure_ops,
+		.mask = 0x0ffff0,
+	 },
+};
+
+static struct crl_dynamic_register_access ov8858_vblank_regs[] = {
+	{
+		.address = 0x380E,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xffff,
+	 },
+};
+
+static struct crl_dynamic_register_access ov8858_hblank_regs[] = {
+	{
+		.address = 0x380C,
+		.len = CRL_REG_LEN_16BIT,
+		.ops_items = ARRAY_SIZE(ov8858_hblank_ops),
+		.ops = ov8858_hblank_ops,
+		.mask = 0xffff,
+	 },
+};
+
+static struct crl_sensor_detect_config ov8858_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+	{
+		.reg = { 0x300C, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	 },
+};
+
+static struct crl_pll_configuration ov8858_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 360000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 180000000,
+		.pixel_rate_pa = 290133334,
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(ov8858_pll_360mbps),
+		.pll_regs = ov8858_pll_360mbps,
+	 },
+
+};
+
+static struct crl_subdev_rect_rep ov8858_8m_rects_native[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov8858_6m_rects_native[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 1836,
+	 },
+};
+
+
+static struct crl_subdev_rect_rep ov8858_8m_rects_full[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3280,
+		.in_rect.height = 2464,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 2464,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3280,
+		.in_rect.height = 2464,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 2464,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3280,
+		.in_rect.height = 2464,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 2464,
+	},
+};
+
+static struct crl_subdev_rect_rep ov8858_6m_rects_full[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3280,
+		.in_rect.height = 2464,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 2464,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3280,
+		.in_rect.height = 2464,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 2464,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3280,
+		.in_rect.height = 2464,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3280,
+		.out_rect.height = 1852,
+	},
+};
+
+static struct crl_subdev_rect_rep ov8858_1080_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1080,
+	},
+};
+
+static struct crl_subdev_rect_rep ov8858_1920x1440_rects_crop[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1440,
+	},
+};
+
+static struct crl_subdev_rect_rep ov8858_1984x1116_rects_crop[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 3264,
+		.out_rect.height = 2448,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 3264,
+		.in_rect.height = 2448,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1984,
+		.out_rect.height = 1116,
+	},
+};
+
+static struct crl_mode_rep ov8858_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_8m_rects_native),
+		.sd_rects = ov8858_8m_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3264,
+		.height = 2448,
+		.min_llp = 3880,
+		.min_fll = 2474,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_8m_native),
+		.mode_regs = ov8858_mode_8m_native,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_6m_rects_native),
+		.sd_rects = ov8858_6m_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3264,
+		.height = 1836,
+		.min_llp = 5132,
+		.min_fll = 1872,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_6m_native),
+		.mode_regs = ov8858_mode_6m_native,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_8m_rects_full),
+		.sd_rects = ov8858_8m_rects_full,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3280,
+		.height = 2464,
+		.min_llp = 3880,
+		.min_fll = 2474,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_8m_full),
+		.mode_regs = ov8858_mode_8m_full,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_6m_rects_full),
+		.sd_rects = ov8858_6m_rects_full,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 3280,
+		.height = 1852,
+		.min_llp = 5132,
+		.min_fll = 1872,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_6m_full),
+		.mode_regs = ov8858_mode_6m_full,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_1080_rects),
+		.sd_rects = ov8858_1080_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.min_llp = 4284,
+		.min_fll = 1120,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_1080),
+		.mode_regs = ov8858_mode_1080,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_1920x1440_rects_crop),
+		.sd_rects = ov8858_1920x1440_rects_crop,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1440,
+		.min_llp = 3880,
+		.min_fll = 1480,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_1920x1440_crop),
+		.mode_regs = ov8858_mode_1920x1440_crop,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov8858_1984x1116_rects_crop),
+		.sd_rects = ov8858_1984x1116_rects_crop,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1984,
+		.height = 1116,
+		.min_llp = 3880,
+		.min_fll = 1120,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov8858_mode_1984x1116_crop),
+		.mode_regs = ov8858_mode_1984x1116_crop,
+	},
+
+};
+
+static struct crl_sensor_subdev_config ov8858_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "ov8858 scaler",
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov8858 binner",
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov8858 pixel array",
+	 },
+};
+
+static struct crl_sensor_limits ov8858_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 3280,
+	.y_addr_max = 2464,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 3880,
+	.max_line_length_pixels = 32752,
+	.scaler_m_min = 16,
+	.scaler_m_max = 255,
+	.scaler_n_min = 16,
+	.scaler_n_max = 16,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data ov8858_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	 },
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	 },
+};
+
+static struct crl_csi_data_fmt ov8858_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 1,
+		.regs = ov8858_data_fmt_width10,
+	 },
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov8858_data_fmt_width10,
+	 },
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov8858_data_fmt_width10,
+	 },
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.regs_items = 1,
+		.bits_per_pixel = 10,
+		.regs = ov8858_data_fmt_width10,
+	 },
+};
+
+static struct crl_v4l2_ctrl ov8858_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+		{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_ana_gain_global_regs),
+		.regs = ov8858_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_exposure_regs),
+		.regs = ov8858_exposure_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_h_flip_regs),
+		.regs = ov8858_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_v_flip_regs),
+		.regs = ov8858_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 2474,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_vblank_regs),
+		.regs = ov8858_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 3880,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_hblank_regs),
+		.regs = ov8858_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4095,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1024,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov8858_dig_gain_regs),
+		.regs = ov8858_dig_gain_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+#define OV8858_OTP_START_ADDR 0x7010
+#define OV8858_OTP_END_ADDR 0x7186
+
+#define OV8858_OTP_LEN (OV8858_OTP_END_ADDR - OV8858_OTP_START_ADDR + 1)
+#define OV8858_OTP_L_ADDR(x) (x & 0xff)
+#define OV8858_OTP_H_ADDR(x) ((x >> 8) & 0xff)
+
+static struct crl_register_write_rep ov8858_nvm_preop_regset[] = {
+	/* Start streaming */
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 },
+	/* Manual mode, program disable */
+	{ 0x3D84, CRL_REG_LEN_08BIT, 0xC0 },
+	/* Manual OTP start address for access */
+	{ 0x3D88, CRL_REG_LEN_08BIT, OV8858_OTP_H_ADDR(OV8858_OTP_START_ADDR)},
+	{ 0x0D89, CRL_REG_LEN_08BIT, OV8858_OTP_L_ADDR(OV8858_OTP_START_ADDR)},
+	/* Manual OTP end address for access */
+	{ 0x3D8A, CRL_REG_LEN_08BIT, OV8858_OTP_H_ADDR(OV8858_OTP_END_ADDR)},
+	{ 0x3D8B, CRL_REG_LEN_08BIT, OV8858_OTP_L_ADDR(OV8858_OTP_END_ADDR)},
+	/* OTP load enable */
+	{ 0x3D81, CRL_REG_LEN_08BIT, 0x01 },
+	/* Wait for the data to load into the buffer */
+	{ 0x0000, CRL_REG_LEN_DELAY, 0x05 },
+};
+
+static struct crl_register_write_rep ov8858_nvm_postop_regset[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }, /* Stop streaming */
+};
+
+static struct crl_nvm_blob ov8858_nvm_blobs[] = {
+	{CRL_I2C_ADDRESS_NO_OVERRIDE, OV8858_OTP_START_ADDR, OV8858_OTP_LEN },
+};
+
+static struct crl_arithmetic_ops ov8858_frame_desc_width_ops[] = {
+	{
+	 .op = CRL_ASSIGNMENT,
+	 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+	 .operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops ov8858_frame_desc_height_ops[] = {
+	{
+	 .op = CRL_ASSIGNMENT,
+	 .operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+	 .operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc ov8858_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(ov8858_frame_desc_width_ops),
+			 .ops = ov8858_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(ov8858_frame_desc_height_ops),
+			  .ops = ov8858_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity ov8858_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VANA",
+		.val = 2800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VDIG",
+		.val = 1200000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+		.ent_name = "VIO",
+		.val = 1800000,
+		.delay = 0,
+	},
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.delay = 10000,
+	},
+};
+
+static struct crl_sensor_configuration ov8858_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov8858_power_items),
+	.power_entities = ov8858_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(ov8858_powerup_regset),
+	.powerup_regs = ov8858_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+
+	.id_reg_items = ARRAY_SIZE(ov8858_sensor_detect_regset),
+	.id_regs = ov8858_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov8858_sensor_subdevs),
+	.subdevs = ov8858_sensor_subdevs,
+
+	.sensor_limits = &ov8858_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov8858_pll_configurations),
+	.pll_configs = ov8858_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov8858_modes),
+	.modes = ov8858_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov8858_streamon_regs),
+	.streamon_regs = ov8858_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov8858_streamoff_regs),
+	.streamoff_regs = ov8858_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov8858_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov8858_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov8858_crl_csi_data_fmt),
+	.csi_fmts = ov8858_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov8858_flip_configurations),
+	.flip_data = ov8858_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_16BIT,
+	.crl_nvm_info.nvm_preop_regs_items =
+		ARRAY_SIZE(ov8858_nvm_preop_regset),
+	.crl_nvm_info.nvm_preop_regs = ov8858_nvm_preop_regset,
+	.crl_nvm_info.nvm_postop_regs_items =
+		ARRAY_SIZE(ov8858_nvm_postop_regset),
+	.crl_nvm_info.nvm_postop_regs = ov8858_nvm_postop_regset,
+	.crl_nvm_info.nvm_blobs_items = ARRAY_SIZE(ov8858_nvm_blobs),
+	.crl_nvm_info.nvm_config = ov8858_nvm_blobs,
+
+	.frame_desc_entries = ARRAY_SIZE(ov8858_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = ov8858_frame_desc,
+
+	.msr_file_name = "00ov8858.bxt_rvp.drvb",
+};
+
+#endif  /* __CRLMODULE_OV8858_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ov9281_configuration.h b/drivers/media/i2c/crlmodule/crl_ov9281_configuration.h
new file mode 100644
index 000000000000..5fb1987ed08f
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov9281_configuration.h
@@ -0,0 +1,520 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2018 Intel Corporation
+ *
+ * Author: Wu Xia <xia.wu@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV9281_CONFIGURATION_H_
+#define __CRLMODULE_OV9281_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_register_write_rep ov9281_pll_800mbps[] = {
+	{ 0x0302, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x030d, CRL_REG_LEN_08BIT, 0x50 },
+	{ 0x030e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+};
+
+static struct crl_register_write_rep ov9281_powerup_regset[] = {
+	{ 0x4f00, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+};
+
+static struct crl_register_write_rep ov9281_mode_1m[] = {
+	{ 0x3001, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x3004, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x3005, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3006, CRL_REG_LEN_08BIT, 0x04 },
+
+	{ 0x3011, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3013, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x3022, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3030, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3039, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x303a, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x3503, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3505, CRL_REG_LEN_08BIT, 0x8c },
+	{ 0x3507, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3508, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3610, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3611, CRL_REG_LEN_08BIT, 0xa0 },
+
+	{ 0x3620, CRL_REG_LEN_08BIT, 0x6f },
+	{ 0x3632, CRL_REG_LEN_08BIT, 0x56 },
+	{ 0x3633, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x3662, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3666, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x366f, CRL_REG_LEN_08BIT, 0x5a },
+	{ 0x3680, CRL_REG_LEN_08BIT, 0x84 },
+
+	{ 0x3712, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x372d, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x3731, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3732, CRL_REG_LEN_08BIT, 0x30 },
+	{ 0x3778, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x377d, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x3788, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3789, CRL_REG_LEN_08BIT, 0xa4 },
+	{ 0x378a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x378b, CRL_REG_LEN_08BIT, 0x4a },
+	{ 0x3799, CRL_REG_LEN_08BIT, 0x20 },
+
+	/* window setting*/
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x27 },
+
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x20 },
+
+	{ 0x380c, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x380d, CRL_REG_LEN_08BIT, 0xd8 },
+	{ 0x380e, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x380f, CRL_REG_LEN_08BIT, 0x8e },
+
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3811, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x3812, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3814, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x3815, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3821, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3881, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0x38b1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3920, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4003, CRL_REG_LEN_08BIT, 0x40 },
+
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x0b },
+	{ 0x400c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x400d, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4010, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4043, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4307, CRL_REG_LEN_08BIT, 0x30 },
+
+	{ 0x4317, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4501, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4507, CRL_REG_LEN_08BIT, 0x00 },
+
+	{ 0x4509, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x450a, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4601, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x470f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4f07, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4800, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x9f },
+	{ 0x5001, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5e00, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5d00, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x5d01, CRL_REG_LEN_08BIT, 0x00 },
+};
+
+static struct crl_register_write_rep ov9281_streamon_regs[] = {
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+};
+
+static struct crl_register_write_rep ov9281_streamoff_regs[] = {
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+};
+
+struct crl_register_write_rep ov9281_poweroff_regset[] = {
+	{ 0x4f00, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x00, CRL_REG_LEN_DELAY, 10, 0x00},	/* Add a pre 10ms delay */
+};
+
+static struct crl_dynamic_register_access ov9281_ana_gain_global_regs[] = {
+	{
+		.address = 0x3509,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	 },
+};
+
+static struct crl_arithmetic_ops ov9281_expol_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	},
+};
+
+static struct crl_arithmetic_ops ov9281_expom_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov9281_expoh_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	},
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 16,
+	},
+};
+
+static struct crl_dynamic_register_access ov9281_exposure_regs[] = {
+	{
+		.address = 0x3502,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov9281_expol_ops),
+		.ops = ov9281_expol_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3501,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov9281_expom_ops),
+		.ops = ov9281_expom_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x3500,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov9281_expoh_ops),
+		.ops = ov9281_expoh_ops,
+		.mask = 0x0f,
+	},
+};
+
+static struct crl_sensor_detect_config ov9281_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+};
+
+static struct crl_pll_configuration ov9281_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 80000000,
+		.pixel_rate_pa = 80000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = ARRAY_SIZE(ov9281_pll_800mbps),
+		.pll_regs = ov9281_pll_800mbps,
+	 },
+};
+
+static struct crl_subdev_rect_rep ov9281_1m_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	 },
+};
+
+static struct crl_mode_rep ov9281_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov9281_1m_rects),
+		.sd_rects = ov9281_1m_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 800,
+		.min_llp = 728,
+		.min_fll = 910,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov9281_mode_1m),
+		.mode_regs = ov9281_mode_1m,
+	 },
+};
+
+static struct crl_sensor_subdev_config ov9281_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov9281 binner",
+	 },
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov9281 pixel array",
+	 },
+};
+
+static struct crl_sensor_limits ov9281_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1280,
+	.y_addr_max = 800,
+	.min_frame_length_lines = 910,
+	.max_frame_length_lines = 910,
+	.min_line_length_pixels = 728,
+	.max_line_length_pixels = 728,
+	.scaler_m_min = 16,
+	.scaler_m_max = 16,
+	.scaler_n_min = 16,
+	.scaler_n_max = 16,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 3,
+};
+
+static struct crl_flip_data ov9281_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	 },
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	 },
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	 },
+};
+
+static struct crl_csi_data_fmt ov9281_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+		.regs_items = 0,
+		.regs = 0,
+	},
+};
+
+static struct crl_v4l2_ctrl ov9281_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0xFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov9281_ana_gain_global_regs),
+		.regs = ov9281_ana_gain_global_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 885,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov9281_exposure_regs),
+		.regs = ov9281_exposure_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 910,
+		.data.std_data.max = 910,
+		.data.std_data.step = 1,
+		.data.std_data.def = 910,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 728,
+		.data.std_data.max = 728,
+		.data.std_data.step = 1,
+		.data.std_data.def = 728,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity ov9281_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+		.delay = 500,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.delay = 5000,
+	},
+};
+
+struct crl_sensor_configuration ov9281_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov9281_power_items),
+	.power_entities = ov9281_power_items,
+
+	.powerup_regs_items = ARRAY_SIZE(ov9281_powerup_regset),
+	.powerup_regs = ov9281_powerup_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(ov9281_sensor_detect_regset),
+	.id_regs = ov9281_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov9281_sensor_subdevs),
+	.subdevs = ov9281_sensor_subdevs,
+
+	.sensor_limits = &ov9281_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov9281_pll_configurations),
+	.pll_configs = ov9281_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov9281_modes),
+	.modes = ov9281_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov9281_streamon_regs),
+	.streamon_regs = ov9281_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov9281_streamoff_regs),
+	.streamoff_regs = ov9281_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov9281_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov9281_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov9281_crl_csi_data_fmt),
+	.csi_fmts = ov9281_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov9281_flip_configurations),
+	.flip_data = ov9281_flip_configurations,
+};
+
+#endif  /* __CRLMODULE_OV9281_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_ox03a10_configuration.h b/drivers/media/i2c/crlmodule/crl_ox03a10_configuration.h
new file mode 100644
index 000000000000..6b3981522a8f
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ox03a10_configuration.h
@@ -0,0 +1,1709 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2018 Intel Corporation
+ *
+ * Author: Chang Ying <ying.chang@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OX03A10_CONFIGURATION_H_
+#define __CRLMODULE_OX03A10_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+struct crl_sensor_detect_config ox03a10_sensor_detect_regset[] = {
+	{
+		.reg = {0x300A, CRL_REG_LEN_08BIT, 0x58},
+		.width = 12,
+	},
+	{
+		.reg = {0x300B, CRL_REG_LEN_08BIT, 0x03},
+		.width = 12,
+	},
+	{
+		.reg = {0x300C, CRL_REG_LEN_08BIT, 0x41},
+		.width = 12,
+	}
+};
+
+struct crl_sensor_subdev_config ox03a10_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ox03a10 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ox03a10 pixel array",
+	}
+};
+
+struct crl_sensor_limits ox03a10_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1920,
+	.y_addr_max = 1088,
+};
+
+struct crl_subdev_rect_rep ox03a10_1920_1088_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top  = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top  = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1088,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top  = 0,
+		.in_rect.width = 1920,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top  = 0,
+		.out_rect.width = 1920,
+		.out_rect.height = 1088,
+	}
+};
+
+static struct crl_register_write_rep ox03a10_1920_1088_12DCG[] = {
+	{ 0x4d09, CRL_REG_LEN_08BIT, 0x5f },
+	{ 0x0104, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x0316, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0317, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x0323, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0325, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x0326, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x032b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0400, CRL_REG_LEN_08BIT, 0xe7 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x2b },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x0406, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x0407, CRL_REG_LEN_08BIT, 0x8f },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x0410, CRL_REG_LEN_08BIT, 0xe7 },
+	{ 0x0411, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x0414, CRL_REG_LEN_08BIT, 0x2b },
+	{ 0x0415, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x0416, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x0417, CRL_REG_LEN_08BIT, 0x8f },
+	{ 0x0418, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3002, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x3016, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3017, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3018, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3019, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301a, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301b, CRL_REG_LEN_08BIT, 0xb4 },
+	{ 0x301e, CRL_REG_LEN_08BIT, 0xb8 },
+	{ 0x301f, CRL_REG_LEN_08BIT, 0xe1 },
+	{ 0x3022, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x3023, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3024, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3028, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3029, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3706, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x370a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x370b, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3712, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x3713, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3716, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x371d, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3721, CRL_REG_LEN_08BIT, 0x1c },
+	{ 0x372c, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x3733, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x3741, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x3742, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x3746, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x374b, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3755, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x376c, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x376d, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x376f, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3770, CRL_REG_LEN_08BIT, 0x91 },
+	{ 0x3771, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3774, CRL_REG_LEN_08BIT, 0x82 },
+	{ 0x3777, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3779, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x377a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x377b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x377c, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3785, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3790, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3793, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x379c, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x37a1, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x37b3, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x37bb, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x37be, CRL_REG_LEN_08BIT, 0xe0 },
+	{ 0x37bf, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37c6, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x37c7, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x37c9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37ca, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x37cb, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37cc, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x37d1, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x37d2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37d3, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x37d5, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x37d6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37d7, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3c06, CRL_REG_LEN_08BIT, 0x29 },
+	{ 0x3c0b, CRL_REG_LEN_08BIT, 0xa8 },
+	{ 0x3c12, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x3c14, CRL_REG_LEN_08BIT, 0x81 },
+	{ 0x3c18, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3c3b, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x3c53, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3c55, CRL_REG_LEN_08BIT, 0xeb },
+	{ 0x3101, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x3192, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3193, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3206, CRL_REG_LEN_08BIT, 0xc8 },
+	{ 0x3216, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3304, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3400, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3409, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3601, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3602, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0x3603, CRL_REG_LEN_08BIT, 0xe3 },
+	{ 0x3604, CRL_REG_LEN_08BIT, 0x93 },
+	{ 0x3605, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3606, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3607, CRL_REG_LEN_08BIT, 0x4a },
+	{ 0x3608, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x3609, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x360a, CRL_REG_LEN_08BIT, 0x90 },
+	{ 0x360b, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x360e, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3610, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x3611, CRL_REG_LEN_08BIT, 0x4b },
+	{ 0x3612, CRL_REG_LEN_08BIT, 0x4e },
+	{ 0x3619, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3620, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3621, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3626, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x362c, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x362d, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x362e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x362f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3630, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3631, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3632, CRL_REG_LEN_08BIT, 0x99 },
+	{ 0x3633, CRL_REG_LEN_08BIT, 0x99 },
+	{ 0x3643, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3644, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3645, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3646, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3647, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3648, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3649, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x364a, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x364c, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x364d, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x364e, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x364f, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3652, CRL_REG_LEN_08BIT, 0xc5 },
+	{ 0x3654, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3656, CRL_REG_LEN_08BIT, 0xcf },
+	{ 0x3657, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3658, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x365a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x365b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x365c, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x365d, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3660, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3661, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3662, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3663, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3665, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x3666, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3667, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3668, CRL_REG_LEN_08BIT, 0x95 },
+	{ 0x3669, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x366f, CRL_REG_LEN_08BIT, 0xc4 },
+	{ 0x3671, CRL_REG_LEN_08BIT, 0x37 },
+	{ 0x3673, CRL_REG_LEN_08BIT, 0x6a },
+	{ 0x3678, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8f },
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x380e, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x380f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x381c, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3822, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3832, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3833, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3834, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x383d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x384c, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x384d, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x384e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x384f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3850, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3851, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3852, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3853, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3854, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3855, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3856, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3857, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x3858, CRL_REG_LEN_08BIT, 0x7c },
+	{ 0x3859, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x385a, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x385b, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x385c, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x385f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3860, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3861, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3862, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3863, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3864, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3865, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3866, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3b40, CRL_REG_LEN_08BIT, 0x3e },
+	{ 0x3b41, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b42, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3b43, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b44, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b45, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3b46, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b47, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3b84, CRL_REG_LEN_08BIT, 0x36 },
+	{ 0x3b85, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b86, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b87, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3b88, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b89, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3b8a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b8b, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3b8e, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3b8f, CRL_REG_LEN_08BIT, 0xe8 },
+	{ 0x3d85, CRL_REG_LEN_08BIT, 0x0b },
+	{ 0x3d8c, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d8d, CRL_REG_LEN_08BIT, 0x26 },
+	{ 0x3d97, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d98, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x3d99, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d9a, CRL_REG_LEN_08BIT, 0x6d },
+	{ 0x3d9b, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d9c, CRL_REG_LEN_08BIT, 0x6e },
+	{ 0x3d9d, CRL_REG_LEN_08BIT, 0x73 },
+	{ 0x3d9e, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3e07, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3f00, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4000, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x4001, CRL_REG_LEN_08BIT, 0xeb },
+	{ 0x4004, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4005, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x0d },
+	{ 0x400a, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x400b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x400f, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4010, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4011, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4016, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4017, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4018, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x401a, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x4028, CRL_REG_LEN_08BIT, 0x4f },
+	{ 0x402e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4030, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4031, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4032, CRL_REG_LEN_08BIT, 0x9e },
+	{ 0x4033, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4308, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4501, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x4502, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4507, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4580, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x4581, CRL_REG_LEN_08BIT, 0xc7 },
+	{ 0x4582, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4602, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4603, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x460a, CRL_REG_LEN_08BIT, 0x36 },
+	{ 0x460c, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4700, CRL_REG_LEN_08BIT, 0x2a },
+	{ 0x470a, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x470b, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x4800, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x480e, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4813, CRL_REG_LEN_08BIT, 0xd2 },
+	{ 0x4815, CRL_REG_LEN_08BIT, 0x2b },
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x28 },
+	{ 0x484a, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x484b, CRL_REG_LEN_08BIT, 0x67 },
+	{ 0x4850, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4861, CRL_REG_LEN_08BIT, 0xa0 },
+	{ 0x4886, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4900, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4903, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4f00, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4f01, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4f05, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5180, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5181, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5182, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5183, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5184, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5185, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5186, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5187, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a0, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a6, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c0, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c6, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5380, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5381, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x5382, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x53a0, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x53a2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x53a3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x53a4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x53a5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x53a7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5400, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5401, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x5402, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x5420, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x5422, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5423, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5424, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5425, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5427, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5480, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5481, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x5482, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x54a0, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x54a2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x54a3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x54a4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x54a5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x54a7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5800, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x5801, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5804, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5805, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x5806, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5807, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x580e, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x5812, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x5001, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0x5002, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5003, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x503e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x503f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5602, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5603, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5604, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5605, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5606, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5607, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5608, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5609, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x560a, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x560b, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x560c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x560d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x560e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x560f, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5610, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5611, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5612, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5613, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5614, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5615, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5616, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5617, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5618, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5619, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5642, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5643, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5644, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5645, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5646, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5647, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5648, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5649, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x564a, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x564b, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x564c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x564d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x564e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x564f, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5650, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5651, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5652, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5653, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5654, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5655, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5656, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5657, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5658, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5659, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5682, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5683, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5684, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5685, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5686, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5687, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5688, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5689, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x568a, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x568b, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x568c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x568d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x568e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x568f, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5690, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5691, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5692, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5693, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5694, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5695, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5696, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5697, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5698, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5699, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5709, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x5749, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x5789, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x5200, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x5202, CRL_REG_LEN_08BIT, 0x73 },
+	{ 0x5203, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x5285, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x5305, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x5082, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x50c2, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x5102, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x380e, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x380f, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x380c, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x380d, CRL_REG_LEN_08BIT, 0x78 },
+	{ 0x384c, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x384d, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x460a, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+static struct crl_register_write_rep ox03a10_1920_1088_12DCG_12VS[] = {
+	{ 0x4d09, CRL_REG_LEN_08BIT, 0x5f },
+	{ 0x0104, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x0303, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0305, CRL_REG_LEN_08BIT, 0x36 },
+	{ 0x0307, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0316, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0317, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x0323, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x0325, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x0326, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x032b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x0400, CRL_REG_LEN_08BIT, 0xe7 },
+	{ 0x0401, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x0404, CRL_REG_LEN_08BIT, 0x2b },
+	{ 0x0405, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x0406, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x0407, CRL_REG_LEN_08BIT, 0x8f },
+	{ 0x0408, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x0410, CRL_REG_LEN_08BIT, 0xe7 },
+	{ 0x0411, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x0414, CRL_REG_LEN_08BIT, 0x2b },
+	{ 0x0415, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x0416, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x0417, CRL_REG_LEN_08BIT, 0x8f },
+	{ 0x0418, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3002, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x3016, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3017, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3018, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3019, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301a, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x301b, CRL_REG_LEN_08BIT, 0xb4 },
+	{ 0x301e, CRL_REG_LEN_08BIT, 0xb8 },
+	{ 0x301f, CRL_REG_LEN_08BIT, 0xe1 },
+	{ 0x3022, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x3023, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3024, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3028, CRL_REG_LEN_08BIT, 0xf0 },
+	{ 0x3029, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3706, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x370a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x370b, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3712, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x3713, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3716, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x371d, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3721, CRL_REG_LEN_08BIT, 0x1c },
+	{ 0x372c, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x3733, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x3741, CRL_REG_LEN_08BIT, 0x44 },
+	{ 0x3742, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x3746, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x374b, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3755, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x376c, CRL_REG_LEN_08BIT, 0x15 },
+	{ 0x376d, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x376f, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3770, CRL_REG_LEN_08BIT, 0x91 },
+	{ 0x3771, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3774, CRL_REG_LEN_08BIT, 0x82 },
+	{ 0x3777, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3779, CRL_REG_LEN_08BIT, 0x22 },
+	{ 0x377a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x377b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x377c, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x3785, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3790, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3793, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x379c, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x37a1, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x37b3, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x37bb, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x37be, CRL_REG_LEN_08BIT, 0xe0 },
+	{ 0x37bf, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37c6, CRL_REG_LEN_08BIT, 0x48 },
+	{ 0x37c7, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x37c9, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37ca, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x37cb, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37cc, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x37d1, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x37d2, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37d3, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x37d5, CRL_REG_LEN_08BIT, 0x39 },
+	{ 0x37d6, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x37d7, CRL_REG_LEN_08BIT, 0xa3 },
+	{ 0x3c06, CRL_REG_LEN_08BIT, 0x29 },
+	{ 0x3c0b, CRL_REG_LEN_08BIT, 0xa8 },
+	{ 0x3c12, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x3c14, CRL_REG_LEN_08BIT, 0x81 },
+	{ 0x3c18, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3c3b, CRL_REG_LEN_08BIT, 0x38 },
+	{ 0x3c53, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3c55, CRL_REG_LEN_08BIT, 0xeb },
+	{ 0x3101, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x3192, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3193, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3206, CRL_REG_LEN_08BIT, 0xc8 },
+	{ 0x3216, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3304, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3400, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3409, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3600, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3601, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3602, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0x3603, CRL_REG_LEN_08BIT, 0xe3 },
+	{ 0x3604, CRL_REG_LEN_08BIT, 0x93 },
+	{ 0x3605, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3606, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3607, CRL_REG_LEN_08BIT, 0x4a },
+	{ 0x3608, CRL_REG_LEN_08BIT, 0x98 },
+	{ 0x3609, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x360a, CRL_REG_LEN_08BIT, 0xd0 },
+	{ 0x360b, CRL_REG_LEN_08BIT, 0x0b },
+	{ 0x360e, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3610, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x3611, CRL_REG_LEN_08BIT, 0x4b },
+	{ 0x3612, CRL_REG_LEN_08BIT, 0x4e },
+	{ 0x3619, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3620, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3621, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x3626, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x362c, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x362d, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x362e, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x362f, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x3630, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x3631, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x3632, CRL_REG_LEN_08BIT, 0x99 },
+	{ 0x3633, CRL_REG_LEN_08BIT, 0x99 },
+	{ 0x3643, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3644, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3645, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3646, CRL_REG_LEN_08BIT, 0x0f },
+	{ 0x3647, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3648, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3649, CRL_REG_LEN_08BIT, 0x11 },
+	{ 0x364a, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x364c, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x364d, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x364e, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x364f, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x3652, CRL_REG_LEN_08BIT, 0xc5 },
+	{ 0x3654, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3656, CRL_REG_LEN_08BIT, 0xcf },
+	{ 0x3657, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3658, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x365a, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x365b, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x365c, CRL_REG_LEN_08BIT, 0x17 },
+	{ 0x365d, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3660, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3661, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3662, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3663, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3665, CRL_REG_LEN_08BIT, 0x12 },
+	{ 0x3666, CRL_REG_LEN_08BIT, 0x13 },
+	{ 0x3667, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3668, CRL_REG_LEN_08BIT, 0x95 },
+	{ 0x3669, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x366f, CRL_REG_LEN_08BIT, 0xc4 },
+	{ 0x3671, CRL_REG_LEN_08BIT, 0x37 },
+	{ 0x3673, CRL_REG_LEN_08BIT, 0x6a },
+	{ 0x3678, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x3800, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3801, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3802, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3803, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3804, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3805, CRL_REG_LEN_08BIT, 0x8f },
+	{ 0x3806, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3807, CRL_REG_LEN_08BIT, 0x0c },
+	{ 0x3808, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x3809, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x380a, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x380b, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x380e, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x380f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3810, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3813, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x381c, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x3820, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3822, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x3832, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3833, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3834, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x383d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x384c, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x384d, CRL_REG_LEN_08BIT, 0x14 },
+	{ 0x384e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x384f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3850, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3851, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3852, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x3853, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3854, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3855, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3856, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x3857, CRL_REG_LEN_08BIT, 0x33 },
+	{ 0x3858, CRL_REG_LEN_08BIT, 0x7c },
+	{ 0x3859, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x385a, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x385b, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x385c, CRL_REG_LEN_08BIT, 0x32 },
+	{ 0x385f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3860, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x3861, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3862, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3863, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3864, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3865, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3866, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3b40, CRL_REG_LEN_08BIT, 0x3e },
+	{ 0x3b41, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b42, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x3b43, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b44, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b45, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3b46, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b47, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x3b84, CRL_REG_LEN_08BIT, 0x36 },
+	{ 0x3b85, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b86, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b87, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3b88, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b89, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x3b8a, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x3b8b, CRL_REG_LEN_08BIT, 0x0a },
+	{ 0x3b8e, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x3b8f, CRL_REG_LEN_08BIT, 0xe8 },
+	{ 0x3d85, CRL_REG_LEN_08BIT, 0x0b },
+	{ 0x3d8c, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d8d, CRL_REG_LEN_08BIT, 0x26 },
+	{ 0x3d97, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d98, CRL_REG_LEN_08BIT, 0x24 },
+	{ 0x3d99, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d9a, CRL_REG_LEN_08BIT, 0x6d },
+	{ 0x3d9b, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x3d9c, CRL_REG_LEN_08BIT, 0x6e },
+	{ 0x3d9d, CRL_REG_LEN_08BIT, 0x73 },
+	{ 0x3d9e, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x3e07, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x3f00, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4000, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x4001, CRL_REG_LEN_08BIT, 0xeb },
+	{ 0x4004, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4005, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4008, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x4009, CRL_REG_LEN_08BIT, 0x0d },
+	{ 0x400a, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x400b, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x400f, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4010, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4011, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4016, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4017, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x4018, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x401a, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x4028, CRL_REG_LEN_08BIT, 0x4f },
+	{ 0x402e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x402f, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4030, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4031, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4032, CRL_REG_LEN_08BIT, 0x9e },
+	{ 0x4033, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4308, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4501, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x4502, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4507, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4580, CRL_REG_LEN_08BIT, 0xf8 },
+	{ 0x4581, CRL_REG_LEN_08BIT, 0xc7 },
+	{ 0x4582, CRL_REG_LEN_08BIT, 0x07 },
+	{ 0x4602, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4603, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x460a, CRL_REG_LEN_08BIT, 0x36 },
+	{ 0x460c, CRL_REG_LEN_08BIT, 0x60 },
+	{ 0x4700, CRL_REG_LEN_08BIT, 0x2a },
+	{ 0x470a, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x470b, CRL_REG_LEN_08BIT, 0x88 },
+	{ 0x4800, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x480e, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x4813, CRL_REG_LEN_08BIT, 0xd2 },
+	{ 0x4815, CRL_REG_LEN_08BIT, 0x2b },
+	{ 0x4837, CRL_REG_LEN_08BIT, 0x18 },
+	{ 0x484a, CRL_REG_LEN_08BIT, 0x3f },
+	{ 0x484b, CRL_REG_LEN_08BIT, 0x67 },
+	{ 0x4850, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x4861, CRL_REG_LEN_08BIT, 0xa0 },
+	{ 0x4886, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x4900, CRL_REG_LEN_08BIT, 0x08 },
+	{ 0x4903, CRL_REG_LEN_08BIT, 0x80 },
+	{ 0x4f00, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4f01, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x4f05, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5180, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5181, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5182, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5183, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5184, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5185, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5186, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5187, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a0, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51a6, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51a7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c0, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c1, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x51c6, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x51c7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5380, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5381, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x5382, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x53a0, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x53a2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x53a3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x53a4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x53a5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x53a7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5400, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5401, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x5402, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x5420, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x5422, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5423, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5424, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x5425, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5427, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5480, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5481, CRL_REG_LEN_08BIT, 0x94 },
+	{ 0x5482, CRL_REG_LEN_08BIT, 0x2e },
+	{ 0x54a0, CRL_REG_LEN_08BIT, 0x41 },
+	{ 0x54a2, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x54a3, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x54a4, CRL_REG_LEN_08BIT, 0x04 },
+	{ 0x54a5, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x54a7, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5800, CRL_REG_LEN_08BIT, 0x31 },
+	{ 0x5801, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5804, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5805, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x5806, CRL_REG_LEN_08BIT, 0x01 },
+	{ 0x5807, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x580e, CRL_REG_LEN_08BIT, 0x10 },
+	{ 0x5812, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x5000, CRL_REG_LEN_08BIT, 0x89 },
+	{ 0x5001, CRL_REG_LEN_08BIT, 0x42 },
+	{ 0x5002, CRL_REG_LEN_08BIT, 0x19 },
+	{ 0x5003, CRL_REG_LEN_08BIT, 0x16 },
+	{ 0x503e, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x503f, CRL_REG_LEN_08BIT, 0x00 },
+	{ 0x5602, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5603, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5604, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5605, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5606, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5607, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5608, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5609, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x560a, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x560b, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x560c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x560d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x560e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x560f, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5610, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5611, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5612, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5613, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5614, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5615, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5616, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5617, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5618, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5619, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5642, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5643, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5644, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5645, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5646, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5647, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5648, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5649, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x564a, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x564b, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x564c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x564d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x564e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x564f, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5650, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5651, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5652, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5653, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5654, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5655, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5656, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5657, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5658, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5659, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5682, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5683, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5684, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5685, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5686, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5687, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5688, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5689, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x568a, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x568b, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x568c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x568d, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x568e, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x568f, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5690, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5691, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5692, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5693, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5694, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5695, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5696, CRL_REG_LEN_08BIT, 0x02 },
+	{ 0x5697, CRL_REG_LEN_08BIT, 0x58 },
+	{ 0x5698, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x5699, CRL_REG_LEN_08BIT, 0x20 },
+	{ 0x5709, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x5749, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x5789, CRL_REG_LEN_08BIT, 0x0e },
+	{ 0x5200, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x5201, CRL_REG_LEN_08BIT, 0x70 },
+	{ 0x5202, CRL_REG_LEN_08BIT, 0x73 },
+	{ 0x5203, CRL_REG_LEN_08BIT, 0xff },
+	{ 0x5205, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x5285, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x5305, CRL_REG_LEN_08BIT, 0x6c },
+	{ 0x5082, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x50c2, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x5102, CRL_REG_LEN_08BIT, 0xb0 },
+	{ 0x380e, CRL_REG_LEN_08BIT, 0x05 },
+	{ 0x380f, CRL_REG_LEN_08BIT, 0x34 },
+	{ 0x380c, CRL_REG_LEN_08BIT, 0x06 },
+	{ 0x380d, CRL_REG_LEN_08BIT, 0xcc },
+	{ 0x384c, CRL_REG_LEN_08BIT, 0x03 },
+	{ 0x384d, CRL_REG_LEN_08BIT, 0xc0 },
+	{ 0x460c, CRL_REG_LEN_08BIT, 0x40 },
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x01 },
+};
+
+struct crl_ctrl_data_pair ox03a10_ctrl_data_modes[] = {
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 0,
+	},
+	{
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.data = 1,
+	}
+};
+
+struct crl_mode_rep ox03a10_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ox03a10_1920_1088_rects),
+		.sd_rects = ox03a10_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.comp_items = 1,
+		.ctrl_data = &ox03a10_ctrl_data_modes[0],
+		.mode_regs_items = ARRAY_SIZE(ox03a10_1920_1088_12DCG),
+		.mode_regs = ox03a10_1920_1088_12DCG,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ox03a10_1920_1088_rects),
+		.sd_rects = ox03a10_1920_1088_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1088,
+		.comp_items = 1,
+		.ctrl_data = &ox03a10_ctrl_data_modes[1],
+		.mode_regs_items = ARRAY_SIZE(ox03a10_1920_1088_12DCG_12VS),
+		.mode_regs = ox03a10_1920_1088_12DCG_12VS,
+	},
+};
+
+static struct crl_arithmetic_ops bits_5_0[] = {
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0x3F,
+	},
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	}
+};
+
+static struct crl_arithmetic_ops bits_10_6[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 6,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0x1F,
+	}
+};
+
+static struct crl_arithmetic_ops bits_13_10[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 10,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0xF,
+	}
+};
+
+static struct crl_arithmetic_ops bits_9_2[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 2,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0xFF,
+	}
+};
+
+static struct crl_arithmetic_ops bits_1_0[] = {
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0x3,
+	},
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 6,
+	}
+};
+
+static struct crl_arithmetic_ops bits_15_8[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0xff,
+	}
+};
+
+static struct crl_arithmetic_ops bits_7_0[] = {
+	{
+		.op = CRL_BITWISE_AND,
+		.operand.entity_val = 0xff,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_hcg_real_gain[] = {
+	{
+		.address = 0x3508,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_10_6),
+		.ops = bits_10_6,
+	},
+	{
+		.address = 0x3509,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_5_0),
+		.ops = bits_5_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_hcg_digital_gain[] = {
+	{
+		.address = 0x350a,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_13_10),
+		.ops = bits_13_10,
+	},
+	{
+		.address = 0x350b,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_9_2),
+		.ops = bits_9_2,
+	},
+	{
+		.address = 0x350c,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_1_0),
+		.ops = bits_1_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_lcg_real_gain[] = {
+	{
+		.address = 0x3548,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_10_6),
+		.ops = bits_10_6,
+	},
+	{
+		.address = 0x3549,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_5_0),
+		.ops = bits_5_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_lcg_digital_gain[] = {
+	{
+		.address = 0x354a,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_13_10),
+		.ops = bits_13_10,
+	},
+	{
+		.address = 0x354b,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_9_2),
+		.ops = bits_9_2,
+	},
+	{
+		.address = 0x354c,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_1_0),
+		.ops = bits_1_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_dcg_exposure_coarse[] = {
+	{
+		.address = 0x3501,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_15_8),
+		.ops = bits_15_8,
+	},
+	{
+		.address = 0x3502,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_7_0),
+		.ops = bits_7_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_vs_real_gain[] = {
+	{
+		.address = 0x3588,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_10_6),
+		.ops = bits_10_6,
+	},
+	{
+		.address = 0x3589,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_5_0),
+		.ops = bits_5_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_vs_digital_gain[] = {
+	{
+		.address = 0x358a,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_13_10),
+		.ops = bits_13_10,
+	},
+	{
+		.address = 0x358b,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_9_2),
+		.ops = bits_9_2,
+	},
+	{
+		.address = 0x358c,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_1_0),
+		.ops = bits_1_0,
+	}
+};
+
+static struct crl_dynamic_register_access ox03a10_vs_exposure_coarse[] = {
+	{
+		.address = 0x3581,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_15_8),
+		.ops = bits_15_8,
+	},
+	{
+		.address = 0x3582,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(bits_7_0),
+		.ops = bits_7_0,
+	}
+};
+
+static struct crl_arithmetic_ops ox03a10_mirror_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	},
+	{
+		.op = CRL_BITWISE_OR,
+		.operand.entity_val = 0x20,
+	},
+};
+
+static struct crl_dynamic_register_access ox03a10_h_flip_regs[] = {
+	{
+		.address = 0x3821,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ox03a10_mirror_ops),
+		.ops = ox03a10_mirror_ops,
+		.mask = 0x24,
+	},
+	{
+		.address = 0x3811,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x1,
+	},
+};
+
+/* keep GRBG no change during flip, for tuning file handle GRBG only */
+static struct crl_flip_data ox03a10_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+};
+
+struct crl_v4l2_ctrl ox03a10_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "DCG exposure",
+		.ctrl_id =  V4L2_CID_EXPOSURE,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1,
+		.data.std_data.max = 1280,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_dcg_exposure_coarse),
+		.regs = ox03a10_dcg_exposure_coarse,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "VS exposure",
+		.ctrl_id =  CRL_CID_EXPOSURE_SHS1,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1,
+		.data.std_data.max = 1280,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_vs_exposure_coarse),
+		.regs = ox03a10_vs_exposure_coarse,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "HCG digital gain",
+		.ctrl_id = V4L2_CID_GAIN,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x400,
+		.data.std_data.max = 0x3FFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x400,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_hcg_digital_gain),
+		.regs = ox03a10_hcg_digital_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "HCG analog gain",
+		.ctrl_id =  V4L2_CID_ANALOGUE_GAIN,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x40,
+		.data.std_data.max = 0x400,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_hcg_real_gain),
+		.regs = ox03a10_hcg_real_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "HCG digital gain",
+		.ctrl_id = V4L2_CID_DIGITAL_GAIN,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x400,
+		.data.std_data.max = 0x3FFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x400,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_hcg_digital_gain),
+		.regs = ox03a10_hcg_digital_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "LCG analog gain",
+		.ctrl_id = CRL_CID_ANALOG_GAIN_S,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x40,
+		.data.std_data.max = 0x400,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_lcg_real_gain),
+		.regs = ox03a10_lcg_real_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "LCG digital gain",
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_S,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x400,
+		.data.std_data.max = 0x3FFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x400,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_lcg_digital_gain),
+		.regs = ox03a10_lcg_digital_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "LCG analog gain",
+		.ctrl_id = CRL_CID_ANALOG_GAIN_L,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x40,
+		.data.std_data.max = 0x400,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_lcg_real_gain),
+		.regs = ox03a10_lcg_real_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "LCG digital gain",
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_L,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x400,
+		.data.std_data.max = 0x3FFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x400,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_lcg_digital_gain),
+		.regs = ox03a10_lcg_digital_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "VS analog gain",
+		.ctrl_id =  CRL_CID_ANALOG_GAIN_VS,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x40,
+		.data.std_data.max = 0x400,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x40,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_vs_real_gain),
+		.regs = ox03a10_vs_real_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "VS digital gain",
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_VS,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0x400,
+		.data.std_data.max = 0x3FFF,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x400,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = ARRAY_SIZE(ox03a10_vs_digital_gain),
+		.regs = ox03a10_vs_digital_gain,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.name = "CRL_CID_EXPOSURE_MODE",
+		.ctrl_id = CRL_CID_EXPOSURE_MODE,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1920,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 2700,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_llp_regs),
+		.regs = ar0231at_llp_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1088,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1480,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ar0231at_fll_regs),
+		.regs = ar0231at_fll_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ox03a10_h_flip_regs),
+		.regs = ox03a10_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+};
+
+struct crl_csi_data_fmt ox03a10_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+};
+
+struct crl_pll_configuration ox03a10_pll_configurations[] = {
+	{
+		.input_clk = 27000000,
+		.op_sys_clk = 108000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 108000000,
+		.pixel_rate_pa = 108000000, /* pixel_rate = op_sys_clk*2 *csi_lanes/bitsperpixel */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+};
+
+static struct crl_register_write_rep ox03a10_streamoff_regs[] = {
+	{ 0x0100, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_arithmetic_ops ox03a10_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops ox03a10_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc ox03a10_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(ox03a10_frame_desc_width_ops),
+			.ops = ox03a10_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(ox03a10_frame_desc_height_ops),
+			.ops = ox03a10_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(ox03a10_frame_desc_width_ops),
+			.ops = ox03a10_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(ox03a10_frame_desc_height_ops),
+			.ops = ox03a10_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 1,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+struct crl_sensor_configuration ox03a10_crl_configuration = {
+	.pll_config_items = ARRAY_SIZE(ox03a10_pll_configurations),
+	.pll_configs = ox03a10_pll_configurations,
+
+	.id_reg_items = ARRAY_SIZE(ox03a10_sensor_detect_regset),
+	.id_regs = ox03a10_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ox03a10_sensor_subdevs),
+	.subdevs = ox03a10_sensor_subdevs,
+
+	.sensor_limits = &ox03a10_sensor_limits,
+
+	.modes_items = ARRAY_SIZE(ox03a10_modes),
+	.modes = ox03a10_modes,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ox03a10_v4l2_ctrls),
+	.v4l2_ctrl_bank = ox03a10_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ox03a10_crl_csi_data_fmt),
+	.csi_fmts = ox03a10_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ox03a10_flip_configurations),
+	.flip_data = ox03a10_flip_configurations,
+
+	.streamoff_regs_items = ARRAY_SIZE(ox03a10_streamoff_regs),
+	.streamoff_regs = ox03a10_streamoff_regs,
+
+	.frame_desc_entries = ARRAY_SIZE(ox03a10_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = ox03a10_frame_desc,
+};
+
+#endif /* __CRLMODULE_OX03A10_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crl_pixter_stub_configuration.h b/drivers/media/i2c/crlmodule/crl_pixter_stub_configuration.h
new file mode 100644
index 000000000000..09f03193ca22
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_pixter_stub_configuration.h
@@ -0,0 +1,1386 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation
+ *
+ * Author: Wang, Zaikuo <zaikuo.wang@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_PIXTER_STUB_CONFIGURATION_H_
+#define __CRLMODULE_PIXTER_STUB_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+static struct crl_pll_configuration pixter_stub_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 8,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 20,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 24,
+		.pixel_rate_csi = 800000000,
+		.pixel_rate_pa = 800000000,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+};
+
+/* resolutions for linux pss with yuv/rgb pass-through */
+static struct crl_subdev_rect_rep pixter_stub_vga_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 640, 480 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_720p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 1280, 720 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_1080p_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 1920, 1080 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_4p5_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 2816, 1600 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_4k_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 3840, 2160 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_480i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 720, 240 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_576i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 720, 288 },
+	},
+};
+
+static struct crl_subdev_rect_rep pixter_stub_1080i_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 1920, 540 },
+	},
+};
+
+/* vga for linux pss with imx135/imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_vga_pad1_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 672, 512 },
+	},
+};
+
+/* vga for linux pss with imx135/imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_vga_pad2_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 768, 576 },
+	},
+};
+
+
+/* 720p for linux pss with imx135/imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_720p_pad1_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 1312, 768 },
+	},
+};
+
+/* 720p for linux pss with imx135/imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_720p_pad2_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 1312, 984 },
+	},
+};
+
+
+/* 1080p for linux pss with imx135 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_1080p_pad1_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 1952, 1120 },
+	},
+};
+
+/* 1080p for linux pss with imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_1080p_pad2_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 2048, 1128 },
+	},
+};
+
+
+/* 1080p for linux pss with imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_1080p_pad3_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 2048, 1536 },
+	},
+};
+
+
+/* 2816x1600 for linux pss with imx135/imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_4p5_pad1_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 2848, 1632 },
+	},
+};
+/* 2816x1600 for linux pss with imx135/imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_4p5_pad2_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 2848, 2136 },
+	},
+};
+
+
+/* 4k for linux pss with imx135 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_4k_pad1_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 3872, 2208 },
+	},
+};
+
+/* 4k for linux pss with imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_4k_pad2_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4064, 2288 },
+	},
+};
+
+/* 4k for linux pss with imx477 input simulation */
+static struct crl_subdev_rect_rep pixter_stub_4k_pad3_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4032, 2288 },
+	},
+};
+
+/* 4096x3072 for linux pss with imx135/imx477 full input simulation */
+static struct crl_subdev_rect_rep pixter_stub_full_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.in_rect = { 0, 0, 4096, 3072 },
+		.out_rect = { 0, 0, 4096, 3072 },
+	},
+};
+
+
+static struct crl_mode_rep pixter_stub_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_vga_rects),
+		.sd_rects = pixter_stub_vga_rects,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_720p_rects),
+		.sd_rects = pixter_stub_720p_rects,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_1080p_rects),
+		.sd_rects = pixter_stub_1080p_rects,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 1080,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4p5_rects),
+		.sd_rects = pixter_stub_4p5_rects,
+		.scale_m = 1,
+		.width = 2816,
+		.height = 1600,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4k_rects),
+		.sd_rects = pixter_stub_4k_rects,
+		.scale_m = 1,
+		.width = 3840,
+		.height = 2160,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_vga_pad1_rects),
+		.sd_rects = pixter_stub_vga_pad1_rects,
+		.scale_m = 1,
+		.width = 672,
+		.height = 512,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_vga_pad2_rects),
+		.sd_rects = pixter_stub_vga_pad2_rects,
+		.scale_m = 1,
+		.width = 768,
+		.height = 576,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_720p_pad1_rects),
+		.sd_rects = pixter_stub_720p_pad1_rects,
+		.scale_m = 1,
+		.width = 1312,
+		.height = 768,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_720p_pad2_rects),
+		.sd_rects = pixter_stub_720p_pad2_rects,
+		.scale_m = 1,
+		.width = 1312,
+		.height = 984,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_1080p_pad1_rects),
+		.sd_rects = pixter_stub_1080p_pad1_rects,
+		.scale_m = 1,
+		.width = 1952,
+		.height = 1120,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_1080p_pad2_rects),
+		.sd_rects = pixter_stub_1080p_pad2_rects,
+		.scale_m = 1,
+		.width = 2048,
+		.height = 1128,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_1080p_pad3_rects),
+		.sd_rects = pixter_stub_1080p_pad3_rects,
+		.scale_m = 1,
+		.width = 2048,
+		.height = 1536,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4p5_pad1_rects),
+		.sd_rects = pixter_stub_4p5_pad1_rects,
+		.scale_m = 1,
+		.width = 2848,
+		.height = 1632,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4p5_pad2_rects),
+		.sd_rects = pixter_stub_4p5_pad2_rects,
+		.scale_m = 1,
+		.width = 2848,
+		.height = 2136,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4k_pad1_rects),
+		.sd_rects = pixter_stub_4k_pad1_rects,
+		.scale_m = 1,
+		.width = 3872,
+		.height = 2208,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4k_pad2_rects),
+		.sd_rects = pixter_stub_4k_pad2_rects,
+		.scale_m = 1,
+		.width = 4064,
+		.height = 2288,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_4k_pad3_rects),
+		.sd_rects = pixter_stub_4k_pad3_rects,
+		.scale_m = 1,
+		.width = 4032,
+		.height = 2288,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_full_rects),
+		.sd_rects = pixter_stub_full_rects,
+		.scale_m = 1,
+		.width = 4096,
+		.height = 3072,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_480i_rects),
+		.sd_rects = pixter_stub_480i_rects,
+		.scale_m = 1,
+		.width = 720,
+		.height = 240,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_576i_rects),
+		.sd_rects = pixter_stub_576i_rects,
+		.scale_m = 1,
+		.width = 720,
+		.height = 288,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+				.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(pixter_stub_1080i_rects),
+		.sd_rects = pixter_stub_1080i_rects,
+		.scale_m = 1,
+		.width = 1920,
+		.height = 540,
+		.min_llp = 6024,
+		.min_fll = 4096,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = 0,
+		.mode_regs = NULL,
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stub scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stub pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_b_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubB scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubB pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_c_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubC scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubC pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_d_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubD scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubD pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_e_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubE scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubE pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_f_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubF scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubF pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_g_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubG scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubG pixel array",
+	},
+};
+
+static struct crl_sensor_subdev_config pixter_stub_h_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_SCALER,
+		.name = "pixter_stubH scaler",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "pixter_stubH pixel array",
+	},
+};
+
+static struct crl_sensor_limits pixter_stub_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 4096,
+	.y_addr_max = 3072,
+	.min_frame_length_lines = 160,
+	.max_frame_length_lines = 8192,
+	.min_line_length_pixels = 6024,
+	.max_line_length_pixels = 8192,
+	.scaler_m_min = 1,
+	.scaler_m_max = 1,
+	.scaler_n_min = 1,
+	.scaler_n_max = 1,
+	.min_even_inc = 1,
+	.max_even_inc = 1,
+	.min_odd_inc = 1,
+	.max_odd_inc = 1,
+};
+
+/* no flip for pixter stub as no real sensor HW */
+static struct crl_flip_data pixter_stub_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+};
+
+static struct crl_csi_data_fmt pixter_stub_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 8,
+	},
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+	},
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+	},
+	{
+		.code = MEDIA_BUS_FMT_RGB565_1X16,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+	},
+	{
+		.code = MEDIA_BUS_FMT_RGB888_1X24,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 24,
+	},
+	{
+		.code = MEDIA_BUS_FMT_YUYV10_1X20,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 20,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG10_1X10,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 10,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+	},
+};
+
+static struct crl_v4l2_ctrl pixter_stub_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 800000000,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_SCALER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 800000000,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_ANALOGUE_GAIN,
+		.name = "V4L2_CID_ANALOGUE_GAIN",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_EXPOSURE,
+		.name = "V4L2_CID_EXPOSURE",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.name = "CRL_CID_EXPOSURE_SHS1",
+		.data.std_data.min = 4,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x5500,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS2,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.name = "CRL_CID_EXPOSURE_SHS2",
+		.data.std_data.min = 4,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x500,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS3,
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.name = "CRL_CID_EXPOSURE_SHS3",
+		.data.std_data.min = 4,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0x1000,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame length lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 4130,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 6024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 6024,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_GAIN,
+		.name = "Digital Gain",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4095,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1024,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_L,
+		.name = "CRL_CID_ANALOG_GAIN_L",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_S,
+		.name = "CRL_CID_ANALOG_GAIN_S",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_VS,
+		.name = "CRL_CID_ANALOG_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_L,
+		.name = "CRL_CID_DIGITAL_GAIN_L",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 64,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_S,
+		.name = "CRL_CID_DIGITAL_GAIN_S",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 64,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_VS,
+		.name = "CRL_CID_DIGITAL_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = 0x978,
+		.data.std_data.step = 1,
+		.data.std_data.def = 64,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops pixter_stub_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops pixter_stub_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc pixter_stub_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_width_ops),
+			.ops = pixter_stub_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_height_ops),
+			.ops = pixter_stub_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_width_ops),
+			.ops = pixter_stub_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_height_ops),
+			.ops = pixter_stub_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 1,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_width_ops),
+			.ops = pixter_stub_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_height_ops),
+			.ops = pixter_stub_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 2,
+		.csi2_data_type.entity_val = 0x12,
+	},
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_width_ops),
+			.ops = pixter_stub_frame_desc_width_ops,
+		},
+		.height = {
+			.ops_items = ARRAY_SIZE(pixter_stub_frame_desc_height_ops),
+			.ops = pixter_stub_frame_desc_height_ops,
+		},
+		.csi2_channel.entity_val = 3,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+#define DEFINE_PIXTER_CRL_CONFIGURATION(port) \
+static struct crl_sensor_configuration pixter_##port##_crl_configuration = { \
+	.powerup_regs_items = 0, \
+	.powerup_regs = NULL, \
+\
+	.poweroff_regs_items = 0, \
+	.poweroff_regs = NULL, \
+\
+	.id_reg_items = 0, \
+	.id_regs = NULL, \
+\
+	.subdev_items = ARRAY_SIZE(pixter_##port##_sensor_subdevs), \
+	.subdevs = pixter_##port##_sensor_subdevs, \
+\
+	.sensor_limits = &pixter_stub_sensor_limits, \
+\
+	.pll_config_items = ARRAY_SIZE(pixter_stub_pll_configurations), \
+	.pll_configs = pixter_stub_pll_configurations, \
+\
+	.modes_items = ARRAY_SIZE(pixter_stub_modes), \
+	.modes = pixter_stub_modes, \
+\
+	.streamon_regs_items = 0, \
+	.streamon_regs = NULL, \
+\
+	.streamoff_regs_items = 0, \
+	.streamoff_regs = NULL, \
+\
+	.v4l2_ctrls_items = ARRAY_SIZE(pixter_stub_v4l2_ctrls), \
+	.v4l2_ctrl_bank = pixter_stub_v4l2_ctrls, \
+\
+	.flip_items = ARRAY_SIZE(pixter_stub_flip_configurations), \
+	.flip_data = pixter_stub_flip_configurations, \
+\
+	.frame_desc_entries = ARRAY_SIZE(pixter_stub_frame_desc), \
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2, \
+	.frame_desc = pixter_stub_frame_desc, \
+\
+	.csi_fmts_items = ARRAY_SIZE(pixter_stub_crl_csi_data_fmt), \
+	.csi_fmts = pixter_stub_crl_csi_data_fmt, \
+}
+DEFINE_PIXTER_CRL_CONFIGURATION(stub);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_b);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_c);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_d);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_e);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_f);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_g);
+DEFINE_PIXTER_CRL_CONFIGURATION(stub_h);
+
+
+#endif  /* __CRLMODULE_PIXTER_STUB_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crlmodule-core.c b/drivers/media/i2c/crlmodule/crlmodule-core.c
new file mode 100644
index 000000000000..7d63252c607c
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-core.c
@@ -0,0 +1,3519 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+#include <linux/version.h>
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+
+#include <media/v4l2-async.h>
+#include <media/v4l2-device.h>
+
+#include <uapi/linux/media-bus-format.h>
+
+#include "crlmodule.h"
+#include "crlmodule-nvm.h"
+#include "crlmodule-regs.h"
+#include "crlmodule-msrlist.h"
+
+static void crlmodule_update_current_mode(struct crl_sensor *sensor);
+
+static int __crlmodule_get_variable_ref(struct crl_sensor *sensor,
+					enum crl_member_data_reference_ids ref,
+					u32 *val)
+{
+	switch (ref) {
+	case CRL_VAR_REF_OUTPUT_WIDTH:
+		*val = sensor->src->crop[CRL_PAD_SRC].width;
+		break;
+	case CRL_VAR_REF_OUTPUT_HEIGHT:
+		*val = sensor->src->crop[CRL_PAD_SRC].height;
+		break;
+	case CRL_VAR_REF_BITSPERPIXEL:
+		*val = sensor->sensor_ds->csi_fmts[
+				   sensor->fmt_index].bits_per_pixel;
+		break;
+	default:
+		return -EINVAL;
+	};
+
+	return 0;
+}
+
+/*
+ * Get the data format index from the configuration definition data
+ */
+static int __crlmodule_get_data_fmt_index(struct crl_sensor *sensor,
+					  u32 code)
+{
+	unsigned int i;
+
+	for (i = 0; i < sensor->sensor_ds->csi_fmts_items; i++) {
+		if (sensor->sensor_ds->csi_fmts[i].code == code)
+			return i;
+	}
+
+	return -EINVAL;
+}
+
+/*
+ * Find the index of the v4l2 ctrl pointer from the array of v4l2 ctrls
+ * maintained by the CRL module based on the ctrl id.
+ */
+static int __crlmodule_get_crl_ctrl_index(struct crl_sensor *sensor,
+					  u32 id, unsigned int *index)
+{
+	unsigned int i;
+
+	for (i = 0; i < sensor->sensor_ds->v4l2_ctrls_items; i++)
+		if (sensor->v4l2_ctrl_bank[i].ctrl_id == id)
+			break;
+
+	if (i >= sensor->sensor_ds->v4l2_ctrls_items)
+		return -EINVAL;
+
+	*index = i;
+	return 0;
+}
+
+/*
+ * Finds the value of a specific v4l2 ctrl based on the ctrl-id
+ */
+static int __crlmodule_get_ctrl_value(struct crl_sensor *sensor,
+				      u32 id, u32 *val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct v4l2_ctrl *ctrl;
+	unsigned int i;
+	int ret;
+
+	ret = __crlmodule_get_crl_ctrl_index(sensor, id, &i);
+	if (ret)
+		return ret;
+
+	/* If no corresponding v4l2 ctrl created, return */
+	if (!sensor->v4l2_ctrl_bank[i].ctrl) {
+		dev_dbg(&client->dev,
+			"%s ctrl_id: 0x%x desc: %s not ready\n", __func__, id,
+			sensor->v4l2_ctrl_bank[i].name);
+		return -ENODATA;
+	}
+
+	ctrl = sensor->v4l2_ctrl_bank[i].ctrl;
+	switch (sensor->v4l2_ctrl_bank[i].type) {
+	case CRL_V4L2_CTRL_TYPE_MENU_INT:
+		*val = ctrl->qmenu_int[ctrl->val];
+		break;
+	case CRL_V4L2_CTRL_TYPE_INTEGER:
+	default:
+		*val = ctrl->val;
+	}
+
+	dev_dbg(&client->dev, "%s ctrl_id: 0x%x desc: %s val: %d\n",
+			__func__, id,
+			sensor->v4l2_ctrl_bank[i].name, *val);
+	return 0;
+}
+
+/*
+ * Finds the v4l2 ctrl based on the control id
+ */
+static struct v4l2_ctrl *__crlmodule_get_v4l2_ctrl(struct crl_sensor *sensor,
+						u32 id)
+{
+	unsigned int i;
+
+	if (__crlmodule_get_crl_ctrl_index(sensor, id, &i))
+		return NULL;
+
+	return sensor->v4l2_ctrl_bank[i].ctrl;
+}
+
+/*
+ * Grab / Release controls based on the ctrl update context
+ */
+static void __crlmodule_grab_v4l2_ctrl(struct crl_sensor *sensor,
+				enum crl_v4l2ctrl_update_context ctxt,
+				bool action)
+{
+	struct crl_v4l2_ctrl *crl_ctrl;
+	unsigned int i;
+
+	for (i = 0; i < sensor->sensor_ds->v4l2_ctrls_items; i++) {
+		crl_ctrl = &sensor->v4l2_ctrl_bank[i];
+
+		if (crl_ctrl->context == ctxt)
+			v4l2_ctrl_grab(crl_ctrl->ctrl, action);
+	}
+}
+
+/*
+ * Checks if the v4l2 ctrl sepecific data is satisfied in the mode and PLL
+ * selection logic.
+ */
+static bool __crlmodule_compare_ctrl_specific_data(
+			struct crl_sensor *sensor,
+			unsigned int items,
+			struct crl_ctrl_data_pair *ctrl_val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int i;
+	u32 val;
+	int ret;
+
+	/* Go through all the controls associated with this config */
+	for (i = 0; i < items; i++) {
+		/* Get the value set for the control */
+		ret = __crlmodule_get_ctrl_value(sensor, ctrl_val[i].ctrl_id,
+						 &val);
+		if (ret) {
+			dev_err(&client->dev, "%s ctrl_id: 0x%x not found\n",
+				__func__, ctrl_val[i].ctrl_id);
+			return false;
+		}
+
+		/* Compare the value from the sensor definition file config */
+		if (val != ctrl_val[i].data) {
+			dev_dbg(&client->dev,
+				"%s ctrl_id: 0x%x value not match %d != %d\n",
+				__func__, ctrl_val[i].ctrl_id, val,
+				ctrl_val[i].data);
+			return false;
+		}
+	}
+
+	dev_dbg(&client->dev, "%s success\n",  __func__);
+	return true;
+}
+
+/*
+ * Finds the correct PLL settings index based on the parameters
+ */
+static int __crlmodule_update_pll_index(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_pll_configuration *pll_config;
+	const struct crl_csi_data_fmt *fmts =
+		&sensor->sensor_ds->csi_fmts[sensor->fmt_index];
+	u32 link_freq;
+	unsigned int i;
+
+	link_freq = sensor->link_freq->qmenu_int[sensor->link_freq->val];
+
+	dev_dbg(&client->dev, "%s PLL Items: %d link_freq: %d\n", __func__,
+			sensor->sensor_ds->pll_config_items, link_freq);
+
+	for (i = 0; i < sensor->sensor_ds->pll_config_items; i++) {
+		pll_config = &sensor->sensor_ds->pll_configs[i];
+
+		if (pll_config->op_sys_clk != link_freq)
+			continue;
+
+		if (pll_config->input_clk != sensor->platform_data->ext_clk)
+			continue;
+
+		/* if pll_config->csi_lanes == 0, lanes do not matter */
+		if (pll_config->csi_lanes)
+			if (sensor->platform_data->lanes !=
+					pll_config->csi_lanes)
+				continue;
+
+		/* PLL config must match to bpps*/
+		if (fmts->bits_per_pixel != pll_config->bitsperpixel)
+			continue;
+
+		/* Check if there are any dynamic compare items */
+		if (sensor->ext_ctrl_impacts_pll_selection &&
+		    !__crlmodule_compare_ctrl_specific_data(sensor,
+						pll_config->comp_items,
+						pll_config->ctrl_data))
+			continue;
+
+		/* Found PLL index */
+		dev_dbg(&client->dev, "%s Found PLL index: %d for freq: %d\n",
+				__func__, i, link_freq);
+
+		sensor->pll_index = i;
+
+		/* Update the control values for pixelrate_pa and csi */
+		__v4l2_ctrl_s_ctrl_int64(sensor->pixel_rate_pa,
+				pll_config->pixel_rate_pa);
+		__v4l2_ctrl_s_ctrl_int64(sensor->pixel_rate_csi,
+				pll_config->pixel_rate_csi);
+		return 0;
+	}
+
+	dev_err(&client->dev, "%s no configuration found for freq: %d\n",
+			__func__, link_freq);
+	return -EINVAL;
+}
+
+/*
+ * Perform the action for the dependency control
+ */
+static void __crlmodule_dep_ctrl_perform_action(
+					struct crl_sensor *sensor,
+					struct crl_dep_ctrl_provision *prov,
+					u32 *val, u32 *dep_val)
+{
+	enum crl_dep_ctrl_condition cond;
+	unsigned int i;
+	u32 temp;
+
+	if (*val > *dep_val)
+		cond = CRL_DEP_CTRL_CONDITION_GREATER;
+	else if (*val < *dep_val)
+		cond = CRL_DEP_CTRL_CONDITION_LESSER;
+	else
+		cond = CRL_DEP_CTRL_CONDITION_EQUAL;
+
+	for (i = 0; i < prov->action_items; i++) {
+		if (prov->action[i].cond == cond)
+			break;
+	}
+
+	/* No handler found-. Return completed */
+	if (i >= prov->action_items)
+		return;
+
+	/* if this is dependency control, switch val and dep val */
+	if (prov->action_type == CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL) {
+		temp = *val;
+		*val = *dep_val;
+		*dep_val = temp;
+	}
+
+	switch (prov->action[i].action) {
+	case CRL_DEP_CTRL_CONDITION_ADD:
+		*val = *dep_val + prov->action[i].action_value;
+		break;
+	case CRL_DEP_CTRL_CONDITION_SUBTRACT:
+		*val = *dep_val - prov->action[i].action_value;
+		break;
+	case CRL_DEP_CTRL_CONDITION_MULTIPLY:
+		*val = *dep_val * prov->action[i].action_value;
+		break;
+	case CRL_DEP_CTRL_CONDITION_DIVIDE:
+		*val = *dep_val / prov->action[i].action_value;
+		break;
+	}
+
+	/* if this is dependency control, switch val and dep val back*/
+	if (prov->action_type == CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL) {
+		temp = *val;
+		*val = *dep_val;
+		*dep_val = temp;
+	}
+
+	return;
+}
+
+/*
+ * Parse the dynamic entity based on the Operand type
+ */
+static int __crlmodule_parse_dynamic_entity(struct crl_sensor *sensor,
+					struct crl_dynamic_entity entity,
+					u32 *val)
+{
+	switch (entity.entity_type) {
+	case CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST:
+		*val = entity.entity_val;
+		return 0;
+	case CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF:
+		return __crlmodule_get_variable_ref(sensor,
+						entity.entity_val, val);
+	case CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL:
+		return __crlmodule_get_ctrl_value(sensor,
+						entity.entity_val, val);
+	case CRL_DYNAMIC_VAL_OPERAND_TYPE_REG_VAL: {
+		struct crl_register_read_rep reg;
+
+		/* Note: Only 8bit registers are supported. */
+		reg.address = entity.entity_val;
+		reg.len = CRL_REG_LEN_08BIT;
+		reg.mask = 0xff;
+		reg.dev_i2c_addr = CRL_I2C_ADDRESS_NO_OVERRIDE;
+		return crlmodule_read_reg(sensor, reg, val);
+	}
+	default:
+		break;
+	};
+
+	return -EINVAL;
+}
+
+static int __crlmodule_calc_dynamic_entity_values(
+					struct crl_sensor *sensor,
+					unsigned int ops_items,
+					struct crl_arithmetic_ops *ops_arr,
+					unsigned int *val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int i;
+
+	/* perform the bitwise operation on val one by one */
+	for (i = 0; i < ops_items; i++) {
+		struct crl_arithmetic_ops *ops = &ops_arr[i];
+		u32 operand;
+		int ret = __crlmodule_parse_dynamic_entity(sensor, ops->operand,
+							&operand);
+		if (ret) {
+			dev_dbg(&client->dev,
+				"%s failed to parse dynamic entity: %d %d\n",
+				__func__, ops->operand.entity_type,
+				ops->operand.entity_val);
+			return ret;
+		}
+
+		switch (ops->op) {
+		case CRL_BITWISE_AND:
+			*val &= operand;
+			break;
+		case CRL_BITWISE_OR:
+			*val |= operand;
+			break;
+		case CRL_BITWISE_LSHIFT:
+			*val <<= operand;
+			break;
+		case CRL_BITWISE_RSHIFT:
+			*val >>= operand;
+			break;
+		case CRL_BITWISE_XOR:
+			*val ^= operand;
+			break;
+		case CRL_BITWISE_COMPLEMENT:
+			*val = ~(*val);
+			break;
+		case CRL_ADD:
+			*val += operand;
+			break;
+		case CRL_SUBTRACT:
+			*val = *val > operand ? *val - operand : operand - *val;
+			break;
+		case CRL_MULTIPLY:
+			*val *= operand;
+			break;
+		case CRL_DIV:
+			*val /= operand;
+			break;
+		case CRL_ASSIGNMENT:
+			*val = operand;
+			break;
+		default:
+			return -EINVAL;
+		}
+	}
+
+	return 0;
+}
+
+/*
+ * Dynamic registers' value is not direct but depends on a referrence value.
+ * This kind of registers are mainly used in crlmodule's v4l2 ctrl logic.
+ *
+ * This is to handle cases like the below examples, where mutliple registers
+ * need to be modified based on the input value "val"
+ * R3000 = val & 0xff and R3001 = val >> 8 & 0xff and R3002 = val >> 16 & 0xff
+ * R4001 = val and R4002 = val or
+ * R2800 = FLL - val and R2802 = LLP - val
+ */
+static int __crlmodule_parse_and_write_dynamic_reg(struct crl_sensor *sensor,
+					struct crl_dynamic_register_access *reg,
+					unsigned int val)
+{
+	int ret;
+
+	/*
+	 * Get the value associated with the dynamic entity. "val" might
+	 * change after this call based on the arithmetic operations added for
+	 * this group
+	 */
+	ret = __crlmodule_calc_dynamic_entity_values(sensor, reg->ops_items,
+							reg->ops, &val);
+	if (ret)
+		return ret;
+
+	/* Now ready to write the value */
+	return crlmodule_write_reg(sensor, reg->dev_i2c_addr, reg->address,
+					reg->len, reg->mask, val);
+}
+
+static int __crlmodule_update_dynamic_regs(struct crl_sensor *sensor,
+					struct crl_v4l2_ctrl *crl_ctrl,
+					unsigned int val)
+{
+	unsigned int i;
+	int ret;
+
+	for (i = 0; i < crl_ctrl->regs_items; i++) {
+		/*
+		* Each register group must start from the initial value, not
+		* as a continuation of the previous calculations. The sensor
+		* configurations must take care of this restriction.
+		*/
+		ret = __crlmodule_parse_and_write_dynamic_reg(sensor,
+						&crl_ctrl->regs[i], val);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+/*
+ * Perform the action for the dependent register lists
+ */
+static int __crlmodule_handle_dependency_regs(
+			struct crl_sensor *sensor,
+			struct crl_v4l2_ctrl *crl_ctrl,
+			unsigned int val)
+{
+	unsigned int i;
+	int ret;
+
+	for (i = 0; i < crl_ctrl->crl_ctrl_dep_reg_list; i++) {
+		struct crl_dep_reg_list *list = &crl_ctrl->dep_regs[i];
+		enum crl_dep_ctrl_condition condition;
+		unsigned int j;
+		u32 dep_val;
+
+		/* Parse the condition value */
+		ret = __crlmodule_parse_dynamic_entity(sensor, list->cond_value,
+							&dep_val);
+		if (ret)
+			return ret;
+
+		/* Get the kind of condition for this value */
+		if (val > dep_val)
+			condition = CRL_DEP_CTRL_CONDITION_GREATER;
+		else if (val < dep_val)
+			condition = CRL_DEP_CTRL_CONDITION_LESSER;
+		else
+			condition = CRL_DEP_CTRL_CONDITION_EQUAL;
+
+		/*
+		 * Compare the register list specific condition and if matching
+		 * write the corresponding register lists to the sensor.
+		 */
+		if (condition == list->reg_cond) {
+			/* Handle the direct registers if any */
+			if (list->no_direct_regs && list->direct_regs) {
+				ret = crlmodule_write_regs(sensor,
+				       list->direct_regs, list->no_direct_regs);
+				if (ret)
+					return ret;
+			}
+
+			/* Handle the dynamic registers if any */
+			for (j = 0; j < list->no_dyn_items; j++) {
+				ret = __crlmodule_parse_and_write_dynamic_reg(
+					sensor, &list->dyn_regs[j], val);
+				if (ret)
+					return ret;
+			}
+			break;
+		}
+	}
+
+	return 0;
+}
+
+/*
+ * Handles the dependency control actions. Dependency control is a control
+ * which' value depends on the current control. This information is encoded in
+ * the sensor configuration file.
+ */
+static int __crlmodule_handle_dependency_ctrl(
+					   struct crl_sensor *sensor,
+					   struct crl_v4l2_ctrl *crl_ctrl,
+					   unsigned int *val,
+					   enum crl_dep_ctrl_action_type type)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_v4l2_ctrl *dep_crl_ctrl;
+	struct crl_dep_ctrl_provision *dep_prov;
+	unsigned int i, idx;
+	u32 dep_val;
+	int ret;
+
+	dev_dbg(&client->dev, "%s ctrl_id: 0x%x dependency controls: %d\n",
+			       __func__, crl_ctrl->ctrl_id,
+			       crl_ctrl->dep_items);
+
+	for (i = 0; i < crl_ctrl->dep_items; i++) {
+		dep_prov = &crl_ctrl->dep_ctrls[i];
+
+		/* If not the type, continue */
+		if (dep_prov->action_type != type)
+			continue;
+
+		/* Get the value from the dependency ctrl */
+		ret = __crlmodule_get_ctrl_value(sensor, dep_prov->ctrl_id,
+						 &dep_val);
+		if (ret) {
+			dev_err(&client->dev, "%s ctrl_id: 0x%x not found\n",
+					       __func__, dep_prov->ctrl_id);
+			/* TODO! Shoud continue? */
+			continue;
+		}
+
+		/* Perform the action */
+		__crlmodule_dep_ctrl_perform_action(sensor, dep_prov, val,
+						    &dep_val);
+
+		/* if this is dependency control, update the register */
+		if (dep_prov->action_type ==
+					CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL) {
+			ret = __crlmodule_get_crl_ctrl_index(sensor,
+						dep_prov->ctrl_id, &idx);
+			if (ret)
+				continue;
+
+			dep_crl_ctrl = &sensor->v4l2_ctrl_bank[idx];
+
+			/* Update the dynamic registers for the dep control */
+			ret = __crlmodule_update_dynamic_regs(sensor,
+							dep_crl_ctrl, dep_val);
+			if (ret)
+				dev_info(&client->dev,
+					"%s dynamic reg update failed for %s\n",
+					__func__, dep_crl_ctrl->name);
+
+			/* Handle dependened register lists for dep control */
+			ret = __crlmodule_handle_dependency_regs(sensor,
+							dep_crl_ctrl, dep_val);
+			if (ret)
+				dev_info(&client->dev,
+					"%s handle dep regs failed for %s\n",
+					__func__, dep_crl_ctrl->name);
+		}
+	}
+
+	return 0;
+}
+
+static int crlmodule_get_fmt_index(struct crl_sensor *sensor,
+				   u8 pixel_order, u8 bpp)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_csi_data_fmt *f;
+	int i;
+
+	/*
+	 * Go through the fmt list and check if this format with matching bpp
+	 * is supported by this module definition file
+	 */
+	for (i = 0; i < sensor->sensor_ds->csi_fmts_items; i++) {
+		f = &sensor->sensor_ds->csi_fmts[i];
+
+		if (f->pixel_order == pixel_order && f->bits_per_pixel == bpp)
+			return i;
+	}
+
+	dev_err(&client->dev, "%s no supported format for order: %d bpp: %d\n",
+			      __func__, pixel_order, bpp);
+
+	return -EINVAL;
+}
+
+static int __crlmodule_update_flip_info(struct crl_sensor *sensor,
+					struct crl_v4l2_ctrl *crl_ctrl,
+					struct v4l2_ctrl *ctrl)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_csi_data_fmt *fmt =
+		&sensor->sensor_ds->csi_fmts[sensor->fmt_index];
+	u8 bpp = fmt->bits_per_pixel;
+	u8 flip_info = sensor->flip_info;
+	u8 new_order;
+	int i, ret;
+
+	dev_dbg(&client->dev, "%s current flip_info: %d curr index: %d\n",
+			       __func__, flip_info, sensor->fmt_index);
+
+	switch (ctrl->id) {
+	case V4L2_CID_HFLIP:
+		flip_info &= CRL_FLIP_HFLIP_MASK;
+		flip_info |= ctrl->val > 0 ? CRL_FLIP_HFLIP : 0;
+		break;
+	case V4L2_CID_VFLIP:
+		flip_info &= CRL_FLIP_VFLIP_MASK;
+		flip_info |= ctrl->val > 0 ? CRL_FLIP_VFLIP : 0;
+		break;
+	}
+
+	dev_dbg(&client->dev, "%s flip success new flip_info: %d\n",
+			       __func__, flip_info);
+
+	/* First check if the module actually supports any pixelorder changes */
+	for (i = 0; i < sensor->sensor_ds->flip_items; i++) {
+		if (flip_info == sensor->sensor_ds->flip_data[i].flip) {
+			new_order = sensor->sensor_ds->flip_data[i].pixel_order;
+			break;
+		}
+	}
+
+	if (i >= sensor->sensor_ds->flip_items) {
+		dev_err(&client->dev, "%s flip not supported %d\n",
+				      __func__, flip_info);
+		return -EINVAL;
+	}
+
+	/* Skip format re-selection if pixel order is unrelated to flipping. */
+	if (new_order == CRL_PIXEL_ORDER_IGNORE)
+		return 0;
+
+	/*
+	 * Flip changes only pixel order. So check if the supported format list
+	 * has any format with new pixel order and current bits per pixel
+	 */
+	i = crlmodule_get_fmt_index(sensor, new_order, bpp);
+	if (i < 0) {
+		dev_err(&client->dev, "%s no format found order: %d bpp: %d\n",
+				      __func__, new_order, bpp);
+		return -EINVAL;
+	}
+
+	ret = __crlmodule_update_dynamic_regs(sensor, crl_ctrl, ctrl->val);
+	if (ret) {
+		dev_err(&client->dev, "%s register access failed\n", __func__);
+		return ret;
+	}
+
+	/* New format found. Update info */
+	sensor->fmt_index = i;
+	sensor->flip_info = flip_info;
+
+	dev_dbg(&client->dev, "%s flip success flip: %d new fmt index: %d\n",
+			      __func__, flip_info, i);
+
+	return 0;
+}
+static int __crlmodule_update_framesize(struct crl_sensor *sensor,
+					struct crl_v4l2_ctrl *crl_ctrl,
+					struct v4l2_ctrl *ctrl)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_mode_rep *mode = sensor->current_mode;
+	unsigned int val;
+	int ret;
+
+	switch (ctrl->id) {
+	case V4L2_CID_FRAME_LENGTH_LINES:
+		val = max(ctrl->val, mode->min_fll);
+		break;
+	case V4L2_CID_LINE_LENGTH_PIXELS:
+		val = max(ctrl->val, mode->min_llp);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	ret = __crlmodule_update_dynamic_regs(sensor, crl_ctrl, val);
+	if (ret)
+		return ret;
+
+	ctrl->val = val;
+	ctrl->cur.val = val;
+	dev_dbg(&client->dev, "%s: set v4l2 id:0x%0x value %d\n",
+				__func__, ctrl->id, val);
+
+	return 0;
+}
+static int __crlmodule_update_blanking(struct crl_sensor *sensor,
+					struct crl_v4l2_ctrl *crl_ctrl,
+					struct v4l2_ctrl *ctrl)
+{
+	unsigned int val;
+
+	switch (ctrl->id) {
+	case V4L2_CID_HBLANK:
+		val = sensor->pixel_array->crop[CRL_PA_PAD_SRC].width +
+		      ctrl->val;
+		break;
+	case V4L2_CID_VBLANK:
+		val = sensor->pixel_array->crop[CRL_PA_PAD_SRC].height +
+		      ctrl->val;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return __crlmodule_update_dynamic_regs(sensor, crl_ctrl, val);
+}
+
+static void __crlmodule_update_selection_impact_flags(
+				struct crl_sensor *sensor,
+				struct crl_v4l2_ctrl *crl_ctrl)
+{
+	if (crl_ctrl->impact & CRL_IMPACTS_PLL_SELECTION)
+		sensor->ext_ctrl_impacts_pll_selection = true;
+
+	if (crl_ctrl->impact & CRL_IMPACTS_MODE_SELECTION)
+		sensor->ext_ctrl_impacts_mode_selection = true;
+}
+
+static struct crl_v4l2_ctrl *__crlmodule_find_crlctrl(
+						struct crl_sensor *sensor,
+						struct v4l2_ctrl *ctrl)
+{
+	struct crl_v4l2_ctrl *crl_ctrl;
+	unsigned int i;
+
+	for (i = 0; i < sensor->sensor_ds->v4l2_ctrls_items; i++) {
+		crl_ctrl = &sensor->v4l2_ctrl_bank[i];
+		if (crl_ctrl->ctrl == ctrl)
+			return crl_ctrl;
+	}
+
+	return NULL;
+}
+
+static int crlmodule_reset_crlctrl_value(struct crl_sensor *sensor,
+					 unsigned int new_mode)
+{
+	struct crl_v4l2_ctrl *crl_ctrl;
+	const struct crl_mode_rep *this;
+	unsigned int i;
+
+	if (!sensor->v4l2_ctrl_bank)
+		return -EINVAL;
+
+	this = &sensor->sensor_ds->modes[new_mode];
+
+	for (i = 0; i < sensor->sensor_ds->v4l2_ctrls_items; i++) {
+		crl_ctrl = &sensor->v4l2_ctrl_bank[i];
+
+		switch (crl_ctrl->ctrl_id) {
+		case V4L2_CID_FRAME_LENGTH_LINES:
+			if (crl_ctrl->ctrl) {
+				crl_ctrl->ctrl->val = this->min_fll;
+				crl_ctrl->ctrl->cur.val = this->min_fll;
+			}
+			break;
+		case V4L2_CID_LINE_LENGTH_PIXELS:
+			if (crl_ctrl->ctrl) {
+				crl_ctrl->ctrl->val = this->min_llp;
+				crl_ctrl->ctrl->cur.val = this->min_llp;
+			}
+			break;
+		}
+	}
+
+	return 0;
+}
+
+static int crlmodule_set_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct crl_sensor *sensor = container_of(ctrl->handler,
+			   struct crl_subdev, ctrl_handler)->sensor;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_v4l2_ctrl *crl_ctrl = NULL;
+	int ret = 0;
+
+	dev_dbg(&client->dev, "%s id:0x%0x val:%d\n", __func__, ctrl->id,
+			      ctrl->val);
+
+	/*
+	 * Need to find the corresponding crlmodule wrapper for this v4l2_ctrl.
+	 * This is needed because all the register information is associated
+	 * with the crlmodule's wrapper v4l2ctrl.
+	 */
+	crl_ctrl = __crlmodule_find_crlctrl(sensor, ctrl);
+	if (!crl_ctrl) {
+		dev_err(&client->dev, "%s ctrl :0x%x not supported\n",
+				      __func__, ctrl->id);
+		return -EINVAL;
+	}
+
+	dev_dbg(&client->dev, "%s id:0x%x name:%s\n", __func__, ctrl->id,
+			      crl_ctrl->name);
+
+	/* Then go through the mandatory controls */
+	switch (ctrl->id) {
+	case V4L2_CID_LINK_FREQ:
+		/* Go through the supported list and compare the values */
+		ret = __crlmodule_update_pll_index(sensor);
+		goto out;
+	};
+
+	/* update the selection impacts flags */
+	__crlmodule_update_selection_impact_flags(sensor, crl_ctrl);
+
+	/*
+	 * Dependency control is a control whose value is affected by the value
+	 * for the current control. For example, vblank can be a dependency
+	 * control for exposure. Whenever exposure changes, the sensor can
+	 * automatically adjust the vblank or rely on manual adjustment. In
+	 * case of manual adjustment the sensor configuration file needs to
+	 * specify the dependency control, the condition for an action and
+	 * typs of action.
+	 *
+	 * Now check if there is any dependency controls for this. And if there
+	 * are any we need to split the action to two. First if the current
+	 * control needs to be changed, then do it before updating the register.
+	 * If some other control is affected, then do it after wrriting the
+	 * current values
+	 *
+	 * Now check in the dependency control list, if the action type is
+	 * "self" and update the value accordingly now
+	 */
+	__crlmodule_handle_dependency_ctrl(sensor, crl_ctrl, &ctrl->val,
+				     CRL_DEP_CTRL_ACTION_TYPE_SELF);
+
+	/* Handle specific controls */
+	switch (ctrl->id) {
+	case V4L2_CID_HFLIP:
+	case V4L2_CID_VFLIP:
+		ret = __crlmodule_update_flip_info(sensor, crl_ctrl, ctrl);
+		goto out;
+
+	case V4L2_CID_VBLANK:
+	case V4L2_CID_HBLANK:
+		if (sensor->blanking_ctrl_not_use) {
+			dev_info(&client->dev, "%s Blanking controls are \
+			not used in this configuration, setting them has \
+			no effect\n", __func__);
+			/* Disable control*/
+			v4l2_ctrl_activate(ctrl, false);
+
+		} else {
+			ret = __crlmodule_update_blanking(sensor,
+					crl_ctrl, ctrl);
+		}
+		goto out;
+
+	case V4L2_CID_FRAME_LENGTH_LINES:
+	case V4L2_CID_LINE_LENGTH_PIXELS:
+		ret = __crlmodule_update_framesize(sensor, crl_ctrl, ctrl);
+		goto out;
+
+	case CRL_CID_SENSOR_MODE:
+		/*
+		 * If sensor mode is changed, some v4l2 ctrls value need
+		 * to be reset to default value, or else the value set in
+		 * previous mode will influence the setting in the current
+		 * mode. Especially for llp and fll.
+		 */
+		if (sensor->sensor_mode != ctrl->val)
+			crlmodule_reset_crlctrl_value(sensor, ctrl->val);
+
+		sensor->sensor_mode = ctrl->val;
+		crlmodule_update_current_mode(sensor);
+		goto out;
+	}
+
+	ret = __crlmodule_update_dynamic_regs(sensor, crl_ctrl, ctrl->val);
+	if (ret)
+		goto out;
+
+	ret = __crlmodule_handle_dependency_regs(sensor, crl_ctrl,
+						ctrl->val);
+
+out:
+	/*
+	 * Now check in the dependency control list, if the action type is
+	 * "dependency control" and update the value accordingly now
+	 */
+	if (!ret && crl_ctrl)
+		__crlmodule_handle_dependency_ctrl(sensor, crl_ctrl, &ctrl->val,
+					     CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL);
+	return ret;
+}
+
+static int crlmodule_get_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct crl_sensor *sensor = container_of(ctrl->handler,
+			   struct crl_subdev, ctrl_handler)->sensor;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_v4l2_ctrl *crl_ctrl;
+	struct crl_dynamic_register_access *reg;
+
+	/*
+	 * Need to find the corresponding crlmodule wrapper for this v4l2_ctrl.
+	 * This is needed because all the register information is associated
+	 * with the crlmodule's wrapper v4l2ctrl.
+	 */
+	crl_ctrl = __crlmodule_find_crlctrl(sensor, ctrl);
+	if (!crl_ctrl) {
+		dev_err(&client->dev, "%s ctrl :0x%x not supported\n",
+				      __func__, ctrl->id);
+		return -EINVAL;
+	}
+
+	dev_dbg(&client->dev, "%s id:0x%x name:%s\n", __func__, ctrl->id,
+			      crl_ctrl->name);
+
+	/* cannot handle if the V4L2_CTRL_FLAG_READ_ONLY flag is not set */
+	if (!(ctrl->flags & V4L2_CTRL_FLAG_READ_ONLY)) {
+		dev_err(&client->dev, "%s Control id:0x%x is not read only\n",
+				      __func__, ctrl->id);
+		return -EINVAL;
+	}
+
+	/*
+	 * Found the crl control wrapper. Use the dynamic entity information
+	 * to calculate the value for this control. For get control, there
+	 * could be only one item in the crl_dynamic_register_access. ctrl->
+	 * regs_items must be 1. Also the crl_dynamic_register_access.address
+	 * and crl_dynamic_register_access.len are not used.
+	 * Instead the values to be found or calculated need to be encoded into
+	 * crl_dynamic_register_access.crl_arithmetic_ops. It has possibility
+	 * to read from registers, existing control values and simple arithmetic
+	 * operations etc.
+	 */
+	if (crl_ctrl->regs_items > 1)
+		dev_warn(&client->dev,
+			 "%s multiple dynamic entities, will skip the rest\n",
+			 __func__);
+	reg = &crl_ctrl->regs[0];
+
+	/* Get the value associated with the dynamic entity */
+	return  __crlmodule_calc_dynamic_entity_values(sensor, reg->ops_items,
+						       reg->ops, &ctrl->val);
+}
+
+static const struct v4l2_ctrl_ops crlmodule_ctrl_ops = {
+	.s_ctrl = crlmodule_set_ctrl,
+	.g_volatile_ctrl = crlmodule_get_ctrl,
+};
+
+static struct v4l2_ctrl_handler *__crlmodule_get_sd_ctrl_handler(
+					struct crl_sensor *sensor,
+					enum crl_subdev_type sd_type)
+{
+	switch (sd_type) {
+	case CRL_SUBDEV_TYPE_SCALER:
+	case CRL_SUBDEV_TYPE_BINNER:
+		return &sensor->src->ctrl_handler;
+
+	case CRL_SUBDEV_TYPE_PIXEL_ARRAY:
+		if (sensor->pixel_array)
+			return &sensor->pixel_array->ctrl_handler;
+		break;
+	};
+
+	return NULL;
+}
+
+static int __crlmodule_init_link_freq_ctrl_menu(
+					struct crl_sensor *sensor,
+					struct crl_v4l2_ctrl *crl_ctrl)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int items = 0;
+	unsigned int i;
+
+	/* Cannot handle if the control type is not integer menu */
+	if (crl_ctrl->type != CRL_V4L2_CTRL_TYPE_MENU_INT)
+		return 0;
+
+	/* If the menu contents exist, skip filling it dynamically */
+	if (crl_ctrl->data.v4l2_int_menu.menu)
+		return 0;
+
+	sensor->link_freq_menu = devm_kzalloc(&client->dev, sizeof(s64) *
+					 sensor->sensor_ds->pll_config_items,
+					 GFP_KERNEL);
+	if (!sensor->link_freq_menu)
+		return -ENOMEM;
+
+	for (i = 0; i < sensor->sensor_ds->pll_config_items; i++) {
+		bool dup = false;
+		unsigned int j;
+
+		/*
+		 * Skip the duplicate entries. We are using the value to match
+		 * not the index
+		 */
+		for (j = 0; j < items && !dup; j++)
+			dup = (sensor->link_freq_menu[j] ==
+			       sensor->sensor_ds->pll_configs[i].op_sys_clk);
+		if (dup)
+			continue;
+
+		sensor->link_freq_menu[items] =
+				   sensor->sensor_ds->pll_configs[i].op_sys_clk;
+		items++;
+	}
+
+	crl_ctrl->data.v4l2_int_menu.menu = sensor->link_freq_menu;
+
+	/* items will not be 0 as there will be atleast one pll_config_item */
+	crl_ctrl->data.v4l2_int_menu.max = items - 1;
+
+	return 0;
+}
+
+static int crlmodule_init_controls(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int pa_ctrls = 0;
+	unsigned int src_ctrls = 0;
+	struct crl_v4l2_ctrl *crl_ctrl;
+	struct v4l2_ctrl_handler *ctrl_handler;
+	struct v4l2_ctrl_config cfg = { 0 };
+	unsigned int i;
+	int rval;
+
+	sensor->v4l2_ctrl_bank = devm_kzalloc(&client->dev,
+		sizeof(struct crl_v4l2_ctrl) *
+		 sensor->sensor_ds->v4l2_ctrls_items,
+		 GFP_KERNEL);
+	if (!sensor->v4l2_ctrl_bank)
+		return -ENOMEM;
+
+	/* Prepare to initialise the v4l2_ctrls from the crl wrapper */
+	for (i = 0; i < sensor->sensor_ds->v4l2_ctrls_items; i++) {
+		/*
+		 * First copy the v4l2_ctrls to the sensor as there could be
+		 * more than one similar sensors in a product which could share
+		 * the same configuration files
+		 */
+		sensor->v4l2_ctrl_bank[i] =
+					sensor->sensor_ds->v4l2_ctrl_bank[i];
+
+		crl_ctrl = &sensor->v4l2_ctrl_bank[i];
+		if (crl_ctrl->sd_type == CRL_SUBDEV_TYPE_PIXEL_ARRAY)
+			pa_ctrls++;
+
+		if (crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
+		    crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER)
+			src_ctrls++;
+
+		/* populate the v4l2_ctrl for the Link_freq dynamically */
+		if (crl_ctrl->ctrl_id == V4L2_CID_LINK_FREQ &&
+			(crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
+			 crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER)) {
+			rval = __crlmodule_init_link_freq_ctrl_menu(sensor,
+								    crl_ctrl);
+			if (rval)
+				return rval;
+		}
+	}
+	dev_dbg(&client->dev, "%s pa_ctrls: %d src_ctrls: %d\n", __func__,
+			       pa_ctrls, src_ctrls);
+
+	if (pa_ctrls) {
+		rval = v4l2_ctrl_handler_init(
+					&sensor->pixel_array->ctrl_handler,
+					pa_ctrls);
+		if (rval)
+			return rval;
+		sensor->pixel_array->ctrl_handler.lock = &sensor->mutex;
+	}
+
+	if (src_ctrls) {
+		rval = v4l2_ctrl_handler_init(
+					&sensor->src->ctrl_handler,
+					src_ctrls);
+		if (rval)
+			return rval;
+		sensor->src->ctrl_handler.lock = &sensor->mutex;
+	}
+
+	for (i = 0; i < sensor->sensor_ds->v4l2_ctrls_items; i++) {
+		crl_ctrl = &sensor->v4l2_ctrl_bank[i];
+		ctrl_handler = __crlmodule_get_sd_ctrl_handler(sensor,
+					crl_ctrl->sd_type);
+
+		if (!ctrl_handler)
+			continue;
+
+		switch (crl_ctrl->type) {
+		case CRL_V4L2_CTRL_TYPE_MENU_ITEMS:
+			crl_ctrl->ctrl = v4l2_ctrl_new_std_menu_items(
+					 ctrl_handler, &crlmodule_ctrl_ops,
+					 crl_ctrl->ctrl_id,
+					 crl_ctrl->data.v4l2_menu_items.size,
+					 0, 0,
+					 crl_ctrl->data.v4l2_menu_items.menu);
+			break;
+		case CRL_V4L2_CTRL_TYPE_MENU_INT:
+			crl_ctrl->ctrl = v4l2_ctrl_new_int_menu(ctrl_handler,
+					 &crlmodule_ctrl_ops, crl_ctrl->ctrl_id,
+					 crl_ctrl->data.v4l2_int_menu.max,
+					 crl_ctrl->data.v4l2_int_menu.def,
+					 crl_ctrl->data.v4l2_int_menu.menu);
+			break;
+		case CRL_V4L2_CTRL_TYPE_INTEGER64:
+		case CRL_V4L2_CTRL_TYPE_INTEGER:
+			crl_ctrl->ctrl = v4l2_ctrl_new_std(ctrl_handler,
+					 &crlmodule_ctrl_ops, crl_ctrl->ctrl_id,
+					 crl_ctrl->data.std_data.min,
+					 crl_ctrl->data.std_data.max,
+					 crl_ctrl->data.std_data.step,
+					 crl_ctrl->data.std_data.def);
+			break;
+		case CRL_V4L2_CTRL_TYPE_CUSTOM:
+			cfg.ops = &crlmodule_ctrl_ops;
+			cfg.id = crl_ctrl->ctrl_id;
+			cfg.name = crl_ctrl->name;
+			cfg.type = crl_ctrl->v4l2_type;
+			if ((crl_ctrl->v4l2_type == V4L2_CTRL_TYPE_INTEGER) ||
+				(crl_ctrl->v4l2_type ==
+				 V4L2_CTRL_TYPE_INTEGER64)) {
+				cfg.max = crl_ctrl->data.std_data.max;
+				cfg.min =  crl_ctrl->data.std_data.min;
+				cfg.step  = crl_ctrl->data.std_data.step;
+				cfg.def = crl_ctrl->data.std_data.def;
+				cfg.qmenu = 0;
+				cfg.elem_size = 0;
+			} else if (crl_ctrl->v4l2_type == V4L2_CTRL_TYPE_MENU) {
+				cfg.max = crl_ctrl->data.v4l2_menu_items.size
+					- 1;
+				cfg.min =  0;
+				cfg.step  = 0;
+				cfg.def = 0;
+				cfg.qmenu = crl_ctrl->data.v4l2_menu_items.menu;
+				cfg.elem_size = 0;
+			} else {
+				dev_dbg(&client->dev,
+					"%s Custom Control: type %d\n",
+					__func__, crl_ctrl->v4l2_type);
+				continue;
+			}
+			crl_ctrl->ctrl = v4l2_ctrl_new_custom(ctrl_handler,
+					&cfg, NULL);
+			break;
+		case CRL_V4L2_CTRL_TYPE_BOOLEAN:
+		case CRL_V4L2_CTRL_TYPE_BUTTON:
+		case CRL_V4L2_CTRL_TYPE_CTRL_CLASS:
+		default:
+			dev_err(&client->dev,
+				"%s Invalid control type\n", __func__);
+			continue;
+			break;
+		}
+
+		if (!crl_ctrl->ctrl)
+			continue;
+		/*
+		 * Blanking and framesize controls access to same register,
+		 * Blank controls are disabled if framesize controls exists.
+		 */
+		if (crl_ctrl->ctrl_id == V4L2_CID_FRAME_LENGTH_LINES ||
+			crl_ctrl->ctrl_id == V4L2_CID_LINE_LENGTH_PIXELS)
+			sensor->blanking_ctrl_not_use = 1;
+
+		if (crl_ctrl->ctrl_id == CRL_CID_SENSOR_MODE)
+			sensor->direct_mode_in_use = 1;
+
+		/* Save mandatory control references - link_freq in src sd */
+		if (crl_ctrl->ctrl_id == V4L2_CID_LINK_FREQ &&
+			(crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
+			crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER))
+			sensor->link_freq = crl_ctrl->ctrl;
+
+		/* Save mandatory control references - pixel_rate_pa PA sd */
+		if (crl_ctrl->ctrl_id == V4L2_CID_PIXEL_RATE &&
+		    crl_ctrl->sd_type == CRL_SUBDEV_TYPE_PIXEL_ARRAY)
+			sensor->pixel_rate_pa = crl_ctrl->ctrl;
+
+		/* Save mandatory control references - pixel_rate_csi src sd */
+		if (crl_ctrl->ctrl_id == V4L2_CID_PIXEL_RATE &&
+			(crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
+			crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER))
+			sensor->pixel_rate_csi = crl_ctrl->ctrl;
+
+		crl_ctrl->ctrl->flags |= crl_ctrl->flags;
+
+		dev_dbg(&client->dev,
+			"%s idx: %d ctrl_id: 0x%x ctrl_name: %s\n ctrl: 0x%p",
+			__func__, i, crl_ctrl->ctrl_id, crl_ctrl->name,
+			crl_ctrl->ctrl);
+
+		if (ctrl_handler->error) {
+			dev_err(&client->dev,
+				"%s controls initialization failed (%d)\n",
+				__func__, ctrl_handler->error);
+			rval = ctrl_handler->error;
+			goto error;
+		}
+	}
+
+	sensor->pixel_array->sd.ctrl_handler =
+				&sensor->pixel_array->ctrl_handler;
+
+	sensor->src->sd.ctrl_handler = &sensor->src->ctrl_handler;
+
+	return 0;
+
+error:
+	v4l2_ctrl_handler_free(&sensor->pixel_array->ctrl_handler);
+	v4l2_ctrl_handler_free(&sensor->src->ctrl_handler);
+
+	return rval;
+}
+
+static bool __crlmodule_rect_matches(struct i2c_client *client,
+				     const struct v4l2_rect *const rect1,
+				     const struct v4l2_rect *const rect2)
+{
+	dev_dbg(&client->dev, "%s rect1 l:%d t:%d w:%d h:%d\n", __func__,
+		rect1->left, rect1->top, rect1->width, rect1->height);
+	dev_dbg(&client->dev, "%s rect2 l:%d t:%d w:%d h:%d\n", __func__,
+		rect2->left, rect2->top, rect2->width, rect2->height);
+
+	return (rect1->left == rect2->left &&
+		rect1->top == rect2->top &&
+		rect1->width == rect2->width &&
+		rect1->height == rect2->height);
+}
+
+static unsigned int __crlmodule_get_mode_min_llp(struct crl_sensor *sensor)
+{
+	const struct crl_mode_rep *mode = sensor->current_mode;
+	const struct crl_sensor_limits *limits =
+		sensor->sensor_ds->sensor_limits;
+	unsigned int width = sensor->pixel_array->crop[CRL_PA_PAD_SRC].width;
+	unsigned int min_llp;
+
+	if (mode->min_llp)
+		min_llp = mode->min_llp; /* mode specific limit */
+	else if (limits->min_line_length_pixels)
+		min_llp = limits->min_line_length_pixels; /* sensor limit */
+	else /* No restrictions */
+		min_llp = width;
+
+	return min_llp;
+}
+
+static unsigned  int __crlmodule_get_mode_max_llp(struct crl_sensor *sensor)
+{
+	const struct crl_mode_rep *mode = sensor->current_mode;
+	const struct crl_sensor_limits *limits =
+		sensor->sensor_ds->sensor_limits;
+	unsigned int max_llp;
+
+	if (mode->max_llp)
+		max_llp = mode->max_llp; /* mode specific limit */
+	else if (limits->min_line_length_pixels)
+		max_llp = limits->max_line_length_pixels; /* sensor limit */
+	else /* No restrictions */
+		max_llp = USHRT_MAX;
+
+	return max_llp;
+}
+
+static unsigned int __crlmodule_get_mode_min_fll(struct crl_sensor *sensor)
+{
+	const struct crl_mode_rep *mode = sensor->current_mode;
+	const struct crl_sensor_limits *limits =
+		sensor->sensor_ds->sensor_limits;
+	unsigned int height = sensor->pixel_array->crop[CRL_PA_PAD_SRC].height;
+	unsigned int min_fll;
+
+	if (mode->min_fll)
+		min_fll = mode->min_fll; /* mode specific limit */
+	else if (limits->min_frame_length_lines)
+		min_fll = limits->min_frame_length_lines; /* sensor limit */
+	else /* No restrictions */
+		min_fll = height;
+
+	return min_fll;
+}
+
+static unsigned int __crlmodule_get_mode_max_fll(struct crl_sensor *sensor)
+{
+	const struct crl_mode_rep *mode = sensor->current_mode;
+	const struct crl_sensor_limits *limits =
+		sensor->sensor_ds->sensor_limits;
+	unsigned int max_fll;
+
+	if (mode->max_fll)
+		max_fll = mode->max_fll; /* mode specific limit */
+	else if (limits->min_line_length_pixels)
+		max_fll = limits->max_line_length_pixels; /* sensor limit */
+	else /* No restrictions */
+		max_fll = USHRT_MAX;
+
+	return max_fll;
+}
+
+static void crlmodule_update_framesize(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int min_llp, max_llp, min_fll, max_fll;
+	struct v4l2_ctrl *llength;
+	struct v4l2_ctrl *flength;
+
+	llength = __crlmodule_get_v4l2_ctrl(sensor,
+			V4L2_CID_LINE_LENGTH_PIXELS);
+	flength = __crlmodule_get_v4l2_ctrl(sensor,
+			V4L2_CID_FRAME_LENGTH_LINES);
+
+	if (llength) {
+		min_llp = __crlmodule_get_mode_min_llp(sensor);
+		max_llp = __crlmodule_get_mode_max_llp(sensor);
+
+		llength->minimum = min_llp;
+		llength->maximum = max_llp;
+		llength->default_value = llength->minimum;
+		dev_dbg(&client->dev, "%s llp:%d\n", __func__, llength->val);
+	}
+
+	if (flength) {
+		min_fll = __crlmodule_get_mode_min_fll(sensor);
+		max_fll = __crlmodule_get_mode_max_fll(sensor);
+		flength->minimum = min_fll;
+		flength->maximum = max_fll;
+		flength->default_value = flength->minimum;
+		dev_dbg(&client->dev, "%s fll:%d\n", __func__, flength->val);
+	}
+}
+
+static int crlmodule_update_frame_blanking(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int width = sensor->pixel_array->crop[CRL_PA_PAD_SRC].width;
+	unsigned int height = sensor->pixel_array->crop[CRL_PA_PAD_SRC].height;
+	unsigned int min_llp, max_llp, min_fll, max_fll;
+	struct v4l2_ctrl *vblank;
+	struct v4l2_ctrl *hblank;
+
+	vblank = __crlmodule_get_v4l2_ctrl(sensor, V4L2_CID_VBLANK);
+	hblank = __crlmodule_get_v4l2_ctrl(sensor, V4L2_CID_HBLANK);
+
+	if (hblank) {
+		min_llp = __crlmodule_get_mode_min_llp(sensor);
+		max_llp = __crlmodule_get_mode_max_llp(sensor);
+
+		hblank->minimum = min_llp - width;
+		hblank->maximum = max_llp - width;
+		hblank->default_value = hblank->minimum;
+		dev_dbg(&client->dev, "%s hblank:%d\n", __func__, hblank->val);
+	}
+
+	if (vblank) {
+		min_fll = __crlmodule_get_mode_min_fll(sensor);
+		max_fll = __crlmodule_get_mode_max_fll(sensor);
+
+		vblank->minimum = min_fll - height;
+		vblank->maximum = max_fll - height;
+		vblank->default_value = vblank->minimum;
+		dev_dbg(&client->dev, "%s vblank:%d\n", __func__, vblank->val);
+	}
+
+	return 0;
+}
+
+static int __crlmodule_rect_index(enum crl_subdev_type type,
+				  const struct crl_mode_rep *mode)
+{
+	int i;
+
+	for (i = 0; i < mode->sd_rects_items; i++) {
+		if (type == mode->sd_rects[i].subdev_type)
+			return i;
+	}
+
+	return -1;
+}
+
+static void crlmodule_update_mode_bysel(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_mode_rep *this;
+	unsigned int i;
+	int rect_index;
+
+	dev_dbg(&client->dev, "%s look for w: %d, h: %d, in [%d] modes\n",
+			      __func__, sensor->src->crop[CRL_PAD_SRC].width,
+			       sensor->src->crop[CRL_PAD_SRC].height,
+			       sensor->sensor_ds->modes_items);
+
+	for (i = 0; i < sensor->sensor_ds->modes_items; i++) {
+		this = &sensor->sensor_ds->modes[i];
+
+		dev_dbg(&client->dev, "%s check mode list[%d] w: %d, h: %d\n",
+				      __func__, i, this->width, this->height);
+		if (this->width != sensor->src->crop[CRL_PAD_SRC].width ||
+		    this->height != sensor->src->crop[CRL_PAD_SRC].height)
+			continue;
+
+		if (sensor->pixel_array) {
+			dev_dbg(&client->dev, "%s Compare PA out rect\n",
+					__func__);
+			rect_index =
+			__crlmodule_rect_index(CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+					this);
+			if (rect_index < 0)
+				continue;
+			if (!__crlmodule_rect_matches(client,
+				&sensor->pixel_array->crop[CRL_PA_PAD_SRC],
+				&this->sd_rects[rect_index].out_rect))
+				continue;
+		}
+		if (sensor->binner) {
+			dev_dbg(&client->dev, "%s binning hor: %d vs. %d\n",
+					      __func__,
+					      sensor->binning_horizontal,
+					      this->binn_hor);
+			if (sensor->binning_horizontal != this->binn_hor)
+				continue;
+
+			dev_dbg(&client->dev, "%s binning vert: %d vs. %d\n",
+					      __func__,
+					      sensor->binning_vertical,
+					      this->binn_vert);
+			if (sensor->binning_vertical != this->binn_vert)
+				continue;
+
+			dev_dbg(&client->dev, "%s binner in rect\n", __func__);
+			rect_index =
+				__crlmodule_rect_index(CRL_SUBDEV_TYPE_BINNER,
+					this);
+			if (rect_index < 0)
+				continue;
+			if (!__crlmodule_rect_matches(client,
+				&sensor->binner->crop[CRL_PAD_SINK],
+				&this->sd_rects[rect_index].in_rect))
+				continue;
+
+			dev_dbg(&client->dev, "%s binner out rect\n", __func__);
+			if (!__crlmodule_rect_matches(client,
+				&sensor->binner->crop[CRL_PAD_SRC],
+				&this->sd_rects[rect_index].out_rect))
+				continue;
+		}
+
+		if (sensor->scaler) {
+			dev_dbg(&client->dev, "%s scaler scale_m %d vs. %d\n",
+					      __func__, sensor->scale_m,
+					      this->scale_m);
+			if (sensor->scale_m != this->scale_m)
+				continue;
+
+			rect_index =
+				__crlmodule_rect_index(CRL_SUBDEV_TYPE_SCALER,
+					this);
+			if (rect_index < 0)
+				continue;
+
+			dev_dbg(&client->dev, "%s scaler in rect\n", __func__);
+			if (!__crlmodule_rect_matches(client,
+				&sensor->scaler->crop[CRL_PAD_SINK],
+				&this->sd_rects[rect_index].in_rect))
+				continue;
+
+			dev_dbg(&client->dev, "%s scaler out rect\n", __func__);
+			if (!__crlmodule_rect_matches(client,
+				&sensor->scaler->crop[CRL_PAD_SRC],
+				&this->sd_rects[rect_index].out_rect))
+				continue;
+		}
+
+		/* Check if there are any dynamic compare items */
+		if (sensor->ext_ctrl_impacts_mode_selection &&
+		    !__crlmodule_compare_ctrl_specific_data(sensor,
+							    this->comp_items,
+							    this->ctrl_data))
+			continue;
+
+		/* Found a perfect match! */
+		dev_dbg(&client->dev, "%s found mode. idx: %d\n", __func__, i);
+		break;
+	}
+
+	/* If no modes found, fall back to the fail safe mode index */
+	if (i >= sensor->sensor_ds->modes_items) {
+		i = sensor->sensor_ds->fail_safe_mode_index;
+		this = &sensor->sensor_ds->modes[i];
+		dev_dbg(&client->dev,
+			 "%s no matching mode, set to default: %d\n",
+			 __func__, i);
+	}
+
+	sensor->current_mode = this;
+}
+
+static void crlmodule_update_mode_v4l2ctrl(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_mode_rep *this;
+	int i;
+
+	dev_dbg(&client->dev, "%s Sensor Mode :%d\n",
+		 __func__, sensor->sensor_mode);
+	/* point to selected mode */
+	this = &sensor->sensor_ds->modes[sensor->sensor_mode];
+	sensor->current_mode = this;
+
+	for (i = 0; i < this->sd_rects_items; i++) {
+
+		if (CRL_SUBDEV_TYPE_PIXEL_ARRAY ==
+		 this->sd_rects[i].subdev_type) {
+			sensor->pixel_array->crop[CRL_PA_PAD_SRC] =
+			 this->sd_rects[i].out_rect;
+		}
+
+		if (CRL_SUBDEV_TYPE_BINNER ==
+		 this->sd_rects[i].subdev_type) {
+			sensor->binner->sink_fmt =
+			 this->sd_rects[i].in_rect;
+			sensor->binner->crop[CRL_PAD_SINK] =
+			 this->sd_rects[i].in_rect;
+			sensor->binner->crop[CRL_PAD_SRC] =
+			 this->sd_rects[i].out_rect;
+			sensor->binning_vertical = this->binn_vert;
+			sensor->binning_horizontal = this->binn_hor;
+			if (this->binn_vert > 1)
+				sensor->binner->compose =
+				 this->sd_rects[i].out_rect;
+		}
+
+		if (CRL_SUBDEV_TYPE_SCALER ==
+		 this->sd_rects[i].subdev_type) {
+			sensor->scaler->crop[CRL_PAD_SINK] =
+			 this->sd_rects[i].in_rect;
+			sensor->scaler->crop[CRL_PAD_SRC] =
+			 this->sd_rects[i].out_rect;
+			sensor->scaler->sink_fmt =
+			 this->sd_rects[i].in_rect;
+			sensor->scale_m = this->scale_m;
+			if (this->scale_m != 1)
+				sensor->scaler->compose =
+				 this->sd_rects[i].out_rect;
+		}
+	}
+
+	/* Set source */
+	sensor->src->crop[CRL_PAD_SRC].width = this->width;
+	sensor->src->crop[CRL_PAD_SRC].height = this->height;
+}
+
+static void crlmodule_update_current_mode(struct crl_sensor *sensor)
+{
+	const struct crl_mode_rep *this;
+	int i;
+
+	if (sensor->direct_mode_in_use)
+		crlmodule_update_mode_v4l2ctrl(sensor);
+	else
+		crlmodule_update_mode_bysel(sensor);
+
+	/*
+	 * We have a valid mode now. If there are any mode specific "get"
+	 * controls defined in the configuration it could be queried by the
+	 * user space for any mode specific information. So go through the
+	 * mode specific v4l2_ctrls and update its value from the selected mode.
+	 */
+
+	this = sensor->current_mode;
+
+	for (i = 0; i < this->comp_items; i++) {
+		struct crl_ctrl_data_pair *ctrl_comp = &this->ctrl_data[i];
+		unsigned int idx;
+
+		/* Get the v4l2_ctrl pointer corresponding ctrl id */
+		if (__crlmodule_get_crl_ctrl_index(sensor, ctrl_comp->ctrl_id,
+						   &idx))
+			/* If not found, move to the next ctrl */
+			continue;
+
+		/* No need to update this control, if this is a set op ctrl */
+		if (sensor->v4l2_ctrl_bank[idx].op_type == CRL_V4L2_CTRL_SET_OP)
+			continue;
+
+		/* Update the control value */
+		__v4l2_ctrl_s_ctrl(sensor->v4l2_ctrl_bank[idx].ctrl,
+				   ctrl_comp->data);
+	}
+
+	if (sensor->blanking_ctrl_not_use)
+		crlmodule_update_framesize(sensor);
+	else
+		crlmodule_update_frame_blanking(sensor);
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int __crlmodule_get_format(struct v4l2_subdev *subdev,
+			       struct v4l2_subdev_pad_config *cfg,
+			       struct v4l2_subdev_format *fmt)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct v4l2_rect *r;
+
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+		fmt->format = *v4l2_subdev_get_try_format(subdev, cfg,
+				fmt->pad);
+		return 0;
+	}
+
+	if (fmt->pad == ssd->source_pad)
+		r = &ssd->crop[ssd->source_pad];
+	else
+		r = &ssd->sink_fmt;
+
+	fmt->format.width = r->width;
+	fmt->format.height = r->height;
+	fmt->format.code =
+		sensor->sensor_ds->csi_fmts[sensor->fmt_index].code;
+	fmt->format.field = (ssd->field == V4L2_FIELD_ANY) ?
+		V4L2_FIELD_NONE : ssd->field;
+	return 0;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_enum_mbus_code(struct v4l2_subdev *subdev,
+				struct v4l2_subdev_pad_config *cfg,
+				struct v4l2_subdev_mbus_code_enum *code)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+
+	if (code->index >= sensor->sensor_ds->csi_fmts_items)
+		return -EINVAL;
+
+	code->code = sensor->sensor_ds->csi_fmts[code->index].code;
+
+	return 0;
+}
+
+static int crlmodule_enum_frame_size(struct v4l2_subdev *sd,
+				struct v4l2_subdev_pad_config *cfg,
+				struct v4l2_subdev_frame_size_enum *fse)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(sd);
+
+	if (fse->index >= sensor->sensor_ds->modes_items)
+		return -EINVAL;
+
+	fse->min_width = sensor->sensor_ds->modes[fse->index].width;
+	fse->max_width = fse->min_width;
+	fse->min_height = sensor->sensor_ds->modes[fse->index].height;
+	fse->max_height = fse->min_height;
+
+	return 0;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_get_format(struct v4l2_subdev *subdev,
+			     struct v4l2_subdev_pad_config *cfg,
+			     struct v4l2_subdev_format *fmt)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	int rval;
+
+	mutex_lock(&sensor->mutex);
+	rval = __crlmodule_get_format(subdev, cfg, fmt);
+	mutex_unlock(&sensor->mutex);
+
+	return rval;
+}
+
+static int __crlmodule_sel_supported(struct v4l2_subdev *subdev,
+				  struct v4l2_subdev_selection *sel)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+
+	if (ssd == sensor->pixel_array
+		    && sel->pad == CRL_PA_PAD_SRC) {
+		switch (sel->target) {
+		case V4L2_SEL_TGT_NATIVE_SIZE:
+		case V4L2_SEL_TGT_CROP:
+		case V4L2_SEL_TGT_CROP_BOUNDS:
+			return 0;
+		}
+	}
+	if (ssd == sensor->binner) {
+		switch (sel->target) {
+		case V4L2_SEL_TGT_COMPOSE:
+		case V4L2_SEL_TGT_COMPOSE_BOUNDS:
+			if (sel->pad == CRL_PAD_SINK)
+				return 0;
+		}
+	}
+	if (ssd == sensor->scaler) {
+		switch (sel->target) {
+		case V4L2_SEL_TGT_CROP:
+		case V4L2_SEL_TGT_CROP_BOUNDS:
+			if (sel->pad == CRL_PAD_SRC)
+				return 0;
+		break;
+		case V4L2_SEL_TGT_COMPOSE:
+		case V4L2_SEL_TGT_COMPOSE_BOUNDS:
+			if (sel->pad == CRL_PAD_SINK)
+				return 0;
+		}
+	}
+	return -EINVAL;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static void crlmodule_get_crop_compose(struct v4l2_subdev *subdev,
+				    struct v4l2_subdev_pad_config *cfg,
+				    struct v4l2_rect **crops,
+				    struct v4l2_rect **comps, int which)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	unsigned int i;
+
+	/* Currently we support only 2 pads */
+	BUG_ON(subdev->entity.num_pads > CRL_PADS);
+
+	if (which == V4L2_SUBDEV_FORMAT_ACTIVE) {
+		if (crops)
+			for (i = 0; i < subdev->entity.num_pads; i++)
+				crops[i] = &ssd->crop[i];
+		if (comps)
+			*comps = &ssd->compose;
+	} else {
+		if (crops) {
+			for (i = 0; i < subdev->entity.num_pads; i++) {
+				crops[i] = v4l2_subdev_get_try_crop(subdev,
+								    cfg, i);
+				BUG_ON(!crops[i]);
+			}
+		}
+		if (comps) {
+			*comps = v4l2_subdev_get_try_compose(subdev, cfg,
+							     CRL_PAD_SINK);
+			BUG_ON(!*comps);
+		}
+	}
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_get_selection(struct v4l2_subdev *subdev,
+				struct v4l2_subdev_pad_config *cfg,
+				struct v4l2_subdev_selection *sel)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct v4l2_rect *comp, *crops[CRL_PADS];
+	struct v4l2_rect sink_fmt;
+	int ret;
+
+	ret = __crlmodule_sel_supported(subdev, sel);
+	if (ret)
+		return ret;
+
+	crlmodule_get_crop_compose(subdev, cfg, crops, &comp, sel->which);
+
+	if (sel->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
+		sink_fmt = ssd->sink_fmt;
+	} else {
+		struct v4l2_mbus_framefmt *fmt =
+			v4l2_subdev_get_try_format(subdev, cfg, ssd->sink_pad);
+		sink_fmt.left = 0;
+		sink_fmt.top = 0;
+		sink_fmt.width = fmt->width;
+		sink_fmt.height = fmt->height;
+	}
+
+	switch (sel->target) {
+	case V4L2_SEL_TGT_CROP_BOUNDS:
+	case V4L2_SEL_TGT_NATIVE_SIZE:
+		if (ssd == sensor->pixel_array) {
+			sel->r.left = sel->r.top = 0;
+			sel->r.width =
+				sensor->sensor_ds->sensor_limits->x_addr_max;
+			sel->r.height =
+				sensor->sensor_ds->sensor_limits->y_addr_max;
+		} else if (sel->pad == ssd->sink_pad) {
+			sel->r = sink_fmt;
+		} else {
+			sel->r = *comp;
+		}
+		break;
+	case V4L2_SEL_TGT_CROP:
+	case V4L2_SEL_TGT_COMPOSE_BOUNDS:
+		sel->r = *crops[sel->pad];
+		break;
+	case V4L2_SEL_TGT_COMPOSE:
+		sel->r = *comp;
+		break;
+	}
+	return 0;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static void crlmodule_propagate(struct v4l2_subdev *subdev,
+			     struct v4l2_subdev_pad_config *cfg, int which,
+			     int target)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct v4l2_rect *comp, *crops[CRL_PADS];
+
+	crlmodule_get_crop_compose(subdev, cfg, crops, &comp, which);
+
+	switch (target) {
+	case V4L2_SEL_TGT_CROP:
+		comp->width = crops[CRL_PAD_SINK]->width;
+		comp->height = crops[CRL_PAD_SINK]->height;
+		if (which == V4L2_SUBDEV_FORMAT_ACTIVE) {
+			if (ssd == sensor->scaler) {
+				sensor->scale_m = 1;
+			} else if (ssd == sensor->binner) {
+				sensor->binning_horizontal = 1;
+				sensor->binning_vertical = 1;
+			}
+		}
+		/* Fall through */
+	case V4L2_SEL_TGT_COMPOSE:
+		*crops[CRL_PAD_SRC] = *comp;
+		break;
+	default:
+		BUG();
+	}
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_set_compose(struct v4l2_subdev *subdev,
+			      struct v4l2_subdev_pad_config *cfg,
+			      struct v4l2_subdev_selection *sel)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct v4l2_rect *comp, *crops[CRL_PADS];
+
+	crlmodule_get_crop_compose(subdev, cfg, crops, &comp, sel->which);
+
+	sel->r.top = 0;
+	sel->r.left = 0;
+
+	if (ssd == sensor->binner) {
+		sensor->binning_horizontal = crops[CRL_PAD_SINK]->width /
+					   sel->r.width;
+		sensor->binning_vertical = crops[CRL_PAD_SINK]->height /
+					   sel->r.height;
+	} else {
+		sensor->scale_m = crops[CRL_PAD_SINK]->width *
+			sensor->sensor_ds->sensor_limits->scaler_m_min /
+				 sel->r.width;
+	}
+
+	*comp = sel->r;
+
+	crlmodule_propagate(subdev, cfg, sel->which,
+			 V4L2_SEL_TGT_COMPOSE);
+
+	if (sel->which == V4L2_SUBDEV_FORMAT_ACTIVE)
+		crlmodule_update_current_mode(sensor);
+
+	return 0;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_set_crop(struct v4l2_subdev *subdev,
+			      struct v4l2_subdev_pad_config *cfg,
+			      struct v4l2_subdev_selection *sel)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct v4l2_rect *src_size, *crops[CRL_PADS];
+	struct v4l2_rect _r;
+
+	crlmodule_get_crop_compose(subdev, cfg, crops, NULL, sel->which);
+
+	if (sel->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
+		if (sel->pad == ssd->sink_pad)
+			src_size = &ssd->sink_fmt;
+		else
+			src_size = &ssd->compose;
+	} else {
+		if (sel->pad == ssd->sink_pad) {
+			_r.left = 0;
+			_r.top = 0;
+			_r.width = v4l2_subdev_get_try_format(subdev,
+							      cfg, sel->pad)
+				->width;
+			_r.height = v4l2_subdev_get_try_format(subdev,
+							       cfg, sel->pad)
+				->height;
+			src_size = &_r;
+		} else {
+			src_size =
+				v4l2_subdev_get_try_compose(subdev, cfg,
+							    ssd->sink_pad);
+		}
+	}
+
+	if (ssd == sensor->src && sel->pad == CRL_PAD_SRC) {
+		sel->r.left = 0;
+		sel->r.top = 0;
+	}
+
+	sel->r.width = min(sel->r.width, src_size->width);
+	sel->r.height = min(sel->r.height, src_size->height);
+
+	sel->r.left = min_t(s32, sel->r.left, src_size->width - sel->r.width);
+	sel->r.top = min_t(s32, sel->r.top, src_size->height - sel->r.height);
+
+	*crops[sel->pad] = sel->r;
+
+	if (ssd != sensor->pixel_array && sel->pad == CRL_PAD_SINK)
+		crlmodule_propagate(subdev, cfg, sel->which,
+				 V4L2_SEL_TGT_CROP);
+
+	/* TODO! Should we short list supported mode? */
+
+	return 0;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Modified based on the CRL Module changes
+ */
+static int crlmodule_set_format(struct v4l2_subdev *subdev,
+				struct v4l2_subdev_pad_config *cfg,
+				struct v4l2_subdev_format *fmt)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct v4l2_rect *crops[CRL_PADS];
+
+	dev_dbg(&client->dev, "%s sd_name: %s pad: %d w: %d, h: %d code: 0x%x",
+			       __func__, ssd->sd.name, fmt->pad,
+			       fmt->format.width, fmt->format.height,
+			       fmt->format.code);
+
+	mutex_lock(&sensor->mutex);
+
+	/* Currently we only support ALTERNATE interlaced mode. */
+	if (fmt->format.field != V4L2_FIELD_ALTERNATE)
+		fmt->format.field = V4L2_FIELD_NONE;
+	ssd->field = fmt->format.field;
+
+	if (fmt->pad == ssd->source_pad) {
+		u32 code = fmt->format.code;
+		int rval = __crlmodule_get_format(subdev, cfg, fmt);
+
+		if (!rval && subdev == &sensor->src->sd) {
+			/* Check if this code is supported, if yes get index */
+			int idx = __crlmodule_get_data_fmt_index(sensor, code);
+
+			if (idx < 0) {
+				dev_err(&client->dev, "%s invalid format\n",
+						       __func__);
+				mutex_unlock(&sensor->mutex);
+				return -EINVAL;
+			}
+
+			sensor->fmt_index = idx;
+			/* TODO! validate PLL? */
+		}
+		mutex_unlock(&sensor->mutex);
+		return rval;
+	}
+
+	fmt->format.width =
+		clamp_t(uint32_t, fmt->format.width,
+			sensor->sensor_ds->sensor_limits->x_addr_min,
+			sensor->sensor_ds->sensor_limits->x_addr_max);
+	fmt->format.height =
+		clamp_t(uint32_t, fmt->format.height,
+			sensor->sensor_ds->sensor_limits->y_addr_min,
+			sensor->sensor_ds->sensor_limits->y_addr_max);
+
+	crlmodule_get_crop_compose(subdev, cfg, crops, NULL, fmt->which);
+
+	crops[ssd->sink_pad]->left = 0;
+	crops[ssd->sink_pad]->top = 0;
+	crops[ssd->sink_pad]->width = fmt->format.width;
+	crops[ssd->sink_pad]->height = fmt->format.height;
+	if (fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE)
+		ssd->sink_fmt = *crops[ssd->sink_pad];
+
+	crlmodule_propagate(subdev, cfg, fmt->which,
+			 V4L2_SEL_TGT_CROP);
+
+	crlmodule_update_current_mode(sensor);
+
+	mutex_unlock(&sensor->mutex);
+
+	return 0;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_set_selection(struct v4l2_subdev *subdev,
+				struct v4l2_subdev_pad_config *cfg,
+				struct v4l2_subdev_selection *sel)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int ret;
+
+	dev_dbg(&client->dev, "%s sd_name: %s sel w: %d, h: %d target: %d",
+			       __func__, ssd->sd.name, sel->r.width,
+			       sel->r.height, sel->target);
+
+	ret = __crlmodule_sel_supported(subdev, sel);
+	if (ret) {
+		dev_dbg(&client->dev,
+			"%s sd_name: %s w: %d, h: %d target: %d not supported",
+			       __func__, ssd->sd.name, sel->r.width,
+			       sel->r.height, sel->target);
+		return ret;
+	}
+
+	mutex_lock(&sensor->mutex);
+
+	sel->r.width = max_t(unsigned int,
+			     sensor->sensor_ds->sensor_limits->x_addr_min,
+			     sel->r.width);
+	sel->r.height = max_t(unsigned int,
+			      sensor->sensor_ds->sensor_limits->y_addr_min,
+			      sel->r.height);
+	switch (sel->target) {
+	case V4L2_SEL_TGT_CROP:
+		ret = crlmodule_set_crop(subdev, cfg, sel);
+		break;
+	case V4L2_SEL_TGT_COMPOSE:
+		ret = crlmodule_set_compose(subdev, cfg, sel);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	crlmodule_update_current_mode(sensor);
+
+	mutex_unlock(&sensor->mutex);
+	return ret;
+}
+
+static int crlmodule_get_skip_frames(struct v4l2_subdev *subdev, u32 *frames)
+{
+	/* TODO Handle this */
+	return 0;
+}
+
+static int crlmodule_start_streaming(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	const struct crl_pll_configuration *pll;
+	const struct crl_csi_data_fmt *fmt;
+	int rval;
+
+	dev_dbg(&client->dev, "%s start streaming pll_idx: %d fmt_idx: %d\n",
+			      __func__, sensor->pll_index,
+			      sensor->fmt_index);
+
+	pll = &sensor->sensor_ds->pll_configs[sensor->pll_index];
+	fmt = &sensor->sensor_ds->csi_fmts[sensor->fmt_index];
+
+	crlmodule_update_current_mode(sensor);
+
+	rval = crlmodule_write_regs(sensor, fmt->regs, fmt->regs_items);
+	if (rval) {
+		dev_err(&client->dev, "%s failed to set format\n", __func__);
+		return rval;
+	}
+
+	rval = crlmodule_write_regs(sensor, pll->pll_regs, pll->pll_regs_items);
+	if (rval) {
+		dev_err(&client->dev, "%s failed to set plls\n", __func__);
+		return rval;
+	}
+
+	/* Write mode list */
+	rval = crlmodule_write_regs(sensor,
+			sensor->current_mode->mode_regs,
+			sensor->current_mode->mode_regs_items);
+	if (rval) {
+		dev_err(&client->dev, "%s failed to set mode\n", __func__);
+		return rval;
+	}
+
+	/* Write stream on list */
+	rval = crlmodule_write_regs(sensor,
+				   sensor->sensor_ds->streamon_regs,
+				   sensor->sensor_ds->streamon_regs_items);
+	if (rval) {
+		dev_err(&client->dev, "%s failed to set stream\n", __func__);
+		return rval;
+	}
+
+	return 0;
+}
+
+static int crlmodule_stop_streaming(struct crl_sensor *sensor)
+{
+	return crlmodule_write_regs(sensor,
+				    sensor->sensor_ds->streamoff_regs,
+				    sensor->sensor_ds->streamoff_regs_items);
+}
+
+static int crlmodule_set_stream(struct v4l2_subdev *subdev, int enable)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int rval = 0;
+
+	mutex_lock(&sensor->mutex);
+
+	if (sensor->streaming == enable)
+		goto out;
+
+	if (enable) {
+
+		if (sensor->msr_list) {
+			rval = crlmodule_apply_msrlist(client,
+					sensor->msr_list);
+			if (rval)
+				dev_warn(&client->dev, "msrlist write error %d\n",
+						rval);
+		}
+		rval = crlmodule_start_streaming(sensor);
+		if (!rval)
+			sensor->streaming = 1;
+	} else {
+		rval = crlmodule_stop_streaming(sensor);
+		sensor->streaming = 0;
+	}
+
+out:
+	mutex_unlock(&sensor->mutex);
+
+	/* SENSOR_IDLE control cannot be set when streaming*/
+	__crlmodule_grab_v4l2_ctrl(sensor, SENSOR_IDLE, enable);
+
+	/* SENSOR_STREAMING controls cannot be set when not streaming */
+	__crlmodule_grab_v4l2_ctrl(sensor, SENSOR_STREAMING, !enable);
+
+	/* SENSOR_POWERED_ON controls does not matter about streaming. */
+	__crlmodule_grab_v4l2_ctrl(sensor, SENSOR_POWERED_ON, false);
+
+	return rval;
+}
+
+static int crlmodule_identify_module(struct v4l2_subdev *subdev)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int size = 0, pos;
+	char *id_string;
+	const char *expect_id;
+	int i, ret;
+	u32 val;
+
+	for (i = 0; i < sensor->sensor_ds->id_reg_items; i++)
+		size += sensor->sensor_ds->id_regs[i].width + 1;
+
+	/* TODO! If no ID! return success? */
+	if (!size)
+		return 0;
+
+	expect_id = sensor->platform_data->id_string;
+	/* Create string variabel to append module ID */
+	id_string = kzalloc(size, GFP_KERNEL);
+	if (!id_string)
+		return -ENOMEM;
+	*id_string = '\0';
+
+	/* Go through each regs in the list and append to id_string */
+	for (i = 0; i < sensor->sensor_ds->id_reg_items; i++) {
+		ret = crlmodule_read_reg(sensor,
+					 sensor->sensor_ds->id_regs[i].reg,
+					 &val);
+		if (ret)
+			goto out;
+
+		if (i)
+			pos += snprintf(id_string + pos, size - pos, " 0x%x", val);
+		else
+			pos = snprintf(id_string, size, "0x%x", val);
+		if (pos >= size)
+			break;
+	}
+
+	/* Check here if this module in the supported list
+	 * Ideally the module manufacturer and id should be in platform
+	 * data or ACPI and here the driver should read the value from the
+	 * register and check if this matches to any in the supported
+	 * platform data
+	 */
+	if (expect_id &&
+	   (strnlen(id_string, size) != strnlen(expect_id, size + 1) ||
+	    strncmp(id_string, expect_id, size))) {
+		dev_err(&client->dev,
+			"Sensor detection failed: expect \"%s\" actual \"%s\"",
+			expect_id, id_string);
+		ret = -ENODEV;
+	}
+
+out:
+	dev_dbg(&client->dev, "%s module: %s expected id: %s\n",
+		__func__, id_string,
+		(expect_id) ? expect_id : "not specified");
+	kfree(id_string);
+	if (ret)
+		dev_err(&client->dev, "sensor detection failed\n");
+	return ret;
+}
+
+static int crlmodule_get_frame_desc(struct v4l2_subdev *subdev,
+				    unsigned int pad,
+				    struct v4l2_mbus_frame_desc *desc)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_frame_desc *crl_desc = sensor->sensor_ds->frame_desc;
+	unsigned int i;
+
+	desc->num_entries = sensor->sensor_ds->frame_desc_entries;
+	if (desc->num_entries)
+		desc->type = sensor->sensor_ds->frame_desc_type;
+
+	/*
+	 * By any chance the sensor configuration has more than the maximum
+	 * supported, clip the number of entries to the MAX supported.
+	 */
+	if (desc->num_entries > V4L2_FRAME_DESC_ENTRY_MAX)
+		desc->num_entries = V4L2_FRAME_DESC_ENTRY_MAX;
+
+	for (i = 0; i < desc->num_entries; i++) {
+		int ret;
+		u32 val;
+
+		ret = __crlmodule_parse_dynamic_entity(sensor,
+						       crl_desc[i].flags, &val);
+		if (ret)
+			return ret;
+		desc->entry[i].flags = (u16)val;
+
+		ret = __crlmodule_parse_dynamic_entity(sensor, crl_desc[i].bpp,
+						       &val);
+		if (ret)
+			return ret;
+		desc->entry[i].bpp = (u8)val;
+
+		ret = __crlmodule_parse_dynamic_entity(
+					sensor, crl_desc[i].pixelcode, &val);
+		if (ret)
+			return ret;
+		desc->entry[i].pixelcode = val;
+
+		if (desc->entry[i].flags & V4L2_MBUS_FRAME_DESC_FL_BLOB) {
+			ret = __crlmodule_parse_dynamic_entity(
+					sensor, crl_desc[i].length, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].length = val;
+		} else {
+			ret = __crlmodule_parse_dynamic_entity(
+					sensor, crl_desc[i].start_line, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].two_dim.start_line =
+								 (u16)val;
+
+			ret = __crlmodule_parse_dynamic_entity(
+					sensor, crl_desc[i].start_pixel, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].two_dim.start_pixel =
+								 (u16)val;
+
+			ret = __crlmodule_calc_dynamic_entity_values(
+					sensor, crl_desc[i].height.ops_items,
+					crl_desc[i].height.ops, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].two_dim.height = (u16)val;
+
+			ret = __crlmodule_calc_dynamic_entity_values(
+					sensor, crl_desc[i].width.ops_items,
+					crl_desc[i].width.ops, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].two_dim.width = (u16)val;
+		}
+
+		if (desc->type == CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2) {
+			ret = __crlmodule_parse_dynamic_entity(
+					sensor, crl_desc[i].csi2_channel, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].bus.csi2.channel = (u8)val;
+
+			ret = __crlmodule_parse_dynamic_entity(
+				      sensor, crl_desc[i].csi2_data_type, &val);
+			if (ret)
+				return ret;
+			desc->entry[i].bus.csi2.data_type = (u8)val;
+		}
+	}
+
+	return 0;
+}
+
+
+static int crlmodule_get_routing(struct v4l2_subdev *subdev,
+				   struct v4l2_subdev_routing *route)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	int i;
+
+	if (!route)
+		return -EINVAL;
+
+	if (ssd != sensor->src ||
+		sensor->sensor_ds->frame_desc_entries <= 1)
+		return -ENOIOCTLCMD;
+
+	for (i = 0; i < min(sensor->sensor_ds->frame_desc_entries,
+				route->num_routes); i++) {
+		route->routes[i].sink_pad = CRL_PAD_SINK;
+		route->routes[i].sink_stream = 0;
+		route->routes[i].source_pad = CRL_PAD_SRC;
+		route->routes[i].source_stream = i;
+		route->routes[i].flags = sensor->src->route_flags[i];
+	}
+
+	route->num_routes = i;
+	return 0;
+}
+
+static int crlmodule_set_routing(struct v4l2_subdev *subdev,
+				   struct v4l2_subdev_routing *route)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crl_subdev *ssd = to_crlmodule_subdev(subdev);
+	const unsigned int stream_nr = sensor->sensor_ds->frame_desc_entries;
+	struct v4l2_subdev_route *t;
+	int i, ret = 0;
+
+	if (!route)
+		return -EINVAL;
+
+	if (ssd != sensor->src ||
+		sensor->sensor_ds->frame_desc_entries <= 1)
+		return -ENOIOCTLCMD;
+
+	for (i = 0; i < min(stream_nr, route->num_routes); ++i) {
+		t = &route->routes[i];
+
+		if (t->source_stream > stream_nr - 1)
+			continue;
+
+		if (t->source_pad != CRL_PAD_SRC ||
+		    t->sink_pad != CRL_PAD_SINK)
+			continue;
+
+		if (sensor->src->route_flags[t->source_stream] &
+			V4L2_SUBDEV_ROUTE_FL_IMMUTABLE)
+			continue;
+
+		if (t->flags & V4L2_SUBDEV_ROUTE_FL_ACTIVE)
+			sensor->src->route_flags[t->source_stream] |=
+				V4L2_SUBDEV_ROUTE_FL_ACTIVE;
+		else if (!(t->flags & V4L2_SUBDEV_ROUTE_FL_ACTIVE))
+			sensor->src->route_flags[t->source_stream] &=
+				(~V4L2_SUBDEV_ROUTE_FL_ACTIVE);
+	}
+
+	return ret;
+}
+
+/*
+ * This function executes the initialisation routines after the power on
+ * is successfully completed. Following operations are done
+ *
+ *    Initiases registers after sensor power up - if any such list is configured
+ *    V4l2 Ctrl handler framework intialisation
+ */
+static int crlmodule_run_poweron_init(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int rval;
+
+	dev_dbg(&client->dev, "%s set power up registers: %d\n",
+			       __func__, sensor->sensor_ds->powerup_regs_items);
+
+	/* Write the power up registers */
+	rval = crlmodule_write_regs(sensor, sensor->sensor_ds->powerup_regs,
+				    sensor->sensor_ds->powerup_regs_items);
+	if (rval) {
+		dev_err(&client->dev, "%s failed to set powerup registers\n",
+				      __func__);
+		return rval;
+	}
+
+	/* Are we still initialising...? If yes, return here. */
+	if (!sensor->pixel_array)
+		return 0;
+
+	dev_dbg(&client->dev, "%s init v4l2 controls", __func__);
+
+	rval = v4l2_ctrl_handler_setup(
+		&sensor->pixel_array->ctrl_handler);
+	if (rval) {
+		dev_err(&client->dev, "%s PA v4l2_ctrl_handler failed\n",
+				      __func__);
+		return rval;
+	}
+
+	rval = v4l2_ctrl_handler_setup(&sensor->src->ctrl_handler);
+	if (rval)
+		dev_err(&client->dev, "%s SRC v4l2_ctrl_handler failed\n",
+				      __func__);
+
+	/* SENSOR_IDLE control can be set only when not streaming*/
+	__crlmodule_grab_v4l2_ctrl(sensor, SENSOR_IDLE, false);
+
+	/* SENSOR_STREAMING controls can be set only when streaming */
+	__crlmodule_grab_v4l2_ctrl(sensor, SENSOR_STREAMING, true);
+
+	/* SENSOR_POWERED_ON controls can be set after power on */
+	__crlmodule_grab_v4l2_ctrl(sensor, SENSOR_POWERED_ON, false);
+
+	mutex_lock(&sensor->mutex);
+	crlmodule_update_current_mode(sensor);
+	mutex_unlock(&sensor->mutex);
+
+	return rval;
+}
+
+static int custom_gpio_request(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int i;
+
+	for (i = 0; i < CRL_MAX_CUSTOM_GPIO_AMOUNT; i++) {
+		if (sensor->platform_data->custom_gpio[i].name[0] == '\0')
+			break;
+		if (devm_gpio_request_one(
+			    &client->dev,
+			    sensor->platform_data->custom_gpio[i].number, 0,
+			    sensor->platform_data->custom_gpio[i].name) != 0) {
+			dev_err(&client->dev,
+				"unable to acquire %s %d\n",
+				sensor->platform_data->custom_gpio[i].name,
+				sensor->platform_data->custom_gpio[i].number);
+			return -ENODEV;
+		}
+	}
+	return 0;
+}
+
+static void custom_gpio_ctrl(struct crl_sensor *sensor, bool set)
+{
+	int i;
+	unsigned int val;
+
+	for (i = 0; i < CRL_MAX_CUSTOM_GPIO_AMOUNT; i++) {
+		if (sensor->platform_data->custom_gpio[i].name[0] == '\0')
+			break;
+		if (set)
+			val = sensor->platform_data->custom_gpio[i].val;
+		else
+			val = sensor->platform_data->custom_gpio[i].undo_val;
+
+		gpio_set_value(
+			sensor->platform_data->custom_gpio[i].number, val);
+	}
+}
+
+/*
+ * This function handles sensor power up routine failure because of any failed
+ * step in the routine. The index "i" is the index to last successfull power
+ * sequence entity successfull completed. This function executes the power
+ * senquence entities in the reverse or with undo value.
+ */
+static void crlmodule_undo_poweron_entities(
+				struct crl_sensor *sensor,
+				int rev_idx)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_power_seq_entity *entity;
+	int idx;
+
+	for (idx = rev_idx; idx >= 0; idx--) {
+		entity = &sensor->pwr_entity[idx];
+		dev_dbg(&client->dev, "%s power type %d index %d\n",
+				__func__, entity->type, idx);
+
+		switch (entity->type) {
+		case CRL_POWER_ETY_GPIO_FROM_PDATA:
+			gpio_set_value(sensor->platform_data->xshutdown,
+						   entity->undo_val);
+			break;
+		case CRL_POWER_ETY_GPIO_FROM_PDATA_BY_NUMBER:
+			custom_gpio_ctrl(sensor, false);
+			break;
+		case CRL_POWER_ETY_GPIO_CUSTOM:
+			if (entity->gpiod_priv) {
+				if (gpiod_cansleep(entity->gpiod_priv))
+					gpiod_set_raw_value_cansleep(
+						entity->gpiod_priv,
+						entity->undo_val);
+				else
+					gpiod_set_raw_value(entity->gpiod_priv,
+							entity->undo_val);
+			} else {
+				gpio_set_value(entity->ent_number,
+					entity->undo_val);
+			}
+			break;
+		case CRL_POWER_ETY_REGULATOR_FRAMEWORK:
+			regulator_disable(entity->regulator_priv);
+			break;
+		case CRL_POWER_ETY_CLK_FRAMEWORK:
+			clk_disable_unprepare(sensor->xclk);
+			break;
+		default:
+			dev_err(&client->dev, "%s Invalid power type\n",
+					__func__);
+			break;
+		}
+
+		if (entity->delay)
+			usleep_range(entity->delay, entity->delay + 10);
+	}
+}
+
+static int __crlmodule_powerup_sequence(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_power_seq_entity *entity;
+	unsigned idx;
+	int rval;
+
+	for (idx = 0; idx < sensor->sensor_ds->power_items; idx++) {
+		entity = &sensor->pwr_entity[idx];
+		dev_dbg(&client->dev, "%s power type %d index %d\n",
+				__func__, entity->type, idx);
+
+		switch (entity->type) {
+		case CRL_POWER_ETY_GPIO_FROM_PDATA:
+			gpio_set_value(sensor->platform_data->xshutdown,
+					entity->val);
+			break;
+		case CRL_POWER_ETY_GPIO_FROM_PDATA_BY_NUMBER:
+			custom_gpio_ctrl(sensor, true);
+			break;
+		case CRL_POWER_ETY_GPIO_CUSTOM:
+			if (entity->gpiod_priv) {
+				if (gpiod_cansleep(entity->gpiod_priv))
+					gpiod_set_raw_value_cansleep(
+						entity->gpiod_priv,
+						entity->val);
+				else
+					gpiod_set_raw_value(entity->gpiod_priv,
+								entity->val);
+			} else {
+				gpio_set_value(entity->ent_number, entity->val);
+			}
+			break;
+		case CRL_POWER_ETY_REGULATOR_FRAMEWORK:
+			rval = regulator_enable(entity->regulator_priv);
+			if (rval) {
+				dev_err(&client->dev,
+					"Failed to enable regulator: %d\n",
+					rval);
+				devm_regulator_put(entity->regulator_priv);
+				entity->regulator_priv = NULL;
+				goto error;
+			}
+			break;
+		case CRL_POWER_ETY_CLK_FRAMEWORK:
+			rval = clk_set_rate(sensor->xclk,
+					sensor->platform_data->ext_clk);
+			if (rval < 0) {
+				dev_err(&client->dev,
+				"unable to set clock freq to %u\n",
+				sensor->platform_data->ext_clk);
+				goto error;
+			}
+			if (clk_get_rate(sensor->xclk) !=
+					sensor->platform_data->ext_clk)
+					dev_warn(&client->dev,
+						"warning: unable to set \
+						accurate clock freq %u\n",
+						sensor->platform_data->ext_clk);
+			rval = clk_prepare_enable(sensor->xclk);
+			if (rval) {
+				dev_err(&client->dev, "Failed to enable \
+						clock: %d\n", rval);
+				goto error;
+			}
+			break;
+		default:
+			dev_err(&client->dev, "Invalid power type\n");
+			rval = -ENODEV;
+			goto error;
+		}
+
+		if (entity->delay)
+			usleep_range(entity->delay, entity->delay + 10);
+	}
+
+	return 0;
+error:
+	dev_err(&client->dev, "Error:Power sequece failed\n");
+	if (idx > 0)
+		crlmodule_undo_poweron_entities(sensor, idx-1);
+	return rval;
+}
+
+static int crlmodule_set_power(struct v4l2_subdev *subdev, int on)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int ret = 0;
+
+	if (on) {
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put(&client->dev);
+			return ret;
+		}
+	}
+
+	mutex_lock(&sensor->power_mutex);
+	if (on && !sensor->power_count) {
+		usleep_range(2000, 3000);
+		ret = crlmodule_run_poweron_init(sensor);
+		if (ret < 0) {
+			pm_runtime_put(&client->dev);
+			goto out;
+		}
+	}
+
+	/* Update the power count. */
+	sensor->power_count += on ? 1 : -1;
+	WARN_ON(sensor->power_count < 0);
+
+out:
+	mutex_unlock(&sensor->power_mutex);
+
+	if (!on)
+		pm_runtime_put(&client->dev);
+
+	return ret;
+}
+
+static const struct v4l2_subdev_ops crlmodule_ops;
+static const struct v4l2_subdev_internal_ops crlmodule_internal_ops;
+static const struct media_entity_operations crlmodule_entity_ops;
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Modified based on the CRL Module changes
+ */
+static int crlmodule_init_subdevs(struct v4l2_subdev *subdev)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crlmodule_platform_data *platform_data = sensor->platform_data;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_subdev *prev_sd = NULL;
+	int i = 0, j;
+	struct crl_subdev *sd;
+	int rval = 0;
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+
+	/*
+	 * The scaler, binner and PA order matters. Sensor configuration file
+	 * must maintain this order. PA sub dev is a must and binner and
+	 * scaler can be omitted based on the sensor. But if scaler is present
+	 * it must be the first sd.
+	 */
+	if (sensor->sensor_ds->subdevs[i].subdev_type
+	    == CRL_SUBDEV_TYPE_SCALER) {
+		sensor->scaler = &sensor->ssds[sensor->ssds_used];
+		sensor->ssds_used++;
+		i++;
+	}
+
+	if (sensor->sensor_ds->subdevs[i].subdev_type
+	    == CRL_SUBDEV_TYPE_BINNER) {
+		sensor->binner = &sensor->ssds[sensor->ssds_used];
+		sensor->ssds_used++;
+		i++;
+	}
+
+	if (sensor->sensor_ds->subdevs[i].subdev_type
+	    == CRL_SUBDEV_TYPE_PIXEL_ARRAY) {
+		sensor->pixel_array = &sensor->ssds[sensor->ssds_used];
+		sensor->ssds_used++;
+		i++;
+	}
+
+	/* CRL MediaCTL IF driver can't handle if none of these sd's present! */
+	if (!sensor->ssds_used) {
+		dev_err(&client->dev, "%s no subdevs present\n", __func__);
+		return -ENODEV;
+	}
+
+	if (!sensor->sensor_ds->pll_config_items) {
+		dev_err(&client->dev, "%s no pll configurations\n", __func__);
+		return -ENODEV;
+	}
+
+	/* TODO validate rest of the settings from the sensor definition file */
+
+	dev_dbg(&client->dev, "%s subdevs: %d\n", __func__, i);
+
+	for (i = 0; i < sensor->ssds_used; i++) {
+		bool has_substreams = false;
+
+		sd = &sensor->ssds[i];
+
+		if (sd != sensor->src)
+			v4l2_subdev_init(&sd->sd, &crlmodule_ops);
+		else if (sensor->sensor_ds->frame_desc_entries > 1)
+			has_substreams = true;
+
+		sd->sensor = sensor;
+
+		if (sd == sensor->pixel_array) {
+			sd->npads = 1;
+		} else {
+			sd->npads = 2;
+			sd->source_pad = 1;
+		}
+
+		if (platform_data->suffix)
+			snprintf(sd->sd.name,
+				 sizeof(sd->sd.name), "%s %c",
+				 sensor->sensor_ds->subdevs[i].name,
+				 platform_data->suffix);
+		else
+			snprintf(sd->sd.name,
+				 sizeof(sd->sd.name), "%s %d-%4.4x",
+				 sensor->sensor_ds->subdevs[i].name,
+				 i2c_adapter_id(client->adapter),
+				 client->addr);
+
+
+		sd->sink_fmt.width =
+			sensor->sensor_ds->sensor_limits->x_addr_max;
+		sd->sink_fmt.height =
+			sensor->sensor_ds->sensor_limits->y_addr_max;
+		sd->compose.width = sd->sink_fmt.width;
+		sd->compose.height = sd->sink_fmt.height;
+		sd->crop[sd->source_pad] = sd->compose;
+		sd->pads[sd->source_pad].flags = MEDIA_PAD_FL_SOURCE |
+			(has_substreams ? MEDIA_PAD_FL_MULTIPLEX : 0);
+		if (sd != sensor->pixel_array) {
+			sd->crop[sd->sink_pad] = sd->compose;
+			sd->pads[sd->sink_pad].flags = MEDIA_PAD_FL_SINK;
+		}
+
+		if (has_substreams) {
+			sd->route_flags = devm_kzalloc(&client->dev,
+				sizeof(unsigned int) *
+				sensor->sensor_ds->frame_desc_entries,
+				GFP_KERNEL);
+			if (!sd->route_flags)
+				return -ENOMEM;
+			for (j = 0; j < sensor->sensor_ds->frame_desc_entries;
+				j++)
+				sd->route_flags[j] =
+					V4L2_SUBDEV_ROUTE_FL_SOURCE;
+			sd->route_flags[0] |=
+					V4L2_SUBDEV_ROUTE_FL_ACTIVE |
+					V4L2_SUBDEV_ROUTE_FL_IMMUTABLE;
+		}
+
+		sd->sd.entity.ops = &crlmodule_entity_ops;
+
+		if (prev_sd == NULL) {
+			prev_sd = sd;
+			continue;
+		}
+
+		sd->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+		sd->sd.internal_ops = &crlmodule_internal_ops;
+		sd->sd.owner = THIS_MODULE;
+		v4l2_set_subdevdata(&sd->sd, client);
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 5, 0)
+		rval = media_entity_init(&sd->sd.entity, sd->npads,
+					 sd->pads, 0);
+#else
+		rval = media_entity_pads_init(&sd->sd.entity, sd->npads,
+					      sd->pads);
+#endif
+		if (rval) {
+			dev_err(&client->dev,
+				"media_entity_init failed\n");
+			return rval;
+		}
+
+		rval = v4l2_device_register_subdev(sensor->src->sd.v4l2_dev,
+						   &sd->sd);
+		if (rval) {
+			dev_err(&client->dev,
+				"v4l2_device_register_subdev failed\n");
+			return rval;
+		}
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 5, 0)
+		rval = media_entity_create_link(&sd->sd.entity,
+#else
+		rval = media_create_pad_link(&sd->sd.entity,
+#endif
+						sd->source_pad,
+						&prev_sd->sd.entity,
+						prev_sd->sink_pad,
+						MEDIA_LNK_FL_ENABLED |
+						MEDIA_LNK_FL_IMMUTABLE);
+		if (rval) {
+			dev_err(&client->dev,
+				"media_entity_create_link failed\n");
+			return rval;
+		}
+
+		prev_sd = sd;
+	}
+
+	return rval;
+}
+
+static int __init_power_resources(struct v4l2_subdev *subdev)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_power_seq_entity *entity;
+	unsigned idx;
+
+	sensor->pwr_entity = devm_kzalloc(&client->dev,
+		sizeof(struct crl_power_seq_entity) *
+		 sensor->sensor_ds->power_items, GFP_KERNEL);
+
+	if (!sensor->pwr_entity)
+		return -ENOMEM;
+
+	for (idx = 0; idx < sensor->sensor_ds->power_items; idx++)
+		sensor->pwr_entity[idx] =
+		 sensor->sensor_ds->power_entities[idx];
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+
+	for (idx = 0; idx < sensor->sensor_ds->power_items; idx++) {
+		int rval;
+
+		entity = &sensor->pwr_entity[idx];
+
+		switch (entity->type) {
+		case CRL_POWER_ETY_GPIO_FROM_PDATA:
+			if (devm_gpio_request_one(&client->dev,
+				sensor->platform_data->xshutdown, 0,
+				"CRL xshutdown") != 0) {
+				dev_err(&client->dev,
+					"unable to acquire xshutdown %d\n",
+					sensor->platform_data->xshutdown);
+				return -ENODEV;
+			}
+			break;
+		case CRL_POWER_ETY_GPIO_FROM_PDATA_BY_NUMBER:
+			rval = custom_gpio_request(sensor);
+			if (rval < 0)
+				return rval;
+			break;
+		case CRL_POWER_ETY_GPIO_CUSTOM:
+			if (entity->ent_name[0]) {
+				entity->gpiod_priv = gpiod_get(NULL,
+					entity->ent_name, GPIOD_OUT_LOW);
+				if (IS_ERR(entity->gpiod_priv)) {
+					dev_err(&client->dev,
+						"unable to acquire custom gpio %s\n",
+						entity->ent_name);
+					entity->gpiod_priv = NULL;
+					return -ENODEV;
+				}
+			} else {
+				if (devm_gpio_request_one(&client->dev,
+					entity->ent_number, 0,
+					"CRL Custom") != 0) {
+					dev_err(&client->dev,
+						"unable to acquire custom gpio %d\n",
+						entity->ent_number);
+					return -ENODEV;
+				}
+			}
+			break;
+		case CRL_POWER_ETY_REGULATOR_FRAMEWORK:
+			entity->regulator_priv = devm_regulator_get(
+					&client->dev, entity->ent_name);
+			if (IS_ERR(entity->regulator_priv)) {
+				dev_err(&client->dev,
+					"Failed to get regulator: %s\n",
+					entity->ent_name);
+					entity->regulator_priv = NULL;
+				return -ENODEV;
+			}
+			rval = regulator_set_voltage(entity->regulator_priv,
+						     entity->val,
+						     entity->val);
+			/* Not all regulator supports voltage change */
+			if (rval  < 0)
+				dev_info(&client->dev,
+					"Failed to set voltage %s %d\n",
+					entity->ent_name, entity->val);
+			break;
+		case CRL_POWER_ETY_CLK_FRAMEWORK:
+			sensor->xclk = devm_clk_get(&client->dev,
+				entity->ent_name[0] ? entity->ent_name : NULL);
+			if (IS_ERR(sensor->xclk)) {
+				dev_err(&client->dev,
+					"Cannot get sensor clk\n");
+				return -ENODEV;
+			}
+			break;
+		default:
+			dev_err(&client->dev, "Invalid Power item\n");
+			return -ENODEV;
+		}
+	}
+
+	return 0;
+}
+
+static int crl_request_gpio_irq(struct crl_sensor *sensor)
+{
+	int rval;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int irq_pin = sensor->platform_data->crl_irq_pin;
+
+	if (!gpio_is_valid(irq_pin)) {
+		dev_err(&client->dev, "%s: GPIO pin %d is invalid!\n",
+			__func__, irq_pin);
+		return -ENODEV;
+	}
+	dev_dbg(&client->dev,
+			"%s: IRQ GPIO %d is valid.\n", __func__, irq_pin);
+
+	rval = devm_gpio_request(&client->dev, irq_pin,
+				 sensor->platform_data->irq_pin_name);
+	if (rval) {
+		dev_err(&client->dev,
+			"%s:IRQ GPIO pin request failed!\n", __func__);
+		return rval;
+	}
+
+	gpio_direction_input(irq_pin);
+	sensor->irq = gpio_to_irq(irq_pin);
+	rval = devm_request_threaded_irq(&client->dev, sensor->irq,
+					 sensor->sensor_ds->crl_irq_fn,
+					 sensor->sensor_ds->crl_threaded_irq_fn,
+					 sensor->platform_data->irq_pin_flags,
+					 sensor->platform_data->irq_pin_name,
+					 sensor);
+
+	dev_dbg(&client->dev, "%s: GPIO register GPIO IRQ result: %d\n",
+		__func__, rval);
+
+	return rval;
+}
+
+static int crlmodule_registered(struct v4l2_subdev *subdev)
+{
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+
+	int rval;
+
+	rval = __init_power_resources(subdev);
+	if (rval)
+		return -ENODEV;
+
+	pm_runtime_enable(&client->dev);
+
+	/* Power up the sensor */
+	if (pm_runtime_get_sync(&client->dev) < 0) {
+		rval = -ENODEV;
+		goto out;
+	}
+
+	/* init GPIO IRQ */
+	if (sensor->sensor_ds->irq_in_use == true) {
+		rval = crl_request_gpio_irq(sensor);
+		if (rval) {
+			rval = -ENODEV;
+			goto out;
+		}
+	}
+
+	/* one time init */
+	rval = crlmodule_write_regs(sensor,
+				    sensor->sensor_ds->onetime_init_regs,
+				    sensor->sensor_ds->onetime_init_regs_items);
+	if (rval) {
+		dev_err(&client->dev, "%s failed to set powerup registers\n",
+				      __func__);
+		rval = -ENODEV;
+		goto out;
+	}
+
+	/* sensor specific init */
+	if (sensor->sensor_ds->sensor_init) {
+		rval = sensor->sensor_ds->sensor_init(client);
+
+		if (rval) {
+			dev_err(&client->dev,
+				"%s failed to run sensor specific init\n",
+				__func__);
+			rval = -ENODEV;
+			goto out;
+		}
+	}
+	/* Identify the module */
+	rval = crlmodule_identify_module(subdev);
+	if (rval) {
+		rval = -ENODEV;
+		goto out;
+	}
+
+	rval = crlmodule_init_subdevs(subdev);
+	if (rval)
+		goto out;
+
+	sensor->binning_horizontal = 1;
+	sensor->binning_vertical = 1;
+	sensor->scale_m = 1;
+	sensor->flip_info = CRL_FLIP_DEFAULT_NONE;
+	sensor->ext_ctrl_impacts_pll_selection = false;
+	sensor->ext_ctrl_impacts_mode_selection = false;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 5, 0)
+	sensor->pixel_array->sd.entity.type = MEDIA_ENT_T_V4L2_SUBDEV_SENSOR;
+#else
+	sensor->pixel_array->sd.entity.function = MEDIA_ENT_F_CAM_SENSOR;
+#endif
+
+	rval = crlmodule_init_controls(sensor);
+	if (rval)
+		goto out;
+
+	mutex_lock(&sensor->mutex);
+	crlmodule_update_current_mode(sensor);
+	mutex_unlock(&sensor->mutex);
+	rval = crlmodule_nvm_init(sensor);
+
+out:
+	dev_dbg(&client->dev, "%s rval: %d\n", __func__, rval);
+	/* crlmodule_power_off(sensor); */
+	pm_runtime_put(&client->dev);
+
+	return rval;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int crlmodule_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	u32 mbus_code = MEDIA_BUS_FMT_SRGGB10_1X10;
+	unsigned int i;
+	int rval;
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+
+	mutex_lock(&sensor->mutex);
+
+	for (i = 0; i < ssd->npads; i++) {
+		struct v4l2_mbus_framefmt *try_fmt =
+			v4l2_subdev_get_try_format(sd, fh->pad, i);
+		struct v4l2_rect *try_crop = v4l2_subdev_get_try_crop(sd,
+								fh->pad, i);
+		struct v4l2_rect *try_comp;
+
+		try_fmt->width = sensor->sensor_ds->sensor_limits->x_addr_max;
+		try_fmt->height = sensor->sensor_ds->sensor_limits->y_addr_max;
+		try_fmt->code = mbus_code;
+
+		try_crop->top = 0;
+		try_crop->left = 0;
+		try_crop->width = try_fmt->width;
+		try_crop->height = try_fmt->height;
+
+		if (ssd != sensor->pixel_array)
+			continue;
+
+		try_comp = v4l2_subdev_get_try_compose(sd, fh->pad, i);
+		*try_comp = *try_crop;
+	}
+
+	mutex_unlock(&sensor->mutex);
+
+
+	rval = pm_runtime_get_sync(&client->dev);
+	if (rval < 0)
+		pm_runtime_put(&client->dev);
+	return rval;
+}
+
+static int crlmodule_close(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	pm_runtime_put(&client->dev);
+
+	return 0;
+}
+
+static int crlmodule_get_registers(struct v4l2_subdev *sd, struct crl_registers_info *info)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct crl_register_read_rep reg;
+	int i;
+	int ret = 0;
+
+	if (info->number > REGS_BUF_SIZE) {
+		dev_err(&client->dev, "error: max register's numbers than %d\n", REGS_BUF_SIZE);
+		return -1;
+	}
+
+	for (i = 0; i < info->number; i++) {
+		reg.address = info->start_address + i;
+		reg.dev_i2c_addr = CRL_I2C_ADDRESS_NO_OVERRIDE;
+		reg.len = info->len;
+		reg.mask = 0xff;
+		ret = crlmodule_read_reg(sensor, reg, &info->regs[i]);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+}
+
+static int crlmodule_set_registers(struct v4l2_subdev *sd, struct crl_registers_info *info)
+{
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int i;
+	int ret = 0;
+
+	if (info->number > REGS_BUF_SIZE) {
+		dev_err(&client->dev, "error: max register's numbers than %d\n", REGS_BUF_SIZE);
+		return -1;
+	}
+
+	for (i = 0; i < info->number; i++) {
+		ret = crlmodule_write_reg(sensor, CRL_I2C_ADDRESS_NO_OVERRIDE,
+				info->start_address + i, info->len, 0xff, info->regs[i]);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+}
+
+static long crlmodule_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
+{
+	int ret;
+
+	switch (cmd) {
+	case CRL_G_REGISTERS:
+		ret = crlmodule_get_registers(sd, arg);
+		break;
+	case CRL_S_REGISTERS:
+		ret = crlmodule_set_registers(sd, arg);
+		break;
+	default:
+		ret = -1;
+		break;
+	};
+
+	return ret;
+}
+
+static const struct v4l2_subdev_video_ops crlmodule_video_ops = {
+	.s_stream = crlmodule_set_stream,
+};
+
+static const struct v4l2_subdev_core_ops crlmodule_core_ops = {
+	.s_power = crlmodule_set_power,
+	.ioctl = crlmodule_ioctl,
+};
+
+static const struct v4l2_subdev_pad_ops crlmodule_pad_ops = {
+	.enum_mbus_code = crlmodule_enum_mbus_code,
+	.get_fmt = crlmodule_get_format,
+	.set_fmt = crlmodule_set_format,
+	.get_selection = crlmodule_get_selection,
+	.set_selection = crlmodule_set_selection,
+	.enum_frame_size = crlmodule_enum_frame_size,
+	.get_frame_desc = crlmodule_get_frame_desc,
+	.get_routing = crlmodule_get_routing,
+	.set_routing = crlmodule_set_routing,
+};
+
+static const struct v4l2_subdev_sensor_ops crlmodule_sensor_ops = {
+	.g_skip_frames = crlmodule_get_skip_frames,
+};
+
+static const struct v4l2_subdev_ops crlmodule_ops = {
+	.core = &crlmodule_core_ops,
+	.video = &crlmodule_video_ops,
+	.pad = &crlmodule_pad_ops,
+	.sensor = &crlmodule_sensor_ops,
+};
+
+static const struct media_entity_operations crlmodule_entity_ops = {
+	.link_validate = v4l2_subdev_link_validate,
+};
+
+static const struct v4l2_subdev_internal_ops crlmodule_internal_src_ops = {
+	.registered = crlmodule_registered,
+	.open = crlmodule_open,
+	.close = crlmodule_close,
+};
+
+static const struct v4l2_subdev_internal_ops crlmodule_internal_ops = {
+	.open = crlmodule_open,
+	.close = crlmodule_close,
+};
+
+#ifdef CONFIG_PM
+
+static int crlmodule_runtime_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_sensor *sensor = to_crlmodule_sensor(sd);
+
+	crlmodule_undo_poweron_entities(sensor,
+					sensor->sensor_ds->power_items - 1);
+	return 0;
+}
+
+static int crlmodule_runtime_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_sensor *sensor = to_crlmodule_sensor(sd);
+
+	return __crlmodule_powerup_sequence(sensor);
+}
+
+static int crlmodule_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+
+	if (sensor->streaming)
+		crlmodule_stop_streaming(sensor);
+
+	if (sensor->power_count > 0)
+		crlmodule_undo_poweron_entities(sensor,
+					sensor->sensor_ds->power_items - 1);
+	return 0;
+}
+
+static int crlmodule_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct crl_subdev *ssd = to_crlmodule_subdev(sd);
+	struct crl_sensor *sensor = ssd->sensor;
+	int rval = 0;
+
+	if (sensor->power_count > 0) {
+		rval = __crlmodule_powerup_sequence(sensor);
+		if (!rval)
+			rval = crlmodule_run_poweron_init(sensor);
+	}
+
+	if (!rval && sensor->streaming)
+		rval = crlmodule_start_streaming(sensor);
+
+	return rval;
+}
+#else
+#define crlmodule_runtime_suspend	NULL
+#define crlmodule_runtime_resume	NULL
+#define crlmodule_suspend	NULL
+#define crlmodule_resume	NULL
+#endif /* CONFIG_PM */
+
+static int crlmodule_probe(struct i2c_client *client,
+			   const struct i2c_device_id *devid)
+{
+	struct crl_sensor *sensor;
+	int ret;
+
+	if (client->dev.platform_data == NULL)
+		return -ENODEV;
+
+	/* TODO! Create the sensor based on the interface */
+	sensor = devm_kzalloc(&client->dev, sizeof(*sensor), GFP_KERNEL);
+	if (sensor == NULL)
+		return -ENOMEM;
+
+	sensor->platform_data = client->dev.platform_data;
+	mutex_init(&sensor->mutex);
+	mutex_init(&sensor->power_mutex);
+
+	ret = crlmodule_populate_ds(sensor, &client->dev);
+	if (ret)
+		return -ENODEV;
+
+	sensor->src = &sensor->ssds[sensor->ssds_used];
+
+	v4l2_i2c_subdev_init(&sensor->src->sd, client, &crlmodule_ops);
+	sensor->src->sd.internal_ops = &crlmodule_internal_src_ops;
+	sensor->src->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+	if (sensor->sensor_ds->frame_desc_entries > 1)
+		sensor->src->sd.flags |= V4L2_SUBDEV_FL_HAS_SUBSTREAMS;
+
+	sensor->src->sensor = sensor;
+
+	sensor->src->pads[0].flags = MEDIA_PAD_FL_SOURCE;
+	if (sensor->sensor_ds->frame_desc_entries > 1)
+		sensor->src->sd.flags |= MEDIA_PAD_FL_MULTIPLEX;
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 5, 0)
+	ret = media_entity_init(&sensor->src->sd.entity, 2,
+				sensor->src->pads, 0);
+#else
+	ret = media_entity_pads_init(&sensor->src->sd.entity, 2,
+				sensor->src->pads);
+#endif
+	if (ret < 0)
+		goto cleanup;
+	ret = v4l2_async_register_subdev(&sensor->src->sd);
+	if (ret < 0)
+		goto cleanup;
+
+	/* Load IQ tuning registers from drvb file*/
+	if (sensor->sensor_ds->msr_file_name) {
+		ret = crlmodule_load_msrlist(client,
+			sensor->sensor_ds->msr_file_name,
+			&sensor->msr_list);
+		if (ret)
+			dev_warn(&client->dev,
+				"msrlist loading failed. Ignore, move on\n");
+	} else {
+		/* sensor will still continue streaming */
+		dev_warn(&client->dev, "No msrlists associated with sensor\n");
+	}
+
+	return 0;
+
+cleanup:
+	media_entity_cleanup(&sensor->src->sd.entity);
+	crlmodule_release_ds(sensor);
+	return ret;
+}
+
+static void crlmodule_free_controls(struct crl_sensor *sensor)
+{
+	unsigned int i;
+
+	for (i = 0; i < sensor->ssds_used; i++)
+		v4l2_ctrl_handler_free(&sensor->ssds[i].ctrl_handler);
+}
+
+static int crlmodule_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	unsigned int i;
+
+	if (sensor->sensor_ds->sensor_cleanup)
+		sensor->sensor_ds->sensor_cleanup(client);
+
+	v4l2_async_unregister_subdev(&sensor->src->sd);
+	for (i = 0; i < sensor->ssds_used; i++) {
+		v4l2_device_unregister_subdev(&sensor->ssds[i].sd);
+		media_entity_cleanup(&sensor->ssds[i].sd.entity);
+	}
+
+	for (i = 0; i < sensor->sensor_ds->power_items; i++) {
+		struct crl_power_seq_entity *entity =
+			&sensor->pwr_entity[i];
+
+		if (entity->type == CRL_POWER_ETY_GPIO_CUSTOM  &&
+				entity->gpiod_priv)
+			gpiod_put(entity->gpiod_priv);
+	}
+
+	crlmodule_nvm_deinit(sensor);
+	crlmodule_release_ds(sensor);
+	crlmodule_free_controls(sensor);
+	crlmodule_release_msrlist(&sensor->msr_list);
+
+	pm_runtime_disable(&client->dev);
+
+	return 0;
+}
+
+
+static const struct i2c_device_id crlmodule_id_table[] = {
+	{ CRLMODULE_NAME, 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(i2c, crlmodule_id_table);
+
+static const struct dev_pm_ops crlmodule_pm_ops = {
+	.runtime_suspend = crlmodule_runtime_suspend,
+	.runtime_resume = crlmodule_runtime_resume,
+	.suspend	= crlmodule_suspend,
+	.resume		= crlmodule_resume,
+};
+
+static struct i2c_driver crlmodule_i2c_driver = {
+	.driver	= {
+		.name = CRLMODULE_NAME,
+		.pm = &crlmodule_pm_ops,
+	},
+	.probe	= crlmodule_probe,
+	.remove	= crlmodule_remove,
+	.id_table = crlmodule_id_table,
+};
+
+module_i2c_driver(crlmodule_i2c_driver);
+
+MODULE_AUTHOR("Vinod Govindapillai <vinod.govindapillai@intel.com>");
+MODULE_AUTHOR("Jouni Ukkonen <jouni.ukkonen@intel.com>");
+MODULE_AUTHOR("Tommi Franttila <tommi.franttila@intel.com>");
+MODULE_DESCRIPTION("Generic driver for common register list based \
+			camera sensor modules");
+MODULE_LICENSE("GPL");
diff --git a/drivers/media/i2c/crlmodule/crlmodule-data.c b/drivers/media/i2c/crlmodule/crlmodule-data.c
new file mode 100644
index 000000000000..d4143a53a7fa
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-data.c
@@ -0,0 +1,125 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#include "crlmodule.h"
+#include "crl_imx132_configuration.h"
+#include "crl_imx214_configuration.h"
+#include "crl_imx135_configuration.h"
+#include "crl_imx230_configuration.h"
+#include "crl_imx318_configuration.h"
+#include "crl_ov8858_configuration.h"
+#include "crl_ov13860_configuration.h"
+#include "crl_adv7481_cvbs_configuration.h"
+#include "crl_adv7481_hdmi_configuration.h"
+#include "crl_adv7481_eval_configuration.h"
+#include "crl_imx185_configuration.h"
+#include "crl_ov10635_configuration.h"
+#include "crl_ar0231at_configuration.h"
+#include "crl_ov10640_configuration.h"
+#include "crl_imx477_master_configuration.h"
+#include "crl_imx477_slave_configuration.h"
+#include "crl_imx274_configuration.h"
+#include "crl_ov5670_configuration.h"
+#include "crl_imx290_configuration.h"
+#include "crl_pixter_stub_configuration.h"
+#include "crl_ov2740_configuration.h"
+#include "crl_ov9281_configuration.h"
+#include "crl_magna_configuration.h"
+#include "crl_ar023z_configuration.h"
+#include "crl_ov2775_configuration.h"
+#include "crl_ox03a10_configuration.h"
+
+static const struct crlmodule_sensors supported_sensors[] = {
+	{ "i2c-SONY214A:00", "imx214", &imx214_crl_configuration },
+	{ "IMX214", "imx214", &imx214_crl_configuration },
+	{ "i2c-SONY132A:00", "imx132", &imx132_crl_configuration },
+	{ "i2c-INT3471:00", "imx135", &imx135_crl_configuration },
+	{ "i2c-SONY230A:00", "imx230", &imx230_crl_configuration },
+	{ "i2c-INT3477:00", "ov8858", &ov8858_crl_configuration },
+	{ "i2c-OV5670AA:00", "ov5670", &ov5670_crl_configuration },
+	{ "IMX185", "imx185", &imx185_crl_configuration },
+	{ "IMX477-MASTER", "imx477", &imx477_master_crl_configuration },
+	{ "IMX477-SLAVE-1", "imx477", &imx477_slave_crl_configuration },
+	{ "OV13860", "ov13860", &ov13860_crl_configuration },
+	{ "OV9281", "ov9281", &ov9281_crl_configuration },
+	{ "ADV7481 CVBS", "adv7481_cvbs", &adv7481_cvbs_crl_configuration },
+	{ "ADV7481 HDMI", "adv7481_hdmi", &adv7481_hdmi_crl_configuration },
+	{ "ADV7481_EVAL", "adv7481_eval", &adv7481_eval_crl_configuration },
+	{ "ADV7481B_EVAL", "adv7481b_eval", &adv7481b_eval_crl_configuration },
+	{ "SONY318A", "imx318", &imx318_crl_configuration },
+	{ "OV10635", "ov10635", &ov10635_crl_configuration },
+	{ "AR0231AT", "ar0231at", &ar0231at_crl_configuration },
+	{ "OV10640", "ov10640", &ov10640_crl_configuration },
+	{ "IMX274", "imx274", &imx274_crl_configuration },
+	{ "OV5670", "ov5670", &ov5670_crl_configuration },
+	{ "IMX290", "imx290", &imx290_crl_configuration},
+	{ "PIXTER_STUB", "pixter_stub", &pixter_stub_crl_configuration},
+	{ "PIXTER_STUB_B", "pixter_stub_b", &pixter_stub_b_crl_configuration},
+	{ "PIXTER_STUB_C", "pixter_stub_c", &pixter_stub_c_crl_configuration},
+	{ "PIXTER_STUB_D", "pixter_stub_d", &pixter_stub_d_crl_configuration},
+	{ "PIXTER_STUB_E", "pixter_stub_e", &pixter_stub_e_crl_configuration},
+	{ "PIXTER_STUB_F", "pixter_stub_f", &pixter_stub_f_crl_configuration},
+	{ "PIXTER_STUB_G", "pixter_stub_g", &pixter_stub_g_crl_configuration},
+	{ "PIXTER_STUB_H", "pixter_stub_h", &pixter_stub_h_crl_configuration},
+	{ "INT3474", "ov2740", &ov2740_crl_configuration },
+	{ "MAGNA", "magna", &magna_crl_configuration },
+	{ "AR023Z", "ar023z", &ar023z_crl_configuration },
+	{ "OV2775", "ov2775", &ov2775_crl_configuration },
+	{ "OX03A10", "ox03a10", &ox03a10_crl_configuration },
+};
+
+/*
+ * Function to populate the CRL data structure from the sensor configuration
+ * definition file
+ */
+int crlmodule_populate_ds(struct crl_sensor *sensor, struct device *dev)
+{
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(supported_sensors); i++) {
+		/* Check the ACPI supported modules */
+		if (!strcmp(dev_name(dev), supported_sensors[i].pname)) {
+			sensor->sensor_ds = supported_sensors[i].ds;
+			dev_info(dev, "%s %s selected\n",
+				 __func__, supported_sensors[i].name);
+			return 0;
+		};
+
+		/* Check the non ACPI modules */
+		if (!strcmp(sensor->platform_data->module_name,
+			    supported_sensors[i].pname)) {
+			sensor->sensor_ds = supported_sensors[i].ds;
+			dev_info(dev, "%s %s selected\n",
+				 __func__, supported_sensors[i].name);
+			return 0;
+		};
+	}
+
+	dev_err(dev, "%s No suitable configuration found for %s\n",
+		     __func__, dev_name(dev));
+	return -EINVAL;
+}
+
+/*
+ * Function validate the contents CRL data structure to check if all the
+ * required fields are filled and are according to the limits.
+ */
+int crlmodule_validate_ds(struct crl_sensor *sensor)
+{
+	/* TODO! Revisit this. */
+	return 0;
+}
+
+/* Function to free all resources allocated for the CRL data structure */
+void crlmodule_release_ds(struct crl_sensor *sensor)
+{
+	/*
+	 * TODO! Revisit this.
+	 * Place for cleaning all the resources used for the generation
+	 * of CRL data structure.
+	 */
+}
diff --git a/drivers/media/i2c/crlmodule/crlmodule-msrlist.c b/drivers/media/i2c/crlmodule/crlmodule-msrlist.c
new file mode 100644
index 000000000000..a15b76b921d2
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-msrlist.c
@@ -0,0 +1,158 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2016 - 2018 Intel Corporation
+
+#include <linux/i2c.h>
+#include <linux/firmware.h>
+#include "crlmodule-msrlist.h"
+#include "crlmodule.h"
+
+/*
+ *
+ * DRVB file is part of the old structure of tagged
+ * binary container, which is used as such in crlmodule.
+ * Changes needs to be done in cameralibs to remove the
+ * tagged structure and convert to untagged drvb format.
+ * Below are the tagged binary data container structure
+ * definitions. Most of it is copied from libmsrlisthelper.c
+ * and some changes done for crlmodule.
+ *
+ */
+
+static int crlmodule_write_msrlist(struct i2c_client *client, u8 *bufptr,
+					unsigned int size)
+{
+	/*
+	 *
+	 * The configuration data contains any number of sequences where
+	 * the first byte (that is, u8) that marks the number of bytes
+	 * in the sequence to follow, is indeed followed by the indicated
+	 * number of bytes of actual data to be written to sensor.
+	 * By convention, the first two bytes of actual data should be
+	 * understood as an address in the sensor address space (hibyte
+	 * followed by lobyte) where the remaining data in the sequence
+	 * will be written.
+	 *
+	 */
+
+	u8 *ptr = bufptr;
+	int ret;
+
+	while (ptr < bufptr + size) {
+		struct i2c_msg msg = {
+			.addr = client->addr,
+			.flags = 0,
+		};
+
+		msg.len = *ptr++;
+		msg.buf = ptr;
+		ptr += msg.len;
+
+		if (ptr > bufptr + size)
+			return -EINVAL;
+
+		ret = i2c_transfer(client->adapter, &msg, 1);
+		if (ret < 0) {
+			dev_err(&client->dev, "i2c write error: %d", ret);
+			return ret;
+		}
+	}
+	return 0;
+}
+
+static int crlmodule_parse_msrlist(struct i2c_client *client, u8 *buffer,
+					unsigned int size)
+{
+	u8 *endptr8 = buffer + size;
+	int ret;
+	unsigned int dataset = 0;
+	struct tbd_data_record_header *header =
+		(struct tbd_data_record_header *)buffer;
+
+	do {
+
+		if ((u8 *)header + sizeof(*header) > endptr8)
+			return -EINVAL;
+
+		if ((u8 *)header + header->data_offset +
+				header->data_size > endptr8)
+			return -EINVAL;
+
+		dataset++;
+
+		if (header->data_size && (header->flags & 1)) {
+
+			ret = crlmodule_write_msrlist(client,
+					buffer + header->data_offset,
+					header->data_size);
+			if (ret)
+				return ret;
+		}
+		header = (struct tbd_data_record_header *)(buffer +
+			header->next_offset);
+	} while (header->next_offset);
+
+	return 0;
+}
+
+
+int crlmodule_apply_msrlist(struct i2c_client *client,
+			const struct firmware *fw)
+{
+	struct tbd_header *header;
+	struct tbd_record_header *record;
+
+	header = (struct tbd_header *)fw->data;
+	record = (struct tbd_record_header *)(header + 1);
+
+	if (record->size && record->class_id != TBD_CLASS_DRV_ID)
+		return -EINVAL;
+
+	return crlmodule_parse_msrlist(client, (u8 *)(record + 1),
+			record->size);
+}
+
+
+int crlmodule_load_msrlist(struct i2c_client *client, char *name,
+		const struct firmware **fw)
+{
+
+	struct tbd_header *header;
+	struct tbd_record_header *record;
+	int ret = -ENOENT;
+
+	ret = request_firmware(fw, name, &client->dev);
+	if (ret) {
+		dev_err(&client->dev,
+			"Error %d while requesting firmware %s\n",
+			ret, name);
+		return ret;
+	}
+	header = (struct tbd_header *)(*fw)->data;
+
+	if (sizeof(*header) > (*fw)->size)
+		goto out;
+
+	/* Check that we have drvb block. */
+	if (memcmp(&header->tag, "DRVB", 4))
+		goto out;
+
+	if (header->size != (*fw)->size)
+		goto out;
+
+	if (sizeof(*header) + sizeof(*record) > (*fw)->size)
+		goto out;
+
+
+	return 0;
+
+out:
+		crlmodule_release_msrlist(fw);
+		return ret;
+}
+
+
+void crlmodule_release_msrlist(const struct firmware **fw)
+{
+	release_firmware(*fw);
+	*fw = NULL;
+}
diff --git a/drivers/media/i2c/crlmodule/crlmodule-msrlist.h b/drivers/media/i2c/crlmodule/crlmodule-msrlist.h
new file mode 100644
index 000000000000..013469bfec1a
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-msrlist.h
@@ -0,0 +1,51 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation */
+
+#ifndef __CRLMODULE_MSRLIST_H__
+#define __CRLMODULE_MSRLIST_H__
+
+#define TBD_CLASS_DRV_ID 2
+
+struct i2c_client;
+struct firmware;
+
+struct tbd_header {
+	/* Tag identifier, also checks endianness */
+	u32 tag;
+	/* Container size including this header */
+	u32 size;
+	/* Version, format 0xYYMMDDVV */
+	u32 version;
+	/* Revision, format 0xYYMMDDVV */
+	u32 revision;
+	/* Configuration flag bits set */
+	u32 config_bits;
+	/* Global checksum, header included */
+	u32 checksum;
+} __packed;
+
+struct tbd_record_header {
+	/* Size of record including header */
+	u32 size;
+	/* tbd_format_t enumeration values used */
+	u8 format_id;
+	/* Packing method; 0 = no packing */
+	u8 packing_key;
+	/* tbd_class_t enumeration values used */
+	u16 class_id;
+} __packed;
+
+struct tbd_data_record_header {
+	u16 next_offset;
+	u16 flags;
+	u16 data_offset;
+	u16 data_size;
+} __packed;
+
+int crlmodule_load_msrlist(struct i2c_client *client, char *name,
+		const struct firmware **fw);
+int crlmodule_apply_msrlist(struct i2c_client *client,
+		const struct firmware *fw);
+void crlmodule_release_msrlist(const struct firmware **fw);
+
+#endif /* ifndef __CRLMODULE_MSRLIST_H__ */
diff --git a/drivers/media/i2c/crlmodule/crlmodule-nvm.c b/drivers/media/i2c/crlmodule/crlmodule-nvm.c
new file mode 100644
index 000000000000..50d984804739
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-nvm.c
@@ -0,0 +1,141 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (C) 2016 - 2018 Intel Corporation
+ *
+ * Author: Tommi Franttila <tommi.franttila@intel.com>
+ *
+ */
+
+#include <linux/device.h>
+#include "crlmodule.h"
+#include "crlmodule-nvm.h"
+#include "crlmodule-regs.h"
+
+static ssize_t crlmodule_sysfs_nvm_read(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	struct v4l2_subdev *subdev = i2c_get_clientdata(to_i2c_client(dev));
+	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+
+	memcpy(buf, sensor->nvm_data, min_t(unsigned long, PAGE_SIZE,
+		sensor->nvm_size));
+	return sensor->nvm_size;
+}
+
+DEVICE_ATTR(nvm, S_IRUGO, crlmodule_sysfs_nvm_read, NULL);
+
+static unsigned int crlmodule_get_nvm_size(struct crl_sensor *sensor)
+{
+
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int i, size = 0;
+
+	for (i = 0; i < sensor->sensor_ds->crl_nvm_info.nvm_blobs_items; i++)
+		size += sensor->sensor_ds->crl_nvm_info.nvm_config[i].size;
+
+	if (size > PAGE_SIZE) {
+		dev_err(&client->dev, "nvm size too big\n");
+		size = 0;
+	}
+	return size;
+}
+
+static int crlmodule_get_nvm_data(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int i;
+	int rval = 0;
+
+	u8 *nvm_data = sensor->nvm_data;
+
+	if (sensor->sensor_ds->crl_nvm_info.nvm_preop_regs_items) {
+		dev_dbg(&client->dev,
+			"%s perform pre-operations\n", __func__);
+
+		rval = crlmodule_write_regs(
+			sensor,
+			sensor->sensor_ds->crl_nvm_info.nvm_preop_regs,
+			sensor->sensor_ds->crl_nvm_info.nvm_preop_regs_items);
+		if (rval) {
+			dev_err(&client->dev,
+				"failed to perform nvm pre-operations\n");
+			return rval;
+		}
+	}
+
+	for (i = 0; i < sensor->sensor_ds->crl_nvm_info.nvm_blobs_items; i++) {
+
+		dev_dbg(&client->dev,
+			"%s read blob %d dev_addr: 0x%x start_addr: 0x%x size: %d",
+			__func__, i,
+			sensor->sensor_ds->crl_nvm_info.nvm_config->dev_addr,
+			sensor->sensor_ds->crl_nvm_info.nvm_config->start_addr,
+			sensor->sensor_ds->crl_nvm_info.nvm_config->size);
+
+		crlmodule_block_read(sensor,
+			sensor->sensor_ds->crl_nvm_info.nvm_config->dev_addr,
+			sensor->sensor_ds->crl_nvm_info.nvm_config->start_addr,
+			sensor->sensor_ds->crl_nvm_info.nvm_flags
+				& CRL_NVM_ADDR_MODE_MASK,
+			sensor->sensor_ds->crl_nvm_info.nvm_config->size,
+			nvm_data);
+
+		nvm_data += sensor->sensor_ds->crl_nvm_info.nvm_config->size;
+		sensor->sensor_ds->crl_nvm_info.nvm_config++;
+	}
+
+	if (sensor->sensor_ds->crl_nvm_info.nvm_postop_regs_items) {
+		dev_dbg(&client->dev, "%s perform post-operations\n",
+			__func__);
+		rval = crlmodule_write_regs(
+			sensor,
+			sensor->sensor_ds->crl_nvm_info.nvm_postop_regs,
+			sensor->sensor_ds->crl_nvm_info.nvm_postop_regs_items);
+		if (rval) {
+			dev_err(&client->dev,
+				"failed to perform nvm post-operations\n");
+			return rval;
+		}
+	}
+	return rval;
+}
+
+int crlmodule_nvm_init(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	unsigned int size = crlmodule_get_nvm_size(sensor);
+	int rval;
+
+	if (size) {
+		sensor->nvm_data = devm_kzalloc(&client->dev, size, GFP_KERNEL);
+		if (sensor->nvm_data == NULL) {
+			dev_err(&client->dev, "nvm buf allocation failed\n");
+			return -ENOMEM;
+		}
+		sensor->nvm_size = size;
+
+		rval = crlmodule_get_nvm_data(sensor);
+		if (rval)
+			goto err;
+		if (device_create_file(&client->dev, &dev_attr_nvm) != 0) {
+			dev_err(&client->dev, "sysfs nvm entry failed\n");
+			rval = -EBUSY;
+			goto err;
+		}
+	}
+
+	return 0;
+err:
+	sensor->nvm_size = 0;
+	return rval;
+}
+
+void crlmodule_nvm_deinit(struct crl_sensor *sensor)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+
+	if (sensor->nvm_size) {
+		device_remove_file(&client->dev, &dev_attr_nvm);
+		sensor->nvm_size = 0;
+	}
+}
diff --git a/drivers/media/i2c/crlmodule/crlmodule-nvm.h b/drivers/media/i2c/crlmodule/crlmodule-nvm.h
new file mode 100644
index 000000000000..42d462d321cc
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-nvm.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2015 - 2018 Intel Corporation
+ *
+ * Author: Tommi Franttila <tommi.franttila@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_NVM_H_
+#define __CRLMODULE_NVM_H_
+
+#include "crlmodule.h"
+
+#define CRL_NVM_ADDR_MODE_8BIT  0x00000001
+#define CRL_NVM_ADDR_MODE_16BIT 0x00000002
+
+#define CRL_NVM_ADDR_MODE_MASK (CRL_NVM_ADDR_MODE_8BIT | \
+				CRL_NVM_ADDR_MODE_16BIT)
+
+
+int crlmodule_nvm_init(struct crl_sensor *sensor);
+void crlmodule_nvm_deinit(struct crl_sensor *sensor);
+
+#endif /* __CRLMODULE_NVM_H_ */
diff --git a/drivers/media/i2c/crlmodule/crlmodule-regs.c b/drivers/media/i2c/crlmodule/crlmodule-regs.c
new file mode 100644
index 000000000000..e4b8c8aa36e8
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-regs.c
@@ -0,0 +1,341 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (C) 2017 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/module.h>
+
+#include "crlmodule.h"
+#include "crlmodule-nvm.h"
+#include "crlmodule-regs.h"
+
+static DEFINE_MUTEX(crl_i2c_mutex);
+
+static bool reg_verify;
+module_param(reg_verify, bool, 0444);
+MODULE_PARM_DESC(reg_verify, "enable/disable registers write value and read value checking");
+
+static int crlmodule_i2c_read(struct crl_sensor *sensor, u16 dev_i2c_addr,
+				u16 reg, u8 len, u32 *val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct i2c_msg msg[2];
+	unsigned char data[4];
+	int r;
+
+	dev_dbg(&client->dev, "%s reg, len: [0x%04x, %d]", __func__, reg, len);
+
+	if (len != CRL_REG_LEN_08BIT && len != CRL_REG_LEN_16BIT &&
+			len != CRL_REG_LEN_24BIT && len != CRL_REG_LEN_32BIT)
+		return -EINVAL;
+
+	if (dev_i2c_addr == CRL_I2C_ADDRESS_NO_OVERRIDE)
+		msg[0].addr = client->addr;
+	else
+		msg[0].addr = dev_i2c_addr;
+
+	msg[1].addr = msg[0].addr;
+
+	msg[0].flags = 0;
+	msg[0].buf = data;
+
+	if (sensor->sensor_ds->addr_len == CRL_ADDR_7BIT) {
+		/* change address to 7bit format */
+		msg[0].addr = msg[0].addr >> 1;
+		msg[1].addr = msg[1].addr >> 1;
+	}
+	if ((sensor->sensor_ds->addr_len == CRL_ADDR_7BIT) ||
+			(sensor->sensor_ds->addr_len == CRL_ADDR_8BIT)) {
+		data[0] = (u8) (reg & 0xff);
+		msg[0].len = 1;
+	} else {
+		/* high byte goes out first */
+		data[0] = (u8) (reg >> 8);
+		data[1] = (u8) (reg & 0xff);
+		msg[0].len = 2;
+	}
+
+	msg[1].flags = I2C_M_RD;
+	msg[1].buf = data;
+	msg[1].len = len;
+
+	r = i2c_transfer(client->adapter, msg, 2);
+
+	if (r < 0)
+		goto err;
+
+	*val = 0;
+	/* high byte comes first */
+	switch (len) {
+	case CRL_REG_LEN_32BIT:
+		*val = (data[0] << 24) + (data[1] << 16) + (data[2] << 8) +
+			data[3];
+		break;
+	case CRL_REG_LEN_24BIT:
+		*val = (data[0] << 16) + (data[1] << 8) + data[2];
+		break;
+	case CRL_REG_LEN_16BIT:
+		*val = (data[0] << 8) + data[1];
+		break;
+	case CRL_REG_LEN_08BIT:
+		*val = data[0];
+		break;
+	}
+
+	return 0;
+
+err:
+	dev_err(&client->dev, "read from offset 0x%x error %d\n", reg, r);
+
+	return r;
+}
+
+static int crlmodule_i2c_write(struct crl_sensor *sensor, u16 dev_i2c_addr,
+			       u16 reg, u8 len, u32 val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct i2c_msg msg;
+	unsigned char data[6];
+	unsigned int retries;
+	int r;
+	int ret;
+	u32 rval;
+	unsigned char *data_offset;
+
+	if (len != CRL_REG_LEN_08BIT && len != CRL_REG_LEN_16BIT &&
+	    len != CRL_REG_LEN_24BIT && len != CRL_REG_LEN_32BIT)
+		return -EINVAL;
+
+	if (dev_i2c_addr == CRL_I2C_ADDRESS_NO_OVERRIDE)
+		msg.addr = client->addr;
+	else
+		msg.addr = dev_i2c_addr;
+
+	msg.flags = 0; /* Write */
+	msg.buf = data;
+
+	if (sensor->sensor_ds->addr_len == CRL_ADDR_7BIT)
+		msg.addr = msg.addr >> 1;
+
+	if ((sensor->sensor_ds->addr_len == CRL_ADDR_7BIT) ||
+		(sensor->sensor_ds->addr_len == CRL_ADDR_8BIT)) {
+		data[0] = (u8) (reg & 0xff);
+		msg.len = 1 + len;
+		data_offset = &data[1];
+	} else {
+		/* high byte goes out first */
+		data[0] = (u8) (reg >> 8);
+		data[1] = (u8) (reg & 0xff);
+		msg.len = 2 + len;
+		data_offset = &data[2];
+	}
+
+	dev_dbg(&client->dev, "%s len reg, val: [%d, 0x%04x, 0x%04x]",
+			       __func__, len, reg, val);
+
+	switch (len) {
+	case CRL_REG_LEN_08BIT:
+		val = val & 0xFF;
+		data_offset[0] = val;
+		break;
+	case CRL_REG_LEN_16BIT:
+		val = val & 0xFFFF;
+		data_offset[0] = val >> 8;
+		data_offset[1] = val;
+		break;
+	case CRL_REG_LEN_24BIT:
+		val = val & 0xFFFFFF;
+		data_offset[0] = val >> 16;
+		data_offset[1] = val >> 8;
+		data_offset[2] = val;
+		break;
+	case CRL_REG_LEN_32BIT:
+		data_offset[0] = val >> 24;
+		data_offset[1] = val >> 16;
+		data_offset[2] = val >> 8;
+		data_offset[3] = val;
+		break;
+	}
+
+	for (retries = 0; retries < 5; retries++) {
+		/*
+		 * Due to unknown reason sensor stops responding. This
+		 * loop is a temporaty solution until the root cause
+		 * is found.
+		 */
+		r = i2c_transfer(client->adapter, &msg, 1);
+		if (r == 1) {
+			if (retries)
+				dev_err(&client->dev,
+					"sensor i2c stall encountered. retries: %d\n",
+					retries);
+
+			if (reg_verify) {
+				ret  = crlmodule_i2c_read(sensor, dev_i2c_addr, reg, len, &rval);
+				if (ret < 0)
+					dev_err(&client->dev, "i2c read error\n");
+				else if (rval != val) {
+					dev_warn(&client->dev,
+							"reg:0x%x write val(0x%x), read val(0x%x)",
+							reg, val, rval);
+				}
+			}
+			return 0;
+		}
+
+		usleep_range(2000, 2000);
+	}
+
+	dev_err(&client->dev,
+		"wrote 0x%x to offset 0x%x error %d\n", val, reg, r);
+
+	return r;
+}
+
+int crlmodule_read_reg(struct crl_sensor *sensor,
+		       const struct crl_register_read_rep reg, u32 *val)
+{
+	return crlmodule_i2c_read(sensor, reg.dev_i2c_addr, reg.address,
+				  reg.len, val);
+}
+
+int crlmodule_write_reg(struct crl_sensor *sensor, u16 dev_i2c_addr, u16 reg,
+			u8 len, u32 mask, u32 val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	int ret;
+	u32 val2;
+
+	/*
+	 * Sensor setting sequence may need some delay.
+	 * delay value is specified by reg.val field
+	 */
+	if (len == CRL_REG_LEN_DELAY) {
+		msleep(val);
+		return 0;
+	}
+
+	/*
+	 * If the same register is being used for two settings, updating
+	 * one value should not overwrite the other one. Such registers
+	 * must be marked as CRL_REG_READ_AND_UPDATE. For such registers
+	 * first read the register and update it
+	 */
+
+	if (len & CRL_REG_READ_AND_UPDATE) {
+		u32 tmp;
+		/* Some rare cases 2 different devices can
+		 * make i2c accesses to same physical i2c address,
+		 * those read modify writes must be protected by static
+		 * mutex
+		 */
+		if (sensor->sensor_ds->i2c_mutex_in_use)
+			mutex_lock(&crl_i2c_mutex);
+
+		ret = crlmodule_i2c_read(sensor, dev_i2c_addr, reg,
+					 len & CRL_REG_LEN_READ_MASK, &val2);
+		if (ret) {
+			if (sensor->sensor_ds->i2c_mutex_in_use)
+				mutex_unlock(&crl_i2c_mutex);
+			return ret;
+		}
+
+		tmp = val2 & ~mask;
+		tmp |= val & mask;
+		val = tmp;
+	}
+
+	ret = crlmodule_i2c_write(sensor, dev_i2c_addr, reg,
+				  len & CRL_REG_LEN_READ_MASK, val);
+
+	if ((sensor->sensor_ds->i2c_mutex_in_use)
+			&& (len & CRL_REG_READ_AND_UPDATE))
+		mutex_unlock(&crl_i2c_mutex);
+
+	if (ret < 0) {
+		dev_err(&client->dev,
+			"error %d writing reg 0x%4.4x, val 0x%2.2x",
+			ret, reg, val);
+		return ret;
+	}
+
+	return 0;
+}
+
+int crlmodule_write_regs(struct crl_sensor *sensor,
+			 const struct crl_register_write_rep *regs, int len)
+{
+	unsigned int i;
+	int ret;
+
+	for (i = 0; i < len; i++) {
+		ret = crlmodule_write_reg(sensor,
+					regs[i].dev_i2c_addr,
+					regs[i].address,
+					regs[i].len,
+					regs[i].mask,
+					regs[i].val);
+		if (ret < 0)
+			return ret;
+	};
+
+	return 0;
+}
+
+int crlmodule_block_read(struct crl_sensor *sensor, u16 dev_i2c_addr, u16 addr,
+			 u8 addr_mode, u16 len, u8 *buf)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&sensor->src->sd);
+	struct i2c_msg msg[2];
+	u8 data[2];
+	u16 offset = 0;
+	int r;
+
+	memset(msg, 0, sizeof(msg));
+
+	if (dev_i2c_addr == CRL_I2C_ADDRESS_NO_OVERRIDE) {
+		msg[0].addr = client->addr;
+		msg[1].addr = client->addr;
+	} else {
+		msg[0].addr = dev_i2c_addr;
+		msg[1].addr = dev_i2c_addr;
+	}
+
+	if (addr_mode & CRL_NVM_ADDR_MODE_8BIT)
+		msg[0].len = 1;
+	else if (addr_mode & CRL_NVM_ADDR_MODE_16BIT)
+		msg[0].len = 2;
+	else
+		return -EINVAL;
+
+	msg[0].flags = 0;
+	msg[1].flags = I2C_M_RD;
+
+	while (offset < len) {
+		if (addr_mode & CRL_NVM_ADDR_MODE_8BIT) {
+			data[0] = addr & 0xff;
+		} else {
+			data[0] = (addr >> 8) & 0xff;
+			data[1] = addr & 0xff;
+		}
+
+		msg[0].buf = data;
+		msg[1].len = min(CRLMODULE_I2C_BLOCK_SIZE, len - offset);
+		msg[1].buf = &buf[offset];
+		r = i2c_transfer(client->adapter, msg, ARRAY_SIZE(msg));
+		if (r != ARRAY_SIZE(msg)) {
+			if (r >= 0)
+				r = -EIO;
+			goto err;
+		}
+		addr += msg[1].len;
+		offset += msg[1].len;
+	}
+	return 0;
+err:
+	dev_err(&client->dev, "read from offset 0x%x error %d\n", offset, r);
+	return r;
+}
diff --git a/drivers/media/i2c/crlmodule/crlmodule-regs.h b/drivers/media/i2c/crlmodule/crlmodule-regs.h
new file mode 100644
index 000000000000..6d84486e1ae1
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-regs.h
@@ -0,0 +1,26 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_REGS_H_
+#define __CRLMODULE_REGS_H_
+
+struct crl_sensor;
+struct crl_register_read_rep;
+struct crl_register_write_rep;
+
+#define CRLMODULE_I2C_BLOCK_SIZE 0x20
+
+int crlmodule_read_reg(struct crl_sensor *sensor,
+		       const struct crl_register_read_rep reg, u32 *val);
+int crlmodule_write_regs(struct crl_sensor *sensor,
+			 const struct crl_register_write_rep *regs, int len);
+int crlmodule_write_reg(struct crl_sensor *sensor, u16 dev_i2c_addr, u16 reg,
+			u8 len, u32 mask, u32 val);
+int crlmodule_block_read(struct crl_sensor *sensor, u16 dev_i2c_addr, u16 addr,
+			 u8 addr_mode, u16 len, u8 *buf);
+
+#endif /* __CRLMODULE_REGS_H_ */
diff --git a/drivers/media/i2c/crlmodule/crlmodule-sensor-ds.h b/drivers/media/i2c/crlmodule/crlmodule-sensor-ds.h
new file mode 100644
index 000000000000..ff03185b1025
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule-sensor-ds.h
@@ -0,0 +1,622 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_SENSOR_DS_H_
+#define __CRLMODULE_SENSOR_DS_H_
+
+#include <linux/irqreturn.h>
+#include "crlmodule.h"
+
+#define CRL_REG_LEN_08BIT			1
+#define CRL_REG_LEN_16BIT			2
+#define CRL_REG_LEN_24BIT			3
+#define CRL_REG_LEN_32BIT			4
+
+#define CRL_REG_READ_AND_UPDATE			(1 << 3)
+#define CRL_REG_LEN_READ_MASK			0x07
+#define CRL_REG_LEN_DELAY			0x10
+
+#define CRL_FLIP_DEFAULT_NONE			0
+#define CRL_FLIP_HFLIP				1
+#define CRL_FLIP_VFLIP				2
+#define CRL_FLIP_HFLIP_VFLIP			3
+
+#define CRL_FLIP_HFLIP_MASK			0xfe
+#define CRL_FLIP_VFLIP_MASK			0xfd
+
+#define CRL_PIXEL_ORDER_GRBG			0
+#define CRL_PIXEL_ORDER_RGGB			1
+#define CRL_PIXEL_ORDER_BGGR			2
+#define CRL_PIXEL_ORDER_GBRG			3
+#define CRL_PIXEL_ORDER_IGNORE			255
+
+/* Flag to notify configuration selction imact from V4l2 Ctrls */
+#define CRL_IMPACTS_NO_IMPACT			0
+#define CRL_IMPACTS_PLL_SELECTION		(1 << 1)
+#define CRL_IMPACTS_MODE_SELECTION		(1 << 2)
+
+/*
+ * In crl_dynamic_entity::entity_type is denoted by bits 6 and 7
+ * 0 -> crl_dynamic_entity:entity_value is a constant
+ * 1 -> crl_dynamic_entity:entity_value is a referene to variable
+ * 2 -> crl_dynamic_entity:entity_value is a v4l2_ctrl value
+ * 3 -> crl_dynamic_entity:entity_value is a 8 bit register address
+ */
+enum crl_dynamic_entity_type {
+	CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST = 0,
+	CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+	CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL,
+	CRL_DYNAMIC_VAL_OPERAND_TYPE_REG_VAL, /* Only 8bit registers */
+};
+
+/*
+ * For some combo device which has some devices inside itself with different
+ * i2c address, adding flag to specify whether current device needs i2c
+ * address override.
+ * For back-compatibility, making flag equals 0. So existing sensor configure
+ * doesn't need to be modified.
+ */
+#define CRL_I2C_ADDRESS_NO_OVERRIDE		0
+
+struct crl_sensor;
+struct i2c_client;
+
+enum crl_subdev_type {
+	CRL_SUBDEV_TYPE_SCALER,
+	CRL_SUBDEV_TYPE_BINNER,
+	CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+};
+
+enum crl_v4l2ctrl_op_type {
+	CRL_V4L2_CTRL_SET_OP,
+	CRL_V4L2_CTRL_GET_OP,
+};
+
+enum crl_v4l2ctrl_update_context {
+	SENSOR_IDLE, /* Powered on. But not streamind */
+	SENSOR_STREAMING, /* Sensor streaming */
+	SENSOR_POWERED_ON, /* streaming or idle */
+};
+
+enum crl_operators {
+	CRL_BITWISE_AND = 0,
+	CRL_BITWISE_OR,
+	CRL_BITWISE_LSHIFT,
+	CRL_BITWISE_RSHIFT,
+	CRL_BITWISE_XOR,
+	CRL_BITWISE_COMPLEMENT,
+	CRL_ADD,
+	CRL_SUBTRACT,
+	CRL_MULTIPLY,
+	CRL_DIV,
+	CRL_ASSIGNMENT,
+};
+
+/* Replicated from videodev2.h */
+enum crl_v4l2_ctrl_type {
+	CRL_V4L2_CTRL_TYPE_INTEGER = 1,
+	CRL_V4L2_CTRL_TYPE_BOOLEAN,
+	CRL_V4L2_CTRL_TYPE_MENU_INT,
+	CRL_V4L2_CTRL_TYPE_MENU_ITEMS,
+	CRL_V4L2_CTRL_TYPE_BUTTON,
+	CRL_V4L2_CTRL_TYPE_INTEGER64,
+	CRL_V4L2_CTRL_TYPE_CTRL_CLASS,
+	CRL_V4L2_CTRL_TYPE_CUSTOM,
+};
+
+enum crl_addr_len {
+	CRL_ADDR_16BIT = 0,
+	CRL_ADDR_8BIT,
+	CRL_ADDR_7BIT,
+};
+
+enum crl_operands {
+	CRL_CONSTANT = 0,
+	CRL_VARIABLE,
+	CRL_CONTROL,
+};
+
+/* References to the CRL driver member variables */
+enum crl_member_data_reference_ids {
+	CRL_VAR_REF_OUTPUT_WIDTH = 1,
+	CRL_VAR_REF_OUTPUT_HEIGHT,
+	CRL_VAR_REF_PA_CROP_WIDTH,
+	CRL_VAR_REF_PA_CROP_HEIGHT,
+	CRL_VAR_REF_FRAME_TIMING_WIDTH,
+	CRL_VAR_REF_FRAME_TIMING_HEIGHT,
+	CRL_VAR_REF_BINNER_WIDTH,
+	CRL_VAR_REF_BINNER_HEIGHT,
+	CRL_VAR_REF_H_BINN_FACTOR,
+	CRL_VAR_REF_V_BINN_FACTOR,
+	CRL_VAR_REF_SCALE_FACTOR,
+	CRL_VAR_REF_BITSPERPIXEL,
+	CRL_VAR_REF_PIXELRATE_PA,
+	CRL_VAR_REF_PIXELRATE_CSI,
+	CRL_VAR_REF_PIXELRATE_LINK_FREQ,
+};
+
+enum crl_frame_desc_type {
+	CRL_V4L2_MBUS_FRAME_DESC_TYPE_PLATFORM,
+	CRL_V4L2_MBUS_FRAME_DESC_TYPE_PARALLEL,
+	CRL_V4L2_MBUS_FRAME_DESC_TYPE_CCP2,
+	CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+};
+
+enum crl_pwr_ent_type {
+	CRL_POWER_ETY_GPIO_FROM_PDATA = 1,
+	CRL_POWER_ETY_GPIO_FROM_PDATA_BY_NUMBER,
+	CRL_POWER_ETY_GPIO_CUSTOM,
+	CRL_POWER_ETY_REGULATOR_FRAMEWORK,
+	CRL_POWER_ETY_CLK_FRAMEWORK,
+};
+
+struct crl_dynamic_entity {
+	enum crl_dynamic_entity_type entity_type;
+	u32 entity_val;
+};
+
+struct crl_arithmetic_ops {
+	enum crl_operators op;
+	struct crl_dynamic_entity operand;
+};
+
+struct crl_dynamic_calculated_entity {
+	u8 ops_items;
+	struct crl_arithmetic_ops *ops;
+};
+
+struct crl_register_write_rep {
+	u16 address;
+	u8 len;
+	u32 val;
+	u16 dev_i2c_addr;
+	u32 mask;
+};
+
+struct crl_register_read_rep {
+	u16 address;
+	u8 len;
+	u32 mask;
+	u16 dev_i2c_addr;
+};
+
+/*
+ * crl_dynamic_register_access is used mainly in the v4l2_ctrl context.
+ * This is intended to provide some generic arithmetic operations on the values
+ * to be written to a control's register or on the values read from a register.
+ * These arithmetic operations are controlled using struct crl_arithmetic_ops.
+ *
+ * One important information is that this structure behave differently for the
+ * set controls and volatile get controls.
+ *
+ * For the set control operation, the usage of the members are straight forward.
+ * The set control can result into multiple register write operations. Hence
+ * there can be more than one crl_dynamic_register_access entries associated
+ * with a control which results into separate register writes.
+ *
+ * But for the volatile get control operation, where a v4l2 control is used
+ * to query read only information from the sensor, there could be only one
+ * crl_dynamic_register_access entry. Because the result of a get control is
+ * a single value. crl_dynamic_register_access.address, len and mask values are
+ * not used in volatile get control context. Instead all the needed information
+ * must be encoded into member -> ops (struct crl_arithmetic_ops)
+ */
+struct crl_dynamic_register_access {
+	u16 address;
+	u8 len;
+	u32 mask;
+	u8 ops_items;
+	struct crl_arithmetic_ops *ops;
+	u16 dev_i2c_addr;
+};
+
+struct crl_sensor_detect_config {
+	struct crl_register_read_rep reg; /* Register to read */
+	unsigned int width; /* width of the value in chars*/
+};
+
+struct crl_sensor_subdev_config {
+	enum crl_subdev_type subdev_type;
+	char name[32];
+};
+
+/*
+ * The ctrl id value pair which should be compared when selecting a
+ * configuration. This gives flexibility to provide any data through set ctrl
+ * and provide selection mechanism for a particular configuration
+ */
+struct crl_ctrl_data_pair {
+	u32 ctrl_id;
+	u32 data;
+};
+
+enum crl_dep_ctrl_action_type {
+	CRL_DEP_CTRL_ACTION_TYPE_SELF = 0,
+	CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL,
+};
+
+enum crl_dep_ctrl_condition {
+	CRL_DEP_CTRL_CONDITION_GREATER = 0,
+	CRL_DEP_CTRL_CONDITION_LESSER,
+	CRL_DEP_CTRL_CONDITION_EQUAL,
+};
+
+enum crl_dep_ctrl_action {
+	CRL_DEP_CTRL_CONDITION_ADD = 0,
+	CRL_DEP_CTRL_CONDITION_SUBTRACT,
+	CRL_DEP_CTRL_CONDITION_MULTIPLY,
+	CRL_DEP_CTRL_CONDITION_DIVIDE,
+};
+
+struct crl_dep_ctrl_cond_action {
+	enum crl_dep_ctrl_condition cond;
+	u32 cond_value;
+	enum crl_dep_ctrl_action action;
+	u32 action_value;
+};
+
+/* Dependency control provision */
+struct crl_dep_ctrl_provision {
+	u32 ctrl_id;
+	enum crl_dep_ctrl_action_type action_type;
+	unsigned int action_items;
+	struct crl_dep_ctrl_cond_action *action;
+};
+
+/*
+ * Multiple set of register lists can be written to
+ * the sensor configuration based on the control's value
+ * struct crl_dep_reg_list introduces a provision for this
+ * purpose.
+ *
+ * struct crl_dep_reg_list *dep_regs;
+ *
+ * In dep_regs, a "condition" and "value" is added which is
+ * compared with ctrl->val and the register list that is to
+ * be written to the sensor.
+ *
+ * Example: For a v4l2_ctrl, if we need to set
+ * reg_list A when ctrl->val > 60
+ * reg_list B when ctrl->val < 60
+ * and reg_list C when ctrl->val == 60
+ *
+ * So dep_regs block should be like this in the sensor
+ * specific configuration file:
+ *
+ * dep_regs = {
+ *	{
+ *	reg_condition =	CRL_DEP_CTRL_CONDITION_GREATER,
+ *	cond_value = { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 60 },
+ *	no_direct_regs = sizeof(X)
+ *	direct_regs = X
+ *	no_dyn_items = sizeof(A)
+ *	dyn_regs = A
+ *	},
+ *	{
+ *	reg_condition = CRL_DEP_CTRL_CONDITION_LESSER,
+ *	cond_value = { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 60 },
+ *	no_direct_regs = 0
+ *	direct_regs = 0
+ *	no_dyn_items = sizeof(B)
+ *	dyn_regs = B
+ *	},
+ *	{
+ *	reg_condition = CRL_DEP_CTRL_CONDITION_EQUAL,
+ *	cond_value = { CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST, 60 },
+ *	no_direct_regs = sizeof(Z)
+ *	direct_regs = Z
+ *	no_dyn_items = size(C)
+ *	dyn_regs = C
+ *	},
+ * }
+ * cond_value is defined as dynamic entity, which can be a constant,
+ * another control value or a reference to the pre-defined set of variables
+ * or a register value.
+ *
+ * CRL driver will execute the above dep_regs in the same order
+ * as it is written. care must be taken for eample in the cases
+ * like, ctrl->val > 60, reg_list A. and if ctrl_val > 80,
+ * reg_list D etc.
+ */
+
+struct crl_dep_reg_list {
+	enum crl_dep_ctrl_condition reg_cond;
+	struct crl_dynamic_entity cond_value;
+	unsigned int no_direct_regs;
+	struct crl_register_write_rep *direct_regs;
+	unsigned int no_dyn_items;
+	struct crl_dynamic_register_access *dyn_regs;
+};
+
+struct crl_sensor_limits {
+	unsigned int x_addr_max;
+	unsigned int y_addr_max;
+	unsigned int x_addr_min;
+	unsigned int y_addr_min;
+	unsigned int min_frame_length_lines;
+	unsigned int max_frame_length_lines;
+	unsigned int min_line_length_pixels;
+	unsigned int max_line_length_pixels;
+	u8 scaler_m_min;
+	u8 scaler_m_max;
+	u8 scaler_n_min;
+	u8 scaler_n_max;
+	u8 min_even_inc;
+	u8 max_even_inc;
+	u8 min_odd_inc;
+	u8 max_odd_inc;
+};
+
+struct crl_v4l2_ctrl_data_std {
+	s64 min;
+	s64 max;
+	u64 step;
+	s64 def;
+};
+
+struct crl_v4l2_ctrl_data_menu_items {
+	const char *const *menu;
+	unsigned int size;
+};
+
+struct crl_v4l2_ctrl_data_std_menu {
+	const int64_t *std_menu;
+	unsigned int size;
+};
+
+struct crl_v4l2_ctrl_data_int_menu {
+	const s64 *menu;
+	s64 max;
+	s64 def;
+};
+
+union crl_v4l2_ctrl_data_types {
+	struct crl_v4l2_ctrl_data_std std_data;
+	struct crl_v4l2_ctrl_data_menu_items v4l2_menu_items;
+	struct crl_v4l2_ctrl_data_std_menu  v4l2_std_menu;
+	struct crl_v4l2_ctrl_data_int_menu v4l2_int_menu;
+};
+
+/*
+ * Please note a difference in the usage of "regs" member in case of a
+ * volatile get control for read only purpose. Please check the
+ * "struct crl_dynamic_register_access" declaration comments for more details.
+ *
+ * Read only controls must have "flags" V4L2_CTRL_FLAG_READ_ONLY set.
+ */
+struct crl_v4l2_ctrl {
+	enum crl_subdev_type sd_type;
+	enum crl_v4l2ctrl_op_type op_type;
+	enum crl_v4l2ctrl_update_context context;
+	char name[32];
+	u32 ctrl_id;
+	enum crl_v4l2_ctrl_type type;
+	union crl_v4l2_ctrl_data_types data;
+	unsigned long flags;
+	u32 impact; /* If this control impact any config selection */
+	struct v4l2_ctrl *ctrl;
+	unsigned int regs_items;
+	struct crl_dynamic_register_access *regs;
+	unsigned int dep_items;
+	struct crl_dep_ctrl_provision *dep_ctrls;
+	enum v4l2_ctrl_type v4l2_type;
+	unsigned int crl_ctrl_dep_reg_list; /* contains no. of dep_regs */
+	struct crl_dep_reg_list *dep_regs;
+};
+
+struct crl_pll_configuration {
+	s64 input_clk;
+	s64 op_sys_clk;
+	u8 bitsperpixel;
+	u32 pixel_rate_csi;
+	u32 pixel_rate_pa;
+	u8 csi_lanes;
+	unsigned int comp_items;
+	struct crl_ctrl_data_pair *ctrl_data;
+	unsigned int pll_regs_items;
+	const struct crl_register_write_rep *pll_regs;
+};
+
+struct crl_subdev_rect_rep {
+	enum crl_subdev_type subdev_type;
+	struct v4l2_rect in_rect;
+	struct v4l2_rect out_rect;
+};
+
+struct crl_mode_rep {
+	unsigned int sd_rects_items;
+	const struct crl_subdev_rect_rep *sd_rects;
+	u8 binn_hor;
+	u8 binn_vert;
+	u8 scale_m;
+	s32 width;
+	s32 height;
+	unsigned int comp_items;
+	struct crl_ctrl_data_pair *ctrl_data;
+	unsigned int mode_regs_items;
+	const struct crl_register_write_rep *mode_regs;
+
+	/*
+	 * Minimum and maximum value for line length pixels and frame length
+	 * lines are added for modes. This facilitates easy handling of
+	 * modes which binning skipping and affects the calculation of
+	 * vblank and hblank values.
+	 *
+	 * The blank values are limited based on the following logic
+	 *
+	 * If mode specific limits are available
+	 * vblank = clamp(min_llp - PA_width, max_llp - PA_width)
+	 * hblank = clamp(min_fll - PA_Height, max_fll - PA_Height
+	 *
+	 * If mode specific blanking limits are not available, then the sensor
+	 * limits will be used in the same manner.
+	 *
+	 * If sensor mode limits are not available, then the values will be
+	 * written directly to the associated control registers.
+	 */
+	s32 min_llp; /* minimum/maximum value for line length pixels */
+	s32 max_llp;
+	s32 min_fll;
+	s32 max_fll; /* minimum/maximum value for frame length lines */
+};
+
+struct crl_csi_data_fmt {
+	u32 code;
+	u8 pixel_order;
+	u8 bits_per_pixel;
+	unsigned int regs_items;
+	const struct crl_register_write_rep *regs;
+};
+
+struct crl_flip_data {
+	u8 flip;
+	u8 pixel_order;
+};
+
+struct crl_power_seq_entity {
+	enum crl_pwr_ent_type type;
+	char ent_name[12];
+	int ent_number;
+	u16 address;
+	unsigned int val;
+	unsigned int undo_val; /* Undo value if any previous step failed */
+	unsigned int delay; /* delay in micro seconds */
+	struct regulator *regulator_priv; /* R/W */
+	struct gpio_desc *gpiod_priv;
+};
+
+struct crl_nvm_blob {
+	u8 dev_addr;
+	u16 start_addr;
+	u16 size;
+};
+
+struct crl_nvm {
+	unsigned int nvm_preop_regs_items;
+	const struct crl_register_write_rep *nvm_preop_regs;
+
+	unsigned int nvm_postop_regs_items;
+	const struct crl_register_write_rep *nvm_postop_regs;
+
+	unsigned int nvm_blobs_items;
+	struct crl_nvm_blob *nvm_config;
+	u32 nvm_flags;
+};
+
+/* Representation for v4l2_mbus_frame_desc_entry */
+struct crl_frame_desc {
+	struct crl_dynamic_entity flags;
+	struct crl_dynamic_entity bpp;
+	struct crl_dynamic_entity pixelcode;
+	struct crl_dynamic_entity start_line;
+	struct crl_dynamic_entity start_pixel;
+	struct crl_dynamic_calculated_entity width;
+	struct crl_dynamic_calculated_entity height;
+	struct crl_dynamic_entity length;
+	struct crl_dynamic_entity csi2_channel;
+	struct crl_dynamic_entity csi2_data_type;
+};
+
+typedef int (*sensor_specific_init)(struct i2c_client *);
+typedef int (*sensor_specific_cleanup)(struct i2c_client *);
+
+struct crl_sensor_configuration {
+
+	const struct crl_clock_entity *clock_entity;
+
+	const unsigned int power_items;
+	const struct crl_power_seq_entity *power_entities;
+	const unsigned int power_delay; /* in micro seconds */
+
+	const unsigned int onetime_init_regs_items;
+	const struct crl_register_write_rep *onetime_init_regs;
+
+	const unsigned int powerup_regs_items;
+	const struct crl_register_write_rep *powerup_regs;
+
+	const unsigned int poweroff_regs_items;
+	const struct crl_register_write_rep *poweroff_regs;
+
+	const unsigned int id_reg_items;
+	const struct crl_sensor_detect_config *id_regs;
+
+	const unsigned int subdev_items;
+	const struct crl_sensor_subdev_config *subdevs;
+
+	const struct crl_sensor_limits *sensor_limits;
+
+	const unsigned int pll_config_items;
+	const struct crl_pll_configuration *pll_configs;
+
+	const unsigned int modes_items;
+	const struct crl_mode_rep *modes;
+	/*
+	 * Fail safe mode should be the largest resolution available in the
+	 * mode list. If none of the mode parameters are matched, the driver
+	 * will select this mode for streaming.
+	 */
+	const unsigned int fail_safe_mode_index;
+
+	const unsigned int streamon_regs_items;
+	const struct crl_register_write_rep *streamon_regs;
+
+	const unsigned int streamoff_regs_items;
+	const struct crl_register_write_rep *streamoff_regs;
+
+	const unsigned int v4l2_ctrls_items;
+	const struct crl_v4l2_ctrl *v4l2_ctrl_bank;
+
+	const unsigned int csi_fmts_items;
+	const struct crl_csi_data_fmt *csi_fmts;
+
+	const unsigned int flip_items;
+	const struct crl_flip_data *flip_data;
+
+	struct crl_nvm crl_nvm_info;
+
+	enum crl_addr_len addr_len;
+
+	unsigned int frame_desc_entries;
+	enum crl_frame_desc_type frame_desc_type;
+	struct crl_frame_desc *frame_desc;
+	char *msr_file_name;
+
+	sensor_specific_init sensor_init;
+	sensor_specific_cleanup sensor_cleanup;
+	/*
+	 * Irq handlers for threaded irq. These are needed if driver need to
+	 * handle gpio interrupt. crl_threaded_irq_fn is then mandatory. Irq
+	 * pin configuration is in platform data.
+	 */
+	irqreturn_t (*crl_irq_fn)(int irq, void *sensor_struct);
+	irqreturn_t (*crl_threaded_irq_fn)(int irq, void *sensor_struct);
+	const bool irq_in_use;
+	const bool i2c_mutex_in_use;
+};
+
+struct crlmodule_sensors {
+	char *pname;
+	char *name;
+	struct crl_sensor_configuration *ds;
+};
+
+/*
+ * Function to populate the CRL data structure from the sensor configuration
+ * definition file
+ */
+int crlmodule_populate_ds(struct crl_sensor *sensor, struct device *dev);
+
+/*
+ * Function validate the contents CRL data structure to check if all the
+ * required fields are filled and are according to the limits.
+ */
+int crlmodule_validate_ds(struct crl_sensor *sensor);
+
+/* Function to free all resources allocated for the CRL data structure */
+void crlmodule_release_ds(struct crl_sensor *sensor);
+
+#endif /* __CRLMODULE_SENSOR_DS_H_ */
diff --git a/drivers/media/i2c/crlmodule/crlmodule.h b/drivers/media/i2c/crlmodule/crlmodule.h
new file mode 100644
index 000000000000..e68e82fd0634
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crlmodule.h
@@ -0,0 +1,125 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ *
+ * Author: Vinod Govindapillai <vinod.govindapillai@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_PRIV_H_
+#define __CRLMODULE_PRIV_H_
+
+#include <linux/i2c.h>
+#include <linux/mutex.h>
+#include <linux/types.h>
+#include <linux/firmware.h>
+#include "../../../../include/media/crlmodule.h"
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-subdev.h>
+#include "../../../../include/uapi/linux/crlmodule.h"
+#include "crlmodule-sensor-ds.h"
+
+#define CRL_SUBDEVS			3
+
+#define CRL_PA_PAD_SRC			0
+#define CRL_PAD_SINK			0
+#define CRL_PAD_SRC			1
+#define CRL_PADS			2
+
+struct crl_subdev {
+	struct v4l2_subdev sd;
+	struct media_pad pads[2];
+	struct v4l2_rect sink_fmt;
+	struct v4l2_rect crop[2];
+	struct v4l2_rect compose; /* compose on sink */
+	unsigned short sink_pad;
+	unsigned short source_pad;
+	int npads;
+	struct crl_sensor *sensor;
+	struct v4l2_ctrl_handler ctrl_handler;
+	unsigned int field;
+	unsigned int *route_flags;
+};
+
+struct crl_sensor {
+	/*
+	 * "mutex" is used to serialise access to all fields here
+	 * except v4l2_ctrls at the end of the struct. "mutex" is also
+	 * used to serialise access to file handle specific
+	 * information. The exception to this rule is the power_mutex
+	 * below.
+	 */
+	struct mutex mutex;
+	/*
+	 * power mutex became necessity because of the v4l2_ctrl_handler_setup
+	 * is being called from power on function which needs to be serialised
+	 * but v4l2_ctrl_handler setup uses "mutex" so it cannot be used.
+	 */
+	struct mutex power_mutex;
+
+	struct crl_subdev ssds[CRL_SUBDEVS];
+	u32 ssds_used;
+	struct crl_subdev *src;
+	struct crl_subdev *binner;
+	struct crl_subdev *scaler;
+	struct crl_subdev *pixel_array;
+
+	struct crlmodule_platform_data *platform_data;
+
+	u8 binning_horizontal;
+	u8 binning_vertical;
+
+	u8 sensor_mode;
+	u8 scale_m;
+	u8 fmt_index;
+	u8 flip_info;
+	u8 pll_index;
+
+
+	int power_count;
+
+	bool streaming;
+
+	struct crl_sensor_configuration *sensor_ds;
+	struct crl_v4l2_ctrl *v4l2_ctrl_bank;
+
+	/* These are mandatory controls. So good to have reference to these */
+	struct v4l2_ctrl *pixel_rate_pa;
+	struct v4l2_ctrl *link_freq;
+	struct v4l2_ctrl *pixel_rate_csi;
+
+	s64 *link_freq_menu;
+
+	/* If extra v4l2 contrl has an impact on PLL selection */
+	bool ext_ctrl_impacts_pll_selection;
+	bool ext_ctrl_impacts_mode_selection;
+	bool blanking_ctrl_not_use;
+	bool direct_mode_in_use;
+	const struct crl_mode_rep *current_mode;
+
+	struct clk *xclk;
+	struct crl_power_seq_entity *pwr_entity;
+	unsigned int irq;
+
+	u8 *nvm_data;
+	u16 nvm_size;
+
+	/* Pointer to binary file which contains
+	 * tunable IQ parameters like NR, DPC, BLC
+	 * Not all MSR's are moved to the binary
+	 * at the moment.
+	 */
+	const struct firmware *msr_list;
+	/*
+	 * Pointer to store sensor specific data structure, that
+	 * can be used for example in interrupt specific code.
+	 */
+	void *sensor_specific_data;
+};
+
+#define to_crlmodule_subdev(_sd)				\
+	container_of(_sd, struct crl_subdev, sd)
+
+#define to_crlmodule_sensor(_sd)	\
+	(to_crlmodule_subdev(_sd)->sensor)
+
+#endif /* __CRLMODULE_PRIV_H_ */
diff --git a/include/media/crlmodule.h b/include/media/crlmodule.h
new file mode 100644
index 000000000000..ead1beba73f2
--- /dev/null
+++ b/include/media/crlmodule.h
@@ -0,0 +1,43 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2014 - 2018 Intel Corporation
+ * Generic driver for common register list based camera sensor modules
+ *
+ */
+
+#ifndef __CRLMODULE_H
+#define __CRLMODULE_H
+
+#include <media/v4l2-subdev.h>
+
+#define CRLMODULE_NAME		"crlmodule"
+
+#define CRL_MAX_CUSTOM_GPIO_AMOUNT 3
+
+struct crl_custom_gpio {
+	char name[16];
+	int number;
+	unsigned int val;
+	unsigned int undo_val;
+};
+
+struct crlmodule_platform_data {
+	unsigned short i2c_addr;
+	unsigned short i2c_adapter;
+
+	unsigned int ext_clk;		/* sensor external clk */
+
+	unsigned int lanes;		/* Number of CSI-2 lanes */
+	const s64 *op_sys_clock;
+
+	int xshutdown;			/* gpio */
+	struct crl_custom_gpio custom_gpio[CRL_MAX_CUSTOM_GPIO_AMOUNT];
+	char module_name[16]; /* module name from ACPI */
+	int crl_irq_pin;
+	unsigned int irq_pin_flags;
+	char irq_pin_name[16];
+	const char *id_string;
+	char suffix; /* suffix to identify multi sensors, abcd.. */
+	unsigned int high_framevalid_flags; /* high framevaild flags*/
+};
+
+#endif /* __CRLMODULE_H  */
diff --git a/include/uapi/linux/crlmodule.h b/include/uapi/linux/crlmodule.h
new file mode 100644
index 000000000000..8bcb8c92830f
--- /dev/null
+++ b/include/uapi/linux/crlmodule.h
@@ -0,0 +1,76 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2016 - 2018 Intel Corporation */
+
+#ifndef UAPI_LINUX_CRLMODULE_H
+#define UAPI_LINUX_CRLMODULE_H
+
+#define REGS_BUF_SIZE			32
+/**
+ * struct crl_registers_info - the information for register.
+ * @start_address: sensor i2c start address.
+ * @number:        the number of registers to be read/write.
+ * @len:           register length, 1:8bit, 2:16bit, 3:24bit, 4:32bit.
+ * @regs:          the array of registers.
+ */
+struct crl_registers_info {
+	unsigned int start_address;
+	unsigned int number;
+	unsigned int len;
+	unsigned int regs[REGS_BUF_SIZE];
+};
+
+#define CRL_G_REGISTERS			_IOWR('C', 1, struct crl_registers_info)
+#define CRL_S_REGISTERS			_IOW('C', 2, struct crl_registers_info)
+
+#define V4L2_CID_CRLMODULE_BASE		(V4L2_CID_USER_BASE + 0x2050)
+
+#define V4L2_CID_FRAME_LENGTH_LINES (V4L2_CID_CRLMODULE_BASE + 1)
+#define V4L2_CID_LINE_LENGTH_PIXELS (V4L2_CID_CRLMODULE_BASE + 2)
+#define CRL_CID_SENSOR_THERMAL_DATA (V4L2_CID_CRLMODULE_BASE + 3)
+
+/*
+ * Select sensor mode directly, driver programs media pad
+ * formats as in configuration file
+ */
+#define CRL_CID_SENSOR_MODE (V4L2_CID_CRLMODULE_BASE + 4)
+
+/* IMX230 HDR specific controls */
+#define CRL_CID_IMX230_HDR_MODE		(V4L2_CID_CRLMODULE_BASE + 5)
+#define CRL_CID_IMX230_HDR_ET_RATIO	(V4L2_CID_CRLMODULE_BASE + 6)
+
+/* Set multi-exposure frame in HDR with different exposure value */
+#define CRL_CID_EXPOSURE_SHS1		(V4L2_CID_CRLMODULE_BASE + 8)
+#define CRL_CID_EXPOSURE_SHS2		(V4L2_CID_CRLMODULE_BASE + 9)
+#define CRL_CID_EXPOSURE_SHS3		(V4L2_CID_CRLMODULE_BASE + 10)
+#define CRL_CID_EXPOSURE_RHS1		(V4L2_CID_CRLMODULE_BASE + 11)
+#define CRL_CID_EXPOSURE_RHS2		(V4L2_CID_CRLMODULE_BASE + 12)
+
+/* Switch to enable/disable PDAF settings */
+#define CRL_CID_SENSOR_PDAF		(V4L2_CID_CRLMODULE_BASE + 13)
+
+/* Set multi-digital gain */
+#define CRL_CID_DIGITAL_GAIN_L		(V4L2_CID_CRLMODULE_BASE + 14)
+#define CRL_CID_DIGITAL_GAIN_S		(V4L2_CID_CRLMODULE_BASE + 15)
+#define CRL_CID_DIGITAL_GAIN_VS		(V4L2_CID_CRLMODULE_BASE + 16)
+
+/* Get sensor bit linear */
+#define CRL_CID_SENSOR_BIT_LINEAR	(V4L2_CID_CRLMODULE_BASE + 17)
+
+/* set sensor msb align*/
+#define CRL_CID_MSB_ALIGN		(V4L2_CID_CRLMODULE_BASE + 18)
+
+/* enable/disable auto exposure */
+#define CRL_CID_AUTO_EXPOSURE_DEBUG	(V4L2_CID_CRLMODULE_BASE + 19)
+
+/* set analog gain for HDR frames */
+#define CRL_CID_ANALOG_GAIN_L		(V4L2_CID_CRLMODULE_BASE + 20)
+#define CRL_CID_ANALOG_GAIN_S		(V4L2_CID_CRLMODULE_BASE + 21)
+#define CRL_CID_ANALOG_GAIN_VS		(V4L2_CID_CRLMODULE_BASE + 22)
+
+/* Set exposure mode: Linear mode or 2-/3-/4-HDR mode */
+#define CRL_CID_EXPOSURE_MODE		(V4L2_CID_CRLMODULE_BASE + 23)
+
+/* Set HDR mode exposure ratio */
+#define CRL_CID_EXPOSURE_HDR_RATIO	(V4L2_CID_CRLMODULE_BASE + 24)
+
+#endif /* UAPI_LINUX_CRLMODULE_H */
-- 
2.17.1

