From 06b96352c7fa9d652646ff1cad5479055644dfae Mon Sep 17 00:00:00 2001
From: Yin Fengwei <fengwei.yin@intel.com>
Date: Fri, 6 Sep 2019 07:52:32 +0800
Subject: [PATCH 150/150] vhm: ioreq: Use acquire API in ioreq state check side

In ioreq state check side also need to use order API to make
sure correct ioreq state is seen before other ioreq fields
check. To pair with atomic_set_release in update side, we use
atomic_read_acquire in check side.

Because all the ioreq client will check ioreq state before
further process ioreq, add common vhm API to do check and
update all ioreq client to use this API.

Signed-off-by: Min He <min.he@intel.com>
Signed-off-by: Yin Fengwei <fengwei.yin@intel.com>
---
 drivers/vbs/vbs.c                  | 3 +--
 drivers/vhm/vhm_ioeventfd.c        | 3 +--
 include/linux/vhm/acrn_vhm_ioreq.h | 8 ++++++++
 3 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/drivers/vbs/vbs.c b/drivers/vbs/vbs.c
index aaec862a59ec..0feb28e96b0d 100644
--- a/drivers/vbs/vbs.c
+++ b/drivers/vbs/vbs.c
@@ -167,8 +167,7 @@ int virtio_vqs_index_get(struct virtio_dev_info *dev,
 		if (vcpu == dev->_ctx.max_vcpu)
 			break;
 		req = &dev->_ctx.req_buf[vcpu];
-		if (atomic_read(&req->processed) == REQ_STATE_PROCESSING &&
-		    req->client == dev->_ctx.vhm_client_id) {
+		if (is_ioreq_ready_for_process(req, dev->_ctx.vhm_client_id)) {
 			if (req->reqs.pio_request.direction == REQUEST_READ) {
 				/* currently we handle kick only,
 				 * so read will return 0
diff --git a/drivers/vhm/vhm_ioeventfd.c b/drivers/vhm/vhm_ioeventfd.c
index 845747bf4be5..7f039e8cb764 100644
--- a/drivers/vhm/vhm_ioeventfd.c
+++ b/drivers/vhm/vhm_ioeventfd.c
@@ -354,8 +354,7 @@ static int acrn_ioeventfd_dispatch_ioreq(int client_id,
 		if (vcpu == info->vcpu_num)
 			break;
 		req = &info->req_buf[vcpu];
-		if (atomic_read(&req->processed) == REQ_STATE_PROCESSING &&
-			req->client == client_id) {
+		if (is_ioreq_ready_for_process(req, client_id)) {
 			if (req->type == REQ_MMIO) {
 				if (req->reqs.mmio_request.direction ==
 						REQUEST_READ) {
diff --git a/include/linux/vhm/acrn_vhm_ioreq.h b/include/linux/vhm/acrn_vhm_ioreq.h
index 401bcdc85460..69657789134d 100644
--- a/include/linux/vhm/acrn_vhm_ioreq.h
+++ b/include/linux/vhm/acrn_vhm_ioreq.h
@@ -60,6 +60,7 @@
 
 #include <linux/poll.h>
 #include <linux/vhm/vhm_vm_mngt.h>
+#include <linux/vhm/acrn_common.h>
 
 typedef	int (*ioreq_handler_t)(int client_id, unsigned long *ioreqs_map);
 
@@ -199,4 +200,11 @@ int acrn_ioreq_create_fallback_client(unsigned long vmid, char *name);
 unsigned int vhm_dev_poll(struct file *filep, poll_table *wait);
 
 void acrn_ioreq_driver_init(void);
+
+static __always_inline bool is_ioreq_ready_for_process(struct vhm_request *req,
+	int client_id)
+{
+	return (atomic_read_acquire(&req->processed) == REQ_STATE_PROCESSING &&
+			req->client == client_id);
+}
 #endif
-- 
2.17.1

