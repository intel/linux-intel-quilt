From b2020ad3dc24d851c1ecc34e960b39c328a31abe Mon Sep 17 00:00:00 2001
From: wsit <michael.wei.hong.sit@intel.com>
Date: Fri, 29 Jun 2018 11:05:17 +0800
Subject: [PATCH 4/9] ASoC:Intel:KMB: Enable multiple bit depth audio

Added capability to natively support 16bit and 24bit audio

Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Signed-off-by: Sia Jee Heng <jee.heng.sia@intel.com>
---
 sound/soc/intel/boards/kmb-mach.c      | 40 +++++++++++---------
 sound/soc/intel/keembay/kmb_platform.c | 59 ++++++++++++++++--------------
 sound/soc/intel/keembay/kmb_platform.h | 67 +++++++++++++++++-----------------
 3 files changed, 88 insertions(+), 78 deletions(-)

diff --git a/sound/soc/intel/boards/kmb-mach.c b/sound/soc/intel/boards/kmb-mach.c
index b809a3b..9f0f02b 100644
--- a/sound/soc/intel/boards/kmb-mach.c
+++ b/sound/soc/intel/boards/kmb-mach.c
@@ -27,8 +27,8 @@
 #include <sound/pcm_params.h>
 
 /* I2S support */
-#define I2S_MONO_CHANNEL 1
-#define I2S_STEREO_CHANNEL 2
+#define I2S_MONO_CHANNEL	1
+#define I2S_STEREO_CHANNEL	2
 
 #define I2S_MIN_RATE		8000
 #define I2S_MAX_RATE		48000
@@ -43,19 +43,21 @@
 
 static struct snd_pcm_hardware kmb_pcm_hw_stereo = {
 	.info =	(SNDRV_PCM_INFO_INTERLEAVED |
-			SNDRV_PCM_INFO_DOUBLE |
-			SNDRV_PCM_INFO_PAUSE |
-			SNDRV_PCM_INFO_RESUME |
-			SNDRV_PCM_INFO_MMAP|
-			SNDRV_PCM_INFO_MMAP_VALID |
-			SNDRV_PCM_INFO_BLOCK_TRANSFER |
-			SNDRV_PCM_INFO_SYNC_START),
-	.formats = (SNDRV_PCM_FMTBIT_S32_LE),
+		 SNDRV_PCM_INFO_DOUBLE |
+		 SNDRV_PCM_INFO_PAUSE |
+		 SNDRV_PCM_INFO_RESUME |
+		 SNDRV_PCM_INFO_MMAP|
+		 SNDRV_PCM_INFO_MMAP_VALID |
+		 SNDRV_PCM_INFO_BLOCK_TRANSFER |
+		 SNDRV_PCM_INFO_SYNC_START),
+	.formats = SNDRV_PCM_FMTBIT_S16_LE |
+		   SNDRV_PCM_FMTBIT_S24_LE |
+		   SNDRV_PCM_FMTBIT_S32_LE,
 	.rates = (SNDRV_PCM_RATE_CONTINUOUS),
 	.rate_min = I2S_MIN_RATE,
 	.rate_max = I2S_MAX_RATE,
-	.channels_min =	I2S_MONO_CHANNEL,
-	.channels_max =	I2S_STEREO_CHANNEL,
+	.channels_min = I2S_MONO_CHANNEL,
+	.channels_max = I2S_STEREO_CHANNEL,
 	.buffer_bytes_max = I2S_MAX_BUFFER,
 	.period_bytes_min = I2S_MIN_PERIOD_BYTES,
 	.period_bytes_max = I2S_MAX_PERIOD_BYTES,
@@ -101,8 +103,8 @@ static int kmb_mach_dai_link_hw_params(struct snd_pcm_substream *substream,
 	unsigned int fmt;
 
 	fmt =   SND_SOC_DAIFMT_I2S |
-			SND_SOC_DAIFMT_NB_NF |
-			SND_SOC_DAIFMT_CBS_CFS; //Codec Slave, SSP Master
+		SND_SOC_DAIFMT_NB_NF |
+		SND_SOC_DAIFMT_CBS_CFS; //Codec Slave, SSP Master
 	return 0;
 } /* kmb_mach_dai_link_hw_params*/
 
@@ -120,10 +122,14 @@ static int kmb_mach_dai_link_startup(struct snd_pcm_substream *substream)
 						&constraints_2ch);
 
 	ret |= snd_pcm_hw_constraint_mask64(str_runtime,
-						SNDRV_PCM_HW_PARAM_FORMAT, SNDRV_PCM_FMTBIT_S32_LE);
+						SNDRV_PCM_HW_PARAM_FORMAT,
+						SNDRV_PCM_FMTBIT_S16_LE |
+						SNDRV_PCM_FMTBIT_S24_LE |
+						SNDRV_PCM_FMTBIT_S32_LE);
 
 	if (ret) {
-		pr_debug("%s : Fail to set channel constraint for stereo\n", __func__);
+		pr_debug("%s : Fail to set channel constraint for stereo\n",
+				__func__);
 		return ret;
 	}
 
@@ -208,4 +214,4 @@ MODULE_DESCRIPTION("Intel Audio machine driver for KeemBay");
 MODULE_AUTHOR("Sia Jee Heng <jee.heng.sia@intel.com>");
 MODULE_AUTHOR("Sit, Michael Wei Hong <michael.wei.hong.sit@intel.com>");
 MODULE_LICENSE("GPL v2");
-MODULE_ALIAS("platform:kmb_mach");
+MODULE_ALIAS("platform:kmb_mach");
\ No newline at end of file
diff --git a/sound/soc/intel/keembay/kmb_platform.c b/sound/soc/intel/keembay/kmb_platform.c
index c9e026c..dab457e 100644
--- a/sound/soc/intel/keembay/kmb_platform.c
+++ b/sound/soc/intel/keembay/kmb_platform.c
@@ -123,13 +123,13 @@ static const struct snd_pcm_hardware kmb_pcm_hardware = {
 		SNDRV_PCM_INFO_MMAP_VALID |
 		SNDRV_PCM_INFO_BLOCK_TRANSFER,
 	.rates = SNDRV_PCM_RATE_32000 |
-		SNDRV_PCM_RATE_44100 |
-		SNDRV_PCM_RATE_48000,
+		 SNDRV_PCM_RATE_44100 |
+		 SNDRV_PCM_RATE_48000,
 	.rate_min = 16000,
 	.rate_max = 48000,
 	.formats = SNDRV_PCM_FMTBIT_S16_LE |
-		SNDRV_PCM_FMTBIT_S24_LE |
-		SNDRV_PCM_FMTBIT_S32_LE,
+		   SNDRV_PCM_FMTBIT_S24_LE |
+		   SNDRV_PCM_FMTBIT_S32_LE,
 	.channels_min = 2,
 	.channels_max = 2,
 	.buffer_bytes_max = BUFFER_BYTES_MAX,
@@ -165,11 +165,11 @@ static inline void i2s_disable_channels(struct kmb_i2s_info *dev, u32 stream)
 	u32 i = 0;
 
 	if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
-//		for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
-			i2s_write_reg(dev->i2s_base, TER(i), 0);
+//	for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
+		i2s_write_reg(dev->i2s_base, TER(i), 0);
 	} else {
-//		for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
-			i2s_write_reg(dev->i2s_base, RER(i), 0);
+//	for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
+		i2s_write_reg(dev->i2s_base, RER(i), 0);
 	}
 }
 
@@ -178,11 +178,11 @@ static inline void i2s_clear_irqs(struct kmb_i2s_info *dev, u32 stream)
 	u32 i = 0;
 
 	if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
-//		for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
-			i2s_read_reg(dev->i2s_base, TOR(i));
+//	for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
+		i2s_read_reg(dev->i2s_base, TOR(i));
 	} else {
-//		for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
-			i2s_read_reg(dev->i2s_base, ROR(i));
+//	for (i = 0; i < 4; i++) // Commented out for single I2S port on PSS
+		i2s_read_reg(dev->i2s_base, ROR(i));
 	}
 }
 
@@ -249,9 +249,8 @@ static void kmb_pcm_transfer(struct kmb_i2s_info *dev, bool push)
 			cmpxchg(&dev->rx_ptr, ptr, new_ptr);
 		}
 
-		if (period_elapsed) {
+		if (period_elapsed)
 			snd_pcm_period_elapsed(substream);
-		}
 	}
 	rcu_read_unlock();
 }
@@ -561,10 +560,6 @@ static int kmb_dai_startup(struct snd_pcm_substream *substream,
 static void kmb_dai_shutdown(struct snd_pcm_substream *substream,
 			     struct snd_soc_dai *cpu_dai)
 {
-/*
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_card *card = rtd->card;
-*/
 	snd_soc_dai_set_dma_data(cpu_dai, substream, NULL);
 } /* kmb_dai_shutdown */
 
@@ -773,13 +768,15 @@ static struct snd_soc_dai_ops kmb_dai_ops = {
 			SNDRV_PCM_RATE_16000 | SNDRV_PCM_RATE_22050 | \
 			SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000)
 
-#define I2S_SAMPLE_RATES (SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_CONTINUOUS)
+#define I2S_SAMPLE_RATES (SNDRV_PCM_RATE_8000_192000 | \
+			SNDRV_PCM_RATE_CONTINUOUS)
 
-#define I2S_SUPPORTED_FORMATS (SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S24_3LE | \
-			SNDRV_PCM_FMTBIT_S16_LE | \
-			SNDRV_PCM_FMTBIT_U16_LE | \
-			SNDRV_PCM_FMTBIT_S8 | \
-			SNDRV_PCM_FMTBIT_U8)
+#define I2S_SUPPORTED_FORMATS (SNDRV_PCM_FMTBIT_S24_LE | \
+			       SNDRV_PCM_FMTBIT_S24_3LE | \
+			       SNDRV_PCM_FMTBIT_S16_LE | \
+			       SNDRV_PCM_FMTBIT_U16_LE | \
+			       SNDRV_PCM_FMTBIT_S8 | \
+			       SNDRV_PCM_FMTBIT_U8)
 
 
 static struct snd_soc_dai_driver intel_kmb_platform_dai[] = {
@@ -792,7 +789,9 @@ static struct snd_soc_dai_driver intel_kmb_platform_dai[] = {
 			.rate_min = I2S_MIN_RATE,
 			.rate_max = I2S_MAX_RATE,
 			/*FIXME: Used constraint list for i2s vs tdm8*/
-			.formats = (SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_S24_LE),
+			.formats = (SNDRV_PCM_FMTBIT_S32_LE |
+				    SNDRV_PCM_FMTBIT_S24_LE |
+				    SNDRV_PCM_FMTBIT_S16_LE),
 		},
 		.capture = {
 			.channels_min = I2S_STEREO_CHANNEL,
@@ -801,7 +800,9 @@ static struct snd_soc_dai_driver intel_kmb_platform_dai[] = {
 			.rate_min = I2S_MIN_RATE,
 			.rate_max = I2S_MAX_RATE,
 			/*FIXME: Used constraint list for i2s vs tdm8*/
-			.formats = (SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_S24_LE),
+			.formats = (SNDRV_PCM_FMTBIT_S32_LE |
+				    SNDRV_PCM_FMTBIT_S24_LE |
+				    SNDRV_PCM_FMTBIT_S16_LE),
 		},
 		.ops = &kmb_dai_ops,
 		.probe = kmb_probe,
@@ -930,11 +931,13 @@ static int kmb_plat_dai_probe(struct platform_device *pdev)
 	write_cpr_reg(cpr_base, 0x0, 0xE3FFFFFF);
 	write_cpr_reg(cpr_base, 0x11C, 0x1FF8000F);
 
-	i2s_info = devm_kzalloc(&pdev->dev, sizeof(struct kmb_i2s_info), GFP_KERNEL);
+	i2s_info = devm_kzalloc(&pdev->dev, sizeof(struct kmb_i2s_info),
+				GFP_KERNEL);
 	if (!i2s_info)
 		return -ENOMEM;
 
-	kmb_i2s_dai = devm_kzalloc(&pdev->dev, sizeof(*kmb_i2s_dai), GFP_KERNEL);
+	kmb_i2s_dai = devm_kzalloc(&pdev->dev, sizeof(*kmb_i2s_dai),
+				GFP_KERNEL);
 	if (!kmb_i2s_dai)
 		return -ENOMEM;
 
diff --git a/sound/soc/intel/keembay/kmb_platform.h b/sound/soc/intel/keembay/kmb_platform.h
index e7c5a5c..11886c9 100644
--- a/sound/soc/intel/keembay/kmb_platform.h
+++ b/sound/soc/intel/keembay/kmb_platform.h
@@ -44,10 +44,10 @@
 #define I2S_MAX_PERIODS		50
 #define I2S_FIFO_SIZE		0
 
-#define NUMBER_OF_I2S_PORT      4
+#define NUMBER_OF_I2S_PORT	4
 /* I2S support */
-#define I2S_MONO_CHANNEL 1
-#define I2S_STEREO_CHANNEL 2
+#define I2S_MONO_CHANNEL	1
+#define I2S_STEREO_CHANNEL	2
 
 #define I2S_MAX_BUFFER		96000
 #define I2S_MIN_BUFFER		96000
@@ -55,24 +55,27 @@
 #define I2S_MAX_PERIOD_BYTES	48000
 
 /* TDM 8 support */
-#define I2S_TDM8_CHANNEL 8
+#define I2S_TDM8_CHANNEL	8
 
-#define I2S_MAX_BUFFER_TDM		768000 /*500ms@48,4bytes,8ch - BYT*/
-#define I2S_MIN_PERIOD_BYTES_TDM	2560  /*10ms@8kHz,4bytes,8ch - BYT*/
-#define I2S_MAX_PERIOD_BYTES_TDM	76800 /*Use DMA transfer limit or 50ms@48,4bytes,8ch - BYT*/
+/*500ms@48,4bytes,8ch - BYT*/
+#define I2S_MAX_BUFFER_TDM		768000
+/*10ms@8kHz,4bytes,8ch - BYT*/
+#define I2S_MIN_PERIOD_BYTES_TDM	2560
+/*Use DMA transfer limit or 50ms@48,4bytes,8ch - BYT*/
+#define I2S_MAX_PERIOD_BYTES_TDM	76800
 
 #define TRISTATE_BIT			0
 #define FRAME_SYNC_RELATIVE_TIMING_BIT	1
 #define DUMMY_START_ONE_PERIOD_OFFSET	2
-#define DUMMY_START_ONE_PERIOD_MASK     0x3
+#define DUMMY_START_ONE_PERIOD_MASK	0x3
 
 #define IS_TRISTATE_ENABLED(x) (x & BIT(TRISTATE_BIT))
 #define IS_NEXT_FRMS_ASSERTED_WITH_LSB_PREVIOUS_FRM(x) \
 			((x & BIT(FRAME_SYNC_RELATIVE_TIMING_BIT)) \
-					>> FRAME_SYNC_RELATIVE_TIMING_BIT)
+				>> FRAME_SYNC_RELATIVE_TIMING_BIT)
 #define IS_DUMMY_START_ONE_PERIOD_OFFSET(x) \
 			((x >> DUMMY_START_ONE_PERIOD_OFFSET) \
-					& DUMMY_START_ONE_PERIOD_MASK)
+				& DUMMY_START_ONE_PERIOD_MASK)
 
 #define I2S_RX_FIFO_THRESHOLD 8
 #define I2S_TX_FIFO_THRESHOLD 8
@@ -120,17 +123,17 @@
  * Component parameter register fields - define the I2S block's
  * configuration.
  */
-#define	COMP1_TX_WORDSIZE_3(r)	(((r) & GENMASK(27, 25)) >> 25)
-#define	COMP1_TX_WORDSIZE_2(r)	(((r) & GENMASK(24, 22)) >> 22)
-#define	COMP1_TX_WORDSIZE_1(r)	(((r) & GENMASK(21, 19)) >> 19)
-#define	COMP1_TX_WORDSIZE_0(r)	(((r) & GENMASK(18, 16)) >> 16)
-#define	COMP1_TX_CHANNELS(r)	(((r) & GENMASK(10, 9)) >> 9)
-#define	COMP1_RX_CHANNELS(r)	(((r) & GENMASK(8, 7)) >> 7)
-#define	COMP1_RX_ENABLED(r)	(((r) & BIT(6)) >> 6)
-#define	COMP1_TX_ENABLED(r)	(((r) & BIT(5)) >> 5)
-#define	COMP1_MODE_EN(r)	(((r) & BIT(4)) >> 4)
+#define	COMP1_TX_WORDSIZE_3(r)		(((r) & GENMASK(27, 25)) >> 25)
+#define	COMP1_TX_WORDSIZE_2(r)		(((r) & GENMASK(24, 22)) >> 22)
+#define	COMP1_TX_WORDSIZE_1(r)		(((r) & GENMASK(21, 19)) >> 19)
+#define	COMP1_TX_WORDSIZE_0(r)		(((r) & GENMASK(18, 16)) >> 16)
+#define	COMP1_TX_CHANNELS(r)		(((r) & GENMASK(10, 9)) >> 9)
+#define	COMP1_RX_CHANNELS(r)		(((r) & GENMASK(8, 7)) >> 7)
+#define	COMP1_RX_ENABLED(r)		(((r) & BIT(6)) >> 6)
+#define	COMP1_TX_ENABLED(r)		(((r) & BIT(5)) >> 5)
+#define	COMP1_MODE_EN(r)		(((r) & BIT(4)) >> 4)
 #define	COMP1_FIFO_DEPTH_GLOBAL(r)	(((r) & GENMASK(3, 2)) >> 2)
-#define	COMP1_APB_DATA_WIDTH(r)	(((r) & GENMASK(1, 0)) >> 0)
+#define	COMP1_APB_DATA_WIDTH(r)		(((r) & GENMASK(1, 0)) >> 0)
 
 #define	COMP2_RX_WORDSIZE_3(r)	(((r) & GENMASK(12, 10)) >> 10)
 #define	COMP2_RX_WORDSIZE_2(r)	(((r) & GENMASK(9, 7)) >> 7)
@@ -144,23 +147,23 @@
 #define MAX_CHANNEL_NUM		8
 #define MIN_CHANNEL_NUM		2
 
-#define DW_I2S_MASTER	(1 << 3)
+#define DW_I2S_MASTER		(1 << 3)
 #define TWO_CHANNEL_SUPPORT	2	/* up to 2.0 */
 #define FOUR_CHANNEL_SUPPORT	4	/* up to 3.1 */
 #define SIX_CHANNEL_SUPPORT	6	/* up to 5.1 */
 #define EIGHT_CHANNEL_SUPPORT	8	/* up to 7.1 */
 
-	#define DWC_I2S_PLAY	(1 << 0)
-	#define DWC_I2S_RECORD	(1 << 1)
-	#define DW_I2S_SLAVE	(1 << 2)
-	#define DW_I2S_MASTER	(1 << 3)
+#define DWC_I2S_PLAY	(1 << 0)
+#define DWC_I2S_RECORD	(1 << 1)
+#define DW_I2S_SLAVE	(1 << 2)
+#define DW_I2S_MASTER	(1 << 3)
 
-#define I2S_RXDMA		0x01C0
-#define I2S_TXDMA		0x01C8
+#define I2S_RXDMA	0x01C0
+#define I2S_TXDMA	0x01C8
 
-	#define DW_I2S_QUIRK_COMP_REG_OFFSET	(1 << 0)
-	#define DW_I2S_QUIRK_COMP_PARAM1	(1 << 1)
-	#define DW_I2S_QUIRK_16BIT_IDX_OVERRIDE (1 << 2)
+#define DW_I2S_QUIRK_COMP_REG_OFFSET	(1 << 0)
+#define DW_I2S_QUIRK_COMP_PARAM1	(1 << 1)
+#define DW_I2S_QUIRK_16BIT_IDX_OVERRIDE	(1 << 2)
 
 /*
  * Structures Definition
@@ -234,7 +237,6 @@ struct  kmb_alsa_i2s_stream_info {
 	int length;
 };
 
-
 /*
  * Enum Definition
  */
@@ -247,5 +249,4 @@ enum kmb_alsa_i2s_stream_status {
 	KMB_ALSA_i2s_STREAM_DROPPED,
 };
 
-
-#endif /* KMB_PLATFORM_H_ */
+#endif /* KMB_PLATFORM_H_ */
\ No newline at end of file
-- 
2.7.4

