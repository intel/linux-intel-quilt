From 3760f7d63ae523ece1d8f9da2c6f36b19aed8a57 Mon Sep 17 00:00:00 2001
From: Zhao Yakui <yakui.zhao@intel.com>
Date: Tue, 16 Oct 2018 13:38:25 +0800
Subject: [PATCH 099/150] VHM: Setup the driver ISR for hypervisor
 up-notification vector

Currently the acrn-hypervisor is using the PLATFORM_IPI vector to notify
the sos_kernel. And then sos_kernel will handle the notification from acrn
hypervisor in PLATFORM_IPI ISR. But as the PLATFORM_IPI ISR can be registered
by the other modules, it will have the conflict when trying to register
acrn intr ISR. So the HYPERVISOR_CALLBACK_VECTOR will be used instead.

This patch tries to notify the hypervisor so that the hypervisor notifies
the kernel by using HYPERVISOR_CALLBACK_VECTOR instead of PLATFORM_IPI.

v1->v2: It is unnecessary to switch the notification vector as ACRN hypervisor
already uses HYPERVICSOR_CALLBACK_VECOTR as the default up-call notification
vector

Tracked-on: https://github.com/projectacrn/acrn-hypervisor/issues/1325
Signed-off-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/char/vhm/vhm_dev.c | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/drivers/char/vhm/vhm_dev.c b/drivers/char/vhm/vhm_dev.c
index 11923bda93af..7eb14e7835d0 100644
--- a/drivers/char/vhm/vhm_dev.c
+++ b/drivers/char/vhm/vhm_dev.c
@@ -85,6 +85,7 @@
 #include <linux/vhm/vhm_eventfd.h>
 
 #include <asm/hypervisor.h>
+#include <asm/acrnhyper.h>
 
 #define  DEVICE_NAME "acrn_vhm"
 #define  CLASS_NAME  "vhm"
@@ -676,7 +677,6 @@ static struct attribute_group vhm_attr_group = {
 #define SUPPORT_HV_API_VERSION_MINOR	0
 static int __init vhm_init(void)
 {
-	unsigned long flag;
 	struct hc_api_version api_version = {0, 0};
 
 	if (x86_hyper_type != X86_HYPER_ACRN)
@@ -727,14 +727,8 @@ static int __init vhm_init(void)
 	}
 	pr_info("register IPI handler\n");
 	tasklet_init(&vhm_io_req_tasklet, io_req_tasklet, 0);
-	if (x86_platform_ipi_callback) {
-		pr_warn("vhm: ipi callback was occupied\n");
-		return -EINVAL;
-	}
-	local_irq_save(flag);
-	x86_platform_ipi_callback = vhm_intr_handler;
-	local_irq_restore(flag);
 
+	acrn_setup_intr_irq(vhm_intr_handler);
 	if (sysfs_create_group(&vhm_device->kobj, &vhm_attr_group)) {
 		pr_warn("vhm: sysfs create failed\n");
 		return -EINVAL;
@@ -746,6 +740,7 @@ static int __init vhm_init(void)
 static void __exit vhm_exit(void)
 {
 	tasklet_kill(&vhm_io_req_tasklet);
+	acrn_remove_intr_irq();
 	device_destroy(vhm_class, MKDEV(major, 0));
 	class_unregister(vhm_class);
 	class_destroy(vhm_class);
-- 
2.17.1

