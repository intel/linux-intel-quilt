From 422d5dd6eb6d858cd4755cad464c946d7afa001e Mon Sep 17 00:00:00 2001
From: "Bandi,Kushal" <kushal.bandi@intel.com>
Date: Fri, 25 May 2018 16:14:08 -0700
Subject: [PATCH 2023/2302] media: intel-ipu4: [VIRT] Adding Buffer mapping &
 virtual stream initialization.

1] Addition of virtual streams devs equivalent to native devs.
This will help to create 1:1 mapping between FE & BE

2] Adding frame buffer handler for para virtualized driver.
For both user_ptr and dma memory type, sg list will be created &
will forwarded in to request msg to BE.
BE will then mmap to CSS addr space.

Change-Id: I8846dd8ad86d14eaff712f331dcc47274ba56a2e
Signed-off-by: Yu, Ong Hock <ong.hock.yu@intel.com>
Signed-off-by: Bandi, Kushal <kushal.bandi@intel.com>
---
 .../pci/intel/virtio/intel-ipu4-para-virt-drv.c    | 609 +++++++++++++++++++--
 .../pci/intel/virtio/intel-ipu4-para-virt-drv.h    |  19 +-
 .../media/pci/intel/virtio/intel-ipu4-virtio-be.c  |  16 +-
 .../pci/intel/virtio/intel-ipu4-virtio-bridge.c    |  11 +-
 .../pci/intel/virtio/intel-ipu4-virtio-common.h    |  13 +-
 .../media/pci/intel/virtio/intel-ipu4-virtio-fe.c  |  24 +-
 6 files changed, 613 insertions(+), 79 deletions(-)

diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
index d29be28..2d2f5d0 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
@@ -3,11 +3,6 @@
  * Copyright (C) 2018 Intel Corporation
  */
 
-
-#include <linux/init.h>
-#include <linux/kernel.h>
-#include <linux/device.h>
-#include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/miscdevice.h>
 #include <linux/kthread.h>
@@ -15,33 +10,451 @@
 #include <linux/fs.h>
 #include <linux/file.h>
 #include <linux/slab.h>
-#include <linux/delay.h>
-#include <linux/uaccess.h>
+#include <linux/vmalloc.h>
+#include <linux/dma-buf.h>
 
-#include "./ici/ici-isys-stream.h"
 #include "intel-ipu4-virtio-common.h"
 #include "intel-ipu4-virtio-bridge.h"
+#include "intel-ipu4-para-virt-drv.h"
+
 
 #define MAX_STREAM_DEVICES 64
 
+
 static dev_t virt_stream_dev_t;
 static struct class *virt_stream_class;
 static int virt_stream_devs_registered;
 static int stream_dev_init;
-static struct ici_stream_device *strm_dev;
 
+static int get_userpages(struct device *dev,
+			struct ici_frame_plane *frame_plane,
+			struct ici_kframe_plane *kframe_plane)
+{
+	unsigned long start, end, addr;
+	int npages, array_size;
+	struct page **pages;
+	int nr = 0;
+	int ret = 0;
+	struct sg_table *sgt;
+	unsigned int i;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+    DEFINE_DMA_ATTRS(attrs);
+#else
+    unsigned long attrs;
+#endif
+
+	addr = (unsigned long)frame_plane->mem.userptr;
+	start = addr & PAGE_MASK;
+	end = PAGE_ALIGN(addr + frame_plane->length);
+	npages = (end - start) >> PAGE_SHIFT;
+	array_size = npages * sizeof(struct page *);
+
+	if (!npages)
+		return -EINVAL;
+
+	sgt = kzalloc(sizeof(*sgt), GFP_KERNEL);
+	if (!sgt)
+		return -ENOMEM;
+
+	if (array_size <= PAGE_SIZE)
+		pages = kzalloc(array_size, GFP_KERNEL);
+	else
+		pages = vzalloc(array_size);
+	if (!pages)
+		return -ENOMEM;
+
+	down_read(&current->mm->mmap_sem);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+	nr = get_user_pages(
+				current, current->mm,
+				start, npages, 1, 0, pages, NULL);
+#else
+    nr = get_user_pages(start, npages, FOLL_WRITE, pages, NULL);
+#endif
+	if (nr < npages)
+		goto error_free_pages;
+
+    ret = sg_alloc_table_from_pages(sgt, pages, npages,
+					addr & ~PAGE_MASK, frame_plane->length,
+					GFP_KERNEL);
+	if (ret) {
+		printk(KERN_ERR "Failed to init sgt\n");
+		goto error_free_pages;
+	}
+
+	kframe_plane->dev = dev;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+	sgt->nents = dma_map_sg_attrs(dev, sgt->sgl,
+				sgt->orig_nents, DMA_FROM_DEVICE, &attrs);
+#else
+	attrs = DMA_ATTR_SKIP_CPU_SYNC;
+	sgt->nents = dma_map_sg_attrs(dev, sgt->sgl,
+				sgt->orig_nents, DMA_FROM_DEVICE, attrs);
+#endif
+
+	if (sgt->nents <= 0) {
+		printk(KERN_ERR "Failed to init dma_map\n");
+		ret = -EIO;
+		goto error_dma_map;
+	}
+	kframe_plane->dma_addr = sg_dma_address(sgt->sgl);
+	kframe_plane->sgt = sgt;
+
+error_free_page_list:
+	if (pages) {
+		if (array_size <= PAGE_SIZE)
+			kfree(pages);
+		else
+			vfree(pages);
+	}
+	up_read(&current->mm->mmap_sem);
+	return ret;
+
+error_dma_map:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+    dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
+			DMA_FROM_DEVICE, &attrs);
+#else
+    dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
+			DMA_FROM_DEVICE, attrs);
+#endif
+
+error_free_pages:
+	if (pages) {
+		for (i = 0; i < nr; i++)
+			put_page(pages[i]);
+	}
+	kfree(sgt);
+	goto error_free_page_list;
+}
+
+static struct ici_frame_buf_wrapper *frame_buf_lookup(struct ici_isys_frame_buf_list *buf_list, struct ici_frame_info *user_frame_info)
+{
+	struct ici_frame_buf_wrapper *buf;
+	int i;
+	int mem_type = user_frame_info->mem_type;
+
+	list_for_each_entry(buf, &buf_list->getbuf_list, node) {
+		for (i = 0; i < user_frame_info->num_planes; i++) {
+			struct ici_frame_plane *new_plane =	&user_frame_info->frame_planes[i];
+			struct ici_frame_plane *cur_plane =	&buf->frame_info.frame_planes[i];
+
+			if (buf->state != ICI_BUF_PREPARED &&
+				buf->state != ICI_BUF_DONE)
+				continue;
+
+			switch (mem_type) {
+			case ICI_MEM_USERPTR:
+				if (new_plane->mem.userptr ==
+					cur_plane->mem.userptr)
+					return buf;
+				break;
+			case ICI_MEM_DMABUF:
+				if (new_plane->mem.dmafd ==
+					cur_plane->mem.dmafd)
+					return buf;
+				break;
+			}
+			//TODO: add multiplaner checks
+		}
+	}
+	return NULL;
+}
+static void put_userpages(struct ici_kframe_plane *kframe_plane)
+{
+	struct sg_table *sgt = kframe_plane->sgt;
+	struct scatterlist *sgl;
+	unsigned int i;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+    DEFINE_DMA_ATTRS(attrs);
+#else
+    unsigned long attrs;
+#endif
+
+	struct mm_struct *mm = current->active_mm;
+	if (!mm) {
+		printk(KERN_ERR "Failed to get active mm_struct ptr from current process.\n");
+		return;
+	}
+
+	down_read(&mm->mmap_sem);
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+	dma_unmap_sg_attrs(kframe_plane->dev, sgt->sgl, sgt->orig_nents,
+				DMA_FROM_DEVICE, &attrs);
+#else
+    attrs = DMA_ATTR_SKIP_CPU_SYNC;
+	dma_unmap_sg_attrs(kframe_plane->dev, sgt->sgl, sgt->orig_nents,
+				DMA_FROM_DEVICE, attrs);
+#endif
+
+	for_each_sg(sgt->sgl, sgl, sgt->orig_nents, i) {
+		struct page *page = sg_page(sgl);
+
+		unsigned int npages = PAGE_ALIGN(sgl->offset + sgl->length)	>> PAGE_SHIFT;
+		unsigned int page_no;
+
+		for (page_no = 0; page_no < npages; ++page_no, ++page) {
+			set_page_dirty_lock(page);
+			put_page(page);
+		}
+	}
+
+	kfree(sgt);
+	kframe_plane->sgt = NULL;
+
+	up_read(&mm->mmap_sem);
+}
+
+static void put_dma(struct ici_kframe_plane	*kframe_plane)
+{
+	struct sg_table *sgt = kframe_plane->sgt;
+
+	if (WARN_ON(!kframe_plane->db_attach)) {
+		pr_err("trying to unpin a not attached buffer\n");
+		return;
+	}
+
+	if (WARN_ON(!sgt)) {
+		pr_err("dmabuf buffer is already unpinned\n");
+		return;
+	}
+
+	if (kframe_plane->kaddr) {
+		dma_buf_vunmap(kframe_plane->db_attach->dmabuf,
+		kframe_plane->kaddr);
+		kframe_plane->kaddr = NULL;
+	}
+	dma_buf_unmap_attachment(kframe_plane->db_attach, sgt,
+							 DMA_BIDIRECTIONAL);
+
+	kframe_plane->dma_addr = 0;
+	kframe_plane->sgt = NULL;
+
+}
+
+static int map_dma(struct device *dev, struct ici_frame_plane *frame_plane,
+				   struct ici_kframe_plane	*kframe_plane)
+{
+
+	int ret = 0;
+	int fd = frame_plane->mem.dmafd;
+
+	kframe_plane->dbdbuf = dma_buf_get(fd);
+	if (!kframe_plane->dbdbuf) {
+		ret = -EINVAL;
+		goto error;
+	}
+
+	if (frame_plane->length == 0)
+		kframe_plane->length = kframe_plane->dbdbuf->size;
+	else
+		kframe_plane->length = frame_plane->length;
+
+	kframe_plane->fd = fd;
+	kframe_plane->db_attach = dma_buf_attach(kframe_plane->dbdbuf, dev);
+
+	if (IS_ERR(kframe_plane->db_attach)) {
+		ret = PTR_ERR(kframe_plane->db_attach);
+		goto error_put;
+	}
+
+	kframe_plane->sgt = dma_buf_map_attachment(kframe_plane->db_attach,
+				DMA_BIDIRECTIONAL);
+	if (IS_ERR_OR_NULL(kframe_plane->sgt)) {
+		ret = -EINVAL;
+		kframe_plane->sgt = NULL;
+		printk(KERN_DEBUG "map attachment failed\n");
+		goto error_detach;
+	}
+
+	kframe_plane->dma_addr = sg_dma_address(kframe_plane->sgt->sgl);
+	kframe_plane->kaddr = dma_buf_vmap(kframe_plane->dbdbuf);
+
+	if (!kframe_plane->kaddr) {
+		ret = -EINVAL;
+		goto error_detach;
+	}
+
+	printk(KERN_DEBUG "MAPBUF: mapped fd %d\n", fd);
+
+	return 0;
+
+error_detach:
+	dma_buf_detach(kframe_plane->dbdbuf, kframe_plane->db_attach);
+error_put:
+	dma_buf_put(kframe_plane->dbdbuf);
+error:
+	return ret;
+}
+
+static void unmap_buf(struct ici_frame_buf_wrapper *buf)
+{
+	int i;
+
+	for (i = 0; i < buf->frame_info.num_planes; i++) {
+		struct ici_kframe_plane *kframe_plane =
+			&buf->kframe_info.planes[i];
+		switch (kframe_plane->mem_type) {
+		case ICI_MEM_USERPTR:
+			put_userpages(kframe_plane);
+		break;
+		case ICI_MEM_DMABUF:
+			put_dma(kframe_plane);
+		break;
+		default:
+			printk(KERN_ERR "not supported memory type: %d\n",
+				kframe_plane->mem_type);
+		break;
+		}
+	}
+}
+int get_buf(struct virtual_stream *vstream,
+				struct ici_frame_info *frame_info)
+{
+	int res;
+	unsigned i;
+	struct ici_frame_buf_wrapper *buf;
+
+	struct ici_kframe_plane *kframe_plane;
+	struct ici_isys_frame_buf_list *buf_list = &vstream->buf_list;
+	int mem_type = frame_info->mem_type;
+
+	if (mem_type != ICI_MEM_USERPTR && mem_type != ICI_MEM_DMABUF) {
+		printk(KERN_ERR "Memory type not supproted\n");
+		return -EINVAL;
+	}
+
+	if (!frame_info->frame_planes[0].length) {
+		printk(KERN_ERR "User length not set\n");
+		return -EINVAL;
+	}
+	buf = frame_buf_lookup(buf_list, frame_info);
+
+	if (buf) {
+		buf->state = ICI_BUF_PREPARED;
+		return 0;
+	}
+
+	buf = kzalloc(sizeof(*buf), GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	buf->buf_id = frame_info->frame_buf_id;
+	buf->buf_list = buf_list;
+	memcpy(&buf->frame_info, frame_info, sizeof(buf->frame_info));
+
+	switch (mem_type) {
+	case ICI_MEM_USERPTR:
+		if (!frame_info->frame_planes[0].mem.userptr) {
+			printk(KERN_ERR "User pointer not define\n");
+			return -EINVAL;
+		}
+		for (i = 0; i < frame_info->num_planes; i++) {
+			kframe_plane = &buf->kframe_info.planes[i];
+			kframe_plane->mem_type = ICI_MEM_USERPTR;
+			res = get_userpages(&vstream->strm_dev.dev,
+								&frame_info->frame_planes[i],
+								kframe_plane);
+			if (res)
+				return res;
+		}
+		break;
+	case ICI_MEM_DMABUF:
+		for (i = 0; i < frame_info->num_planes; i++) {
+			kframe_plane = &buf->kframe_info.planes[i];
+			kframe_plane->mem_type = ICI_MEM_DMABUF;
+			res = map_dma(&vstream->strm_dev.dev,
+						  &frame_info->frame_planes[i],
+						  kframe_plane);
+			if (res)
+				return res;
+		}
+		break;
+	}
+
+	mutex_lock(&buf_list->mutex);
+	buf->state = ICI_BUF_PREPARED;
+	list_add_tail(&buf->node, &buf_list->getbuf_list);
+	mutex_unlock(&buf_list->mutex);
+	return 0;
+}
+
+int put_buf(struct virtual_stream *vstream,
+				struct ici_frame_info *frame_info,
+				unsigned int f_flags)
+{
+	struct ici_frame_buf_wrapper *buf;
+	struct ici_isys_frame_buf_list *buf_list = &vstream->buf_list;
+	unsigned long flags = 0;
+	int rval;
+
+	spin_lock_irqsave(&buf_list->lock, flags);
+	if (list_empty(&buf_list->putbuf_list)) {
+		/* Wait */
+		spin_unlock_irqrestore(&buf_list->lock, flags);
+		if (!(f_flags & O_NONBLOCK)) {
+			rval = wait_event_interruptible(buf_list->wait,
+							!list_empty(&buf_list->putbuf_list));
+			spin_lock_irqsave(&buf_list->lock, flags);
+			if (rval == -ERESTARTSYS)
+				return rval;
+		}
+	}
 
+	if (list_empty(&buf_list->putbuf_list)) {
+		spin_unlock_irqrestore(&buf_list->lock, flags);
+		return -ENODATA;
+	}
 
-static int ici_isys_set_format(struct file *file, void *fh,
+	buf = list_entry(buf_list->putbuf_list.next,
+			struct ici_frame_buf_wrapper, node);
+	list_del(&buf->node);
+	spin_unlock_irqrestore(&buf_list->lock, flags);
+
+	mutex_lock(&buf_list->mutex);
+	buf->state = ICI_BUF_DONE;
+	list_add_tail(&buf->node, &buf_list->getbuf_list);
+	mutex_unlock(&buf_list->mutex);
+	memcpy(frame_info, &buf->frame_info, sizeof(buf->frame_info));
+
+	return 0;
+}
+
+//Call from Stream-OFF and if Stream-ON fails
+void buf_stream_cancel(struct virtual_stream *vstream)
+{
+	struct ici_isys_frame_buf_list *buf_list = &vstream->buf_list;
+	struct ici_frame_buf_wrapper *buf;
+	struct ici_frame_buf_wrapper *next_buf;
+
+	list_for_each_entry_safe(buf, next_buf, &buf_list->getbuf_list, node) {
+		list_del(&buf->node);
+		unmap_buf(buf);
+	}
+	list_for_each_entry_safe(buf, next_buf, &buf_list->putbuf_list, node) {
+		list_del(&buf->node);
+		unmap_buf(buf);
+	}
+	list_for_each_entry_safe(buf, next_buf, &buf_list->interlacebuf_list, node) {
+		list_del(&buf->node);
+		unmap_buf(buf);
+	}
+}
+
+static int virt_isys_set_format(struct file *file, void *fh,
 	struct ici_stream_format *sf)
 {
-	struct ici_stream_device *dev = fh;
-	struct ipu4_virtio_priv *fe_priv = dev->virt_priv;
+	struct ici_stream_device *strm_dev = fh;
+	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
+	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
 	struct ipu4_virtio_req *req;
 	int rval = 0;
 	int op[10];
 
-	if (!fe_priv)
+	if (!fe_ctx)
 		return -EINVAL;
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
@@ -60,7 +473,7 @@ static int ici_isys_set_format(struct file *file, void *fh,
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_SET_FORMAT, &op[0]);
 
-	rval = fe_priv->bknd_ops->send_req(fe_priv->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
 	if (rval) {
 		printk(KERN_ERR "Failed to open virtual device\n");
 		kfree(req);
@@ -71,33 +484,85 @@ static int ici_isys_set_format(struct file *file, void *fh,
 	return rval;
 }
 
-static int ici_isys_stream_on(struct file *file, void *fh)
+static int virt_isys_stream_on(struct file *file, void *fh)
 {
+	struct ici_stream_device *strm_dev = fh;
+	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
+	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
+	struct ipu4_virtio_req *req;
 	int rval = 0;
 
+	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
+	if (!req && !fe_ctx)
+		return -ENOMEM;
+
 	return rval;
 }
 
-static int ici_isys_stream_off(struct file *file, void *fh)
+static int virt_isys_stream_off(struct file *file, void *fh)
 {
+	struct ici_stream_device *strm_dev = fh;
+	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
+	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
+	struct ipu4_virtio_req *req;
 	int rval = 0;
 
+	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
+	if (!req && !fe_ctx)
+		return -ENOMEM;
+
 	return rval;
 }
 
-static int ici_isys_getbuf(struct file *file, void *fh,
+static int virt_isys_getbuf(struct file *file, void *fh,
 	struct ici_frame_info *user_frame_info)
 {
+	struct ici_stream_device *strm_dev = fh;
+	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
+	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
+	struct ipu4_virtio_req *req;
 	int rval = 0;
+	int op[3];
+
+	rval = get_buf(vstream, user_frame_info);
+	if (rval)
+		return -ENOMEM;
+
+	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
+	if (!req)
+		return -ENOMEM;
+
+
+	op[0] = vstream->virt_dev_id;
+	op[1] = 0;
+	op[2] = user_frame_info->mem_type;
+
+	intel_ipu4_virtio_create_req(req, IPU4_CMD_GET_BUF, &op[0]);
+
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	if (rval) {
+		printk(KERN_ERR "Failed to Get Buffer\n");
+		kfree(req);
+		return rval;
+	}
+	kfree(req);
 
 	return rval;
 }
 
-static int ici_isys_putbuf(struct file *file, void *fh,
+static int virt_isys_putbuf(struct file *file, void *fh,
 	struct ici_frame_info *user_frame_info)
 {
+	struct ici_stream_device *strm_dev = fh;
+	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
+	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
+	struct ipu4_virtio_req *req;
 	int rval = 0;
 
+	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
+	if (!req && !fe_ctx)
+		return -ENOMEM;
+
 	return rval;
 }
 
@@ -111,29 +576,30 @@ static unsigned int stream_fop_poll(struct file *file,
 
 static int virt_stream_fop_open(struct inode *inode, struct file *file)
 {
-	struct ici_stream_device *dev = inode_to_intel_ipu_stream_device(inode);
+	struct ici_stream_device *strm_dev = inode_to_intel_ipu_stream_device(inode);
 	struct ipu4_virtio_req *req;
-	struct ipu4_virtio_priv *fe_priv = dev->virt_priv;
+	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
+	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
 	int rval = 0;
 	int op[2];
 	printk(KERN_INFO "virt stream open\n");
-	get_device(&dev->dev);
+	get_device(&strm_dev->dev);
 
-	file->private_data = dev;
+	file->private_data = strm_dev;
 
-	if (!fe_priv)
+	if (!fe_ctx)
 		return -EINVAL;
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req)
 		return -ENOMEM;
 
-	op[0] = dev->virt_dev_id;
+	op[0] = vstream->virt_dev_id;
 	op[1] = 0;
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_DEVICE_OPEN, &op[0]);
 
-	rval = fe_priv->bknd_ops->send_req(fe_priv->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
 	if (rval) {
 		printk(KERN_ERR "Failed to open virtual device\n");
 		kfree(req);
@@ -195,27 +661,28 @@ static long virt_stream_ioctl(struct file *file,
 			}
 		}
 
-		//mutex_lock(dev->mutex);
+		mutex_lock(dev->mutex);
+
 		switch (ioctl_cmd) {
 		case ICI_IOC_STREAM_ON:
 			printk(KERN_INFO "IPU FE IOCTL STREAM_ON\n");
-			err = ici_isys_stream_on(file, dev);
+			err = virt_isys_stream_on(file, dev);
 			break;
 		case ICI_IOC_STREAM_OFF:
 			printk(KERN_INFO "IPU FE IOCTL STREAM_OFF\n");
-			err = ici_isys_stream_off(file, dev);
+			err = virt_isys_stream_off(file, dev);
 			break;
 		case ICI_IOC_GET_BUF:
 			printk(KERN_INFO "IPU FE IOCTL GET_BUF\n");
-			err = ici_isys_getbuf(file, dev, &isys_ioctl_cmd_args.frame_info);
+			err = virt_isys_getbuf(file, dev, &isys_ioctl_cmd_args.frame_info);
 			break;
 		case ICI_IOC_PUT_BUF:
 			printk(KERN_INFO "IPU FE IOCTL PUT_BUF\n");
-			err = ici_isys_putbuf(file, dev, &isys_ioctl_cmd_args.frame_info);
+			err = virt_isys_putbuf(file, dev, &isys_ioctl_cmd_args.frame_info);
 			break;
 		case ICI_IOC_SET_FORMAT:
 			printk(KERN_INFO "IPU FE IOCTL SET_FORMAT\n");
-			err = ici_isys_set_format(file, dev, &isys_ioctl_cmd_args.sf);
+			err = virt_isys_set_format(file, dev, &isys_ioctl_cmd_args.sf);
 			break;
 
 		default:
@@ -223,7 +690,7 @@ static long virt_stream_ioctl(struct file *file,
 			break;
 		}
 
-		//mutex_unlock(dev->mutex);
+		mutex_unlock(dev->mutex);
 	return 0;
 }
 
@@ -241,12 +708,26 @@ static void base_device_release(struct device *sd)
 {
 }
 
-static int virt_ici_stream_init(void)
+int virt_frame_buf_init(struct ici_isys_frame_buf_list *buf_list)
+{
+	buf_list->drv_priv = NULL;
+	mutex_init(&buf_list->mutex);
+	spin_lock_init(&buf_list->lock);
+	spin_lock_init(&buf_list->short_packet_queue_lock);
+	INIT_LIST_HEAD(&buf_list->getbuf_list);
+	INIT_LIST_HEAD(&buf_list->putbuf_list);
+	INIT_LIST_HEAD(&buf_list->interlacebuf_list);
+	init_waitqueue_head(&buf_list->wait);
+	return 0;
+}
+
+static int virt_ici_stream_init(struct virtual_stream *vstream,
+				struct ici_stream_device *strm_dev)
 {
 	int rval;
 	int num;
-	struct ipu4_virtio_priv *fe_priv;
-	printk(KERN_NOTICE "Initializing Para virt IPU FE\n");
+	struct ipu4_virtio_ctx *fe_ctx;
+
 	if (!stream_dev_init) {
 		virt_stream_dev_t = MKDEV(MAJOR_STREAM, 0);
 
@@ -268,9 +749,9 @@ static int virt_ici_stream_init(void)
 		}
 		stream_dev_init++;
 	}
-	strm_dev = kzalloc(sizeof(*strm_dev), GFP_KERNEL);
-	if (!strm_dev)
-		return -ENOMEM;
+	/*strm_dev = kzalloc(sizeof(*strm_dev), GFP_KERNEL);
+	if(!strm_dev)
+		return -ENOMEM;*/
 	num = virt_stream_devs_registered;
 	strm_dev->minor = -1;
 	cdev_init(&strm_dev->cdev, &virt_stream_fops);
@@ -295,21 +776,20 @@ static int virt_ici_stream_init(void)
 	strm_dev->dev.release = base_device_release;
 	strlcpy(strm_dev->name, strm_dev->dev.kobj.name, sizeof(strm_dev->name));
 	strm_dev->minor = num;
-	strm_dev->virt_dev_id = num;
+	vstream->virt_dev_id = num;
 
-	//mutex_init(strm_dev->mutex);
-	//virt_stream_devs_registered++;
+	virt_stream_devs_registered++;
 
-	fe_priv = kcalloc(1, sizeof(struct ipu4_virtio_priv),
+	fe_ctx = kcalloc(1, sizeof(struct ipu4_virtio_ctx),
 					      GFP_KERNEL);
 
-	if (!fe_priv)
+	if (!fe_ctx)
 		return -ENOMEM;
 
-	fe_priv->bknd_ops = &ipu4_virtio_bknd_ops;
+	fe_ctx->bknd_ops = &ipu4_virtio_bknd_ops;
 
-	if (fe_priv->bknd_ops->init) {
-		rval = fe_priv->bknd_ops->init();
+	if (fe_ctx->bknd_ops->init) {
+		rval = fe_ctx->bknd_ops->init();
 		if (rval < 0) {
 			printk(KERN_NOTICE
 				"failed to initialize backend.\n");
@@ -317,9 +797,9 @@ static int virt_ici_stream_init(void)
 		}
 	}
 
-	fe_priv->domid = fe_priv->bknd_ops->get_vm_id();
-	strm_dev->virt_priv = fe_priv;
-	printk("FE registered with domid:%d\n", fe_priv->domid);
+	fe_ctx->domid = fe_ctx->bknd_ops->get_vm_id();
+	vstream->ctx = fe_ctx;
+	printk("FE registered with domid:%d\n", fe_ctx->domid);
 
 	return 0;
 }
@@ -334,7 +814,36 @@ static void virt_ici_stream_exit(void)
 
 static int __init virt_ici_init(void)
 {
-	return virt_ici_stream_init();
+	struct virtual_stream *vstream;
+	int rval = 0, i;
+	printk(KERN_NOTICE "Initializing IPU Para virtual driver\n");
+	for (i = 0; i < MAX_ISYS_VIRT_STREAM; i++) {
+
+		vstream = kzalloc(sizeof(*vstream), GFP_KERNEL);
+		if (!vstream)
+			return -ENOMEM;
+		mutex_init(&vstream->mutex);
+		vstream->strm_dev.mutex = &vstream->mutex;
+
+		rval = virt_frame_buf_init(&vstream->buf_list);
+		if (rval)
+			goto init_fail;
+
+		dev_set_drvdata(&vstream->strm_dev.dev, vstream);
+
+		mutex_lock(&vstream->mutex);
+		rval = virt_ici_stream_init(vstream, &vstream->strm_dev);
+		mutex_unlock(&vstream->mutex);
+
+		if (rval)
+			return rval;
+	}
+	return 0;
+
+init_fail:
+	mutex_destroy(&vstream->mutex);
+	kfree(vstream);
+	return rval;
 }
 
 static void __exit virt_ici_exit(void)
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.h b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.h
index b36e6f7..707ad5b 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.h
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.h
@@ -6,16 +6,31 @@
 #ifndef INTEL_IPU4_PARA_VIRT_H
 #define INTEL_IPU4_PARA_VIRT_H
 
+#include <linux/version.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/uaccess.h>
+
 #include "./ici/ici-isys-stream-device.h"
 #include "./ici/ici-isys-frame-buf.h"
 #include "intel-ipu4-virtio-common.h"
 
+#define MAX_ISYS_VIRT_STREAM 34
+
 struct virtual_stream {
 	struct mutex mutex;
 	struct ici_stream_device strm_dev;
 	int virt_dev_id;
-	struct ipu4_virtio_priv *priv;
+	int actual_fd;
+	struct ipu4_virtio_ctx *ctx;
 	struct ici_isys_frame_buf_list buf_list;
 };
 
-#endif INTEL_IPU4_PARA_VIRT_H
+
+#define dev_to_vstream(dev) \
+	container_of(dev, struct virtual_stream, strm_dev)
+
+#endif
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
index b8e2836..a7912b4 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
@@ -233,7 +233,7 @@ static int ipu_vbk_open(struct inode *inode, struct file *f)
 	struct virtio_vq_info *vqs;
 	int i;
 
-	priv = kcalloc(1, sizeof(struct ipu4_virtio_dev),
+	priv = kcalloc(1, sizeof(struct ipu4_virtio_be_priv),
 		      GFP_KERNEL);
 
 	if (priv == NULL) {
@@ -315,6 +315,10 @@ static long ipu_vbk_ioctl(struct file *f, unsigned int ioctl,
 	/*u64 features;*/
 	int r;
 
+	if (priv == NULL) {
+			printk(KERN_ERR "No IPU backend private data\n");
+			return -EINVAL;
+	}
 	switch (ioctl) {
 /*
  *	case VHOST_GET_FEATURES:
@@ -334,20 +338,20 @@ static long ipu_vbk_ioctl(struct file *f, unsigned int ioctl,
 		 * we handle this here because we want to register VHM client
 		 * after handling VBS_K_SET_VQ request
 		 */
-		pr_debug("VBS_K_SET_VQ ioctl:\n");
+		printk("VBS_K_SET_VQ ioctl:\n");
 		r = virtio_vqs_ioctl(&priv->dev, ioctl, argp);
 		if (r == -ENOIOCTLCMD) {
-			pr_err("VBS_K_SET_VQ: virtio_vqs_ioctl failed!\n");
+			printk(KERN_ERR "VBS_K_SET_VQ: virtio_vqs_ioctl failed!\n");
 			return -EFAULT;
 		}
 		/* Register VHM client */
 		if (virtio_dev_register(&priv->dev) < 0) {
-			pr_err("failed to register VHM client!\n");
+			printk(KERN_ERR "failed to register VHM client!\n");
 			return -EFAULT;
 		}
 		/* Added to local hash table */
 		if (ipu_vbk_hash_add(priv) < 0) {
-			pr_err("failed to add to hashtable!\n");
+			printk(KERN_ERR "failed to add to hashtable!\n");
 			return -EFAULT;
 		}
 		/* Increment counter */
@@ -355,7 +359,7 @@ static long ipu_vbk_ioctl(struct file *f, unsigned int ioctl,
 		return r;
 	default:
 		/*mutex_lock(&n->dev.mutex);*/
-		pr_debug("VBS_K generic ioctls!\n");
+		printk("VBS_K generic ioctls!\n");
 		r = virtio_dev_ioctl(&priv->dev, ioctl, argp);
 		if (r == -ENOIOCTLCMD)
 			r = virtio_vqs_ioctl(&priv->dev, ioctl, argp);
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c
index 9653bb8f..41cc2cb 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c
@@ -85,7 +85,7 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op8 - Number of planes
 			 * op9 - flags
 			 */
-			printk(KERN_INFO "VBS SET_FMT: virtual_dev_id:%d actual_fd:%d\n", req->op[2], req->op[3]);
+			printk(KERN_INFO "VBS SET_FMT: Width:%d Height:%d\n", req->op[2], req->op[3]);
 			req->stat = IPU4_REQ_PROCESSED;
 			break;
 	case IPU4_CMD_ENUM_NODES:
@@ -125,8 +125,9 @@ void intel_ipu4_virtio_create_req(struct ipu4_virtio_req *req,
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			for (i = 0; i < 2; i++)
+			for (i = 0; i < 2; i++) {
 				req->op[i] = op[i];
+			}
 			break;
 	case IPU4_CMD_DEVICE_CLOSE:
 			/* Close video device node
@@ -139,12 +140,18 @@ void intel_ipu4_virtio_create_req(struct ipu4_virtio_req *req,
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
+			for (i = 0; i < 2; i++) {
+					req->op[i] = op[i];
+			}
 			break;
 	case IPU4_CMD_STREAM_OFF:
 			/* Stop Stream
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
+			for (i = 0; i < 2; i++) {
+				req->op[i] = op[i];
+			}
 			break;
 	case IPU4_CMD_GET_BUF:
 			/* Set Format of a given video node
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
index f389dc8..fe33bd9 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
@@ -27,12 +27,16 @@ struct ipu4_virtio_req {
 	unsigned int cmd;
 	unsigned int op[MAX_NUMBER_OF_OPERANDS];
 };
+
+/*Not used*/
 struct ipu4_virtio_resp {
 	unsigned int resp_id;
 	unsigned int stat;
 	unsigned int cmd;
 	unsigned int op[MAX_NUMBER_OF_OPERANDS];
 };
+
+/*Not used*/
 struct ipu4_virtio_fe_info {
 	struct ipu4_virtio_be_priv *priv;
 	int client_id;
@@ -41,6 +45,7 @@ struct ipu4_virtio_fe_info {
 	struct vhm_request *req_buf;
 };
 
+/*Not used*/
 struct ipu4_virtio_fe_info_entry {
 	struct ipu4_virtio_fe_info *info;
 	struct hlist_node node;
@@ -59,7 +64,7 @@ struct ipu4_bknd_ops {
 	int (*send_req)(int, struct ipu4_virtio_req *, int);
 };
 
-struct ipu4_virtio_priv {
+struct ipu4_virtio_ctx {
 	/* VM(domain) id of current VM instance */
 	int domid;
 
@@ -70,15 +75,9 @@ struct ipu4_virtio_priv {
 	bool initialized;
 
 	/* device global lock */
-	/* TODO: might need a lock per resource (e.g. EXPORT LIST) */
 	struct mutex lock;
 };
 
-struct ipu4_virtio_dev {
-	struct device *dev;
-	struct ipu4_virtio_priv *priv;
-};
-
 enum intel_ipu4_virtio_command {
 	IPU4_CMD_DEVICE_OPEN = 0x1,
 	IPU4_CMD_DEVICE_CLOSE,
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c
index 09c1fb47..e4bb5e9 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c
@@ -15,7 +15,7 @@
 
 static DEFINE_IDA(index_ida);
 
-struct ipu4_virtio_fe_priv {
+struct ipu4_virtio_uos {
 	struct virtqueue *vq;
 	struct completion have_data;
 	char name[25];
@@ -25,12 +25,13 @@ struct ipu4_virtio_fe_priv {
 	int vmid;
 };
 
+
 /* Assuming there will be one FE instance per VM */
-static struct ipu4_virtio_fe_priv *ipu4_virtio_fe;
+static struct ipu4_virtio_uos *ipu4_virtio_fe;
 
 static void ipu_virtio_fe_tx_done(struct virtqueue *vq)
 {
-	struct ipu4_virtio_fe_priv *priv = vq->vdev->priv;
+	struct ipu4_virtio_uos *priv = vq->vdev->priv;
 
 	/* We can get spurious callbacks, e.g. shared IRQs + virtio_pci. */
 	if (!virtqueue_get_buf(priv->vq, &priv->data_avail))
@@ -41,7 +42,7 @@ static void ipu_virtio_fe_tx_done(struct virtqueue *vq)
 }
 
 /* The host will fill any buffer we give it with sweet, sweet randomness. */
-static void ipu_virtio_fe_register_buffer(struct ipu4_virtio_fe_priv *vi, void *buf, size_t size)
+static void ipu_virtio_fe_register_buffer(struct ipu4_virtio_uos *vi, void *buf, size_t size)
 {
 	struct scatterlist sg;
 
@@ -56,9 +57,9 @@ static void ipu_virtio_fe_register_buffer(struct ipu4_virtio_fe_priv *vi, void *
 static int ipu_virtio_fe_probe_common(struct virtio_device *vdev)
 {
 	int err, index;
-	struct ipu4_virtio_fe_priv *priv = NULL;
+	struct ipu4_virtio_uos *priv = NULL;
 
-	priv = kzalloc(sizeof(struct ipu4_virtio_fe_priv), GFP_KERNEL);
+	priv = kzalloc(sizeof(struct ipu4_virtio_uos), GFP_KERNEL);
 	if (!priv)
 		return -ENOMEM;
 
@@ -91,7 +92,7 @@ static int ipu_virtio_fe_probe_common(struct virtio_device *vdev)
 
 static void ipu_virtio_fe_remove_common(struct virtio_device *vdev)
 {
-	struct ipu4_virtio_fe_priv *priv = vdev->priv;
+	struct ipu4_virtio_uos *priv = vdev->priv;
 
 	priv->data_avail = 0;
 	complete(&priv->have_data);
@@ -105,7 +106,7 @@ static void ipu_virtio_fe_remove_common(struct virtio_device *vdev)
 static int ipu_virtio_fe_send_req(int vmid, struct ipu4_virtio_req *req,
 			      int wait)
 {
-	struct ipu4_virtio_fe_priv *priv = ipu4_virtio_fe;
+	struct ipu4_virtio_uos *priv = ipu4_virtio_fe;
 	struct ipu4_virtio_req *tx_req;
 	int ret = 0;
 	int timeout = 1000;
@@ -125,8 +126,7 @@ static int ipu_virtio_fe_send_req(int vmid, struct ipu4_virtio_req *req,
 
 	if (wait) {
 		while (timeout--) {
-			if (tx_req->stat !=
-				IPU4_REQ_NOT_RESPONDED)
+			if (tx_req->stat !=	IPU4_REQ_NOT_RESPONDED)
 				break;
 			usleep_range(100, 120);
 		}
@@ -139,7 +139,7 @@ static int ipu_virtio_fe_send_req(int vmid, struct ipu4_virtio_req *req,
 }
 static int ipu_virtio_fe_get_vmid(void)
 {
-	struct ipu4_virtio_fe_priv *priv = ipu4_virtio_fe;
+	struct ipu4_virtio_uos *priv = ipu4_virtio_fe;
 
 	if (ipu4_virtio_fe == NULL) {
 		printk(KERN_ERR	"IPU Backend not connected\n");
@@ -171,7 +171,7 @@ static void virt_remove(struct virtio_device *vdev)
 
 static void virt_scan(struct virtio_device *vdev)
 {
-	struct ipu4_virtio_fe_priv *vi = (struct ipu4_virtio_fe_priv *)vdev->priv;
+	struct ipu4_virtio_uos *vi = (struct ipu4_virtio_uos *)vdev->priv;
 	int timeout = 1000;
 
 	if (vi == NULL) {
-- 
2.7.4

