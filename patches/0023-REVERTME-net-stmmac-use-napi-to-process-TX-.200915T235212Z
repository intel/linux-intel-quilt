From 436d2a08ced3103abdb4ef8045b6eae2693598f5 Mon Sep 17 00:00:00 2001
From: "Song, Yoong Siang" <yoong.siang.song@intel.com>
Date: Tue, 1 Sep 2020 21:01:18 +0800
Subject: [PATCH 23/48] REVERTME: net: stmmac: use napi to process TX/RX and
 use DMA Bus Mode 0

Regardless of TX/RX interrupt, we process both TX/RX buffer of the
same queue. This reduces the occurrence of "Reset Adapter" issue
for the iperf single-queue TCP/UDP tests.

Sets DMA_BUS_MODE_INTM_MODE0 for all dwmac4 devices. This works
around the multi queue receiving issue for EHL when TCC is disabled.

Signed-off-by: Wong, Vincent Por Yin <vincent.por.yin.wong@intel.com>
Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c  |  7 ++++++-
 drivers/net/ethernet/stmicro/stmmac/stmmac_main.c | 10 ++++++++--
 drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c  |  6 ++++++
 include/linux/stmmac.h                            |  1 +
 4 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c
index 365f3e95e4ee..4100f9d711e3 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c
@@ -167,7 +167,12 @@ static void dwmac4_dma_init(void __iomem *ioaddr,
 
 	if (dma_cfg->multi_msi_en) {
 		value &= ~DMA_BUS_MODE_INTM_MASK;
-		value |= (DMA_BUS_MODE_INTM_MODE1 << DMA_BUS_MODE_INTM_SHIFT);
+		if (dma_cfg->pch_intr_wa)
+			value |= (DMA_BUS_MODE_INTM_MODE0 <<
+				  DMA_BUS_MODE_INTM_SHIFT);
+		else
+			value |= (DMA_BUS_MODE_INTM_MODE1 <<
+				  DMA_BUS_MODE_INTM_SHIFT);
 	}
 
 	writel(value, ioaddr + DMA_BUS_MODE);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index b7ef885da5f5..73d9ad52da87 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -5398,7 +5398,10 @@ static irqreturn_t stmmac_msi_intr_tx(int irq, void *data)
 	if (test_bit(STMMAC_DOWN, priv->state))
 		return IRQ_HANDLED;
 
-	status = stmmac_napi_check(priv, chan, DMA_DIR_TX);
+	if (priv->plat->dma_cfg->pch_intr_wa)
+		status = stmmac_napi_check(priv, chan, DMA_DIR_RXTX);
+	else
+		status = stmmac_napi_check(priv, chan, DMA_DIR_TX);
 
 	if (unlikely(status & tx_hard_error_bump_tc)) {
 		/* Try to bump up the dma threshold on this failure */
@@ -5441,7 +5444,10 @@ static irqreturn_t stmmac_msi_intr_rx(int irq, void *data)
 	if (test_bit(STMMAC_DOWN, priv->state))
 		return IRQ_HANDLED;
 
-	stmmac_napi_check(priv, chan, DMA_DIR_RX);
+	if (priv->plat->dma_cfg->pch_intr_wa)
+		stmmac_napi_check(priv, chan, DMA_DIR_RXTX);
+	else
+		stmmac_napi_check(priv, chan, DMA_DIR_RX);
 
 	return IRQ_HANDLED;
 }
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 7b74a4fb4a77..accb0ed9f700 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -355,6 +355,8 @@ static int ehl_sgmii_data(struct pci_dev *pdev,
 	/* Set PTP clock rate for EHL as 200MHz */
 	plat->clk_ptp_rate = 204860000;
 
+	plat->dma_cfg->pch_intr_wa = 1;
+
 	return ehl_common_data(pdev, plat);
 }
 
@@ -371,6 +373,8 @@ static int ehl_rgmii_data(struct pci_dev *pdev,
 	/* Set PTP clock rate for EHL as 200MHz */
 	plat->clk_ptp_rate = 200000000;
 
+	plat->dma_cfg->pch_intr_wa = 1;
+
 	return ehl_common_data(pdev, plat);
 }
 
@@ -556,6 +560,8 @@ static int tgl_common_data(struct pci_dev *pdev,
 	if (ret)
 		return ret;
 
+	plat->dma_cfg->pch_intr_wa = 1;
+
 	return 0;
 }
 
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index fde9726318ca..7d8657861562 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -94,6 +94,7 @@ struct stmmac_dma_cfg {
 	int mixed_burst;
 	bool aal;
 	bool multi_msi_en;
+	bool pch_intr_wa;
 };
 
 #define AXI_BLEN	7
-- 
2.17.1

