From 70dd157ac1bc89718a760dcd9bf5982236fd8f37 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Fri, 6 Jul 2018 06:16:28 +0800
Subject: [PATCH 041/104] net: stmmac: introduce IEEE 802.1Qbv HW tunables
 functionalities

We add hardware tunables setter and getter functions for:
a) time interval left shift (TILS) - multiply the gate interval through
   left-shifting operation.
b) PTP Time Offset Value (PTOV) - PTP clock offset to avoid transmission
   overrun at the installation of new Gate Control List.
c) Current Time Offset Value (CTOV) - Current time offset to compensate
   for all pipeline delays to ensure the effect of gate controls is
   visible on the line exactly at pre-determined schedule.

Reviewed-by: Voon Weifeng <weifeng.voon@intel.com>
Reviewed-by: Kweh Hock Leong <hock.leong.kweh@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |   2 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |   8 ++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  |  42 ++++++-
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  19 ++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 110 +++++++++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  16 +++
 6 files changed, 191 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index d21439b1811e..dfda0bef2be5 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1106,6 +1106,8 @@ const struct stmmac_ops dwmac510_ops = {
 	.init_tsn = tsn_init,
 	.set_tsn_feat = tsn_feat_set,
 	.has_tsn_feat = tsn_has_feat,
+	.set_tsn_hwtunable = tsn_hwtunable_set,
+	.get_tsn_hwtunable = tsn_hwtunable_get,
 	.set_est_enable = tsn_est_enable_set,
 	.get_est_bank = tsn_est_bank_get,
 	.set_est_gce = tsn_est_gce_set,
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 0b71ae6f592d..40ba7f86b521 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -95,6 +95,12 @@
 
 /* MTL EST control register */
 #define MTL_EST_CTRL			0x00000c50
+#define MTL_EST_CTRL_PTOV		GENMASK(31, 24)
+#define MTL_EST_CTRL_PTOV_SHIFT		24
+#define MTL_EST_CTRL_CTOV		GENMASK(23, 12)
+#define MTL_EST_CTRL_CTOV_SHIFT		12
+#define MTL_EST_CTRL_TILS		GENMASK(10, 8)
+#define MTL_EST_CTRL_TILS_SHIFT		8
 #define MTL_EST_CTRL_SSWL		BIT(1)	/* Switch to SWOL */
 #define MTL_EST_CTRL_EEST		BIT(0)	/* Enable EST */
 
@@ -131,6 +137,8 @@
 
 /* EST Global defines */
 #define EST_CTR_HI_MAX			0xff	/* CTR Hi is 8-bit only */
+#define EST_PTOV_MAX			0xff	/* Max PTP time offset */
+#define EST_CTOV_MAX			0xfff	/* Max Current time offset */
 
 /* MAC Core Version */
 #define TSN_VER_MASK		0xFF
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 64b263336b87..85fc7c638d17 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -121,8 +121,12 @@ static u32 dwmac5_est_get_txqcnt(void __iomem *ioaddr)
 	return ((hw_cap2 & GMAC_HW_FEAT_TXQCNT) >> 6) + 1;
 }
 
-static void dwmac5_est_get_max(u32 *cycle_max)
+static void dwmac5_est_get_max(u32 *ptov_max,
+			       u32 *ctov_max,
+			       u32 *cycle_max)
 {
+	*ptov_max = EST_PTOV_MAX;
+	*ctov_max = EST_CTOV_MAX;
 	*cycle_max = EST_CTR_HI_MAX;
 }
 
@@ -180,6 +184,39 @@ static int dwmac5_est_read_gce(void __iomem *ioaddr, u32 row,
 	return ret;
 }
 
+static void dwmac5_est_set_tils(void __iomem *ioaddr, const u32 tils)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_CTRL);
+	value &= ~(MTL_EST_CTRL_SSWL | MTL_EST_CTRL_TILS);
+	value |= (tils << MTL_EST_CTRL_TILS_SHIFT);
+
+	writel(value, ioaddr + MTL_EST_CTRL);
+}
+
+static void dwmac5_est_set_ptov(void __iomem *ioaddr, const u32 ptov)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_CTRL);
+	value &= ~(MTL_EST_CTRL_SSWL | MTL_EST_CTRL_PTOV);
+	value |= (ptov << MTL_EST_CTRL_PTOV_SHIFT);
+
+	writel(value, ioaddr + MTL_EST_CTRL);
+}
+
+static void dwmac5_est_set_ctov(void __iomem *ioaddr, const u32 ctov)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_CTRL);
+	value &= ~(MTL_EST_CTRL_SSWL | MTL_EST_CTRL_CTOV);
+	value |= (ctov << MTL_EST_CTRL_CTOV_SHIFT);
+
+	writel(value, ioaddr + MTL_EST_CTRL);
+}
+
 static int dwmac5_est_set_enable(void __iomem *ioaddr, bool enable)
 {
 	u32 value;
@@ -237,6 +274,9 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.est_write_gcl_config = dwmac5_est_write_gcl_config,
 	.est_read_gcl_config = dwmac5_est_read_gcl_config,
 	.est_read_gce = dwmac5_est_read_gce,
+	.est_set_tils = dwmac5_est_set_tils,
+	.est_set_ptov = dwmac5_est_set_ptov,
+	.est_set_ctov = dwmac5_est_set_ctov,
 	.est_set_enable = dwmac5_est_set_enable,
 	.est_get_enable = dwmac5_est_get_enable,
 	.est_get_bank = dwmac5_est_get_bank,
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 704f588aef25..635d1d1c99f2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -258,6 +258,7 @@ struct stmmac_safety_stats;
 struct stmmac_tc_entry;
 struct stmmac_pps_cfg;
 enum tsn_feat_id;
+enum tsn_hwtunable_id;
 struct est_gc_entry;
 struct est_gcrr;
 struct est_gc_config;
@@ -360,6 +361,13 @@ struct stmmac_ops {
 			    enum tsn_feat_id featid, bool enable);
 	bool (*has_tsn_feat)(struct mac_device_info *hw, struct net_device *dev,
 			     enum tsn_feat_id featid);
+	int (*set_tsn_hwtunable)(struct mac_device_info *hw,
+				 struct net_device *dev,
+				 enum tsn_hwtunable_id id,
+				 const u32 data);
+	int (*get_tsn_hwtunable)(struct mac_device_info *hw,
+				 struct net_device *dev,
+				 enum tsn_hwtunable_id id, u32 *data);
 	int (*set_est_enable)(struct mac_device_info *hw,
 			      struct net_device *dev, bool enable);
 	int (*get_est_bank)(struct mac_device_info *hw, struct net_device *dev,
@@ -647,7 +655,7 @@ struct tsnif_ops {
 	u32 (*est_get_gcl_depth)(void __iomem *ioaddr);
 	u32 (*est_get_ti_width)(void __iomem *ioaddr);
 	u32 (*est_get_txqcnt)(void __iomem *ioaddr);
-	void (*est_get_max)(u32 *ct_max);
+	void (*est_get_max)(u32 *ptov_max, u32 *ctov_max, u32 *ct_max);
 	int (*est_write_gcl_config)(void __iomem *ioaddr, u32 data, u32 addr,
 				    bool is_gcrr,
 				    u32 dbgb, bool is_dbgm);
@@ -658,6 +666,9 @@ struct tsnif_ops {
 			    u32 *gates, u32 *ti_nsec,
 			    u32 ti_wid, u32 txqcnt,
 			    u32 dbgb, bool is_dbgm);
+	void (*est_set_tils)(void __iomem *ioaddr, const u32 tils);
+	void (*est_set_ptov)(void __iomem *ioaddr, const u32 ptov);
+	void (*est_set_ctov)(void __iomem *ioaddr, const u32 ctov);
 	int (*est_set_enable)(void __iomem *ioaddr, bool enable);
 	bool (*est_get_enable)(void __iomem *ioaddr);
 	u32 (*est_get_bank)(void __iomem *ioaddr, bool is_own);
@@ -682,6 +693,12 @@ struct tsnif_ops {
 	tsnif_do_callback(__hw, est_read_gcl_config, __args)
 #define tsnif_est_read_gce(__hw, __args...) \
 	tsnif_do_callback(__hw, est_read_gce, __args)
+#define tsnif_est_set_tils(__hw, __args...) \
+	tsnif_do_void_callback(__hw, est_set_tils, __args)
+#define tsnif_est_set_ptov(__hw, __args...) \
+	tsnif_do_void_callback(__hw, est_set_ptov, __args)
+#define tsnif_est_set_ctov(__hw, __args...) \
+	tsnif_do_void_callback(__hw, est_set_ctov, __args)
 #define tsnif_est_set_enable(__hw, __args...) \
 	tsnif_do_callback(__hw, est_set_enable, __args)
 #define tsnif_est_get_enable(__hw, __args...) \
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index 582552d5506b..d1f599138963 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -31,6 +31,7 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 	struct est_gc_entry *gcl;
 	struct tsn_hw_cap *cap;
 	u32 gcl_depth;
+	u32 tils_max;
 	u32 ti_wid;
 	u32 bank;
 	u32 hwid;
@@ -87,14 +88,17 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 	ti_wid = tsnif_est_get_ti_width(hw, ioaddr);
 	cap->ti_wid = ti_wid;
 	cap->gcl_depth = gcl_depth;
-
 	cap->ext_max = EST_TIWID_TO_EXTMAX(ti_wid);
 	cap->txqcnt = tsnif_est_get_txqcnt(hw, ioaddr);
-	tsnif_est_get_max(hw, &cap->cycle_max);
+
+	tils_max = (tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_EST) ? 3 : 0);
+	tils_max = (1 << tils_max) - 1;
+	cap->tils_max = tils_max;
+	tsnif_est_get_max(hw, &cap->ptov_max, &cap->ctov_max, &cap->cycle_max);
 	cap->est_support = 1;
 
-	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tqcnt=%u\n",
-		 gcl_depth, ti_wid, cap->ext_max, cap->txqcnt);
+	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tils_max=%u, tqcnt=%u\n",
+		 gcl_depth, ti_wid, cap->ext_max, tils_max, cap->txqcnt);
 
 	return 0;
 }
@@ -123,6 +127,104 @@ bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
 	return hw->tsn_info.feat_en[featid];
 }
 
+int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
+		      enum tsn_hwtunable_id id,
+		      const u32 data)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	struct tsn_hw_cap *cap = &info->cap;
+	void __iomem *ioaddr = hw->pcsr;
+	int ret = 0;
+
+	switch (id) {
+	case TSN_HWTUNA_TX_EST_TILS:
+	case TSN_HWTUNA_TX_EST_PTOV:
+	case TSN_HWTUNA_TX_EST_CTOV:
+		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+			netdev_info(dev, "EST: feature unsupported\n");
+			return -ENOTSUPP;
+		}
+		break;
+	default:
+		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
+		return -EINVAL;
+	};
+
+	switch (id) {
+	case TSN_HWTUNA_TX_EST_TILS:
+		if (data > cap->tils_max) {
+			netdev_warn(dev, "EST: invalid tils(%u), max=%u\n",
+				    data, cap->tils_max);
+
+			return -EINVAL;
+		}
+		if (data != info->hwtunable[TSN_HWTUNA_TX_EST_TILS]) {
+			tsnif_est_set_tils(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_EST_TILS] = data;
+			netdev_info(dev, "EST: Set TILS = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_EST_PTOV:
+		if (data > cap->ptov_max) {
+			netdev_warn(dev,
+				    "EST: invalid PTOV(%u), max=%u\n",
+				    data, cap->ptov_max);
+
+			return -EINVAL;
+		}
+		if (data != info->hwtunable[TSN_HWTUNA_TX_EST_PTOV]) {
+			tsnif_est_set_ptov(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_EST_PTOV] = data;
+			netdev_info(dev, "EST: Set PTOV = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_EST_CTOV:
+		if (data > cap->ctov_max) {
+			netdev_warn(dev,
+				    "EST: invalid CTOV(%u), max=%u\n",
+				    data, cap->ctov_max);
+
+			return -EINVAL;
+		}
+		if (data != info->hwtunable[TSN_HWTUNA_TX_EST_CTOV]) {
+			tsnif_est_set_ctov(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_EST_CTOV] = data;
+			netdev_info(dev, "EST: Set CTOV = %u\n", data);
+		}
+		break;
+	default:
+		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
+		ret = -EINVAL;
+	};
+
+	return ret;
+}
+
+int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
+		      enum tsn_hwtunable_id id, u32 *data)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+
+	switch (id) {
+	case TSN_HWTUNA_TX_EST_TILS:
+	case TSN_HWTUNA_TX_EST_PTOV:
+	case TSN_HWTUNA_TX_EST_CTOV:
+		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+			netdev_info(dev, "EST: feature unsupported\n");
+			return -ENOTSUPP;
+		}
+		break;
+	default:
+		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
+		return -EINVAL;
+	};
+
+	*data = info->hwtunable[id];
+	netdev_info(dev, "TSN: Get HW tunable[%d] = %u\n", id, *data);
+
+	return 0;
+}
+
 int tsn_est_enable_set(struct mac_device_info *hw, struct net_device *dev,
 		       bool enable)
 {
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index e70ee6eea0d0..b51c2008f5e4 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -10,6 +10,14 @@
 #define EST_GCL_BANK_MAX		(2)
 #define EST_TIWID_TO_EXTMAX(ti_wid)	((1 << ((ti_wid) + 7)) - 1)
 
+/* Hardware Tunable Enum */
+enum tsn_hwtunable_id {
+	TSN_HWTUNA_TX_EST_TILS = 0,
+	TSN_HWTUNA_TX_EST_PTOV,
+	TSN_HWTUNA_TX_EST_CTOV,
+	TSN_HWTUNA_MAX,
+};
+
 /* TSN Feature Enabled List */
 enum tsn_feat_id {
 	TSN_FEAT_ID_EST = 0,
@@ -39,6 +47,9 @@ struct tsn_hw_cap {
 	u32 ti_wid;		/* time interval width */
 	u32 ext_max;		/* Max time extension */
 	u32 cycle_max;		/* Max Cycle Time */
+	u32 tils_max;		/* Max time interval left shift */
+	u32 ptov_max;		/* Max PTP Offset */
+	u32 ctov_max;		/* Max Current Time Offset */
 };
 
 /* EST Gate Control Entry */
@@ -74,6 +85,7 @@ struct est_gc_config {
 struct tsnif_info {
 	struct tsn_hw_cap cap;
 	bool feat_en[TSN_FEAT_ID_MAX];
+	u32 hwtunable[TSN_HWTUNA_MAX];
 	struct est_gc_config est_gcc;
 };
 
@@ -85,6 +97,10 @@ int tsn_feat_set(struct mac_device_info *hw, struct net_device *dev,
 		 enum tsn_feat_id featid, bool enable);
 bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
 		  enum tsn_feat_id featid);
+int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
+		      enum tsn_hwtunable_id id, const u32 data);
+int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
+		      enum tsn_hwtunable_id id, u32 *data);
 int tsn_est_enable_set(struct mac_device_info *hw, struct net_device *dev,
 		       bool enable);
 int tsn_est_bank_get(struct mac_device_info *hw, struct net_device *dev,
-- 
2.17.1

