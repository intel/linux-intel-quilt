From 76d0b137fb4ff63960d18320b919893a6aa6a200 Mon Sep 17 00:00:00 2001
From: Dominik Bozek <dominikx.bozek@intel.com>
Date: Wed, 18 Apr 2018 16:43:21 +0200
Subject: [PATCH 1384/2328] phy-intel-dualrole: initialize intel phy directly
 in driver

Intel's PHY dualrole driver need to be initialized before
xhci and dwc3. Initializing it in the dwc3 (first aproach)
made hiden dependency on the xhci and dwc3 module loading.

Making platform device creation handled in phy-intel-dualrole
driver solve that dependecy.

This is just a temproary work around. In lastet upstream kernel the
design for handling the internal MUX is finalized and currently being
stabilized. Once we have a stable verion of intel MUX driver, we can
try backporting it to this kernel to solve this issue.

Signed-off-by: Dominik Bozek <dominikx.bozek@intel.com>
Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
---
 drivers/usb/dwc3/dwc3-pci.c          | 29 +++--------------------------
 drivers/usb/host/xhci-pci.c          | 31 -------------------------------
 drivers/usb/host/xhci.h              |  1 -
 drivers/usb/phy/phy-intel-dualrole.c | 17 +++++++++++++++--
 4 files changed, 18 insertions(+), 60 deletions(-)

diff --git a/drivers/usb/dwc3/dwc3-pci.c b/drivers/usb/dwc3/dwc3-pci.c
index f7e78e3..a876512 100644
--- a/drivers/usb/dwc3/dwc3-pci.c
+++ b/drivers/usb/dwc3/dwc3-pci.c
@@ -58,7 +58,6 @@
  */
 struct dwc3_pci {
 	struct platform_device *dwc3;
-	struct platform_device	*usb2_phy;
 	struct pci_dev *pci;
 
 	guid_t guid;
@@ -130,29 +129,8 @@ static int dwc3_pci_quirks(struct dwc3_pci *dwc)
 		if (pdev->device == PCI_DEVICE_ID_INTEL_BXT ||
 		    pdev->device == PCI_DEVICE_ID_INTEL_BXT_M ||
 		    pdev->device == PCI_DEVICE_ID_INTEL_APL ) {
-
-			if (IS_ERR_OR_NULL(usb_get_phy(USB_PHY_TYPE_USB2))) {
-				/* Unable to get phy, very likely intel_usb_dr_phy
-				 * platform device not yet allocated. Possible
-				 * race with another drivers.
-				 */
-				dwc->usb2_phy = platform_device_alloc(
-								"intel_usb_dr_phy", 0);
-				if (dwc->usb2_phy) {
-					dwc->usb2_phy->dev.parent = &pdev->dev;
-					ret = platform_device_add(dwc->usb2_phy);
-					if (ret) {
-						platform_device_put(dwc->usb2_phy);
-						return ret;
-					}
-				} else if (IS_ERR_OR_NULL(usb_get_phy(USB_PHY_TYPE_USB2))) {
-					/* In case of a race and another driver allocate
-					 * intel_usb_dr_phy platform device earlier, check
-					 * whether phy is already available. If not return error.
-					 */
-					return -ENOMEM;
-				}
-			}
+			if (IS_ERR_OR_NULL(usb_get_phy(USB_PHY_TYPE_USB2)))
+				return -ENOMEM;
 		}
 
 
@@ -277,8 +255,7 @@ static void dwc3_pci_remove(struct pci_dev *pci)
 
 	device_init_wakeup(&pci->dev, false);
 	pm_runtime_get(&pci->dev);
-	if(dwc->usb2_phy)
-		platform_device_unregister(dwc->usb2_phy);
+
 	platform_device_unregister(dwc->dwc3);
 }
 
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index ea556b3..5f8d0b4 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -95,35 +95,6 @@ static int xhci_pci_reinit(struct xhci_hcd *xhci, struct pci_dev *pdev)
 		hcd = xhci_to_hcd(xhci);
 
 		hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
-
-		if (IS_ERR_OR_NULL(hcd->usb_phy)) {
-			/* Unable to get phy, very likely intel_usb_dr_phy
-			 * platform device not yet allocated. Possible
-			 * race with another drivers.
-			 */
-			int ret;
-			xhci->usb2_phy = platform_device_alloc(
-								"intel_usb_dr_phy", 0);
-			if (xhci->usb2_phy) {
-				xhci->usb2_phy->dev.parent = &pdev->dev;
-					ret = platform_device_add(xhci->usb2_phy);
-				if (ret) {
-					platform_device_put(xhci->usb2_phy);
-					return ret;
-				}
-			} else {
-				/* In case of a race and another driver allocate
-				 * intel_usb_dr_phy platform device earlier, check
-				 * whether phy is already available. If not return error.
-				 */
-				hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
-				if (IS_ERR_OR_NULL(hcd->usb_phy))
-					return -ENOMEM;
-			}
-		}
-
-		hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
-
 		if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
 			retval = otg_set_host(hcd->usb_phy->otg, &hcd->self);
 			if (retval)
@@ -423,8 +394,6 @@ static void xhci_pci_remove(struct pci_dev *dev)
 
 	xhci = hcd_to_xhci(pci_get_drvdata(dev));
 	xhci->xhc_state |= XHCI_STATE_REMOVING;
-	if(xhci->usb2_phy)
-		platform_device_unregister(xhci->usb2_phy);
 	if (xhci->shared_hcd) {
 		usb_remove_hcd(xhci->shared_hcd);
 		usb_put_hcd(xhci->shared_hcd);
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index e2537ae..cbc9153 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1868,7 +1868,6 @@ struct xhci_hcd {
 	struct timer_list	comp_mode_recovery_timer;
 	u32			port_status_u0;
 	u16			test_mode;
-	struct platform_device	*usb2_phy;
 /* Compliance Mode Timer Triggered every 2 seconds */
 #define COMP_MODE_RCVRY_MSECS 2000
 
diff --git a/drivers/usb/phy/phy-intel-dualrole.c b/drivers/usb/phy/phy-intel-dualrole.c
index 0eaaf8e..eae21d7 100644
--- a/drivers/usb/phy/phy-intel-dualrole.c
+++ b/drivers/usb/phy/phy-intel-dualrole.c
@@ -390,14 +390,27 @@ static struct platform_driver intel_dr_phy_driver = {
 	},
 };
 
+struct platform_device *intel_dr_phy_device;
+
 static int __init intel_dr_phy_init(void)
 {
-	return platform_driver_register(&intel_dr_phy_driver);
+	int ret;
+	ret = platform_driver_register(&intel_dr_phy_driver);
+	if (ret)
+		return ret;
+
+	intel_dr_phy_device = platform_device_register_simple("intel_usb_dr_phy", 0, NULL, 0);
+	if (IS_ERR(intel_dr_phy_device) || !platform_get_drvdata(intel_dr_phy_device)) {
+		platform_driver_unregister(&intel_dr_phy_driver);
+		return -ENODEV;
+	}
+	return 0;
 }
-subsys_initcall(intel_dr_phy_init);
+rootfs_initcall(intel_dr_phy_init);
 
 static void __exit intel_dr_phy_exit(void)
 {
+	platform_device_unregister(intel_dr_phy_device);
 	platform_driver_unregister(&intel_dr_phy_driver);
 }
 module_exit(intel_dr_phy_exit);
-- 
2.7.4

