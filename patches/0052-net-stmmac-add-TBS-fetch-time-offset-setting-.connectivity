From c9de15d1691b76d2dbc208afcdb6cb99e7b9dd54 Mon Sep 17 00:00:00 2001
From: Kweh Hock Leong <hock.leong.kweh@intel.com>
Date: Fri, 9 Aug 2019 15:10:34 +0800
Subject: [PATCH 052/104] net: stmmac: add TBS fetch time offset setting
 functions

Introduce tbs_set_ftos() & tbs_set_fgos() to configure the TBS fetch time
offset (FTOS) or TBS fetch GSN slot offset (FGOS) under TSN HW tunable
framework.

Signed-off-by: Kweh Hock Leong <hock.leong.kweh@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  | 10 +++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  | 52 +++++++++++++-
 drivers/net/ethernet/stmicro/stmmac/hwif.h    | 11 ++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 72 ++++++++++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  4 ++
 5 files changed, 144 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index acb24eb68429..d222599b1896 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -177,9 +177,19 @@
 #define MTL_TBS_CTRL_LEOV		BIT(1)
 #define MTL_TBS_CTRL_ESTM		BIT(0)
 
+/* DMA TBS control register */
+#define DMA_TBS_CTRL			0x00001050
+#define DMA_TBS_CTRL_FTOS		GENMASK(31, 8)  /* Fetch time offset */
+#define DMA_TBS_CTRL_FTOS_SHIFT		8
+#define DMA_TBS_CTRL_FGOS		GENMASK(6, 4)   /* Fetch GSN offset */
+#define DMA_TBS_CTRL_FGOS_SHIFT		4
+#define DMA_TBS_CTRL_FTOV		BIT(0)  /* Valid bit */
+
 /* TBS Global defines */
 #define TBS_LEOS_MAX			999999999	/* Max LEOS (ns) */
 #define TBS_LEGOS_MAX			7		/* Max LE GSN Slot */
+#define TBS_FTOS_MAX			999999999	/* Max FTOS (ns) */
+#define TBS_FGOS_MAX			7		/* Max FT GSN Slot */
 
 /* MAC Core Version */
 #define TSN_VER_MASK		0xFF
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index d33a72225741..8bd5a3ee695f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -404,10 +404,14 @@ int dwmac5_est_irq_status(void __iomem *ioaddr, struct net_device *dev,
 }
 
 static void dwmac5_tbs_get_max(u32 *leos_max,
-			       u32 *legos_max)
+			       u32 *legos_max,
+			       u32 *ftos_max,
+			       u32 *fgos_max)
 {
 	*leos_max =  TBS_LEOS_MAX;
 	*legos_max = TBS_LEGOS_MAX;
+	*ftos_max =  TBS_FTOS_MAX;
+	*fgos_max = TBS_FGOS_MAX;
 }
 
 static void dwmac5_tbs_set_estm(void __iomem *ioaddr, const u32 estm)
@@ -466,6 +470,50 @@ static void dwmac5_tbs_set_legos(void __iomem *ioaddr, const u32 legos,
 	writel(value, ioaddr + MTL_TBS_CTRL);
 }
 
+static void dwmac5_tbs_set_ftos(void __iomem *ioaddr, const u32 ftos,
+				const u32 estm, const u32 fgos)
+{
+	u32 value;
+
+	value = readl(ioaddr + DMA_TBS_CTRL);
+
+	/* unset the valid bit for updating new fetch time ftos */
+	value &= ~DMA_TBS_CTRL_FTOV;
+	writel(value, ioaddr + DMA_TBS_CTRL);
+
+	value &= ~DMA_TBS_CTRL_FTOS;
+	value |= DMA_TBS_CTRL_FTOS &
+		 (ftos << DMA_TBS_CTRL_FTOS_SHIFT);
+
+	/* disable fetch time while it is zero */
+	if (ftos || (estm && fgos))
+		value |= DMA_TBS_CTRL_FTOV;
+
+	writel(value, ioaddr + DMA_TBS_CTRL);
+}
+
+static void dwmac5_tbs_set_fgos(void __iomem *ioaddr, const u32 fgos,
+				const u32 ftos)
+{
+	u32 value;
+
+	value = readl(ioaddr + DMA_TBS_CTRL);
+
+	/* Unset the valid bit for updating new fetch GSN slot */
+	value &= ~DMA_TBS_CTRL_FTOV;
+	writel(value, ioaddr + DMA_TBS_CTRL);
+
+	value &= ~DMA_TBS_CTRL_FGOS;
+	value |= DMA_TBS_CTRL_FGOS &
+		 (fgos << DMA_TBS_CTRL_FGOS_SHIFT);
+
+	/* Disable fetch time while it is zero */
+	if (ftos || fgos)
+		value |= DMA_TBS_CTRL_FTOV;
+
+	writel(value, ioaddr + DMA_TBS_CTRL);
+}
+
 const struct tsnif_ops dwmac510_tsnif_ops = {
 	.read_hwid = dwmac5_read_hwid,
 	.has_tsn_cap = dwmac5_has_tsn_cap,
@@ -489,6 +537,8 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.tbs_set_estm = dwmac5_tbs_set_estm,
 	.tbs_set_leos = dwmac5_tbs_set_leos,
 	.tbs_set_legos = dwmac5_tbs_set_legos,
+	.tbs_set_ftos = dwmac5_tbs_set_ftos,
+	.tbs_set_fgos = dwmac5_tbs_set_fgos,
 };
 
 void dwmac510_tsnif_setup(struct mac_device_info *mac)
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 8ce07431aad6..169ffa389fbd 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -705,12 +705,17 @@ struct tsnif_ops {
 			      struct tsn_mmc_stat *mmc_stat,
 			      unsigned int txqcnt);
 	/* Time-Based Scheduling (TBS) */
-	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max);
+	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max,
+			    u32 *ftos_max, u32 *fgos_max);
 	void (*tbs_set_estm)(void __iomem *ioaddr, const u32 estm);
 	void (*tbs_set_leos)(void __iomem *ioaddr, const u32 leos,
 			     const u32 estm);
 	void (*tbs_set_legos)(void __iomem *ioaddr, const u32 legos,
 			      const u32 leos);
+	void (*tbs_set_ftos)(void __iomem *ioaddr, const u32 ftos,
+			     const u32 estm, const u32 fgos);
+	void (*tbs_set_fgos)(void __iomem *ioaddr, const u32 fgos,
+			     const u32 ftos);
 };
 
 #define tsnif_read_hwid(__hw, __args...) \
@@ -757,5 +762,9 @@ struct tsnif_ops {
 	tsnif_do_void_callback(__hw, tbs_set_leos, __args)
 #define tsnif_tbs_set_legos(__hw, __args...) \
 	tsnif_do_void_callback(__hw, tbs_set_legos, __args)
+#define tsnif_tbs_set_ftos(__hw, __args...) \
+	tsnif_do_void_callback(__hw, tbs_set_ftos, __args)
+#define tsnif_tbs_set_fgos(__hw, __args...) \
+	tsnif_do_void_callback(__hw, tbs_set_fgos, __args)
 
 #endif /* __STMMAC_HWIF_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index 553e511ad47d..a8f4aa430636 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -147,16 +147,21 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 	cap->tils_max = tils_max;
 	tsnif_est_get_max(hw, &cap->ptov_max, &cap->ctov_max,
 			  &cap->cycle_max, &cap->idleslope_max);
+
 	cap->est_support = 1;
 
-	tsnif_tbs_get_max(hw, &cap->leos_max, &cap->legos_max);
+	tsnif_tbs_get_max(hw, &cap->leos_max, &cap->legos_max,
+			  &cap->ftos_max, &cap->fgos_max);
 
 	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tils_max=%u, tqcnt=%u\n",
 		 gcl_depth, ti_wid, cap->ext_max, tils_max, cap->txqcnt);
 
-	if (cap->tbs_support)
+	if (cap->tbs_support) {
 		dev_info(pdev, "TBS: leos_max=%u, legos_max=%u\n",
 			 cap->leos_max, cap->legos_max);
+		dev_info(pdev, "TBS: ftos_max=%u, fgos_max=%u\n",
+			 cap->ftos_max, cap->fgos_max);
+	}
 
 	return 0;
 }
@@ -209,7 +214,8 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 	u32 hw_bank;
 	u32 estm;
 	u32 leos;
-
+	u32 ftos;
+	u32 fgos;
 
 	switch (id) {
 	case TSN_HWTUNA_TX_EST_TILS:
@@ -223,6 +229,8 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 	case TSN_HWTUNA_TX_TBS_ESTM:
 	case TSN_HWTUNA_TX_TBS_LEOS:
 	case TSN_HWTUNA_TX_TBS_LEGOS:
+	case TSN_HWTUNA_TX_TBS_FTOS:
+	case TSN_HWTUNA_TX_TBS_FGOS:
 		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_TBS)) {
 			netdev_info(dev, "TBS: feature unsupported\n");
 			return -ENOTSUPP;
@@ -353,6 +361,62 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 			netdev_info(dev, "TBS: Set LEGOS = %u\n", data);
 		}
 		break;
+	case TSN_HWTUNA_TX_TBS_FTOS:
+		estm = info->hwtunable[TSN_HWTUNA_TX_TBS_ESTM];
+		fgos = info->hwtunable[TSN_HWTUNA_TX_TBS_FGOS];
+
+		if (data > cap->ftos_max) {
+			netdev_warn(dev,
+				    "TBS: invalid FTOS(%u), max=%u\n",
+				    data, cap->ftos_max);
+
+			return -EINVAL;
+		}
+
+		/* For EST mode, make sure leos does not exceed cycle time */
+		if (estm) {
+			hw_bank = tsnif_est_get_bank(hw, ioaddr, 0);
+			gcbc = &info->est_gcc.gcb[hw_bank];
+
+			if (data > (gcbc->gcrr.cycle_nsec - 1)) {
+				netdev_warn(dev,
+					    "TBS: FTOS > (cycle time - 1ns)\n");
+
+				return -EINVAL;
+			}
+		}
+
+		if (data != info->hwtunable[TSN_HWTUNA_TX_TBS_FTOS]) {
+			tsnif_tbs_set_ftos(hw, ioaddr, data, estm, fgos);
+			info->hwtunable[TSN_HWTUNA_TX_TBS_FTOS] = data;
+			netdev_info(dev, "TBS: Set FTOS = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_TBS_FGOS:
+		estm = info->hwtunable[TSN_HWTUNA_TX_TBS_ESTM];
+		ftos = info->hwtunable[TSN_HWTUNA_TX_TBS_FTOS];
+
+		/* if EST not turn on, ret fail */
+		if (!(tsn_has_feat(hw, dev, TSN_FEAT_ID_EST) && estm)) {
+			netdev_warn(dev, "TBS EST mode is not enabled\n");
+
+			return -EINVAL;
+		}
+
+		if (data > cap->fgos_max) {
+			netdev_warn(dev,
+				    "TBS: invalid FGOS(%u), max=%u\n",
+				    data, cap->fgos_max);
+
+			return -EINVAL;
+		}
+
+		if (data != info->hwtunable[TSN_HWTUNA_TX_TBS_FGOS]) {
+			tsnif_tbs_set_fgos(hw, ioaddr, data, ftos);
+			info->hwtunable[TSN_HWTUNA_TX_TBS_FGOS] = data;
+			netdev_info(dev, "TBS: Set FGOS = %u\n", data);
+		}
+		break;
 	default:
 		netdev_warn(dev, "TSN: invalid tunable id(%u)\n", id);
 		ret = -EINVAL;
@@ -378,6 +442,8 @@ int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
 	case TSN_HWTUNA_TX_TBS_ESTM:
 	case TSN_HWTUNA_TX_TBS_LEOS:
 	case TSN_HWTUNA_TX_TBS_LEGOS:
+	case TSN_HWTUNA_TX_TBS_FTOS:
+	case TSN_HWTUNA_TX_TBS_FGOS:
 		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_TBS)) {
 			netdev_info(dev, "TBS: feature unsupported\n");
 			return -ENOTSUPP;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index abdc4635175b..dd366db0c8c8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -19,6 +19,8 @@ enum tsn_hwtunable_id {
 	TSN_HWTUNA_TX_TBS_ESTM,	 /* TBS Absolute or EST mode */
 	TSN_HWTUNA_TX_TBS_LEOS,
 	TSN_HWTUNA_TX_TBS_LEGOS,
+	TSN_HWTUNA_TX_TBS_FTOS,	/* Fetch time offset (nsec) */
+	TSN_HWTUNA_TX_TBS_FGOS,	/* Fetch GSN offset (slot number) */
 	TSN_HWTUNA_MAX,
 };
 
@@ -59,6 +61,8 @@ struct tsn_hw_cap {
 	u32 idleslope_max;	/* Max idle slope */
 	u32 leos_max;		/* Launch Expiry Offset */
 	u32 legos_max;		/* Launch Expiry GSN Offset */
+	u32 ftos_max;		/* Max Fetch Time Offset */
+	u32 fgos_max;		/* Max Fetch GSN Offset */
 };
 
 /* EST Gate Control Entry */
-- 
2.17.1

