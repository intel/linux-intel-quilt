From 9ef6c9124e6f3752b65abd198d7410fb145b9395 Mon Sep 17 00:00:00 2001
From: "Li, Fei1" <fei1.li@intel.com>
Date: Tue, 24 Jul 2018 21:06:44 +0800
Subject: [PATCH 1877/2345] sos: vhm: add hcall_write_protect_page hypercall

1. add write_protect_page to set or unset one page write protect
2. replace update_memmap_attr with write_protect_page to set or
unset one page write protect
3. replace update_memmap_attr with set_mmio_map to add guest memory region

Signed-off-by: Li, Fei1 <fei1.li@intel.com>
---
 drivers/gpu/drm/i915/gvt/acrn-gvt.c | 45 +++++++++++++++++--------------------
 drivers/vhm/vhm_hypercall.c         |  5 +++++
 drivers/vhm/vhm_mm.c                | 25 ++++++++++++++++-----
 include/linux/vhm/acrn_hv_defs.h    | 14 ++++++++++++
 include/linux/vhm/acrn_vhm_mm.h     | 23 +++++--------------
 include/linux/vhm/vhm_hypercall.h   |  2 ++
 6 files changed, 67 insertions(+), 47 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/acrn-gvt.c b/drivers/gpu/drm/i915/gvt/acrn-gvt.c
index 96f5070..5653d20 100644
--- a/drivers/gpu/drm/i915/gvt/acrn-gvt.c
+++ b/drivers/gpu/drm/i915/gvt/acrn-gvt.c
@@ -663,12 +663,9 @@ static int acrngt_set_wp_page(unsigned long handle, u64 gfn)
 		gvt_err("failed acrn_ioreq_add_iorange for gfn 0x%llx\n", gfn);
 		return ret;
 	}
-	ret = update_memmap_attr(info->vm_id, gfn << PAGE_SHIFT,
-				acrn_hpa2gpa(hpa), 0x1000,
-				MEM_TYPE_WB,
-				(MEM_ACCESS_READ | MEM_ACCESS_EXEC));
+	ret = write_protect_page(info->vm_id, gfn << PAGE_SHIFT, true);
 	if (ret)
-		gvt_err("failed update_memmap_attr set for gfn 0x%llx\n", gfn);
+		gvt_err("failed set write protect for gfn 0x%llx\n", gfn);
 	return ret;
 }
 
@@ -680,12 +677,9 @@ static int acrngt_unset_wp_page(unsigned long handle, u64 gfn)
 	gvt_dbg_core("unset wp page for gfx 0x%llx\n", gfn);
 
 	hpa = vhm_vm_gpa2hpa(info->vm_id, gfn << PAGE_SHIFT);
-	/* TODO: need to read back default value before write */
-	ret = update_memmap_attr(info->vm_id, gfn << PAGE_SHIFT,
-			acrn_hpa2gpa(hpa), 0x1000, MEM_TYPE_WB, MEM_ACCESS_RWX);
+	ret = write_protect_page(info->vm_id, gfn << PAGE_SHIFT, false);
 	if (ret) {
-		gvt_err("failed update_memmap_attr unset for gfn 0x%llx\n",
-			gfn);
+		gvt_err("failed unset write protect for gfn 0x%llx\n", gfn);
 		return ret;
 	}
 	ret = acrn_ioreq_del_iorange(info->client, REQ_WP, gfn << PAGE_SHIFT,
@@ -814,7 +808,7 @@ static int acrngt_set_trap_area(unsigned long handle, u64 start,
 
 static int acrngt_set_pvmmio(unsigned long handle, u64 start, u64 end, bool map)
 {
-	int rc;
+	int rc, i;
 	unsigned long mfn, shared_mfn;
 	unsigned long pfn = start >> PAGE_SHIFT;
 	u32 mmio_size_fn = acrngt_priv.gvt->device_info.mmio_size >> PAGE_SHIFT;
@@ -844,13 +838,15 @@ static int acrngt_set_pvmmio(unsigned long handle, u64 start, u64 end, bool map)
 			gvt_err("failed acrn_ioreq_add_iorange for pfn 0x%lx\n", pfn);
 			return rc;
 		}
-		rc = update_memmap_attr(info->vm_id, pfn << PAGE_SHIFT,
-					mfn << PAGE_SHIFT,
-					mmio_size_fn << PAGE_SHIFT,
-					MEM_TYPE_WB,
-					(MEM_ACCESS_READ | MEM_ACCESS_EXEC));
-		if (rc)
-			gvt_err("failed update_memmap_attr set for pfn 0x%lx\n", pfn);
+
+		for (i = 0; i < mmio_size_fn; i++) {
+			rc = write_protect_page(info->vm_id,
+				(pfn + i) << PAGE_SHIFT, true);
+			if (rc) {
+				gvt_err("failed set wp for pfn 0x%lx\n", pfn + i);
+				return rc;
+			}
+		}
 
 		/* scratch reg access is trapped like mmio access, 1 page */
 		rc = acrngt_map_gfn_to_mfn(handle, pfn + (VGT_PVINFO_PAGE >> PAGE_SHIFT),
@@ -870,14 +866,15 @@ static int acrngt_set_pvmmio(unsigned long handle, u64 start, u64 end, bool map)
 		}
 
 		/* shared page is not trapped, directly pass through */
-		//todo: MEM_ATTR_ALL_WB or MEM_ATTR_ALL?
-		rc = update_memmap_attr(info->vm_id,
+		rc = set_mmio_map(info->vm_id,
 				(pfn + mmio_size_fn) << PAGE_SHIFT,
-				shared_mfn << PAGE_SHIFT,
-				0x1000, MEM_TYPE_WB, MEM_ACCESS_RWX);
-		if (rc)
-			gvt_err("failed update_memmap_attr set for gfn 0x%lx\n",
+				shared_mfn << PAGE_SHIFT, 0x1000,
+				MEM_TYPE_WB, MEM_ACCESS_RWX);
+		if (rc) {
+			gvt_err("failed set map for gfn 0x%lx\n",
 				pfn + mmio_size_fn);
+			return rc;
+		}
 	} else {
 		mfn = acrngt_virt_to_mfn(info->vgpu->mmio.vreg);
 		rc = acrngt_map_gfn_to_mfn(handle, pfn, mfn, mmio_size_fn, map);
diff --git a/drivers/vhm/vhm_hypercall.c b/drivers/vhm/vhm_hypercall.c
index 2c51c36..8611bb1 100644
--- a/drivers/vhm/vhm_hypercall.c
+++ b/drivers/vhm/vhm_hypercall.c
@@ -112,6 +112,11 @@ inline long hcall_set_memmaps(unsigned long pa_memmaps)
 	return acrn_hypercall1(HC_VM_SET_MEMMAPS, pa_memmaps);
 }
 
+inline long hcall_write_protect_page(unsigned long vmid, unsigned long wp)
+{
+	return acrn_hypercall2(HC_VM_WRITE_PROTECT_PAGE, vmid, wp);
+}
+
 inline long hcall_set_ioreq_buffer(unsigned long vmid, unsigned long buffer)
 {
 	return acrn_hypercall2(HC_SET_IOREQ_BUFFER, vmid, buffer);
diff --git a/drivers/vhm/vhm_mm.c b/drivers/vhm/vhm_mm.c
index f663558..c7ca8e99 100644
--- a/drivers/vhm/vhm_mm.c
+++ b/drivers/vhm/vhm_mm.c
@@ -159,12 +159,27 @@ int set_memmaps(struct set_memmaps *memmaps)
 	return 0;
 }
 
-int update_memmap_attr(unsigned long vmid, unsigned long guest_gpa,
-	unsigned long host_gpa, unsigned long len,
-	unsigned int mem_type, unsigned int mem_access_right)
+/*
+ * when set is true, set page write protection,
+ * else clear page write protection.
+ */
+int write_protect_page(unsigned long vmid,
+	unsigned long gpa, unsigned char set)
 {
-	return _mem_set_memmap(vmid, guest_gpa, host_gpa, len,
-		mem_type, mem_access_right, MAP_MEM);
+	struct wp_data wp;
+
+	wp.set = set;
+	wp.gpa = gpa;
+
+	if (hcall_write_protect_page(vmid,
+			virt_to_phys(&wp)) < 0) {
+		pr_err("vhm: vm[%ld] %s failed !\n", vmid, __func__);
+		return -EFAULT;
+	}
+
+	pr_debug("VHM: %s, gpa: 0x%lx, set: %d\n", __func__, gpa, set);
+
+	return 0;
 }
 
 int map_guest_memseg(struct vhm_vm *vm, struct vm_memmap *memmap)
diff --git a/include/linux/vhm/acrn_hv_defs.h b/include/linux/vhm/acrn_hv_defs.h
index 67b91dd..e1c653b 100644
--- a/include/linux/vhm/acrn_hv_defs.h
+++ b/include/linux/vhm/acrn_hv_defs.h
@@ -96,6 +96,7 @@
 #define HC_VM_SET_MEMMAP            _HC_ID(HC_ID, HC_ID_MEM_BASE + 0x00)
 #define HC_VM_GPA2HPA               _HC_ID(HC_ID, HC_ID_MEM_BASE + 0x01)
 #define HC_VM_SET_MEMMAPS           _HC_ID(HC_ID, HC_ID_MEM_BASE + 0x02)
+#define HC_VM_WRITE_PROTECT_PAGE    _HC_ID(HC_ID, HC_ID_MEM_BASE + 0x03)
 
 /* PCI assignment*/
 #define HC_ID_PCI_BASE              0x50UL
@@ -186,6 +187,19 @@ struct set_memmaps {
 	uint64_t memmaps_gpa;
 } __attribute__((aligned(8)));
 
+struct wp_data {
+	/** set page write protect permission.
+	 *  ture: set the wp; flase: clear the wp
+	 */
+	uint8_t set;
+
+	/** Reserved */
+	uint64_t pad:56;
+
+	/** the guest physical address of the page to change */
+	uint64_t gpa;
+} __aligned(8);
+
 struct sbuf_setup_param {
 	uint16_t pcpu_id;
 	uint16_t reserved;
diff --git a/include/linux/vhm/acrn_vhm_mm.h b/include/linux/vhm/acrn_vhm_mm.h
index 645a8a5..0769200 100644
--- a/include/linux/vhm/acrn_vhm_mm.h
+++ b/include/linux/vhm/acrn_vhm_mm.h
@@ -137,29 +137,16 @@ int unset_mmio_map(unsigned long vmid, unsigned long guest_gpa,
 	unsigned long host_gpa, unsigned long len);
 
 /**
- * update_memmap_attr - update mmio EPT mapping between UOS gpa and SOS gpa
+ * write_protect_page - change one page write protection
  *
  * @vmid: guest vmid
- * @guest_gpa: gpa of UOS
- * @host_gpa: gpa of SOS
- * @len: memory mapped length
- * @mem_type: memory mapping type. Possible value could be:
- *                    MEM_TYPE_WB
- *                    MEM_TYPE_WT
- *                    MEM_TYPE_UC
- *                    MEM_TYPE_WC
- *                    MEM_TYPE_WP
- * @mem_access_right: memory mapping access. Possible value could be:
- *                    MEM_ACCESS_READ
- *                    MEM_ACCESS_WRITE
- *                    MEM_ACCESS_EXEC
- *                    MEM_ACCESS_RWX
+ * @gpa: gpa in guest vmid
+ * @set: set or clear page write protection
  *
  * Return: 0 on success, <0 for error.
  */
-int update_memmap_attr(unsigned long vmid, unsigned long guest_gpa,
-	unsigned long host_gpa, unsigned long len,
-	unsigned int mem_type, unsigned int mem_access_right);
+int write_protect_page(unsigned long vmid,
+	unsigned long gpa, unsigned char set);
 
 int vhm_dev_mmap(struct file *file, struct vm_area_struct *vma);
 
diff --git a/include/linux/vhm/vhm_hypercall.h b/include/linux/vhm/vhm_hypercall.h
index fff8e73..99d1a3f 100644
--- a/include/linux/vhm/vhm_hypercall.h
+++ b/include/linux/vhm/vhm_hypercall.h
@@ -151,6 +151,8 @@ inline long hcall_get_cpu_state(unsigned long cmd, unsigned long state_pa);
 inline long hcall_set_memmap(unsigned long vmid,
 		unsigned long memmap);
 inline long hcall_set_memmaps(unsigned long pa_memmaps);
+inline long hcall_write_protect_page(unsigned long vmid,
+		unsigned long wp);
 inline long hcall_set_ioreq_buffer(unsigned long vmid,
 		unsigned long buffer);
 inline long hcall_notify_req_finish(unsigned long vmid, unsigned long vcpu);
-- 
2.7.4

