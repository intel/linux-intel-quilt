From 4de5b4d15c02feeb319e1f01654027bf3f62624f Mon Sep 17 00:00:00 2001
From: Vincent Cao <vincent.t.cao@intel.com>
Date: Tue, 19 Jun 2018 16:49:01 -0700
Subject: [PATCH 01/12] TEE/OPTEE: Adds a kernel internal TEE client interface

Enable TEE core additional kernel interface client interface to be
used by other drivers.

all patch credited to Jens Wiklander
https://patchwork.kernel.org/patch/9845351/

Signed-off-by: Vincent Cao <vincent.t.cao@intel.com>
Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 README.intel.optee      | 13 ++++++++
 drivers/tee/tee_core.c  |  1 -
 include/linux/tee_drv.h | 72 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 85 insertions(+), 1 deletion(-)
 create mode 100644 README.intel.optee

diff --git a/README.intel.optee b/README.intel.optee
new file mode 100644
index 000000000000..0945d23cc882
--- /dev/null
+++ b/README.intel.optee
@@ -0,0 +1,13 @@
+IP Block: OPTEE core driver
+Platform Affect: (ARM64) IOTG KeemBay
+BugFix: None
+
+This branch pulls in driver interface enhancement to OPTEE TEE driver to expose
+an kernel internal TEE client interface to be used by other drivers.
+
+This patch was pushed to the upstream kernel mailinglist by Jens Wiklander (OPTEE maintainer)
+nearly a year ago but no effort to include yet in any recently release.
+
+https://patchwork.kernel.org/patch/9845351/
+
+CONFIG_TEE and CONFIG_OPTEE in defconfig must be enabled for driver to compile.
diff --git a/drivers/tee/tee_core.c b/drivers/tee/tee_core.c
index 17c64fccbb10..3208149e1389 100644
--- a/drivers/tee/tee_core.c
+++ b/drivers/tee/tee_core.c
@@ -63,7 +63,6 @@ static struct tee_context *teedev_open(struct tee_device *teedev)
 	kfree(ctx);
 	tee_device_put(teedev);
 	return ERR_PTR(rc);
-
 }
 
 void teedev_ctx_get(struct tee_context *ctx)
diff --git a/include/linux/tee_drv.h b/include/linux/tee_drv.h
index 4a49f80e7f71..fde143684dc1 100644
--- a/include/linux/tee_drv.h
+++ b/include/linux/tee_drv.h
@@ -585,5 +585,77 @@ struct tee_client_driver {
 
 #define to_tee_client_driver(d) \
 		container_of(d, struct tee_client_driver, driver)
+/**
+ * tee_client_open_context() - Open a TEE context
+ * @start:	if not NULL, continue search after this context
+ * @match:	function to check TEE device
+ * @data:	data for match function
+ * @vers:	if not NULL, version data of TEE device of the context returned
+ *
+ * This function does an operation similar to open("/dev/teeX") in user space.
+ * A returned context must be released with tee_client_close_context().
+ *
+ * Returns a TEE context of the first TEE device matched by the match()
+ * callback or an ERR_PTR.
+ */
+struct tee_context *
+tee_client_open_context(struct tee_context *start,
+			int (*match)(struct tee_ioctl_version_data *,
+				     const void *),
+			const void *data, struct tee_ioctl_version_data *vers);
+
+/**
+ * tee_client_close_context() - Close a TEE context
+ * @ctx:	TEE context to close
+ *
+ * Note that all sessions previously opened with this context will be
+ * closed when this function is called.
+ */
+void tee_client_close_context(struct tee_context *ctx);
+
+/**
+ * tee_client_get_version() - Query version of TEE
+ * @ctx:	TEE context to TEE to query
+ * @vers:	Pointer to version data
+ */
+void tee_client_get_version(struct tee_context *ctx,
+			    struct tee_ioctl_version_data *vers);
+
+/**
+ * tee_client_open_session() - Open a session to a Trusted Application
+ * @ctx:	TEE context
+ * @arg:	Open session arguments, see description of
+ *		struct tee_ioctl_open_session_arg
+ * @param:	Parameters passed to the Trusted Application
+ *
+ * Returns < 0 on error else see @arg->ret for result. If @arg->ret
+ * is TEEC_SUCCESS the session identifier is available in @arg->session.
+ */
+int tee_client_open_session(struct tee_context *ctx,
+			    struct tee_ioctl_open_session_arg *arg,
+			    struct tee_param *param);
+
+/**
+ * tee_client_close_session() - Close a session to a Trusted Application
+ * @ctx:	TEE Context
+ * @session:	Session id
+ *
+ * Return < 0 on error else 0, regardless the session will not be
+ * valid after this function has returned.
+ */
+int tee_client_close_session(struct tee_context *ctx, u32 session);
+
+/**
+ * tee_client_invoke_func() - Invoke a function in a Trusted Application
+ * @ctx:	TEE Context
+ * @arg:	Invoke arguments, see description of
+ *		struct tee_ioctl_invoke_arg
+ * @param:	Parameters passed to the Trusted Application
+ *
+ * Returns < 0 on error else see @arg->ret for result.
+ */
+int tee_client_invoke_func(struct tee_context *ctx,
+			   struct tee_ioctl_invoke_arg *arg,
+			   struct tee_param *param);
 
 #endif /*__TEE_DRV_H*/
-- 
2.17.1

