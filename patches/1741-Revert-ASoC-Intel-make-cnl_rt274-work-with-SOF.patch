From 2141c6f48d642d8503871379e115b86477b39569 Mon Sep 17 00:00:00 2001
From: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date: Mon, 2 Jul 2018 19:58:36 -0500
Subject: [PATCH 1741/2302] Revert "ASoC: Intel: make cnl_rt274 work with SOF"

This reverts commit 896f287bedb2886e40615874be2db021a54566c5.
---
 sound/soc/intel/boards/cnl_rt274.c | 218 ++++---------------------------------
 1 file changed, 22 insertions(+), 196 deletions(-)

diff --git a/sound/soc/intel/boards/cnl_rt274.c b/sound/soc/intel/boards/cnl_rt274.c
index 38f4d78..3165952 100644
--- a/sound/soc/intel/boards/cnl_rt274.c
+++ b/sound/soc/intel/boards/cnl_rt274.c
@@ -69,7 +69,7 @@ static struct snd_soc_dai *cnl_get_codec_dai(struct snd_soc_card *card,
 }
 
 static int cnl_rt274_clock_control(struct snd_soc_dapm_widget *w,
-				   struct snd_kcontrol *k, int  event)
+		struct snd_kcontrol *k, int  event)
 {
 	struct snd_soc_dapm_context *dapm = w->dapm;
 	struct snd_soc_card *card = dapm->card;
@@ -81,12 +81,12 @@ static int cnl_rt274_clock_control(struct snd_soc_dapm_widget *w,
 	if (!codec_dai)
 		return -EINVAL;
 
-	/* Codec needs clock for Jack detection and button press */
-	ret = snd_soc_dai_set_sysclk(codec_dai, RT274_SCLK_S_PLL2,
-				     CNL_FREQ_OUT, SND_SOC_CLOCK_IN);
-	if (ret < 0) {
-		dev_err(codec_dai->dev, "set codec sysclk failed: %d\n", ret);
-		return ret;
+	ret = snd_soc_dai_set_sysclk(codec_dai, RT274_SCLK_S_PLL1,
+							CNL_FREQ_OUT,
+							SND_SOC_CLOCK_IN);
+	if (ret) {
+		dev_err(codec_dai->dev,
+			"failed to enable PLL1: %d\n", ret);
 	}
 
 	if (SND_SOC_DAPM_EVENT_ON(event)) {
@@ -129,8 +129,8 @@ static const struct snd_soc_dapm_widget cnl_rt274_widgets[] = {
 	SND_SOC_DAPM_MIC("Mic Jack", NULL),
 	SND_SOC_DAPM_MIC("SoC DMIC", NULL),
 	SND_SOC_DAPM_SUPPLY("Platform Clock", SND_SOC_NOPM, 0, 0,
-			    cnl_rt274_clock_control, SND_SOC_DAPM_PRE_PMU |
-			    SND_SOC_DAPM_POST_PMD),
+			cnl_rt274_clock_control, SND_SOC_DAPM_PRE_PMU |
+			SND_SOC_DAPM_POST_PMD),
 };
 
 static const struct snd_soc_pcm_stream dai_params_codec = {
@@ -185,9 +185,8 @@ static int cnl_rt274_init(struct snd_soc_pcm_runtime *runtime)
 	struct snd_soc_dai *codec_dai = runtime->codec_dai;
 
 	ret = snd_soc_card_jack_new(runtime->card, "Headset",
-				    SND_JACK_HEADSET, &cnl_headset,
-				    cnl_headset_pins,
-				    ARRAY_SIZE(cnl_headset_pins));
+		SND_JACK_HEADSET, &cnl_headset,
+		cnl_headset_pins, ARRAY_SIZE(cnl_headset_pins));
 
 	if (ret)
 		return ret;
@@ -207,115 +206,43 @@ static int cnl_rt274_init(struct snd_soc_pcm_runtime *runtime)
 }
 
 static int cnl_be_fixup(struct snd_soc_pcm_runtime *rtd,
-			struct snd_pcm_hw_params *params)
+			    struct snd_pcm_hw_params *params)
 {
 	struct snd_interval *rate = hw_param_interval(params,
 			SNDRV_PCM_HW_PARAM_RATE);
 	struct snd_interval *channels = hw_param_interval(params,
 						SNDRV_PCM_HW_PARAM_CHANNELS);
 
-	rate->min = CNL_BE_FIXUP_RATE;
-	rate->max = CNL_BE_FIXUP_RATE;
-	channels->min = 2;
-	channels->max = 2;
+	rate->min = rate->max = CNL_BE_FIXUP_RATE;
+	channels->min = channels->max = 2;
 	snd_mask_none(hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT));
 	snd_mask_set(hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT),
-		     SNDRV_PCM_FORMAT_S24_LE);
+						SNDRV_PCM_FORMAT_S24_LE);
 
 	return 0;
 }
 
-#if IS_ENABLED(CONFIG_SND_SOC_INTEL_CNL_FPGA)
-static const char pname[] = "0000:02:18.0";
-static const char cname[] = "rt274.0-001c";
-#else
-static const char pname[] = "0000:00:1f.3";
-#endif
 static int cnl_dmic_fixup(struct snd_soc_pcm_runtime *rtd,
-			  struct snd_pcm_hw_params *params)
+				struct snd_pcm_hw_params *params)
 {
 	struct snd_interval *channels = hw_param_interval(params,
 						SNDRV_PCM_HW_PARAM_CHANNELS);
-	channels->min = 2;
-	channels->max = 2;
+	channels->min = channels->max = 2;
 
 	return 0;
 }
 
+static const char pname[] = "0000:00:1f.3";
 static const char cname[] = "i2c-INT34C2:00";
 
-struct snd_soc_dai_link cnl_rt274_msic_dailink[] = {
-	/* Trace Buffer DAI links */
-	{
-		.name = "CNL Trace Buffer0",
-		.stream_name = "Core 0 Trace Buffer",
-		.cpu_dai_name = "TraceBuffer0 Pin",
-		.codec_name = "snd-soc-dummy",
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.platform_name = pname,
-		.capture_only = true,
-		.ignore_suspend = 1,
-	},
-	{
-		.name = "CNL Trace Buffer1",
-		.stream_name = "Core 1 Trace Buffer",
-		.cpu_dai_name = "TraceBuffer1 Pin",
-		.codec_name = "snd-soc-dummy",
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.platform_name = pname,
-		.capture_only = true,
-		.ignore_suspend = 1,
-	},
-	{
-		.name = "CNL Trace Buffer2",
-		.stream_name = "Core 2 Trace Buffer",
-		.cpu_dai_name = "TraceBuffer2 Pin",
-		.codec_name = "snd-soc-dummy",
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.platform_name = pname,
-		.capture_only = true,
-		.ignore_suspend = 1,
-	},
-	{
-		.name = "CNL Trace Buffer3",
-		.stream_name = "Core 3 Trace Buffer",
-		.cpu_dai_name = "TraceBuffer3 Pin",
-		.codec_name = "snd-soc-dummy",
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.platform_name = pname,
-		.capture_only = true,
-		.ignore_suspend = 1,
-	},
-	/* Probe DAI-links */
-	{
-		.name = "CNL Compress Probe playback",
-		.stream_name = "Probe Playback",
-		.cpu_dai_name = "Compress Probe0 Pin",
-		.codec_name = "snd-soc-dummy",
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.platform_name = pname,
-		.init = NULL,
-		.ignore_suspend = 1,
-		.nonatomic = 1,
-	},
-	{
-		.name = "CNL Compress Probe capture",
-		.stream_name = "Probe Capture",
-		.cpu_dai_name = "Compress Probe1 Pin",
-		.codec_name = "snd-soc-dummy",
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.platform_name = pname,
-		.init = NULL,
-		.ignore_suspend = 1,
-		.nonatomic = 1,
-	},
-	/* back ends */
+struct snd_soc_dai_link cnl_rt274_dailink[] = {
 	{
 		.name = "SSP0-Codec",
 		.id = 1,
 		.cpu_dai_name = "SSP0 Pin",
 		.codec_name = cname,
 		.codec_dai_name = "rt274-aif1",
+		.platform_name = pname,
 		.be_hw_params_fixup = cnl_be_fixup,
 		.ignore_suspend = 1,
 		.no_pcm = 1,
@@ -331,125 +258,23 @@ struct snd_soc_dai_link cnl_rt274_msic_dailink[] = {
 		.cpu_dai_name = "DMIC01 Pin",
 		.codec_name = "dmic-codec",
 		.codec_dai_name = "dmic-hifi",
+		.platform_name = pname,
 		.ignore_suspend = 1,
 		.no_pcm = 1,
 		.dpcm_capture = 1,
 		.be_hw_params_fixup = cnl_dmic_fixup,
 	},
-	{
-		.name = "iDisp1",
-		.id = 3,
-		.cpu_dai_name = "iDisp1 Pin",
-		.codec_name = "ehdaudio0D2",
-		.codec_dai_name = "intel-hdmi-hifi1",
-		.platform_name = pname,
-		.dpcm_playback = 1,
-		.no_pcm = 1,
-	},
-	{
-		.name = "iDisp2",
-		.id = 4,
-		.cpu_dai_name = "iDisp2 Pin",
-		.codec_name = "ehdaudio0D2",
-		.codec_dai_name = "intel-hdmi-hifi2",
-		.platform_name = pname,
-		.dpcm_playback = 1,
-		.no_pcm = 1,
-	},
-	{
-		.name = "iDisp3",
-		.id = 5,
-		.cpu_dai_name = "iDisp3 Pin",
-		.codec_name = "ehdaudio0D2",
-		.codec_dai_name = "intel-hdmi-hifi3",
-		.platform_name = pname,
-		.dpcm_playback = 1,
-		.no_pcm = 1,
-	},
-	/* codec-codec link */
-	{
-		.name = "CNL SSP0-Loop Port",
-		.stream_name = "CNL SSP0-Loop",
-		.cpu_dai_name = "SSP0 Pin",
-		.platform_name = pname,
-		.codec_name = cname,
-		.codec_dai_name = "rt274-aif1",
-		.params = &dai_params_codec,
-		.dsp_loopback = true,
-		.dai_fmt = SND_SOC_DAIFMT_DSP_A |
-			SND_SOC_DAIFMT_NB_NF |
-			SND_SOC_DAIFMT_CBS_CFS,
-	},
 };
 
-#if !IS_ENABLED(CONFIG_SND_SOC_SOF_INTEL)
 static int
 cnl_add_dai_link(struct snd_soc_card *card, struct snd_soc_dai_link *link)
 {
-	struct cnl_rt274_private *ctx = snd_soc_card_get_drvdata(card);
-	char hdmi_dai_name[CNL_NAME_SIZE];
-	struct cnl_hdmi_pcm *pcm;
-
 	link->platform_name = pname;
 	link->nonatomic = 1;
 
-	/* Assuming HDMI dai link will consist the string "HDMI" */
-	if (strstr(link->name, "HDMI")) {
-		static int i = 1; /* hdmi codec dai name starts from index 1 */
-
-		pcm = devm_kzalloc(card->dev, sizeof(*pcm), GFP_KERNEL);
-		if (!pcm)
-			return -ENOMEM;
-
-		snprintf(hdmi_dai_name, sizeof(hdmi_dai_name), "intel-hdmi-hifi%d", i++);
-		pcm->codec_dai = cnl_get_codec_dai(card, hdmi_dai_name);
-		if (!pcm->codec_dai)
-			return -EINVAL;
-
-		pcm->device = ctx->pcm_count;
-		list_add_tail(&pcm->head, &ctx->hdmi_pcm_list);
-	}
-	ctx->pcm_count++;
-
 	return 0;
 }
 
-static int cnl_card_late_probe(struct snd_soc_card *card)
-{
-	struct cnl_rt274_private *ctx = snd_soc_card_get_drvdata(card);
-	struct snd_soc_codec *codec = NULL;
-	char jack_name[CNL_NAME_SIZE];
-	struct cnl_hdmi_pcm *pcm;
-	int err, i = 0;
-
-	if (list_empty(&ctx->hdmi_pcm_list))
-		return 0;
-
-	list_for_each_entry(pcm, &ctx->hdmi_pcm_list, head) {
-		codec = pcm->codec_dai->codec;
-		snprintf(jack_name, sizeof(jack_name),
-			"HDMI/DP, pcm=%d Jack", pcm->device);
-		err = snd_soc_card_jack_new(card, jack_name,
-					SND_JACK_AVOUT, &cnl_hdmi[i],
-					NULL, 0);
-		if (err)
-			return err;
-
-		err = hdac_hdmi_jack_init(pcm->codec_dai,
-					  pcm->device, &cnl_hdmi[i]);
-		if (err < 0)
-			return err;
-
-		i++;
-	}
-
-	if (!codec)
-		return -EINVAL;
-
-	return hdac_hdmi_jack_port_init(codec, &card->dapm);
-}
-#endif
-
 /* SoC card */
 static struct snd_soc_card snd_soc_card_cnl = {
 	.name = "cnl-audio",
@@ -461,6 +286,7 @@ static struct snd_soc_card snd_soc_card_cnl = {
 	.num_dapm_routes = ARRAY_SIZE(cnl_map),
 	.controls = cnl_controls,
 	.num_controls = ARRAY_SIZE(cnl_controls),
+	.add_dai_link = cnl_add_dai_link,
 	.fully_routed = true,
 #if !IS_ENABLED(CONFIG_SND_SOC_SOF_INTEL)
 	.add_dai_link = cnl_add_dai_link,
-- 
2.7.4

