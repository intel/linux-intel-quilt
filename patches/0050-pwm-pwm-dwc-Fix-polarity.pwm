From a0320d79549a083fa7f61f5881850116add128cc Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Tue, 30 Jun 2020 17:19:56 +0300
Subject: [PATCH 50/55] pwm: pwm-dwc: Fix polarity

This HW is actually fixed inversed polarity by the PWM framework
conventions. In this HW cycle begins with a low period. By the PWM
framework convention a signal always begins with the duty cycle. Which
means this HW cannot do normal polarity.

From PWM framework documentation:

"Conversely, a signal with inversed polarity starts low for the duration
of the duty cycle and goes high for the remainder of the period."

So current implementation is incorrect even duty and period calculations
are correct for example when driving the backlight.

But since implementation doesn't match with convention fix the polarity
to be inversed and change the duty and period calculations accordingly.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/pwm/pwm-dwc.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/pwm/pwm-dwc.c b/drivers/pwm/pwm-dwc.c
index 1ae430b9b13a..8e2b18ca2213 100644
--- a/drivers/pwm/pwm-dwc.c
+++ b/drivers/pwm/pwm-dwc.c
@@ -91,9 +91,9 @@ static void __dwc_pwm_configure_timer(struct dwc_pwm *dwc,
 
 	__dwc_pwm_set_enable(dwc, pwm->hwpwm, false);
 
-	high = DIV_ROUND_CLOSEST(state->duty_cycle, DWC_CLK_PERIOD_NS) - 1;
-	low = DIV_ROUND_CLOSEST(state->period - state->duty_cycle,
-				DWC_CLK_PERIOD_NS) - 1;
+	low = DIV_ROUND_CLOSEST(state->duty_cycle, DWC_CLK_PERIOD_NS) - 1;
+	high = DIV_ROUND_CLOSEST(state->period - state->duty_cycle,
+				 DWC_CLK_PERIOD_NS) - 1;
 
 	dwc_pwm_writel(dwc, low, DWC_TIM_LD_CNT(pwm->hwpwm));
 	dwc_pwm_writel(dwc, high, DWC_TIM_LD_CNT2(pwm->hwpwm));
@@ -109,7 +109,7 @@ static int dwc_pwm_apply(struct pwm_chip *chip, struct pwm_device *pwm,
 {
 	struct dwc_pwm *dwc = to_dwc_pwm(chip);
 
-	if (state->polarity != PWM_POLARITY_NORMAL)
+	if (state->polarity != PWM_POLARITY_INVERSED)
 		return -EINVAL;
 
 	if (state->enabled) {
@@ -137,18 +137,18 @@ static void dwc_pwm_get_state(struct pwm_chip *chip, struct pwm_device *pwm,
 	state->enabled = !!(dwc_pwm_readl(dwc,
 				DWC_TIM_CTRL(pwm->hwpwm)) & DWC_TIM_CTRL_EN);
 
-	duty = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT2(pwm->hwpwm));
+	duty = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT(pwm->hwpwm));
 	duty += 1;
 	duty *= DWC_CLK_PERIOD_NS;
 	state->duty_cycle = duty;
 
-	period = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT(pwm->hwpwm));
+	period = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT2(pwm->hwpwm));
 	period += 1;
 	period *= DWC_CLK_PERIOD_NS;
 	period += duty;
 	state->period = period;
 
-	state->polarity = PWM_POLARITY_NORMAL;
+	state->polarity = PWM_POLARITY_INVERSED;
 
 	pm_runtime_put_sync(chip->dev);
 }
-- 
2.27.0

