From abaf295f948a6d9da5458d731637b7b77996a285 Mon Sep 17 00:00:00 2001
From: "Nikunj A. Dadhania" <nikunj.dadhania@intel.com>
Date: Fri, 6 Mar 2020 11:27:02 +0530
Subject: [PATCH 09/19] Revert "ptp: Add new PTP capabilities for Intel TGPIO
 hardware"

This reverts commit a41ccb7b820337e6eb9a7f280a5ee270f4fc4742.
---
 drivers/ptp/ptp_chardev.c        | 56 +++++++++-----------------------
 drivers/ptp/ptp_clock.c          | 14 --------
 include/linux/ptp_clock_kernel.h |  2 --
 include/uapi/linux/ptp_clock.h   | 36 ++------------------
 4 files changed, 18 insertions(+), 90 deletions(-)

diff --git a/drivers/ptp/ptp_chardev.c b/drivers/ptp/ptp_chardev.c
index e02efac586b6..9d72ab593f13 100644
--- a/drivers/ptp/ptp_chardev.c
+++ b/drivers/ptp/ptp_chardev.c
@@ -12,7 +12,6 @@
 #include <linux/timekeeping.h>
 
 #include <linux/nospec.h>
-#include <linux/string.h>
 
 #include "ptp_private.h"
 
@@ -107,24 +106,11 @@ int ptp_open(struct posix_clock *pc, fmode_t fmode)
 	return 0;
 }
 
-/* Returns -1 if any reserved fields are non-zero */
-static inline int check_rsv_field(unsigned int *field, size_t size)
-{
-	unsigned int *iter;
-	int ret = 0;
-
-	for(iter = field; iter < field+size && ret == 0; ++iter)
-		ret = *field == 0 ? 0 : -1;
-
-	return ret;
-}
-
 long ptp_ioctl(struct posix_clock *pc, unsigned int cmd, unsigned long arg)
 {
 	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 	struct ptp_sys_offset_extended *extoff = NULL;
 	struct ptp_sys_offset_precise precise_offset;
-	struct ptp_event_count_tstamp counttstamp;
 	struct system_device_crosststamp xtstamp;
 	struct ptp_clock_info *ops = ptp->info;
 	struct ptp_sys_offset *sysoff = NULL;
@@ -223,26 +209,6 @@ long ptp_ioctl(struct posix_clock *pc, unsigned int cmd, unsigned long arg)
 		err = ops->enable(ops, &req, enable);
 		break;
 
-	case PTP_EVENT_COUNT_TSTAMP2:
-		if (!ops->counttstamp)
-			return -ENOTSUPP;
-		if (copy_from_user(&counttstamp, (void __user *)arg,
-				   sizeof(counttstamp))) {
-			err = -EFAULT;
-			break;
-		}
-		if (counttstamp.flags & ~PTP_EVENT_COUNT_TSTAMP_POL_LOW)
-			counttstamp.flags &= PTP_EVENT_COUNT_TSTAMP_POL_LOW;
-		if (counttstamp.rsv[0] || counttstamp.rsv[1]) {
-			err = -EINVAL;
-			break;
-		}
-		err = ops->counttstamp(ops, &counttstamp);
-		if (!err && copy_to_user((void __user *)arg, &counttstamp,
-						sizeof(counttstamp)))
-			err = -EFAULT;
-		break;
-
 	case PTP_ENABLE_PPS:
 	case PTP_ENABLE_PPS2:
 		memset(&req, 0, sizeof(req));
@@ -352,12 +318,17 @@ long ptp_ioctl(struct posix_clock *pc, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		if (check_rsv_field(pd.rsv, sizeof(pd.rsv)/sizeof(pd.rsv[0])
-				&& cmd == PTP_PIN_GETFUNC2)) {
+		if ((pd.rsv[0] || pd.rsv[1] || pd.rsv[2]
+				|| pd.rsv[3] || pd.rsv[4])
+			&& cmd == PTP_PIN_GETFUNC2) {
 			err = -EINVAL;
 			break;
 		} else if (cmd == PTP_PIN_GETFUNC) {
-			memset(pd.rsv, 0, sizeof(pd.rsv));
+			pd.rsv[0] = 0;
+			pd.rsv[1] = 0;
+			pd.rsv[2] = 0;
+			pd.rsv[3] = 0;
+			pd.rsv[4] = 0;
 		}
 		pin_index = pd.index;
 		if (pin_index >= ops->n_pins) {
@@ -379,12 +350,17 @@ long ptp_ioctl(struct posix_clock *pc, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		if (check_rsv_field(pd.rsv, sizeof(pd.rsv)/sizeof(pd.rsv[0])
-				    && cmd == PTP_PIN_SETFUNC2)) {
+		if ((pd.rsv[0] || pd.rsv[1] || pd.rsv[2]
+				|| pd.rsv[3] || pd.rsv[4])
+			&& cmd == PTP_PIN_SETFUNC2) {
 			err = -EINVAL;
 			break;
 		} else if (cmd == PTP_PIN_SETFUNC) {
-			memset(pd.rsv, 0, sizeof(pd.rsv));
+			pd.rsv[0] = 0;
+			pd.rsv[1] = 0;
+			pd.rsv[2] = 0;
+			pd.rsv[3] = 0;
+			pd.rsv[4] = 0;
 		}
 		pin_index = pd.index;
 		if (pin_index >= ops->n_pins) {
diff --git a/drivers/ptp/ptp_clock.c b/drivers/ptp/ptp_clock.c
index 9388a414d1b3..e60eab7f8a61 100644
--- a/drivers/ptp/ptp_clock.c
+++ b/drivers/ptp/ptp_clock.c
@@ -189,18 +189,6 @@ static void ptp_aux_kworker(struct kthread_work *work)
 		kthread_queue_delayed_work(ptp->kworker, &ptp->aux_work, delay);
 }
 
-static bool check_for_readability(struct ptp_pin_desc *pin_desc, size_t size)
-{
-	int i;
-	unsigned flags = PTP_PINDESC_INPUTDISABLE;
-
-	for(i = 0; i < size; ++i ) {
-		flags &= pin_desc[i].flags;
-	}
-
-	return flags == 0;
-}
-
 /* public interface */
 
 struct ptp_clock *ptp_clock_register(struct ptp_clock_info *info,
@@ -224,8 +212,6 @@ struct ptp_clock *ptp_clock_register(struct ptp_clock_info *info,
 		goto no_slot;
 	}
 
-	ptp->defunct = !check_for_readability(info->pin_config, info->n_pins);
-
 	ptp->clock.ops = ptp_clock_ops;
 	ptp->clock.release = delete_ptp_clock;
 	ptp->info = info;
diff --git a/include/linux/ptp_clock_kernel.h b/include/linux/ptp_clock_kernel.h
index 8223f6f656dd..93cc4f1d444a 100644
--- a/include/linux/ptp_clock_kernel.h
+++ b/include/linux/ptp_clock_kernel.h
@@ -134,8 +134,6 @@ struct ptp_clock_info {
 			  struct ptp_system_timestamp *sts);
 	int (*getcrosststamp)(struct ptp_clock_info *ptp,
 			      struct system_device_crosststamp *cts);
-	int (*counttstamp)(struct ptp_clock_info *ptp,
-			   struct ptp_event_count_tstamp *count);
 	int (*settime64)(struct ptp_clock_info *p, const struct timespec64 *ts);
 	int (*enable)(struct ptp_clock_info *ptp,
 		      struct ptp_clock_request *request, int on);
diff --git a/include/uapi/linux/ptp_clock.h b/include/uapi/linux/ptp_clock.h
index ea6facd60443..9dc9d0079e98 100644
--- a/include/uapi/linux/ptp_clock.h
+++ b/include/uapi/linux/ptp_clock.h
@@ -34,18 +34,6 @@
 #define PTP_STRICT_FLAGS   (1<<3)
 #define PTP_EXTTS_EDGES    (PTP_RISING_EDGE | PTP_FALLING_EDGE)
 
-/*
- * Bits of the ptp_pin_desc.flags field:
- */
-#define PTP_PINDESC_INPUTDISABLE	(1<<0)
-#define PTP_PINDESC_COUNTVALID		(1<<1)
-
-/*
- * Pin description flags (read only) for PTP_PIN_GETFUNC2
- */
-#define PTP_PINDESC_VALID_FLAGS	(PTP_PINDESC_INPUTDISABLE |	\
-				 PTP_PINDESC_COUNTVALID)
-
 /*
  * flag fields valid for the new PTP_EXTTS_REQUEST2 ioctl.
  */
@@ -66,13 +54,11 @@
  * Bits of the ptp_perout_request.flags field:
  */
 #define PTP_PEROUT_ONE_SHOT (1<<0)
-#define PTP_PEROUT_FREQ_ADJ (1<<1)
 
 /*
  * flag fields valid for the new PTP_PEROUT_REQUEST2 ioctl.
  */
-#define PTP_PEROUT_VALID_FLAGS	(PTP_PEROUT_ONE_SHOT |	\
-				 PTP_PEROUT_FREQ_ADJ)
+#define PTP_PEROUT_VALID_FLAGS	(PTP_PEROUT_ONE_SHOT)
 
 /*
  * No flags are valid for the original PTP_PEROUT_REQUEST ioctl
@@ -120,18 +106,6 @@ struct ptp_perout_request {
 	unsigned int rsv[4];          /* Reserved for future use. */
 };
 
-struct ptp_event_count_tstamp {
-	unsigned int index;
-
-#define PTP_EVENT_COUNT_TSTAMP_POL_HIGH 0
-#define PTP_EVENT_COUNT_TSTAMP_POL_LOW BIT(0)
-	unsigned int flags;
-
-	struct ptp_clock_time device_time;
-	unsigned long long event_count;
-	unsigned int rsv[2];          /* Reserved for future use. */
-};
-
 #define PTP_MAX_SAMPLES 25 /* Maximum allowed offset measurement samples. */
 
 struct ptp_sys_offset {
@@ -190,14 +164,10 @@ struct ptp_pin_desc {
 	 * PTP_EXTTS_REQUEST and PTP_PEROUT_REQUEST ioctls.
 	 */
 	unsigned int chan;
-	/*
-	 * Per pin capability flag
-	 */
-	unsigned int flags;
 	/*
 	 * Reserved for future use.
 	 */
-	unsigned int rsv[4];
+	unsigned int rsv[5];
 };
 
 #define PTP_CLK_MAGIC '='
@@ -225,8 +195,6 @@ struct ptp_pin_desc {
 	_IOWR(PTP_CLK_MAGIC, 17, struct ptp_sys_offset_precise)
 #define PTP_SYS_OFFSET_EXTENDED2 \
 	_IOWR(PTP_CLK_MAGIC, 18, struct ptp_sys_offset_extended)
-#define PTP_EVENT_COUNT_TSTAMP2 \
-	_IOWR(PTP_CLK_MAGIC, 19, struct ptp_event_count_tstamp)
 
 struct ptp_extts_event {
 	struct ptp_clock_time t; /* Time event occured. */
-- 
2.17.1

