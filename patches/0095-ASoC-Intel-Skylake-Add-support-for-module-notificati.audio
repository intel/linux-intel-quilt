From cd9f3a651ceca27539f4e8fd1fd92725e5a80591 Mon Sep 17 00:00:00 2001
From: "Paul, Subhankar" <subhankar.paul@intel.com>
Date: Tue, 8 Aug 2017 22:46:45 +0530
Subject: [PATCH 095/193] ASoC: Intel: Skylake: Add support for module
 notifications

Firmware modules can send asynchronous notification to driver
with event data as payload. Add support for notifying user of such
asynchronous notifications from firmware modules by adding
kcontrols. These kcontrols have the module event data that needs to be
sent to user.

Change-Id: If204e275a9613c769cf00fe632e45b174bd2fa2f
Signed-off-by: Mohit Sinha <mohit.sinha@intel.com>
Reviewed-on:
Reviewed-by: Shaik, Kareem M <kareem.m.shaik@intel.com>
Reviewed-by: Kesapragada, Pardha Saradhi <pardha.saradhi.kesapragada@intel.com>
Reviewed-by: Paul, Subhankar <subhankar.paul@intel.com>
Reviewed-by: Koul, Vinod <vinod.koul@intel.com>
Reviewed-by: audio_build
Tested-by: Avati, Santosh Kumar <santosh.kumar.avati@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c |   1 +
 sound/soc/intel/skylake/skl-pcm.c      |   5 +
 sound/soc/intel/skylake/skl-sst-dsp.h  |  15 +++
 sound/soc/intel/skylake/skl-sst-ipc.c  |  61 +++++++++++-
 sound/soc/intel/skylake/skl-sst-ipc.h  |  15 +++
 sound/soc/intel/skylake/skl-topology.c | 126 +++++++++++++++++++++++++
 sound/soc/intel/skylake/skl-topology.h |   5 +
 sound/soc/intel/skylake/skl.c          |   3 +-
 sound/soc/intel/skylake/skl.h          |   4 +
 9 files changed, 233 insertions(+), 2 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 65d079585e6c..51a927b90db5 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -156,6 +156,7 @@ int skl_init_dsp(struct skl_dev *skl, struct sst_pdata *pdata)
 
 	skl->is_first_boot = true;
 	INIT_LIST_HEAD(&skl->module_list);
+	INIT_LIST_HEAD(&skl->notify_kctls);
 	init_waitqueue_head(&skl->mod_load_wait);
 
 	pdata->id = skl->pci->device;
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index dc4fd7f49ac1..7f3f75341d71 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -724,6 +724,10 @@ static int skl_link_hw_free(struct snd_pcm_substream *substream,
 	return 0;
 }
 
+static struct skl_dsp_notify_ops cb_ops = {
+	.notify_cb = skl_dsp_cb_event,
+};
+
 static struct snd_compr_ops skl_platform_compr_ops = {
 	.copy		= skl_probe_compr_copy,
 };
@@ -1521,6 +1525,7 @@ static int skl_platform_soc_probe(struct snd_soc_component *component)
 
 		skl_populate_modules(skl);
 		skl->update_d0i3c = skl_update_d0i3c;
+		skl->notify_ops = cb_ops;
 
 		if (skl->cfg.astate_cfg != NULL) {
 			skl_dsp_set_astate_cfg(skl,
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index 258bc6ed65a9..c3dda32f9abe 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -174,6 +174,17 @@ struct uuid_module {
 	u8 hash[DEFAULT_HASH_SHA256_LEN];
 };
 
+struct skl_notify_data {
+	u32 type;
+	u32 length;
+	char data[0];
+};
+
+struct skl_dsp_notify_ops {
+	int (*notify_cb)(struct skl_dev *skl, unsigned int event,
+				 struct skl_notify_data *notify_data);
+};
+
 struct skl_load_module_info {
 	u16 mod_id;
 	const struct firmware *fw;
@@ -253,4 +264,8 @@ void bxt_set_dsp_D0i3(struct work_struct *work);
 int skl_module_sysfs_init(struct skl_dev *skl, struct kobject *fw_modules_kobj);
 
 void skl_module_sysfs_exit(struct skl_dev *skl);
+
+int skl_dsp_cb_event(struct skl_dev *skl, unsigned int event,
+			struct skl_notify_data *notify_data);
+
 #endif /*__SKL_SST_DSP_H__*/
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index b7d422e6d95b..ee39f6b8c401 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -187,6 +187,8 @@
 #define IPC_D0IX_STREAMING(x)		(((x) & IPC_D0IX_STREAMING_MASK) \
 					<< IPC_D0IX_STREAMING_SHIFT)
 
+/* Offset to get the event data for module notification */
+#define MOD_DATA_OFFSET		12
 
 enum skl_ipc_msg_target {
 	IPC_FW_GEN_MSG = 0,
@@ -263,7 +265,9 @@ enum skl_ipc_notification_type {
 	IPC_GLB_NOTIFY_RESOURCE_EVENT = 5,
 	IPC_GLB_NOTIFY_LOG_BUFFER_STATUS = 6,
 	IPC_GLB_NOTIFY_TIMESTAMP_CAPTURED = 7,
-	IPC_GLB_NOTIFY_FW_READY = 8
+	IPC_GLB_NOTIFY_FW_READY = 8,
+	IPC_GLB_NOTIFY_FW_AUD_CLASS_RESULT = 9,
+	IPC_GLB_MODULE_NOTIFICATION = 12
 };
 
 /* Module Message Types */
@@ -381,10 +385,56 @@ int skl_process_timestamp_notification(struct skl_dev *skl)
 	return ret;
 }
 
+static int skl_process_module_notification(struct skl_dev *skl)
+{
+	struct skl_notify_data *notify_data;
+	struct skl_module_notify mod_notif;
+	u32 notify_data_sz;
+	char *module_data;
+
+	dev_dbg(skl->dev, "***** Module Notification ******\n");
+	/* read module notification structure from mailbox */
+	sst_dsp_inbox_read(skl->dsp, &mod_notif,
+				sizeof(struct skl_module_notify));
+
+	notify_data_sz = sizeof(mod_notif) + mod_notif.event_data_size;
+	notify_data = kzalloc((sizeof(*notify_data) + notify_data_sz),
+							GFP_KERNEL);
+
+	if (!notify_data)
+		return -ENOMEM;
+
+	/* read the complete notification message */
+	sst_dsp_inbox_read(skl->dsp, notify_data->data, notify_data_sz);
+
+	notify_data->length = notify_data_sz;
+	notify_data->type = 0xFF;
+
+	/* Module notification data to console */
+	dev_dbg(skl->dev, "Module Id    = %#x\n",
+					(mod_notif.unique_id >> 16));
+	dev_dbg(skl->dev, "Instanse Id  = %#x\n",
+					(mod_notif.unique_id & 0x0000FFFF));
+	dev_dbg(skl->dev, "Data Size    = %d bytes\n",
+					mod_notif.event_data_size);
+
+	module_data = notify_data->data;
+
+	print_hex_dump(KERN_DEBUG, "DATA: ", MOD_DATA_OFFSET, 8, 4,
+				module_data, notify_data->length, false);
+
+	skl->notify_ops.notify_cb(skl, IPC_GLB_MODULE_NOTIFICATION,
+							notify_data);
+	kfree(notify_data);
+
+	return 0;
+}
+
 int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 		struct skl_ipc_header header)
 {
 	struct skl_dev *skl = container_of(ipc, struct skl_dev, ipc);
+	int ret;
 
 	if (IPC_GLB_NOTIFY_MSG_TYPE(header.primary)) {
 		switch (IPC_GLB_NOTIFY_TYPE(header.primary)) {
@@ -419,6 +469,15 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 		case IPC_GLB_NOTIFY_TIMESTAMP_CAPTURED:
 			return skl_process_timestamp_notification(skl);
 
+		case IPC_GLB_MODULE_NOTIFICATION:
+			ret = skl_process_module_notification(skl);
+			if (ret < 0) {
+				dev_err(ipc->dev,
+				"Module Notification read fail:%d\n", ret);
+				return ret;
+			}
+			break;
+
 		default:
 			dev_err(ipc->dev, "ipc: Unhandled error msg=%x\n",
 						header.primary);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 76170fea9da7..8d1188e4cfc1 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -13,6 +13,8 @@
 #include "skl-sst-dsp.h"
 #include <uapi/sound/skl-tplg-interface.h>
 
+#define	SKL_EVENT_GLB_MODULE_NOTIFICATION	12
+
 struct sst_dsp;
 struct sst_generic_ipc;
 
@@ -230,6 +232,13 @@ struct skl_dsp_cores {
 	int *usage_count;
 };
 
+struct skl_module_notify {
+	u32 unique_id;
+	u32 event_id;
+	u32 event_data_size;
+	u32 event_data[0];
+} __packed;
+
 /**
  * skl_d0i3_data: skl D0i3 counters data struct
  *
@@ -368,6 +377,12 @@ struct skl_hw_cfg {
 	u32 ebb_size_bytes;
 };
 
+struct skl_notify_kctrl_info {
+	struct list_head list;
+	u32 notify_id;
+	struct snd_kcontrol *notify_kctl;
+};
+
 struct skl_ipc_init_instance_msg {
 	u32 module_id;
 	u32 instance_id;
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 5a56b594d43a..f7c3e30fa085 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -2020,6 +2020,132 @@ int skl_tplg_be_update_params(struct snd_soc_dai *dai,
 	return 0;
 }
 
+/*
+ * This function searches notification kcontrol list present in skl_sst
+ * context against unique notify_id and returns kcontrol pointer if match
+ * found.
+ */
+struct snd_kcontrol *skl_search_notify_kctl(struct skl_dev *skl, u32 notify_id)
+{
+	struct skl_notify_kctrl_info *kctl_info;
+
+	list_for_each_entry(kctl_info, &skl->notify_kctls, list) {
+		if (notify_id == kctl_info->notify_id)
+			return kctl_info->notify_kctl;
+	}
+	return NULL;
+}
+
+/*
+ * This function creates notification kcontrol list by searching control
+ * list present in snd_card context. It compares kcontrol name with specific
+ * string "notify params" to get notification kcontrols and add it up to the
+ * notification list present in skl_sst context.
+ * NOTE: To use module notification feature, new kcontrol named "notify" should
+ * be added in topology XML for that particular module.
+ */
+int skl_create_notify_kctl_list(struct skl_dev *skl, struct snd_card *card)
+{
+	struct snd_kcontrol *kctl;
+	struct snd_soc_dapm_widget *w;
+	struct skl_module_cfg *mconfig;
+	struct skl_notify_kctrl_info *info;
+	u32 size = sizeof(*info);
+
+	list_for_each_entry(kctl, &card->controls, list) {
+		if (strnstr(kctl->id.name, "notify params",
+						strlen(kctl->id.name))) {
+			info = kzalloc(size, GFP_KERNEL);
+			if (!info)
+				return -ENOMEM;
+
+			w = snd_soc_dapm_kcontrol_widget(kctl);
+			mconfig = w->priv;
+
+			/* Module ID (MS word) + Module Instance ID (LS word) */
+			info->notify_id = ((mconfig->id.module_id << 16) |
+					   (mconfig->id.instance_id));
+			info->notify_kctl = kctl;
+
+			list_add_tail(&info->list, &skl->notify_kctls);
+		}
+	}
+	return 0;
+}
+
+/*
+ * This function deletes notification kcontrol list from skl_sst
+ * context.
+ */
+void skl_delete_notify_kctl_list(struct skl_dev *skl)
+{
+	struct skl_notify_kctrl_info *info, *tmp;
+
+	list_for_each_entry_safe(info, tmp, &skl->notify_kctls, list) {
+		list_del(&info->list);
+		kfree(info);
+	}
+}
+
+/*
+ * This function creates notification kcontrol list on first module
+ * notification from firmware. It also search notification kcontrol
+ * list against unique notify_id sent from firmware and returns the
+ * corresponding kcontrol pointer.
+ */
+struct snd_kcontrol *skl_get_notify_kcontrol(struct skl_dev *skl,
+			struct snd_card *card, u32 notify_id)
+{
+	struct snd_kcontrol *kctl = NULL;
+
+	if (list_empty(&skl->notify_kctls))
+		skl_create_notify_kctl_list(skl, card);
+
+	kctl = skl_search_notify_kctl(skl, notify_id);
+
+	return kctl;
+}
+
+/*
+ * Get the events along with data stored in notify_data and pass
+ * to kcontrol private data.
+ */
+int skl_dsp_cb_event(struct skl_dev *skl, unsigned int event,
+				struct skl_notify_data *notify_data)
+{
+	struct snd_soc_card *card;
+	struct soc_bytes_ext *sb;
+	struct snd_soc_component *component = skl->component;
+	struct skl_module_notify *m_notification = NULL;
+	struct skl_algo_data *bc;
+	u8 param_length;
+
+	switch (event) {
+	case SKL_EVENT_GLB_MODULE_NOTIFICATION:
+		m_notification = (struct skl_module_notify *)notify_data->data;
+		card = component->card;
+		skl->kcontrol = skl_get_notify_kcontrol(skl, card->snd_card,
+					m_notification->unique_id);
+		if (!skl->kcontrol) {
+			dev_dbg(skl->dev, "Module notify control not found\n");
+			return -EINVAL;
+		}
+
+		sb = (struct soc_bytes_ext *)skl->kcontrol->private_value;
+		bc = (struct skl_algo_data *)sb->dobj.private;
+		param_length = sizeof(struct skl_notify_data)
+					+ notify_data->length;
+		memcpy(bc->params, (char *)notify_data, param_length);
+		snd_ctl_notify(card->snd_card,
+				SNDRV_CTL_EVENT_MASK_VALUE, &skl->kcontrol->id);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static const struct snd_soc_tplg_widget_events skl_tplg_widget_ops[] = {
 	{SKL_MIXER_EVENT, skl_tplg_mixer_event},
 	{SKL_VMIXER_EVENT, skl_tplg_mixer_event},
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index f9d4331975ef..4fc9a41c24c9 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -399,4 +399,9 @@ int skl_dai_load(struct snd_soc_component *cmp, int index,
 		struct snd_soc_tplg_pcm *pcm, struct snd_soc_dai *dai);
 void skl_tplg_add_moduleid_in_bind_params(struct skl_dev *skl,
 				struct snd_soc_dapm_widget *w);
+struct snd_kcontrol *skl_search_notify_kctl(struct skl_dev *skl, u32 notify_id);
+int skl_create_notify_kctl_list(struct skl_dev *skl, struct snd_card *card);
+void skl_delete_notify_kctl_list(struct skl_dev *skl);
+struct snd_kcontrol *skl_get_notify_kcontrol(struct skl_dev *skl,
+				struct snd_card *card, u32 notify_id);
 #endif
diff --git a/sound/soc/intel/skylake/skl.c b/sound/soc/intel/skylake/skl.c
index 4cda8b302f32..e32bff7b11a9 100644
--- a/sound/soc/intel/skylake/skl.c
+++ b/sound/soc/intel/skylake/skl.c
@@ -31,6 +31,7 @@
 #include "skl.h"
 #include "skl-sst-dsp.h"
 #include "skl-sst-ipc.h"
+#include "skl-topology.h"
 
 #if IS_ENABLED(CONFIG_SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC)
 #include "../../../soc/codecs/hdac_hda.h"
@@ -1179,7 +1180,7 @@ static void skl_remove(struct pci_dev *pci)
 	struct skl_dev *skl = bus_to_skl(bus);
 
 	cancel_work_sync(&skl->probe_work);
-
+	skl_delete_notify_kctl_list(skl);
 	pm_runtime_get_noresume(&pci->dev);
 
 	/* codec removal, invoke bus_device_remove */
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 2a2cb305b798..a1d2337c2faa 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -168,6 +168,10 @@ struct skl_dev {
 
 	struct ep_group_cnt grp_cnt;
 
+	struct snd_kcontrol *kcontrol;
+	struct list_head notify_kctls;
+	struct skl_dsp_notify_ops notify_ops;
+
 	/* probe stream management */
 	struct hdac_ext_stream *extractor;
 	unsigned int num_probe_streams;
-- 
2.17.1

