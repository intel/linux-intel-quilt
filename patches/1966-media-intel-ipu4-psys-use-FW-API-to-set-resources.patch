From 358990e28cbbee9edbc9139e22839edd883aa227 Mon Sep 17 00:00:00 2001
From: Wang Zaikuo <zaikuo.wang@intel.com>
Date: Wed, 6 Jun 2018 17:50:01 +0800
Subject: [PATCH 1966/2313] media: intel-ipu4: psys: use FW API to set
 resources

Message for Open Source:
It makes sense to use FW API in API specific file.
Also, this patch add checking return value to make
driver more robust when setting resource to FW.

Message for Internal:
[Issue/Feature] Same as above
[Root Cause/Changes] Same as above

Change-Id: I887167cce177994ef16842cc198d27aa0175c061
Signed-off-by: Wang Zaikuo <zaikuo.wang@intel.com>
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 drivers/media/pci/intel/ipu-fw-psys.h              | 15 +++---
 .../ipu4/ipu4-css/lib2600psys/libcsspsys2600.c     | 53 ++++++++--------------
 drivers/media/pci/intel/ipu4/ipu4-fw-resources.c   | 46 ++++++++++++++-----
 drivers/media/pci/intel/ipu4/ipu4-resources.c      | 28 ++++++++----
 .../ipu4/ipu4p-css/lib2600psys/libcsspsys2600.c    | 53 ++++++++--------------
 5 files changed, 97 insertions(+), 98 deletions(-)

diff --git a/drivers/media/pci/intel/ipu-fw-psys.h b/drivers/media/pci/intel/ipu-fw-psys.h
index ddd71d1..6256eff 100644
--- a/drivers/media/pci/intel/ipu-fw-psys.h
+++ b/drivers/media/pci/intel/ipu-fw-psys.h
@@ -330,15 +330,14 @@ int ipu_fw_psys_open(struct ipu_psys *psys);
 int ipu_fw_psys_close(struct ipu_psys *psys);
 
 /* common resource interface for both abi and api mode */
-void ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
-				     u8 value);
+int ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
+				    u8 value);
 u8 ipu_fw_psys_get_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index);
-void ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
-					    u16 offset, u16 value);
-void ipu_fw_psys_set_process_ext_mem_offset(struct ipu_fw_psys_process *ptr,
-					    u16 offset, u16 value);
-void ipu_fw_psys_set_process_ext_mem_id(struct ipu_fw_psys_process *ptr,
-					u16 offset, u8 value);
+int ipu_fw_psys_clear_process_cell(struct ipu_fw_psys_process *ptr);
+int ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
+					   u16 offset, u16 value);
+int ipu_fw_psys_set_process_ext_mem(struct ipu_fw_psys_process *ptr,
+				    u16 type_id, u16 mem_id, u16 offset);
 int ipu_fw_psys_get_program_manifest_by_process(
 	struct ipu_fw_generic_program_manifest *gen_pm,
 	const struct ipu_fw_psys_program_group_manifest *pg_manifest,
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/libcsspsys2600.c b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/libcsspsys2600.c
index 20f0dd4..9b66bc8 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/libcsspsys2600.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/libcsspsys2600.c
@@ -451,63 +451,46 @@ static const struct ipu_fw_resource_definitions default_defs = {
 
 	.cell_mem_row = VIED_NCI_N_MEM_TYPE_ID,
 	.cell_mem = (enum ipu_mem_id *)vied_nci_cell_mem,
-	.process.ext_mem_id = offsetof(struct ia_css_process_s,
-				       ext_mem_id[0]),
-	.process.ext_mem_offset = offsetof(struct ia_css_process_s,
-					   ext_mem_offset[0]),
-	.process.dev_chn_offset = offsetof(struct ia_css_process_s,
-					   dev_chn_offset[0]),
-	.process.cell_id = offsetof(struct ia_css_process_s, cell_id),
 };
 
 const struct ipu_fw_resource_definitions *res_defs = &default_defs;
 EXPORT_SYMBOL_GPL(res_defs);
 
-/*
- * Extension library gives byte offsets to its internal structures.
- * use those offsets to update fields. Without extension lib access
- * structures directly.
- */
-void ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
-				u8 value)
+int ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
+				    u8 value)
 {
-	/* Byte offset */
-	*((u8 *)ptr + res_defs->process.cell_id) = value;
+	return ia_css_process_set_cell((ia_css_process_t *)ptr,
+				       (vied_nci_cell_ID_t)value);
 }
 EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_cell_id);
 
 u8 ipu_fw_psys_get_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index)
 {
-	/* Byte offset */
-	return *((u8 *)ptr + res_defs->process.cell_id);
+	return ia_css_process_get_cell((ia_css_process_t *)ptr);
 }
 EXPORT_SYMBOL_GPL(ipu_fw_psys_get_process_cell_id);
 
-void ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
-				       u16 offset, u16 value)
+int ipu_fw_psys_clear_process_cell(struct ipu_fw_psys_process *ptr)
 {
-	/* dev_chn_offset is a byte offset, offset is u16 index */
-	*((u16 *)((u8 *)ptr + res_defs->process.dev_chn_offset) +
-		 offset) = value;
+	return ia_css_process_clear_cell((ia_css_process_t *)ptr);
 }
-EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_dev_chn_offset);
+EXPORT_SYMBOL_GPL(ipu_fw_psys_clear_process_cell);
 
-void ipu_fw_psys_set_process_ext_mem_offset(struct ipu_fw_psys_process *ptr,
-				       u16 offset, u16 value)
+int ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
+					   u16 offset, u16 value)
 {
-	/* ext_mem_offset is a byte offset, offset is u16 index */
-	*((u16 *)((u8 *)ptr + res_defs->process.ext_mem_offset) +
-		  offset) = value;
+	return ia_css_process_set_dev_chn((ia_css_process_t *)ptr,
+					  (vied_nci_dev_chn_ID_t)offset,
+					  (vied_nci_resource_size_t)value);
 }
-EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_ext_mem_offset);
+EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_dev_chn_offset);
 
-void ipu_fw_psys_set_process_ext_mem_id(struct ipu_fw_psys_process *ptr,
-				   u16 offset, u8 value)
+int ipu_fw_psys_set_process_ext_mem(struct ipu_fw_psys_process *ptr,
+				    u16 type_id, u16 mem_id, u16 offset)
 {
-	/* ext_mem_id is a byte offset, offset parameter is u8 index */
-	*((u8 *)ptr + res_defs->process.ext_mem_id + offset) = value;
+	return ia_css_process_set_ext_mem((ia_css_process_t *)ptr, mem_id, offset);
 }
-EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_ext_mem_id);
+EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_ext_mem);
 
 int ipu_fw_psys_get_program_manifest_by_process(
 	struct ipu_fw_generic_program_manifest *gen_pm,
diff --git a/drivers/media/pci/intel/ipu4/ipu4-fw-resources.c b/drivers/media/pci/intel/ipu4/ipu4-fw-resources.c
index 1a355f7..3fea36f 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-fw-resources.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-fw-resources.c
@@ -223,10 +223,17 @@ const struct ipu_fw_resource_definitions *res_defs = &default_defs;
  * use those offsets to update fields. Without extension lib access
  * structures directly.
  */
-void ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
-				     u8 value)
+int ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
+				    u8 value)
 {
+	struct ipu_fw_psys_process_group *parent =
+		(struct ipu_fw_psys_process_group *) ((char *)ptr +
+		ptr->parent_offset);
+
 	ptr->cell_id = value;
+	parent->resource_bitmap |= 1 << value;
+
+	return 0;
 }
 
 u8 ipu_fw_psys_get_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index)
@@ -234,22 +241,38 @@ u8 ipu_fw_psys_get_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index)
 	return ptr->cell_id;
 }
 
-void ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
-					    u16 offset, u16 value)
+int ipu_fw_psys_clear_process_cell(struct ipu_fw_psys_process *ptr)
 {
-	ptr->dev_chn_offset[offset] = value;
+	struct ipu_fw_psys_process_group *parent;
+	u8 cell_id = ipu_fw_psys_get_process_cell_id(ptr, 0);
+	int retval = -1;
+
+	parent = (struct ipu_fw_psys_process_group *) ((char *)ptr +
+		ptr->parent_offset);
+	if ((1 << cell_id) && ((1 << cell_id) & parent->resource_bitmap)) {
+		ipu_fw_psys_set_process_cell_id(ptr, 0, IPU_FW_PSYS_N_CELL_ID);
+		parent->resource_bitmap &= ~(1 << cell_id);
+		retval = 0;
+	}
+
+	return retval;
 }
 
-void ipu_fw_psys_set_process_ext_mem_offset(struct ipu_fw_psys_process *ptr,
-					    u16 offset, u16 value)
+int ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
+					   u16 offset, u16 value)
 {
-	ptr->ext_mem_offset[offset] = value;
+	ptr->dev_chn_offset[offset] = value;
+
+	return 0;
 }
 
-void ipu_fw_psys_set_process_ext_mem_id(struct ipu_fw_psys_process *ptr,
-					u16 offset, u8 value)
+int ipu_fw_psys_set_process_ext_mem(struct ipu_fw_psys_process *ptr,
+				    u16 type_id, u16 mem_id, u16 offset)
 {
-	ptr->ext_mem_id[offset] = value;
+	ptr->ext_mem_offset[type_id] = offset;
+	ptr->ext_mem_id[type_id] = mem_id;
+
+	return 0;
 }
 
 static struct ipu_fw_psys_program_manifest *
@@ -305,3 +328,4 @@ int ipu_fw_psys_get_program_manifest_by_process(
 	}
 	return -ENOENT;
 }
+
diff --git a/drivers/media/pci/intel/ipu4/ipu4-resources.c b/drivers/media/pci/intel/ipu4/ipu4-resources.c
index 4f05fa0..ce12cc4 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-resources.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-resources.c
@@ -278,8 +278,9 @@ int ipu_psys_allocate_resources(const struct device *dev,
 				ret = -ENOSPC;
 				goto free_out;
 			}
-			pg->resource_bitmap |= 1 << cell;
-			ipu_fw_psys_set_process_cell_id(process, 0, cell);
+			ret = ipu_fw_psys_set_process_cell_id(process, 0, cell);
+			if (ret)
+				goto free_out;
 		}
 		if (cell < res_defs->num_cells)
 			cells |= 1 << cell;
@@ -295,8 +296,10 @@ int ipu_psys_allocate_resources(const struct device *dev,
 				     &pool->dev_channels[resid], &pm, resid, alloc);
 				if (ret)
 					goto free_out;
-				ipu_fw_psys_set_process_dev_chn_offset(process, resid,
+				ret = ipu_fw_psys_set_process_dev_chn_offset(process, resid,
 					alloc->resource_alloc[alloc->resources - 1].pos);
+				if (ret)
+					goto free_out;
 			}
 		}
 
@@ -318,8 +321,13 @@ int ipu_psys_allocate_resources(const struct device *dev,
 				     &pm, mem_type_id, mem_bank_id, alloc);
 				if (ret)
 					goto free_out;
-				ipu_fw_psys_set_process_ext_mem_id(process, mem_type_id, mem_bank_id);
-				ipu_fw_psys_set_process_ext_mem_offset(process, mem_type_id,
+				/* no return value check here because fw api will
+				 * do some checks, and would return non-zero
+				 * except mem_type_id == 0. This may be caused by that
+				 * above flow if allocating mem_bank_id is improper
+				 */
+				ipu_fw_psys_set_process_ext_mem
+					(process, mem_type_id, mem_bank_id,
 					alloc->resource_alloc[alloc->resources - 1].pos);
 			}
 		}
@@ -346,11 +354,13 @@ int ipu_psys_allocate_resources(const struct device *dev,
 		if ((pm.cell_id != res_defs->num_cells &&
 		     pm.cell_type_id == res_defs->num_cells_type))
 			continue;
-		pg->resource_bitmap &=
-		    ~(1 << ipu_fw_psys_get_process_cell_id(process, 0));
-		ipu_fw_psys_set_process_cell_id(process, 0, 0);
+		/* no return value check here because if finding free cell
+		 * failed, process cell would not set then calling clear_cell
+		 * will return non-zero.
+		 */
+		ipu_fw_psys_clear_process_cell(process);
 	}
-
+	dev_dbg(dev, "failed to allocate resources, ret %d\n", ret);
 	ipu_psys_free_resources(alloc, pool);
 	return ret;
 }
diff --git a/drivers/media/pci/intel/ipu4/ipu4p-css/lib2600psys/libcsspsys2600.c b/drivers/media/pci/intel/ipu4/ipu4p-css/lib2600psys/libcsspsys2600.c
index c79b27d..d9b4661 100644
--- a/drivers/media/pci/intel/ipu4/ipu4p-css/lib2600psys/libcsspsys2600.c
+++ b/drivers/media/pci/intel/ipu4/ipu4p-css/lib2600psys/libcsspsys2600.c
@@ -459,63 +459,46 @@ static const struct ipu_fw_resource_definitions default_defs = {
 
 	.cell_mem_row = VIED_NCI_N_MEM_TYPE_ID,
 	.cell_mem = (enum ipu_mem_id *)vied_nci_cell_mem,
-	.process.ext_mem_id = offsetof(struct ia_css_process_s,
-				       ext_mem_id[0]),
-	.process.ext_mem_offset = offsetof(struct ia_css_process_s,
-					   ext_mem_offset[0]),
-	.process.dev_chn_offset = offsetof(struct ia_css_process_s,
-					   dev_chn_offset[0]),
-	.process.cell_id = offsetof(struct ia_css_process_s, cell_id),
 };
 
 const struct ipu_fw_resource_definitions *res_defs = &default_defs;
 EXPORT_SYMBOL_GPL(res_defs);
 
-/*
- * Extension library gives byte offsets to its internal structures.
- * use those offsets to update fields. Without extension lib access
- * structures directly.
- */
-void ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
-				u8 value)
+int ipu_fw_psys_set_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index,
+				    u8 value)
 {
-	/* Byte offset */
-	*((u8 *)ptr + res_defs->process.cell_id) = value;
+	return ia_css_process_set_cell((ia_css_process_t *)ptr,
+				       (vied_nci_cell_ID_t)value);
 }
 EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_cell_id);
 
 u8 ipu_fw_psys_get_process_cell_id(struct ipu_fw_psys_process *ptr, u8 index)
 {
-	/* Byte offset */
-	return *((u8 *)ptr + res_defs->process.cell_id);
+	return ia_css_process_get_cell((ia_css_process_t *)ptr);
 }
 EXPORT_SYMBOL_GPL(ipu_fw_psys_get_process_cell_id);
 
-void ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
-				       u16 offset, u16 value)
+int ipu_fw_psys_clear_process_cell(struct ipu_fw_psys_process *ptr)
 {
-	/* dev_chn_offset is a byte offset, offset is u16 index */
-	*((u16 *)((u8 *)ptr + res_defs->process.dev_chn_offset) +
-		 offset) = value;
+	return ia_css_process_clear_cell((ia_css_process_t *)ptr);
 }
-EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_dev_chn_offset);
+EXPORT_SYMBOL_GPL(ipu_fw_psys_clear_process_cell);
 
-void ipu_fw_psys_set_process_ext_mem_offset(struct ipu_fw_psys_process *ptr,
-				       u16 offset, u16 value)
+int ipu_fw_psys_set_process_dev_chn_offset(struct ipu_fw_psys_process *ptr,
+					   u16 offset, u16 value)
 {
-	/* ext_mem_offset is a byte offset, offset is u16 index */
-	*((u16 *)((u8 *)ptr + res_defs->process.ext_mem_offset) +
-		  offset) = value;
+	return ia_css_process_set_dev_chn((ia_css_process_t *)ptr,
+					  (vied_nci_dev_chn_ID_t)offset,
+					  (vied_nci_resource_size_t)value);
 }
-EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_ext_mem_offset);
+EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_dev_chn_offset);
 
-void ipu_fw_psys_set_process_ext_mem_id(struct ipu_fw_psys_process *ptr,
-				   u16 offset, u8 value)
+int ipu_fw_psys_set_process_ext_mem(struct ipu_fw_psys_process *ptr,
+				    u16 type_id, u16 mem_id, u16 offset)
 {
-	/* ext_mem_id is a byte offset, offset parameter is u8 index */
-	*((u8 *)ptr + res_defs->process.ext_mem_id + offset) = value;
+	return ia_css_process_set_ext_mem((ia_css_process_t *)ptr, mem_id, offset);
 }
-EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_ext_mem_id);
+EXPORT_SYMBOL_GPL(ipu_fw_psys_set_process_ext_mem);
 
 int ipu_fw_psys_get_program_manifest_by_process(
 	struct ipu_fw_generic_program_manifest *gen_pm,
-- 
2.7.4

