From a0257879930c64c0de5f011850d6330bfecc1b0a Mon Sep 17 00:00:00 2001
From: Alexander Usyskin <alexander.usyskin@intel.com>
Date: Thu, 20 Apr 2017 10:02:34 +0300
Subject: [PATCH 29/43] mei: expose device state in sysfs

Expose mei device state to user-space through sysfs.
This gave indication to applications that driver is in transition,
e.g. in link reset state.

Change-Id: Id908459d6b9e22ea3a668fda6accd0534cf5278a
Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
---
 drivers/misc/mei/init.c    |  2 ++
 drivers/misc/mei/main.c    | 31 ++-----------------------------
 drivers/misc/mei/mei_dev.h | 12 +++++++++++-
 3 files changed, 15 insertions(+), 30 deletions(-)

diff --git a/drivers/misc/mei/init.c b/drivers/misc/mei/init.c
index b9fef773e71b..0e4d917b2015 100644
--- a/drivers/misc/mei/init.c
+++ b/drivers/misc/mei/init.c
@@ -379,6 +379,8 @@ void mei_device_init(struct mei_device *dev,
 	INIT_WORK(&dev->reset_work, mei_reset_work);
 	INIT_WORK(&dev->bus_rescan_work, mei_cl_bus_rescan_work);
 
+	dev->sysfs_state = NULL;
+
 	bitmap_zero(dev->host_clients_map, MEI_CLIENTS_MAX);
 	dev->open_handle_count = 0;
 
diff --git a/drivers/misc/mei/main.c b/drivers/misc/mei/main.c
index c39ac8a27f92..ed89c5bd64e2 100644
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@ -1034,35 +1034,6 @@ static ssize_t dev_state_show(struct device *device,
 }
 static DEVICE_ATTR_RO(dev_state);
 
-static int match_devt(struct device *dev, const void *data)
-{
-	const dev_t *devt = data;
-
-	return dev->devt == *devt;
-}
-
-/**
- * dev_set_devstate: set to new device state and notify sysfs file.
- *
- * @dev: mei_device
- * @state: new device state
- */
-void mei_set_devstate(struct mei_device *dev, enum mei_dev_state state)
-{
-	struct device *clsdev;
-
-	if (dev->dev_state == state)
-		return;
-
-	dev->dev_state = state;
-
-	clsdev = class_find_device(mei_class, NULL, &dev->cdev.dev, match_devt);
-	if (clsdev) {
-		sysfs_notify(&clsdev->kobj, NULL, "dev_state");
-		put_device(clsdev);
-	}
-}
-
 static struct attribute *mei_attrs[] = {
 	&dev_attr_fw_status.attr,
 	&dev_attr_hbm_ver.attr,
@@ -1160,6 +1131,8 @@ int mei_register(struct mei_device *dev, struct device *parent)
 		goto err_dev_create;
 	}
 
+	dev->sysfs_state = sysfs_get_dirent(clsdev->kobj.sd, "dev_state");
+
 	ret = mei_dbgfs_register(dev, dev_name(clsdev));
 	if (ret) {
 		dev_err(clsdev, "cannot register debugfs ret = %d\n", ret);
diff --git a/drivers/misc/mei/mei_dev.h b/drivers/misc/mei/mei_dev.h
index c53210beeda5..8bbccb9a926a 100644
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@ -457,6 +457,8 @@ struct mei_fw_version {
  *
  * @dbgfs_dir   : debugfs mei root directory
  *
+ * @sysfs_state : sysfs state object
+ *
  * @ops:        : hw specific operations
  * @hw          : hw specific data
  */
@@ -542,6 +544,8 @@ struct mei_device {
 	struct dentry *dbgfs_dir;
 #endif /* CONFIG_DEBUG_FS */
 
+	struct kernfs_node *sysfs_state;
+
 	const struct mei_hw_ops *ops;
 	char hw[0] __aligned(sizeof(void *));
 };
@@ -600,7 +604,13 @@ int mei_restart(struct mei_device *dev);
 void mei_stop(struct mei_device *dev);
 void mei_cancel_work(struct mei_device *dev);
 
-void mei_set_devstate(struct mei_device *dev, enum mei_dev_state state);
+static inline void mei_set_devstate(struct mei_device *dev,
+				    enum mei_dev_state state)
+{
+	dev->dev_state = state;
+	if (dev->sysfs_state)
+		sysfs_notify_dirent(dev->sysfs_state);
+}
 
 int mei_dmam_ring_alloc(struct mei_device *dev);
 void mei_dmam_ring_free(struct mei_device *dev);
-- 
2.17.1

