From f15f87cf0c54367a6aeb41bce5ef39aa7fbabe10 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Thu, 14 May 2015 00:00:59 +0300
Subject: [PATCH 1725/2313] scsi: ufs: store device serial number.

Retrieve device serial number and store it for RPMB subsystem use.

Change-Id: I15f81b8c8c5a1b9436f249d11547735c828e3aef
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
---
 drivers/scsi/ufs/ufs.h    |  2 ++
 drivers/scsi/ufs/ufshcd.c | 27 +++++++++++++++++++++++++--
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/drivers/scsi/ufs/ufs.h b/drivers/scsi/ufs/ufs.h
index b43efad..77ff3c9 100644
--- a/drivers/scsi/ufs/ufs.h
+++ b/drivers/scsi/ufs/ufs.h
@@ -527,6 +527,8 @@ struct ufs_dev_info {
 struct ufs_dev_desc {
 	u16 wmanufacturerid;
 	char *model;
+	char *serial_no;
+	size_t serial_no_len;
 };
 
 #endif /* End of Header */
diff --git a/drivers/scsi/ufs/ufshcd.c b/drivers/scsi/ufs/ufshcd.c
index 10a02b8..bfa2dbb 100644
--- a/drivers/scsi/ufs/ufshcd.c
+++ b/drivers/scsi/ufs/ufshcd.c
@@ -42,6 +42,7 @@
 #include <linux/devfreq.h>
 #include <linux/nls.h>
 #include <linux/of.h>
+#include <linux/string.h>
 #include <linux/rpmb.h>
 
 #include "ufshcd.h"
@@ -6171,6 +6172,12 @@ static inline void ufshcd_rpmb_add(struct ufs_hba *hba,
 	u8 rpmb_rw_size = 1;
 	int ret;
 
+	ufshcd_rpmb_dev_ops.dev_id = kmemdup(dev_desc->serial_no,
+					     dev_desc->serial_no_len,
+					     GFP_KERNEL);
+	if (ufshcd_rpmb_dev_ops.dev_id)
+		ufshcd_rpmb_dev_ops.dev_id_len = dev_desc->serial_no_len;
+
 	ret = scsi_device_get(hba->sdev_ufs_rpmb);
 	if (ret)
 		goto out_put_dev;
@@ -6216,6 +6223,9 @@ static inline void ufshcd_rpmb_remove(struct ufs_hba *hba)
 	scsi_device_put(hba->sdev_ufs_rpmb);
 	hba->sdev_ufs_rpmb = NULL;
 
+	kfree(ufshcd_rpmb_dev_ops.dev_id);
+	ufshcd_rpmb_dev_ops.dev_id = NULL;
+
 	spin_unlock_irqrestore(hba->host->host_lock, flags);
 }
 
@@ -6293,6 +6303,7 @@ static int ufs_get_device_desc(struct ufs_hba *hba,
 {
 	int ret;
 	u8 *desc_buf;
+	u8 index;
 
 	desc_buf = kmalloc(hba->desc_size.dev_desc, GFP_KERNEL);
 	if (!desc_buf)
@@ -6312,8 +6323,8 @@ static int ufs_get_device_desc(struct ufs_hba *hba,
 	dev_desc->wmanufacturerid = desc_buf[DEVICE_DESC_PARAM_MANF_ID] << 8 |
 				     desc_buf[DEVICE_DESC_PARAM_MANF_ID + 1];
 
-	ret = ufshcd_read_string_desc(hba,
-				      desc_buf[DEVICE_DESC_PARAM_PRDCT_NAME],
+	index = desc_buf[DEVICE_DESC_PARAM_PRDCT_NAME];
+	ret = ufshcd_read_string_desc(hba, index,
 				      &dev_desc->model, SD_ASCII_STD);
 	if (ret < 0) {
 		dev_err(hba->dev, "%s: Failed reading Product Name. err = %d\n",
@@ -6321,6 +6332,15 @@ static int ufs_get_device_desc(struct ufs_hba *hba,
 		goto out;
 	}
 
+	index =  desc_buf[DEVICE_DESC_PARAM_SN];
+	ret = ufshcd_read_string_desc(hba, index,
+				      &dev_desc->serial_no, SD_RAW);
+	if (ret < 0) {
+		dev_err(hba->dev, "%s: Failed reading Serial No. err = %d\n",
+			__func__, ret);
+		goto out;
+	}
+
 out:
 	kfree(desc_buf);
 	return ret;
@@ -6330,6 +6350,9 @@ static void ufs_put_device_desc(struct ufs_dev_desc *dev_desc)
 {
 	kfree(dev_desc->model);
 	dev_desc->model = NULL;
+
+	kfree(dev_desc->serial_no);
+	dev_desc->serial_no = NULL;
 }
 
 static void ufs_fixup_device_setup(struct ufs_hba *hba,
-- 
2.7.4

