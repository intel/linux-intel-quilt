From 6b34f07ad6579092d891e5cfb02b707ed0d9bfd0 Mon Sep 17 00:00:00 2001
From: Liu Xinyun <xinyun.liu@intel.com>
Date: Sat, 12 Oct 2019 03:26:12 +0800
Subject: [PATCH 095/100] drm/i915/gvt: Add parameter to disable non-context
 reg save/restore

When guest OS is Linux too, the non-context regs save/restore can be
bypassed to save time while doing GPU context switch

set `enable_context_restore` to false as the default value for Acrn

Tracked-On: projectacrn/acrn-hypervisor#3830
Signed-off-by: Liu Xinyun <xinyun.liu@intel.com>
Reviewed-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/gpu/drm/i915/gvt/sched_policy.c |  5 +++++
 drivers/gpu/drm/i915/gvt/scheduler.c    | 15 +++++++++++++--
 drivers/gpu/drm/i915/i915_params.c      |  3 +++
 drivers/gpu/drm/i915/i915_params.h      |  3 ++-
 4 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/sched_policy.c b/drivers/gpu/drm/i915/gvt/sched_policy.c
index 2369d4a9af94..03c76cd6aeeb 100644
--- a/drivers/gpu/drm/i915/gvt/sched_policy.c
+++ b/drivers/gpu/drm/i915/gvt/sched_policy.c
@@ -465,6 +465,11 @@ void intel_vgpu_stop_schedule(struct intel_vgpu *vgpu)
 		scheduler->current_vgpu = NULL;
 	}
 
+	if (!i915_modparams.enable_context_restore) {
+		mutex_unlock(&vgpu->gvt->sched_lock);
+		return;
+	}
+
 	intel_runtime_pm_get(&dev_priv->runtime_pm);
 	spin_lock_bh(&scheduler->mmio_context_lock);
 	for (ring_id = 0; ring_id < I915_NUM_ENGINES; ring_id++) {
diff --git a/drivers/gpu/drm/i915/gvt/scheduler.c b/drivers/gpu/drm/i915/gvt/scheduler.c
index ead743150ce7..c3c52550df67 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.c
+++ b/drivers/gpu/drm/i915/gvt/scheduler.c
@@ -255,6 +255,9 @@ static int shadow_context_status_change(struct notifier_block *nb,
 	unsigned long flags;
 
 	if (!is_gvt_request(req)) {
+		if (!i915_modparams.enable_context_restore)
+			return NOTIFY_OK;
+
 		spin_lock_irqsave(&scheduler->mmio_context_lock, flags);
 		if (action == INTEL_CONTEXT_SCHEDULE_IN &&
 		    scheduler->engine_owner[ring_id]) {
@@ -275,6 +278,10 @@ static int shadow_context_status_change(struct notifier_block *nb,
 	switch (action) {
 	case INTEL_CONTEXT_SCHEDULE_IN:
 		schedule_work(&gvt->active_hp_work);
+		if (!i915_modparams.enable_context_restore) {
+			atomic_set(&workload->shadow_ctx_active, 1);
+			break;
+		}
 		spin_lock_irqsave(&scheduler->mmio_context_lock, flags);
 		if (workload->vgpu != scheduler->engine_owner[ring_id]) {
 			/* Switch ring from host to vGPU or vGPU to vGPU. */
@@ -288,11 +295,15 @@ static int shadow_context_status_change(struct notifier_block *nb,
 		atomic_set(&workload->shadow_ctx_active, 1);
 		break;
 	case INTEL_CONTEXT_SCHEDULE_OUT:
-		save_ring_hw_state(workload->vgpu, ring_id);
+		if (i915_modparams.enable_context_restore) {
+			save_ring_hw_state(workload->vgpu, ring_id);
+		}
 		atomic_set(&workload->shadow_ctx_active, 0);
 		break;
 	case INTEL_CONTEXT_SCHEDULE_PREEMPTED:
-		save_ring_hw_state(workload->vgpu, ring_id);
+		if (i915_modparams.enable_context_restore) {
+			save_ring_hw_state(workload->vgpu, ring_id);
+		}
 		break;
 	default:
 		WARN_ON(1);
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index c78cf06036f2..ba2a35d963b4 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -263,6 +263,9 @@ i915_param_named_unsafe(domain_plane_owners, ulong, 0400,
 	planes owner: 3C:2 2C:2 1C:1 4B:1 3B:1 2B:1 1B:0 4A:0 3A:0 2A:1 1A:0 \
 	(0x0 - default value)");
 
+i915_param_named_unsafe(enable_context_restore, bool, 0400,
+	"To togger non-context regs save/restore feature(default:false)");
+
 static __always_inline void _print_param(struct drm_printer *p,
 					 const char *name,
 					 const char *type,
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index 810ac76334c5..82d41414974a 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -84,7 +84,8 @@ struct drm_printer;
 	param(bool, enable_gvt, false) \
 	param(int, gvt_workload_priority, 0) \
 	param(unsigned long, avail_planes_per_pipe, 0) \
-	param(unsigned long, domain_plane_owners, 0)
+	param(unsigned long, domain_plane_owners, 0) \
+	param(bool, enable_context_restore, false)
 
 
 #define MEMBER(T, member, ...) T member;
-- 
2.17.1

