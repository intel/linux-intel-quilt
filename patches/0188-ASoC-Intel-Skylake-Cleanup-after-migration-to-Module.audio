From 3df50889ddff9a6c3aa15934bd1434131edeb312 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Amadeusz=20S=C5=82awi=C5=84ski?=
 <amadeuszx.slawinski@linux.intel.com>
Date: Tue, 13 Aug 2019 16:55:26 +0200
Subject: [PATCH 188/193] ASoC: Intel: Skylake: Cleanup after migration to
 Modules Info
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Now that we use information obtained from FW by calling Modules Info IPC
we can get rid of code which parses FW binary and associated structures.

Change-Id: I456e833b2f57952dbb70f148c0bde83489e52e38
Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Reviewed-on:
Reviewed-by: Rojewski, Cezary <cezary.rojewski@intel.com>
Tested-by: Rojewski, Cezary <cezary.rojewski@intel.com>
---
 sound/soc/intel/skylake/bxt-sst.c       |   7 -
 sound/soc/intel/skylake/cnl-sst.c       |   7 -
 sound/soc/intel/skylake/skl-messages.c  |   1 -
 sound/soc/intel/skylake/skl-sst-dsp.h   |  28 ----
 sound/soc/intel/skylake/skl-sst-utils.c | 214 +-----------------------
 sound/soc/intel/skylake/skl-sst.c       |  12 --
 sound/soc/intel/skylake/skl.h           |   1 -
 7 files changed, 8 insertions(+), 262 deletions(-)

diff --git a/sound/soc/intel/skylake/bxt-sst.c b/sound/soc/intel/skylake/bxt-sst.c
index bb84d3235ede..ca3b9473e95d 100644
--- a/sound/soc/intel/skylake/bxt-sst.c
+++ b/sound/soc/intel/skylake/bxt-sst.c
@@ -200,13 +200,6 @@ static int bxt_load_base_firmware(struct sst_dsp *ctx)
 		}
 	}
 
-	if (skl->is_first_boot) {
-		ret = snd_skl_parse_manifest(ctx, pdata->fw,
-						BXT_ADSP_FW_BIN_HDR_OFFSET, 0);
-		if (ret < 0)
-			goto sst_load_base_firmware_failed;
-	}
-
 	stripped_fw.data = pdata->fw->data;
 	stripped_fw.size = pdata->fw->size;
 	skl_dsp_strip_extended_manifest(&stripped_fw);
diff --git a/sound/soc/intel/skylake/cnl-sst.c b/sound/soc/intel/skylake/cnl-sst.c
index f45fe7e971ae..0355d2cae6d3 100644
--- a/sound/soc/intel/skylake/cnl-sst.c
+++ b/sound/soc/intel/skylake/cnl-sst.c
@@ -179,13 +179,6 @@ static int cnl_load_base_firmware(struct sst_dsp *ctx)
 		}
 	}
 
-	if (cnl->is_first_boot) {
-		ret = snd_skl_parse_manifest(ctx, pdata->fw,
-						CNL_ADSP_FW_HDR_OFFSET, 0);
-		if (ret < 0)
-			goto load_base_firmware_failed;
-	}
-
 	stripped_fw.data = pdata->fw->data;
 	stripped_fw.size = pdata->fw->size;
 	skl_dsp_strip_extended_manifest(&stripped_fw);
diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 2a326872c38b..bac7329bd653 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -159,7 +159,6 @@ int skl_init_dsp(struct skl_dev *skl, struct sst_pdata *pdata)
 
 	skl->is_first_boot = true;
 	spin_lock_init(&skl->trace_lock);
-	INIT_LIST_HEAD(&skl->module_list);
 	INIT_LIST_HEAD(&skl->notify_kctls);
 	INIT_LIST_HEAD(&skl->cfg.dmactrl_list);
 	init_waitqueue_head(&skl->trace_waitq);
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index dd20de228506..70575fe866ef 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -158,32 +158,6 @@ struct skl_dsp_fw_ops {
 		struct skl_notify_msg notif);
 };
 
-struct adsp_module_config {
-	u32 par[4];		/* module parameters */
-	u32 is_bytes;		/* actual size of instance .bss (bytes) */
-	u32 cps;		/* cycles per second */
-	u32 ibs;		/* input buffer size (bytes) */
-	u32 obs;		/* output buffer size (bytes) */
-	u32 module_flags;	/* flags, res for future use */
-	u32 cpc;		/* cycles per single run */
-	u32 obls;		/* output block size, res for future use */
-} __packed;
-
-#define MAX_INSTANCE_BUFF 2
-
-struct uuid_module {
-	guid_t uuid;
-	int id;
-	int is_loadable;
-	int max_instance;
-	u64 pvt_id[MAX_INSTANCE_BUFF];
-	int *instance_id;
-	struct adsp_module_config *configs;
-	int num_configs;
-
-	struct list_head list;
-};
-
 struct skl_notify_data {
 	u32 type;
 	u32 length;
@@ -247,8 +221,6 @@ int skl_dsp_boot(struct sst_dsp *ctx);
 int bxt_load_library(struct sst_dsp *ctx, struct skl_lib_info *linfo,
 		int lib_count);
 
-int snd_skl_parse_manifest(struct sst_dsp *ctx, const struct firmware *fw,
-			      unsigned int offset, int index);
 struct skl_module_entry *skl_find_module(struct skl_dev *skl,
 		const guid_t *uuid);
 int skl_get_module_id(struct skl_dev *skl, const guid_t *uuid);
diff --git a/sound/soc/intel/skylake/skl-sst-utils.c b/sound/soc/intel/skylake/skl-sst-utils.c
index 035ab4d5c099..25d2be04d00a 100644
--- a/sound/soc/intel/skylake/skl-sst-utils.c
+++ b/sound/soc/intel/skylake/skl-sst-utils.c
@@ -13,207 +13,9 @@
 #include "../common/sst-dsp-priv.h"
 #include "skl.h"
 
-#define DEFAULT_HASH_SHA256_LEN 32
-
 /* FW Extended Manifest Header id = $AE1 */
 #define SKL_EXT_MANIFEST_HEADER_MAGIC   0x31454124
 
-union seg_flags {
-	u32 ul;
-	struct {
-		u32 contents : 1;
-		u32 alloc    : 1;
-		u32 load     : 1;
-		u32 read_only : 1;
-		u32 code     : 1;
-		u32 data     : 1;
-		u32 _rsvd0   : 2;
-		u32 type     : 4;
-		u32 _rsvd1   : 4;
-		u32 length   : 16;
-	} r;
-} __packed;
-
-struct segment_desc {
-	union seg_flags flags;
-	u32 v_base_addr;
-	u32 file_offset;
-};
-
-struct module_type {
-	u32 load_type  : 4;
-	u32 auto_start : 1;
-	u32 domain_ll  : 1;
-	u32 domain_dp  : 1;
-	u32 rsvd       : 25;
-} __packed;
-
-struct adsp_module_entry {
-	u32 struct_id;
-	u8  name[8];
-	u8  uuid[16];
-	struct module_type type;
-	u8  hash1[DEFAULT_HASH_SHA256_LEN];
-	u32 entry_point;
-	u16 cfg_offset;
-	u16 cfg_count;
-	u32 affinity_mask;
-	u16 instance_max_count;
-	u16 instance_bss_size;
-	struct segment_desc segments[3];
-} __packed;
-
-struct adsp_fw_hdr {
-	u32 id;
-	u32 len;
-	u8  name[8];
-	u32 preload_page_count;
-	u32 fw_image_flags;
-	u32 feature_mask;
-	u16 major;
-	u16 minor;
-	u16 hotfix;
-	u16 build;
-	u32 num_modules;
-	u32 hw_buf_base;
-	u32 hw_buf_length;
-	u32 load_offset;
-} __packed;
-
-struct skl_ext_manifest_hdr {
-	u32 id;
-	u32 len;
-	u16 version_major;
-	u16 version_minor;
-	u32 entries;
-};
-
-/*
- * Parse the firmware binary to get the UUID, module id
- * and loadable flags
- */
-int snd_skl_parse_manifest(struct sst_dsp *ctx, const struct firmware *fw,
-			unsigned int offset, int index)
-{
-	struct adsp_fw_hdr *adsp_hdr;
-	struct adsp_module_entry *mod_entry;
-	int i, num_entry, size;
-	guid_t *uuid_bin;
-	const char *buf;
-	struct skl_dev *skl = ctx->thread_context;
-	struct uuid_module *module;
-	struct firmware stripped_fw;
-	unsigned int safe_file;
-	struct adsp_module_config *mod_configs;
-
-	/* Get the FW pointer to derive ADSP header */
-	stripped_fw.data = fw->data;
-	stripped_fw.size = fw->size;
-
-	skl_dsp_strip_extended_manifest(&stripped_fw);
-
-	buf = stripped_fw.data;
-
-	/* check if we have enough space in file to move to header */
-	safe_file = sizeof(*adsp_hdr) + offset;
-	if (stripped_fw.size <= safe_file) {
-		dev_err(ctx->dev, "Small fw file size, No space for hdr\n");
-		return -EINVAL;
-	}
-
-	adsp_hdr = (struct adsp_fw_hdr *)(buf + offset);
-	if (adsp_hdr->len != sizeof(*adsp_hdr)) {
-		dev_err(ctx->dev, "Header corrupted or unsupported FW version\n");
-		return -EINVAL;
-	}
-
-	dev_info(ctx->dev, "ADSP FW Name: %.*s, Version: %d.%d.%d.%d\n",
-		 (int) sizeof(adsp_hdr->name), adsp_hdr->name, adsp_hdr->major,
-		 adsp_hdr->minor, adsp_hdr->hotfix, adsp_hdr->build);
-
-	num_entry = adsp_hdr->num_modules;
-
-	/* check all entries are in file */
-	safe_file += num_entry * sizeof(*mod_entry);
-	if (stripped_fw.size <= safe_file) {
-		dev_err(ctx->dev, "Small fw file size, No modules\n");
-		return -EINVAL;
-	}
-
-	mod_entry = (struct adsp_module_entry *)
-		(buf + offset + adsp_hdr->len);
-	mod_configs = (struct adsp_module_config *)
-		(buf + safe_file);
-
-	/*
-	 * Read modules data from FW Manifest.
-	 *
-	 * The 16 byte UUID format is: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX
-	 * Populate the table to store module_id, loadable flags and
-	 * configurations array for the module.
-	 *
-	 * Manifest structure:
-	 * header
-	 * N * module entry (N specified in header)
-	 * M * module configuration
-	 *
-	 * Each module entry can have 0 or more configurations. Configurations
-	 * are linked to entries by offset and counter stored in entry
-	 * (offset + conter <= M).
-	 */
-
-	for (i = 0; i < num_entry; i++, mod_entry++) {
-		uuid_bin = (guid_t *)mod_entry->uuid;
-		if (guid_is_null(uuid_bin))
-			continue;
-
-		module = devm_kzalloc(ctx->dev, sizeof(*module), GFP_KERNEL);
-		if (!module) {
-			list_del_init(&skl->module_list);
-			return -ENOMEM;
-		}
-
-		guid_copy(&module->uuid, uuid_bin);
-
-		module->id = (i | (index << 12));
-		module->is_loadable = mod_entry->type.load_type;
-		module->max_instance = mod_entry->instance_max_count;
-		size = sizeof(int) * mod_entry->instance_max_count;
-		module->instance_id = devm_kzalloc(ctx->dev, size, GFP_KERNEL);
-		if (!module->instance_id) {
-			list_del_init(&skl->module_list);
-			return -ENOMEM;
-		}
-
-		if (mod_entry->cfg_count) {
-			size = sizeof(*mod_configs) * (mod_entry->cfg_offset
-				+ mod_entry->cfg_count);
-			if (stripped_fw.size <= safe_file + size) {
-				dev_err(ctx->dev, "Small fw file size, no space for module cfgs\n");
-				return -EINVAL;
-			}
-			module->num_configs = mod_entry->cfg_count;
-			size = sizeof(*mod_configs) * mod_entry->cfg_count;
-			module->configs = devm_kmemdup(ctx->dev,
-					&mod_configs[mod_entry->cfg_offset],
-					size, GFP_KERNEL);
-			if (!module->configs) {
-				list_del_init(&skl->module_list);
-				return -ENOMEM;
-			}
-		}
-
-		list_add_tail(&module->list, &skl->module_list);
-
-		dev_dbg(ctx->dev,
-			"Adding uuid :%pUL   mod id: %d  Loadable: %d\n",
-			&module->uuid, module->id, module->is_loadable);
-	}
-
-	return 0;
-}
-EXPORT_SYMBOL(snd_skl_parse_manifest);
-
 struct skl_module_entry *skl_find_module(struct skl_dev *skl,
 		const guid_t *uuid)
 {
@@ -238,6 +40,14 @@ int skl_get_module_id(struct skl_dev *skl, const guid_t *uuid)
 }
 EXPORT_SYMBOL(skl_get_module_id);
 
+struct skl_ext_manifest_hdr {
+	u32 id;
+	u32 len;
+	u16 version_major;
+	u16 version_minor;
+	u32 entries;
+};
+
 /*
  * some firmware binary contains some extended manifest. This needs
  * to be stripped in that case before we load and use that image.
@@ -270,7 +80,6 @@ int skl_prepare_lib_load(struct skl_dev *skl, struct skl_lib_info *linfo,
 		unsigned int hdr_offset, int index)
 {
 	int ret;
-	struct sst_dsp *dsp = skl->dsp;
 
 	if (linfo->fw == NULL) {
 		ret = request_firmware(&linfo->fw, linfo->name,
@@ -282,13 +91,6 @@ int skl_prepare_lib_load(struct skl_dev *skl, struct skl_lib_info *linfo,
 		}
 	}
 
-	if (skl->is_first_boot) {
-		ret = snd_skl_parse_manifest(dsp, linfo->fw, hdr_offset,
-						index);
-		if (ret < 0)
-			return ret;
-	}
-
 	stripped_fw->data = linfo->fw->data;
 	stripped_fw->size = linfo->fw->size;
 	skl_dsp_strip_extended_manifest(stripped_fw);
diff --git a/sound/soc/intel/skylake/skl-sst.c b/sound/soc/intel/skylake/skl-sst.c
index 45fb4094f9be..c99376da0a3a 100644
--- a/sound/soc/intel/skylake/skl-sst.c
+++ b/sound/soc/intel/skylake/skl-sst.c
@@ -84,17 +84,6 @@ static int skl_load_base_firmware(struct sst_dsp *ctx)
 		}
 	}
 
-	if (skl->is_first_boot) {
-		ret = snd_skl_parse_manifest(ctx, pdata->fw,
-						SKL_ADSP_FW_BIN_HDR_OFFSET, 0);
-		if (ret < 0) {
-			dev_err(ctx->dev, "Manifest parsing err: %d\n", ret);
-			release_firmware(pdata->fw);
-			skl_dsp_disable_core(ctx, SKL_DSP_CORE0_MASK);
-			return ret;
-		}
-	}
-
 	/* check for extended manifest */
 	stripped_fw.data = pdata->fw->data;
 	stripped_fw.size = pdata->fw->size;
@@ -686,7 +675,6 @@ void skl_sst_dsp_cleanup(struct skl_dev *skl)
 	skl_free_pvt_id(skl);
 	kfree(skl->fw_modules_info);
 
-	list_del_init(&skl->module_list);
 	sst_dsp_free(dsp);
 
 	if (skl->boot_complete && dsp->cl_dev.bufsize) {
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 8c0dfb8b3260..552b97fa914b 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -161,7 +161,6 @@ struct skl_dev {
 	bool miscbdcg_disabled;
 
 	/* Populate module information */
-	struct list_head module_list;
 	struct skl_fw_cfg fw_cfg;
 	struct skl_hw_cfg hw_cfg;
 	struct skl_modules_info *fw_modules_info;
-- 
2.17.1

