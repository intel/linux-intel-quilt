From a886d8c7c9ca9094aa29c565cbc55e4ee74e5db2 Mon Sep 17 00:00:00 2001
From: "Song, Yoong Siang" <yoong.siang.song@intel.com>
Date: Mon, 13 May 2019 14:13:20 +0800
Subject: [PATCH 094/113] net: stmmac: move TX/RX MAC state machine enablement
 to struct stmmac_ops

Introduce *start_tx(), *stop_tx(), *start_rx(), and *stop_rx()
in struct stmmac_ops so that enablement operation of TX/RX
state machine of MAC can be separated from struct stmmac_dma_ops.

Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c | 48 +++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/dwmac4_lib.c  | 13 -----
 .../ethernet/stmicro/stmmac/dwxgmac2_core.c   | 40 ++++++++++++++++
 .../ethernet/stmicro/stmmac/dwxgmac2_dma.c    | 12 -----
 drivers/net/ethernet/stmicro/stmmac/hwif.h    | 13 +++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 11 +++++
 6 files changed, 112 insertions(+), 25 deletions(-)

Index: kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
===================================================================
--- kernel-lts-staging.orig/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -64,6 +64,42 @@ static void dwmac4_core_init(struct mac_
 	writel(value, ioaddr + GMAC_INT_EN);
 }
 
+void dwmac4_mac_start_tx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + GMAC_CONFIG);
+	value |= GMAC_CONFIG_TE;
+	writel(value, ioaddr + GMAC_CONFIG);
+}
+
+void dwmac4_mac_stop_tx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + GMAC_CONFIG);
+	value &= ~GMAC_CONFIG_TE;
+	writel(value, ioaddr + GMAC_CONFIG);
+}
+
+void dwmac4_mac_start_rx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + GMAC_CONFIG);
+	value |= GMAC_CONFIG_RE;
+	writel(value, ioaddr + GMAC_CONFIG);
+}
+
+void dwmac4_mac_stop_rx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + GMAC_CONFIG);
+	value &= ~GMAC_CONFIG_RE;
+	writel(value, ioaddr + GMAC_CONFIG);
+}
+
 static void dwmac4_rx_queue_enable(struct mac_device_info *hw,
 				   u8 mode, u32 queue)
 {
@@ -1077,6 +1113,10 @@ static void dwmac4_set_hw_vlan_mode(void
 const struct stmmac_ops dwmac4_ops = {
 	.core_init = dwmac4_core_init,
 	.set_mac = stmmac_set_mac,
+	.start_tx = dwmac4_mac_start_tx,
+	.stop_tx = dwmac4_mac_stop_tx,
+	.start_rx = dwmac4_mac_start_rx,
+	.stop_rx = dwmac4_mac_stop_rx,
 	.rx_ipc = dwmac4_rx_ipc_enable,
 	.rx_queue_enable = dwmac4_rx_queue_enable,
 	.rx_queue_prio = dwmac4_rx_queue_priority,
@@ -1118,6 +1158,10 @@ const struct stmmac_ops dwmac4_ops = {
 const struct stmmac_ops dwmac410_ops = {
 	.core_init = dwmac4_core_init,
 	.set_mac = stmmac_dwmac4_set_mac,
+	.start_tx = dwmac4_mac_start_tx,
+	.stop_tx = dwmac4_mac_stop_tx,
+	.start_rx = dwmac4_mac_start_rx,
+	.stop_rx = dwmac4_mac_stop_rx,
 	.rx_ipc = dwmac4_rx_ipc_enable,
 	.rx_queue_enable = dwmac4_rx_queue_enable,
 	.rx_queue_prio = dwmac4_rx_queue_priority,
@@ -1159,6 +1203,10 @@ const struct stmmac_ops dwmac410_ops = {
 const struct stmmac_ops dwmac510_ops = {
 	.core_init = dwmac4_core_init,
 	.set_mac = stmmac_dwmac4_set_mac,
+	.start_tx = dwmac4_mac_start_tx,
+	.stop_tx = dwmac4_mac_stop_tx,
+	.start_rx = dwmac4_mac_start_rx,
+	.stop_rx = dwmac4_mac_stop_rx,
 	.rx_ipc = dwmac4_rx_ipc_enable,
 	.rx_queue_enable = dwmac4_rx_queue_enable,
 	.rx_queue_prio = dwmac4_rx_queue_priority,
Index: kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
===================================================================
--- kernel-lts-staging.orig/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
+++ kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwmac4_lib.c
@@ -48,10 +48,6 @@ void dwmac4_dma_start_tx(void __iomem *i
 
 	value |= DMA_CONTROL_ST;
 	writel(value, ioaddr + DMA_CHAN_TX_CONTROL(chan));
-
-	value = readl(ioaddr + GMAC_CONFIG);
-	value |= GMAC_CONFIG_TE;
-	writel(value, ioaddr + GMAC_CONFIG);
 }
 
 void dwmac4_dma_stop_tx(void __iomem *ioaddr, u32 chan)
@@ -67,12 +63,7 @@ void dwmac4_dma_start_rx(void __iomem *i
 	u32 value = readl(ioaddr + DMA_CHAN_RX_CONTROL(chan));
 
 	value |= DMA_CONTROL_SR;
-
 	writel(value, ioaddr + DMA_CHAN_RX_CONTROL(chan));
-
-	value = readl(ioaddr + GMAC_CONFIG);
-	value |= GMAC_CONFIG_RE;
-	writel(value, ioaddr + GMAC_CONFIG);
 }
 
 void dwmac4_dma_stop_rx(void __iomem *ioaddr, u32 chan)
Index: kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c
===================================================================
--- kernel-lts-staging.orig/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c
+++ kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c
@@ -63,6 +63,42 @@ static void dwxgmac2_set_mac(void __iome
 	writel(rx, ioaddr + XGMAC_RX_CONFIG);
 }
 
+static void dwxgmac2_mac_start_tx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + XGMAC_TX_CONFIG);
+	value |= XGMAC_CONFIG_TE;
+	writel(value, ioaddr + XGMAC_TX_CONFIG);
+}
+
+static void dwxgmac2_mac_stop_tx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + XGMAC_TX_CONFIG);
+	value &= ~XGMAC_CONFIG_TE;
+	writel(value, ioaddr + XGMAC_TX_CONFIG);
+}
+
+static void dwxgmac2_mac_start_rx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + XGMAC_RX_CONFIG);
+	value |= XGMAC_CONFIG_RE;
+	writel(value, ioaddr + XGMAC_RX_CONFIG);
+}
+
+static void dwxgmac2_mac_stop_rx(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + XGMAC_RX_CONFIG);
+	value &= ~XGMAC_CONFIG_RE;
+	writel(value, ioaddr + XGMAC_RX_CONFIG);
+}
+
 static int dwxgmac2_rx_ipc(struct mac_device_info *hw)
 {
 	void __iomem *ioaddr = hw->pcsr;
@@ -1347,6 +1383,10 @@ static void dwxgmac2_set_arp_offload(str
 const struct stmmac_ops dwxgmac210_ops = {
 	.core_init = dwxgmac2_core_init,
 	.set_mac = dwxgmac2_set_mac,
+	.start_tx = dwxgmac2_mac_start_tx,
+	.stop_tx = dwxgmac2_mac_stop_tx,
+	.start_rx = dwxgmac2_mac_start_rx,
+	.stop_rx = dwxgmac2_mac_stop_rx,
 	.rx_ipc = dwxgmac2_rx_ipc,
 	.rx_queue_enable = dwxgmac2_rx_queue_enable,
 	.rx_queue_prio = dwxgmac2_rx_queue_prio,
Index: kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c
===================================================================
--- kernel-lts-staging.orig/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c
+++ kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_dma.c
@@ -272,10 +272,6 @@ static void dwxgmac2_dma_start_tx(void _
 	value = readl(ioaddr + XGMAC_DMA_CH_TX_CONTROL(chan));
 	value |= XGMAC_TXST;
 	writel(value, ioaddr + XGMAC_DMA_CH_TX_CONTROL(chan));
-
-	value = readl(ioaddr + XGMAC_TX_CONFIG);
-	value |= XGMAC_CONFIG_TE;
-	writel(value, ioaddr + XGMAC_TX_CONFIG);
 }
 
 static void dwxgmac2_dma_stop_tx(void __iomem *ioaddr, u32 chan)
@@ -285,10 +281,6 @@ static void dwxgmac2_dma_stop_tx(void __
 	value = readl(ioaddr + XGMAC_DMA_CH_TX_CONTROL(chan));
 	value &= ~XGMAC_TXST;
 	writel(value, ioaddr + XGMAC_DMA_CH_TX_CONTROL(chan));
-
-	value = readl(ioaddr + XGMAC_TX_CONFIG);
-	value &= ~XGMAC_CONFIG_TE;
-	writel(value, ioaddr + XGMAC_TX_CONFIG);
 }
 
 static void dwxgmac2_dma_start_rx(void __iomem *ioaddr, u32 chan)
@@ -298,10 +290,6 @@ static void dwxgmac2_dma_start_rx(void _
 	value = readl(ioaddr + XGMAC_DMA_CH_RX_CONTROL(chan));
 	value |= XGMAC_RXST;
 	writel(value, ioaddr + XGMAC_DMA_CH_RX_CONTROL(chan));
-
-	value = readl(ioaddr + XGMAC_RX_CONFIG);
-	value |= XGMAC_CONFIG_RE;
-	writel(value, ioaddr + XGMAC_RX_CONFIG);
 }
 
 static void dwxgmac2_dma_stop_rx(void __iomem *ioaddr, u32 chan)
Index: kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/hwif.h
===================================================================
--- kernel-lts-staging.orig/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -295,6 +295,11 @@ struct stmmac_ops {
 	void (*core_init)(struct mac_device_info *hw, struct net_device *dev);
 	/* Enable the MAC RX/TX */
 	void (*set_mac)(void __iomem *ioaddr, bool enable);
+	/* Start/Stop TX/RX state machine of MAC */
+	void (*start_tx)(void __iomem *ioaddr);
+	void (*stop_tx)(void __iomem *ioaddr);
+	void (*start_rx)(void __iomem *ioaddr);
+	void (*stop_rx)(void __iomem *ioaddr);
 	/* Enable and verify that the IPC module is supported */
 	int (*rx_ipc)(struct mac_device_info *hw);
 	/* Enable RX Queues */
@@ -466,6 +471,14 @@ struct stmmac_ops {
 	stmmac_do_void_callback(__priv, mac, core_init, __args)
 #define stmmac_mac_set(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mac, set_mac, __args)
+#define stmmac_start_mac_tx(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, start_tx, __args)
+#define stmmac_stop_mac_tx(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, stop_tx, __args)
+#define stmmac_start_mac_rx(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, start_rx, __args)
+#define stmmac_stop_mac_rx(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, stop_rx, __args)
 #define stmmac_rx_ipc(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, rx_ipc, __args)
 #define stmmac_rx_queue_enable(__priv, __args...) \
Index: kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
===================================================================
--- kernel-lts-staging.orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ kernel-lts-staging/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -2111,6 +2111,8 @@ static void stmmac_tx_err(struct stmmac_
 	netif_tx_stop_queue(netdev_get_tx_queue(priv->dev, chan));
 
 	stmmac_stop_tx_dma(priv, chan);
+	stmmac_stop_mac_tx(priv, priv->ioaddr);
+
 	dma_free_tx_skbufs(priv, chan);
 	for (i = 0; i < priv->dma_tx_size; i++)
 		if (priv->extend_desc)
@@ -2130,6 +2132,7 @@ static void stmmac_tx_err(struct stmmac_
 	tx_q->mss = 0;
 	netdev_tx_reset_queue(netdev_get_tx_queue(priv->dev, chan));
 	stmmac_start_tx_dma(priv, chan);
+	stmmac_start_mac_tx(priv, priv->ioaddr);
 
 	priv->dev->stats.tx_errors++;
 	netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, chan));
@@ -2784,6 +2787,8 @@ static int stmmac_hw_setup(struct net_de
 
 	/* Start the ball rolling... */
 	stmmac_start_all_dma(priv);
+	stmmac_start_mac_tx(priv, priv->ioaddr);
+	stmmac_start_mac_rx(priv, priv->ioaddr);
 
 	/* Set HW VLAN stripping mode */
 	stmmac_set_hw_vlan_mode(priv, priv->ioaddr, dev->features);
@@ -3256,6 +3261,8 @@ static int stmmac_release(struct net_dev
 
 	/* Stop TX/RX DMA and clear the descriptors */
 	stmmac_stop_all_dma(priv);
+	stmmac_stop_mac_tx(priv, priv->ioaddr);
+	stmmac_stop_mac_rx(priv, priv->ioaddr);
 
 	/* Release and free the Rx/Tx resources */
 	free_dma_desc_resources(priv);
@@ -5580,6 +5587,8 @@ int stmmac_dvr_remove(struct device *dev
 	netdev_info(priv->dev, "%s: removing driver", __func__);
 
 	stmmac_stop_all_dma(priv);
+	stmmac_stop_mac_tx(priv, priv->ioaddr);
+	stmmac_stop_mac_rx(priv, priv->ioaddr);
 
 	if (priv->plat->has_serdes)
 		stmmac_serdes_powerdown(priv, ndev);
@@ -5640,6 +5649,8 @@ int stmmac_suspend(struct device *dev)
 
 	/* Stop TX/RX DMA */
 	stmmac_stop_all_dma(priv);
+	stmmac_stop_mac_tx(priv, priv->ioaddr);
+	stmmac_stop_mac_rx(priv, priv->ioaddr);
 
 	/* Enable Power down mode by programming the PMT regs */
 	if (device_may_wakeup(priv->device)) {
