From 783ca729b847b3c1a78b0a7ac313fa2598ac2176 Mon Sep 17 00:00:00 2001
From: Ong Hock Yu <ong.hock.yu@intel.com>
Date: Sat, 4 Aug 2018 12:35:58 +0800
Subject: [PATCH 2050/2345] media: intel-ipu4: [VIRT] Implementing poll without
 wait at BE.

No wait at BE for frame data to be ready. The FE to BE
transaction remain open until frame data is ready.

Change-Id: Ic128053f723102394a7ccf5c2ea724192721af7f
Signed-off-by: Ong Hock Yu <ong.hock.yu@intel.com>
---
 drivers/media/pci/intel/ici/ici-isys-frame-buf.c   |   4 +
 drivers/media/pci/intel/ici/ici-isys-stream.h      |   1 +
 .../pci/intel/virtio/intel-ipu4-virtio-be-bridge.c |  16 +--
 .../pci/intel/virtio/intel-ipu4-virtio-be-stream.c | 123 ++++++++-------------
 .../media/pci/intel/virtio/intel-ipu4-virtio-be.c  |  22 +++-
 .../media/pci/intel/virtio/intel-ipu4-virtio-be.h  |  11 ++
 6 files changed, 87 insertions(+), 90 deletions(-)
 create mode 100644 drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.h

diff --git a/drivers/media/pci/intel/ici/ici-isys-frame-buf.c b/drivers/media/pci/intel/ici/ici-isys-frame-buf.c
index b17d931..8e62c27 100644
--- a/drivers/media/pci/intel/ici/ici-isys-frame-buf.c
+++ b/drivers/media/pci/intel/ici/ici-isys-frame-buf.c
@@ -639,6 +639,8 @@ void ici_isys_frame_buf_ready(struct ici_isys_pipeline
 	} else {
 		buf->frame_info.field = ICI_FIELD_NONE;
 		frame_buf_done(buf_list, buf);
+		if (as->frame_done_notify_queue)
+			as->frame_done_notify_queue();
 	}
 
 	dev_dbg(&isys->adev->dev, "buffer: found buffer %p\n", buf);
@@ -795,6 +797,8 @@ void ici_isys_frame_buf_capture_done(
 			buf->frame_info.field = ip->cur_field;
 			list_del(&buf->node);
 			frame_buf_done(buf_list, buf);
+		if (as->frame_done_notify_queue)
+			as->frame_done_notify_queue();
 		}
 	}
 }
diff --git a/drivers/media/pci/intel/ici/ici-isys-stream.h b/drivers/media/pci/intel/ici/ici-isys-stream.h
index 457b123..77d89ed 100644
--- a/drivers/media/pci/intel/ici/ici-isys-stream.h
+++ b/drivers/media/pci/intel/ici/ici-isys-stream.h
@@ -50,6 +50,7 @@ struct ici_isys_stream {
 	void (*prepare_firmware_stream_cfg)(
 		struct ici_isys_stream *as,
 		struct ia_css_isys_stream_cfg_data *cfg);
+	int (*frame_done_notify_queue)(void);
 };
 
 #define to_intel_ipu4_isys_ici_stream(__buf_list) \
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
index 8540d66616..f51473a 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
@@ -35,12 +35,8 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			printk(KERN_INFO "POLL: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
-			ret = process_poll(domid, req);
-			if (ret)
-				req->stat = IPU4_REQ_ERROR;
-			else
-				req->stat = IPU4_REQ_PROCESSED;
+			pr_debug("POLL: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
+			req->stat = IPU4_REQ_NEEDS_FOLLOW_UP;
 			break;
 	case IPU4_CMD_DEVICE_OPEN:
 			/*
@@ -48,7 +44,7 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			printk(KERN_INFO "DEVICE_OPEN: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
+			pr_debug("DEVICE_OPEN: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
 			ret = process_device_open(domid, req);
 			if (ret)
 				req->stat = IPU4_REQ_ERROR;
@@ -61,7 +57,7 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			printk(KERN_INFO "DEVICE_CLOSE: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
+			pr_debug("DEVICE_CLOSE: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
 			ret = process_device_close(domid, req);
 			if (ret)
 				req->stat = IPU4_REQ_ERROR;
@@ -73,7 +69,7 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			printk(KERN_INFO "STREAM ON: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
+			pr_debug("STREAM ON: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
 			ret = process_stream_on(domid, req);
 			if (ret)
 				req->stat = IPU4_REQ_ERROR;
@@ -85,7 +81,7 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			printk(KERN_INFO "STREAM OFF: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
+			pr_debug("STREAM OFF: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
 			ret = process_stream_off(domid, req);
 			if (ret)
 				req->stat = IPU4_REQ_ERROR;
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
index 7310aac..7fe798e 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
@@ -17,6 +17,7 @@
 #include "./ici/ici-isys-stream.h"
 #include "./ici/ici-isys-frame-buf.h"
 #include "intel-ipu4-virtio-be-stream.h"
+#include "intel-ipu4-virtio-be.h"
 
 #define MAX_SIZE 6 // max 2^6
 
@@ -32,6 +33,12 @@ struct stream_node {
 	struct hlist_node node;
 };
 
+int frame_done_callback(void)
+{
+	notify_fe();
+	return 0;
+}
+
 int process_device_open(int domid, struct ipu4_virtio_req *req)
 {
 	char node_name[25];
@@ -86,28 +93,26 @@ int process_set_format(int domid, struct ipu4_virtio_req *req)
 	struct stream_node *sn = NULL;
 	struct ici_stream_device *strm_dev;
 	struct ici_stream_format *host_virt;
-	int err;
+	int err, found;
 
 	printk(KERN_INFO "process_set_format: %d %d", hash_initialised, req->op[0]);
 
 	if (!hash_initialised)
 		return -1;
 
+	found = 0;
 	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
 		printk(KERN_INFO "process_set_format: sn %d %p", req->op[0], sn);
 		if (sn != NULL) {
 			printk(KERN_INFO "process_set_format: node %d %p", req->op[0], sn);
+			found = 1;
 			break;
 		}
 	}
-	if (sn == NULL) {
-		printk(KERN_ERR "process_set_format: NULL sn\n");
-		return 0;
-	}
 
-	if (sn->f == NULL) {
-		printk(KERN_ERR "process_set_format: NULL sn->f\n");
-		return 0;
+	if (!found) {
+		pr_debug("%s: stream not found %d\n", __func__, req->op[0]);
+		return -1;
 	}
 
 	strm_dev = sn->f->private_data;
@@ -119,7 +124,7 @@ int process_set_format(int domid, struct ipu4_virtio_req *req)
 	host_virt = (struct ici_stream_format *)map_guest_phys(domid, req->payload, PAGE_SIZE);
 	if (host_virt == NULL) {
 		printk(KERN_ERR "process_set_format: NULL host_virt");
-		return 0;
+		return -1;
 	}
 
 	err = strm_dev->ipu_ioctl_ops->ici_set_format(sn->f, strm_dev, host_virt);
@@ -132,43 +137,6 @@ int process_set_format(int domid, struct ipu4_virtio_req *req)
 
 int process_poll(int domid, struct ipu4_virtio_req *req)
 {
-	struct stream_node *sn = NULL;
-	struct ici_isys_stream *as;
-	struct ici_isys_frame_buf_list *buf_list;
-	int ret;
-	printk(KERN_INFO "process_poll: %d %d", hash_initialised, req->op[0]);
-
-	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
-		if (sn != NULL) {
-			printk(KERN_INFO "process_poll: node %d %p", req->op[0], sn);
-			break;
-		}
-	}
-
-	as = dev_to_stream(sn->f->private_data);
-	if (as == NULL) {
-		printk(KERN_ERR "Native IPU stream not found\n");
-		return -1;
-	}
-
-	buf_list = &as->buf_list;
-	if (buf_list == NULL) {
-		printk(KERN_ERR "Native Frame buffer list not found\n");
-		return -1;
-	}
-
-	ret = wait_event_interruptible_timeout(buf_list->wait,
-						!list_empty(&buf_list->putbuf_list),
-						100); //1 jiffy -> 10ms
-
-	printk(KERN_INFO "process_poll: ret: %d", ret);
-	if (ret == 1)
-		req->func_ret = POLLIN;
-	else if (ret == 0)
-		req->func_ret = 0;//POLLHUP;
-	else
-		req->func_ret = -1;//POLLERR;
-
 	return 0;
 }
 
@@ -184,6 +152,7 @@ int process_put_buf(int domid, struct ipu4_virtio_req *req)
 	if (!hash_initialised)
 		return -1;
 
+	found = 0;
 	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
 		pr_debug("process_put_buf: sn %d %p", req->op[0], sn);
 		if (sn != NULL) {
@@ -192,20 +161,18 @@ int process_put_buf(int domid, struct ipu4_virtio_req *req)
 			break;
 		}
 	}
-	if (sn == NULL) {
-		printk(KERN_ERR "process_put_buf: NULL sn\n");
-		return 0;
-	}
 
-	if (sn->f == NULL) {
-		printk(KERN_ERR "process_put_buf: NULL sn->f\n");
-		return 0;
+	if (!found) {
+		pr_debug("%s: stream not found %d\n", __func__, req->op[0]);
+		return -1;
 	}
+
 	strm_dev = sn->f->private_data;
 	if (strm_dev == NULL) {
 		pr_err("Native IPU stream device not found\n");
 		return -1;
 	}
+
 	host_virt = (struct ici_frame_info *)map_guest_phys(domid, req->payload, PAGE_SIZE);
 	if (host_virt == NULL) {
 		pr_err("process_put_buf: NULL host_virt");
@@ -235,6 +202,7 @@ int process_get_buf(int domid, struct ipu4_virtio_req *req)
 	if (!hash_initialised)
 		return -1;
 
+	found = 0;
 	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
 		pr_debug("process_get_buf: sn %d %p", req->op[0], sn);
 		if (sn != NULL) {
@@ -243,14 +211,10 @@ int process_get_buf(int domid, struct ipu4_virtio_req *req)
 			break;
 		}
 	}
-	if (sn == NULL) {
-		printk(KERN_ERR "process_get_buf: NULL sn\n");
-		return 0;
-	}
 
-	if (sn->f == NULL) {
-		printk(KERN_ERR "process_get_buf: NULL sn->f\n");
-		return 0;
+	if (!found) {
+		pr_debug("%s: stream not found %d\n", __func__, req->op[0]);
+		return -1;
 	}
 
 	pr_debug("GET_BUF: Mapping buffer\n");
@@ -271,7 +235,7 @@ int process_get_buf(int domid, struct ipu4_virtio_req *req)
 	if (page_table == NULL) {
 		pr_err("SOS Failed to map page table\n");
 		req->stat = IPU4_REQ_ERROR;
-		return 0;
+		return -1;
 	}
 
 	else {
@@ -306,36 +270,39 @@ int process_get_buf(int domid, struct ipu4_virtio_req *req)
 int process_stream_on(int domid, struct ipu4_virtio_req *req)
 {
 	struct stream_node *sn = NULL;
+	struct ici_isys_stream *as;
 	struct ici_stream_device *strm_dev;
-	int err;
+	int err, found;
 
 	printk(KERN_INFO "process_stream_on: %d %d", hash_initialised, req->op[0]);
 
 	if (!hash_initialised)
 		return -1;
 
+	found = 0;
 	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
 		printk(KERN_INFO "process_stream_on: sn %d %p", req->op[0], sn);
 		if (sn != NULL) {
 			printk(KERN_INFO "process_stream_on: node %d %p", req->op[0], sn);
+			found = 1;
 			break;
 		}
 	}
-	if (sn == NULL) {
-		printk(KERN_ERR "process_stream_on: NULL sn\n");
-		return 0;
-	}
 
-	if (sn->f == NULL) {
-		printk(KERN_ERR "process_stream_on: NULL sn->f\n");
-		return 0;
+	if (!found) {
+		pr_debug("%s: stream not found %d\n", __func__, req->op[0]);
+		return -1;
 	}
+
 	strm_dev = sn->f->private_data;
 	if (strm_dev == NULL) {
 		printk(KERN_ERR "Native IPU stream device not found\n");
 		return -1;
 	}
 
+	as = dev_to_stream(strm_dev);
+	as->frame_done_notify_queue = frame_done_callback;
+
 	err = strm_dev->ipu_ioctl_ops->ici_stream_on(sn->f, strm_dev);
 
 	if (err)
@@ -348,35 +315,37 @@ int process_stream_off(int domid, struct ipu4_virtio_req *req)
 {
 	struct stream_node *sn = NULL;
 	struct ici_stream_device *strm_dev;
-	int err;
+	struct ici_isys_stream *as;
+	int err, found;
 
 	printk(KERN_INFO "process_stream_off: %d %d", hash_initialised, req->op[0]);
 
 	if (!hash_initialised)
 		return -1;
 
+	found = 0;
 	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
 		printk(KERN_INFO "process_stream_off: sn %d %p", req->op[0], sn);
 		if (sn != NULL) {
 			printk(KERN_INFO "process_stream_off: node %d %p", req->op[0], sn);
+			found = 1;
 			break;
 		}
 	}
-	if (sn == NULL) {
-		printk(KERN_ERR "process_stream_off: NULL sn\n");
-		return 0;
-	}
 
-	if (sn->f == NULL) {
-		printk(KERN_ERR "process_stream_off: NULL sn->f\n");
-		return 0;
+	if (!found) {
+		pr_debug("%s: stream not found %d\n", __func__, req->op[0]);
+		return -1;
 	}
+
 	strm_dev = sn->f->private_data;
 	if (strm_dev == NULL) {
 		printk(KERN_ERR "Native IPU stream device not found\n");
 		return -1;
 	}
 
+	as = dev_to_stream(strm_dev);
+	as->frame_done_notify_queue = NULL;
 
 	err = strm_dev->ipu_ioctl_ops->ici_stream_off(sn->f, strm_dev);
 
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
index 0662a9e..c4ab255 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
@@ -17,6 +17,7 @@
 
 #include "intel-ipu4-virtio-common.h"
 #include "intel-ipu4-virtio-be-bridge.h"
+#include "intel-ipu4-virtio-be.h"
 
 /**
  * struct ipu4_virtio_be_priv - Backend of virtio-rng based on VBS-K
@@ -42,6 +43,15 @@ struct ipu4_virtio_be_priv {
 	struct hlist_node node;
 };
 
+struct vq_request_data {
+	struct virtio_vq_info *vq;
+	struct ipu4_virtio_req *req;
+	int len;
+	uint16_t idx;
+};
+
+struct vq_request_data vq_req;
+
 #define RNG_MAX_HASH_BITS 4		/* MAX is 2^4 */
 #define HASH_NAME vbs_hash
 
@@ -190,7 +200,13 @@ static void handle_vq_kick(struct ipu4_virtio_be_priv *priv, int vq_idx)
 		ret = intel_ipu4_virtio_msg_parse(1, req);
 		len = iov.iov_len;
 
-		virtio_vq_relchain(vq, idx, len);
+		if (req->stat == IPU4_REQ_NEEDS_FOLLOW_UP) {
+			vq_req.vq = vq;
+			vq_req.req = req;
+			vq_req.idx = idx;
+			vq_req.len = len;
+		} else
+			virtio_vq_relchain(vq, idx, len);
 	}
 	pr_debug("IPU VBK data process on VQ Done\n");
 	if (req && req->stat != IPU4_REQ_NEEDS_FOLLOW_UP)
@@ -364,7 +380,7 @@ static long ipu_vbk_ioctl(struct file *f, unsigned int ioctl,
 		return r;
 	}
 }
-#if 0
+
 int notify_fe(void)
 {
 	if (vq_req.vq) {
@@ -378,7 +394,7 @@ int notify_fe(void)
 
 	return 0;
 }
-#endif
+
 /* device specific function to cleanup itself */
 static void ipu_vbk_reset(struct ipu4_virtio_be_priv *rng)
 {
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.h b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.h
new file mode 100644
index 00000000..3fb8710
--- /dev/null
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: (BSD-3-Clause OR GPL-2.0) */
+/*
+ * Copyright (C) 2018 Intel Corporation
+ */
+
+#ifndef __IPU4_VIRTIO_BE__
+#define __IPU4_VIRTIO_BE__
+
+int notify_fe(void);
+
+#endif
\ No newline at end of file
-- 
2.7.4

