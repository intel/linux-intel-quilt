From 8d64a92f11a133d1e09e83018c8fc5d82397e51d Mon Sep 17 00:00:00 2001
From: Vincent Cao <vincent.t.cao@intel.com>
Date: Thu, 21 Nov 2019 17:05:53 -0800
Subject: [PATCH 039/131] tpm: Enable support for KMB event-log

Add Keembay specific event-log support for tpm.  Keembay allocates
32k buffer for tpm2 event log.

Signed-off-by: Vincent Cao <vincent.t.cao@intel.com>
---
 drivers/char/tpm/eventlog/of.c | 44 +++++++++++++++++++++++++++++++++-
 1 file changed, 43 insertions(+), 1 deletion(-)

diff --git a/drivers/char/tpm/eventlog/of.c b/drivers/char/tpm/eventlog/of.c
index af347c190819..5a527ad8f91d 100644
--- a/drivers/char/tpm/eventlog/of.c
+++ b/drivers/char/tpm/eventlog/of.c
@@ -12,6 +12,9 @@
 
 #include <linux/slab.h>
 #include <linux/of.h>
+#if defined(CONFIG_ARCH_KEEMBAY)
+#include <linux/of_address.h>
+#endif
 #include <linux/tpm_eventlog.h>
 
 #include "../tpm.h"
@@ -20,11 +23,19 @@
 int tpm_read_log_of(struct tpm_chip *chip)
 {
 	struct device_node *np;
+#if !defined(CONFIG_ARCH_KEEMBAY)
 	const u32 *sizep;
 	const u64 *basep;
+#endif
 	struct tpm_bios_log *log;
 	u32 size;
 	u64 base;
+#if defined(CONFIG_ARCH_KEEMBAY)
+	struct device_node *node;
+	struct resource res;
+	void *vaddr;
+	int rc;
+#endif
 
 	log = &chip->log;
 	if (chip->dev.parent && chip->dev.parent->of_node)
@@ -35,13 +46,43 @@ int tpm_read_log_of(struct tpm_chip *chip)
 	if (of_property_read_bool(np, "powered-while-suspended"))
 		chip->flags |= TPM_CHIP_FLAG_ALWAYS_POWERED;
 
+#if defined(CONFIG_ARCH_KEEMBAY)
+	node = of_parse_phandle(np, "event-log", 0);
+	if (!node) {
+		dev_err(&chip->dev, "Couldn't find event-log region.\n");
+		return -EINVAL;
+	}
+
+	rc = of_address_to_resource(node, 0, &res);
+	of_node_put(node);
+	if (rc) {
+		dev_err(&chip->dev, "Couldn't resolve event-log region.\n");
+		return rc;
+	}
+
+	base = res.start;
+	size = resource_size(&res);
+
+	dev_info(&chip->dev, "tpm2 event-log base:0x%llx size:0x%x\n", base, size);
+	vaddr =	memremap(base, size, MEMREMAP_WB);
+	if (!vaddr) {
+		dev_err(&chip->dev, "Couldn't map event-log memory resource.\n");
+		return -EADDRNOTAVAIL;
+	}
+
+	log->bios_event_log = kmemdup(vaddr, size, GFP_KERNEL);
+	if (!log->bios_event_log)
+		return -ENOMEM;
+
+	memunmap(vaddr);
+#else
 	sizep = of_get_property(np, "linux,sml-size", NULL);
 	basep = of_get_property(np, "linux,sml-base", NULL);
+
 	if (sizep == NULL && basep == NULL)
 		return -ENODEV;
 	if (sizep == NULL || basep == NULL)
 		return -EIO;
-
 	/*
 	 * For both vtpm/tpm, firmware has log addr and log size in big
 	 * endian format. But in case of vtpm, there is a method called
@@ -67,6 +108,7 @@ int tpm_read_log_of(struct tpm_chip *chip)
 	log->bios_event_log = kmemdup(__va(base), size, GFP_KERNEL);
 	if (!log->bios_event_log)
 		return -ENOMEM;
+#endif
 
 	log->bios_event_log_end = log->bios_event_log + size;
 
-- 
2.17.1

