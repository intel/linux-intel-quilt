From d25e3c41c1c42003034b1fe8d9a90effb6d04618 Mon Sep 17 00:00:00 2001
From: Fei Jiang <fei.jiang@intel.com>
Date: Tue, 27 Mar 2018 22:20:30 +0800
Subject: [PATCH 1365/2328] [INTERNAL]drm/i915/gvt: support Kabylake platform

Added missing IS_KABYLAKE for ACRN GVT-g, also changed the default
virtual displays setup for KBL platform.

Signed-off-by: Fei Jiang <fei.jiang@intel.com>
---
 drivers/gpu/drm/i915/gvt/cfg_space.c      |  6 ++++++
 drivers/gpu/drm/i915/gvt/display.c        | 16 ++++++++--------
 drivers/gpu/drm/i915/gvt/fb_decoder.c     | 15 ++++++++++-----
 drivers/gpu/drm/i915/gvt/render.c         |  8 +++++---
 drivers/gpu/drm/i915/i915_gem_gvtbuffer.c |  3 ++-
 5 files changed, 31 insertions(+), 17 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/cfg_space.c b/drivers/gpu/drm/i915/gvt/cfg_space.c
index ff3154f..f532e4b 100644
--- a/drivers/gpu/drm/i915/gvt/cfg_space.c
+++ b/drivers/gpu/drm/i915/gvt/cfg_space.c
@@ -300,6 +300,12 @@ int intel_vgpu_emulate_cfg_write(struct intel_vgpu *vgpu, unsigned int offset,
 		break;
 
 	case INTEL_GVT_PCI_OPREGION:
+		/*
+                 * To support virtual display, we need to override the real VBT in the
+                 * OpRegion. So here we don't report OpRegion to guest.
+                 */
+		if (IS_KABYLAKE(vgpu->gvt->dev_priv))
+			return 0;
 		if (WARN_ON(!IS_ALIGNED(offset, 4)))
 			return -EINVAL;
 		ret = intel_vgpu_init_opregion(vgpu, *(u32 *)p_data);
diff --git a/drivers/gpu/drm/i915/gvt/display.c b/drivers/gpu/drm/i915/gvt/display.c
index 80a2382..5eaa48d 100644
--- a/drivers/gpu/drm/i915/gvt/display.c
+++ b/drivers/gpu/drm/i915/gvt/display.c
@@ -477,7 +477,7 @@ void intel_gvt_init_pipe_info(struct intel_gvt *gvt)
 	}
 }
 
-int bxt_setup_virtual_monitors(struct intel_vgpu *vgpu)
+int setup_virtual_monitors(struct intel_vgpu *vgpu)
 {
 	struct intel_connector *connector = NULL;
 	struct drm_connector_list_iter conn_iter;
@@ -506,7 +506,7 @@ int bxt_setup_virtual_monitors(struct intel_vgpu *vgpu)
 	return 0;
 }
 
-void bxt_clean_virtual_monitors(struct intel_vgpu *vgpu)
+void clean_virtual_monitors(struct intel_vgpu *vgpu)
 {
 	int port = 0;
 
@@ -529,9 +529,9 @@ void intel_vgpu_clean_display(struct intel_vgpu *vgpu)
 {
 	struct drm_i915_private *dev_priv = vgpu->gvt->dev_priv;
 
-	if (IS_BROXTON(dev_priv))
-		bxt_clean_virtual_monitors(vgpu);
-	else if (IS_SKYLAKE(dev_priv) || IS_KABYLAKE(dev_priv))
+	if (IS_BROXTON(dev_priv) || IS_KABYLAKE(dev_priv))
+		clean_virtual_monitors(vgpu);
+	else if (IS_SKYLAKE(dev_priv))
 		clean_virtual_dp_monitor(vgpu, PORT_D);
 	else
 		clean_virtual_dp_monitor(vgpu, PORT_B);
@@ -553,9 +553,9 @@ int intel_vgpu_init_display(struct intel_vgpu *vgpu, u64 resolution)
 
 	intel_vgpu_init_i2c_edid(vgpu);
 
-	if (IS_BROXTON(dev_priv))
-		return bxt_setup_virtual_monitors(vgpu);
-	else if (IS_SKYLAKE(dev_priv) || IS_KABYLAKE(dev_priv))
+	if (IS_BROXTON(dev_priv) || IS_KABYLAKE(dev_priv))
+		return setup_virtual_monitors(vgpu);
+	else if (IS_SKYLAKE(dev_priv))
 		return setup_virtual_monitor(vgpu,
 				PORT_D, GVT_DP_D, resolution, NULL, true);
 	else
diff --git a/drivers/gpu/drm/i915/gvt/fb_decoder.c b/drivers/gpu/drm/i915/gvt/fb_decoder.c
index 020b447..6f361ec 100644
--- a/drivers/gpu/drm/i915/gvt/fb_decoder.c
+++ b/drivers/gpu/drm/i915/gvt/fb_decoder.c
@@ -114,7 +114,8 @@ static u32 gvt_get_stride(struct intel_vgpu *vgpu, int pipe, u32 tiled,
 	u32 stride_reg = vgpu_vreg(vgpu, DSPSTRIDE(pipe)) & stride_mask;
 	u32 stride = stride_reg;
 
-	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) {
+	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	    IS_KABYLAKE(dev_priv)) {
 		switch (tiled) {
 		case PLANE_CTL_TILED_LINEAR:
 			stride = stride_reg * 64;
@@ -152,7 +153,8 @@ static int gvt_decode_primary_plane_format(struct intel_vgpu *vgpu,
 	if (!plane->enabled)
 		return 0;
 
-	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) {
+	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	    IS_KABYLAKE(dev_priv)) {
 		plane->tiled = (val & PLANE_CTL_TILED_MASK) >> _PLANE_CTL_TILED_SHIFT;
 		fmt = skl_format_to_drm(
 		val & PLANE_CTL_FORMAT_MASK,
@@ -168,8 +170,10 @@ static int gvt_decode_primary_plane_format(struct intel_vgpu *vgpu,
 		plane->drm_format = primary_pixel_formats[fmt].drm_format;
 	}
 
-	if (((IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) && !skl_pixel_formats[fmt].bpp)
-			|| (!(IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) && !primary_pixel_formats[fmt].bpp)) {
+	if (((IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	      IS_KABYLAKE(dev_priv)) && !skl_pixel_formats[fmt].bpp) ||
+	   (!(IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	      IS_KABYLAKE(dev_priv)) && !primary_pixel_formats[fmt].bpp)) {
 		gvt_err("Non-supported pixel format (0x%x)\n", fmt);
 		return -EINVAL;
 	}
@@ -179,7 +183,8 @@ static int gvt_decode_primary_plane_format(struct intel_vgpu *vgpu,
 	plane->base = vgpu_vreg(vgpu, DSPSURF(pipe)) & GTT_PAGE_MASK;
 
 	plane->stride = gvt_get_stride(vgpu, pipe, (plane->tiled << 10),
-			(IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv))?
+			(IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+			 IS_KABYLAKE(dev_priv)) ?
 				(_PRI_PLANE_STRIDE_MASK >> 6)
 				: _PRI_PLANE_STRIDE_MASK, plane->bpp);
 
diff --git a/drivers/gpu/drm/i915/gvt/render.c b/drivers/gpu/drm/i915/gvt/render.c
index 1fc332f..70226a4 100644
--- a/drivers/gpu/drm/i915/gvt/render.c
+++ b/drivers/gpu/drm/i915/gvt/render.c
@@ -147,7 +147,7 @@ void intel_gvt_mark_noncontext_mmios(struct intel_gvt *gvt)
 	int i, array_size;
 
 	if (IS_SKYLAKE(gvt->dev_priv)
-		|| IS_BROXTON(gvt->dev_priv)) {
+		|| IS_BROXTON(gvt->dev_priv) || IS_KABYLAKE(gvt->dev_priv)) {
 		mmio = gen9_render_mmio_list;
 		array_size = ARRAY_SIZE(gen9_render_mmio_list);
 	} else {
@@ -459,7 +459,8 @@ static int noncontext_mmio_compare(struct intel_vgpu *vgpu, int ring_id)
 	int i, array_size;
 	struct intel_engine_cs *engine = dev_priv->engine[ring_id];
 
-	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) {
+	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	    IS_KABYLAKE(dev_priv)) {
 		mmio_list = gen9_render_mmio_list;
 		array_size = ARRAY_SIZE(gen9_render_mmio_list);
 	} else {
@@ -486,7 +487,8 @@ static void get_host_mmio_snapshot(struct intel_gvt *gvt)
 	struct render_mmio *mmio, *mmio_list;
 	int i, array_size;
 
-	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) {
+	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	    IS_KABYLAKE(dev_priv)) {
 		mmio_list = gen9_render_mmio_list;
 		array_size = ARRAY_SIZE(gen9_render_mmio_list);
 	} else {
diff --git a/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c b/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c
index 05af0a0..a08c5ca 100644
--- a/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c
@@ -253,7 +253,8 @@ i915_gem_gvtbuffer_ioctl(struct drm_device *dev, void *data,
 		return -EINVAL;
 	}
 
-	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv)) {
+	if (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+	    IS_KABYLAKE(dev_priv)) {
 		unsigned int tiling_mode = I915_TILING_NONE;
 		unsigned int stride = 0;
 
-- 
2.7.4

