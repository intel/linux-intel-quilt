From bbef7489e43bb4dc942d71f03c48b24f3f0e25d8 Mon Sep 17 00:00:00 2001
From: "Bandi,Kushal" <kushal.bandi@intel.com>
Date: Fri, 1 Jun 2018 08:40:32 -0700
Subject: [PATCH 2024/2313] media: intel-ipu4: [VIRT] Buffer mapping between
 sos & uos

Pages shared between 2 domain and mapped in to virtual address at sos

Change-Id: I305dfead1a76680258696800103b4f0c8c9a6162
Signed-off-by: Yu, Ong Hock <ong.hock.yu@intel.com>
Signed-off-by: Bandi, Kushal <kushal.bandi@intel.com>
---
 drivers/media/pci/intel/ici/ici-isys-frame-buf.h   |   4 +
 .../pci/intel/virtio/intel-ipu4-para-virt-drv.c    | 121 ++++++++++++++-------
 .../pci/intel/virtio/intel-ipu4-virtio-bridge.c    |  81 +++++++++++++-
 .../pci/intel/virtio/intel-ipu4-virtio-bridge.h    |   1 +
 .../pci/intel/virtio/intel-ipu4-virtio-common.h    |   7 +-
 5 files changed, 170 insertions(+), 44 deletions(-)

diff --git a/drivers/media/pci/intel/ici/ici-isys-frame-buf.h b/drivers/media/pci/intel/ici/ici-isys-frame-buf.h
index eabb58e..bd05172 100644
--- a/drivers/media/pci/intel/ici/ici-isys-frame-buf.h
+++ b/drivers/media/pci/intel/ici/ici-isys-frame-buf.h
@@ -33,6 +33,10 @@ struct ici_kframe_plane {
 	struct dma_buf_attachment *db_attach;
 	struct dma_buf *dbdbuf;
 	void *kaddr;
+
+	/* For mediator */
+	int npages;
+	u64 page_table_ref;
 };
 
 struct ici_kframe_info {
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
index 2d2f5d0..023a61a 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
@@ -37,12 +37,15 @@ static int get_userpages(struct device *dev,
 	int ret = 0;
 	struct sg_table *sgt;
 	unsigned int i;
+	u64 page_table_ref;
+	u64 *page_table;
+#if 0
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
     DEFINE_DMA_ATTRS(attrs);
 #else
     unsigned long attrs;
 #endif
-
+#endif
 	addr = (unsigned long)frame_plane->mem.userptr;
 	start = addr & PAGE_MASK;
 	end = PAGE_ALIGN(addr + frame_plane->length);
@@ -52,10 +55,17 @@ static int get_userpages(struct device *dev,
 	if (!npages)
 		return -EINVAL;
 
+	page_table = kcalloc(npages, sizeof(*page_table), GFP_KERNEL);
+	if (!page_table) {
+		printk(KERN_ERR "Shared Page table for mediation failed\n");
+		return -ENOMEM;
+	}
+
+	printk("%s:%d Number of Pages:%d frame_length:%d\n", __func__, __LINE__, npages, frame_plane->length);
 	sgt = kzalloc(sizeof(*sgt), GFP_KERNEL);
 	if (!sgt)
 		return -ENOMEM;
-
+	printk("%s:%d\n", __func__, __LINE__);
 	if (array_size <= PAGE_SIZE)
 		pages = kzalloc(array_size, GFP_KERNEL);
 	else
@@ -65,15 +75,27 @@ static int get_userpages(struct device *dev,
 
 	down_read(&current->mm->mmap_sem);
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-	nr = get_user_pages(
-				current, current->mm,
+	nr = get_user_pages(current, current->mm,
 				start, npages, 1, 0, pages, NULL);
 #else
-    nr = get_user_pages(start, npages, FOLL_WRITE, pages, NULL);
+	nr = get_user_pages(start, npages, FOLL_WRITE, pages, NULL);
+	printk("%s:%d\n", __func__, __LINE__);
 #endif
 	if (nr < npages)
 		goto error_free_pages;
-
+	printk("%s:%d\n", __func__, __LINE__);
+	/* Share physical address of pages */
+	for (i = 0; i < npages; i++)
+		page_table[i] = page_to_phys(pages[i]);
+
+	printk("UOS phy page add %lld\n", page_table[0]);
+	page_table_ref = virt_to_phys(page_table);
+	kframe_plane->page_table_ref = page_table_ref;
+	kframe_plane->npages = npages;
+	up_read(&current->mm->mmap_sem);
+	return ret;
+#if 0
+printk("%s:%d\n", __func__, __LINE__);
     ret = sg_alloc_table_from_pages(sgt, pages, npages,
 					addr & ~PAGE_MASK, frame_plane->length,
 					GFP_KERNEL);
@@ -81,7 +103,7 @@ static int get_userpages(struct device *dev,
 		printk(KERN_ERR "Failed to init sgt\n");
 		goto error_free_pages;
 	}
-
+	printk("%s:%d\n", __func__, __LINE__);
 	kframe_plane->dev = dev;
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
 	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
@@ -92,7 +114,7 @@ static int get_userpages(struct device *dev,
 	sgt->nents = dma_map_sg_attrs(dev, sgt->sgl,
 				sgt->orig_nents, DMA_FROM_DEVICE, attrs);
 #endif
-
+	printk("%s:%d\n", __func__, __LINE__);
 	if (sgt->nents <= 0) {
 		printk(KERN_ERR "Failed to init dma_map\n");
 		ret = -EIO;
@@ -100,8 +122,9 @@ static int get_userpages(struct device *dev,
 	}
 	kframe_plane->dma_addr = sg_dma_address(sgt->sgl);
 	kframe_plane->sgt = sgt;
-
+	printk("%s:%d\n", __func__, __LINE__);
 error_free_page_list:
+	printk("%s:%d\n", __func__, __LINE__);
 	if (pages) {
 		if (array_size <= PAGE_SIZE)
 			kfree(pages);
@@ -119,14 +142,15 @@ static int get_userpages(struct device *dev,
     dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
 			DMA_FROM_DEVICE, attrs);
 #endif
-
+#endif
 error_free_pages:
 	if (pages) {
 		for (i = 0; i < nr; i++)
 			put_page(pages[i]);
 	}
 	kfree(sgt);
-	goto error_free_page_list;
+	return -1;
+	//goto error_free_page_list;
 }
 
 static struct ici_frame_buf_wrapper *frame_buf_lookup(struct ici_isys_frame_buf_list *buf_list, struct ici_frame_info *user_frame_info)
@@ -146,13 +170,11 @@ static struct ici_frame_buf_wrapper *frame_buf_lookup(struct ici_isys_frame_buf_
 
 			switch (mem_type) {
 			case ICI_MEM_USERPTR:
-				if (new_plane->mem.userptr ==
-					cur_plane->mem.userptr)
+				if (new_plane->mem.userptr == cur_plane->mem.userptr)
 					return buf;
 				break;
 			case ICI_MEM_DMABUF:
-				if (new_plane->mem.dmafd ==
-					cur_plane->mem.dmafd)
+				if (new_plane->mem.dmafd ==	cur_plane->mem.dmafd)
 					return buf;
 				break;
 			}
@@ -311,12 +333,12 @@ static void unmap_buf(struct ici_frame_buf_wrapper *buf)
 		}
 	}
 }
-int get_buf(struct virtual_stream *vstream,
-				struct ici_frame_info *frame_info)
+int get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info,
+		struct ici_frame_buf_wrapper *buf)
 {
 	int res;
 	unsigned i;
-	struct ici_frame_buf_wrapper *buf;
+	struct ici_frame_buf_wrapper *frame;
 
 	struct ici_kframe_plane *kframe_plane;
 	struct ici_isys_frame_buf_list *buf_list = &vstream->buf_list;
@@ -331,17 +353,14 @@ int get_buf(struct virtual_stream *vstream,
 		printk(KERN_ERR "User length not set\n");
 		return -EINVAL;
 	}
-	buf = frame_buf_lookup(buf_list, frame_info);
 
-	if (buf) {
-		buf->state = ICI_BUF_PREPARED;
+	frame = frame_buf_lookup(buf_list, frame_info);
+	if (frame) {
+		printk(KERN_INFO "Frame buffer found in the list\n");
+		frame->state = ICI_BUF_PREPARED;
 		return 0;
 	}
 
-	buf = kzalloc(sizeof(*buf), GFP_KERNEL);
-	if (!buf)
-		return -ENOMEM;
-
 	buf->buf_id = frame_info->frame_buf_id;
 	buf->buf_list = buf_list;
 	memcpy(&buf->frame_info, frame_info, sizeof(buf->frame_info));
@@ -355,30 +374,33 @@ int get_buf(struct virtual_stream *vstream,
 		for (i = 0; i < frame_info->num_planes; i++) {
 			kframe_plane = &buf->kframe_info.planes[i];
 			kframe_plane->mem_type = ICI_MEM_USERPTR;
-			res = get_userpages(&vstream->strm_dev.dev,
-								&frame_info->frame_planes[i],
+			res = get_userpages(&vstream->strm_dev.dev, &frame_info->frame_planes[i],
 								kframe_plane);
+			printk("%s:%d\n", __func__, __LINE__);
 			if (res)
 				return res;
+			printk("%s:%d\n", __func__, __LINE__);
 		}
 		break;
 	case ICI_MEM_DMABUF:
 		for (i = 0; i < frame_info->num_planes; i++) {
 			kframe_plane = &buf->kframe_info.planes[i];
 			kframe_plane->mem_type = ICI_MEM_DMABUF;
-			res = map_dma(&vstream->strm_dev.dev,
-						  &frame_info->frame_planes[i],
+			res = map_dma(&vstream->strm_dev.dev, &frame_info->frame_planes[i],
 						  kframe_plane);
 			if (res)
 				return res;
 		}
+
 		break;
 	}
-
+	printk("%s:%d\n", __func__, __LINE__);
 	mutex_lock(&buf_list->mutex);
 	buf->state = ICI_BUF_PREPARED;
 	list_add_tail(&buf->node, &buf_list->getbuf_list);
 	mutex_unlock(&buf_list->mutex);
+	printk("%s:%d\n", __func__, __LINE__);
+	//shared_buf = buf;
 	return 0;
 }
 
@@ -521,21 +543,29 @@ static int virt_isys_getbuf(struct file *file, void *fh,
 	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
 	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
 	struct ipu4_virtio_req *req;
+	struct ici_frame_buf_wrapper *buf;
 	int rval = 0;
 	int op[3];
 
-	rval = get_buf(vstream, user_frame_info);
-	if (rval)
+	buf = kzalloc(sizeof(*buf), GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	rval = get_buf(vstream, user_frame_info, buf);
+	if (rval) {
+		printk(KERN_ERR "Failed to map buffer: %d\n", rval);
 		return -ENOMEM;
+	}
+	printk(KERN_INFO "Buffer_id:%d mapped\n", buf->buf_id);
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req)
 		return -ENOMEM;
 
-
 	op[0] = vstream->virt_dev_id;
 	op[1] = 0;
 	op[2] = user_frame_info->mem_type;
+	req->payload = virt_to_phys(buf);
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_GET_BUF, &op[0]);
 
@@ -578,11 +608,13 @@ static int virt_stream_fop_open(struct inode *inode, struct file *file)
 {
 	struct ici_stream_device *strm_dev = inode_to_intel_ipu_stream_device(inode);
 	struct ipu4_virtio_req *req;
+	struct test_payload *payload;
 	struct virtual_stream *vstream = dev_to_vstream(strm_dev);
 	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
 	int rval = 0;
-	int op[2];
-	printk(KERN_INFO "virt stream open\n");
+	char name[256] = "payload_name";
+	int op[3];
+	printk(KERN_INFO "virtual stream open\n");
 	get_device(&strm_dev->dev);
 
 	file->private_data = strm_dev;
@@ -591,11 +623,26 @@ static int virt_stream_fop_open(struct inode *inode, struct file *file)
 		return -EINVAL;
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
-	if (!req)
+	if (!req) {
+		printk(KERN_ERR "Virtio Req buffer failed\n");
 		return -ENOMEM;
+	}
+
+	payload = kcalloc(1, sizeof(*payload), GFP_KERNEL);
+	if (!payload) {
+		printk(KERN_ERR "Req Payload failed\n");
+		return -ENOMEM;
+	}
+	payload->data1 = 1000;
+	payload->data2 = 1234567890;
+
+	strlcpy(payload->name, name, sizeof(name));
+	req->payload = virt_to_phys(payload);
+	printk(KERN_INFO "virt_stream_fop_open: payload guest_phy_addr: %lld\n", req->payload);
 
 	op[0] = vstream->virt_dev_id;
-	op[1] = 0;
+	op[1] = 1;
+
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_DEVICE_OPEN, &op[0]);
 
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c
index 41cc2cb..57144d8 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.c
@@ -10,13 +10,22 @@
 #include <linux/miscdevice.h>
 #include <linux/fs.h>
 #include <linux/syscalls.h>
+#include <linux/pagemap.h>
 
 #include "intel-ipu4-virtio-bridge.h"
+#include "./ici/ici-isys-frame-buf.h"
 
+#ifdef CONFIG_VIDEO_INTEL_IPU_VIRTIO_BE
 int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 {
 	int ret = 0;
-
+	struct test_payload *payload;
+	struct ici_frame_buf_wrapper *shared_buf;
+	int k, i = 0;
+	void *pageaddr;
+	u64 *page_table = NULL;
+	struct page **data_pages = NULL;
+	int *pixel_data;
 	if (!req) {
 			printk(KERN_ERR "request is NULL\n");
 			return -EINVAL;
@@ -28,12 +37,21 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 	}
 	switch (req->cmd) {
 	case IPU4_CMD_DEVICE_OPEN:
+
 			/*
 			 * Open video device node
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			printk(KERN_INFO "DEVICE_OPEN: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
+			printk(KERN_INFO "DEVICE_OPEN: payload guest_phy_addr: %lld\n", req->payload);
+			payload = (struct test_payload *)map_guest_phys(domid, req->payload, PAGE_SIZE);
+			if (!payload)
+				printk("BE DATA is NULL\n");
+			else{
+					printk(KERN_INFO "DEVICE_OPEN: virtual_dev_id:%d actual_fd:%d payload_data1:%d payload_data2:%ld name:%s\n",
+					req->op[0], req->op[1], payload->data1, payload->data2, payload->name);
+				/*printk(KERN_INFO "DEVICE_OPEN: virtual_dev_id:%d actual_fd:%d\n",req->op[0],req->op[1]);*/
+			}
 			req->stat = IPU4_REQ_PROCESSED;
 			break;
 	case IPU4_CMD_DEVICE_CLOSE:
@@ -64,8 +82,56 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op4 - Buffer ID
 			 * op5 - Length of Buffer
 			 */
-			break;
-	case IPU4_CMD_PUT_BUF:
+			 printk("GET_BUF: Mapping buffer\n");
+			 shared_buf = (struct ici_frame_buf_wrapper *)map_guest_phys(domid, req->payload, PAGE_SIZE);
+			 if (!shared_buf) {
+				 printk(KERN_ERR "SOS Failed to map Buffer from UserOS\n");
+				 req->stat = IPU4_REQ_ERROR;
+			 }
+			 data_pages = kcalloc(shared_buf->kframe_info.planes[0].npages, sizeof(struct page *), GFP_KERNEL);
+			 if (data_pages == NULL) {
+				 printk(KERN_ERR "SOS Failed alloc data page set\n");
+				 req->stat = IPU4_REQ_ERROR;
+			 }
+			 printk("Total number of pages:%d\n", shared_buf->kframe_info.planes[0].npages);
+
+			 page_table = (u64 *)map_guest_phys(domid, shared_buf->kframe_info.planes[0].page_table_ref, PAGE_SIZE);
+
+			 if (page_table == NULL) {
+				 printk(KERN_ERR "SOS Failed to map page table\n");
+				 req->stat = IPU4_REQ_ERROR;
+				 break;
+			 }
+
+			 else {
+				 printk("SOS first page %lld\n", page_table[0]);
+				 k = 0;
+				 for (i = 0; i < shared_buf->kframe_info.planes[0].npages; i++) {
+					 pageaddr = map_guest_phys(domid, page_table[i], PAGE_SIZE);
+					 if (pageaddr == NULL) {
+						 printk(KERN_ERR "Cannot map pages from UOS\n");
+						 req->stat = IPU4_REQ_ERROR;
+						 break;
+					 }
+
+					 data_pages[k] = virt_to_page(pageaddr);
+
+					 pixel_data = (int *)kmap(data_pages[k]);
+					 if (k == 0) {
+						printk("Pixel data after 0x%x\n", pixel_data[0]);
+							pixel_data[0] = 0xffffffff;
+						printk("Pixel data after after memset0x%x\n", pixel_data[0]);
+					 }
+					 k++;
+
+
+				 }
+			 }
+
+			 req->stat = IPU4_REQ_PROCESSED;
+
+				break;
+		case IPU4_CMD_PUT_BUF:
 			/* Set Format of a given video node
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
@@ -110,7 +176,7 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 
 	return ret;
 }
-
+#endif
 void intel_ipu4_virtio_create_req(struct ipu4_virtio_req *req,
 			     enum intel_ipu4_virtio_command cmd, int *op)
 {
@@ -162,8 +228,11 @@ void intel_ipu4_virtio_create_req(struct ipu4_virtio_req *req,
 			 * op4 - Buffer ID
 			 * op5 - Length of Buffer
 			 */
+			for (i = 0; i < 3; i++) {
+				req->op[i] = op[i];
+			}
 			break;
-	case IPU4_CMD_PUT_BUF:
+		case IPU4_CMD_PUT_BUF:
 			/* Set Format of a given video node
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.h b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.h
index f3fc29f..25238f2 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.h
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-bridge.h
@@ -9,6 +9,7 @@
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/module.h>
+#include <linux/vhm/acrn_vhm_mm.h>
 
 #include "intel-ipu4-virtio-common.h"
 
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
index fe33bd9..15c5f63 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
@@ -26,8 +26,13 @@ struct ipu4_virtio_req {
 	unsigned int stat;
 	unsigned int cmd;
 	unsigned int op[MAX_NUMBER_OF_OPERANDS];
+	u64 payload;
+};
+struct test_payload {
+	unsigned int data1;
+	long int data2;
+	char name[256];
 };
-
 /*Not used*/
 struct ipu4_virtio_resp {
 	unsigned int resp_id;
-- 
2.7.4

