From 90425347269a38c40967a77e0efa711fb1c74ec8 Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Sun, 4 Aug 2019 06:47:07 +0800
Subject: [PATCH 030/108] net: phy: configure xpcs 2.5G speed mode

Besides setting 2.5G configuration, this patch will also disable
automatic speed mode change. This is due to the 2.5G mode is
using the same functionality as 1G mode except the clock rate is
2.5 times the original rate. Hence, auto-negotiation is disable
to make sure it will only be in 2.5G mode.

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 drivers/net/phy/dwxpcs.c | 27 +++++++++++++++++++++++++++
 include/linux/dwxpcs.h   |  3 +++
 2 files changed, 30 insertions(+)

diff --git a/drivers/net/phy/dwxpcs.c b/drivers/net/phy/dwxpcs.c
index f0003cec6871..ebbefb7ba43d 100644
--- a/drivers/net/phy/dwxpcs.c
+++ b/drivers/net/phy/dwxpcs.c
@@ -16,6 +16,7 @@
 #define XPCS_MDIO_MII_MMD	MDIO_MMD_VEND2
 
 /* MII MMD registers offsets */
+#define MDIO_MII_MMD_CTRL		0x0000	/* SR Control */
 #define MDIO_MII_MMD_DIGITAL_CTRL_1	0x8000	/* Digital Control 1 */
 #define MDIO_MII_MMD_AN_CTRL		0x8001	/* AN Control */
 #define MDIO_MII_MMD_AN_STAT		0x8002	/* AN Status */
@@ -32,6 +33,9 @@
 #define MDIO_MII_MMD_PSE_SYM		0x2
 #define MDIO_MII_MMD_PSE_BOTH		0x3
 
+/* Enable 2.5G Mode */
+#define MDIO_MII_MMD_DIGI_CTRL_1_EN_2_5G_MODE	BIT(2)
+
 /* Automatic Speed Mode Change for MAC side SGMII AN */
 #define MDIO_MII_MMD_DIGI_CTRL_1_MAC_AUTO_SW	BIT(9)
 
@@ -55,6 +59,11 @@
 #define AN_STAT_SGMII_AN_1000MBPS	0x2	/* 1000 Mbps */
 #define AN_STAT_SGMII_AN_LNKSTS		BIT(4)	/* Link Status */
 
+/* SR MII MMD Control defines */
+#define AN_CL37_EN		BIT(12)	/* Enable Clause 37 auto-nego */
+#define SGMII_SPEED_SS13	BIT(13)	/* SGMII speed along with SS6 */
+#define SGMII_SPEED_SS6		BIT(6)	/* SGMII speed along with SS13 */
+
 enum dwxpcs_state_t {
 	__DWXPCS_REMOVING,
 	__DWXPCS_TASK_SCHED,
@@ -95,8 +104,26 @@ static void dwxpcs_init(struct dwxpcs_priv *priv)
 	struct mii_bus *bus = priv->mdiodev->bus;
 	int xpcs_addr = priv->mdiodev->addr;
 	int pcs_mode = priv->pdata->mode;
+	bool speed_2500_en = priv->pdata->speed_2500_en;
 	int phydata;
 
+	if (speed_2500_en) {
+		phydata = xpcs_read(XPCS_MDIO_MII_MMD,
+				    MDIO_MII_MMD_DIGITAL_CTRL_1);
+		phydata |= MDIO_MII_MMD_DIGI_CTRL_1_EN_2_5G_MODE;
+		phydata &= ~MDIO_MII_MMD_DIGI_CTRL_1_MAC_AUTO_SW;
+		xpcs_write(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_DIGITAL_CTRL_1,
+			   phydata);
+
+		phydata = xpcs_read(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_CTRL);
+		phydata &= ~AN_CL37_EN;
+		phydata |= SGMII_SPEED_SS6;
+		phydata &= ~SGMII_SPEED_SS13;
+		xpcs_write(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_CTRL, phydata);
+
+		return;
+	}
+
 	if (pcs_mode == DWXPCS_MODE_SGMII_AN) {
 		/* For AN for SGMII mode, the settings are :-
 		 * 1) VR_MII_AN_CTRL Bit(2:1)[PCS_MODE] = 10b (SGMII AN)
diff --git a/include/linux/dwxpcs.h b/include/linux/dwxpcs.h
index 2082e800ee04..85c2efcecc5a 100644
--- a/include/linux/dwxpcs.h
+++ b/include/linux/dwxpcs.h
@@ -2,6 +2,8 @@
 #ifndef __LINUX_DWXPCS_H
 #define __LINUX_DWXPCS_H
 
+#include <linux/types.h>
+
 enum dwxpcs_pcs_mode {
 	DWXPCS_MODE_SGMII_AN,
 	DWXPCS_MODE_1000BASEX_AN,
@@ -11,6 +13,7 @@ struct dwxpcs_platform_data {
 	int irq;
 	enum dwxpcs_pcs_mode mode;
 	int ext_phy_addr;
+	bool speed_2500_en;
 };
 
 #endif
-- 
2.17.1

