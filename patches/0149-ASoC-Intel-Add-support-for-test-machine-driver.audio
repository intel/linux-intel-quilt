From f30f9cb013d81e7a9d6cc3317894c8f327cf6a83 Mon Sep 17 00:00:00 2001
From: Marcin Janczara <marcinx.janczara@intel.com>
Date: Thu, 21 Feb 2019 10:22:48 +0100
Subject: [PATCH 149/154] ASoC: Intel: Add support for test machine driver

Adding a reference machine driver to allow the driver to run
without a physical codec. It is possible to replace the currently
used machine driver with a test one by reloading the module.

Change-Id: Ia50cb86bf9e8c454914c0bb645d5658335279d65
Signed-off-by: Marcin Janczara
Signed-off-by: Gustaw Lewandowski <gustaw.lewandowski@intel.com>
Reviewed-on:
Reviewed-by: Lewandowski, Gustaw <gustaw.lewandowski@intel.com>
Tested-by: gkblditp <gkblditp@intel.com>
---
 include/sound/soc-acpi-intel-match.h |   2 +
 sound/soc/intel/boards/Kconfig       |  10 ++
 sound/soc/intel/boards/Makefile      |   2 +
 sound/soc/intel/boards/ssp_test.c    | 163 +++++++++++++++++++++++++++
 sound/soc/intel/skylake/skl.c        |  24 +++-
 5 files changed, 199 insertions(+), 2 deletions(-)
 create mode 100644 sound/soc/intel/boards/ssp_test.c

diff --git a/include/sound/soc-acpi-intel-match.h b/include/sound/soc-acpi-intel-match.h
index bb5e1e4ce8bf..61232ed9d193 100644
--- a/include/sound/soc-acpi-intel-match.h
+++ b/include/sound/soc-acpi-intel-match.h
@@ -25,6 +25,8 @@ extern struct snd_soc_acpi_mach snd_soc_acpi_intel_bxt_machines[];
 extern struct snd_soc_acpi_mach snd_soc_acpi_intel_glk_machines[];
 extern struct snd_soc_acpi_mach snd_soc_acpi_intel_cnl_machines[];
 extern struct snd_soc_acpi_mach snd_soc_acpi_intel_icl_machines[];
+extern struct snd_soc_acpi_mach snd_soc_acpi_intel_tgl_machines[];
+extern struct snd_soc_acpi_mach snd_soc_acpi_intel_ssp_test_machine;
 
 /*
  * generic table used for HDA codec-based platforms, possibly with
diff --git a/sound/soc/intel/boards/Kconfig b/sound/soc/intel/boards/Kconfig
index abcb4f0a118d..e03972edec83 100644
--- a/sound/soc/intel/boards/Kconfig
+++ b/sound/soc/intel/boards/Kconfig
@@ -503,6 +503,16 @@ config SND_SOC_INTEL_CNL_RT274_MACH
 
 endif ## SND_SOC_INTEL_CNL
 
+config SND_SOC_INTEL_SSP_TEST_MACH
+	tristate "SSP-TEST mode"
+	depends on MFD_INTEL_LPSS && ACPI
+	help
+	  This adds support for ASoC test machine driver.
+	  This will create a dummy sound card. In order to load test driver
+	  correctly you must also provide the appropriate topology.
+	  Say m if you want to load test driver on demand using module params.
+	  If unsure select "N".
+
 if SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC || SND_SOC_SOF_HDA_AUDIO_CODEC
 
 config SND_SOC_INTEL_SKL_HDA_DSP_GENERIC_MACH
diff --git a/sound/soc/intel/boards/Makefile b/sound/soc/intel/boards/Makefile
index 4d91644a4b14..77455f8d4a50 100644
--- a/sound/soc/intel/boards/Makefile
+++ b/sound/soc/intel/boards/Makefile
@@ -34,6 +34,7 @@ snd-soc-skl_hda_dsp-objs := skl_hda_dsp_generic.o skl_hda_dsp_common.o
 snd-skl_nau88l25_max98357a-objs := skl_nau88l25_max98357a.o
 snd-soc-skl_nau88l25_ssm4567-objs := skl_nau88l25_ssm4567.o
 snd-soc-cnl-rt274-objs := cnl_rt274.o
+snd-soc-ssp-test-objs := ssp_test.o
 
 obj-$(CONFIG_SND_SOC_INTEL_SOF_RT5682_MACH) += snd-soc-sof_rt5682.o
 obj-$(CONFIG_SND_SOC_INTEL_HASWELL_MACH) += snd-soc-sst-haswell.o
@@ -70,3 +71,4 @@ obj-$(CONFIG_SND_SOC_INTEL_SKL_NAU88L25_MAX98357A_MACH) += snd-skl_nau88l25_max9
 obj-$(CONFIG_SND_SOC_INTEL_SKL_NAU88L25_SSM4567_MACH) += snd-soc-skl_nau88l25_ssm4567.o
 obj-$(CONFIG_SND_SOC_INTEL_SKL_HDA_DSP_GENERIC_MACH) += snd-soc-skl_hda_dsp.o
 obj-$(CONFIG_SND_SOC_INTEL_CNL_RT274_MACH) += snd-soc-cnl-rt274.o
+obj-$(CONFIG_SND_SOC_INTEL_SSP_TEST_MACH) += snd-soc-ssp-test.o
diff --git a/sound/soc/intel/boards/ssp_test.c b/sound/soc/intel/boards/ssp_test.c
new file mode 100644
index 000000000000..c7c8711b1d74
--- /dev/null
+++ b/sound/soc/intel/boards/ssp_test.c
@@ -0,0 +1,163 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// ssp_test.c - ASoC Machine Driver for test
+//
+// Copyright (C) 2019, Intel Corporation. All rights reserved.
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <sound/soc-acpi.h>
+#include <sound/soc-acpi-intel-match.h>
+#include "../skylake/skl.h"
+
+static int imr_alloc;
+module_param(imr_alloc, int, 0660);
+MODULE_PARM_DESC(imr_alloc, "imr buffer address needed for FPGA platform");
+
+static u8 ssp_test_dummy_dais[] = { 0, 1, 2, 3, 4, 5 };
+static struct skl_machine_pdata ssp_test_pdata = {
+	.use_tplg_pcm = true,
+	.imr_alloc = &imr_alloc,
+	.dummy_codec = true,
+	.dummy_dais = ssp_test_dummy_dais,
+	.num_dummy_dais = ARRAY_SIZE(ssp_test_dummy_dais),
+};
+
+struct snd_soc_acpi_mach snd_soc_acpi_intel_ssp_test_machine = {
+	.id = "dummy",
+	.drv_name = "ssp_test",
+	.fw_filename = "intel/dsp_fw_test.bin",
+	.pdata = &ssp_test_pdata,
+};
+EXPORT_SYMBOL_GPL(snd_soc_acpi_intel_ssp_test_machine);
+
+static const struct snd_soc_dapm_route ssp_test_map[] = {
+	{"ssp0 Tx", NULL, "loop0_out"},
+	{"loop0_in", NULL, "ssp0 Rx"},
+	{"ssp1 Tx", NULL, "loop1_out"},
+	{"loop1_in", NULL, "ssp1 Rx"},
+	{"ssp2 Tx", NULL, "loop2_out"},
+	{"loop2_in", NULL, "ssp2 Rx"},
+	{"ssp3 Tx", NULL, "loop3_out"},
+	{"loop3_in", NULL, "ssp3 Rx"},
+	{"ssp4 Tx", NULL, "loop4_out"},
+	{"loop4_in", NULL, "ssp4 Rx"},
+	{"ssp5 Tx", NULL, "loop5_out"},
+	{"loop5_in", NULL, "ssp5 Rx"},
+};
+
+static int
+ssp_test_add_dai_link(struct snd_soc_card *card, struct snd_soc_dai_link *link)
+{
+	struct snd_soc_acpi_mach *mach = card->dev->platform_data;
+
+	link->nonatomic = 1;
+	link->platform_name = mach->mach_params.platform;
+
+	return 0;
+}
+
+static struct snd_soc_dai_link ssp_test_dailink[] = {
+	{
+		.name = "SSP0-Codec",
+		.id = 1,
+		.cpu_dai_name = "SSP0 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.ignore_suspend = 1,
+		.no_pcm = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "SSP1-Codec",
+		.id = 2,
+		.cpu_dai_name = "SSP1 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.ignore_suspend = 1,
+		.no_pcm = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "SSP2-Codec",
+		.id = 3,
+		.cpu_dai_name = "SSP2 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.ignore_suspend = 1,
+		.no_pcm = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "SSP3-Codec",
+		.id = 4,
+		.cpu_dai_name = "SSP3 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.ignore_suspend = 1,
+		.no_pcm = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "SSP4-Codec",
+		.id = 5,
+		.cpu_dai_name = "SSP4 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.ignore_suspend = 1,
+		.no_pcm = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+	{
+		.name = "SSP5-Codec",
+		.id = 6,
+		.cpu_dai_name = "SSP5 Pin",
+		.codec_name = "snd-soc-dummy",
+		.codec_dai_name = "snd-soc-dummy-dai",
+		.ignore_suspend = 1,
+		.no_pcm = 1,
+		.dpcm_playback = 1,
+		.dpcm_capture = 1,
+	},
+};
+
+/* SoC card */
+static struct snd_soc_card snd_soc_card_ssp_test = {
+	.name = "ssp-test-audio",
+	.dai_link = ssp_test_dailink,
+	.num_links = ARRAY_SIZE(ssp_test_dailink),
+	.dapm_routes = ssp_test_map,
+	.num_dapm_routes = ARRAY_SIZE(ssp_test_map),
+	.add_dai_link = ssp_test_add_dai_link,
+	.fully_routed = true,
+};
+
+static int snd_ssp_test_probe(struct platform_device *pdev)
+{
+	snd_soc_card_ssp_test.dev = &pdev->dev;
+	return devm_snd_soc_register_card(&pdev->dev, &snd_soc_card_ssp_test);
+}
+
+static const struct platform_device_id ssp_test_board_ids[] = {
+	{ .name = "ssp_test" },
+	{ }
+};
+
+static struct platform_driver snd_ssp_test_driver = {
+	.driver = {
+		.name = "ssp_test",
+		.pm = &snd_soc_pm_ops,
+	},
+	.probe = snd_ssp_test_probe,
+	.id_table = ssp_test_board_ids,
+};
+
+module_platform_driver(snd_ssp_test_driver);
+
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:ssp_test");
diff --git a/sound/soc/intel/skylake/skl.c b/sound/soc/intel/skylake/skl.c
index 4c6da849a8a2..15ae1e59b726 100644
--- a/sound/soc/intel/skylake/skl.c
+++ b/sound/soc/intel/skylake/skl.c
@@ -39,6 +39,11 @@ MODULE_PARM_DESC(pci_binding, "PCI binding (0=auto, 1=only legacy, 2=only asoc")
 static char *tplg_name;
 module_param(tplg_name, charp, 0444);
 MODULE_PARM_DESC(tplg_name, "Name of topology binary file");
+static bool is_dummy_driver;
+#if IS_ENABLED(CONFIG_SND_SOC_INTEL_SSP_TEST_MACH)
+module_param(is_dummy_driver, bool, 0444);
+MODULE_PARM_DESC(is_dummy_driver, "Enable use of test driver (Default: false)");
+#endif
 
 /*
  * initialize the PCI registers
@@ -557,13 +562,29 @@ static int skl_find_machine(struct skl_dev *skl, void *driver_data)
 	if (!mach) {
 		dev_dbg(bus->dev, "No matching I2S machine driver found\n");
 		mach = skl_find_hda_machine(skl, driver_data);
-		if (!mach) {
+		if (!mach && !is_dummy_driver) {
 			dev_err(bus->dev, "No matching machine driver found\n");
 			return -ENODEV;
 		}
 	}
 
 out:
+#if IS_ENABLED(CONFIG_SND_SOC_INTEL_SSP_TEST_MACH)
+	if (is_dummy_driver) {
+		struct snd_soc_acpi_mach *temp_mach = mach;
+
+		mach = &snd_soc_acpi_intel_ssp_test_machine;
+
+		if (temp_mach)
+			mach->fw_filename = temp_mach->fw_filename;
+
+		pdata = mach->pdata;
+	}
+#endif
+
+	if (!mach)
+		return -ENODEV;
+
 	skl->mach = mach;
 	skl->fw_name = mach->fw_filename;
 
@@ -1121,7 +1142,6 @@ static int skl_probe(struct pci_dev *pci,
 
 	pci_set_drvdata(skl->pci, bus);
 
-
 	err = skl_find_machine(skl, (void *)pci_id->driver_data);
 	if (err < 0) {
 		dev_err(bus->dev, "skl_find_machine failed with err: %d\n", err);
-- 
2.17.1

