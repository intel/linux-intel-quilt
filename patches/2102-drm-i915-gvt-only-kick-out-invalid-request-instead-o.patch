From f6c4d6df7d82cc66491869467af476c101551d38 Mon Sep 17 00:00:00 2001
From: Xinyun Liu <xinyun.liu@intel.com>
Date: Fri, 31 Aug 2018 10:02:45 +0800
Subject: [PATCH 2102/2345] drm/i915/gvt: only kick out invalid request instead
 of reset execlist

When GVT finds a request from DomU causes GPU hang, it needs to kick out
this bad request and trigger DomU do GPU reset. The execlist csb
information should be kept for DomU to process the request within
itself. After DomU cleaned up the request and triggered GPU engine HW
reset, GVT will reset the vGPU which includes the execlist.

V3: add comments
V2: not reset csb pointer before guest do gpu reset

Signed-off-by: Xinyun Liu <xinyun.liu@intel.com>
Reviewed-by: He Min <min.he@intel.com>
Reviewed-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/gpu/drm/i915/gvt/execlist.c  | 3 +--
 drivers/gpu/drm/i915/gvt/execlist.h  | 1 +
 drivers/gpu/drm/i915/gvt/scheduler.c | 9 +++++++--
 3 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/execlist.c b/drivers/gpu/drm/i915/gvt/execlist.c
index 9d74080..fa1c693 100644
--- a/drivers/gpu/drm/i915/gvt/execlist.c
+++ b/drivers/gpu/drm/i915/gvt/execlist.c
@@ -47,7 +47,6 @@
 		((a)->lrca == (b)->lrca))
 
 bool gvt_shadow_wa_ctx = false;
-static void clean_workloads(struct intel_vgpu *vgpu, unsigned long engine_mask);
 
 static int context_switch_events[] = {
 	[RCS] = RCS_AS_CONTEXT_SWITCH,
@@ -839,7 +838,7 @@ static void init_vgpu_execlist(struct intel_vgpu *vgpu, int ring_id)
 	vgpu_vreg(vgpu, ctx_status_ptr_reg) = ctx_status_ptr.dw;
 }
 
-static void clean_workloads(struct intel_vgpu *vgpu, unsigned long engine_mask)
+void clean_workloads(struct intel_vgpu *vgpu, unsigned long engine_mask)
 {
 	struct drm_i915_private *dev_priv = vgpu->gvt->dev_priv;
 	struct intel_engine_cs *engine;
diff --git a/drivers/gpu/drm/i915/gvt/execlist.h b/drivers/gpu/drm/i915/gvt/execlist.h
index d2348b4..f20284f8 100644
--- a/drivers/gpu/drm/i915/gvt/execlist.h
+++ b/drivers/gpu/drm/i915/gvt/execlist.h
@@ -182,4 +182,5 @@ int intel_vgpu_submit_execlist(struct intel_vgpu *vgpu, int ring_id);
 void intel_vgpu_reset_execlist(struct intel_vgpu *vgpu,
 		unsigned long engine_mask);
 
+void clean_workloads(struct intel_vgpu *vgpu, unsigned long engine_mask);
 #endif /*_GVT_EXECLIST_H_*/
diff --git a/drivers/gpu/drm/i915/gvt/scheduler.c b/drivers/gpu/drm/i915/gvt/scheduler.c
index be910c9..0d1c92f 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.c
+++ b/drivers/gpu/drm/i915/gvt/scheduler.c
@@ -704,8 +704,13 @@ static void complete_current_workload(struct intel_gvt *gvt, int ring_id)
 
 	mutex_lock(&gvt->lock);
 	list_del_init(&workload->list);
-	if (workload->status == -EIO)
-		intel_vgpu_reset_execlist(vgpu, 1 << ring_id);
+	if (workload->status == -EIO) {
+		/* Once a request caused HW GPU hang, the pending workloads
+		 * from guests should be cleaned up here. GVT will notify
+		 * guests to do the vGPU reset job.
+		 */
+		clean_workloads(vgpu, 1 << ring_id);
+	}
 
 	workload->complete(workload);
 
-- 
2.7.4

