From c58ec368cffaa00611c6f9d46954c57cc779e621 Mon Sep 17 00:00:00 2001
From: Cezary Rojewski <cezary.rojewski@intel.com>
Date: Fri, 26 Oct 2018 15:48:27 +0200
Subject: [PATCH 136/165] ASoC: Intel: Skylake: Generic firmware recovery on
 IPC timeout.

Whenever IPC routine returns an error, there are steps which driver
should take depending on error code returned. Timeout is the most basic
case and recommendation is to simply reload firmware.

Change-Id: I674dd2bc35fab2473ee40daa77f18bc57c5a567c
Signed-off-by: PawelX Dogiel <pawelx.dogiel@intel.com>
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>

Reviewed-by: Lewandowski, Gustaw <gustaw.lewandowski@intel.com>
---
 sound/soc/intel/skylake/skl-debug.c   |  4 +-
 sound/soc/intel/skylake/skl-sst-ipc.c | 53 ++++++++++++++++++++-------
 sound/soc/intel/skylake/skl-sst-ipc.h |  2 +
 3 files changed, 43 insertions(+), 16 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index 69085ac0b9d9..3631db94f2ad 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -238,11 +238,11 @@ static ssize_t mod_control_write(struct file *file,
 
 	default:
 		if (mbsz)
-			retval = sst_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
+			retval = skl_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
 				mod_set_get->mailbx, mbsz, NULL, NULL);
 
 		else
-			retval = sst_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
+			retval = skl_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
 				NULL, 0, NULL, NULL);
 
 		break;
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index a472b333f89f..d3de1d281b56 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -858,6 +858,31 @@ void skl_ipc_free(struct sst_generic_ipc *ipc)
 	sst_ipc_fini(ipc);
 }
 
+int skl_ipc_tx_message_wait(struct sst_generic_ipc *ipc, u64 header,
+		void *tx_data, size_t tx_bytes, void *rx_data, size_t *rx_bytes)
+{
+	struct skl_sst *ctx = container_of(ipc, struct skl_sst, ipc);
+	int ret;
+
+	ret = sst_ipc_tx_message_wait(ipc, header, tx_data, tx_bytes,
+		rx_data, rx_bytes);
+
+	if (ret == -ETIMEDOUT) {
+		ctx->enable_miscbdcge(ipc->dev, false);
+		ctx->clock_power_gating(ipc->dev, false);
+
+		ret = ctx->dsp_ops->init_fw(ipc->dev, ctx);
+
+		ctx->enable_miscbdcge(ipc->dev, true);
+		ctx->clock_power_gating(ipc->dev, true);
+
+		dev_warn(ipc->dev, "Recover from IPC timeout: %d\n", ret);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(skl_ipc_tx_message_wait);
+
 int skl_ipc_create_pipeline(struct sst_generic_ipc *ipc,
 		u16 ppl_mem_size, u8 ppl_type, u8 instance_id, u8 lp_mode)
 {
@@ -875,7 +900,7 @@ int skl_ipc_create_pipeline(struct sst_generic_ipc *ipc,
 	header.extension = IPC_PPL_LP_MODE(lp_mode);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: create pipeline fail, err: %d\n", ret);
 		return ret;
@@ -897,7 +922,7 @@ int skl_ipc_delete_pipeline(struct sst_generic_ipc *ipc, u8 instance_id)
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: delete pipeline failed, err %d\n", ret);
 		return ret;
@@ -921,7 +946,7 @@ int skl_ipc_set_pipeline_state(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_PPL_STATE(state);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: set pipeline state failed, err: %d\n", ret);
 		return ret;
@@ -944,7 +969,7 @@ skl_ipc_save_pipeline(struct sst_generic_ipc *ipc, u8 instance_id, int dma_id)
 
 	header.extension = IPC_DMA_ID(dma_id);
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: save pipeline failed, err: %d\n", ret);
 		return ret;
@@ -966,7 +991,7 @@ int skl_ipc_restore_pipeline(struct sst_generic_ipc *ipc, u8 instance_id)
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: restore  pipeline failed, err: %d\n", ret);
 		return ret;
@@ -991,7 +1016,7 @@ int skl_ipc_set_dx(struct sst_generic_ipc *ipc, u8 instance_id,
 
 	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
 			 header.primary, header.extension);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header,
 				dx, sizeof(*dx), NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: set dx failed, err %d\n", ret);
@@ -1028,7 +1053,7 @@ int skl_ipc_init_instance(struct sst_generic_ipc *ipc,
 
 	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
 			 header.primary, header.extension);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, param_data,
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, param_data,
 			msg->param_data_size, NULL, NULL);
 
 	if (ret < 0) {
@@ -1061,7 +1086,7 @@ int skl_ipc_bind_unbind(struct sst_generic_ipc *ipc,
 
 	dev_dbg(ipc->dev, "In %s hdr=%x ext=%x\n", __func__, header.primary,
 			 header.extension);
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: bind/unbind failed\n");
 		return ret;
@@ -1089,7 +1114,7 @@ int skl_ipc_load_modules(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_GLB_TYPE(IPC_GLB_LOAD_MULTIPLE_MODS);
 	header.primary |= IPC_LOAD_MODULE_CNT(module_cnt);
 
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, data,
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, data,
 				(sizeof(u16) * module_cnt), NULL, NULL);
 	if (ret < 0)
 		dev_err(ipc->dev, "ipc: load modules failed :%d\n", ret);
@@ -1110,7 +1135,7 @@ int skl_ipc_unload_modules(struct sst_generic_ipc *ipc, u8 module_cnt,
 	header.primary |= IPC_GLB_TYPE(IPC_GLB_UNLOAD_MULTIPLE_MODS);
 	header.primary |= IPC_LOAD_MODULE_CNT(module_cnt);
 
-	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, data,
+	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, data,
 				(sizeof(u16) * module_cnt), NULL, NULL);
 	if (ret < 0)
 		dev_err(ipc->dev, "ipc: unload modules failed :%d\n", ret);
@@ -1150,7 +1175,7 @@ int skl_ipc_set_large_config(struct sst_generic_ipc *ipc,
 			header.primary, header.extension);
 		dev_dbg(ipc->dev, "transmitting offset: %#x, size: %#x\n",
 			(unsigned)data_offset, (unsigned)tx_size);
-		ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
+		ret = skl_ipc_tx_message_wait(ipc, *ipc_header,
 					  ((char *)param) + data_offset,
 					  tx_size, NULL, NULL);
 		if (ret < 0) {
@@ -1218,7 +1243,7 @@ int skl_ipc_get_large_config(struct sst_generic_ipc *ipc,
 		if (rx_bytes != NULL)
 			*rx_bytes = rx_size;
 
-		ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
+		ret = skl_ipc_tx_message_wait(ipc, *ipc_header,
 			((char *)txparam), tx_bytes,
 			((char *)param) + data_offset, rx_bytes);
 
@@ -1283,8 +1308,8 @@ int skl_sst_ipc_load_library(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_MOD_ID(dma_id);
 
 	if (wait)
-		ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
-					NULL, 0, NULL, NULL);
+		ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0,
+					NULL, NULL);
 	else
 		ret = sst_ipc_tx_message_nowait(ipc, *ipc_header, NULL, 0);
 
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index aba4ebd655f9..5bca71492aa6 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -196,6 +196,8 @@ struct skl_ipc_d0ix_msg {
 
 irqreturn_t skl_dsp_irq_thread_handler(int irq, void *context);
 
+int skl_ipc_tx_message_wait(struct sst_generic_ipc *ipc, u64 header,
+	void *tx_data, size_t tx_bytes, void *rx_data, size_t *rx_bytes);
 int skl_ipc_create_pipeline(struct sst_generic_ipc *sst_ipc,
 		u16 ppl_mem_size, u8 ppl_type, u8 instance_id, u8 lp_mode);
 
-- 
2.17.1

