From da6d5ec97f434e436a28f36e3a5df1b58ca0df5a Mon Sep 17 00:00:00 2001
From: "Diwakar, Praveen" <praveen.diwakar@intel.com>
Date: Tue, 6 Jun 2017 21:04:21 +0530
Subject: [PATCH 0745/2302] ASoC: Intel: Skylake: Create SSP BE dais
 dynamically

This patch creates BE SSP dai dynamically, by getting SSP
link information from NHLT.

Change-Id: I2b6e45125a3fbd1e7f155efe86b5fb1a983c0f41
Signed-off-by: Diwakar, Praveen <praveen.diwakar@intel.com>
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Tested-by: Sm, Bhadur A <bhadur.a.sm@intel.com>
---
 sound/soc/intel/skylake/skl-nhlt.c |  36 ++++++++
 sound/soc/intel/skylake/skl-pcm.c  | 177 ++++++++++++-------------------------
 sound/soc/intel/skylake/skl.h      |   7 ++
 3 files changed, 100 insertions(+), 120 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-nhlt.c b/sound/soc/intel/skylake/skl-nhlt.c
index 48eb5e2..fd17dba 100644
--- a/sound/soc/intel/skylake/skl-nhlt.c
+++ b/sound/soc/intel/skylake/skl-nhlt.c
@@ -279,3 +279,39 @@ void skl_nhlt_remove_sysfs(struct skl *skl)
 
 	sysfs_remove_file(&dev->kobj, &dev_attr_platform_id.attr);
 }
+
+static bool is_vbus_id_exist(struct skl *skl, int vbus_id)
+{
+	bool ret = false;
+	int i;
+
+	for (i = 0; i < skl->nhlt->endpoint_count; i++) {
+		if (vbus_id == skl->grp_cnt.vbus_id[i])
+			return true;
+	}
+	return ret;
+}
+
+/*
+ * This function gets endpoint count and vbus_id for the specific link type
+ *  passed as parameter.
+ */
+void skl_nhlt_get_ep_cnt(struct skl *skl, int link_type)
+{
+	struct nhlt_endpoint *epnt = (struct nhlt_endpoint *) skl->nhlt->desc;
+	int i;
+
+	skl->grp_cnt.cnt = 0;
+	memset(skl->grp_cnt.vbus_id, 0xff,
+		(sizeof(int) * skl->nhlt->endpoint_count));
+
+	for (i = 0; i < skl->nhlt->endpoint_count; i++) {
+
+		if (epnt->linktype == link_type) {
+			if (!is_vbus_id_exist(skl, epnt->virtual_bus_id))
+				skl->grp_cnt.vbus_id[skl->grp_cnt.cnt++] =
+						epnt->virtual_bus_id;
+		}
+		epnt = (struct nhlt_endpoint *)((u8 *)epnt + epnt->length);
+	}
+}
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 6fa2ad8..dfd80fc 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1093,126 +1093,6 @@ static struct snd_soc_dai_driver skl_fe_dai[] = {
 /* BE cpu dais and compress dais*/
 static struct snd_soc_dai_driver skl_platform_dai[] = {
 {
-	.name = "SSP0 Pin",
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.stream_name = "ssp0 Tx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.stream_name = "ssp0 Rx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-},
-{
-	.name = "SSP1 Pin",
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.stream_name = "ssp1 Tx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.stream_name = "ssp1 Rx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-},
-{
-	.name = "SSP2 Pin",
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.stream_name = "ssp2 Tx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.stream_name = "ssp2 Rx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-},
-{
-	.name = "SSP3 Pin",
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.stream_name = "ssp3 Tx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.stream_name = "ssp3 Rx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-},
-{
-	.name = "SSP4 Pin",
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.stream_name = "ssp4 Tx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.stream_name = "ssp4 Rx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-},
-{
-	.name = "SSP5 Pin",
-	.ops = &skl_be_ssp_dai_ops,
-	.playback = {
-		.stream_name = "ssp5 Tx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-	.capture = {
-		.stream_name = "ssp5 Rx",
-		.channels_min = HDA_MONO,
-		.channels_max = HDA_8_CH,
-		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE,
-	},
-},
-{
 	.name = "iDisp1 Pin",
 	.ops = &skl_link_dai_ops,
 	.playback = {
@@ -1939,6 +1819,24 @@ static const struct snd_soc_component_driver skl_component = {
 	.num_controls	= ARRAY_SIZE(skl_controls),
 };
 
+static struct snd_soc_dai_driver ssp_dai_info = {
+	.ops = &skl_be_ssp_dai_ops,
+	.playback = {
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			   SNDRV_PCM_FMTBIT_S32_LE,
+	},
+	.capture = {
+		.channels_min = HDA_MONO,
+		.channels_max = HDA_8_CH,
+		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			   SNDRV_PCM_FMTBIT_S32_LE,
+	},
+};
+
 /*
  * mod param to decide during platform registration whether
  * if FE dai and FE dai links will come from topology or not.
@@ -1955,10 +1853,18 @@ int skl_platform_register(struct device *dev)
 	int skl_num_fe_dai = ARRAY_SIZE(skl_fe_dai);
 	int skl_num_dai = ARRAY_SIZE(skl_platform_dai);
 	struct snd_soc_dai_driver *skl_dais;
+	int i, index;
 
 	INIT_LIST_HEAD(&skl->ppl_list);
 	INIT_LIST_HEAD(&skl->bind_list);
 
+	skl->grp_cnt.vbus_id = devm_kcalloc(dev, skl->nhlt->endpoint_count,
+						sizeof(int), GFP_KERNEL);
+	if (!skl->grp_cnt.vbus_id)
+		return -ENOMEM;
+
+	skl_nhlt_get_ep_cnt(skl, NHLT_LINK_SSP);
+
 	ret = snd_soc_register_platform(dev, &skl_platform_drv);
 	if (ret) {
 		dev_err(dev, "soc platform registration failed %d\n", ret);
@@ -1967,6 +1873,9 @@ int skl_platform_register(struct device *dev)
 
 	skl_total_dai = (dynamic_dai ? skl_num_dai : skl_num_fe_dai +
 			 skl_num_dai);
+
+	skl_total_dai += skl->grp_cnt.cnt;
+
 	skl_dais = devm_kcalloc(dev, skl_total_dai, sizeof(*skl_dais),
 				GFP_KERNEL);
 	if (!skl_dais) {
@@ -1976,6 +1885,34 @@ int skl_platform_register(struct device *dev)
 
 	memcpy(skl_dais, skl_platform_dai, sizeof(skl_platform_dai));
 
+	for (i = 0; i < skl->grp_cnt.cnt; i++) {
+		index = skl_num_dai + i;
+
+		memcpy(&skl_dais[index], &ssp_dai_info, sizeof(ssp_dai_info));
+
+		skl_dais[index].name = kasprintf(GFP_KERNEL, "SSP%d Pin",
+				skl->grp_cnt.vbus_id[i]);
+		if (!skl_dais[index].name)
+			return -ENOMEM;
+
+		skl_dais[index].playback.stream_name = kasprintf(GFP_KERNEL,
+				"ssp%d Tx", skl->grp_cnt.vbus_id[i]);
+		if (!skl_dais[index].playback.stream_name) {
+			kfree(skl_dais[index].name);
+			return -ENOMEM;
+		}
+
+		skl_dais[index].capture.stream_name = kasprintf(GFP_KERNEL,
+				"ssp%d Rx", skl->grp_cnt.vbus_id[i]);
+		if (!skl_dais[index].capture.stream_name) {
+			kfree(skl_dais[index].name);
+			kfree(skl_dais[index].playback.stream_name);
+			return -ENOMEM;
+		}
+	}
+
+	skl_num_dai +=  skl->grp_cnt.cnt;
+
 	if (!dynamic_dai)
 		memcpy(&skl_dais[skl_num_dai], skl_fe_dai,
 						sizeof(skl_fe_dai));
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index b6cb5c5..a6bf053 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -46,6 +46,11 @@ struct skl_dsp_resource {
 
 struct skl_debug;
 
+struct ep_group_cnt {
+	int cnt;
+	int *vbus_id;
+};
+
 struct skl {
 	struct hdac_ext_bus ebus;
 	struct pci_dev *pci;
@@ -77,6 +82,7 @@ struct skl {
 	struct skl_module **modules;
 	bool nhlt_override;
 	bool mod_set_get_status;
+	struct ep_group_cnt grp_cnt;
 };
 
 #define skl_to_ebus(s)	(&(s)->ebus)
@@ -110,6 +116,7 @@ int skl_platform_unregister(struct device *dev);
 int skl_platform_register(struct device *dev);
 
 int skl_get_nhlt_version(struct device *dev);
+void skl_nhlt_get_ep_cnt(struct skl *skl, int link_type);
 struct nhlt_acpi_table *skl_nhlt_init(struct device *dev);
 void skl_nhlt_free(struct nhlt_acpi_table *addr);
 struct nhlt_specific_cfg *skl_get_ep_blob(struct skl *skl, u32 instance,
-- 
2.7.4

