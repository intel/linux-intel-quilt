From 57b728668eafa707d82934cfaff072997a6e2465 Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Tue, 4 Feb 2020 14:32:48 +0800
Subject: [PATCH 29/31] net: stmmac: add xPCS path latency for timestamp
 correction

The Design Ware physical Coding Sublayer (xPCS) provides the tx and rx
path latency values in nano seconds which can be read from the register.
The path latency values varies on different link speed. This patch will
provides the value directly without the need of reading the register
on-the-fly.

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 24 ++++++++++++-------
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  8 +++++++
 include/linux/stmmac.h                        |  9 +++++++
 3 files changed, 33 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 198f63825778..a5d8a0fd7277 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -445,16 +445,20 @@ void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
 	if (found) {
 		switch (priv->speed) {
 		case SPEED_10:
-			adjust = priv->plat->phy_tx_latency_10;
+			adjust += priv->plat->phy_tx_latency_10;
+			adjust += priv->plat->xpcs_tx_latency_10;
 			break;
 		case SPEED_100:
-			adjust = priv->plat->phy_tx_latency_100;
+			adjust += priv->plat->phy_tx_latency_100;
+			adjust += priv->plat->xpcs_tx_latency_100;
 			break;
 		case SPEED_1000:
-			adjust = priv->plat->phy_tx_latency_1000;
+			adjust += priv->plat->phy_tx_latency_1000;
+			adjust += priv->plat->xpcs_tx_latency_1000;
 			break;
 		case SPEED_2500:
-			adjust = priv->plat->phy_tx_latency_2500;
+			adjust += priv->plat->phy_tx_latency_2500;
+			adjust += priv->plat->xpcs_tx_latency_2500;
 			break;
 		}
 
@@ -492,16 +496,20 @@ void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
 
 		switch (priv->speed) {
 		case SPEED_10:
-			adjust = priv->plat->phy_rx_latency_10;
+			adjust += priv->plat->phy_rx_latency_10;
+			adjust += priv->plat->xpcs_rx_latency_10;
 			break;
 		case SPEED_100:
-			adjust = priv->plat->phy_rx_latency_100;
+			adjust += priv->plat->phy_rx_latency_100;
+			adjust += priv->plat->xpcs_rx_latency_100;
 			break;
 		case SPEED_1000:
-			adjust = priv->plat->phy_rx_latency_1000;
+			adjust += priv->plat->phy_rx_latency_1000;
+			adjust += priv->plat->xpcs_rx_latency_1000;
 			break;
 		case SPEED_2500:
-			adjust = priv->plat->phy_rx_latency_2500;
+			adjust += priv->plat->phy_rx_latency_2500;
+			adjust += priv->plat->xpcs_rx_latency_2500;
 			break;
 		}
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 385078def255..99123ca5cc10 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -70,6 +70,14 @@ static void ehl_sgmii_path_latency_data(struct plat_stmmacenet_data *plat)
 	plat->phy_rx_latency_10 = 5902;
 	plat->phy_rx_latency_100 = 821;
 	plat->phy_rx_latency_1000 = 343;
+
+	/* xPCS TX and RX latency (ns) */
+	plat->xpcs_tx_latency_10 = 856;
+	plat->xpcs_tx_latency_100 = 136;
+	plat->xpcs_tx_latency_1000 = 56;
+	plat->xpcs_rx_latency_10 = 7084;
+	plat->xpcs_rx_latency_100 = 784;
+	plat->xpcs_rx_latency_1000 = 160;
 }
 
 static void ehl_rgmii_path_latency_data(struct plat_stmmacenet_data *plat)
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 3cf6668f104e..461eaccc766a 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -245,5 +245,14 @@ struct plat_stmmacenet_data {
 	u64 phy_rx_latency_1000;
 	u64 phy_rx_latency_100;
 	u64 phy_rx_latency_10;
+	/* xPCS TX and RX latency (ns) */
+	u64 xpcs_tx_latency_2500;
+	u64 xpcs_tx_latency_1000;
+	u64 xpcs_tx_latency_100;
+	u64 xpcs_tx_latency_10;
+	u64 xpcs_rx_latency_2500;
+	u64 xpcs_rx_latency_1000;
+	u64 xpcs_rx_latency_100;
+	u64 xpcs_rx_latency_10;
 };
 #endif
-- 
2.17.1

