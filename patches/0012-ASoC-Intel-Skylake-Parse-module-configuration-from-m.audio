From a5244a80bee5a91d6762f30515cb213e1b4a182b Mon Sep 17 00:00:00 2001
From: Piotr Maziarz <piotrx.maziarz@intel.com>
Date: Fri, 10 May 2019 16:28:07 +0200
Subject: [PATCH 012/163] ASoC: Intel: Skylake: Parse module configuration from
 manifest

Module configuration contains valuable information about module,
primarly obs, ibs and is_bytes.

Change-Id: I9b4b452010a508084e1ed2f63bfc7c9a519ba3c1
Signed-off-by: Piotr Maziarz <piotrx.maziarz@intel.com>
---
 sound/soc/intel/skylake/skl-sst-dsp.h   | 13 +++++++++
 sound/soc/intel/skylake/skl-sst-utils.c | 36 ++++++++++++++++++++++---
 2 files changed, 46 insertions(+), 3 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index ecd33f1d0064..1295ca1cc5c3 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -166,6 +166,17 @@ struct skl_dsp_loader_ops {
 				 int stream_tag);
 };
 
+struct adsp_module_config {
+	u32 par[4];		/* module parameters */
+	u32 is_bytes;		/* actual size of instance .bss (bytes) */
+	u32 cps;		/* cycles per second */
+	u32 ibs;		/* input buffer size (bytes) */
+	u32 obs;		/* output buffer size (bytes) */
+	u32 module_flags;	/* flags, res for future use */
+	u32 cpc;		/* cycles per single run */
+	u32 obls;		/* output block size, res for future use */
+} __packed;
+
 #define MAX_INSTANCE_BUFF 2
 
 struct uuid_module {
@@ -175,6 +186,8 @@ struct uuid_module {
 	int max_instance;
 	u64 pvt_id[MAX_INSTANCE_BUFF];
 	int *instance_id;
+	struct adsp_module_config *configs;
+	int num_configs;
 
 	struct list_head list;
 };
diff --git a/sound/soc/intel/skylake/skl-sst-utils.c b/sound/soc/intel/skylake/skl-sst-utils.c
index ff24d57ebbda..d0f750eb1f9c 100644
--- a/sound/soc/intel/skylake/skl-sst-utils.c
+++ b/sound/soc/intel/skylake/skl-sst-utils.c
@@ -235,6 +235,7 @@ int snd_skl_parse_manifest(struct sst_dsp *ctx, const struct firmware *fw,
 	struct uuid_module *module;
 	struct firmware stripped_fw;
 	unsigned int safe_file;
+	struct adsp_module_config *mod_configs;
 
 	/* Get the FW pointer to derive ADSP header */
 	stripped_fw.data = fw->data;
@@ -268,13 +269,24 @@ int snd_skl_parse_manifest(struct sst_dsp *ctx, const struct firmware *fw,
 
 	mod_entry = (struct adsp_module_entry *)
 		(buf + offset + adsp_hdr->len);
+	mod_configs = (struct adsp_module_config *)
+		(buf + safe_file);
 
 	/*
-	 * Read the UUID(GUID) from FW Manifest.
+	 * Read modules data from FW Manifest.
 	 *
 	 * The 16 byte UUID format is: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX
-	 * Populate the UUID table to store module_id and loadable flags
-	 * for the module.
+	 * Populate the table to store module_id, loadable flags and
+	 * configurations array for the module.
+	 *
+	 * Manifest structure:
+	 * header
+	 * N * module entry (N specified in header)
+	 * M * module configuration
+	 *
+	 * Each module entry can have 0 or more configurations. Configurations
+	 * are linked to entries by offset and counter stored in entry
+	 * (offset + conter <= M).
 	 */
 
 	for (i = 0; i < num_entry; i++, mod_entry++) {
@@ -296,6 +308,24 @@ int snd_skl_parse_manifest(struct sst_dsp *ctx, const struct firmware *fw,
 			return -ENOMEM;
 		}
 
+		if (mod_entry->cfg_count) {
+			size = sizeof(*mod_configs) * (mod_entry->cfg_offset
+				+ mod_entry->cfg_count);
+			if (stripped_fw.size <= safe_file + size) {
+				dev_err(ctx->dev, "Small fw file size, no space for module cfgs\n");
+				return -EINVAL;
+			}
+			module->num_configs = mod_entry->cfg_count;
+			size = sizeof(*mod_configs) * mod_entry->cfg_count;
+			module->configs = devm_kmemdup(ctx->dev,
+					&mod_configs[mod_entry->cfg_offset],
+					size, GFP_KERNEL);
+			if (!module->configs) {
+				list_del_init(&skl->module_list);
+				return -ENOMEM;
+			}
+		}
+
 		list_add_tail(&module->list, &skl->module_list);
 
 		dev_dbg(ctx->dev,
-- 
2.17.1

