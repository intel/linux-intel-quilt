From 7e998c548ada39e5f0d9b4c65f51bf24c826c421 Mon Sep 17 00:00:00 2001
From: icg_intg <icg_intg@intel.com>
Date: Wed, 20 Jun 2018 15:30:09 +0800
Subject: [PATCH 1976/2328] media: intel-ipu4: css:
 scci_IPU4_master_20180615_0539 fw release

Message for Open Source:
New firmware css release.

Message for Internal:
[Feature]New firmware css release.
[Root Cause/Changes]
FW_Manifest_ID: b8a74ad1e0c34f6f858a9db9946c4585dabac0de
FW_Build_Branch: IPU4_master
FW_Build_Topic: auto_merge_queue
library version: commit-id a65f7ca
FW Bundle patch number of this release :  336207
FW tag : scci_IPU4_master_20180615_0539

Change-Id: I7be14cb9204d3a83d9d8a29c2afc22aecdb896c7
Depends-on: Iea7a4d364f4030779ab767f3792fd35f6337352b
Depends-on: Id13181b2dee1c2f3d67c285c3ab2a8b3d49369f9
Signed-off-by: icg_intg <icg_intg@intel.com>
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 .../pci/intel/ipu4/ipu4-css/Makefile.ipu4isys_inc  |  1 +
 .../pci/intel/ipu4/ipu4-css/Makefile.ipu4psys_inc  |  1 +
 .../intel/ipu4/ipu4-css/ia_css_fw_pkg_release.h    |  2 +-
 .../lib2600/isysapi/interface/ia_css_isysapi.h     |  7 ++
 .../lib2600/isysapi/src/ia_css_isys_public.c       | 18 ++++
 .../lib2600/regmem/interface/regmem_access.h       |  9 ++
 .../lib2600/syscom/interface/ia_css_syscom.h       | 38 +++++++++
 .../ipu4-css/lib2600/syscom/src/ia_css_syscom.c    | 96 +++++++++++++++++++---
 .../lib2600/syscom/src/ia_css_syscom_config_fw.h   | 18 ++++
 .../intel/ipu4/ipu4-css/lib2600/syscom/syscom.mk   |  1 +
 .../DSS_V2_program_group/ia_css_fw_pkg_release.h   |  2 +-
 .../lib2600psys/lib/psys_server/psys_server.mk     |  1 +
 .../psysapi/device/interface/ia_css_psys_device.h  | 13 +++
 .../lib/psysapi/device/src/ia_css_psys_device.c    |  8 ++
 .../lib/regmem/interface/regmem_access.h           |  9 ++
 .../lib/syscom/interface/ia_css_syscom.h           | 38 +++++++++
 .../lib2600psys/lib/syscom/src/ia_css_syscom.c     | 96 +++++++++++++++++++---
 .../lib/syscom/src/ia_css_syscom_config_fw.h       | 18 ++++
 .../ipu4/ipu4-css/lib2600psys/lib/syscom/syscom.mk |  1 +
 19 files changed, 355 insertions(+), 22 deletions(-)

diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4isys_inc b/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4isys_inc
index 875ebf4..48a4ede 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4isys_inc
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4isys_inc
@@ -19,6 +19,7 @@ IPU_ISYSLIB_INC = \
 	-I$(IPU_ISYSLIB_ROOT)/regmem/src \
 	-I$(IPU_ISYSLIB_ROOT)/support \
 	-I$(IPU_ISYSLIB_ROOT)/syscom/interface \
+	-I$(IPU_ISYSLIB_ROOT)/syscom/src \
 	-I$(IPU_ISYSLIB_ROOT)/trace/interface \
 	-I$(IPU_ISYSLIB_ROOT)/utils/system_defs/ \
 	-I$(IPU_ISYSLIB_ROOT)/vied \
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4psys_inc b/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4psys_inc
index 86b3aba..abc6147 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4psys_inc
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/Makefile.ipu4psys_inc
@@ -43,6 +43,7 @@ IPU_PSYSLIB_INC = \
 	-I$(IPU_PSYSLIB_ROOT)/routing_bitmap/src \
 	-I$(IPU_PSYSLIB_ROOT)/support \
 	-I$(IPU_PSYSLIB_ROOT)/syscom/interface \
+	-I$(IPU_PSYSLIB_ROOT)/syscom/src \
 	-I$(IPU_PSYSLIB_ROOT)/trace/interface \
 	-I$(IPU_PSYSLIB_ROOT)/vied \
 	-I$(IPU_PSYSLIB_ROOT)/vied/vied/ \
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/ia_css_fw_pkg_release.h b/drivers/media/pci/intel/ipu4/ipu4-css/ia_css_fw_pkg_release.h
index dca3632..cb20a68 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/ia_css_fw_pkg_release.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/ia_css_fw_pkg_release.h
@@ -11,4 +11,4 @@
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 */
-#define IA_CSS_FW_PKG_RELEASE  0x20180614
+#define IA_CSS_FW_PKG_RELEASE  0x20180615
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/interface/ia_css_isysapi.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/interface/ia_css_isysapi.h
index 2d80ed4..5f10f72 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/interface/ia_css_isysapi.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/interface/ia_css_isysapi.h
@@ -45,6 +45,13 @@ extern int ia_css_isys_context_create(
 	HANDLE * context,
 	const struct ia_css_isys_device_cfg_data *config
 );
+extern int ia_css_isys_context_store_dmem(
+	const HANDLE *context,
+	const struct ia_css_isys_device_cfg_data *config
+);
+extern bool ia_css_isys_ab_spc_ready(
+	HANDLE *context
+);
 extern int ia_css_isys_device_open(
 	const struct ia_css_isys_device_cfg_data *config
 );
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/src/ia_css_isys_public.c b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/src/ia_css_isys_public.c
index 1c56da1..f7b1325 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/src/ia_css_isys_public.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/isysapi/src/ia_css_isys_public.c
@@ -294,6 +294,24 @@ int ia_css_isys_context_create(
 	return isys_context_create(context, config);
 }
 
+/* push context information to DMEM for FW to access */
+int ia_css_isys_context_store_dmem(
+	const HANDLE *context,
+	const struct ia_css_isys_device_cfg_data *config)
+{
+	struct ia_css_isys_context *ctx = (struct ia_css_isys_context *) *context;
+
+	return ia_css_syscom_store_dmem(ctx->sys, config->driver_sys.ssid, config->vtl0_addr_mask);
+}
+
+bool ia_css_isys_ab_spc_ready(
+	HANDLE *context)
+{
+	struct ia_css_isys_context *ctx = (struct ia_css_isys_context *) *context;
+
+	return ia_css_syscom_is_ab_spc_ready(ctx->sys);
+}
+
 int ia_css_isys_device_open(
 	const struct ia_css_isys_device_cfg_data *config)
 {
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/regmem/interface/regmem_access.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/regmem/interface/regmem_access.h
index 3fc8958..d4576af 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/regmem/interface/regmem_access.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/regmem/interface/regmem_access.h
@@ -30,8 +30,17 @@ enum regmem_id {
 	SYSCOM_IRQ_REG		= 4,
 	/* Store VTL0_ADDR_MASK in trusted secure regision - provided by host.*/
 	SYSCOM_VTL0_ADDR_MASK	= 5,
+#if HAS_DUAL_CMD_CTX_SUPPORT
+	/* Initialized if trustlet exists - updated by host */
+	TRUSTLET_STATUS		= 6,
+	/* identify if SPC access blocker programming is completed - updated by SP */
+	AB_SPC_STATUS		= 7,
+	/* first syscom queue pointer register */
+	SYSCOM_QPR_BASE_REG	= 8
+#else
 	/* first syscom queue pointer register */
 	SYSCOM_QPR_BASE_REG	= 6
+#endif
 };
 
 #if HAS_DUAL_CMD_CTX_SUPPORT
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/interface/ia_css_syscom.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/interface/ia_css_syscom.h
index 5293c006..5426d6d 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/interface/ia_css_syscom.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/interface/ia_css_syscom.h
@@ -206,4 +206,42 @@ ia_css_syscom_recv_port_transfer(
 	void *token
 );
 
+#if HAS_DUAL_CMD_CTX_SUPPORT
+/**
+ * ia_css_syscom_store_dmem() - store subsystem context information in DMEM
+ * @context: pointer to the subsystem context
+ * @ssid: subsystem id
+ * @vtl0_addr_mask: VTL0 address mask; only applicable when the passed in context is secure
+ * @returns: 0 on success, -1 (FW_ERROR_INVALID_PARAMETER) otherwise.
+ */
+extern int
+ia_css_syscom_store_dmem(
+	struct ia_css_syscom_context *context,
+	unsigned int ssid,
+	unsigned int vtl0_addr_mask
+);
+
+/**
+ * ia_css_syscom_set_trustlet_status() - store truslet configuration setting
+ * @context: pointer to the subsystem context
+ * @trustlet_exist: 1 if trustlet exists
+ */
+extern void
+ia_css_syscom_set_trustlet_status(
+	unsigned int dmem_addr,
+	unsigned int ssid,
+	bool trustlet_exist
+);
+
+/**
+ * ia_css_syscom_is_ab_spc_ready() - check if SPC access blocker programming is completed
+ * @context: pointer to the subsystem context
+ * @returns: 1 when status is ready. 0 otherwise
+ */
+bool
+ia_css_syscom_is_ab_spc_ready(
+	struct ia_css_syscom_context *ctx
+);
+#endif /* HAS_DUAL_CMD_CTX_SUPPORT */
+
 #endif /* __IA_CSS_SYSCOM_H */
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom.c b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom.c
index 5dfa953..cdf9df0 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom.c
@@ -349,6 +349,7 @@ ia_css_syscom_open(
 	ia_css_cpu_mem_cache_flush((void *)HOST_ADDRESS(ctx->config_host_addr),
 				    sizeof(struct ia_css_syscom_config_fw));
 
+#if !HAS_DUAL_CMD_CTX_SUPPORT
 	/* store syscom uninitialized state */
 	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_open store STATE_REG (%#x) @ dmem_addr %#x ssid %d\n",
 		       SYSCOM_STATE_UNINIT, ctx->cell_dmem_addr, cfg->ssid);
@@ -364,16 +365,6 @@ ia_css_syscom_open(
 		       ctx->config_vied_addr, ctx->cell_dmem_addr, cfg->ssid);
 	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_CONFIG_REG,
 			ctx->config_vied_addr, cfg->ssid);
-#if HAS_DUAL_CMD_CTX_SUPPORT
-	/* clear IRQ status */
-	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_IRQ_REG, 0x0, cfg->ssid);
-
-	if (cfg->secure) {
-		/* store VTL0 address mask in 'secure' context */
-		IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_open store VTL0_ADDR_MASK (%#x) @ dmem_addr %#x ssid %d\n",
-			      cfg->vtl0_addr_mask, ctx->cell_dmem_addr, cfg->ssid);
-		regmem_store_32(ctx->cell_dmem_addr, SYSCOM_VTL0_ADDR_MASK, cfg->vtl0_addr_mask, cfg->ssid);
-	}
 #endif
 
 	/* Indicate if ctx is created for secure stream purpose */
@@ -572,3 +563,88 @@ ia_css_syscom_recv_port_transfer(
 
 	return recv_port_transfer(ctx->recv_port + port, token);
 }
+
+#if HAS_DUAL_CMD_CTX_SUPPORT
+/*
+ * store subsystem context information in DMEM
+ */
+int
+ia_css_syscom_store_dmem(
+	struct ia_css_syscom_context *ctx,
+	unsigned int ssid,
+	unsigned int vtl0_addr_mask
+)
+{
+	unsigned int read_back;
+
+	NOT_USED(vtl0_addr_mask);
+	NOT_USED(read_back);
+
+	if (ctx->secure) {
+		/* store VTL0 address mask in 'secure' context */
+		IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem VTL0_ADDR_MASK (%#x) @ dmem_addr %#x ssid %d\n",
+			      vtl0_addr_mask, ctx->cell_dmem_addr, ssid);
+		regmem_store_32(ctx->cell_dmem_addr, SYSCOM_VTL0_ADDR_MASK, vtl0_addr_mask, ssid);
+	}
+	/* store firmware configuration address */
+	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem CONFIG_REG (%#x) @ dmem_addr %#x ssid %d\n",
+		       ctx->config_vied_addr, ctx->cell_dmem_addr, ssid);
+	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_CONFIG_REG,
+			ctx->config_vied_addr, ssid);
+	/* store syscom uninitialized state */
+	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem STATE_REG (%#x) @ dmem_addr %#x ssid %d\n",
+		       SYSCOM_STATE_UNINIT, ctx->cell_dmem_addr, ssid);
+	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_STATE_REG,
+			SYSCOM_STATE_UNINIT, ssid);
+	/* store syscom uninitialized command */
+	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem COMMAND_REG (%#x) @ dmem_addr %#x ssid %d\n",
+		       SYSCOM_COMMAND_UNINIT, ctx->cell_dmem_addr, ssid);
+	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_COMMAND_REG,
+			SYSCOM_COMMAND_UNINIT, ssid);
+
+	return 0;
+}
+
+/*
+ * store truslet configuration status setting
+ */
+void
+ia_css_syscom_set_trustlet_status(
+	unsigned int dmem_addr,
+	unsigned int ssid,
+	bool trustlet_exist
+)
+{
+	unsigned int value;
+
+	value = trustlet_exist ? TRUSTLET_EXIST : TRUSTLET_NOT_EXIST;
+	IA_CSS_TRACE_3(SYSCOM, INFO,
+		       "ia_css_syscom_set_trustlet_status TRUSTLET_STATUS (%#x) @ dmem_addr %#x ssid %d\n",
+		       value, dmem_addr, ssid);
+	regmem_store_32(dmem_addr, TRUSTLET_STATUS, value, ssid);
+}
+
+/*
+ * check if SPC access blocker programming is completed
+ */
+bool
+ia_css_syscom_is_ab_spc_ready(
+	struct ia_css_syscom_context *ctx
+)
+{
+	unsigned int value;
+
+	/* We only expect the call from non-secure context only */
+	if (ctx->secure) {
+		IA_CSS_TRACE_0(SYSCOM, ERROR, "ia_css_syscom_is_spc_ab_ready - Please call from non-secure context\n");
+		return false;
+	}
+
+	value = regmem_load_32(ctx->cell_dmem_addr, AB_SPC_STATUS, ctx->env.ssid);
+	IA_CSS_TRACE_3(SYSCOM, INFO,
+		       "ia_css_syscom_is_spc_ab_ready AB_SPC_STATUS @ dmem_addr %#x ssid %d - value %#x\n",
+		       ctx->cell_dmem_addr, ctx->env.ssid, value);
+
+	return (value == AB_SPC_READY);
+}
+#endif /* HAS_DUAL_CMD_CTX_SUPPORT */
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom_config_fw.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom_config_fw.h
index b6ea98a..0cacd5a 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom_config_fw.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/src/ia_css_syscom_config_fw.h
@@ -33,6 +33,24 @@ enum {
 	SYSCOM_COMMAND_INACTIVE = 0x57A7F001
 };
 
+#if HAS_DUAL_CMD_CTX_SUPPORT
+enum {
+	/* Program load or explicit host setting should init to this */
+	TRUSTLET_UNINIT    = 0x57A8E000,
+	/* Host Syscom informs SP that Trustlet exists */
+	TRUSTLET_EXIST     = 0x57A8E001,
+	/* Host Syscom informs SP that Trustlet does not exist */
+	TRUSTLET_NOT_EXIST = 0x57A8E002
+};
+
+enum {
+	/* Program load or explicit setting initialized by SP */
+	AB_SPC_NOT_READY = 0x57A8F000,
+	/* SP informs host that SPC access programming is completed */
+	AB_SPC_READY     = 0x57A8F001
+};
+#endif
+
 /* firmware config: data that sent from the host to SP via DDR */
 /* Cell copies data into a context */
 
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/syscom.mk b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/syscom.mk
index 403f1c0..8d36b89 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/syscom.mk
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600/syscom/syscom.mk
@@ -22,6 +22,7 @@ SYSCOM_SOURCES1=$(SYSCOM_DIR)/src
 SYSCOM_HOST_FILES += $(SYSCOM_SOURCES1)/ia_css_syscom.c
 
 SYSCOM_HOST_CPPFLAGS += -I$(SYSCOM_INTERFACE)
+SYSCOM_HOST_CPPFLAGS += -I$(SYSCOM_SOURCES1)
 SYSCOM_HOST_CPPFLAGS += -I$${MODULES_DIR}/devices
 ifdef REGMEM_SECURE_OFFSET
 SYSCOM_HOST_CPPFLAGS += -DREGMEM_SECURE_OFFSET=$(REGMEM_SECURE_OFFSET)
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/DSS_V2_program_group/ia_css_fw_pkg_release.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/DSS_V2_program_group/ia_css_fw_pkg_release.h
index dca3632..cb20a68 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/DSS_V2_program_group/ia_css_fw_pkg_release.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/DSS_V2_program_group/ia_css_fw_pkg_release.h
@@ -11,4 +11,4 @@
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 */
-#define IA_CSS_FW_PKG_RELEASE  0x20180614
+#define IA_CSS_FW_PKG_RELEASE  0x20180615
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psys_server/psys_server.mk b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psys_server/psys_server.mk
index 028f266..c4462c9 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psys_server/psys_server.mk
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psys_server/psys_server.mk
@@ -63,6 +63,7 @@ PSYS_SERVER_FW_CPPFLAGS += -I$(PSYS_SERVER_SOURCES)/$(IPU_SYSVER)
 PSYS_SERVER_FW_CPPFLAGS += -I$(PSYS_SERVER_SOURCES)/$(PSYS_SERVER_VERSION)
 PSYS_SERVER_FW_CPPFLAGS += -I$(PSYS_SERVER_SOURCES)/loader/$(PSYS_SERVER_LOADER_VERSION)
 PSYS_SERVER_FW_CPPFLAGS += -I$(PSYS_SERVER_SOURCES)/access_blocker/$(PSYS_ACCESS_BLOCKER_VERSION)
+PSYS_SERVER_FW_CPPFLAGS += -I$(PSYS_SERVER_SOURCES)/access_blocker/src
 
 PSYS_SERVER_FW_CPPFLAGS += -DSSID=$(SSID)
 PSYS_SERVER_FW_CPPFLAGS += -DMMID=$(MMID)
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/interface/ia_css_psys_device.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/interface/ia_css_psys_device.h
index abfdfb9..dc8fa53 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/interface/ia_css_psys_device.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/interface/ia_css_psys_device.h
@@ -137,6 +137,19 @@ extern struct ia_css_syscom_context *ia_css_psys_context_create(
 	const struct ia_css_psys_buffer_s *buffer,
 	struct ia_css_syscom_config *config);
 
+/*! Store the parameters of the Psys syscom object in DMEM, so
+    they can be communicated with FW. This step needs to be invoked
+    after SPC starts in ia_css_psys_open(), so SPC DMEM access blocker
+    programming already takes effective.
+
+ @param	context[in]	Psys syscom object
+ @param	config[in]	Psys syscom descriptor
+ @return 0 if successful
+ */
+extern int ia_css_psys_context_store_dmem(
+	struct ia_css_syscom_context *context,
+	struct ia_css_syscom_config *config);
+
 /*! Start PSYS Server. Psys syscom object must have been created already.
     Target for VTIO usage where multiple syscom objects need to be
     created first before this API is invoked.
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/src/ia_css_psys_device.c b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/src/ia_css_psys_device.c
index f7a84a8..c3ed98a 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/src/ia_css_psys_device.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/psysapi/device/src/ia_css_psys_device.c
@@ -182,6 +182,14 @@ struct ia_css_syscom_context *ia_css_psys_context_create(
 {
 	return psys_context_create(buffer, config);
 }
+
+/* push context information to DMEM for FW to access */
+int ia_css_psys_context_store_dmem(
+	struct ia_css_syscom_context *context,
+	struct ia_css_syscom_config *config)
+{
+	return ia_css_syscom_store_dmem(context, config->ssid, config->vtl0_addr_mask);
+}
 #endif
 
 /* Internal function to start psys server */
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/regmem/interface/regmem_access.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/regmem/interface/regmem_access.h
index 3fc8958..d4576af 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/regmem/interface/regmem_access.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/regmem/interface/regmem_access.h
@@ -30,8 +30,17 @@ enum regmem_id {
 	SYSCOM_IRQ_REG		= 4,
 	/* Store VTL0_ADDR_MASK in trusted secure regision - provided by host.*/
 	SYSCOM_VTL0_ADDR_MASK	= 5,
+#if HAS_DUAL_CMD_CTX_SUPPORT
+	/* Initialized if trustlet exists - updated by host */
+	TRUSTLET_STATUS		= 6,
+	/* identify if SPC access blocker programming is completed - updated by SP */
+	AB_SPC_STATUS		= 7,
+	/* first syscom queue pointer register */
+	SYSCOM_QPR_BASE_REG	= 8
+#else
 	/* first syscom queue pointer register */
 	SYSCOM_QPR_BASE_REG	= 6
+#endif
 };
 
 #if HAS_DUAL_CMD_CTX_SUPPORT
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/interface/ia_css_syscom.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/interface/ia_css_syscom.h
index 5293c006..5426d6d 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/interface/ia_css_syscom.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/interface/ia_css_syscom.h
@@ -206,4 +206,42 @@ ia_css_syscom_recv_port_transfer(
 	void *token
 );
 
+#if HAS_DUAL_CMD_CTX_SUPPORT
+/**
+ * ia_css_syscom_store_dmem() - store subsystem context information in DMEM
+ * @context: pointer to the subsystem context
+ * @ssid: subsystem id
+ * @vtl0_addr_mask: VTL0 address mask; only applicable when the passed in context is secure
+ * @returns: 0 on success, -1 (FW_ERROR_INVALID_PARAMETER) otherwise.
+ */
+extern int
+ia_css_syscom_store_dmem(
+	struct ia_css_syscom_context *context,
+	unsigned int ssid,
+	unsigned int vtl0_addr_mask
+);
+
+/**
+ * ia_css_syscom_set_trustlet_status() - store truslet configuration setting
+ * @context: pointer to the subsystem context
+ * @trustlet_exist: 1 if trustlet exists
+ */
+extern void
+ia_css_syscom_set_trustlet_status(
+	unsigned int dmem_addr,
+	unsigned int ssid,
+	bool trustlet_exist
+);
+
+/**
+ * ia_css_syscom_is_ab_spc_ready() - check if SPC access blocker programming is completed
+ * @context: pointer to the subsystem context
+ * @returns: 1 when status is ready. 0 otherwise
+ */
+bool
+ia_css_syscom_is_ab_spc_ready(
+	struct ia_css_syscom_context *ctx
+);
+#endif /* HAS_DUAL_CMD_CTX_SUPPORT */
+
 #endif /* __IA_CSS_SYSCOM_H */
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom.c b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom.c
index 5dfa953..cdf9df0 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom.c
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom.c
@@ -349,6 +349,7 @@ ia_css_syscom_open(
 	ia_css_cpu_mem_cache_flush((void *)HOST_ADDRESS(ctx->config_host_addr),
 				    sizeof(struct ia_css_syscom_config_fw));
 
+#if !HAS_DUAL_CMD_CTX_SUPPORT
 	/* store syscom uninitialized state */
 	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_open store STATE_REG (%#x) @ dmem_addr %#x ssid %d\n",
 		       SYSCOM_STATE_UNINIT, ctx->cell_dmem_addr, cfg->ssid);
@@ -364,16 +365,6 @@ ia_css_syscom_open(
 		       ctx->config_vied_addr, ctx->cell_dmem_addr, cfg->ssid);
 	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_CONFIG_REG,
 			ctx->config_vied_addr, cfg->ssid);
-#if HAS_DUAL_CMD_CTX_SUPPORT
-	/* clear IRQ status */
-	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_IRQ_REG, 0x0, cfg->ssid);
-
-	if (cfg->secure) {
-		/* store VTL0 address mask in 'secure' context */
-		IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_open store VTL0_ADDR_MASK (%#x) @ dmem_addr %#x ssid %d\n",
-			      cfg->vtl0_addr_mask, ctx->cell_dmem_addr, cfg->ssid);
-		regmem_store_32(ctx->cell_dmem_addr, SYSCOM_VTL0_ADDR_MASK, cfg->vtl0_addr_mask, cfg->ssid);
-	}
 #endif
 
 	/* Indicate if ctx is created for secure stream purpose */
@@ -572,3 +563,88 @@ ia_css_syscom_recv_port_transfer(
 
 	return recv_port_transfer(ctx->recv_port + port, token);
 }
+
+#if HAS_DUAL_CMD_CTX_SUPPORT
+/*
+ * store subsystem context information in DMEM
+ */
+int
+ia_css_syscom_store_dmem(
+	struct ia_css_syscom_context *ctx,
+	unsigned int ssid,
+	unsigned int vtl0_addr_mask
+)
+{
+	unsigned int read_back;
+
+	NOT_USED(vtl0_addr_mask);
+	NOT_USED(read_back);
+
+	if (ctx->secure) {
+		/* store VTL0 address mask in 'secure' context */
+		IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem VTL0_ADDR_MASK (%#x) @ dmem_addr %#x ssid %d\n",
+			      vtl0_addr_mask, ctx->cell_dmem_addr, ssid);
+		regmem_store_32(ctx->cell_dmem_addr, SYSCOM_VTL0_ADDR_MASK, vtl0_addr_mask, ssid);
+	}
+	/* store firmware configuration address */
+	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem CONFIG_REG (%#x) @ dmem_addr %#x ssid %d\n",
+		       ctx->config_vied_addr, ctx->cell_dmem_addr, ssid);
+	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_CONFIG_REG,
+			ctx->config_vied_addr, ssid);
+	/* store syscom uninitialized state */
+	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem STATE_REG (%#x) @ dmem_addr %#x ssid %d\n",
+		       SYSCOM_STATE_UNINIT, ctx->cell_dmem_addr, ssid);
+	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_STATE_REG,
+			SYSCOM_STATE_UNINIT, ssid);
+	/* store syscom uninitialized command */
+	IA_CSS_TRACE_3(SYSCOM, INFO, "ia_css_syscom_store_dmem COMMAND_REG (%#x) @ dmem_addr %#x ssid %d\n",
+		       SYSCOM_COMMAND_UNINIT, ctx->cell_dmem_addr, ssid);
+	regmem_store_32(ctx->cell_dmem_addr, SYSCOM_COMMAND_REG,
+			SYSCOM_COMMAND_UNINIT, ssid);
+
+	return 0;
+}
+
+/*
+ * store truslet configuration status setting
+ */
+void
+ia_css_syscom_set_trustlet_status(
+	unsigned int dmem_addr,
+	unsigned int ssid,
+	bool trustlet_exist
+)
+{
+	unsigned int value;
+
+	value = trustlet_exist ? TRUSTLET_EXIST : TRUSTLET_NOT_EXIST;
+	IA_CSS_TRACE_3(SYSCOM, INFO,
+		       "ia_css_syscom_set_trustlet_status TRUSTLET_STATUS (%#x) @ dmem_addr %#x ssid %d\n",
+		       value, dmem_addr, ssid);
+	regmem_store_32(dmem_addr, TRUSTLET_STATUS, value, ssid);
+}
+
+/*
+ * check if SPC access blocker programming is completed
+ */
+bool
+ia_css_syscom_is_ab_spc_ready(
+	struct ia_css_syscom_context *ctx
+)
+{
+	unsigned int value;
+
+	/* We only expect the call from non-secure context only */
+	if (ctx->secure) {
+		IA_CSS_TRACE_0(SYSCOM, ERROR, "ia_css_syscom_is_spc_ab_ready - Please call from non-secure context\n");
+		return false;
+	}
+
+	value = regmem_load_32(ctx->cell_dmem_addr, AB_SPC_STATUS, ctx->env.ssid);
+	IA_CSS_TRACE_3(SYSCOM, INFO,
+		       "ia_css_syscom_is_spc_ab_ready AB_SPC_STATUS @ dmem_addr %#x ssid %d - value %#x\n",
+		       ctx->cell_dmem_addr, ctx->env.ssid, value);
+
+	return (value == AB_SPC_READY);
+}
+#endif /* HAS_DUAL_CMD_CTX_SUPPORT */
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom_config_fw.h b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom_config_fw.h
index b6ea98a..0cacd5a 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom_config_fw.h
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/src/ia_css_syscom_config_fw.h
@@ -33,6 +33,24 @@ enum {
 	SYSCOM_COMMAND_INACTIVE = 0x57A7F001
 };
 
+#if HAS_DUAL_CMD_CTX_SUPPORT
+enum {
+	/* Program load or explicit host setting should init to this */
+	TRUSTLET_UNINIT    = 0x57A8E000,
+	/* Host Syscom informs SP that Trustlet exists */
+	TRUSTLET_EXIST     = 0x57A8E001,
+	/* Host Syscom informs SP that Trustlet does not exist */
+	TRUSTLET_NOT_EXIST = 0x57A8E002
+};
+
+enum {
+	/* Program load or explicit setting initialized by SP */
+	AB_SPC_NOT_READY = 0x57A8F000,
+	/* SP informs host that SPC access programming is completed */
+	AB_SPC_READY     = 0x57A8F001
+};
+#endif
+
 /* firmware config: data that sent from the host to SP via DDR */
 /* Cell copies data into a context */
 
diff --git a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/syscom.mk b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/syscom.mk
index 403f1c0..8d36b89 100644
--- a/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/syscom.mk
+++ b/drivers/media/pci/intel/ipu4/ipu4-css/lib2600psys/lib/syscom/syscom.mk
@@ -22,6 +22,7 @@ SYSCOM_SOURCES1=$(SYSCOM_DIR)/src
 SYSCOM_HOST_FILES += $(SYSCOM_SOURCES1)/ia_css_syscom.c
 
 SYSCOM_HOST_CPPFLAGS += -I$(SYSCOM_INTERFACE)
+SYSCOM_HOST_CPPFLAGS += -I$(SYSCOM_SOURCES1)
 SYSCOM_HOST_CPPFLAGS += -I$${MODULES_DIR}/devices
 ifdef REGMEM_SECURE_OFFSET
 SYSCOM_HOST_CPPFLAGS += -DREGMEM_SECURE_OFFSET=$(REGMEM_SECURE_OFFSET)
-- 
2.7.4

