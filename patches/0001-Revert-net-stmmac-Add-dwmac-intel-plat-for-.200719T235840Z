From e503cc9ed750fb4c7b3b70c493e9b6b49e078025 Mon Sep 17 00:00:00 2001
From: "Vineetha G. Jaya Kumaran" <vineetha.g.jaya.kumaran@intel.com>
Date: Fri, 10 Jul 2020 13:14:37 +0800
Subject: [PATCH 01/45] Revert "net: stmmac: Add dwmac-intel-plat for GBE
 driver"

This reverts commit 5b5cdb75eb0ac2d217186ddad63b5c01553dd6ff.

Signed-off-by: Vineetha G. Jaya Kumaran <vineetha.g.jaya.kumaran@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/Kconfig   |  11 --
 drivers/net/ethernet/stmicro/stmmac/Makefile  |   1 -
 .../stmicro/stmmac/dwmac-intel-plat.c         | 147 ------------------
 3 files changed, 159 deletions(-)
 delete mode 100644 drivers/net/ethernet/stmicro/stmmac/dwmac-intel-plat.c

diff --git a/drivers/net/ethernet/stmicro/stmmac/Kconfig b/drivers/net/ethernet/stmicro/stmmac/Kconfig
index 7223eaeb063b..72556ac00173 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Kconfig
+++ b/drivers/net/ethernet/stmicro/stmmac/Kconfig
@@ -195,17 +195,6 @@ config DWMAC_SUN8I
 	  This selects Allwinner SoC glue layer support for the
 	  stmmac device driver. This driver is used for H3/A83T/A64
 	  EMAC ethernet controller.
-
-config DWMAC_INTEL_PLAT
-	tristate "Intel dwmac support"
-	depends on OF && COMMON_CLK
-	depends on STMMAC_ETH
-	help
-	  Support for ethernet controllers on Intel SoCs
-
-	  This selects the Intel platform specific glue layer support for
-	  the stmmac device driver. This driver is used for the Intel Keem Bay
-	  SoC.
 endif
 
 config STMMAC_PCI
diff --git a/drivers/net/ethernet/stmicro/stmmac/Makefile b/drivers/net/ethernet/stmicro/stmmac/Makefile
index ed75230ac5e2..d34b4fd48b9b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Makefile
+++ b/drivers/net/ethernet/stmicro/stmmac/Makefile
@@ -31,7 +31,6 @@ obj-$(CONFIG_DWMAC_SUNXI)	+= dwmac-sunxi.o
 obj-$(CONFIG_DWMAC_SUN8I)	+= dwmac-sun8i.o
 obj-$(CONFIG_DWMAC_DWC_QOS_ETH)	+= dwmac-dwc-qos-eth.o
 obj-$(CONFIG_DWMAC_GENERIC)	+= dwmac-generic.o
-obj-$(CONFIG_DWMAC_INTEL_PLAT)	+= dwmac-intel-plat.o
 stmmac-platform-objs:= stmmac_platform.o
 dwmac-altr-socfpga-objs := altr_tse_pcs.o dwmac-socfpga.o
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel-plat.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel-plat.c
deleted file mode 100644
index 96f01b6e4861..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel-plat.c
+++ /dev/null
@@ -1,147 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/* Intel DWMAC platform driver
- *
- * Copyright(C) 2020 Intel Corporation
- */
-
-#include <linux/ethtool.h>
-#include <linux/module.h>
-#include <linux/of.h>
-#include <linux/platform_device.h>
-#include <linux/stmmac.h>
-
-#include "stmmac.h"
-#include "stmmac_platform.h"
-
-struct intel_dwmac {
-	struct clk *tx_clk;
-};
-
-static void kmb_eth_fix_mac_speed(void *priv, unsigned int speed)
-{
-	struct intel_dwmac *dwmac = priv;
-	unsigned long rate;
-
-	rate = clk_get_rate(dwmac->tx_clk);
-
-	switch (speed) {
-	case SPEED_1000:
-		rate = 125000000;
-		break;
-
-	case SPEED_100:
-		rate = 25000000;
-		break;
-
-	case SPEED_10:
-		rate = 2500000;
-		break;
-
-	default:
-		break;
-	}
-
-	clk_set_rate(dwmac->tx_clk, rate);
-}
-
-static int intel_eth_plat_probe(struct platform_device *pdev)
-{
-	struct net_device *ndev = platform_get_drvdata(pdev);
-	struct stmmac_priv *priv = netdev_priv(ndev);
-	struct device_node *np = pdev->dev.of_node;
-	struct plat_stmmacenet_data *plat_dat;
-	struct stmmac_resources stmmac_res;
-	struct intel_dwmac *dwmac;
-	u32 clk_rate[3];
-	int ret;
-
-	plat_dat = priv->plat;
-	ret = stmmac_get_platform_resources(pdev, &stmmac_res);
-	if (ret)
-		return ret;
-
-	plat_dat = stmmac_probe_config_dt(pdev, &stmmac_res.mac);
-	if (IS_ERR(plat_dat)) {
-		dev_err(&pdev->dev, "dt configuration failed\n");
-		return PTR_ERR(plat_dat);
-	}
-
-	dwmac = devm_kzalloc(&pdev->dev, sizeof(*dwmac), GFP_KERNEL);
-	if (!dwmac) {
-		ret = -ENOMEM;
-		goto err_remove_config_dt;
-	}
-
-	dev_info(&pdev->dev, "Setting Tx clock");
-	dwmac->tx_clk = devm_clk_get(&pdev->dev, "tx_clk");
-	if (IS_ERR(dwmac->tx_clk)) {
-		if (PTR_ERR(dwmac->tx_clk) == -EPROBE_DEFER)
-			goto err_remove_config_dt;
-
-		dwmac->tx_clk = NULL;
-	}
-
-	clk_prepare_enable(dwmac->tx_clk);
-
-	if (!of_property_read_u32_array(np, "clock-frequency", clk_rate, 3)) {
-		ret = clk_set_rate(plat_dat->clk_ptp_ref, clk_rate[1]);
-		if (ret) {
-			dev_err(&pdev->dev, "Unable to set clk_ptp_ref rate\n");
-			return ret;
-		}
-
-		ret = clk_set_rate(dwmac->tx_clk, clk_rate[2]);
-		if (ret) {
-			dev_err(&pdev->dev, "Unable to set tx_clk rate\n");
-			return ret;
-		}
-	}
-
-	plat_dat->bsp_priv = dwmac;
-	plat_dat->fix_mac_speed = kmb_eth_fix_mac_speed;
-
-	ret = stmmac_dvr_probe(&pdev->dev, plat_dat, &stmmac_res);
-	if (ret) {
-		clk_disable_unprepare(dwmac->tx_clk);
-		goto err_remove_config_dt;
-	}
-
-	return 0;
-
-err_remove_config_dt:
-	stmmac_remove_config_dt(pdev, plat_dat);
-
-	return ret;
-}
-
-static int intel_eth_plat_remove(struct platform_device *pdev)
-{
-	struct intel_dwmac *dwmac = get_stmmac_bsp_priv(&pdev->dev);
-	int ret;
-
-	ret = stmmac_pltfr_remove(pdev);
-	clk_disable_unprepare(dwmac->tx_clk);
-
-	return ret;
-}
-
-static const struct of_device_id intel_eth_plat_match[] = {
-	{ .compatible = "snps,dwmac-4.10a" },
-	{ .compatible = "snps,dwmac"},
-	{ }
-};
-MODULE_DEVICE_TABLE(of, intel_eth_plat_match);
-
-static struct platform_driver intel_eth_plat_driver = {
-	.probe  = intel_eth_plat_probe,
-	.remove = intel_eth_plat_remove,
-	.driver = {
-		.name		= "intel-eth-plat",
-		.pm		= &stmmac_pltfr_pm_ops,
-		.of_match_table = intel_eth_plat_match,
-	},
-};
-module_platform_driver(intel_eth_plat_driver);
-
-MODULE_LICENSE("GPL v2");
-MODULE_DESCRIPTION("Intel DWMAC platform driver");
-- 
2.17.1

