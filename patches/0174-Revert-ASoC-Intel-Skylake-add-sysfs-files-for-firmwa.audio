From d8ce62d3990c0049e66f7bd90bdf93f2871b8997 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Amadeusz=20S=C5=82awi=C5=84ski?=
 <amadeuszx.slawinski@linux.intel.com>
Date: Tue, 13 Aug 2019 10:51:45 +0200
Subject: [PATCH 174/193] Revert "ASoC: Intel: Skylake: add sysfs files for
 firmware modules"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This reverts commit 3d8e03d55dbb232ceb45e9924831742c75536be0.

The proposed sysfs is really messy and should be rewritten from scratch.

Will do this in later commits, for now just revert instead of trying to
fix in place.

Change-Id: Ic5cbc6847ec0815db89b70f312faf1da4423b89f
Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Reviewed-on:
Reviewed-by: Rojewski, Cezary <cezary.rojewski@intel.com>
Tested-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c  |   9 +-
 sound/soc/intel/skylake/skl-pcm.c       |   3 -
 sound/soc/intel/skylake/skl-sst-dsp.h   |   7 -
 sound/soc/intel/skylake/skl-sst-utils.c | 224 ------------------------
 sound/soc/intel/skylake/skl.h           |   3 -
 5 files changed, 3 insertions(+), 243 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 754e9b7abf4d..2a326872c38b 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -185,7 +185,6 @@ int skl_free_dsp(struct skl_dev *skl)
 	/* disable  ppcap interrupt */
 	snd_hdac_ext_bus_ppcap_int_enable(bus, false);
 
-	skl_module_sysfs_exit(skl);
 	skl_sst_dsp_cleanup(skl);
 
 	kfree(skl->hw_cfg.i2s_caps.ctrl_base_addr);
@@ -1199,7 +1198,7 @@ static void skl_module_format_mismatch_detection(struct skl_dev *skl,
 	src_fmt = skl_get_pin_format(src_mcfg, SKL_OUTPUT_PIN, src_index);
 	dst_fmt = skl_get_pin_format(dst_mcfg, SKL_INPUT_PIN, dst_index);
 
-	if (memcmp(src_fmt, dst_fmt, sizeof(*src_fmt))) {
+	if(memcmp(src_fmt, dst_fmt, sizeof(*src_fmt))) {
 		dev_warn(skl->dev, "#### src and dst format mismatch: ####\n");
 		dev_warn(skl->dev, "pipe=%d src module_id=%d src instance_id=%d\n",
 					src_mcfg->pipe->ppl_id,
@@ -1218,13 +1217,11 @@ static void skl_module_format_mismatch_detection(struct skl_dev *skl,
 		dev_warn(skl->dev, "bit_depth: src=%d dst=%d\n",
 				src_fmt->bit_depth, dst_fmt->bit_depth);
 		dev_warn(skl->dev, "valid_bit_depth: src=%d dst=%d\n",
-				src_fmt->valid_bit_depth,
-				dst_fmt->valid_bit_depth);
+				src_fmt->valid_bit_depth, dst_fmt->valid_bit_depth);
 		dev_warn(skl->dev, "ch_cfg: src=%d dst=%d\n",
 				src_fmt->ch_cfg, dst_fmt->ch_cfg);
 		dev_warn(skl->dev, "interleaving_style: src=%d dst=%d\n",
-				src_fmt->interleaving_style,
-				dst_fmt->interleaving_style);
+				src_fmt->interleaving_style, dst_fmt->interleaving_style);
 		dev_warn(skl->dev, "sample_type: src=%d dst=%d\n",
 				src_fmt->sample_type, dst_fmt->sample_type);
 		dev_warn(skl->dev, "ch_map: src=0x%08x dst=0x%08x\n",
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index b6f11c27686d..631e5cb7bde8 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -1853,9 +1853,6 @@ static int skl_platform_soc_probe(struct snd_soc_component *component)
 					skl->cfg.astate_cfg->count,
 					skl->cfg.astate_cfg);
 		}
-
-		/* create sysfs to list modules downloaded by driver */
-		skl_module_sysfs_init(skl, &component->dev->kobj);
 	}
 	pm_runtime_mark_last_busy(component->dev);
 	pm_runtime_put_autosuspend(component->dev);
diff --git a/sound/soc/intel/skylake/skl-sst-dsp.h b/sound/soc/intel/skylake/skl-sst-dsp.h
index ef38e151b46c..55d964765882 100644
--- a/sound/soc/intel/skylake/skl-sst-dsp.h
+++ b/sound/soc/intel/skylake/skl-sst-dsp.h
@@ -122,8 +122,6 @@ enum skl_log_enable;
 #define SKL_ADSPCS_CPA_SHIFT		24
 #define SKL_ADSPCS_CPA_MASK(cm)		((cm) << SKL_ADSPCS_CPA_SHIFT)
 
-#define DEFAULT_HASH_SHA256_LEN 32
-
 /* DSP Core state */
 enum skl_dsp_states {
 	SKL_DSP_RUNNING = 1,
@@ -184,7 +182,6 @@ struct uuid_module {
 	int num_configs;
 
 	struct list_head list;
-	u8 hash[DEFAULT_HASH_SHA256_LEN];
 };
 
 struct skl_notify_data {
@@ -276,10 +273,6 @@ int bxt_schedule_dsp_D0i3(struct sst_dsp *ctx);
 
 void bxt_set_dsp_D0i3(struct work_struct *work);
 
-int skl_module_sysfs_init(struct skl_dev *skl, struct kobject *fw_modules_kobj);
-
-void skl_module_sysfs_exit(struct skl_dev *skl);
-
 int skl_dsp_cb_event(struct skl_dev *skl, unsigned int event,
 			struct skl_notify_data *notify_data);
 
diff --git a/sound/soc/intel/skylake/skl-sst-utils.c b/sound/soc/intel/skylake/skl-sst-utils.c
index bbe9f7bc89db..b84ae5c87354 100644
--- a/sound/soc/intel/skylake/skl-sst-utils.c
+++ b/sound/soc/intel/skylake/skl-sst-utils.c
@@ -18,35 +18,6 @@
 /* FW Extended Manifest Header id = $AE1 */
 #define SKL_EXT_MANIFEST_HEADER_MAGIC   0x31454124
 
-#define UUID_ATTR_RO(_name) \
-	struct uuid_attribute uuid_attr_##_name = __ATTR_RO(_name)
-
-struct skl_sysfs_tree {
-	struct kobject *dsp_kobj;
-	struct kobject *modules_kobj;
-	struct skl_sysfs_module **mod_obj;
-};
-
-struct skl_sysfs_module {
-	struct kobject kobj;
-	struct uuid_module *uuid_mod;
-	struct list_head *module_list;
-	int fw_ops_load_mod;
-};
-
-struct uuid_attribute {
-	struct attribute	attr;
-	ssize_t (*show)(struct skl_sysfs_module *modinfo_obj,
-			struct uuid_attribute *attr, char *buf);
-	ssize_t (*store)(struct skl_sysfs_module *modinfo_obj,
-			struct uuid_attribute *attr, const char *buf,
-			size_t count);
-};
-
-struct UUID {
-	u8 id[16];
-};
-
 union seg_flags {
 	u32 ul;
 	struct {
@@ -380,7 +351,6 @@ int snd_skl_parse_manifest(struct sst_dsp *ctx, const struct firmware *fw,
 				return -ENOMEM;
 			}
 		}
-		memcpy(&module->hash, mod_entry->hash1, sizeof(module->hash));
 
 		list_add_tail(&module->list, &skl->module_list);
 
@@ -488,197 +458,3 @@ void skl_release_library(struct skl_lib_info *linfo, int lib_count)
 	}
 }
 
-static ssize_t uuid_attr_show(struct kobject *kobj, struct attribute *attr,
-				char *buf)
-{
-	struct uuid_attribute *uuid_attr =
-		container_of(attr, struct uuid_attribute, attr);
-	struct skl_sysfs_module *modinfo_obj =
-		container_of(kobj, struct skl_sysfs_module, kobj);
-
-	if (uuid_attr->show)
-		return uuid_attr->show(modinfo_obj, uuid_attr, buf);
-
-	return 0;
-}
-
-static const struct sysfs_ops uuid_sysfs_ops = {
-	.show	= uuid_attr_show,
-};
-
-static void uuid_release(struct kobject *kobj)
-{
-	struct skl_sysfs_module *modinfo_obj =
-		container_of(kobj, struct skl_sysfs_module, kobj);
-
-	kfree(modinfo_obj);
-}
-
-static struct kobj_type uuid_ktype = {
-	.release        = uuid_release,
-	.sysfs_ops	= &uuid_sysfs_ops,
-};
-
-static ssize_t loaded_show(struct skl_sysfs_module *modinfo_obj,
-				struct uuid_attribute *attr, char *buf)
-{
-	struct skl_module_table *module_list;
-
-	if ((!modinfo_obj->fw_ops_load_mod) ||
-		(modinfo_obj->fw_ops_load_mod &&
-		!modinfo_obj->uuid_mod->is_loadable))
-		return sprintf(buf, "%d\n", true);
-
-	if (list_empty(modinfo_obj->module_list))
-		return sprintf(buf, "%d\n", false);
-
-	list_for_each_entry(module_list, modinfo_obj->module_list, list) {
-		if (module_list->mod_info->mod_id
-					== modinfo_obj->uuid_mod->id)
-			return sprintf(buf, "%d\n", module_list->usage_cnt);
-	}
-
-	return sprintf(buf, "%d\n", false);
-}
-
-static ssize_t hash_show(struct skl_sysfs_module *modinfo_obj,
-				struct uuid_attribute *attr, char *buf)
-{
-	int ret = 0;
-	int i;
-
-	for (i = 0; i < DEFAULT_HASH_SHA256_LEN; i++)
-		ret += sprintf(buf + ret, "%d ",
-					modinfo_obj->uuid_mod->hash[i]);
-	ret += sprintf(buf + ret, "\n");
-
-	return ret;
-}
-
-
-static ssize_t id_show(struct skl_sysfs_module *modinfo_obj,
-				struct uuid_attribute *attr, char *buf)
-{
-	return sprintf(buf, "%d\n", modinfo_obj->uuid_mod->id);
-}
-
-static UUID_ATTR_RO(loaded);
-static UUID_ATTR_RO(hash);
-static UUID_ATTR_RO(id);
-
-static struct attribute *modules_attrs[] = {
-	&uuid_attr_loaded.attr,
-	&uuid_attr_hash.attr,
-	&uuid_attr_id.attr,
-	NULL,
-};
-
-static const struct attribute_group uuid_group = {
-	.attrs = modules_attrs,
-};
-
-static void free_uuid_node(struct kobject *kobj,
-			     const struct attribute_group *group)
-{
-	if (kobj) {
-		sysfs_remove_group(kobj, group);
-		kobject_put(kobj);
-	}
-}
-
-void skl_module_sysfs_exit(struct skl_dev *skl)
-{
-	struct skl_sysfs_tree *tree = skl->sysfs_tree;
-	struct skl_sysfs_module **m;
-
-	if (!tree)
-		return;
-
-	if (tree->mod_obj) {
-		for (m = tree->mod_obj; *m; m++)
-			free_uuid_node(&(*m)->kobj, &uuid_group);
-		kfree(tree->mod_obj);
-	}
-
-	if (tree->modules_kobj)
-		kobject_put(tree->modules_kobj);
-
-	if (tree->dsp_kobj)
-		kobject_put(tree->dsp_kobj);
-
-	kfree(tree);
-	skl->sysfs_tree = NULL;
-}
-EXPORT_SYMBOL_GPL(skl_module_sysfs_exit);
-
-int skl_module_sysfs_init(struct skl_dev *skl, struct kobject *kobj)
-{
-	struct uuid_module *module;
-	struct skl_sysfs_module *modinfo_obj;
-	int count = 0;
-	int max_mod = 0;
-	int ret = 0;
-	char uuid_name[sizeof(module->uuid)];
-
-	if (list_empty(&skl->module_list))
-		return 0;
-
-	skl->sysfs_tree = kzalloc(sizeof(*skl->sysfs_tree), GFP_KERNEL);
-	if (!skl->sysfs_tree) {
-		ret = -ENOMEM;
-		goto err_sysfs_exit;
-	}
-
-	skl->sysfs_tree->dsp_kobj = kobject_create_and_add("dsp", kobj);
-	if (!skl->sysfs_tree->dsp_kobj)
-		goto err_sysfs_exit;
-
-	skl->sysfs_tree->modules_kobj = kobject_create_and_add("modules",
-						skl->sysfs_tree->dsp_kobj);
-	if (!skl->sysfs_tree->modules_kobj)
-		goto err_sysfs_exit;
-
-	list_for_each_entry(module, &skl->module_list, list)
-		max_mod++;
-
-	skl->sysfs_tree->mod_obj = kcalloc(max_mod + 1,
-			sizeof(*skl->sysfs_tree->mod_obj), GFP_KERNEL);
-	if (!skl->sysfs_tree->mod_obj) {
-		ret = -ENOMEM;
-		goto err_sysfs_exit;
-	}
-
-	list_for_each_entry(module, &skl->module_list, list) {
-		modinfo_obj = kzalloc(sizeof(*modinfo_obj), GFP_KERNEL);
-		if (!modinfo_obj) {
-			ret = -ENOMEM;
-			goto err_sysfs_exit;
-		}
-
-		snprintf(uuid_name, sizeof(uuid_name), "%pUL", &module->uuid);
-		ret = kobject_init_and_add(&modinfo_obj->kobj, &uuid_ktype,
-				skl->sysfs_tree->modules_kobj, uuid_name);
-		if (ret < 0)
-			goto err_sysfs_exit;
-
-		ret = sysfs_create_group(&modinfo_obj->kobj, &uuid_group);
-		if (ret < 0)
-			goto err_sysfs_exit;
-
-		modinfo_obj->uuid_mod = module;
-		modinfo_obj->module_list = &skl->dsp->module_list;
-		modinfo_obj->fw_ops_load_mod =
-				(skl->dsp->fw_ops.load_mod == NULL) ? 0 : 1;
-
-		skl->sysfs_tree->mod_obj[count] = modinfo_obj;
-		count++;
-	}
-
-	return 0;
-
-err_sysfs_exit:
-	skl_module_sysfs_exit(skl);
-
-	return ret;
-}
-EXPORT_SYMBOL_GPL(skl_module_sysfs_init);
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 3f2e426ca61c..4e3b29239564 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -186,9 +186,6 @@ struct skl_dev {
 	/* Callback to update dynamic clock and power gating registers */
 	void (*clock_power_gating)(struct device *dev, bool enable);
 
-	/* sysfs for module info */
-	struct skl_sysfs_tree *sysfs_tree;
-
 	struct ep_group_cnt grp_cnt;
 
 	struct snd_kcontrol *kcontrol;
-- 
2.17.1

