From 97f1adce79f169a14ae4eab8b7d207ae5adf067a Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Sun, 19 Apr 2020 21:09:59 -0700
Subject: [PATCH 8/8] x86, sched: Do not use frequency inviariance if MSR
 readouts are not sane

Signals for frequency invariance needs to know what is the maximum
frequency at which the CPU can run. For x86, this is not trivial as
explained in 1567c3e3467c ("x86, sched: Add support for frequency
invariance"). Determining the maximum frequency in Intel processors
involves reading the MSR_PLATFORM_INFO and MSR_TURBO_RATIO_LIMIT
registers.

Two situations may arise when interpreting these registers:  1) MSRs can
return erroneous values; or 2) a new CPU that we don't know about may
specify turbo ratios not in ordered bins in MSR_TURBO_RATIO_LIMIT but in
an arbitrary order such as in SKYLAKE_X (see commit 2a0abc596998 ("x86,
sched: Add support for frequency invariance on SKYLAKE_X")).

This is risky since since the value of MSR_TURBO_RATIO_LIMIT is used to
set arch_max_freq_ratio; which in turn is used in the denominator of the
computation of the frequency scaling factor. If the denominator is zero,
a division by zero exception will be observed.

Hence, do not use frequency invariance if we cannot read sane values from
the involved registers.

Please see below an example of the aforementioned scenario:

[    8.446140] divide error: 0000 [#1] SMP NOPTI
[    8.446140] CPU: 0 PID: 1 Comm: swapper/0 Tainted: G          I
               5.7.0-rc1 #1
[    8.446140] RIP: 0010:arch_scale_freq_tick+0x6b/0x90
[    8.446140] Code: 3e 65 48 89 1d 6e b4 fb 7e 65 48 89 05 5e b4 fb 7e 48
               0f af 0d ee 7f 5d 01 48 89 d8 31 d2 bb 00 04 00 00 48 29 f0
               48 c1 e0 14 <48> f7 f1 48 3d 00 04 00 00 48 0f 47 c3 65 48
               89 05 40 b4 fb 7e 5b
[    8.446140] RSP: 0000:ffffc90000003f40 EFLAGS: 00010006
[    8.446140] RAX: 000009be8d100000 RBX: 0000000000000400
               RCX: 0000000000000000
[    8.446140] RDX: 0000000000000000 RSI: 0000000c524ba663
               RDI: 00000000000000e7
[    8.446140] RBP: ffffc90000003f48 R08: 0000000000000000
               R09: 0000000000000000
[    8.446140] R10: 0000000000000000 R11: 0000000000000000
               R12: 000000000002c900
[    8.446140] R13: 0000000000000000 R14: ffff88ff79715a00
               R15: 0000000000000000
[    8.446140] FS:  0000000000000000(0000) GS:ffff88bf80000000(0000)
               knlGS:0000000000000000
[    8.446140] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[    8.446140] CR2: ffff89007ffff000 CR3: 000000000260a001
               CR4: 0000000000760ef0
[    8.446140] DR0: 0000000000000000 DR1: 0000000000000000
               DR2: 0000000000000000
[    8.446140] DR3: 0000000000000000 DR6: 00000000ffff07f0
               DR7: 0000000000000400
[    8.446140] PKRU: 55555554
[    8.446140] Call Trace:
[    8.446140]  <IRQ>
[    8.446140]  scheduler_tick+0x39/0x100
[    8.446140]  update_process_times+0x40/0x50
[    8.446140]  tick_periodic+0x2b/0x80
[    8.446140]  tick_handle_periodic+0x25/0x70
[    8.446140]  smp_apic_timer_interrupt+0x6f/0x130
[    8.446140]  apic_timer_interrupt+0xf/0x20
[    8.446140]  </IRQ>
[    8.446140] RIP: 0010:console_unlock+0x361/0x4f0
[    8.446140] Code: ff 85 c0 0f 85 f4 fc ff ff 48 83 c4 10 5b 41 5c 41 5d
               41 5e 41 5f 5d c3 01 cf e9 52 ff ff ff e8 45 2b 00 00 48 8b
               7d d0 57 9d <0f> 1f 44 00 00 8b 45 cc 85 c0 0f 84 07 fd ff
               ff e8 8a a8 99 00 e9
[    8.446140] RSP: 0000:ffffc9000006fc80 EFLAGS: 00000247
               ORIG_RAX: ffffffffffffff13
[    8.446140] RAX: 0000000000000000 RBX: ffffffff82b48630
               RCX: 00000000ffffffff
[    8.446140] RDX: 0000000000000000 RSI: 0000000000000004
               RDI: 0000000000000247
[    8.446140] RBP: ffffc9000006fcb8 R08: 0000000000000000
               R09: ffffffff82b52198
[    8.446140] R10: 0000000000000089 R11: 000000000000072e
               R12: 0000000000000089
[    8.446140] R13: 0000000000000000 R14: 0000000000000000
               R15: ffffffff82840160
[    8.446140]  vprintk_emit+0x118/0x2b0
[    8.446140]  vprintk_default+0x1f/0x30
[    8.446140]  vprintk_func+0x47/0xc0
[    8.446140]  ? intel_pmu_init+0x1555/0x15dd
[    8.446140]  printk+0x52/0x6e
[    8.446140]  init_hw_perf_events+0x2ba/0x51a
[    8.446140]  ? map_vsyscall+0x81/0x81
[    8.446140]  do_one_initcall+0x4a/0x200
[    8.446140]  ? proc_create_seq_private+0x4a/0x60
[    8.446140]  ? unusable_open+0x20/0x20
[    8.446140]  kernel_init_freeable+0x101/0x290
[    8.446140]  ? __switch_to_asm+0x40/0x70
[    8.446140]  ? rest_init+0xb0/0xb0
[    8.446140]  kernel_init+0xe/0x110
[    8.446140]  ret_from_fork+0x1f/0x40
[    8.446140] Modules linked in:
[    8.446140] ---[ end trace d1adbccbea5a0dcd ]---
[    8.446140] RIP: 0010:arch_scale_freq_tick+0x6b/0x90
[    8.446140] Code: 3e 65 48 89 1d 6e b4 fb 7e 65 48 89 05 5e b4 fb 7e 48
               0f af 0d ee 7f 5d 01 48 89 d8 31 d2 bb 00 04 00 00 48 29 f0
               48 c1 e0 14 <48> f7 f1 48 3d 00 04 00 00 48 0f 47 c3 65 48
               89 05 40 b4 fb 7e 5b
[    8.446140] RSP: 0000:ffffc90000003f40 EFLAGS: 00010006
[    8.446140] RAX: 000009be8d100000 RBX: 0000000000000400
               RCX: 0000000000000000
[    8.446140] RDX: 0000000000000000 RSI: 0000000c524ba663
               RDI: 00000000000000e7
[    8.446140] RBP: ffffc90000003f48 R08: 0000000000000000
               R09: 0000000000000000
[    8.446140] R10: 0000000000000000 R11: 0000000000000000
               R12: 000000000002c900
[    8.446140] R13: 0000000000000000 R14: ffff88ff79715a00
               R15: 0000000000000000
[    8.446140] FS:  0000000000000000(0000) GS:ffff88bf80000000(0000)
               knlGS:0000000000000000
[    8.446140] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[    8.446140] CR2: ffff89007ffff000 CR3: 000000000260a001
               CR4: 0000000000760ef0
[    8.446140] DR0: 0000000000000000 DR1: 0000000000000000
               DR2: 0000000000000000
[    8.446140] DR3: 0000000000000000 DR6: 00000000ffff07f0
               DR7: 0000000000000400
[    8.446140] PKRU: 55555554
[    8.446140] Kernel panic - not syncing: Fatal exception in interrupt
[    8.446140] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---

Cc: Srinivas Pandruvada <srinivas.pandruvada@intel.com>
Cc: Len Brown <len.brown@intel.com>
Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Reported-by: Yixin Zhang <yixin.zhang@intel.com>
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Signed-off-by: Pan, Kris <kris.pan@intel.com>
---
 arch/x86/kernel/smpboot.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 2f24c334a938..9de973fd87a1 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -1968,7 +1968,11 @@ static bool core_set_max_freq_ratio(u64 *base_freq, u64 *turbo_freq)
 	if (!*turbo_freq)
 		*turbo_freq = msr & 0xFF;         /* 1C turbo    */
 
-	return true;
+	/*
+	 * We cannot use frequency invariance if we don't know the base and
+	 * turbo frequency ratios.
+	 */
+	return *base_freq && *turbo_freq;
 }
 
 static bool intel_set_max_freq_ratio(void)
-- 
2.17.1

