From def0239e49a643942ca2cdffad6b909a5669b9b6 Mon Sep 17 00:00:00 2001
From: Vitaly Lubart <vitaly.lubart@intel.com>
Date: Thu, 29 Nov 2018 16:15:00 +0200
Subject: [PATCH 22/70] mei: spd: add support for spd protocol version 3

Change-Id: I6c5abe97923ba45deb18df12ba69f66e59f04014
Signed-off-by: Vitaly Lubart <vitaly.lubart@intel.com>
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/spd/cmd.c  | 43 ++++++++++++++++++++++++++++++-------
 drivers/misc/mei/spd/cmd.h  | 33 +++++++++++++++++++++++++++-
 drivers/misc/mei/spd/main.c |  2 +-
 drivers/misc/mei/spd/rpmb.c |  3 ++-
 drivers/misc/mei/spd/spd.h  |  6 ++++--
 5 files changed, 74 insertions(+), 13 deletions(-)

diff --git a/drivers/misc/mei/spd/cmd.c b/drivers/misc/mei/spd/cmd.c
index ea26204f42c0..91521c05e47a 100644
--- a/drivers/misc/mei/spd/cmd.c
+++ b/drivers/misc/mei/spd/cmd.c
@@ -34,6 +34,10 @@ const char *spd_cmd_str(enum spd_cmd_type cmd)
 	SPD_CMD(TRIM);
 	SPD_CMD(INIT);
 	SPD_CMD(STORAGE_STATUS);
+	SPD_CMD(ALLOCATE_BUFFER);
+	SPD_CMD(WRITE_FROM_BUFFER);
+	SPD_CMD(READ_FROM_BUFFER);
+	SPD_CMD(MANAGE_CRITICAL_SECTION);
 	SPD_CMD(MAX);
 	default:
 		return "unknown";
@@ -121,11 +125,12 @@ int mei_spd_cmd_init_req(struct mei_spd *spd)
 static int mei_spd_cmd_init_rsp(struct mei_spd *spd, struct spd_cmd *cmd,
 				ssize_t cmd_sz)
 {
-	int type;
-	int gpp_id;
-	int i;
+	unsigned int type;
+	unsigned int gpp_id;
+	unsigned int rpmb_id;
+	unsigned int i;
 
-	if (cmd_sz < spd_cmd_size(init_resp)) {
+	if (cmd_sz < (ssize_t)spd_cmd_size(init_resp)) {
 		spd_err(spd, "Wrong init response size\n");
 		return -EINVAL;
 	}
@@ -134,23 +139,44 @@ static int mei_spd_cmd_init_rsp(struct mei_spd *spd, struct spd_cmd *cmd,
 		return -EPROTO;
 
 	type = cmd->init_rsp.type;
-	gpp_id = cmd->init_rsp.gpp_partition_id;
+	gpp_id  = cmd->init_rsp.gpp_partition_id;
+	rpmb_id = cmd->init_rsp.rpmb_partition_id;
+
+	spd_dbg(spd, "cmd init rsp : type [%d] gpp_id [%d] rpmb_id [%d]\n",
+		type, gpp_id, rpmb_id);
 
 	switch (type) {
 	case SPD_TYPE_EMMC:
-		if (gpp_id < 1 || gpp_id > 4) {
+		if (gpp_id > 4) {
 			spd_err(spd, "%s unsupported gpp id %d\n",
 				mei_spd_dev_str(type), gpp_id);
 			return -EINVAL;
 		}
+
+		/* Only one RPMB partition exists for EMMC */
+		rpmb_id = 0;
 		break;
 
 	case SPD_TYPE_UFS:
-		if (gpp_id < 1 || gpp_id > 6) {
+		if (gpp_id > 7) {
 			spd_err(spd, "%s unsupported gpp id %d\n",
 				mei_spd_dev_str(type), gpp_id);
 			return -EINVAL;
 		}
+
+		/* For UFS version 2.0 and 2.1 the RPMB od must be 0  */
+		/* because there is only one RPMB partition.          */
+		/* For UFS version 3.0 there can be up to 4 RPMBs and */
+		/* the RPMB id is later being used in CDB format of   */
+		/* Security Protocol IN/OUT Commands ( Security       */
+		/* Protocol Specific field.                           */
+		/* See the UFS Version 3.0 spec for details           */
+		if (rpmb_id > 3) {
+			spd_err(spd, "%s unsupported rpmb id %d\n",
+				mei_spd_dev_str(type), rpmb_id);
+			return -EINVAL;
+		}
+
 		break;
 
 	default:
@@ -160,7 +186,8 @@ static int mei_spd_cmd_init_rsp(struct mei_spd *spd, struct spd_cmd *cmd,
 	}
 
 	spd->dev_type = type;
-	spd->gpp_partition_id = gpp_id;
+	spd->gpp_partition_id  = gpp_id;
+	spd->rpmb_partition_id = rpmb_id;
 
 	if (cmd->init_rsp.serial_no_sz != 0) {
 		if (cmd->init_rsp.serial_no_sz !=
diff --git a/drivers/misc/mei/spd/cmd.h b/drivers/misc/mei/spd/cmd.h
index a7f99ec7f8f4..1ecf02bf289c 100644
--- a/drivers/misc/mei/spd/cmd.h
+++ b/drivers/misc/mei/spd/cmd.h
@@ -18,7 +18,11 @@
  * @SPD_GPP_READ_CMD   : GPP read request.                [TEE -> Host]
  * @SPD_TRIM_CMD       : TRIM command                     [TEE -> Host]
  * @SPD_INIT_CMD : initial handshake between host and fw. [Host -> TEE]
- * @SPD_STORAGE_STATUS_CMD : the backing storage status.  [Host -> TEE]
+ * @SPD_STORAGE_STATUS_CMD  : the backing storage status. [Host -> TEE]
+ * @SPD_ALLOCATE_BUFFER_CMD : not used by the SW.         [TEE -> Host]
+ * @SPD_WRITE_FROM_BUFFER_CMD : not used by the SW.       [TEE -> Host]
+ * @SPD_READ_FROM_BUFFER_CMD  : not used by the SW.       [TEE -> Host]
+ * @SPD_MANAGE_CRITICAL_SECTION_CMD : not used by the SW  [TEE -> Host]
  * @SPD_MAX_CMD: Upper command sentinel.
  */
 enum spd_cmd_type {
@@ -32,6 +36,10 @@ enum spd_cmd_type {
 	SPD_TRIM_CMD,
 	SPD_INIT_CMD,
 	SPD_STORAGE_STATUS_CMD,
+	SPD_ALLOCATE_BUFFER_CMD,
+	SPD_WRITE_FROM_BUFFER_CMD,
+	SPD_READ_FROM_BUFFER_CMD,
+	SPD_MANAGE_CRITICAL_SECTION_CMD,
 	SPD_MAX_CMD,
 };
 
@@ -85,6 +93,11 @@ struct spd_cmd_hdr {
  *     UFS:  LUN Number (0-7)
  *     EMMC: 1-4.
  *     0xff: GPP not supported
+ * @rpmb_partition_id: rpmb_partition:
+ *     UFS:  W-LUN Number (0-3)
+ *     EMMC: Not defined
+ *     0xff: RPMB not supported
+ * @reserved: reserved
  * @type: storage hw type
  *    SPD_TYPE_EMMC
  *    SPD_TYPE_UFS
@@ -93,6 +106,8 @@ struct spd_cmd_hdr {
  */
 struct spd_cmd_init_resp {
 	u32 gpp_partition_id;
+	u32 rpmb_partition_id;
+	u32 reserved[2];
 	u32 type;
 	u32 serial_no_sz;
 	u8  serial_no[0];
@@ -107,10 +122,26 @@ struct spd_cmd_init_resp {
  * @rpmb_on: availability of the backing storage
  *      0 - RPMB partition is accessible
  *      1 - RPBM partition is not accessible
+ * @boot_on: availability of the boot partition
+ *      0 - boot partition is accessible
+ *      1 - boot partition is not accessible
+ * @reserved: reserved
+ * @critical_section: support of critical section message
+ *      0 - critical section off
+ *      1 - critical section on
+ * @buffer_dma_support: buffer dma support capability
+ *      0 - buffer dma support disabled
+ *      1 - buffer dma support enabled
+ * @reserved_capabilities: reserved
  */
 struct spd_cmd_storage_status_req {
 	u32 gpp_on;
 	u32 rpmb_on;
+	u32 boot_on;
+	u32 reserved[2];
+	u32 critical_section;
+	u32 buffer_dma_support : 1;
+	u32 reserved_capabilities : 31;
 } __packed;
 
 /**
diff --git a/drivers/misc/mei/spd/main.c b/drivers/misc/mei/spd/main.c
index 6b379171a136..ea3e5b88db58 100644
--- a/drivers/misc/mei/spd/main.c
+++ b/drivers/misc/mei/spd/main.c
@@ -99,7 +99,7 @@ static int mei_spd_remove(struct mei_cl_device *cldev)
 			     0x99, 0xcb, 0x9e, 0x22, 0x74, 0x97, 0x8c, 0xa8)
 
 static struct mei_cl_device_id mei_spd_tbl[] = {
-	{ .uuid = MEI_SPD_UUID,  .version = MEI_CL_VERSION_ANY},
+	{ .uuid = MEI_SPD_UUID,  .version = 0x3},
 	/* required last entry */
 	{ }
 };
diff --git a/drivers/misc/mei/spd/rpmb.c b/drivers/misc/mei/spd/rpmb.c
index ae5d5ac517ad..aa966e9b144f 100644
--- a/drivers/misc/mei/spd/rpmb.c
+++ b/drivers/misc/mei/spd/rpmb.c
@@ -18,7 +18,8 @@ static int mei_spd_rpmb_start(struct mei_spd *spd, struct rpmb_dev *rdev)
 	}
 
 	spd->rdev = rpmb_dev_get(rdev);
-	spd_dbg(spd, "rpmb partition created\n");
+	spd->rdev->target = spd->rpmb_partition_id;
+	spd_dbg(spd, "rpmb partition created, target %d\n", spd->rdev->target);
 	return 0;
 }
 
diff --git a/drivers/misc/mei/spd/spd.h b/drivers/misc/mei/spd/spd.h
index 4700a27b2f28..00a053c4db39 100644
--- a/drivers/misc/mei/spd/spd.h
+++ b/drivers/misc/mei/spd/spd.h
@@ -22,7 +22,8 @@ enum mei_spd_state {
  *
  * @cldev:     client bus device
  * @gpp:       GPP partition block device
- * @gpp_partition_id: GPP partition id (1-6)
+ * @gpp_partition_id: GPP partition id (0-7)
+ * @rpmb_partition_id: RPMB partition id (0-3)
  * @gpp_interface: gpp class interface for discovery
  * @dev_type:  storage device type
  * @dev_id_sz: device id size
@@ -39,7 +40,8 @@ enum mei_spd_state {
 struct mei_spd {
 	struct mei_cl_device *cldev;
 	struct block_device *gpp;
-	u32    gpp_partition_id;
+	u8     gpp_partition_id;
+	u8     rpmb_partition_id;
 	struct class_interface gpp_interface;
 	u32    dev_type;
 	u32    dev_id_sz;
-- 
2.17.1

