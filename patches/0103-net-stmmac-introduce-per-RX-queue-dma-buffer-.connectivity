From cc5ed5c86f697dd07cd3341b7b7f8efde0a8d418 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Wed, 2 Oct 2019 22:10:04 +0800
Subject: [PATCH 103/108] net: stmmac: introduce per RX queue dma buffer size

In preparation to support XDP that may have different DMA buffer
size allocated inside the kernel driver versus the buffer size
allocated from XDP ZC.

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 .../net/ethernet/stmicro/stmmac/ring_mode.c   |  3 +-
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  1 +
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 30 +++++++++++++++----
 3 files changed, 26 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/ring_mode.c b/drivers/net/ethernet/stmicro/stmmac/ring_mode.c
index 8ad900949dc8..059fb47a153e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/ring_mode.c
+++ b/drivers/net/ethernet/stmicro/stmmac/ring_mode.c
@@ -104,10 +104,9 @@ static unsigned int is_jumbo_frm(int len, int enh_desc)
 static void refill_desc3(void *priv_ptr, struct dma_desc *p)
 {
 	struct stmmac_rx_queue *rx_q = priv_ptr;
-	struct stmmac_priv *priv = rx_q->priv_data;
 
 	/* Fill DES3 in case of RING mode */
-	if (priv->dma_buf_sz == BUF_SIZE_16KiB)
+	if (rx_q->dma_buf_sz == BUF_SIZE_16KiB)
 		p->des3 = cpu_to_le32(le32_to_cpu(p->des2) + BUF_SIZE_8KiB);
 }
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index b607ecb9da40..b288cdf8b0bb 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -95,6 +95,7 @@ struct stmmac_rx_queue {
 	} state;
 	struct bpf_prog *xdp_prog;
 	struct xdp_rxq_info xdp_rxq;
+	unsigned int dma_buf_sz;
 };
 
 struct stmmac_channel {
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 492a49eed141..fd378bde789f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -1159,12 +1159,12 @@ static void stmmac_clear_rx_descriptors(struct stmmac_priv *priv, u32 queue)
 			stmmac_init_rx_desc(priv, &rx_q->dma_erx[i].basic,
 					priv->use_riwt, priv->mode,
 					(i == priv->dma_rx_size - 1),
-					priv->dma_buf_sz);
+					rx_q->dma_buf_sz);
 		else
 			stmmac_init_rx_desc(priv, &rx_q->dma_rx[i],
 					priv->use_riwt, priv->mode,
 					(i == priv->dma_rx_size - 1),
-					priv->dma_buf_sz);
+					rx_q->dma_buf_sz);
 }
 
 /**
@@ -1249,7 +1249,7 @@ static int stmmac_init_rx_buffers(struct stmmac_priv *priv, struct dma_desc *p,
 
 	buf->addr = page_pool_get_dma_addr(buf->page);
 	stmmac_set_desc_addr(priv, p, buf->addr);
-	if (priv->dma_buf_sz == BUF_SIZE_16KiB)
+	if (rx_q->dma_buf_sz == BUF_SIZE_16KiB)
 		stmmac_init_desc3(priv, p);
 
 	return 0;
@@ -1327,6 +1327,8 @@ static int init_dma_rx_desc_ring(struct stmmac_priv *priv, u32 queue,
 
 	xdp_rxq_info_unreg_mem_model(&rx_q->xdp_rxq);
 
+	rx_q->dma_buf_sz = priv->dma_buf_sz;
+
 	ret = xdp_rxq_info_reg_mem_model(&rx_q->xdp_rxq,
 					 MEM_TYPE_PAGE_POOL,
 					 rx_q->page_pool);
@@ -1640,10 +1642,11 @@ static int alloc_dma_rx_desc_resources_q(struct stmmac_priv *priv, u32 queue)
 
 	rx_q->queue_index = queue;
 	rx_q->priv_data = priv;
+	rx_q->dma_buf_sz = priv->dma_buf_sz;
 
 	pp_params.flags = PP_FLAG_DMA_MAP;
 	pp_params.pool_size = priv->dma_rx_size;
-	pp_params.order = DIV_ROUND_UP(priv->dma_buf_sz, PAGE_SIZE);
+	pp_params.order = DIV_ROUND_UP(rx_q->dma_buf_sz, PAGE_SIZE);
 	pp_params.nid = dev_to_node(priv->device);
 	pp_params.dev = priv->device;
 	pp_params.dma_dir = is_xdp ? DMA_BIDIRECTIONAL : DMA_FROM_DEVICE;
@@ -2029,11 +2032,13 @@ static void stmmac_dma_operation_mode(struct stmmac_priv *priv)
 
 	/* configure all channels */
 	for (chan = 0; chan < rx_channels_count; chan++) {
+		struct stmmac_rx_queue *rx_q = &priv->rx_queue[chan];
+
 		qmode = priv->plat->rx_queues_cfg[chan].mode_to_use;
 
 		stmmac_dma_rx_mode(priv, priv->ioaddr, rxmode, chan,
 				rxfifosz, qmode);
-		stmmac_set_dma_bfsize(priv, priv->ioaddr, priv->dma_buf_sz,
+		stmmac_set_dma_bfsize(priv, priv->ioaddr, rx_q->dma_buf_sz,
 				chan);
 	}
 
@@ -4064,7 +4069,7 @@ static inline void stmmac_rx_refill(struct stmmac_priv *priv, u32 queue)
 	enum dma_data_direction dma_dir;
 
 	dma_dir = page_pool_get_dma_dir(rx_q->page_pool);
-	len = DIV_ROUND_UP(priv->dma_buf_sz, PAGE_SIZE) * PAGE_SIZE;
+	len = DIV_ROUND_UP(rx_q->dma_buf_sz, PAGE_SIZE) * PAGE_SIZE;
 
 	while (dirty-- > 0) {
 		struct stmmac_rx_buffer *buf = &rx_q->buf_pool[entry];
@@ -4410,6 +4415,19 @@ static int stmmac_rx(struct stmmac_priv *priv, int limit, u32 queue)
 			prev_len = len;
 			len = stmmac_get_rx_frame_len(priv, p, coe);
 
+			/*  If frame length is greater than skb buffer size
+			 *  (preallocated during init) then the packet is
+			 *  ignored
+			 */
+			if (len > rx_q->dma_buf_sz) {
+				if (net_ratelimit())
+					netdev_err(priv->dev,
+						   "len %d larger than size (%d)\n",
+						   len, rx_q->dma_buf_sz);
+				priv->dev->stats.rx_length_errors++;
+				continue;
+			}
+
 			/* ACS is set; GMAC core strips PAD/FCS for IEEE 802.3
 			 * Type frames (LLC/LLC-SNAP)
 			 *
-- 
2.17.1

