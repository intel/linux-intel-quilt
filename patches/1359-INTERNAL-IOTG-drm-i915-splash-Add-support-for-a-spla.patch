From ee87b17e2396e175b082441796e80aee3a0074b5 Mon Sep 17 00:00:00 2001
From: James Xiong <james.xiong@intel.com>
Date: Fri, 16 Dec 2016 14:37:12 -0800
Subject: [PATCH 1359/2313] INTERNAL [IOTG] drm/i915/splash: Add support for a
 splash screen image

This feature loads a raw ARGB888 image from a firmware, maps it via the
GTT(copyless) and displays it in the given area of the specified connector,
the image is scaled if the source dimension is differnt than destination
rectangle.

Signed-off-by: James Xiong <james.xiong@intel.com>
Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
Reviewed-by: James Xiong <james.xiong@intel.com>
Reviewed-by: Bob Paauwe <bob.j.paauwe@intel.com>
Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
Change-Id: I985a65885b9fc91af20dfecf27ed173527a82d6c
---
 drivers/gpu/drm/i915/Makefile                |   1 +
 drivers/gpu/drm/i915/i915_drv.h              |  24 +++
 drivers/gpu/drm/i915/i915_gem_splash.c       | 144 ++++++++++++++
 drivers/gpu/drm/i915/i915_params.c           |   4 +
 drivers/gpu/drm/i915/i915_params.h           |   1 +
 drivers/gpu/drm/i915/intel_initial_modeset.c | 287 +++++++++++++++++++++++++--
 6 files changed, 446 insertions(+), 15 deletions(-)
 create mode 100644 drivers/gpu/drm/i915/i915_gem_splash.c

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index e07ffae..2da001c 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -45,6 +45,7 @@ i915-y += i915_cmd_parser.o \
 	  i915_gem_request.o \
 	  i915_gem_shrinker.o \
 	  i915_gem_stolen.o \
+	  i915_gem_splash.o \
 	  i915_gem_tiling.o \
 	  i915_gem_timeline.o \
 	  i915_gem_userptr.o \
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 1a8668d..e29c256 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1152,6 +1152,22 @@ struct i915_drrs {
 	enum drrs_support_type type;
 };
 
+struct splash_screen_info {
+	struct list_head link;
+	const struct firmware *fw;
+	struct drm_i915_gem_object *obj;
+	char *connector_name;
+	char *image_name;
+	int width;
+	int height;
+	int pitch;
+	int crtc_x;
+	int crtc_y;
+	int crtc_w;
+	int crtc_h;
+	struct drm_framebuffer *fb;
+};
+
 struct i915_psr {
 	struct mutex lock;
 	bool sink_support;
@@ -2377,6 +2393,8 @@ struct drm_i915_private {
 	struct intel_fbdev *fbdev;
 	struct work_struct fbdev_suspend_work;
 
+	struct list_head splash_list;
+
 	struct drm_property *broadcast_rgb_property;
 	struct drm_property *force_audio_property;
 
@@ -3368,6 +3386,12 @@ struct drm_i915_gem_object *
 i915_gem_object_create_from_data(struct drm_i915_private *dev_priv,
 				 const void *data, size_t size);
 void i915_gem_close_object(struct drm_gem_object *gem, struct drm_file *file);
+struct drm_i915_gem_object *i915_gem_object_create_splash_pages(
+					struct drm_i915_private *dev_priv,
+					struct page **pages, u32 n_pages);
+struct drm_i915_gem_object *i915_gem_object_create_splash(
+					struct drm_i915_private *dev_priv,
+					const u8 *ptr, u32 n_pages);
 void i915_gem_free_object(struct drm_gem_object *obj);
 
 static inline void i915_gem_drain_freed_objects(struct drm_i915_private *i915)
diff --git a/drivers/gpu/drm/i915/i915_gem_splash.c b/drivers/gpu/drm/i915/i915_gem_splash.c
new file mode 100644
index 0000000..317675a
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_gem_splash.c
@@ -0,0 +1,144 @@
+/*
+ * Copyright Â© 2016 Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ */
+
+#include <drm/drmP.h>
+#include <drm/i915_drm.h>
+#include "i915_drv.h"
+
+
+/*
+ * The memory was allocated outside of the i915 driver and is non-pagable,
+ * it can not be migrated by either the i915 driver or the OS.
+ *
+ * The scatter/gather table has already been initialized when the gem obj
+ * was created, nothing more needs to be done here, return 0 to
+ * indicate sg is ready.
+ */
+static struct sg_table *
+i915_gem_object_get_pages_splash(struct drm_i915_gem_object *obj)
+{
+	return NULL;
+}
+
+/* The sg is going to be freed when the gem obj itself is released. */
+static void i915_gem_object_put_pages_splash(struct drm_i915_gem_object *obj,
+					     struct sg_table *pages)
+{
+}
+
+
+	static void
+i915_gem_object_release_splash(struct drm_i915_gem_object *obj)
+{
+	if (obj->mm.pages) {
+		dma_unmap_sg(&obj->base.dev->pdev->dev,
+			     obj->mm.pages->sgl, obj->mm.pages->nents,
+			     DMA_TO_DEVICE);
+		sg_free_table(obj->mm.pages);
+		kfree(obj->mm.pages);
+		obj->mm.pages = NULL;
+	}
+}
+
+static const struct drm_i915_gem_object_ops i915_gem_object_splash_ops = {
+	.get_pages = i915_gem_object_get_pages_splash,
+	.put_pages = i915_gem_object_put_pages_splash,
+	.release = i915_gem_object_release_splash,
+};
+
+/* create a gem obj from a list of pages */
+struct drm_i915_gem_object *
+i915_gem_object_create_splash_pages(struct drm_i915_private *dev_priv,
+				    struct page **pages, u32 n_pages)
+{
+	struct drm_i915_gem_object *obj;
+	struct sg_table *st;
+	unsigned long size = n_pages << PAGE_SHIFT;
+
+	if (n_pages == 0)
+		return NULL;
+
+	obj = i915_gem_object_alloc(dev_priv);
+	if (obj == NULL)
+		return NULL;
+
+	st = kmalloc(sizeof(*st), GFP_KERNEL);
+	if (st == NULL)
+		goto cleanup;
+
+	drm_gem_private_object_init(&dev_priv->drm, &obj->base, size);
+	i915_gem_object_init(obj, &i915_gem_object_splash_ops);
+
+	if (sg_alloc_table_from_pages(st, pages, n_pages,
+				     0, size, GFP_KERNEL))
+		goto cleanup_st;
+
+	obj->mm.pages = st;
+	obj->base.read_domains = I915_GEM_DOMAIN_GTT;
+	obj->cache_level = HAS_LLC(dev_priv) ? I915_CACHE_LLC : I915_CACHE_NONE;
+
+	if (!dma_map_sg(&obj->base.dev->pdev->dev,
+		       obj->mm.pages->sgl, obj->mm.pages->nents,
+		       DMA_TO_DEVICE)) {
+		sg_free_table(obj->mm.pages);
+		obj->mm.pages = NULL;
+		goto cleanup_st;
+	}
+	return obj;
+
+cleanup_st:
+	kfree(st);
+cleanup:
+	i915_gem_object_free(obj);
+	return NULL;
+}
+
+/* create a gem obj from a virtual address */
+struct drm_i915_gem_object *
+i915_gem_object_create_splash(struct drm_i915_private *dev_priv,
+			      const u8 *ptr, u32 n_pages)
+{
+	struct page **pvec;
+	u32 i;
+	struct drm_i915_gem_object *obj = NULL;
+
+	if (ptr == NULL || n_pages == 0)
+		return NULL;
+
+	WARN_ON (!PAGE_ALIGNED(ptr));
+
+	pvec = kmalloc(n_pages * sizeof(struct page *),
+		       GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY);
+	if (pvec == NULL)
+		return NULL;
+
+	for (i = 0; i < n_pages; i++) {
+		*(pvec+i) = vmalloc_to_page(ptr);
+		ptr += PAGE_SIZE;
+	}
+
+	obj = i915_gem_object_create_splash_pages(dev_priv, pvec, n_pages);
+	kfree(pvec);
+	return obj;
+}
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 22f93b2..9e90d88 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -78,6 +78,7 @@ struct i915_params i915_modparams __read_mostly = {
 	.disable_gvt_fw_loading = true,
 	.gvt_workload_priority = 0,
 	.enable_initial_modeset = false,
+	.splash = NULL,
 };
 
 i915_param_named(modeset, int, 0400,
@@ -258,3 +259,6 @@ MODULE_PARM_DESC(gvt_workload_priority,
 module_param_named_unsafe(enable_initial_modeset, i915_modparams.enable_initial_modeset, bool, 0400);
 MODULE_PARM_DESC(enable_initial_modeset,
 		 "Do initial modeset (default : false)");
+
+i915_param_named_unsafe(splash, charp, 0400,
+	"Load a splash screen binary image for a specific display splash=<connector>:<image>:w,h,pitch,crtc_x,crtc_y,crtc_w,crtc_h");
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index 817a53e..331af77 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -54,6 +54,7 @@
 	func(int, edp_vswing); \
 	func(int, reset); \
 	func(unsigned int, inject_load_failure); \
+	func(char *, splash); \
 	/* leave bools at the end to not create holes */ \
 	func(bool, alpha_support); \
 	func(bool, enable_cmd_parser); \
diff --git a/drivers/gpu/drm/i915/intel_initial_modeset.c b/drivers/gpu/drm/i915/intel_initial_modeset.c
index 4883ba2..3043535 100644
--- a/drivers/gpu/drm/i915/intel_initial_modeset.c
+++ b/drivers/gpu/drm/i915/intel_initial_modeset.c
@@ -38,6 +38,7 @@
  * elapshed time before user space starts.
  */
 
+#include <linux/firmware.h>
 #include "intel_drv.h"
 #include "i915_drv.h"
 
@@ -114,6 +115,176 @@ static bool attach_crtc(struct drm_device *dev, struct drm_encoder *encoder,
 	return false;
 }
 
+static struct drm_framebuffer *
+intel_splash_screen_fb(struct drm_device *dev,
+		       struct splash_screen_info *splash_info)
+{
+	struct drm_framebuffer *fb;
+	struct drm_mode_fb_cmd2 mode_cmd = {0};
+
+	if (splash_info->obj == NULL)
+		return NULL;
+
+	mode_cmd.width = splash_info->width;
+	mode_cmd.height = splash_info->height;
+
+	mode_cmd.pitches[0] = splash_info->pitch;
+	mode_cmd.pixel_format = DRM_FORMAT_C8;
+
+	mutex_lock(&dev->struct_mutex);
+	fb = intel_framebuffer_create(splash_info->obj, &mode_cmd);
+	mutex_unlock(&dev->struct_mutex);
+
+	return fb;
+}
+
+static bool shared_image(struct drm_i915_private *dev_priv,
+			 char *image,
+			 struct splash_screen_info *info)
+{
+	struct splash_screen_info *splash_info;
+
+	list_for_each_entry(splash_info, &dev_priv->splash_list, link) {
+		if (strcmp(splash_info->image_name, image) == 0) {
+			info->image_name = NULL;
+			info->fw = NULL;
+			info->obj = splash_info->obj;
+			return true;
+		}
+	}
+	return false;
+}
+
+static struct splash_screen_info *match_splash_info(
+					struct drm_i915_private *dev_priv,
+					char* name)
+{
+	struct splash_screen_info *splash_info, *info = NULL;
+	list_for_each_entry(splash_info, &dev_priv->splash_list, link) {
+		if (strcmp(splash_info->connector_name, name) == 0)
+			info = splash_info;
+	}
+	return info;
+}
+
+static void intel_splash_screen_init(struct drm_device *dev)
+{
+	struct drm_i915_private *dev_priv = to_i915(dev);
+	struct splash_screen_info *splash_info = NULL;
+	char *splash_dup = NULL;
+	char *splash_str = NULL;
+	char *sep;
+	u32 fw_npages;
+	char *splash = i915_modparams.splash;
+
+	INIT_LIST_HEAD(&dev_priv->splash_list);
+
+	if (!splash)
+		return;
+
+	splash_dup = kstrdup(splash, GFP_KERNEL);
+	if (!splash_dup)
+		goto fail;
+	splash_str = splash_dup;
+
+	/*
+	 * The loop condition find the connector name portion of the
+	 * string.  Once we have that, we parse the following fields
+	 * from the string:
+	 *  Image data file name, image data width, image data height,
+	 *  crtc rectangle (x, y, w, h).
+	 * Then the loop condition will execute again to get the next
+	 * connector name.
+	 */
+	while ((sep = strchr(splash_str, ':'))) {
+		splash_info = kzalloc(sizeof(struct splash_screen_info),
+				      GFP_KERNEL);
+		if (splash_info == NULL)
+			goto fail;
+
+		*sep = '\0';
+		splash_info->connector_name = kstrdup(splash_str, GFP_KERNEL);
+		if (!splash_info->connector_name)
+			goto fail;
+		splash_str = sep + 1;
+
+		/*
+		 * Pull firmware file name from string and check to see
+		 * if this image has been previously loaded.  request
+		 * firmware only needs to be called once for each file.
+		 */
+		sep = strchr(splash_str, ':');
+		if (sep == NULL)
+			goto fail;
+
+		*sep = '\0';
+
+		if (!shared_image(dev_priv, splash_str, splash_info)) {
+			splash_info->image_name = kstrdup(splash_str,
+							  GFP_KERNEL);
+			if (!splash_info->image_name)
+				goto fail;
+			request_firmware(&splash_info->fw, splash_str,
+					 &dev_priv->drm.pdev->dev);
+			if (splash_info->fw == NULL)
+				goto fail;
+		}
+		splash_str = sep + 1;
+
+		/* Pull splash screen width, height, crtc */
+		sscanf(splash_str, "%d,%d,%d,%d,%d,%d,%d",
+					&splash_info->width,
+					&splash_info->height,
+					&splash_info->pitch,
+					&splash_info->crtc_x,
+					&splash_info->crtc_y,
+					&splash_info->crtc_w,
+					&splash_info->crtc_h);
+
+		/* Only do this we haven't mapped this firmware image before */
+		if (splash_info->fw) {
+			/*
+			 * If splash image is baked into the kernel, we just get
+			 * a pointer.  Otherwise we'll get a list of pages.
+			 */
+			fw_npages = DIV_ROUND_UP_ULL(splash_info->fw->size,
+						     PAGE_SIZE);
+			if (splash_info->fw->pages == NULL)
+				splash_info->obj = i915_gem_object_create_splash(
+					dev_priv,
+					splash_info->fw->data,
+					fw_npages);
+			else
+				splash_info->obj = i915_gem_object_create_splash_pages(
+					dev_priv,
+					splash_info->fw->pages, fw_npages);
+		}
+
+		list_add_tail(&splash_info->link, &dev_priv->splash_list);
+
+		/* move to the next entry, break if reaching the end */
+		splash_str = strchr(splash_str, ':');
+		if(splash_str != NULL)
+			splash_str += 1;
+		else
+			break;
+	}
+
+	kfree(splash_dup);
+	return;
+
+fail:
+	/* Clean up failed entry data */
+	if (splash_info) {
+		release_firmware(splash_info->fw);
+		kfree(splash_info->connector_name);
+		kfree(splash_info->image_name);
+	}
+	kfree(splash_info);
+	kfree(splash_dup);
+	return;
+}
+
 static struct drm_display_mode *get_modeline(struct drm_i915_private *dev_priv,
 					     struct drm_connector *connector,
 					     int width, int height)
@@ -209,12 +380,18 @@ static int update_connector_state(struct drm_atomic_state *state,
 }
 
 static int update_primary_plane_state(struct drm_atomic_state *state,
+				      struct splash_screen_info *splash_info,
 				      struct drm_crtc *crtc,
-				      struct drm_display_mode *mode,
-				      struct drm_framebuffer *fb)
+				      struct drm_display_mode *mode)
 {
 	int hdisplay, vdisplay;
 	struct drm_plane_state *primary_state;
+	struct drm_property_blob *blob = NULL;
+	struct drm_color_lut *blob_data;
+	struct drm_crtc_state *crtc_state;
+	struct drm_device *dev = crtc->dev;
+	uint32_t i, palette_size;
+	const char *palette_data;
 	int ret;
 
 	primary_state = drm_atomic_get_plane_state(state, crtc->primary);
@@ -222,28 +399,88 @@ static int update_primary_plane_state(struct drm_atomic_state *state,
 	if (ret)
 		return ret;
 	drm_mode_get_hv_timing(mode, &hdisplay, &vdisplay);
-	drm_atomic_set_fb_for_plane(primary_state, fb);
-	primary_state->crtc_x = 0;
-	primary_state->crtc_y = 0;
-	primary_state->crtc_w = hdisplay;
-	primary_state->crtc_h = vdisplay;
+	drm_atomic_set_fb_for_plane(primary_state, splash_info->fb);
+
+	primary_state->crtc_x = splash_info->crtc_x;
+	primary_state->crtc_y = splash_info->crtc_y;
+	primary_state->crtc_w = (splash_info->crtc_w) ?
+		splash_info->crtc_w : hdisplay;
+	primary_state->crtc_h = (splash_info->crtc_h) ?
+		splash_info->crtc_h : vdisplay;
+
 	primary_state->src_x = 0 << 16;
 	primary_state->src_y = 0 << 16;
-	primary_state->src_w = hdisplay << 16;
-	primary_state->src_h = vdisplay << 16;
+	primary_state->src_w = ((splash_info->width) ?
+		splash_info->width : hdisplay) << 16;
+	primary_state->src_h = ((splash_info->height) ?
+		splash_info->height : vdisplay) << 16;
 	primary_state->rotation = DRM_MODE_ROTATE_0;
 
+	crtc_state = drm_atomic_get_crtc_state(state, crtc);
+
+	/* Color palette is appended after image data, it uses 24-bits for each index entry */
+	palette_size = (splash_info->fw->size - (splash_info->width * splash_info->height)) / 3;
+	printk("Splash size %ld, palette size %d\n", splash_info->fw->size, palette_size);
+	if (0 == palette_size) {
+		DRM_ERROR("Splash image does not contain color palette data\n");
+		return -1;
+	}
+
+	if (palette_size > 256) {
+		DRM_ERROR("Splash image color palette too big\n");
+		return -1;
+	}
+
+	/* i915 expects that palette color will be of 256 size */
+	blob = drm_property_create_blob(dev, sizeof(struct drm_color_lut) * 256, NULL);
+
+	if (IS_ERR(blob)) {
+		blob = NULL;
+		return -1;
+	}
+
+	palette_data = &splash_info->fw->data[splash_info->width * splash_info->height];
+
+	blob_data = (struct drm_color_lut *) blob->data;
+	for (i = 0; i < palette_size; i++) {
+		blob_data[i].red = (*palette_data++) << 8;
+		blob_data[i].green = (*palette_data++) << 8;
+		blob_data[i].blue = (*palette_data++) << 8;
+	}
+
+	drm_atomic_crtc_set_property(crtc, crtc_state, state->dev->mode_config.gamma_lut_property, blob->base.id);
+
 	return 0;
 }
 
+static void create_splash_fb(struct drm_device *dev,
+				struct splash_screen_info *splash)
+{
+	struct splash_screen_info *splash_info;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	splash->fb = intel_splash_screen_fb(dev, splash);
+	if (IS_ERR(splash->fb))
+		splash->fb = NULL;
+
+	if (splash->fb)
+		list_for_each_entry(splash_info, &dev_priv->splash_list, link)
+			if (splash->obj == splash_info->obj &&
+			    splash != splash_info) {
+				splash_info->fb = splash->fb;
+				drm_framebuffer_reference(splash_info->fb);
+			}
+}
+
 static int update_atomic_state(struct drm_device *dev,
 			       struct drm_atomic_state *state,
 			       struct drm_connector *connector,
 			       struct drm_display_mode *mode)
 {
-	struct drm_framebuffer *fb = NULL;
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_crtc *crtc;
 	int ret;
+	struct splash_screen_info *splash_info;
 
 	if (get_encoder(connector))
 		crtc = get_encoder(connector)->crtc;
@@ -259,11 +496,18 @@ static int update_atomic_state(struct drm_device *dev,
 	if (ret)
 		return ret;
 
-	/* Set up primary plane if a framebuffer is allocated */
-	if (fb) {
-		ret = update_primary_plane_state(state, crtc, mode, fb);
-		if (ret)
-			return ret;
+	/* set up primary plane if a splash screen is requested */
+	splash_info = match_splash_info(dev_priv, connector->name);
+	if (splash_info) {
+		if (splash_info->fb == NULL)
+			create_splash_fb(dev, splash_info);
+		if (splash_info->fb) {
+			ret = update_primary_plane_state(state,
+							 splash_info,
+							 crtc, mode);
+			if (ret)
+				return ret;
+		}
 	}
 
 	return 0;
@@ -318,6 +562,8 @@ static void modeset_config_fn(struct work_struct *work)
 	struct drm_encoder *encoder;
 	struct drm_display_mode *mode;
 
+	intel_splash_screen_init(dev);
+
 	memset(connector_mode, 0, sizeof(connector_mode));
 	mutex_lock(&dev->mode_config.mutex);
 	drm_connector_list_iter_begin(dev, &conn_iter);
@@ -481,7 +727,18 @@ static void initial_mode_destroy(struct drm_device *dev)
 void intel_initial_mode_config_fini(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = to_i915(dev);
+	struct splash_screen_info *splash_info, *tmp;
 
 	flush_work(&dev_priv->initial_modeset_work);
 	initial_mode_destroy(dev);
+
+	list_for_each_entry_safe(splash_info, tmp,
+				 &dev_priv->splash_list, link) {
+		if (splash_info->fb)
+			drm_framebuffer_unreference(splash_info->fb);
+		release_firmware(splash_info->fw);
+		kfree(splash_info->connector_name);
+		kfree(splash_info->image_name);
+		kfree(splash_info);
+	}
 }
-- 
2.7.4

