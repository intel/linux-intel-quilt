From 57f2d38c5ddcc80c0e1419107c16b9cfb8c22648 Mon Sep 17 00:00:00 2001
From: "Song, Yoong Siang" <yoong.siang.song@intel.com>
Date: Wed, 19 May 2021 17:20:14 +0800
Subject: [PATCH 5/5] net: stmmac: Schedule Rx NAPI in Network Proxy exit flow

Rx NAPI is not run after agent-to-host packets are copied into socket
buffer and call napi_gro_receive(). Therefore, network stack will not
receive any of the agent-to-host packets until there is incoming packet
which will trigger the Rx NAPI.

Therefore, this commit adds Rx NAPI scheduling in the end of Network
Proxy exit flow. Besides, this commit uses napi_alloc_skb() and
skb_record_rx_queue() in agent-to-host packet submission so that it is
aligned with stmmac_rx().

Fixes: f3aa5c1df9e1 ("net: stmmac: add network proxy support")
Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_netproxy.c  | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
index 6bee51850622..bfa5cae67062 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
@@ -74,6 +74,7 @@ irqreturn_t netproxy_isr_thread(int irq, void *dev_id)
 	int i;
 	void __iomem *pkt_content;
 	void __iomem *a2h_mem_ptr = priv->ioaddr + NETWORK_PROXY_SHMEM_OFFSET;
+	unsigned long flags;
 	u32 value;
 
 	/* Get A2H memory pool header */
@@ -97,9 +98,7 @@ irqreturn_t netproxy_isr_thread(int irq, void *dev_id)
 			goto err_skb;
 		}
 
-		skb = __netdev_alloc_skb_ip_align(priv->dev,
-						  a2h_pkt_hdr.pkt_len,
-						  GFP_KERNEL);
+		skb = napi_alloc_skb(&ch->rx_napi, a2h_pkt_hdr.pkt_len);
 		if (!skb) {
 			netdev_err(priv->dev,
 				   "Netprox failed to submit a2h packets.\n");
@@ -114,7 +113,9 @@ irqreturn_t netproxy_isr_thread(int irq, void *dev_id)
 		skb->ip_summed = CHECKSUM_UNNECESSARY;
 
 		/* Submit skbuf to queue 0 */
+		skb_record_rx_queue(skb, 0);
 		napi_gro_receive(&ch->rx_napi, skb);
+		skb = NULL;
 
 		/* Move the pointer the next A2H packet header */
 		a2h_mem_ptr += NP_A2H_PKT_MAX + a2h_pkt_hdr_len;
@@ -138,6 +139,13 @@ irqreturn_t netproxy_isr_thread(int irq, void *dev_id)
 
 	netif_device_attach(ndev);
 
+	if (napi_schedule_prep(&ch->rx_napi)) {
+		spin_lock_irqsave(&ch->lock, flags);
+		stmmac_disable_dma_irq(priv, priv->ioaddr, 0, 1, 0);
+		spin_unlock_irqrestore(&ch->lock, flags);
+		__napi_schedule_irqoff(&ch->rx_napi);
+	}
+
 	return IRQ_HANDLED;
 }
 
-- 
2.17.1

