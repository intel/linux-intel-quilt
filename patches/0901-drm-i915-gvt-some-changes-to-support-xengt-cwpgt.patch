From 4b408bdf7fcd0b06ff300ac848ef79b81fbaa01c Mon Sep 17 00:00:00 2001
From: Min He <min.he@intel.com>
Date: Fri, 22 Dec 2017 12:57:20 +0800
Subject: [PATCH 0901/2328] drm/i915/gvt: some changes to support xengt/cwpgt

1. Set guest ppgtt entry in ppgtt_handle_guest_write_page_table_bytes()
2. Some check in opregion.c to avoid null pointer access when there's no
opregion in host.

Change-Id: Ic6e46561f58eec1a17fb8d5bd9c5dd76d32b5350
Signed-off-by: Min He <min.he@intel.com>
Reviewed-by: Jiang, Fei <fei.jiang@intel.com>
Reviewed-by: Dong, Eddie <eddie.dong@intel.com>
Tested-by: Dong, Eddie <eddie.dong@intel.com>
---
 drivers/gpu/drm/i915/gvt/gtt.c      |  2 ++
 drivers/gpu/drm/i915/gvt/opregion.c | 36 ++++++++++++++++++++++++++----------
 2 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/gtt.c b/drivers/gpu/drm/i915/gvt/gtt.c
index 1a1f7eb..a988947 100644
--- a/drivers/gpu/drm/i915/gvt/gtt.c
+++ b/drivers/gpu/drm/i915/gvt/gtt.c
@@ -1349,6 +1349,8 @@ static int ppgtt_handle_guest_write_page_table_bytes(void *gp,
 
 	index = (pa & (PAGE_SIZE - 1)) >> info->gtt_entry_size_shift;
 
+	/* Set guest ppgtt entry. Optional for KVMGT, but MUST for XENGT. */
+	intel_gvt_hypervisor_write_gpa(vgpu, pa, p_data, bytes);
 	ppgtt_get_guest_entry(spt, &we, index);
 
 	ops->test_pse(&we);
diff --git a/drivers/gpu/drm/i915/gvt/opregion.c b/drivers/gpu/drm/i915/gvt/opregion.c
index 3117991..68484b0 100644
--- a/drivers/gpu/drm/i915/gvt/opregion.c
+++ b/drivers/gpu/drm/i915/gvt/opregion.c
@@ -27,6 +27,7 @@
 
 static int init_vgpu_opregion(struct intel_vgpu *vgpu, u32 gpa)
 {
+	void __iomem *host_va = vgpu->gvt->opregion.opregion_va;
 	u8 *buf;
 	int i;
 
@@ -42,19 +43,20 @@ static int init_vgpu_opregion(struct intel_vgpu *vgpu, u32 gpa)
 	if (!vgpu_opregion(vgpu)->va)
 		return -ENOMEM;
 
-	memcpy(vgpu_opregion(vgpu)->va, vgpu->gvt->opregion.opregion_va,
-	       INTEL_GVT_OPREGION_SIZE);
+	if (vgpu->gvt->opregion.opregion_va) {
+		memcpy_fromio(vgpu_opregion(vgpu)->va, host_va,
+				INTEL_GVT_OPREGION_SIZE);
+
+		/* for unknown reason, the value in LID field is incorrect
+		 * which block the windows guest, so workaround it by force
+		 * setting it to "OPEN"
+		 */
+		buf = (u8 *)vgpu_opregion(vgpu)->va;
+		buf[INTEL_GVT_OPREGION_CLID] = 0x3;
+	}
 
 	for (i = 0; i < INTEL_GVT_OPREGION_PAGES; i++)
 		vgpu_opregion(vgpu)->gfn[i] = (gpa >> PAGE_SHIFT) + i;
-
-	/* for unknown reason, the value in LID field is incorrect
-	 * which block the windows guest, so workaround it by force
-	 * setting it to "OPEN"
-	 */
-	buf = (u8 *)vgpu_opregion(vgpu)->va;
-	buf[INTEL_GVT_OPREGION_CLID] = 0x3;
-
 	return 0;
 }
 
@@ -120,6 +122,12 @@ int intel_vgpu_init_opregion(struct intel_vgpu *vgpu, u32 gpa)
 	if (intel_gvt_host.hypervisor_type == INTEL_GVT_HYPERVISOR_XEN) {
 		gvt_dbg_core("emulate opregion from kernel\n");
 
+		/* clean opregion content before it could be reused. */
+		if (gpa == 0)
+			return 0;
+		if (vgpu_opregion(vgpu)->va)
+			intel_vgpu_clean_opregion(vgpu);
+
 		ret = init_vgpu_opregion(vgpu, gpa);
 		if (ret)
 			return ret;
@@ -139,6 +147,9 @@ int intel_vgpu_init_opregion(struct intel_vgpu *vgpu, u32 gpa)
  */
 void intel_gvt_clean_opregion(struct intel_gvt *gvt)
 {
+	if (!gvt->opregion.opregion_va)
+		return;
+
 	memunmap(gvt->opregion.opregion_va);
 	gvt->opregion.opregion_va = NULL;
 }
@@ -157,6 +168,11 @@ int intel_gvt_init_opregion(struct intel_gvt *gvt)
 	pci_read_config_dword(gvt->dev_priv->drm.pdev, INTEL_GVT_PCI_OPREGION,
 			&gvt->opregion.opregion_pa);
 
+	if (gvt->opregion.opregion_pa == 0) {
+		gvt_err("host opregion doesn't exist\n");
+		return 0;
+	}
+
 	gvt->opregion.opregion_va = memremap(gvt->opregion.opregion_pa,
 					     INTEL_GVT_OPREGION_SIZE, MEMREMAP_WB);
 	if (!gvt->opregion.opregion_va) {
-- 
2.7.4

