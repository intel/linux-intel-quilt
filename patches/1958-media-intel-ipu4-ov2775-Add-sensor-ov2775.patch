From d96e2e0b59d693675dbb16817ff3a9624e3437fe Mon Sep 17 00:00:00 2001
From: Leo Zhao <leo.zhao@intel.com>
Date: Mon, 4 Jun 2018 14:20:08 +0800
Subject: [PATCH 1958/2328] media: intel-ipu4: ov2775: Add sensor ov2775

Message for Open Source:
Sensor ov2775 driver enabling

Message for Internal:
[Feature] Sensor ov2775 driver enabling
[Root Cause/Changes] Sensor ov2775 driver enabling

Change-Id: Iccd101a32ed731c2c1e5a028ad47cbbb7b1f6dc2
Signed-off-by: Leo Zhao <leo.zhao@intel.com>
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 .../media/i2c/crlmodule/crl_ov2775_configuration.h | 2807 ++++++++++++++++++++
 drivers/media/i2c/crlmodule/crlmodule-data.c       |    2 +
 drivers/media/platform/intel/Kconfig               |    8 +-
 drivers/media/platform/intel/ipu4-bxt-p-pdata.c    |   40 +
 include/uapi/linux/crlmodule.h                     |    2 +-
 5 files changed, 2857 insertions(+), 2 deletions(-)
 create mode 100644 drivers/media/i2c/crlmodule/crl_ov2775_configuration.h

diff --git a/drivers/media/i2c/crlmodule/crl_ov2775_configuration.h b/drivers/media/i2c/crlmodule/crl_ov2775_configuration.h
new file mode 100644
index 0000000..282eb7e
--- /dev/null
+++ b/drivers/media/i2c/crlmodule/crl_ov2775_configuration.h
@@ -0,0 +1,2807 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2018 Intel Corporation
+ *
+ * Author: Leo Zhao <leo.zhao@intel.com>
+ *
+ */
+
+#ifndef __CRLMODULE_OV2775_CONFIGURATION_H_
+#define __CRLMODULE_OV2775_CONFIGURATION_H_
+
+#include "crlmodule-nvm.h"
+#include "crlmodule-sensor-ds.h"
+
+#define OV2775_CAPTURE_MODE_MAX 4
+
+/* default linear HCG 1928x1088 30fps mipi960 */
+static struct crl_register_write_rep ov2775_onetime_init_regset[] = {
+
+	/* missing below part yet
+	 *	64 0100 43
+	 *	64 0101 01
+	 *	64 1000 0f
+	 *	64 0102 81
+	 *	5c 0001 ad
+	 *	5c 0002 ad
+	 */
+	{0x3013, CRL_REG_LEN_08BIT, 0x01},
+	{0x0000, CRL_REG_LEN_DELAY, 0x0a},
+	{0x3000, CRL_REG_LEN_08BIT, 0x02},
+	{0x3001, CRL_REG_LEN_08BIT, 0x28},
+	{0x3002, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x01},
+	{0x3004, CRL_REG_LEN_08BIT, 0x02},
+	{0x3005, CRL_REG_LEN_08BIT, 0x26},
+	{0x3006, CRL_REG_LEN_08BIT, 0x00},
+	{0x3007, CRL_REG_LEN_08BIT, 0x07},
+	{0x3008, CRL_REG_LEN_08BIT, 0x01},
+	{0x3009, CRL_REG_LEN_08BIT, 0x00},
+	{0x300c, CRL_REG_LEN_08BIT, 0x6c},
+	{0x300e, CRL_REG_LEN_08BIT, 0x80},
+	{0x300f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3012, CRL_REG_LEN_08BIT, 0x00},
+	{0x3013, CRL_REG_LEN_08BIT, 0x00},
+	{0x3014, CRL_REG_LEN_08BIT, 0xc4},
+	{0x3015, CRL_REG_LEN_08BIT, 0x00},
+	{0x3017, CRL_REG_LEN_08BIT, 0x00},
+	{0x3018, CRL_REG_LEN_08BIT, 0x00},
+	{0x3019, CRL_REG_LEN_08BIT, 0x00},
+	{0x301a, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0x0e},
+	{0x301e, CRL_REG_LEN_08BIT, 0x17},
+	{0x301f, CRL_REG_LEN_08BIT, 0xe1},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x3031, CRL_REG_LEN_08BIT, 0x62},
+	{0x3032, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3033, CRL_REG_LEN_08BIT, 0x30},
+	{0x3034, CRL_REG_LEN_08BIT, 0x3f},
+	{0x3035, CRL_REG_LEN_08BIT, 0x5f},
+	{0x3036, CRL_REG_LEN_08BIT, 0x02},
+	{0x3037, CRL_REG_LEN_08BIT, 0x9f},
+	{0x3038, CRL_REG_LEN_08BIT, 0x04},
+	{0x3039, CRL_REG_LEN_08BIT, 0xb7},
+	{0x303a, CRL_REG_LEN_08BIT, 0x04},
+	{0x303b, CRL_REG_LEN_08BIT, 0x07},
+	{0x303c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x303d, CRL_REG_LEN_08BIT, 0x00},
+	{0x303e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x303f, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3040, CRL_REG_LEN_08BIT, 0xf3},
+	{0x3041, CRL_REG_LEN_08BIT, 0x29},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf6},
+	{0x3043, CRL_REG_LEN_08BIT, 0x65},
+	{0x3044, CRL_REG_LEN_08BIT, 0x06},
+	{0x3045, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3046, CRL_REG_LEN_08BIT, 0x59},
+	{0x3047, CRL_REG_LEN_08BIT, 0x07},
+	{0x3048, CRL_REG_LEN_08BIT, 0x82},
+	{0x3049, CRL_REG_LEN_08BIT, 0xcf},
+	{0x304a, CRL_REG_LEN_08BIT, 0x12},
+	{0x304b, CRL_REG_LEN_08BIT, 0x40},
+	{0x304c, CRL_REG_LEN_08BIT, 0x33},
+	{0x304d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x304e, CRL_REG_LEN_08BIT, 0x0b},
+	{0x304f, CRL_REG_LEN_08BIT, 0x3d},
+	{0x3050, CRL_REG_LEN_08BIT, 0x10},
+	{0x3060, CRL_REG_LEN_08BIT, 0x00},
+	{0x3061, CRL_REG_LEN_08BIT, 0x64},
+	{0x3062, CRL_REG_LEN_08BIT, 0x00},
+	{0x3063, CRL_REG_LEN_08BIT, 0xe4},
+	{0x3066, CRL_REG_LEN_08BIT, 0x80},
+	{0x3080, CRL_REG_LEN_08BIT, 0x00},
+	{0x3081, CRL_REG_LEN_08BIT, 0x00},
+	{0x3082, CRL_REG_LEN_08BIT, 0x01},
+	{0x3083, CRL_REG_LEN_08BIT, 0xe3},
+	{0x3084, CRL_REG_LEN_08BIT, 0x06},
+	{0x3085, CRL_REG_LEN_08BIT, 0x00},
+	{0x3086, CRL_REG_LEN_08BIT, 0x10},
+	{0x3087, CRL_REG_LEN_08BIT, 0x10},
+	{0x3089, CRL_REG_LEN_08BIT, 0x00},
+	{0x308a, CRL_REG_LEN_08BIT, 0x01},
+	{0x3093, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a4, CRL_REG_LEN_08BIT, 0x07},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x8f},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x47},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x30aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ac, CRL_REG_LEN_08BIT, 0x07},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x90},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x48},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b1, CRL_REG_LEN_08BIT, 0x7e},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x65},
+	{0x30b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x10},
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x30ba, CRL_REG_LEN_08BIT, 0x10},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bd, CRL_REG_LEN_08BIT, 0x03},
+	{0x30be, CRL_REG_LEN_08BIT, 0x5c},
+	{0x30bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c0, CRL_REG_LEN_08BIT, 0x05},
+	{0x30c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c2, CRL_REG_LEN_08BIT, 0x20},
+	{0x30c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c4, CRL_REG_LEN_08BIT, 0x4a},
+	{0x30c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d3, CRL_REG_LEN_08BIT, 0x80},
+	{0x30d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x30d9, CRL_REG_LEN_08BIT, 0x09},
+	{0x30da, CRL_REG_LEN_08BIT, 0x64},
+	{0x30dd, CRL_REG_LEN_08BIT, 0x00},
+	{0x30de, CRL_REG_LEN_08BIT, 0x16},
+	{0x30df, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e0, CRL_REG_LEN_08BIT, 0x17},
+	{0x30e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e2, CRL_REG_LEN_08BIT, 0x18},
+	{0x30e3, CRL_REG_LEN_08BIT, 0x10},
+	{0x30e4, CRL_REG_LEN_08BIT, 0x04},
+	{0x30e5, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30e9, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x30eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ec, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ed, CRL_REG_LEN_08BIT, 0x00},
+	{0x3101, CRL_REG_LEN_08BIT, 0x00},
+	{0x3102, CRL_REG_LEN_08BIT, 0x00},
+	{0x3103, CRL_REG_LEN_08BIT, 0x00},
+	{0x3104, CRL_REG_LEN_08BIT, 0x00},
+	{0x3105, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3106, CRL_REG_LEN_08BIT, 0x87},
+	{0x3107, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3108, CRL_REG_LEN_08BIT, 0x9d},
+	{0x3109, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310a, CRL_REG_LEN_08BIT, 0x8d},
+	{0x310b, CRL_REG_LEN_08BIT, 0x6a},
+	{0x310c, CRL_REG_LEN_08BIT, 0x3a},
+	{0x310d, CRL_REG_LEN_08BIT, 0x5a},
+	{0x310e, CRL_REG_LEN_08BIT, 0x00},
+	{0x3120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3121, CRL_REG_LEN_08BIT, 0x00},
+	{0x3122, CRL_REG_LEN_08BIT, 0x00},
+	{0x3123, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3124, CRL_REG_LEN_08BIT, 0x00},
+	{0x3125, CRL_REG_LEN_08BIT, 0x70},
+	{0x3126, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3127, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3128, CRL_REG_LEN_08BIT, 0x00},
+	{0x3129, CRL_REG_LEN_08BIT, 0x3a},
+	{0x312a, CRL_REG_LEN_08BIT, 0x02},
+	{0x312b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312c, CRL_REG_LEN_08BIT, 0x00},
+	{0x312d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x312e, CRL_REG_LEN_08BIT, 0x1d},
+	{0x312f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3130, CRL_REG_LEN_08BIT, 0x00},
+	{0x3131, CRL_REG_LEN_08BIT, 0x00},
+	{0x3132, CRL_REG_LEN_08BIT, 0x00},
+	{0x3140, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3141, CRL_REG_LEN_08BIT, 0x03},
+	{0x3142, CRL_REG_LEN_08BIT, 0x00},
+	{0x3143, CRL_REG_LEN_08BIT, 0x00},
+	{0x3144, CRL_REG_LEN_08BIT, 0x00},
+	{0x3145, CRL_REG_LEN_08BIT, 0x00},
+	{0x3146, CRL_REG_LEN_08BIT, 0x00},
+	{0x3147, CRL_REG_LEN_08BIT, 0x00},
+	{0x3148, CRL_REG_LEN_08BIT, 0x00},
+	{0x3149, CRL_REG_LEN_08BIT, 0x00},
+	{0x314a, CRL_REG_LEN_08BIT, 0x00},
+	{0x314b, CRL_REG_LEN_08BIT, 0x00},
+	{0x314c, CRL_REG_LEN_08BIT, 0x00},
+	{0x314d, CRL_REG_LEN_08BIT, 0x00},
+	{0x314e, CRL_REG_LEN_08BIT, 0x1c},
+	{0x314f, CRL_REG_LEN_08BIT, 0xff},
+	{0x3150, CRL_REG_LEN_08BIT, 0xff},
+	{0x3151, CRL_REG_LEN_08BIT, 0xff},
+	{0x3152, CRL_REG_LEN_08BIT, 0x10},
+	{0x3153, CRL_REG_LEN_08BIT, 0x10},
+	{0x3154, CRL_REG_LEN_08BIT, 0x10},
+	{0x3155, CRL_REG_LEN_08BIT, 0x00},
+	{0x3156, CRL_REG_LEN_08BIT, 0x03},
+	{0x3157, CRL_REG_LEN_08BIT, 0x00},
+	{0x3158, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3159, CRL_REG_LEN_08BIT, 0xff},
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3160, CRL_REG_LEN_08BIT, 0x00},
+	{0x3161, CRL_REG_LEN_08BIT, 0x40},
+	{0x3162, CRL_REG_LEN_08BIT, 0x00},
+	{0x3163, CRL_REG_LEN_08BIT, 0x40},
+	{0x3164, CRL_REG_LEN_08BIT, 0x00},
+	{0x3165, CRL_REG_LEN_08BIT, 0x40},
+	{0x3190, CRL_REG_LEN_08BIT, 0x08},
+	{0x3191, CRL_REG_LEN_08BIT, 0x99},
+	{0x3193, CRL_REG_LEN_08BIT, 0x08},
+	{0x3194, CRL_REG_LEN_08BIT, 0x13},
+	{0x3195, CRL_REG_LEN_08BIT, 0x33},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x10},
+	{0x3198, CRL_REG_LEN_08BIT, 0x00},
+	{0x3199, CRL_REG_LEN_08BIT, 0x7f},
+	{0x319a, CRL_REG_LEN_08BIT, 0x80},
+	{0x319b, CRL_REG_LEN_08BIT, 0xff},
+	{0x319c, CRL_REG_LEN_08BIT, 0x80},
+	{0x319d, CRL_REG_LEN_08BIT, 0xbf},
+	{0x319e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x319f, CRL_REG_LEN_08BIT, 0xff},
+	{0x31a0, CRL_REG_LEN_08BIT, 0x24},
+	{0x31a1, CRL_REG_LEN_08BIT, 0x55},
+	{0x31a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b2, CRL_REG_LEN_08BIT, 0x02},
+	{0x31b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b5, CRL_REG_LEN_08BIT, 0x01},
+	{0x31b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x31ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d0, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d1, CRL_REG_LEN_08BIT, 0x34},
+	{0x31d2, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d4, CRL_REG_LEN_08BIT, 0x2d},
+	{0x31d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d6, CRL_REG_LEN_08BIT, 0x01},
+	{0x31d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x31d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x31d9, CRL_REG_LEN_08BIT, 0x64},
+	{0x31da, CRL_REG_LEN_08BIT, 0x00},
+	{0x31db, CRL_REG_LEN_08BIT, 0x30},
+	{0x31dc, CRL_REG_LEN_08BIT, 0x04},
+	{0x31dd, CRL_REG_LEN_08BIT, 0x69},
+	{0x31de, CRL_REG_LEN_08BIT, 0x0a},
+	{0x31df, CRL_REG_LEN_08BIT, 0x3c},
+	{0x31e0, CRL_REG_LEN_08BIT, 0x04},
+	{0x31e1, CRL_REG_LEN_08BIT, 0x32},
+	{0x31e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e4, CRL_REG_LEN_08BIT, 0x08},
+	{0x31e5, CRL_REG_LEN_08BIT, 0x80},
+	{0x31e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x31e7, CRL_REG_LEN_08BIT, 0x2c},
+	{0x31e8, CRL_REG_LEN_08BIT, 0x6c},
+	{0x31e9, CRL_REG_LEN_08BIT, 0xac},
+	{0x31ea, CRL_REG_LEN_08BIT, 0xec},
+	{0x31eb, CRL_REG_LEN_08BIT, 0x3f},
+	{0x31ec, CRL_REG_LEN_08BIT, 0x0f},
+	{0x31ed, CRL_REG_LEN_08BIT, 0x20},
+	{0x31ee, CRL_REG_LEN_08BIT, 0x04},
+	{0x31ef, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f0, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f1, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f3, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f4, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f5, CRL_REG_LEN_08BIT, 0x90},
+	{0x31f6, CRL_REG_LEN_08BIT, 0x04},
+	{0x31f7, CRL_REG_LEN_08BIT, 0x48},
+	{0x31f8, CRL_REG_LEN_08BIT, 0x07},
+	{0x31f9, CRL_REG_LEN_08BIT, 0x90},
+	{0x31fa, CRL_REG_LEN_08BIT, 0x04},
+	{0x31fb, CRL_REG_LEN_08BIT, 0x48},
+	{0x31fd, CRL_REG_LEN_08BIT, 0xcb},
+	{0x31fe, CRL_REG_LEN_08BIT, 0x0f},
+	{0x31ff, CRL_REG_LEN_08BIT, 0x03},
+	{0x3200, CRL_REG_LEN_08BIT, 0x00},
+	{0x3201, CRL_REG_LEN_08BIT, 0xff},
+	{0x3202, CRL_REG_LEN_08BIT, 0x00},
+	{0x3203, CRL_REG_LEN_08BIT, 0xff},
+	{0x3204, CRL_REG_LEN_08BIT, 0xff},
+	{0x3205, CRL_REG_LEN_08BIT, 0xff},
+	{0x3206, CRL_REG_LEN_08BIT, 0xff},
+	{0x3207, CRL_REG_LEN_08BIT, 0xff},
+	{0x3208, CRL_REG_LEN_08BIT, 0xff},
+	{0x3209, CRL_REG_LEN_08BIT, 0xff},
+	{0x320a, CRL_REG_LEN_08BIT, 0xff},
+	{0x320b, CRL_REG_LEN_08BIT, 0x1b},
+	{0x320c, CRL_REG_LEN_08BIT, 0x1f},
+	{0x320d, CRL_REG_LEN_08BIT, 0x1e},
+	{0x320e, CRL_REG_LEN_08BIT, 0x30},
+	{0x320f, CRL_REG_LEN_08BIT, 0x2d},
+	{0x3210, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3211, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3212, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3213, CRL_REG_LEN_08BIT, 0x24},
+	{0x3214, CRL_REG_LEN_08BIT, 0x22},
+	{0x3215, CRL_REG_LEN_08BIT, 0x00},
+	{0x3216, CRL_REG_LEN_08BIT, 0x04},
+	{0x3217, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3218, CRL_REG_LEN_08BIT, 0x6c},
+	{0x3219, CRL_REG_LEN_08BIT, 0xac},
+	{0x321a, CRL_REG_LEN_08BIT, 0xec},
+	{0x321b, CRL_REG_LEN_08BIT, 0x00},
+	{0x3230, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3231, CRL_REG_LEN_08BIT, 0x00},
+	{0x3232, CRL_REG_LEN_08BIT, 0x80},
+	{0x3233, CRL_REG_LEN_08BIT, 0x00},
+	{0x3234, CRL_REG_LEN_08BIT, 0x10},
+	{0x3235, CRL_REG_LEN_08BIT, 0xaa},
+	{0x3236, CRL_REG_LEN_08BIT, 0x55},
+	{0x3237, CRL_REG_LEN_08BIT, 0x99},
+	{0x3238, CRL_REG_LEN_08BIT, 0x66},
+	{0x3239, CRL_REG_LEN_08BIT, 0x08},
+	{0x323a, CRL_REG_LEN_08BIT, 0x88},
+	{0x323b, CRL_REG_LEN_08BIT, 0x00},
+	{0x323c, CRL_REG_LEN_08BIT, 0x00},
+	{0x323d, CRL_REG_LEN_08BIT, 0x03},
+	{0x3250, CRL_REG_LEN_08BIT, 0x33},
+	{0x3251, CRL_REG_LEN_08BIT, 0x00},
+	{0x3252, CRL_REG_LEN_08BIT, 0x20},
+	{0x3253, CRL_REG_LEN_08BIT, 0x00},
+	{0x3254, CRL_REG_LEN_08BIT, 0x00},
+	{0x3255, CRL_REG_LEN_08BIT, 0x01},
+	{0x3256, CRL_REG_LEN_08BIT, 0x00},
+	{0x3257, CRL_REG_LEN_08BIT, 0x00},
+	{0x3258, CRL_REG_LEN_08BIT, 0x00},
+	{0x3270, CRL_REG_LEN_08BIT, 0x01},
+	{0x3271, CRL_REG_LEN_08BIT, 0x60},
+	{0x3272, CRL_REG_LEN_08BIT, 0xc0},
+	{0x3273, CRL_REG_LEN_08BIT, 0x00},
+	{0x3274, CRL_REG_LEN_08BIT, 0x80},
+	{0x3275, CRL_REG_LEN_08BIT, 0x40},
+	{0x3276, CRL_REG_LEN_08BIT, 0x02},
+	{0x3277, CRL_REG_LEN_08BIT, 0x08},
+	{0x3278, CRL_REG_LEN_08BIT, 0x10},
+	{0x3279, CRL_REG_LEN_08BIT, 0x04},
+	{0x327a, CRL_REG_LEN_08BIT, 0x00},
+	{0x327b, CRL_REG_LEN_08BIT, 0x03},
+	{0x327c, CRL_REG_LEN_08BIT, 0x10},
+	{0x327d, CRL_REG_LEN_08BIT, 0x60},
+	{0x327e, CRL_REG_LEN_08BIT, 0xc0},
+	{0x327f, CRL_REG_LEN_08BIT, 0x06},
+	{0x3288, CRL_REG_LEN_08BIT, 0x10},
+	{0x3289, CRL_REG_LEN_08BIT, 0x00},
+	{0x328a, CRL_REG_LEN_08BIT, 0x08},
+	{0x328b, CRL_REG_LEN_08BIT, 0x00},
+	{0x328c, CRL_REG_LEN_08BIT, 0x04},
+	{0x328d, CRL_REG_LEN_08BIT, 0x00},
+	{0x328e, CRL_REG_LEN_08BIT, 0x02},
+	{0x328f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3290, CRL_REG_LEN_08BIT, 0x20},
+	{0x3291, CRL_REG_LEN_08BIT, 0x00},
+	{0x3292, CRL_REG_LEN_08BIT, 0x10},
+	{0x3293, CRL_REG_LEN_08BIT, 0x00},
+	{0x3294, CRL_REG_LEN_08BIT, 0x08},
+	{0x3295, CRL_REG_LEN_08BIT, 0x00},
+	{0x3296, CRL_REG_LEN_08BIT, 0x04},
+	{0x3297, CRL_REG_LEN_08BIT, 0x00},
+	{0x3298, CRL_REG_LEN_08BIT, 0x40},
+	{0x3299, CRL_REG_LEN_08BIT, 0x00},
+	{0x329a, CRL_REG_LEN_08BIT, 0x20},
+	{0x329b, CRL_REG_LEN_08BIT, 0x00},
+	{0x329c, CRL_REG_LEN_08BIT, 0x10},
+	{0x329d, CRL_REG_LEN_08BIT, 0x00},
+	{0x329e, CRL_REG_LEN_08BIT, 0x08},
+	{0x329f, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a0, CRL_REG_LEN_08BIT, 0x7f},
+	{0x32a1, CRL_REG_LEN_08BIT, 0xff},
+	{0x32a2, CRL_REG_LEN_08BIT, 0x40},
+	{0x32a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a4, CRL_REG_LEN_08BIT, 0x20},
+	{0x32a5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a6, CRL_REG_LEN_08BIT, 0x10},
+	{0x32a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ab, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ad, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ae, CRL_REG_LEN_08BIT, 0x00},
+	{0x32af, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x32b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x32ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bb, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x32be, CRL_REG_LEN_08BIT, 0x00},
+	{0x32bf, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c5, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x32c8, CRL_REG_LEN_08BIT, 0x87},
+	{0x32c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x3330, CRL_REG_LEN_08BIT, 0x03},
+	{0x3331, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3332, CRL_REG_LEN_08BIT, 0x02},
+	{0x3333, CRL_REG_LEN_08BIT, 0x24},
+	{0x3334, CRL_REG_LEN_08BIT, 0x00},
+	{0x3335, CRL_REG_LEN_08BIT, 0x00},
+	{0x3336, CRL_REG_LEN_08BIT, 0x00},
+	{0x3337, CRL_REG_LEN_08BIT, 0x00},
+	{0x3338, CRL_REG_LEN_08BIT, 0x03},
+	{0x3339, CRL_REG_LEN_08BIT, 0xc8},
+	{0x333a, CRL_REG_LEN_08BIT, 0x02},
+	{0x333b, CRL_REG_LEN_08BIT, 0x24},
+	{0x333c, CRL_REG_LEN_08BIT, 0x00},
+	{0x333d, CRL_REG_LEN_08BIT, 0x00},
+	{0x333e, CRL_REG_LEN_08BIT, 0x00},
+	{0x333f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3340, CRL_REG_LEN_08BIT, 0x03},
+	{0x3341, CRL_REG_LEN_08BIT, 0xc8},
+	{0x3342, CRL_REG_LEN_08BIT, 0x02},
+	{0x3343, CRL_REG_LEN_08BIT, 0x24},
+	{0x3344, CRL_REG_LEN_08BIT, 0x00},
+	{0x3345, CRL_REG_LEN_08BIT, 0x00},
+	{0x3346, CRL_REG_LEN_08BIT, 0x00},
+	{0x3347, CRL_REG_LEN_08BIT, 0x00},
+	{0x3348, CRL_REG_LEN_08BIT, 0x40},
+	{0x3349, CRL_REG_LEN_08BIT, 0x00},
+	{0x334a, CRL_REG_LEN_08BIT, 0x00},
+	{0x334b, CRL_REG_LEN_08BIT, 0x00},
+	{0x334c, CRL_REG_LEN_08BIT, 0x00},
+	{0x334d, CRL_REG_LEN_08BIT, 0x00},
+	{0x334e, CRL_REG_LEN_08BIT, 0x80},
+	{0x3360, CRL_REG_LEN_08BIT, 0x01},
+	{0x3361, CRL_REG_LEN_08BIT, 0x00},
+	{0x3362, CRL_REG_LEN_08BIT, 0x01},
+	{0x3363, CRL_REG_LEN_08BIT, 0x00},
+	{0x3364, CRL_REG_LEN_08BIT, 0x01},
+	{0x3365, CRL_REG_LEN_08BIT, 0x00},
+	{0x3366, CRL_REG_LEN_08BIT, 0x01},
+	{0x3367, CRL_REG_LEN_08BIT, 0x00},
+	{0x3368, CRL_REG_LEN_08BIT, 0x01},
+	{0x3369, CRL_REG_LEN_08BIT, 0x00},
+	{0x336a, CRL_REG_LEN_08BIT, 0x01},
+	{0x336b, CRL_REG_LEN_08BIT, 0x00},
+	{0x336c, CRL_REG_LEN_08BIT, 0x01},
+	{0x336d, CRL_REG_LEN_08BIT, 0x00},
+	{0x336e, CRL_REG_LEN_08BIT, 0x01},
+	{0x336f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3370, CRL_REG_LEN_08BIT, 0x01},
+	{0x3371, CRL_REG_LEN_08BIT, 0x00},
+	{0x3372, CRL_REG_LEN_08BIT, 0x01},
+	{0x3373, CRL_REG_LEN_08BIT, 0x00},
+	{0x3374, CRL_REG_LEN_08BIT, 0x01},
+	{0x3375, CRL_REG_LEN_08BIT, 0x00},
+	{0x3376, CRL_REG_LEN_08BIT, 0x01},
+	{0x3377, CRL_REG_LEN_08BIT, 0x00},
+	{0x3378, CRL_REG_LEN_08BIT, 0x00},
+	{0x3379, CRL_REG_LEN_08BIT, 0x00},
+	{0x337a, CRL_REG_LEN_08BIT, 0x00},
+	{0x337b, CRL_REG_LEN_08BIT, 0x00},
+	{0x337c, CRL_REG_LEN_08BIT, 0x00},
+	{0x337d, CRL_REG_LEN_08BIT, 0x00},
+	{0x337e, CRL_REG_LEN_08BIT, 0x00},
+	{0x337f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3380, CRL_REG_LEN_08BIT, 0x00},
+	{0x3381, CRL_REG_LEN_08BIT, 0x00},
+	{0x3382, CRL_REG_LEN_08BIT, 0x00},
+	{0x3383, CRL_REG_LEN_08BIT, 0x00},
+	{0x3384, CRL_REG_LEN_08BIT, 0x00},
+	{0x3385, CRL_REG_LEN_08BIT, 0x00},
+	{0x3386, CRL_REG_LEN_08BIT, 0x00},
+	{0x3387, CRL_REG_LEN_08BIT, 0x00},
+	{0x3388, CRL_REG_LEN_08BIT, 0x00},
+	{0x3389, CRL_REG_LEN_08BIT, 0x00},
+	{0x338a, CRL_REG_LEN_08BIT, 0x00},
+	{0x338b, CRL_REG_LEN_08BIT, 0x00},
+	{0x338c, CRL_REG_LEN_08BIT, 0x00},
+	{0x338d, CRL_REG_LEN_08BIT, 0x00},
+	{0x338e, CRL_REG_LEN_08BIT, 0x00},
+	{0x338f, CRL_REG_LEN_08BIT, 0x00},
+	{0x3390, CRL_REG_LEN_08BIT, 0x00},
+	{0x3391, CRL_REG_LEN_08BIT, 0x00},
+	{0x3392, CRL_REG_LEN_08BIT, 0x00},
+	{0x3393, CRL_REG_LEN_08BIT, 0x00},
+	{0x3394, CRL_REG_LEN_08BIT, 0x00},
+	{0x3395, CRL_REG_LEN_08BIT, 0x00},
+	{0x3396, CRL_REG_LEN_08BIT, 0x00},
+	{0x3397, CRL_REG_LEN_08BIT, 0x00},
+	{0x3398, CRL_REG_LEN_08BIT, 0x00},
+	{0x3399, CRL_REG_LEN_08BIT, 0x00},
+	{0x339a, CRL_REG_LEN_08BIT, 0x00},
+	{0x339b, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b1, CRL_REG_LEN_08BIT, 0x50},
+	{0x33b2, CRL_REG_LEN_08BIT, 0x01},
+	{0x33b3, CRL_REG_LEN_08BIT, 0xff},
+	{0x33b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0x33b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0x33b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x33b9, CRL_REG_LEN_08BIT, 0x00},
+	{0x33ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x33bb, CRL_REG_LEN_08BIT, 0x1f},
+	{0x33bc, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bd, CRL_REG_LEN_08BIT, 0x01},
+	{0x33be, CRL_REG_LEN_08BIT, 0x01},
+	{0x33bf, CRL_REG_LEN_08BIT, 0x01},
+	{0x33c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c1, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x33c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e0, CRL_REG_LEN_08BIT, 0x14},
+	{0x33e1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33e2, CRL_REG_LEN_08BIT, 0x02},
+	{0x33e3, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e5, CRL_REG_LEN_08BIT, 0x01},
+	{0x33e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x33e7, CRL_REG_LEN_08BIT, 0x04},
+	{0x33e8, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33e9, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ea, CRL_REG_LEN_08BIT, 0x02},
+	{0x33eb, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ec, CRL_REG_LEN_08BIT, 0x03},
+	{0x33ed, CRL_REG_LEN_08BIT, 0x01},
+	{0x33ee, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ef, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f0, CRL_REG_LEN_08BIT, 0x08},
+	{0x33f1, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f2, CRL_REG_LEN_08BIT, 0x04},
+	{0x33f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x33f4, CRL_REG_LEN_08BIT, 0x03},
+	{0x33f5, CRL_REG_LEN_08BIT, 0x14},
+	{0x33f6, CRL_REG_LEN_08BIT, 0x0f},
+	{0x33f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x33f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x33f9, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fa, CRL_REG_LEN_08BIT, 0x01},
+	{0x33fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x33fc, CRL_REG_LEN_08BIT, 0x04},
+	{0x33fd, CRL_REG_LEN_08BIT, 0x0c},
+	{0x33fe, CRL_REG_LEN_08BIT, 0x02},
+	{0x33ff, CRL_REG_LEN_08BIT, 0x02},
+	{0x3400, CRL_REG_LEN_08BIT, 0x02},
+	{0x3401, CRL_REG_LEN_08BIT, 0x03},
+	{0x3402, CRL_REG_LEN_08BIT, 0x01},
+	{0x3403, CRL_REG_LEN_08BIT, 0x02},
+	{0x3404, CRL_REG_LEN_08BIT, 0x08},
+	{0x3405, CRL_REG_LEN_08BIT, 0x08},
+	{0x3406, CRL_REG_LEN_08BIT, 0x04},
+	{0x3407, CRL_REG_LEN_08BIT, 0x04},
+	{0x3408, CRL_REG_LEN_08BIT, 0x00},
+	{0x3409, CRL_REG_LEN_08BIT, 0x03},
+	{0x340a, CRL_REG_LEN_08BIT, 0x14},
+	{0x340b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x340c, CRL_REG_LEN_08BIT, 0x04},
+	{0x340d, CRL_REG_LEN_08BIT, 0x02},
+	{0x340e, CRL_REG_LEN_08BIT, 0x01},
+	{0x340f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3410, CRL_REG_LEN_08BIT, 0x00},
+	{0x3411, CRL_REG_LEN_08BIT, 0x04},
+	{0x3412, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3413, CRL_REG_LEN_08BIT, 0x02},
+	{0x3414, CRL_REG_LEN_08BIT, 0x02},
+	{0x3415, CRL_REG_LEN_08BIT, 0x02},
+	{0x3416, CRL_REG_LEN_08BIT, 0x03},
+	{0x3417, CRL_REG_LEN_08BIT, 0x02},
+	{0x3418, CRL_REG_LEN_08BIT, 0x05},
+	{0x3419, CRL_REG_LEN_08BIT, 0x0a},
+	{0x341a, CRL_REG_LEN_08BIT, 0x08},
+	{0x341b, CRL_REG_LEN_08BIT, 0x04},
+	{0x341c, CRL_REG_LEN_08BIT, 0x04},
+	{0x341d, CRL_REG_LEN_08BIT, 0x00},
+	{0x341e, CRL_REG_LEN_08BIT, 0x03},
+	{0x3440, CRL_REG_LEN_08BIT, 0x00},
+	{0x3441, CRL_REG_LEN_08BIT, 0x00},
+	{0x3442, CRL_REG_LEN_08BIT, 0x00},
+	{0x3443, CRL_REG_LEN_08BIT, 0x00},
+	{0x3444, CRL_REG_LEN_08BIT, 0x02},
+	{0x3445, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3446, CRL_REG_LEN_08BIT, 0x02},
+	{0x3447, CRL_REG_LEN_08BIT, 0x08},
+	{0x3448, CRL_REG_LEN_08BIT, 0x00},
+	{0x3460, CRL_REG_LEN_08BIT, 0x40},
+	{0x3461, CRL_REG_LEN_08BIT, 0x40},
+	{0x3462, CRL_REG_LEN_08BIT, 0x40},
+	{0x3463, CRL_REG_LEN_08BIT, 0x40},
+	{0x3464, CRL_REG_LEN_08BIT, 0x03},
+	{0x3465, CRL_REG_LEN_08BIT, 0x01},
+	{0x3466, CRL_REG_LEN_08BIT, 0x01},
+	{0x3467, CRL_REG_LEN_08BIT, 0x02},
+	{0x3468, CRL_REG_LEN_08BIT, 0x30},
+	{0x3469, CRL_REG_LEN_08BIT, 0x00},
+	{0x346a, CRL_REG_LEN_08BIT, 0x33},
+	{0x346b, CRL_REG_LEN_08BIT, 0xbf},
+	{0x3480, CRL_REG_LEN_08BIT, 0x40},
+	{0x3481, CRL_REG_LEN_08BIT, 0x00},
+	{0x3482, CRL_REG_LEN_08BIT, 0x00},
+	{0x3483, CRL_REG_LEN_08BIT, 0x00},
+	{0x3484, CRL_REG_LEN_08BIT, 0x0d},
+	{0x3485, CRL_REG_LEN_08BIT, 0x00},
+	{0x3486, CRL_REG_LEN_08BIT, 0x00},
+	{0x3487, CRL_REG_LEN_08BIT, 0x00},
+	{0x3488, CRL_REG_LEN_08BIT, 0x00},
+	{0x3489, CRL_REG_LEN_08BIT, 0x00},
+	{0x348a, CRL_REG_LEN_08BIT, 0x00},
+	{0x348b, CRL_REG_LEN_08BIT, 0x04},
+	{0x348c, CRL_REG_LEN_08BIT, 0x00},
+	{0x348d, CRL_REG_LEN_08BIT, 0x01},
+	{0x348f, CRL_REG_LEN_08BIT, 0x01},
+	{0x3030, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3030, CRL_REG_LEN_08BIT, 0x02},
+	{0x7000, CRL_REG_LEN_08BIT, 0x58},
+	{0x7001, CRL_REG_LEN_08BIT, 0x7a},
+	{0x7002, CRL_REG_LEN_08BIT, 0x1a},
+	{0x7003, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7004, CRL_REG_LEN_08BIT, 0x03},
+	{0x7005, CRL_REG_LEN_08BIT, 0xda},
+	{0x7006, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7007, CRL_REG_LEN_08BIT, 0x03},
+	{0x7008, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7009, CRL_REG_LEN_08BIT, 0x06},
+	{0x700a, CRL_REG_LEN_08BIT, 0xe6},
+	{0x700b, CRL_REG_LEN_08BIT, 0xec},
+	{0x700c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700d, CRL_REG_LEN_08BIT, 0xff},
+	{0x700e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x700f, CRL_REG_LEN_08BIT, 0x73},
+	{0x7010, CRL_REG_LEN_08BIT, 0xda},
+	{0x7011, CRL_REG_LEN_08BIT, 0x72},
+	{0x7012, CRL_REG_LEN_08BIT, 0x76},
+	{0x7013, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7014, CRL_REG_LEN_08BIT, 0xee},
+	{0x7015, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7016, CRL_REG_LEN_08BIT, 0xac},
+	{0x7017, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7018, CRL_REG_LEN_08BIT, 0xac},
+	{0x7019, CRL_REG_LEN_08BIT, 0xd1},
+	{0x701a, CRL_REG_LEN_08BIT, 0x50},
+	{0x701b, CRL_REG_LEN_08BIT, 0xac},
+	{0x701c, CRL_REG_LEN_08BIT, 0xd2},
+	{0x701d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x701e, CRL_REG_LEN_08BIT, 0x2e},
+	{0x701f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7020, CRL_REG_LEN_08BIT, 0x00},
+	{0x7021, CRL_REG_LEN_08BIT, 0xdc},
+	{0x7022, CRL_REG_LEN_08BIT, 0xdf},
+	{0x7023, CRL_REG_LEN_08BIT, 0xb0},
+	{0x7024, CRL_REG_LEN_08BIT, 0x6e},
+	{0x7025, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7026, CRL_REG_LEN_08BIT, 0x01},
+	{0x7027, CRL_REG_LEN_08BIT, 0xd7},
+	{0x7028, CRL_REG_LEN_08BIT, 0xed},
+	{0x7029, CRL_REG_LEN_08BIT, 0xe1},
+	{0x702a, CRL_REG_LEN_08BIT, 0x36},
+	{0x702b, CRL_REG_LEN_08BIT, 0x30},
+	{0x702c, CRL_REG_LEN_08BIT, 0xd3},
+	{0x702d, CRL_REG_LEN_08BIT, 0x2e},
+	{0x702e, CRL_REG_LEN_08BIT, 0x54},
+	{0x702f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7030, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7031, CRL_REG_LEN_08BIT, 0x22},
+	{0x7032, CRL_REG_LEN_08BIT, 0x66},
+	{0x7033, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7034, CRL_REG_LEN_08BIT, 0x24},
+	{0x7035, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7036, CRL_REG_LEN_08BIT, 0x28},
+	{0x7037, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7038, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7039, CRL_REG_LEN_08BIT, 0xa1},
+	{0x703a, CRL_REG_LEN_08BIT, 0xac},
+	{0x703b, CRL_REG_LEN_08BIT, 0xd8},
+	{0x703c, CRL_REG_LEN_08BIT, 0xd6},
+	{0x703d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x703e, CRL_REG_LEN_08BIT, 0x04},
+	{0x703f, CRL_REG_LEN_08BIT, 0x46},
+	{0x7040, CRL_REG_LEN_08BIT, 0xb7},
+	{0x7041, CRL_REG_LEN_08BIT, 0x04},
+	{0x7042, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7043, CRL_REG_LEN_08BIT, 0x08},
+	{0x7044, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7045, CRL_REG_LEN_08BIT, 0xd9},
+	{0x7046, CRL_REG_LEN_08BIT, 0xad},
+	{0x7047, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7048, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7049, CRL_REG_LEN_08BIT, 0x19},
+	{0x704a, CRL_REG_LEN_08BIT, 0xc1},
+	{0x704b, CRL_REG_LEN_08BIT, 0x27},
+	{0x704c, CRL_REG_LEN_08BIT, 0xe7},
+	{0x704d, CRL_REG_LEN_08BIT, 0x00},
+	{0x704e, CRL_REG_LEN_08BIT, 0x50},
+	{0x704f, CRL_REG_LEN_08BIT, 0x20},
+	{0x7050, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7051, CRL_REG_LEN_08BIT, 0x02},
+	{0x7052, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7053, CRL_REG_LEN_08BIT, 0x17},
+	{0x7054, CRL_REG_LEN_08BIT, 0xdb},
+	{0x7055, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7056, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7057, CRL_REG_LEN_08BIT, 0x00},
+	{0x7058, CRL_REG_LEN_08BIT, 0x28},
+	{0x7059, CRL_REG_LEN_08BIT, 0x54},
+	{0x705a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x705b, CRL_REG_LEN_08BIT, 0x14},
+	{0x705c, CRL_REG_LEN_08BIT, 0xab},
+	{0x705d, CRL_REG_LEN_08BIT, 0xbe},
+	{0x705e, CRL_REG_LEN_08BIT, 0x06},
+	{0x705f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7060, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7061, CRL_REG_LEN_08BIT, 0x00},
+	{0x7062, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7063, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7064, CRL_REG_LEN_08BIT, 0x07},
+	{0x7065, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7066, CRL_REG_LEN_08BIT, 0x05},
+	{0x7067, CRL_REG_LEN_08BIT, 0xee},
+	{0x7068, CRL_REG_LEN_08BIT, 0xe6},
+	{0x7069, CRL_REG_LEN_08BIT, 0xad},
+	{0x706a, CRL_REG_LEN_08BIT, 0xb4},
+	{0x706b, CRL_REG_LEN_08BIT, 0x26},
+	{0x706c, CRL_REG_LEN_08BIT, 0x19},
+	{0x706d, CRL_REG_LEN_08BIT, 0xc1},
+	{0x706e, CRL_REG_LEN_08BIT, 0x3a},
+	{0x706f, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7070, CRL_REG_LEN_08BIT, 0xaf},
+	{0x7071, CRL_REG_LEN_08BIT, 0x00},
+	{0x7072, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7073, CRL_REG_LEN_08BIT, 0x3c},
+	{0x7074, CRL_REG_LEN_08BIT, 0xc3},
+	{0x7075, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7076, CRL_REG_LEN_08BIT, 0xe7},
+	{0x7077, CRL_REG_LEN_08BIT, 0x00},
+	{0x7078, CRL_REG_LEN_08BIT, 0x15},
+	{0x7079, CRL_REG_LEN_08BIT, 0xc2},
+	{0x707a, CRL_REG_LEN_08BIT, 0x40},
+	{0x707b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x707c, CRL_REG_LEN_08BIT, 0xa4},
+	{0x707d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x707e, CRL_REG_LEN_08BIT, 0x3c},
+	{0x707f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7080, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7081, CRL_REG_LEN_08BIT, 0x64},
+	{0x7082, CRL_REG_LEN_08BIT, 0x29},
+	{0x7083, CRL_REG_LEN_08BIT, 0x00},
+	{0x7084, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7085, CRL_REG_LEN_08BIT, 0x12},
+	{0x7086, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7087, CRL_REG_LEN_08BIT, 0x01},
+	{0x7088, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7089, CRL_REG_LEN_08BIT, 0xbc},
+	{0x708a, CRL_REG_LEN_08BIT, 0x01},
+	{0x708b, CRL_REG_LEN_08BIT, 0xac},
+	{0x708c, CRL_REG_LEN_08BIT, 0x37},
+	{0x708d, CRL_REG_LEN_08BIT, 0xd2},
+	{0x708e, CRL_REG_LEN_08BIT, 0xac},
+	{0x708f, CRL_REG_LEN_08BIT, 0x45},
+	{0x7090, CRL_REG_LEN_08BIT, 0xad},
+	{0x7091, CRL_REG_LEN_08BIT, 0x28},
+	{0x7092, CRL_REG_LEN_08BIT, 0x00},
+	{0x7093, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7094, CRL_REG_LEN_08BIT, 0x00},
+	{0x7095, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7096, CRL_REG_LEN_08BIT, 0x01},
+	{0x7097, CRL_REG_LEN_08BIT, 0x36},
+	{0x7098, CRL_REG_LEN_08BIT, 0xd3},
+	{0x7099, CRL_REG_LEN_08BIT, 0x30},
+	{0x709a, CRL_REG_LEN_08BIT, 0x04},
+	{0x709b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x709c, CRL_REG_LEN_08BIT, 0xd8},
+	{0x709d, CRL_REG_LEN_08BIT, 0xb4},
+	{0x709e, CRL_REG_LEN_08BIT, 0xe9},
+	{0x709f, CRL_REG_LEN_08BIT, 0x00},
+	{0x70a0, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70a1, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a2, CRL_REG_LEN_08BIT, 0x62},
+	{0x70a3, CRL_REG_LEN_08BIT, 0x07},
+	{0x70a4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70a5, CRL_REG_LEN_08BIT, 0x05},
+	{0x70a6, CRL_REG_LEN_08BIT, 0xad},
+	{0x70a7, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70a8, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70a9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70aa, CRL_REG_LEN_08BIT, 0x15},
+	{0x70ab, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70ac, CRL_REG_LEN_08BIT, 0x59},
+	{0x70ad, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70ae, CRL_REG_LEN_08BIT, 0xc9},
+	{0x70af, CRL_REG_LEN_08BIT, 0xc0},
+	{0x70b0, CRL_REG_LEN_08BIT, 0x55},
+	{0x70b1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b2, CRL_REG_LEN_08BIT, 0x46},
+	{0x70b3, CRL_REG_LEN_08BIT, 0xa1},
+	{0x70b4, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70b5, CRL_REG_LEN_08BIT, 0x64},
+	{0x70b6, CRL_REG_LEN_08BIT, 0x29},
+	{0x70b7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70b9, CRL_REG_LEN_08BIT, 0x02},
+	{0x70ba, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70bb, CRL_REG_LEN_08BIT, 0x02},
+	{0x70bc, CRL_REG_LEN_08BIT, 0xd0},
+	{0x70bd, CRL_REG_LEN_08BIT, 0xdc},
+	{0x70be, CRL_REG_LEN_08BIT, 0xac},
+	{0x70bf, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70c0, CRL_REG_LEN_08BIT, 0x01},
+	{0x70c1, CRL_REG_LEN_08BIT, 0x37},
+	{0x70c2, CRL_REG_LEN_08BIT, 0xac},
+	{0x70c3, CRL_REG_LEN_08BIT, 0xd2},
+	{0x70c4, CRL_REG_LEN_08BIT, 0x45},
+	{0x70c5, CRL_REG_LEN_08BIT, 0xad},
+	{0x70c6, CRL_REG_LEN_08BIT, 0x28},
+	{0x70c7, CRL_REG_LEN_08BIT, 0x00},
+	{0x70c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0x70c9, CRL_REG_LEN_08BIT, 0x00},
+	{0x70ca, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70cb, CRL_REG_LEN_08BIT, 0x01},
+	{0x70cc, CRL_REG_LEN_08BIT, 0x36},
+	{0x70cd, CRL_REG_LEN_08BIT, 0x30},
+	{0x70ce, CRL_REG_LEN_08BIT, 0xe0},
+	{0x70cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0x70d0, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70d1, CRL_REG_LEN_08BIT, 0x0b},
+	{0x70d2, CRL_REG_LEN_08BIT, 0xd6},
+	{0x70d3, CRL_REG_LEN_08BIT, 0xbe},
+	{0x70d4, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x70d6, CRL_REG_LEN_08BIT, 0x62},
+	{0x70d7, CRL_REG_LEN_08BIT, 0x07},
+	{0x70d8, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70d9, CRL_REG_LEN_08BIT, 0x05},
+	{0x70da, CRL_REG_LEN_08BIT, 0xad},
+	{0x70db, CRL_REG_LEN_08BIT, 0xc3},
+	{0x70dc, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70dd, CRL_REG_LEN_08BIT, 0x46},
+	{0x70de, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70df, CRL_REG_LEN_08BIT, 0x07},
+	{0x70e0, CRL_REG_LEN_08BIT, 0xcd},
+	{0x70e1, CRL_REG_LEN_08BIT, 0x00},
+	{0x70e2, CRL_REG_LEN_08BIT, 0xe3},
+	{0x70e3, CRL_REG_LEN_08BIT, 0x18},
+	{0x70e4, CRL_REG_LEN_08BIT, 0xc2},
+	{0x70e5, CRL_REG_LEN_08BIT, 0xa2},
+	{0x70e6, CRL_REG_LEN_08BIT, 0xb9},
+	{0x70e7, CRL_REG_LEN_08BIT, 0x64},
+	{0x70e8, CRL_REG_LEN_08BIT, 0xd1},
+	{0x70e9, CRL_REG_LEN_08BIT, 0xdd},
+	{0x70ea, CRL_REG_LEN_08BIT, 0xac},
+	{0x70eb, CRL_REG_LEN_08BIT, 0xcf},
+	{0x70ec, CRL_REG_LEN_08BIT, 0xdf},
+	{0x70ed, CRL_REG_LEN_08BIT, 0xb5},
+	{0x70ee, CRL_REG_LEN_08BIT, 0x19},
+	{0x70ef, CRL_REG_LEN_08BIT, 0x46},
+	{0x70f0, CRL_REG_LEN_08BIT, 0x50},
+	{0x70f1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x70f2, CRL_REG_LEN_08BIT, 0xee},
+	{0x70f3, CRL_REG_LEN_08BIT, 0xe8},
+	{0x70f4, CRL_REG_LEN_08BIT, 0xe6},
+	{0x70f5, CRL_REG_LEN_08BIT, 0xbc},
+	{0x70f6, CRL_REG_LEN_08BIT, 0x31},
+	{0x70f7, CRL_REG_LEN_08BIT, 0xe1},
+	{0x70f8, CRL_REG_LEN_08BIT, 0x36},
+	{0x70f9, CRL_REG_LEN_08BIT, 0x30},
+	{0x70fa, CRL_REG_LEN_08BIT, 0xd3},
+	{0x70fb, CRL_REG_LEN_08BIT, 0x2e},
+	{0x70fc, CRL_REG_LEN_08BIT, 0x54},
+	{0x70fd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x70fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x70ff, CRL_REG_LEN_08BIT, 0xec},
+	{0x7100, CRL_REG_LEN_08BIT, 0x2c},
+	{0x7101, CRL_REG_LEN_08BIT, 0x50},
+	{0x7102, CRL_REG_LEN_08BIT, 0x20},
+	{0x7103, CRL_REG_LEN_08BIT, 0x04},
+	{0x7104, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7105, CRL_REG_LEN_08BIT, 0x02},
+	{0x7106, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7107, CRL_REG_LEN_08BIT, 0x18},
+	{0x7108, CRL_REG_LEN_08BIT, 0xc7},
+	{0x7109, CRL_REG_LEN_08BIT, 0xb8},
+	{0x710a, CRL_REG_LEN_08BIT, 0x00},
+	{0x710b, CRL_REG_LEN_08BIT, 0x28},
+	{0x710c, CRL_REG_LEN_08BIT, 0x54},
+	{0x710d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x710e, CRL_REG_LEN_08BIT, 0x02},
+	{0x710f, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7110, CRL_REG_LEN_08BIT, 0xda},
+	{0x7111, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7112, CRL_REG_LEN_08BIT, 0x04},
+	{0x7113, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7114, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7115, CRL_REG_LEN_08BIT, 0xab},
+	{0x7116, CRL_REG_LEN_08BIT, 0x00},
+	{0x7117, CRL_REG_LEN_08BIT, 0x62},
+	{0x7118, CRL_REG_LEN_08BIT, 0x07},
+	{0x7119, CRL_REG_LEN_08BIT, 0xb9},
+	{0x711a, CRL_REG_LEN_08BIT, 0x05},
+	{0x711b, CRL_REG_LEN_08BIT, 0xad},
+	{0x711c, CRL_REG_LEN_08BIT, 0xc3},
+	{0x711d, CRL_REG_LEN_08BIT, 0xbc},
+	{0x711e, CRL_REG_LEN_08BIT, 0xe7},
+	{0x711f, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7120, CRL_REG_LEN_08BIT, 0x64},
+	{0x7121, CRL_REG_LEN_08BIT, 0x29},
+	{0x7122, CRL_REG_LEN_08BIT, 0x00},
+	{0x7123, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7124, CRL_REG_LEN_08BIT, 0x02},
+	{0x7125, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7126, CRL_REG_LEN_08BIT, 0x00},
+	{0x7127, CRL_REG_LEN_08BIT, 0x45},
+	{0x7128, CRL_REG_LEN_08BIT, 0xad},
+	{0x7129, CRL_REG_LEN_08BIT, 0xe2},
+	{0x712a, CRL_REG_LEN_08BIT, 0x28},
+	{0x712b, CRL_REG_LEN_08BIT, 0x00},
+	{0x712c, CRL_REG_LEN_08BIT, 0xb8},
+	{0x712d, CRL_REG_LEN_08BIT, 0x00},
+	{0x712e, CRL_REG_LEN_08BIT, 0xe0},
+	{0x712f, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7130, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7131, CRL_REG_LEN_08BIT, 0xe9},
+	{0x7132, CRL_REG_LEN_08BIT, 0xbe},
+	{0x7133, CRL_REG_LEN_08BIT, 0x03},
+	{0x7134, CRL_REG_LEN_08BIT, 0x00},
+	{0x7135, CRL_REG_LEN_08BIT, 0x30},
+	{0x7136, CRL_REG_LEN_08BIT, 0x62},
+	{0x7137, CRL_REG_LEN_08BIT, 0x07},
+	{0x7138, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7139, CRL_REG_LEN_08BIT, 0x05},
+	{0x713a, CRL_REG_LEN_08BIT, 0xad},
+	{0x713b, CRL_REG_LEN_08BIT, 0xc3},
+	{0x713c, CRL_REG_LEN_08BIT, 0xcf},
+	{0x713d, CRL_REG_LEN_08BIT, 0x42},
+	{0x713e, CRL_REG_LEN_08BIT, 0xe4},
+	{0x713f, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7140, CRL_REG_LEN_08BIT, 0x07},
+	{0x7141, CRL_REG_LEN_08BIT, 0xcd},
+	{0x7142, CRL_REG_LEN_08BIT, 0x00},
+	{0x7143, CRL_REG_LEN_08BIT, 0x00},
+	{0x7144, CRL_REG_LEN_08BIT, 0x17},
+	{0x7145, CRL_REG_LEN_08BIT, 0xc2},
+	{0x7146, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7147, CRL_REG_LEN_08BIT, 0xde},
+	{0x7148, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7149, CRL_REG_LEN_08BIT, 0xdf},
+	{0x714a, CRL_REG_LEN_08BIT, 0xac},
+	{0x714b, CRL_REG_LEN_08BIT, 0xd1},
+	{0x714c, CRL_REG_LEN_08BIT, 0x44},
+	{0x714d, CRL_REG_LEN_08BIT, 0xac},
+	{0x714e, CRL_REG_LEN_08BIT, 0xb9},
+	{0x714f, CRL_REG_LEN_08BIT, 0x76},
+	{0x7150, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7151, CRL_REG_LEN_08BIT, 0x08},
+	{0x7152, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7153, CRL_REG_LEN_08BIT, 0xfe},
+	{0x7154, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7155, CRL_REG_LEN_08BIT, 0xca},
+	{0x7156, CRL_REG_LEN_08BIT, 0xd6},
+	{0x7157, CRL_REG_LEN_08BIT, 0xd8},
+	{0x7158, CRL_REG_LEN_08BIT, 0xab},
+	{0x7159, CRL_REG_LEN_08BIT, 0x00},
+	{0x715a, CRL_REG_LEN_08BIT, 0xe1},
+	{0x715b, CRL_REG_LEN_08BIT, 0x36},
+	{0x715c, CRL_REG_LEN_08BIT, 0x30},
+	{0x715d, CRL_REG_LEN_08BIT, 0xd3},
+	{0x715e, CRL_REG_LEN_08BIT, 0xbc},
+	{0x715f, CRL_REG_LEN_08BIT, 0x29},
+	{0x7160, CRL_REG_LEN_08BIT, 0xb4},
+	{0x7161, CRL_REG_LEN_08BIT, 0x1f},
+	{0x7162, CRL_REG_LEN_08BIT, 0xaa},
+	{0x7163, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7164, CRL_REG_LEN_08BIT, 0x01},
+	{0x7165, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7166, CRL_REG_LEN_08BIT, 0x0c},
+	{0x7167, CRL_REG_LEN_08BIT, 0x45},
+	{0x7168, CRL_REG_LEN_08BIT, 0xa4},
+	{0x7169, CRL_REG_LEN_08BIT, 0xbd},
+	{0x716a, CRL_REG_LEN_08BIT, 0x03},
+	{0x716b, CRL_REG_LEN_08BIT, 0xec},
+	{0x716c, CRL_REG_LEN_08BIT, 0xbc},
+	{0x716d, CRL_REG_LEN_08BIT, 0x3d},
+	{0x716e, CRL_REG_LEN_08BIT, 0xc3},
+	{0x716f, CRL_REG_LEN_08BIT, 0xcf},
+	{0x7170, CRL_REG_LEN_08BIT, 0x42},
+	{0x7171, CRL_REG_LEN_08BIT, 0xb8},
+	{0x7172, CRL_REG_LEN_08BIT, 0x00},
+	{0x7173, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7174, CRL_REG_LEN_08BIT, 0xd5},
+	{0x7175, CRL_REG_LEN_08BIT, 0x00},
+	{0x7176, CRL_REG_LEN_08BIT, 0xb6},
+	{0x7177, CRL_REG_LEN_08BIT, 0x00},
+	{0x7178, CRL_REG_LEN_08BIT, 0x74},
+	{0x7179, CRL_REG_LEN_08BIT, 0xbd},
+	{0x717a, CRL_REG_LEN_08BIT, 0x03},
+	{0x717b, CRL_REG_LEN_08BIT, 0xb5},
+	{0x717c, CRL_REG_LEN_08BIT, 0x39},
+	{0x717d, CRL_REG_LEN_08BIT, 0x40},
+	{0x717e, CRL_REG_LEN_08BIT, 0x58},
+	{0x717f, CRL_REG_LEN_08BIT, 0xdd},
+	{0x7180, CRL_REG_LEN_08BIT, 0x19},
+	{0x7181, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7182, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7183, CRL_REG_LEN_08BIT, 0xbd},
+	{0x7184, CRL_REG_LEN_08BIT, 0x06},
+	{0x7185, CRL_REG_LEN_08BIT, 0x17},
+	{0x7186, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7187, CRL_REG_LEN_08BIT, 0xc6},
+	{0x7188, CRL_REG_LEN_08BIT, 0xe8},
+	{0x7189, CRL_REG_LEN_08BIT, 0x00},
+	{0x718a, CRL_REG_LEN_08BIT, 0xc0},
+	{0x718b, CRL_REG_LEN_08BIT, 0xc8},
+	{0x718c, CRL_REG_LEN_08BIT, 0xe6},
+	{0x718d, CRL_REG_LEN_08BIT, 0x95},
+	{0x718e, CRL_REG_LEN_08BIT, 0x15},
+	{0x718f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7190, CRL_REG_LEN_08BIT, 0xbc},
+	{0x7191, CRL_REG_LEN_08BIT, 0x19},
+	{0x7192, CRL_REG_LEN_08BIT, 0xb9},
+	{0x7193, CRL_REG_LEN_08BIT, 0xf6},
+	{0x7194, CRL_REG_LEN_08BIT, 0x14},
+	{0x7195, CRL_REG_LEN_08BIT, 0xc1},
+	{0x7196, CRL_REG_LEN_08BIT, 0xd0},
+	{0x7197, CRL_REG_LEN_08BIT, 0xd1},
+	{0x7198, CRL_REG_LEN_08BIT, 0xac},
+	{0x7199, CRL_REG_LEN_08BIT, 0x37},
+	{0x719a, CRL_REG_LEN_08BIT, 0xbc},
+	{0x719b, CRL_REG_LEN_08BIT, 0x35},
+	{0x719c, CRL_REG_LEN_08BIT, 0x36},
+	{0x719d, CRL_REG_LEN_08BIT, 0x30},
+	{0x719e, CRL_REG_LEN_08BIT, 0xe1},
+	{0x719f, CRL_REG_LEN_08BIT, 0xd3},
+	{0x71a0, CRL_REG_LEN_08BIT, 0x7a},
+	{0x71a1, CRL_REG_LEN_08BIT, 0xb6},
+	{0x71a2, CRL_REG_LEN_08BIT, 0x0c},
+	{0x71a3, CRL_REG_LEN_08BIT, 0xff},
+	{0x71a4, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71a5, CRL_REG_LEN_08BIT, 0xc7},
+	{0x71a6, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71a7, CRL_REG_LEN_08BIT, 0x00},
+	{0x71a8, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x71aa, CRL_REG_LEN_08BIT, 0x56},
+	{0x71ab, CRL_REG_LEN_08BIT, 0xc0},
+	{0x71ac, CRL_REG_LEN_08BIT, 0xda},
+	{0x71ad, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71ae, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71af, CRL_REG_LEN_08BIT, 0x56},
+	{0x71b0, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71b1, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71b2, CRL_REG_LEN_08BIT, 0x08},
+	{0x71b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b4, CRL_REG_LEN_08BIT, 0x57},
+	{0x71b5, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71b6, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71b7, CRL_REG_LEN_08BIT, 0x36},
+	{0x71b8, CRL_REG_LEN_08BIT, 0x00},
+	{0x71b9, CRL_REG_LEN_08BIT, 0x54},
+	{0x71ba, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71bb, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71bc, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71bd, CRL_REG_LEN_08BIT, 0x1f},
+	{0x71be, CRL_REG_LEN_08BIT, 0x56},
+	{0x71bf, CRL_REG_LEN_08BIT, 0xaa},
+	{0x71c0, CRL_REG_LEN_08BIT, 0xbc},
+	{0x71c1, CRL_REG_LEN_08BIT, 0x08},
+	{0x71c2, CRL_REG_LEN_08BIT, 0x57},
+	{0x71c3, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c4, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71c5, CRL_REG_LEN_08BIT, 0x36},
+	{0x71c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x71c7, CRL_REG_LEN_08BIT, 0x54},
+	{0x71c8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71c9, CRL_REG_LEN_08BIT, 0xb5},
+	{0x71ca, CRL_REG_LEN_08BIT, 0x18},
+	{0x71cb, CRL_REG_LEN_08BIT, 0xd9},
+	{0x71cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x71cd, CRL_REG_LEN_08BIT, 0xbd},
+	{0x71ce, CRL_REG_LEN_08BIT, 0x01},
+	{0x71cf, CRL_REG_LEN_08BIT, 0x56},
+	{0x71d0, CRL_REG_LEN_08BIT, 0x08},
+	{0x71d1, CRL_REG_LEN_08BIT, 0x57},
+	{0x71d2, CRL_REG_LEN_08BIT, 0xe8},
+	{0x71d3, CRL_REG_LEN_08BIT, 0xb4},
+	{0x71d4, CRL_REG_LEN_08BIT, 0x42},
+	{0x71d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x71d6, CRL_REG_LEN_08BIT, 0x54},
+	{0x71d7, CRL_REG_LEN_08BIT, 0xe7},
+	{0x71d8, CRL_REG_LEN_08BIT, 0xc8},
+	{0x71d9, CRL_REG_LEN_08BIT, 0xab},
+	{0x71da, CRL_REG_LEN_08BIT, 0x00},
+	{0x71db, CRL_REG_LEN_08BIT, 0x66},
+	{0x71dc, CRL_REG_LEN_08BIT, 0x62},
+	{0x71dd, CRL_REG_LEN_08BIT, 0x06},
+	{0x71de, CRL_REG_LEN_08BIT, 0x74},
+	{0x71df, CRL_REG_LEN_08BIT, 0xb9},
+	{0x71e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x71e1, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e2, CRL_REG_LEN_08BIT, 0x14},
+	{0x71e3, CRL_REG_LEN_08BIT, 0x0e},
+	{0x71e4, CRL_REG_LEN_08BIT, 0xb7},
+	{0x71e5, CRL_REG_LEN_08BIT, 0x04},
+	{0x71e6, CRL_REG_LEN_08BIT, 0xc8},
+	{0x7600, CRL_REG_LEN_08BIT, 0x04},
+	{0x7601, CRL_REG_LEN_08BIT, 0x80},
+	{0x7602, CRL_REG_LEN_08BIT, 0x07},
+	{0x7603, CRL_REG_LEN_08BIT, 0x44},
+	{0x7604, CRL_REG_LEN_08BIT, 0x05},
+	{0x7605, CRL_REG_LEN_08BIT, 0x33},
+	{0x7606, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7607, CRL_REG_LEN_08BIT, 0x00},
+	{0x7608, CRL_REG_LEN_08BIT, 0x07},
+	{0x7609, CRL_REG_LEN_08BIT, 0x40},
+	{0x760a, CRL_REG_LEN_08BIT, 0x04},
+	{0x760b, CRL_REG_LEN_08BIT, 0xe5},
+	{0x760c, CRL_REG_LEN_08BIT, 0x06},
+	{0x760d, CRL_REG_LEN_08BIT, 0x50},
+	{0x760e, CRL_REG_LEN_08BIT, 0x04},
+	{0x760f, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7610, CRL_REG_LEN_08BIT, 0x00},
+	{0x7611, CRL_REG_LEN_08BIT, 0x00},
+	{0x7612, CRL_REG_LEN_08BIT, 0x06},
+	{0x7613, CRL_REG_LEN_08BIT, 0x5c},
+	{0x7614, CRL_REG_LEN_08BIT, 0x00},
+	{0x7615, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7616, CRL_REG_LEN_08BIT, 0x06},
+	{0x7617, CRL_REG_LEN_08BIT, 0x1c},
+	{0x7618, CRL_REG_LEN_08BIT, 0x00},
+	{0x7619, CRL_REG_LEN_08BIT, 0x02},
+	{0x761a, CRL_REG_LEN_08BIT, 0x06},
+	{0x761b, CRL_REG_LEN_08BIT, 0xa2},
+	{0x761c, CRL_REG_LEN_08BIT, 0x00},
+	{0x761d, CRL_REG_LEN_08BIT, 0x01},
+	{0x761e, CRL_REG_LEN_08BIT, 0x06},
+	{0x761f, CRL_REG_LEN_08BIT, 0xae},
+	{0x7620, CRL_REG_LEN_08BIT, 0x00},
+	{0x7621, CRL_REG_LEN_08BIT, 0x0e},
+	{0x7622, CRL_REG_LEN_08BIT, 0x05},
+	{0x7623, CRL_REG_LEN_08BIT, 0x30},
+	{0x7624, CRL_REG_LEN_08BIT, 0x07},
+	{0x7625, CRL_REG_LEN_08BIT, 0x00},
+	{0x7626, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7627, CRL_REG_LEN_08BIT, 0x00},
+	{0x7628, CRL_REG_LEN_08BIT, 0x04},
+	{0x7629, CRL_REG_LEN_08BIT, 0xe5},
+	{0x762a, CRL_REG_LEN_08BIT, 0x05},
+	{0x762b, CRL_REG_LEN_08BIT, 0x33},
+	{0x762c, CRL_REG_LEN_08BIT, 0x06},
+	{0x762d, CRL_REG_LEN_08BIT, 0x12},
+	{0x762e, CRL_REG_LEN_08BIT, 0x00},
+	{0x762f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7630, CRL_REG_LEN_08BIT, 0x06},
+	{0x7631, CRL_REG_LEN_08BIT, 0x52},
+	{0x7632, CRL_REG_LEN_08BIT, 0x00},
+	{0x7633, CRL_REG_LEN_08BIT, 0x01},
+	{0x7634, CRL_REG_LEN_08BIT, 0x06},
+	{0x7635, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7636, CRL_REG_LEN_08BIT, 0x04},
+	{0x7637, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7638, CRL_REG_LEN_08BIT, 0x00},
+	{0x7639, CRL_REG_LEN_08BIT, 0x01},
+	{0x763a, CRL_REG_LEN_08BIT, 0x05},
+	{0x763b, CRL_REG_LEN_08BIT, 0x30},
+	{0x763c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x763d, CRL_REG_LEN_08BIT, 0x00},
+	{0x763e, CRL_REG_LEN_08BIT, 0x06},
+	{0x763f, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7640, CRL_REG_LEN_08BIT, 0x00},
+	{0x7641, CRL_REG_LEN_08BIT, 0x02},
+	{0x7642, CRL_REG_LEN_08BIT, 0x06},
+	{0x7643, CRL_REG_LEN_08BIT, 0x26},
+	{0x7644, CRL_REG_LEN_08BIT, 0x00},
+	{0x7645, CRL_REG_LEN_08BIT, 0x02},
+	{0x7646, CRL_REG_LEN_08BIT, 0x05},
+	{0x7647, CRL_REG_LEN_08BIT, 0x33},
+	{0x7648, CRL_REG_LEN_08BIT, 0x06},
+	{0x7649, CRL_REG_LEN_08BIT, 0x20},
+	{0x764a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x764b, CRL_REG_LEN_08BIT, 0x00},
+	{0x764c, CRL_REG_LEN_08BIT, 0x06},
+	{0x764d, CRL_REG_LEN_08BIT, 0x56},
+	{0x764e, CRL_REG_LEN_08BIT, 0x00},
+	{0x764f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7650, CRL_REG_LEN_08BIT, 0x06},
+	{0x7651, CRL_REG_LEN_08BIT, 0x16},
+	{0x7652, CRL_REG_LEN_08BIT, 0x05},
+	{0x7653, CRL_REG_LEN_08BIT, 0x33},
+	{0x7654, CRL_REG_LEN_08BIT, 0x06},
+	{0x7655, CRL_REG_LEN_08BIT, 0x10},
+	{0x7656, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7657, CRL_REG_LEN_08BIT, 0x00},
+	{0x7658, CRL_REG_LEN_08BIT, 0x06},
+	{0x7659, CRL_REG_LEN_08BIT, 0x10},
+	{0x765a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765b, CRL_REG_LEN_08BIT, 0x00},
+	{0x765c, CRL_REG_LEN_08BIT, 0x06},
+	{0x765d, CRL_REG_LEN_08BIT, 0x20},
+	{0x765e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x765f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7660, CRL_REG_LEN_08BIT, 0x00},
+	{0x7661, CRL_REG_LEN_08BIT, 0x00},
+	{0x7662, CRL_REG_LEN_08BIT, 0x00},
+	{0x7663, CRL_REG_LEN_08BIT, 0x02},
+	{0x7664, CRL_REG_LEN_08BIT, 0x04},
+	{0x7665, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7666, CRL_REG_LEN_08BIT, 0x04},
+	{0x7667, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7668, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7669, CRL_REG_LEN_08BIT, 0x00},
+	{0x766a, CRL_REG_LEN_08BIT, 0x00},
+	{0x766b, CRL_REG_LEN_08BIT, 0x00},
+	{0x766c, CRL_REG_LEN_08BIT, 0x00},
+	{0x766d, CRL_REG_LEN_08BIT, 0x01},
+	{0x766e, CRL_REG_LEN_08BIT, 0x04},
+	{0x766f, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7670, CRL_REG_LEN_08BIT, 0x04},
+	{0x7671, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7672, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7673, CRL_REG_LEN_08BIT, 0x00},
+	{0x7674, CRL_REG_LEN_08BIT, 0x00},
+	{0x7675, CRL_REG_LEN_08BIT, 0x02},
+	{0x7676, CRL_REG_LEN_08BIT, 0x04},
+	{0x7677, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7678, CRL_REG_LEN_08BIT, 0x00},
+	{0x7679, CRL_REG_LEN_08BIT, 0x02},
+	{0x767a, CRL_REG_LEN_08BIT, 0x04},
+	{0x767b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x767c, CRL_REG_LEN_08BIT, 0x00},
+	{0x767d, CRL_REG_LEN_08BIT, 0x02},
+	{0x767e, CRL_REG_LEN_08BIT, 0x04},
+	{0x767f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7680, CRL_REG_LEN_08BIT, 0x05},
+	{0x7681, CRL_REG_LEN_08BIT, 0x83},
+	{0x7682, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7683, CRL_REG_LEN_08BIT, 0x00},
+	{0x7684, CRL_REG_LEN_08BIT, 0x00},
+	{0x7685, CRL_REG_LEN_08BIT, 0x02},
+	{0x7686, CRL_REG_LEN_08BIT, 0x04},
+	{0x7687, CRL_REG_LEN_08BIT, 0xe4},
+	{0x7688, CRL_REG_LEN_08BIT, 0x00},
+	{0x7689, CRL_REG_LEN_08BIT, 0x02},
+	{0x768a, CRL_REG_LEN_08BIT, 0x04},
+	{0x768b, CRL_REG_LEN_08BIT, 0xc4},
+	{0x768c, CRL_REG_LEN_08BIT, 0x00},
+	{0x768d, CRL_REG_LEN_08BIT, 0x02},
+	{0x768e, CRL_REG_LEN_08BIT, 0x04},
+	{0x768f, CRL_REG_LEN_08BIT, 0xc4},
+	{0x7690, CRL_REG_LEN_08BIT, 0x05},
+	{0x7691, CRL_REG_LEN_08BIT, 0x83},
+	{0x7692, CRL_REG_LEN_08BIT, 0x03},
+	{0x7693, CRL_REG_LEN_08BIT, 0x0b},
+	{0x7694, CRL_REG_LEN_08BIT, 0x05},
+	{0x7695, CRL_REG_LEN_08BIT, 0x83},
+	{0x7696, CRL_REG_LEN_08BIT, 0x00},
+	{0x7697, CRL_REG_LEN_08BIT, 0x07},
+	{0x7698, CRL_REG_LEN_08BIT, 0x05},
+	{0x7699, CRL_REG_LEN_08BIT, 0x03},
+	{0x769a, CRL_REG_LEN_08BIT, 0x00},
+	{0x769b, CRL_REG_LEN_08BIT, 0x05},
+	{0x769c, CRL_REG_LEN_08BIT, 0x05},
+	{0x769d, CRL_REG_LEN_08BIT, 0x32},
+	{0x769e, CRL_REG_LEN_08BIT, 0x05},
+	{0x769f, CRL_REG_LEN_08BIT, 0x30},
+	{0x76a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a1, CRL_REG_LEN_08BIT, 0x02},
+	{0x76a2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a3, CRL_REG_LEN_08BIT, 0x78},
+	{0x76a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x76a5, CRL_REG_LEN_08BIT, 0x01},
+	{0x76a6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76a7, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76a8, CRL_REG_LEN_08BIT, 0x03},
+	{0x76a9, CRL_REG_LEN_08BIT, 0x9a},
+	{0x76aa, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ab, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ad, CRL_REG_LEN_08BIT, 0x04},
+	{0x76ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x76af, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76b2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76b6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76b7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76b8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76b9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76ba, CRL_REG_LEN_08BIT, 0x00},
+	{0x76bb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76bc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76bd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76be, CRL_REG_LEN_08BIT, 0x03},
+	{0x76bf, CRL_REG_LEN_08BIT, 0x99},
+	{0x76c0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c1, CRL_REG_LEN_08BIT, 0x83},
+	{0x76c2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c3, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c5, CRL_REG_LEN_08BIT, 0x03},
+	{0x76c6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76c7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76c8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76c9, CRL_REG_LEN_08BIT, 0x32},
+	{0x76ca, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cb, CRL_REG_LEN_08BIT, 0x30},
+	{0x76cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76cd, CRL_REG_LEN_08BIT, 0x02},
+	{0x76ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x76cf, CRL_REG_LEN_08BIT, 0x78},
+	{0x76d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d1, CRL_REG_LEN_08BIT, 0x01},
+	{0x76d2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d3, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76d4, CRL_REG_LEN_08BIT, 0x03},
+	{0x76d5, CRL_REG_LEN_08BIT, 0x98},
+	{0x76d6, CRL_REG_LEN_08BIT, 0x05},
+	{0x76d7, CRL_REG_LEN_08BIT, 0x83},
+	{0x76d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x76d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x76da, CRL_REG_LEN_08BIT, 0x05},
+	{0x76db, CRL_REG_LEN_08BIT, 0x03},
+	{0x76dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x76dd, CRL_REG_LEN_08BIT, 0x01},
+	{0x76de, CRL_REG_LEN_08BIT, 0x05},
+	{0x76df, CRL_REG_LEN_08BIT, 0x32},
+	{0x76e0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e1, CRL_REG_LEN_08BIT, 0x30},
+	{0x76e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e3, CRL_REG_LEN_08BIT, 0x02},
+	{0x76e4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e5, CRL_REG_LEN_08BIT, 0x78},
+	{0x76e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76e7, CRL_REG_LEN_08BIT, 0x01},
+	{0x76e8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76e9, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76ea, CRL_REG_LEN_08BIT, 0x03},
+	{0x76eb, CRL_REG_LEN_08BIT, 0x97},
+	{0x76ec, CRL_REG_LEN_08BIT, 0x05},
+	{0x76ed, CRL_REG_LEN_08BIT, 0x83},
+	{0x76ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x76ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f0, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f1, CRL_REG_LEN_08BIT, 0x03},
+	{0x76f2, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f3, CRL_REG_LEN_08BIT, 0x32},
+	{0x76f4, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f5, CRL_REG_LEN_08BIT, 0x30},
+	{0x76f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x76f7, CRL_REG_LEN_08BIT, 0x02},
+	{0x76f8, CRL_REG_LEN_08BIT, 0x05},
+	{0x76f9, CRL_REG_LEN_08BIT, 0x78},
+	{0x76fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x76fb, CRL_REG_LEN_08BIT, 0x01},
+	{0x76fc, CRL_REG_LEN_08BIT, 0x05},
+	{0x76fd, CRL_REG_LEN_08BIT, 0x7c},
+	{0x76fe, CRL_REG_LEN_08BIT, 0x03},
+	{0x76ff, CRL_REG_LEN_08BIT, 0x96},
+	{0x7700, CRL_REG_LEN_08BIT, 0x05},
+	{0x7701, CRL_REG_LEN_08BIT, 0x83},
+	{0x7702, CRL_REG_LEN_08BIT, 0x05},
+	{0x7703, CRL_REG_LEN_08BIT, 0x03},
+	{0x7704, CRL_REG_LEN_08BIT, 0x05},
+	{0x7705, CRL_REG_LEN_08BIT, 0x32},
+	{0x7706, CRL_REG_LEN_08BIT, 0x05},
+	{0x7707, CRL_REG_LEN_08BIT, 0x30},
+	{0x7708, CRL_REG_LEN_08BIT, 0x00},
+	{0x7709, CRL_REG_LEN_08BIT, 0x02},
+	{0x770a, CRL_REG_LEN_08BIT, 0x05},
+	{0x770b, CRL_REG_LEN_08BIT, 0x78},
+	{0x770c, CRL_REG_LEN_08BIT, 0x00},
+	{0x770d, CRL_REG_LEN_08BIT, 0x01},
+	{0x770e, CRL_REG_LEN_08BIT, 0x05},
+	{0x770f, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7710, CRL_REG_LEN_08BIT, 0x03},
+	{0x7711, CRL_REG_LEN_08BIT, 0x95},
+	{0x7712, CRL_REG_LEN_08BIT, 0x05},
+	{0x7713, CRL_REG_LEN_08BIT, 0x83},
+	{0x7714, CRL_REG_LEN_08BIT, 0x05},
+	{0x7715, CRL_REG_LEN_08BIT, 0x03},
+	{0x7716, CRL_REG_LEN_08BIT, 0x05},
+	{0x7717, CRL_REG_LEN_08BIT, 0x32},
+	{0x7718, CRL_REG_LEN_08BIT, 0x05},
+	{0x7719, CRL_REG_LEN_08BIT, 0x30},
+	{0x771a, CRL_REG_LEN_08BIT, 0x00},
+	{0x771b, CRL_REG_LEN_08BIT, 0x02},
+	{0x771c, CRL_REG_LEN_08BIT, 0x05},
+	{0x771d, CRL_REG_LEN_08BIT, 0x78},
+	{0x771e, CRL_REG_LEN_08BIT, 0x00},
+	{0x771f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7720, CRL_REG_LEN_08BIT, 0x05},
+	{0x7721, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7722, CRL_REG_LEN_08BIT, 0x03},
+	{0x7723, CRL_REG_LEN_08BIT, 0x94},
+	{0x7724, CRL_REG_LEN_08BIT, 0x05},
+	{0x7725, CRL_REG_LEN_08BIT, 0x83},
+	{0x7726, CRL_REG_LEN_08BIT, 0x00},
+	{0x7727, CRL_REG_LEN_08BIT, 0x01},
+	{0x7728, CRL_REG_LEN_08BIT, 0x05},
+	{0x7729, CRL_REG_LEN_08BIT, 0x03},
+	{0x772a, CRL_REG_LEN_08BIT, 0x00},
+	{0x772b, CRL_REG_LEN_08BIT, 0x01},
+	{0x772c, CRL_REG_LEN_08BIT, 0x05},
+	{0x772d, CRL_REG_LEN_08BIT, 0x32},
+	{0x772e, CRL_REG_LEN_08BIT, 0x05},
+	{0x772f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7730, CRL_REG_LEN_08BIT, 0x00},
+	{0x7731, CRL_REG_LEN_08BIT, 0x02},
+	{0x7732, CRL_REG_LEN_08BIT, 0x05},
+	{0x7733, CRL_REG_LEN_08BIT, 0x78},
+	{0x7734, CRL_REG_LEN_08BIT, 0x00},
+	{0x7735, CRL_REG_LEN_08BIT, 0x01},
+	{0x7736, CRL_REG_LEN_08BIT, 0x05},
+	{0x7737, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7738, CRL_REG_LEN_08BIT, 0x03},
+	{0x7739, CRL_REG_LEN_08BIT, 0x93},
+	{0x773a, CRL_REG_LEN_08BIT, 0x05},
+	{0x773b, CRL_REG_LEN_08BIT, 0x83},
+	{0x773c, CRL_REG_LEN_08BIT, 0x00},
+	{0x773d, CRL_REG_LEN_08BIT, 0x00},
+	{0x773e, CRL_REG_LEN_08BIT, 0x05},
+	{0x773f, CRL_REG_LEN_08BIT, 0x03},
+	{0x7740, CRL_REG_LEN_08BIT, 0x00},
+	{0x7741, CRL_REG_LEN_08BIT, 0x00},
+	{0x7742, CRL_REG_LEN_08BIT, 0x05},
+	{0x7743, CRL_REG_LEN_08BIT, 0x32},
+	{0x7744, CRL_REG_LEN_08BIT, 0x05},
+	{0x7745, CRL_REG_LEN_08BIT, 0x30},
+	{0x7746, CRL_REG_LEN_08BIT, 0x00},
+	{0x7747, CRL_REG_LEN_08BIT, 0x02},
+	{0x7748, CRL_REG_LEN_08BIT, 0x05},
+	{0x7749, CRL_REG_LEN_08BIT, 0x78},
+	{0x774a, CRL_REG_LEN_08BIT, 0x00},
+	{0x774b, CRL_REG_LEN_08BIT, 0x01},
+	{0x774c, CRL_REG_LEN_08BIT, 0x05},
+	{0x774d, CRL_REG_LEN_08BIT, 0x7c},
+	{0x774e, CRL_REG_LEN_08BIT, 0x03},
+	{0x774f, CRL_REG_LEN_08BIT, 0x92},
+	{0x7750, CRL_REG_LEN_08BIT, 0x05},
+	{0x7751, CRL_REG_LEN_08BIT, 0x83},
+	{0x7752, CRL_REG_LEN_08BIT, 0x05},
+	{0x7753, CRL_REG_LEN_08BIT, 0x03},
+	{0x7754, CRL_REG_LEN_08BIT, 0x00},
+	{0x7755, CRL_REG_LEN_08BIT, 0x00},
+	{0x7756, CRL_REG_LEN_08BIT, 0x05},
+	{0x7757, CRL_REG_LEN_08BIT, 0x32},
+	{0x7758, CRL_REG_LEN_08BIT, 0x05},
+	{0x7759, CRL_REG_LEN_08BIT, 0x30},
+	{0x775a, CRL_REG_LEN_08BIT, 0x00},
+	{0x775b, CRL_REG_LEN_08BIT, 0x02},
+	{0x775c, CRL_REG_LEN_08BIT, 0x05},
+	{0x775d, CRL_REG_LEN_08BIT, 0x78},
+	{0x775e, CRL_REG_LEN_08BIT, 0x00},
+	{0x775f, CRL_REG_LEN_08BIT, 0x01},
+	{0x7760, CRL_REG_LEN_08BIT, 0x05},
+	{0x7761, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7762, CRL_REG_LEN_08BIT, 0x03},
+	{0x7763, CRL_REG_LEN_08BIT, 0x91},
+	{0x7764, CRL_REG_LEN_08BIT, 0x05},
+	{0x7765, CRL_REG_LEN_08BIT, 0x83},
+	{0x7766, CRL_REG_LEN_08BIT, 0x05},
+	{0x7767, CRL_REG_LEN_08BIT, 0x03},
+	{0x7768, CRL_REG_LEN_08BIT, 0x05},
+	{0x7769, CRL_REG_LEN_08BIT, 0x32},
+	{0x776a, CRL_REG_LEN_08BIT, 0x05},
+	{0x776b, CRL_REG_LEN_08BIT, 0x30},
+	{0x776c, CRL_REG_LEN_08BIT, 0x00},
+	{0x776d, CRL_REG_LEN_08BIT, 0x02},
+	{0x776e, CRL_REG_LEN_08BIT, 0x05},
+	{0x776f, CRL_REG_LEN_08BIT, 0x78},
+	{0x7770, CRL_REG_LEN_08BIT, 0x00},
+	{0x7771, CRL_REG_LEN_08BIT, 0x01},
+	{0x7772, CRL_REG_LEN_08BIT, 0x05},
+	{0x7773, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7774, CRL_REG_LEN_08BIT, 0x03},
+	{0x7775, CRL_REG_LEN_08BIT, 0x90},
+	{0x7776, CRL_REG_LEN_08BIT, 0x05},
+	{0x7777, CRL_REG_LEN_08BIT, 0x83},
+	{0x7778, CRL_REG_LEN_08BIT, 0x05},
+	{0x7779, CRL_REG_LEN_08BIT, 0x03},
+	{0x777a, CRL_REG_LEN_08BIT, 0x05},
+	{0x777b, CRL_REG_LEN_08BIT, 0x32},
+	{0x777c, CRL_REG_LEN_08BIT, 0x05},
+	{0x777d, CRL_REG_LEN_08BIT, 0x30},
+	{0x777e, CRL_REG_LEN_08BIT, 0x00},
+	{0x777f, CRL_REG_LEN_08BIT, 0x02},
+	{0x7780, CRL_REG_LEN_08BIT, 0x05},
+	{0x7781, CRL_REG_LEN_08BIT, 0x78},
+	{0x7782, CRL_REG_LEN_08BIT, 0x00},
+	{0x7783, CRL_REG_LEN_08BIT, 0x01},
+	{0x7784, CRL_REG_LEN_08BIT, 0x05},
+	{0x7785, CRL_REG_LEN_08BIT, 0x7c},
+	{0x7786, CRL_REG_LEN_08BIT, 0x02},
+	{0x7787, CRL_REG_LEN_08BIT, 0x90},
+	{0x7788, CRL_REG_LEN_08BIT, 0x05},
+	{0x7789, CRL_REG_LEN_08BIT, 0x03},
+	{0x778a, CRL_REG_LEN_08BIT, 0x07},
+	{0x778b, CRL_REG_LEN_08BIT, 0x00},
+	{0x778c, CRL_REG_LEN_08BIT, 0x0f},
+	{0x778d, CRL_REG_LEN_08BIT, 0x00},
+	{0x778e, CRL_REG_LEN_08BIT, 0x08},
+	{0x778f, CRL_REG_LEN_08BIT, 0x30},
+	{0x7790, CRL_REG_LEN_08BIT, 0x08},
+	{0x7791, CRL_REG_LEN_08BIT, 0xee},
+	{0x7792, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7793, CRL_REG_LEN_08BIT, 0x00},
+	{0x7794, CRL_REG_LEN_08BIT, 0x05},
+	{0x7795, CRL_REG_LEN_08BIT, 0x33},
+	{0x7796, CRL_REG_LEN_08BIT, 0x04},
+	{0x7797, CRL_REG_LEN_08BIT, 0xe5},
+	{0x7798, CRL_REG_LEN_08BIT, 0x06},
+	{0x7799, CRL_REG_LEN_08BIT, 0x52},
+	{0x779a, CRL_REG_LEN_08BIT, 0x04},
+	{0x779b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x779c, CRL_REG_LEN_08BIT, 0x00},
+	{0x779d, CRL_REG_LEN_08BIT, 0x00},
+	{0x779e, CRL_REG_LEN_08BIT, 0x06},
+	{0x779f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77a2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77a4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77a6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77a7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77a9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77aa, CRL_REG_LEN_08BIT, 0x06},
+	{0x77ab, CRL_REG_LEN_08BIT, 0xae},
+	{0x77ac, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ad, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ae, CRL_REG_LEN_08BIT, 0x05},
+	{0x77af, CRL_REG_LEN_08BIT, 0x30},
+	{0x77b0, CRL_REG_LEN_08BIT, 0x09},
+	{0x77b1, CRL_REG_LEN_08BIT, 0x19},
+	{0x77b2, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77b3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77b4, CRL_REG_LEN_08BIT, 0x05},
+	{0x77b5, CRL_REG_LEN_08BIT, 0x33},
+	{0x77b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77b7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77b8, CRL_REG_LEN_08BIT, 0x06},
+	{0x77b9, CRL_REG_LEN_08BIT, 0x52},
+	{0x77ba, CRL_REG_LEN_08BIT, 0x04},
+	{0x77bb, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77bc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77bd, CRL_REG_LEN_08BIT, 0x00},
+	{0x77be, CRL_REG_LEN_08BIT, 0x06},
+	{0x77bf, CRL_REG_LEN_08BIT, 0x5e},
+	{0x77c0, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c1, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77c2, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c3, CRL_REG_LEN_08BIT, 0x1e},
+	{0x77c4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77c6, CRL_REG_LEN_08BIT, 0x06},
+	{0x77c7, CRL_REG_LEN_08BIT, 0xa2},
+	{0x77c8, CRL_REG_LEN_08BIT, 0x00},
+	{0x77c9, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ca, CRL_REG_LEN_08BIT, 0x06},
+	{0x77cb, CRL_REG_LEN_08BIT, 0xae},
+	{0x77cc, CRL_REG_LEN_08BIT, 0x00},
+	{0x77cd, CRL_REG_LEN_08BIT, 0x03},
+	{0x77ce, CRL_REG_LEN_08BIT, 0x05},
+	{0x77cf, CRL_REG_LEN_08BIT, 0x30},
+	{0x77d0, CRL_REG_LEN_08BIT, 0x0f},
+	{0x77d1, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d4, CRL_REG_LEN_08BIT, 0x00},
+	{0x77d5, CRL_REG_LEN_08BIT, 0x02},
+	{0x77d6, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d7, CRL_REG_LEN_08BIT, 0xe5},
+	{0x77d8, CRL_REG_LEN_08BIT, 0x04},
+	{0x77d9, CRL_REG_LEN_08BIT, 0xe4},
+	{0x77da, CRL_REG_LEN_08BIT, 0x05},
+	{0x77db, CRL_REG_LEN_08BIT, 0x33},
+	{0x77dc, CRL_REG_LEN_08BIT, 0x07},
+	{0x77dd, CRL_REG_LEN_08BIT, 0x10},
+	{0x77de, CRL_REG_LEN_08BIT, 0x00},
+	{0x77df, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e1, CRL_REG_LEN_08BIT, 0xbb},
+	{0x77e2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e5, CRL_REG_LEN_08BIT, 0xaa},
+	{0x77e6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77e8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77e9, CRL_REG_LEN_08BIT, 0x99},
+	{0x77ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x77eb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ec, CRL_REG_LEN_08BIT, 0x01},
+	{0x77ed, CRL_REG_LEN_08BIT, 0x88},
+	{0x77ee, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ef, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f0, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f1, CRL_REG_LEN_08BIT, 0x77},
+	{0x77f2, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f3, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f4, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f5, CRL_REG_LEN_08BIT, 0x66},
+	{0x77f6, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f7, CRL_REG_LEN_08BIT, 0x00},
+	{0x77f8, CRL_REG_LEN_08BIT, 0x01},
+	{0x77f9, CRL_REG_LEN_08BIT, 0x55},
+	{0x77fa, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fb, CRL_REG_LEN_08BIT, 0x00},
+	{0x77fc, CRL_REG_LEN_08BIT, 0x01},
+	{0x77fd, CRL_REG_LEN_08BIT, 0x44},
+	{0x77fe, CRL_REG_LEN_08BIT, 0x00},
+	{0x77ff, CRL_REG_LEN_08BIT, 0x00},
+	{0x7800, CRL_REG_LEN_08BIT, 0x01},
+	{0x7801, CRL_REG_LEN_08BIT, 0x33},
+	{0x7802, CRL_REG_LEN_08BIT, 0x00},
+	{0x7803, CRL_REG_LEN_08BIT, 0x00},
+	{0x7804, CRL_REG_LEN_08BIT, 0x01},
+	{0x7805, CRL_REG_LEN_08BIT, 0x22},
+	{0x7806, CRL_REG_LEN_08BIT, 0x00},
+	{0x7807, CRL_REG_LEN_08BIT, 0x00},
+	{0x7808, CRL_REG_LEN_08BIT, 0x01},
+	{0x7809, CRL_REG_LEN_08BIT, 0x11},
+	{0x780a, CRL_REG_LEN_08BIT, 0x00},
+	{0x780b, CRL_REG_LEN_08BIT, 0x00},
+	{0x780c, CRL_REG_LEN_08BIT, 0x01},
+	{0x780d, CRL_REG_LEN_08BIT, 0x00},
+	{0x780e, CRL_REG_LEN_08BIT, 0x01},
+	{0x780f, CRL_REG_LEN_08BIT, 0xff},
+	{0x7810, CRL_REG_LEN_08BIT, 0x07},
+	{0x7811, CRL_REG_LEN_08BIT, 0x00},
+	{0x7812, CRL_REG_LEN_08BIT, 0x02},
+	{0x7813, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7814, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7815, CRL_REG_LEN_08BIT, 0x00},
+	{0x7816, CRL_REG_LEN_08BIT, 0x08},
+	{0x7817, CRL_REG_LEN_08BIT, 0x35},
+	{0x7818, CRL_REG_LEN_08BIT, 0x06},
+	{0x7819, CRL_REG_LEN_08BIT, 0x52},
+	{0x781a, CRL_REG_LEN_08BIT, 0x04},
+	{0x781b, CRL_REG_LEN_08BIT, 0xe4},
+	{0x781c, CRL_REG_LEN_08BIT, 0x00},
+	{0x781d, CRL_REG_LEN_08BIT, 0x00},
+	{0x781e, CRL_REG_LEN_08BIT, 0x06},
+	{0x781f, CRL_REG_LEN_08BIT, 0x5e},
+	{0x7820, CRL_REG_LEN_08BIT, 0x05},
+	{0x7821, CRL_REG_LEN_08BIT, 0x33},
+	{0x7822, CRL_REG_LEN_08BIT, 0x09},
+	{0x7823, CRL_REG_LEN_08BIT, 0x19},
+	{0x7824, CRL_REG_LEN_08BIT, 0x06},
+	{0x7825, CRL_REG_LEN_08BIT, 0x1e},
+	{0x7826, CRL_REG_LEN_08BIT, 0x05},
+	{0x7827, CRL_REG_LEN_08BIT, 0x33},
+	{0x7828, CRL_REG_LEN_08BIT, 0x00},
+	{0x7829, CRL_REG_LEN_08BIT, 0x01},
+	{0x782a, CRL_REG_LEN_08BIT, 0x06},
+	{0x782b, CRL_REG_LEN_08BIT, 0x24},
+	{0x782c, CRL_REG_LEN_08BIT, 0x06},
+	{0x782d, CRL_REG_LEN_08BIT, 0x20},
+	{0x782e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x782f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7830, CRL_REG_LEN_08BIT, 0x08},
+	{0x7831, CRL_REG_LEN_08BIT, 0x35},
+	{0x7832, CRL_REG_LEN_08BIT, 0x07},
+	{0x7833, CRL_REG_LEN_08BIT, 0x10},
+	{0x7834, CRL_REG_LEN_08BIT, 0x00},
+	{0x7835, CRL_REG_LEN_08BIT, 0x00},
+	{0x7836, CRL_REG_LEN_08BIT, 0x01},
+	{0x7837, CRL_REG_LEN_08BIT, 0xbb},
+	{0x7838, CRL_REG_LEN_08BIT, 0x00},
+	{0x7839, CRL_REG_LEN_08BIT, 0x00},
+	{0x783a, CRL_REG_LEN_08BIT, 0x01},
+	{0x783b, CRL_REG_LEN_08BIT, 0xaa},
+	{0x783c, CRL_REG_LEN_08BIT, 0x00},
+	{0x783d, CRL_REG_LEN_08BIT, 0x00},
+	{0x783e, CRL_REG_LEN_08BIT, 0x01},
+	{0x783f, CRL_REG_LEN_08BIT, 0x99},
+	{0x7840, CRL_REG_LEN_08BIT, 0x00},
+	{0x7841, CRL_REG_LEN_08BIT, 0x00},
+	{0x7842, CRL_REG_LEN_08BIT, 0x01},
+	{0x7843, CRL_REG_LEN_08BIT, 0x88},
+	{0x7844, CRL_REG_LEN_08BIT, 0x00},
+	{0x7845, CRL_REG_LEN_08BIT, 0x00},
+	{0x7846, CRL_REG_LEN_08BIT, 0x01},
+	{0x7847, CRL_REG_LEN_08BIT, 0x77},
+	{0x7848, CRL_REG_LEN_08BIT, 0x00},
+	{0x7849, CRL_REG_LEN_08BIT, 0x00},
+	{0x784a, CRL_REG_LEN_08BIT, 0x01},
+	{0x784b, CRL_REG_LEN_08BIT, 0x66},
+	{0x784c, CRL_REG_LEN_08BIT, 0x00},
+	{0x784d, CRL_REG_LEN_08BIT, 0x00},
+	{0x784e, CRL_REG_LEN_08BIT, 0x01},
+	{0x784f, CRL_REG_LEN_08BIT, 0x55},
+	{0x7850, CRL_REG_LEN_08BIT, 0x00},
+	{0x7851, CRL_REG_LEN_08BIT, 0x00},
+	{0x7852, CRL_REG_LEN_08BIT, 0x01},
+	{0x7853, CRL_REG_LEN_08BIT, 0x44},
+	{0x7854, CRL_REG_LEN_08BIT, 0x00},
+	{0x7855, CRL_REG_LEN_08BIT, 0x00},
+	{0x7856, CRL_REG_LEN_08BIT, 0x01},
+	{0x7857, CRL_REG_LEN_08BIT, 0x33},
+	{0x7858, CRL_REG_LEN_08BIT, 0x00},
+	{0x7859, CRL_REG_LEN_08BIT, 0x00},
+	{0x785a, CRL_REG_LEN_08BIT, 0x01},
+	{0x785b, CRL_REG_LEN_08BIT, 0x22},
+	{0x785c, CRL_REG_LEN_08BIT, 0x00},
+	{0x785d, CRL_REG_LEN_08BIT, 0x00},
+	{0x785e, CRL_REG_LEN_08BIT, 0x01},
+	{0x785f, CRL_REG_LEN_08BIT, 0x11},
+	{0x7860, CRL_REG_LEN_08BIT, 0x00},
+	{0x7861, CRL_REG_LEN_08BIT, 0x00},
+	{0x7862, CRL_REG_LEN_08BIT, 0x01},
+	{0x7863, CRL_REG_LEN_08BIT, 0x00},
+	{0x7864, CRL_REG_LEN_08BIT, 0x07},
+	{0x7865, CRL_REG_LEN_08BIT, 0x00},
+	{0x7866, CRL_REG_LEN_08BIT, 0x01},
+	{0x7867, CRL_REG_LEN_08BIT, 0xff},
+	{0x7868, CRL_REG_LEN_08BIT, 0x02},
+	{0x7869, CRL_REG_LEN_08BIT, 0xa0},
+	{0x786a, CRL_REG_LEN_08BIT, 0x0f},
+	{0x786b, CRL_REG_LEN_08BIT, 0x00},
+	{0x786c, CRL_REG_LEN_08BIT, 0x08},
+	{0x786d, CRL_REG_LEN_08BIT, 0x3a},
+	{0x786e, CRL_REG_LEN_08BIT, 0x08},
+	{0x786f, CRL_REG_LEN_08BIT, 0x6a},
+	{0x7870, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7871, CRL_REG_LEN_08BIT, 0x00},
+	{0x7872, CRL_REG_LEN_08BIT, 0x04},
+	{0x7873, CRL_REG_LEN_08BIT, 0xc0},
+	{0x7874, CRL_REG_LEN_08BIT, 0x09},
+	{0x7875, CRL_REG_LEN_08BIT, 0x19},
+	{0x7876, CRL_REG_LEN_08BIT, 0x04},
+	{0x7877, CRL_REG_LEN_08BIT, 0x99},
+	{0x7878, CRL_REG_LEN_08BIT, 0x07},
+	{0x7879, CRL_REG_LEN_08BIT, 0x14},
+	{0x787a, CRL_REG_LEN_08BIT, 0x00},
+	{0x787b, CRL_REG_LEN_08BIT, 0x01},
+	{0x787c, CRL_REG_LEN_08BIT, 0x04},
+	{0x787d, CRL_REG_LEN_08BIT, 0xa4},
+	{0x787e, CRL_REG_LEN_08BIT, 0x00},
+	{0x787f, CRL_REG_LEN_08BIT, 0x07},
+	{0x7880, CRL_REG_LEN_08BIT, 0x04},
+	{0x7881, CRL_REG_LEN_08BIT, 0xa6},
+	{0x7882, CRL_REG_LEN_08BIT, 0x00},
+	{0x7883, CRL_REG_LEN_08BIT, 0x00},
+	{0x7884, CRL_REG_LEN_08BIT, 0x04},
+	{0x7885, CRL_REG_LEN_08BIT, 0xa0},
+	{0x7886, CRL_REG_LEN_08BIT, 0x04},
+	{0x7887, CRL_REG_LEN_08BIT, 0x80},
+	{0x7888, CRL_REG_LEN_08BIT, 0x04},
+	{0x7889, CRL_REG_LEN_08BIT, 0x00},
+	{0x788a, CRL_REG_LEN_08BIT, 0x05},
+	{0x788b, CRL_REG_LEN_08BIT, 0x03},
+	{0x788c, CRL_REG_LEN_08BIT, 0x06},
+	{0x788d, CRL_REG_LEN_08BIT, 0x00},
+	{0x788e, CRL_REG_LEN_08BIT, 0x0f},
+	{0x788f, CRL_REG_LEN_08BIT, 0x00},
+	{0x7890, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7891, CRL_REG_LEN_08BIT, 0x00},
+	{0x7892, CRL_REG_LEN_08BIT, 0x0f},
+	{0x7893, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a0, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a1, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a2, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a3, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a4, CRL_REG_LEN_08BIT, 0x07},
+	{0x30a5, CRL_REG_LEN_08BIT, 0x8f},
+	{0x30a6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30a7, CRL_REG_LEN_08BIT, 0x47},
+	{0x30a8, CRL_REG_LEN_08BIT, 0x00},
+	{0x30a9, CRL_REG_LEN_08BIT, 0x05},
+	{0x30aa, CRL_REG_LEN_08BIT, 0x00},
+	{0x30ab, CRL_REG_LEN_08BIT, 0x04},
+	{0x30ac, CRL_REG_LEN_08BIT, 0x07},
+	{0x30ad, CRL_REG_LEN_08BIT, 0x88},
+	{0x30ae, CRL_REG_LEN_08BIT, 0x04},
+	{0x30af, CRL_REG_LEN_08BIT, 0x40},
+	{0x30b0, CRL_REG_LEN_08BIT, 0x0d},
+	{0x30b1, CRL_REG_LEN_08BIT, 0xde},
+	{0x30b2, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b3, CRL_REG_LEN_08BIT, 0x66},
+	{0x30b6, CRL_REG_LEN_08BIT, 0x04},
+	{0x30b7, CRL_REG_LEN_08BIT, 0x62},
+	{0x3196, CRL_REG_LEN_08BIT, 0x00},
+	{0x3197, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3195, CRL_REG_LEN_08BIT, 0x29},
+	{0x315a, CRL_REG_LEN_08BIT, 0x02},
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},
+	{0x30bb, CRL_REG_LEN_08BIT, 0x40},
+	{0x3250, CRL_REG_LEN_08BIT, 0xf7},
+};
+
+/* ov2775_1928x1088_linearHCG_30fps_mipi960_regset */
+static struct crl_register_write_rep ov2775_linearHCG_30fps_mipi960_regset[] = {
+	{0x3190, CRL_REG_LEN_08BIT, 0x08},  /* interface control, output format setting */
+	{0x30bb, CRL_REG_LEN_08BIT, 0x40},  /* Conversion gain, analog gain control */
+
+	{0x315a, CRL_REG_LEN_08BIT, 0x02},  /* Digital gain H in linear mode */
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain L in linear mode */
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for LCG MSB */
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain for LCG LSB */
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for VS MSB */
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain for VS LSB */
+
+	{0x30b7, CRL_REG_LEN_08BIT, 0x62},  /* DCG exposure time */
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},  /* integer part of VS exposure time */
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},  /* integer part of VS exposure time */
+
+	{0x3123, CRL_REG_LEN_08BIT, 0xf0},  /* unknown */
+	{0x3199, CRL_REG_LEN_08BIT, 0x7f},  /* unknown */
+	{0x319a, CRL_REG_LEN_08BIT, 0x80},  /* unknown */
+	{0x319b, CRL_REG_LEN_08BIT, 0xff},  /* unknown */
+	{0x3254, CRL_REG_LEN_08BIT, 0x00},  /* pre control */
+	{0x33e2, CRL_REG_LEN_08BIT, 0x02},  /* DPC white threshold list */
+	{0x33e3, CRL_REG_LEN_08BIT, 0x01},  /* DPC white threshold list */
+	{0x33ed, CRL_REG_LEN_08BIT, 0x01},  /* DPC gain list VS */
+	{0x33ee, CRL_REG_LEN_08BIT, 0x02},  /* DPC gain list VS */
+	{0x33ef, CRL_REG_LEN_08BIT, 0x08},  /* DPC gain list VS */
+	{0x346a, CRL_REG_LEN_08BIT, 0x33},  /* last embedded data range H */
+	{0x346b, CRL_REG_LEN_08BIT, 0xbf},  /* last embedded data range L */
+	{0x3195, CRL_REG_LEN_08BIT, 0x29},  /* vfifo read level */
+};
+
+/* ov2775_1928x1088_linearLCG_30fps_mipi960_regset */
+static struct crl_register_write_rep ov2775_linearLCG_30fps_mipi960_regset[] = {
+	{0x3190, CRL_REG_LEN_08BIT, 0x08},  /* interface control, output format setting */
+	{0x30bb, CRL_REG_LEN_08BIT, 0x01},  /* Conversion gain, analog gain control */
+
+	{0x315a, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain H in linear mode */
+	{0x315b, CRL_REG_LEN_08BIT, 0x80},  /* Digital gain L in linear mode */
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for LCG MSB */
+	{0x315d, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain for LCG LSB */
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for VS MSB */
+	{0x315f, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain for VS LSB */
+
+	{0x30b7, CRL_REG_LEN_08BIT, 0x62},  /* DCG exposure time */
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},  /* integer part of VS exposure time */
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},  /* integer part of VS exposure time */
+
+	{0x3123, CRL_REG_LEN_08BIT, 0xf0},  /* unknown */
+	{0x3199, CRL_REG_LEN_08BIT, 0x7f},  /* unknown */
+	{0x319a, CRL_REG_LEN_08BIT, 0x80},  /* unknown */
+	{0x319b, CRL_REG_LEN_08BIT, 0xff},  /* unknown */
+	{0x3254, CRL_REG_LEN_08BIT, 0x00},  /* pre control */
+	{0x33e2, CRL_REG_LEN_08BIT, 0x02},  /* DPC white threshold list */
+	{0x33e3, CRL_REG_LEN_08BIT, 0x01},  /* DPC white threshold list */
+	{0x33ed, CRL_REG_LEN_08BIT, 0x01},  /* DPC gain list VS */
+	{0x33ee, CRL_REG_LEN_08BIT, 0x02},  /* DPC gain list VS */
+	{0x33ef, CRL_REG_LEN_08BIT, 0x08},  /* DPC gain list VS */
+	{0x346a, CRL_REG_LEN_08BIT, 0x33},  /* last embedded data range H */
+	{0x346b, CRL_REG_LEN_08BIT, 0xbf},  /* last embedded data range L */
+	{0x3195, CRL_REG_LEN_08BIT, 0x29},  /* vfifo read level */
+};
+
+/* ov2775_1928x1088_2x12_30fps_mipi960_regset */
+static struct crl_register_write_rep ov2775_2x12_30fps_mipi960_regset[] = {
+	{0x3190, CRL_REG_LEN_08BIT, 0x01},  /* interface control, output format setting */
+	{0x30bb, CRL_REG_LEN_08BIT, 0x14},  /* Conversion gain, analog gain control */
+
+	{0x315a, CRL_REG_LEN_08BIT, 0x02},  /* Digital gain H in linear mode */
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain L in linear mode */
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for LCG MSB */
+	{0x315d, CRL_REG_LEN_08BIT, 0x80},  /* Digital gain for LCG LSB */
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for VS MSB */
+	{0x315f, CRL_REG_LEN_08BIT, 0x80},  /* Digital gain for VS LSB */
+
+	{0x30b7, CRL_REG_LEN_08BIT, 0x62},  /* DCG exposure time */
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},  /* integer part of VS exposure time */
+	{0x30b9, CRL_REG_LEN_08BIT, 0x02},  /* integer part of VS exposure time */
+
+	{0x3123, CRL_REG_LEN_08BIT, 0x00},  /* unknown */
+	{0x3199, CRL_REG_LEN_08BIT, 0x3f},  /* unknown */
+	{0x319a, CRL_REG_LEN_08BIT, 0x40},  /* unknown */
+	{0x319b, CRL_REG_LEN_08BIT, 0x7f},  /* unknown */
+	{0x3254, CRL_REG_LEN_08BIT, 0x11},  /* pre control */
+	{0x33e2, CRL_REG_LEN_08BIT, 0x04},  /* DPC white threshold list */
+	{0x33e3, CRL_REG_LEN_08BIT, 0x02},  /* DPC white threshold list */
+	{0x33ed, CRL_REG_LEN_08BIT, 0x02},  /* DPC gain list VS */
+	{0x33ee, CRL_REG_LEN_08BIT, 0x05},  /* DPC gain list VS */
+	{0x33ef, CRL_REG_LEN_08BIT, 0x0a},  /* DPC gain list VS */
+	{0x346a, CRL_REG_LEN_08BIT, 0x35},  /* last embedded data range H */
+	{0x346b, CRL_REG_LEN_08BIT, 0x00},  /* last embedded data range L */
+	{0x3195, CRL_REG_LEN_08BIT, 0x2e},  /* vfifo read level */
+};
+
+/* ov2775_1928x1088_3x12_30fps_mipi960_regset */
+static struct crl_register_write_rep ov2775_3x12_30fps_mipi960_regset[] = {
+	{0x3190, CRL_REG_LEN_08BIT, 0x05},  /* interface control, output format setting */
+	{0x30bb, CRL_REG_LEN_08BIT, 0x14},  /* Conversion gain, analog gain control */
+
+	{0x315a, CRL_REG_LEN_08BIT, 0x02},  /* Digital gain H in linear mode */
+	{0x315b, CRL_REG_LEN_08BIT, 0x00},  /* Digital gain L in linear mode */
+	{0x315c, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for LCG MSB */
+	{0x315d, CRL_REG_LEN_08BIT, 0x80},  /* Digital gain for LCG LSB */
+	{0x315e, CRL_REG_LEN_08BIT, 0x01},  /* Digital gain for VS MSB */
+	{0x315f, CRL_REG_LEN_08BIT, 0x80},  /* Digital gain for VS LSB */
+
+	{0x30b7, CRL_REG_LEN_08BIT, 0x22},  /* DCG exposure time */
+	{0x30b8, CRL_REG_LEN_08BIT, 0x00},  /* integer part of VS exposure time */
+	{0x30b9, CRL_REG_LEN_08BIT, 0x40},  /* integer part of VS exposure time */
+
+	{0x3123, CRL_REG_LEN_08BIT, 0x00},  /* unknown */
+	{0x3199, CRL_REG_LEN_08BIT, 0x3f},  /* unknown */
+	{0x319a, CRL_REG_LEN_08BIT, 0x40},  /* unknown */
+	{0x319b, CRL_REG_LEN_08BIT, 0x7f},  /* unknown */
+	{0x3254, CRL_REG_LEN_08BIT, 0x11},  /* pre control */
+	{0x33e2, CRL_REG_LEN_08BIT, 0x04},  /* DPC white threshold list */
+	{0x33e3, CRL_REG_LEN_08BIT, 0x02},  /* DPC white threshold list */
+	{0x33ed, CRL_REG_LEN_08BIT, 0x02},  /* DPC gain list VS */
+	{0x33ee, CRL_REG_LEN_08BIT, 0x05},  /* DPC gain list VS */
+	{0x33ef, CRL_REG_LEN_08BIT, 0x0a},  /* DPC gain list VS */
+	{0x346a, CRL_REG_LEN_08BIT, 0x35},  /* last embedded data range H */
+	{0x346b, CRL_REG_LEN_08BIT, 0x00},  /* last embedded data range L */
+	{0x3195, CRL_REG_LEN_08BIT, 0x2e},  /* vfifo read level */
+};
+
+static struct crl_register_write_rep ov2775_powerup_standby_regset[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_register_write_rep ov2775_streamon_regs[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x01 }
+};
+
+static struct crl_register_write_rep ov2775_streamoff_regs[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+static struct crl_arithmetic_ops ov2775_vflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 3,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_vblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_hflip_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_hblank_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_exposure_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_ana_gain_l_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 2,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_ana_gain_vs_ops[] = {
+	{
+		.op = CRL_BITWISE_LSHIFT,
+		.operand.entity_val = 4,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_digital_gain_ops[] = {
+	{
+		.op = CRL_BITWISE_RSHIFT,
+		.operand.entity_val = 8,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_v_flip_regs[] = {
+	{
+		.address = 0x30C0,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_vflip_ops),
+		.ops = ov2775_vflip_ops,
+		.mask = 0x08,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_h_flip_regs[] = {
+	{
+		.address = 0x30C0,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_hflip_ops),
+		.ops = ov2775_hflip_ops,
+		.mask = 0x04,
+	},
+};
+
+struct crl_register_write_rep ov2775_poweroff_regset[] = {
+	{ 0x3012, CRL_REG_LEN_08BIT, 0x00 }
+};
+
+/* 0: 1x, 1: 2x, 2: 4x, 3: 8x
+ * linear mode analog gain uses ana_gain_h
+ */
+static struct crl_dynamic_register_access ov2775_ana_gain_h_regs[] = {
+	{
+		.address = 0x30BB,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x03,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_ana_gain_l_regs[] = {
+	{
+		.address = 0x30BB,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_ana_gain_l_ops),
+		.ops = ov2775_ana_gain_l_ops,
+		.mask = 0x0c,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_ana_gain_vs_regs[] = {
+	{
+		.address = 0x30BB,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = ARRAY_SIZE(ov2775_ana_gain_vs_ops),
+		.ops = ov2775_ana_gain_vs_ops,
+		.mask = 0x30,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_digital_gain_h_regs[] = {
+	{
+		.address = 0x305A,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_digital_gain_ops),
+		.ops = ov2775_digital_gain_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x305B,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_digital_gain_l_regs[] = {
+	{
+		.address = 0x305C,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_digital_gain_ops),
+		.ops = ov2775_digital_gain_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x305D,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_digital_gain_vs_regs[] = {
+	{
+		.address = 0x305E,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_digital_gain_ops),
+		.ops = ov2775_digital_gain_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x305F,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_exposure_dcg_regs[] = {
+	{
+		.address = 0x30B6,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_exposure_ops),
+		.ops = ov2775_exposure_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B7,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+/* 03B8 and 03B9 are integer part, 03BA is fractional part with N/32
+ * just use integer part
+ */
+static struct crl_dynamic_register_access ov2775_exposure_vs_regs[] = {
+	{
+		.address = 0x30B8,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_exposure_ops),
+		.ops = ov2775_exposure_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B9,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_vblank_regs[] = {
+	{
+		.address = 0x30B2,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_vblank_ops),
+		.ops = ov2775_vblank_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B3,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_dynamic_register_access ov2775_hblank_regs[] = {
+	{
+		.address = 0x30B0,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = ARRAY_SIZE(ov2775_hblank_ops),
+		.ops = ov2775_hblank_ops,
+		.mask = 0xff,
+	},
+	{
+		.address = 0x30B1,
+		.len = CRL_REG_LEN_08BIT,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xff,
+	},
+};
+
+static struct crl_sensor_detect_config ov2775_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff  },
+		.width = 7,
+	},
+};
+
+/* pixel_rate = op_sys_clk*2 * csi_lanes / bitsperpixel */
+static struct crl_pll_configuration ov2775_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 480000000,
+		.bitsperpixel = 12,
+		.pixel_rate_csi = 80000000,
+		.pixel_rate_pa = 80000000,
+		.csi_lanes = 2,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = 0,
+	},
+};
+
+static struct crl_subdev_rect_rep ov2775_1928x1088_rects_native[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1928,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1928,
+		.out_rect.height = 1088,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1928,
+		.in_rect.height = 1088,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1928,
+		.out_rect.height = 1088,
+	},
+};
+
+static struct crl_mode_rep ov2775_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1928x1088_rects_native),
+		.sd_rects = ov2775_1928x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1928,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov2775_linearHCG_30fps_mipi960_regset),
+		.mode_regs = ov2775_linearHCG_30fps_mipi960_regset,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1928x1088_rects_native),
+		.sd_rects = ov2775_1928x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1928,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov2775_linearLCG_30fps_mipi960_regset),
+		.mode_regs = ov2775_linearLCG_30fps_mipi960_regset,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1928x1088_rects_native),
+		.sd_rects = ov2775_1928x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1928,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov2775_2x12_30fps_mipi960_regset),
+		.mode_regs = ov2775_2x12_30fps_mipi960_regset,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov2775_1928x1088_rects_native),
+		.sd_rects = ov2775_1928x1088_rects_native,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1928,
+		.height = 1088,
+		.min_llp = 3550,
+		.min_fll = 1126,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.mode_regs_items = ARRAY_SIZE(ov2775_3x12_30fps_mipi960_regset),
+		.mode_regs = ov2775_3x12_30fps_mipi960_regset,
+	},
+};
+
+static struct crl_sensor_subdev_config ov2775_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov2775 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov2775 pixel array",
+	},
+};
+
+static struct crl_sensor_limits ov2775_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1936,
+	.y_addr_max = 1096,
+	.min_frame_length_lines = 1126,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 3550,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data ov2775_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+	},
+};
+
+static struct crl_csi_data_fmt ov2775_crl_csi_data_fmt[] = {
+	{
+		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GRBG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_RGGB,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_BGGR,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+	{
+		.code = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.pixel_order = CRL_PIXEL_ORDER_GBRG,
+		.bits_per_pixel = 12,
+		.regs_items = 0,
+		.regs = 0,
+	},
+};
+
+static struct crl_v4l2_ctrl ov2775_v4l2_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = V4L2_CID_LINK_FREQ,
+		.name = "V4L2_CID_LINK_FREQ",
+		.type = CRL_V4L2_CTRL_TYPE_MENU_INT,
+		.data.v4l2_int_menu.def = 0,
+		.data.v4l2_int_menu.max = 0,
+		.data.v4l2_int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_PA",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_PIXEL_RATE,
+		.name = "V4L2_CID_PIXEL_RATE_CSI",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_S,
+		.name = "CRL_CID_ANALOG_GAIN_HCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_ana_gain_h_regs),
+		.regs = ov2775_ana_gain_h_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_L,
+		.name = "CRL_CID_ANALOG_GAIN_LCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_ana_gain_l_regs),
+		.regs = ov2775_ana_gain_l_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_ANALOG_GAIN_VS,
+		.name = "CRL_CID_ANALOG_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_ana_gain_vs_regs),
+		.regs = ov2775_ana_gain_vs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_L,
+		.name = "CRL_CID_DIGITAL_GAIN_LCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_digital_gain_l_regs),
+		.regs = ov2775_digital_gain_l_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_S,
+		.name = "CRL_CID_DIGITAL_GAIN_HCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_digital_gain_h_regs),
+		.regs = ov2775_digital_gain_h_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_DIGITAL_GAIN_VS,
+		.name = "CRL_CID_DIGITAL_GAIN_VS",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 4096,
+		.data.std_data.step = 1,
+		.data.std_data.def = 128,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_digital_gain_vs_regs),
+		.regs = ov2775_digital_gain_vs_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS1,
+		.name = "CRL_CID_EXPOSURE_DCG",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 1,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_exposure_dcg_regs),
+		.regs = ov2775_exposure_dcg_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_EXPOSURE_SHS2,
+		.name = "CRL_CID_EXPOSURE_VS",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 1,
+		.data.std_data.max = 65500,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_exposure_vs_regs),
+		.regs = ov2775_exposure_vs_regs,
+		.dep_items = 0, /* FLL is changes automatically */
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_HFLIP,
+		.name = "V4L2_CID_HFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_h_flip_regs),
+		.regs = ov2775_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_VFLIP,
+		.name = "V4L2_CID_VFLIP",
+		.type = CRL_V4L2_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_v_flip_regs),
+		.regs = ov2775_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_FRAME_LENGTH_LINES,
+		.name = "Frame Length Lines",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 160,
+		.data.std_data.max = 65535,
+		.data.std_data.step = 1,
+		.data.std_data.def = 1126,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_vblank_regs),
+		.regs = ov2775_vblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = V4L2_CID_LINE_LENGTH_PIXELS,
+		.name = "Line Length Pixels",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 1024,
+		.data.std_data.max = 65520,
+		.data.std_data.step = 1,
+		.data.std_data.def = 3550,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov2775_hblank_regs),
+		.regs = ov2775_hblank_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_V4L2_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = CRL_CID_SENSOR_MODE,
+		.name = "CRL_CID_SENSOR_MODE",
+		.type = CRL_V4L2_CTRL_TYPE_CUSTOM,
+		.data.std_data.min = 0,
+		.data.std_data.max = OV2775_CAPTURE_MODE_MAX - 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = V4L2_CTRL_FLAG_UPDATE,
+		.impact = CRL_IMPACTS_MODE_SELECTION,
+		.ctrl = 0,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+		.v4l2_type = V4L2_CTRL_TYPE_INTEGER,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_frame_desc_width_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.operand.entity_val = CRL_VAR_REF_OUTPUT_WIDTH,
+	},
+};
+
+static struct crl_arithmetic_ops ov2775_frame_desc_height_ops[] = {
+	{
+		.op = CRL_ASSIGNMENT,
+		.operand.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST,
+		.operand.entity_val = 1,
+	},
+};
+
+static struct crl_frame_desc ov2775_frame_desc[] = {
+	{
+		.flags.entity_val = 0,
+		.bpp.entity_type = CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF,
+		.bpp.entity_val = CRL_VAR_REF_BITSPERPIXEL,
+		.pixelcode.entity_val = MEDIA_BUS_FMT_FIXED,
+		.length.entity_val = 0,
+		.start_line.entity_val = 0,
+		.start_pixel.entity_val = 0,
+		.width = {
+			 .ops_items = ARRAY_SIZE(ov2775_frame_desc_width_ops),
+			 .ops = ov2775_frame_desc_width_ops,
+			 },
+		.height = {
+			  .ops_items = ARRAY_SIZE(ov2775_frame_desc_height_ops),
+			  .ops = ov2775_frame_desc_height_ops,
+			  },
+		.csi2_channel.entity_val = 0,
+		.csi2_data_type.entity_val = 0x12,
+	},
+};
+
+/* Power items, they are enabled in the order they are listed here */
+static struct crl_power_seq_entity ov2775_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_CLK_FRAMEWORK,
+		.val = 24000000,
+	},
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 1,
+		.undo_val = 0,
+		.delay = 1000,
+	},
+};
+
+static struct crl_sensor_configuration ov2775_crl_configuration = {
+
+	.power_items = ARRAY_SIZE(ov2775_power_items),
+	.power_entities = ov2775_power_items,
+
+	.onetime_init_regs_items = ARRAY_SIZE(ov2775_onetime_init_regset),
+	.onetime_init_regs = ov2775_onetime_init_regset,
+
+	.powerup_regs_items = ARRAY_SIZE(ov2775_powerup_standby_regset),
+	.powerup_regs = ov2775_powerup_standby_regset,
+
+	.poweroff_regs_items = 0,
+	.poweroff_regs = 0,
+
+	.id_reg_items = ARRAY_SIZE(ov2775_sensor_detect_regset),
+	.id_regs = ov2775_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov2775_sensor_subdevs),
+	.subdevs = ov2775_sensor_subdevs,
+
+	.sensor_limits = &ov2775_sensor_limits,
+
+	.pll_config_items = ARRAY_SIZE(ov2775_pll_configurations),
+	.pll_configs = ov2775_pll_configurations,
+
+	.modes_items = ARRAY_SIZE(ov2775_modes),
+	.modes = ov2775_modes,
+
+	.streamon_regs_items = ARRAY_SIZE(ov2775_streamon_regs),
+	.streamon_regs = ov2775_streamon_regs,
+
+	.streamoff_regs_items = ARRAY_SIZE(ov2775_streamoff_regs),
+	.streamoff_regs = ov2775_streamoff_regs,
+
+	.v4l2_ctrls_items = ARRAY_SIZE(ov2775_v4l2_ctrls),
+	.v4l2_ctrl_bank = ov2775_v4l2_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov2775_crl_csi_data_fmt),
+	.csi_fmts = ov2775_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov2775_flip_configurations),
+	.flip_data = ov2775_flip_configurations,
+
+	.crl_nvm_info.nvm_flags = CRL_NVM_ADDR_MODE_16BIT,
+	.crl_nvm_info.nvm_preop_regs_items = 0,
+	.crl_nvm_info.nvm_postop_regs_items = 0,
+	.crl_nvm_info.nvm_blobs_items = 0,
+
+	.frame_desc_entries = ARRAY_SIZE(ov2775_frame_desc),
+	.frame_desc_type = CRL_V4L2_MBUS_FRAME_DESC_TYPE_CSI2,
+	.frame_desc = ov2775_frame_desc,
+};
+
+#endif  /* __CRLMODULE_OV2775_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule/crlmodule-data.c b/drivers/media/i2c/crlmodule/crlmodule-data.c
index 36475c2..512c597 100755
--- a/drivers/media/i2c/crlmodule/crlmodule-data.c
+++ b/drivers/media/i2c/crlmodule/crlmodule-data.c
@@ -31,6 +31,7 @@
 #include "crl_ov9281_configuration.h"
 #include "crl_magna_configuration.h"
 #include "crl_ar023z_configuration.h"
+#include "crl_ov2775_configuration.h"
 
 static const struct crlmodule_sensors supported_sensors[] = {
 	{ "i2c-OVTIF858:00", "ov13858", &ov13858_crl_configuration},
@@ -74,6 +75,7 @@ static const struct crlmodule_sensors supported_sensors[] = {
 	{ "INT3474", "ov2740", &ov2740_crl_configuration },
 	{ "MAGNA", "magna", &magna_crl_configuration },
 	{ "AR023Z", "ar023z", &ar023z_crl_configuration },
+	{ "OV2775", "ov2775", &ov2775_crl_configuration },
 };
 
 /*
diff --git a/drivers/media/platform/intel/Kconfig b/drivers/media/platform/intel/Kconfig
index 2cd9d2f..be7621c 100755
--- a/drivers/media/platform/intel/Kconfig
+++ b/drivers/media/platform/intel/Kconfig
@@ -115,4 +115,10 @@ config INTEL_IPU4_IMX290
 	bool "Compile platform data for IMX290"
 	depends on INTEL_IPU4_BXT_P_PDATA
 	---help---
-	Sony 8MB camera sensor is enabled for HDR function
+	"Sony 8MB camera sensor is enabled for HDR function"
+
+config INTEL_IPU4_OV2775
+	bool "Compile platform data for OV2775"
+	depends on INTEL_IPU4_BXT_P_PDATA
+	---help---
+	"Omnivision OV2775 camera sensor"
diff --git a/drivers/media/platform/intel/ipu4-bxt-p-pdata.c b/drivers/media/platform/intel/ipu4-bxt-p-pdata.c
index 1638d9d..52cab10 100755
--- a/drivers/media/platform/intel/ipu4-bxt-p-pdata.c
+++ b/drivers/media/platform/intel/ipu4-bxt-p-pdata.c
@@ -915,6 +915,43 @@ static struct ipu_isys_subdev_info ti964_sd_2 = {
 };
 #endif
 
+#ifdef CONFIG_INTEL_IPU4_OV2775
+#define OV2775_LANES	   2
+#define OV2775_I2C_ADAPTER     3
+#define OV2775_I2C_ADDRESS     0x6C
+
+static struct crlmodule_platform_data ov2775_pdata = {
+	.lanes = OV2775_LANES,
+	.ext_clk = 24000000,
+	.op_sys_clock = (uint64_t []){ 480000000 },
+	.module_name = "OV2775",
+	.id_string = "0x27 0x70",
+	/*
+	 * The pin number of xshutdown will be determined
+	 * and replaced inside TI960 driver.
+	 * The number here stands for which GPIO to connect with.
+	 * 1 means to connect sensor xshutdown to GPIO1
+	 */
+	.xshutdown = 1,
+};
+
+static struct ipu_isys_csi2_config ov2775_csi2_cfg = {
+	.nlanes = OV2775_LANES,
+	.port = 4,
+};
+
+static struct ipu_isys_subdev_info ov2775_crl_sd = {
+	.csi2 = &ov2775_csi2_cfg,
+	.i2c = {
+		.board_info = {
+			I2C_BOARD_INFO(CRLMODULE_NAME, OV2775_I2C_ADDRESS),
+			.platform_data = &ov2775_pdata,
+		},
+		.i2c_adapter_id = OV2775_I2C_ADAPTER,
+	}
+};
+#endif
+
 /*
  * Map buttress output sensor clocks to sensors -
  * this should be coming from ACPI
@@ -989,6 +1026,9 @@ static struct ipu_isys_subdev_pdata pdata = {
 		&ti964_sd,
 		&ti964_sd_2,
 #endif
+#ifdef CONFIG_INTEL_IPU4_OV2775
+		&ov2775_crl_sd,
+#endif
 		NULL,
 	},
 	.clk_map = clk_mapping,
diff --git a/include/uapi/linux/crlmodule.h b/include/uapi/linux/crlmodule.h
index b7195ec..73dd651 100644
--- a/include/uapi/linux/crlmodule.h
+++ b/include/uapi/linux/crlmodule.h
@@ -60,7 +60,7 @@ struct crl_registers_info {
 #define CRL_CID_MSB_ALIGN		(V4L2_CID_CRLMODULE_BASE + 18)
 
 /* enable/disable auto exposure */
-#define CRL_CID_AUTO_EXPOSURE_DEBUG		(V4L2_CID_CRLMODULE_BASE + 19)
+#define CRL_CID_AUTO_EXPOSURE_DEBUG	(V4L2_CID_CRLMODULE_BASE + 19)
 
 /* set analog gain for HDR frames */
 #define CRL_CID_ANALOG_GAIN_L		(V4L2_CID_CRLMODULE_BASE + 20)
-- 
2.7.4

