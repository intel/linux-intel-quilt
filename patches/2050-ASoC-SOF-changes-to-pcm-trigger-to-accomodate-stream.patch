From 9ea6bbd4781d2fb52b470c828fd8445e8ce02465 Mon Sep 17 00:00:00 2001
From: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date: Wed, 18 Jul 2018 00:32:15 -0700
Subject: [PATCH 2050/2313] ASoC: SOF: changes to pcm trigger to accomodate
 stream restore

This patch adds the changes required to save the pcm hw_params
that will be used to restart streams during system resume.

It also implements the flow for pcm resume trigger and handles
the stop/pause_release triggersafter resume,

There are 3 possible situations when the system resumes from sleep:

1. If the stream was running at suspend, the hw_params is restored
and the stream started from the last know host dma position.

2. If the stream was paused at suspend and the user undoes pause
after resume, the SNDRV_PCM_TRIGGER_RESUME does not get invoked
for such streams. So these streams need to marked for hw_params
to be restored at resume and started from the paused host dma position.

3. If the stream was paused at suspend and the user stops
playback after resume, the trigger callback method should return
without any further action because the stream has not been set
up after resume anyway.

Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
---
 sound/soc/sof/pcm.c      | 90 ++++++++++++++++++++++++++++++++++++++++++++----
 sound/soc/sof/sof-priv.h |  2 ++
 2 files changed, 85 insertions(+), 7 deletions(-)

diff --git a/sound/soc/sof/pcm.c b/sound/soc/sof/pcm.c
index e4048f1..a4a14ac 100644
--- a/sound/soc/sof/pcm.c
+++ b/sound/soc/sof/pcm.c
@@ -158,6 +158,9 @@ static int sof_pcm_hw_params(struct snd_pcm_substream *substream,
 	spcm->posn_offset[substream->stream] =
 		sdev->stream_box.offset + posn_offset;
 
+	/* save pcm hw_params */
+	memcpy(&spcm->params[substream->stream], params, sizeof(*params));
+
 	return ret;
 }
 
@@ -190,6 +193,33 @@ static int sof_pcm_hw_free(struct snd_pcm_substream *substream)
 	return ret;
 }
 
+static int sof_restore_hw_params(struct snd_pcm_substream *substream,
+				 struct snd_sof_pcm *spcm,
+				 struct snd_sof_dev *sdev)
+{
+	snd_pcm_uframes_t host = 0;
+	u64 host_posn;
+	int ret = 0;
+
+	/* resume stream */
+	host_posn = spcm->stream[substream->stream].posn.host_posn;
+	host = bytes_to_frames(substream->runtime, host_posn);
+	dev_dbg(sdev->dev,
+		"PCM: resume stream %d dir %d DMA position %lu\n",
+		spcm->pcm.pcm_id, substream->stream, host);
+
+	/* set hw_params */
+	ret = sof_pcm_hw_params(substream,
+				&spcm->params[substream->stream]);
+	if (ret < 0) {
+		dev_err(sdev->dev,
+			"error: set pcm hw_params after resume\n");
+		return ret;
+	}
+
+	return 0;
+}
+
 static int sof_pcm_trigger(struct snd_pcm_substream *substream, int cmd)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
@@ -212,19 +242,66 @@ static int sof_pcm_trigger(struct snd_pcm_substream *substream, int cmd)
 	stream.comp_id = spcm->stream[substream->stream].comp_id;
 
 	switch (cmd) {
-	case SNDRV_PCM_TRIGGER_START:
-		stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_START;
-		break;
-	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-		stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_RELEASE;
-		break;
 	case SNDRV_PCM_TRIGGER_STOP:
+
+		/*
+		 * Check if stream was marked for restore before suspend
+		 */
+		if (spcm->restore_stream[substream->stream]) {
+
+			/* unset restore_stream */
+			spcm->restore_stream[substream->stream] = 0;
+
+			/* do not send ipc as the stream hasn't been set up */
+			return 0;
+		}
+
 		stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_STOP;
 		break;
 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
 		stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_PAUSE;
 		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+
+		/* check if the stream hw_params needs to be restored */
+		if (spcm->restore_stream[substream->stream]) {
+
+			/* restore hw_params */
+			ret = sof_restore_hw_params(substream, spcm, sdev);
+			if (ret < 0)
+				return ret;
+
+			/* unset restore_stream */
+			spcm->restore_stream[substream->stream] = 0;
+
+			/* trigger start */
+			stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_START;
+		} else {
+
+			/* trigger pause release */
+			stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_RELEASE;
+		}
+		break;
+	case SNDRV_PCM_TRIGGER_START:
+		/* fall through */
 	case SNDRV_PCM_TRIGGER_RESUME:
+
+		/* check if the stream hw_params needs to be restored */
+		if (spcm->restore_stream[substream->stream]) {
+
+			/* restore hw_params */
+			ret = sof_restore_hw_params(substream, spcm, sdev);
+			if (ret < 0)
+				return ret;
+
+			/* unset restore_stream */
+			spcm->restore_stream[substream->stream] = 0;
+		}
+
+		/* trigger stream */
+		stream.hdr.cmd |= SOF_IPC_STREAM_TRIG_START;
+
+		break;
 	case SNDRV_PCM_TRIGGER_SUSPEND:
 		break;
 	default:
@@ -586,7 +663,6 @@ static int sof_pcm_probe(struct snd_soc_platform *platform)
 	pm_runtime_use_autosuspend(platform->dev);
 	pm_runtime_enable(platform->dev);
 	pm_runtime_idle(platform->dev);
-
 err:
 	return ret;
 }
diff --git a/sound/soc/sof/sof-priv.h b/sound/soc/sof/sof-priv.h
index c382754..cb81e4a 100644
--- a/sound/soc/sof/sof-priv.h
+++ b/sound/soc/sof/sof-priv.h
@@ -229,6 +229,8 @@ struct snd_sof_pcm {
 	u32 posn_offset[2];
 	struct mutex mutex;	/* access mutex */
 	struct list_head list;	/* list in sdev pcm list */
+	struct snd_pcm_hw_params params[2];
+	int restore_stream[2]; /* restore hw_params for paused stream */
 };
 
 /* ALSA SOF Kcontrol device */
-- 
2.7.4

