From 4d97fea1fd91581e9f856b007ddbc90305f21cda Mon Sep 17 00:00:00 2001
From: Cezary Rojewski <cezary.rojewski@intel.com>
Date: Sat, 25 May 2019 07:18:40 +0200
Subject: [PATCH 139/163] ASoC: Intel: Skylake: ENABLE_LOGS support for Icelake

Define ENABLE_LOGS handler for Icelake platform. Currently, functions
found here are unused, however, this will change in future when full
support for cAVS 2.0 and 2.5 solutions is enabled.

Change-Id: Iac039ef2990f8176775c8ae1070e277851236884
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
Signed-off-by: Gustaw Lewandowski <gustaw.lewandowski@linux.intel.com>

Reviewed-on:
Reviewed-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
---
 sound/soc/intel/skylake/Makefile  |  2 +-
 sound/soc/intel/skylake/icl-sst.c | 38 +++++++++++++++++++++++++++++++
 2 files changed, 39 insertions(+), 1 deletion(-)
 create mode 100644 sound/soc/intel/skylake/icl-sst.c

diff --git a/sound/soc/intel/skylake/Makefile b/sound/soc/intel/skylake/Makefile
index 9766fb3c96e3..67da0c70905f 100644
--- a/sound/soc/intel/skylake/Makefile
+++ b/sound/soc/intel/skylake/Makefile
@@ -1,7 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
 snd-soc-skl-objs := skl.o skl-pcm.o skl-nhlt.o skl-messages.o skl-topology.o \
 		skl-sst-ipc.o skl-sst-dsp.o cnl-sst-dsp.o skl-sst-cldma.o \
-		skl-sst.o bxt-sst.o cnl-sst.o skl-sst-utils.o skl-compress.o
+		skl-sst.o bxt-sst.o cnl-sst.o icl-sst.o skl-sst-utils.o skl-compress.o
 
 ifdef CONFIG_DEBUG_FS
   snd-soc-skl-objs += skl-debug.o
diff --git a/sound/soc/intel/skylake/icl-sst.c b/sound/soc/intel/skylake/icl-sst.c
new file mode 100644
index 000000000000..25255546bcd0
--- /dev/null
+++ b/sound/soc/intel/skylake/icl-sst.c
@@ -0,0 +1,38 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// icl-sst.c  --  ICL platform specific DSP operations
+//
+// Copyright (C) 2019, Intel Corporation.
+
+#include <linux/kobject.h>
+#include "../common/sst-dsp.h"
+#include "../common/sst-dsp-priv.h"
+#include "skl-sst-ipc.h"
+#include "skl.h"
+
+__maybe_unused static int
+icl_enable_logs(struct sst_dsp *dsp, enum skl_log_enable enable,
+		u32 aging_period, u32 fifo_full_period,
+		unsigned long resource_mask, u32 *priorities)
+{
+	struct skl_dev *skl = dsp->thread_context;
+	struct icl_log_state_info *info;
+	u32 size, num_libs = skl->fw_cfg.max_libs_count;
+	int i, ret;
+
+	size = struct_size(info, logs_priorities_mask, num_libs);
+	info = kzalloc(size, GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	info->aging_timer_period = aging_period;
+	info->fifo_full_timer_period = fifo_full_period;
+	info->enable = enable;
+	if (enable)
+		for_each_set_bit(i, &resource_mask, GENMASK(num_libs, 0))
+			info->logs_priorities_mask[i] = *priorities++;
+
+	ret = skl_enable_logs_set(&skl->ipc, (u32 *)info, size);
+	kfree(info);
+	return ret;
+}
-- 
2.17.1

