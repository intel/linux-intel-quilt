From e8c566b77df6e860850ecafc68fe6d1dc29659be Mon Sep 17 00:00:00 2001
From: Yu-cheng Yu <yu-cheng.yu@intel.com>
Date: Tue, 2 Oct 2018 10:38:38 -0700
Subject: [PATCH 38/43] selftest/x86: Enable CET for selftests/x86

To build a shadow stack-enabled application written in C language, only the
latest linker (ld) is necessary for marking .note.gnu.property in the ELF
header.  If a shadow stack-enabled application contains assembly code, the
latest assembler is also needed.  It is possible to hard-code shadow stack
instructions and build the application without assembler support.

To build an indirect branch tracking application, the latest toolchain,
including compiler, assembler, and linker, is needed.  This is because
branch targets are evaluated and labeled by the compiler.

Shadow stack and indirect branch tracking complement each other, and are
most effective when both are enabled.  An updated toolchain can build both
without additional efforts.  Update makefile to detect and enable CET build
for x86 selftest.

Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
Reviewed-by: Kees Cook <keescook@chromium.org>

v2:
- Export CAN_BUILD_CET to source code.
---
 tools/testing/selftests/x86/Makefile | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/tools/testing/selftests/x86/Makefile b/tools/testing/selftests/x86/Makefile
index 6703c7906b71..88c5f723039d 100644
--- a/tools/testing/selftests/x86/Makefile
+++ b/tools/testing/selftests/x86/Makefile
@@ -9,6 +9,7 @@ UNAME_M := $(shell uname -m)
 CAN_BUILD_I386 := $(shell ./check_cc.sh $(CC) trivial_32bit_program.c -m32)
 CAN_BUILD_X86_64 := $(shell ./check_cc.sh $(CC) trivial_64bit_program.c)
 CAN_BUILD_WITH_NOPIE := $(shell ./check_cc.sh $(CC) trivial_program.c -no-pie)
+CAN_BUILD_CET := $(shell ./check_cc.sh $(CC) trivial_program.c -fcf-protection)
 
 TARGETS_C_BOTHBITS := single_step_syscall sysret_ss_attrs syscall_nt test_mremap_vdso \
 			check_initial_reg_state sigreturn iopl ioperm \
@@ -35,6 +36,10 @@ BINARIES_64 := $(patsubst %,$(OUTPUT)/%,$(BINARIES_64))
 
 CFLAGS := -O2 -g -std=gnu99 -pthread -Wall
 
+ifeq ($(CAN_BUILD_CET),1)
+CFLAGS += -fcf-protection -mshstk -DCAN_BUILD_CET
+endif
+
 # call32_from_64 in thunks.S uses absolute addresses.
 ifeq ($(CAN_BUILD_WITH_NOPIE),1)
 CFLAGS += -no-pie
-- 
2.27.0

