From 83d7d7c9db778fab7e6bfcaaad31862d338346c6 Mon Sep 17 00:00:00 2001
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date: Thu, 15 Feb 2018 18:10:14 +0300
Subject: [PATCH 04/40] pinctrl: intel: Add Intel Tiger Lake pin controller
 support

This driver adds pinctrl/GPIO support for Intel Tiger Lake SoC. The
GPIO controller is based on the next generation GPIO hardware but still
compatible with the one supported by the Intel core pinctrl/GPIO driver.

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---
 drivers/pinctrl/intel/Kconfig             |   7 +
 drivers/pinctrl/intel/Makefile            |   1 +
 drivers/pinctrl/intel/pinctrl-tigerlake.c | 902 ++++++++++++++++++++++
 3 files changed, 910 insertions(+)
 create mode 100644 drivers/pinctrl/intel/pinctrl-tigerlake.c

diff --git a/drivers/pinctrl/intel/Kconfig b/drivers/pinctrl/intel/Kconfig
index e20d83af0b4c..c091eb2f0aeb 100644
--- a/drivers/pinctrl/intel/Kconfig
+++ b/drivers/pinctrl/intel/Kconfig
@@ -123,4 +123,11 @@ config PINCTRL_SUNRISEPOINT
 	  provides an interface that allows configuring of PCH pins and
 	  using them as GPIOs.
 
+config PINCTRL_TIGERLAKE
+	tristate "Intel Tiger Lake pinctrl and GPIO driver"
+	depends on ACPI
+	select PINCTRL_INTEL
+	help
+	  This pinctrl driver provides an interface that allows configuring
+	  of Intel Tiger Lake PCH pins and using them as GPIOs.
 endif
diff --git a/drivers/pinctrl/intel/Makefile b/drivers/pinctrl/intel/Makefile
index ec353993d545..5e92aba018ac 100644
--- a/drivers/pinctrl/intel/Makefile
+++ b/drivers/pinctrl/intel/Makefile
@@ -14,3 +14,4 @@ obj-$(CONFIG_PINCTRL_GEMINILAKE)	+= pinctrl-geminilake.o
 obj-$(CONFIG_PINCTRL_ICELAKE)		+= pinctrl-icelake.o
 obj-$(CONFIG_PINCTRL_LEWISBURG)		+= pinctrl-lewisburg.o
 obj-$(CONFIG_PINCTRL_SUNRISEPOINT)	+= pinctrl-sunrisepoint.o
+obj-$(CONFIG_PINCTRL_TIGERLAKE)		+= pinctrl-tigerlake.o
diff --git a/drivers/pinctrl/intel/pinctrl-tigerlake.c b/drivers/pinctrl/intel/pinctrl-tigerlake.c
new file mode 100644
index 000000000000..db92db288636
--- /dev/null
+++ b/drivers/pinctrl/intel/pinctrl-tigerlake.c
@@ -0,0 +1,902 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Intel Tiger Lake PCH pinctrl/GPIO driver
+ *
+ * Copyright (C) 2018, Intel Corporation
+ * Authors: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
+ *          Mika Westerberg <mika.westerberg@linux.intel.com>
+ */
+
+#include <linux/mod_devicetable.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-intel.h"
+
+#define TGL_PAD_OWN	0x020
+#define TGL_PADCFGLOCK	0x080
+#define TGL_HOSTSW_OWN	0x0b0
+#define TGL_GPI_IS	0x100
+#define TGL_GPI_IE	0x120
+
+#define TGL_GPP(r, s, e)				\
+	{						\
+		.reg_num = (r),				\
+		.base = (s),				\
+		.size = ((e) - (s) + 1),		\
+	}
+
+#define TGL_COMMUNITY(b, s, e, g)			\
+	{						\
+		.barno = (b),				\
+		.padown_offset = TGL_PAD_OWN,		\
+		.padcfglock_offset = TGL_PADCFGLOCK,	\
+		.hostown_offset = TGL_HOSTSW_OWN,	\
+		.is_offset = TGL_GPI_IS,		\
+		.ie_offset = TGL_GPI_IE,		\
+		.pin_base = (s),			\
+		.npins = ((e) - (s) + 1),		\
+		.gpps = (g),				\
+		.ngpps = ARRAY_SIZE(g),			\
+	}
+
+/* Tiger Lake-LP */
+static const struct pinctrl_pin_desc tgllp_pins[] = {
+	/* GPP_B */
+	PINCTRL_PIN(0, "CORE_VID_0"),
+	PINCTRL_PIN(1, "CORE_VID_1"),
+	PINCTRL_PIN(2, "VRALERTB"),
+	PINCTRL_PIN(3, "CPU_GP_2"),
+	PINCTRL_PIN(4, "CPU_GP_3"),
+	PINCTRL_PIN(5, "ISH_I2C0_SDA"),
+	PINCTRL_PIN(6, "ISH_I2C0_SCL"),
+	PINCTRL_PIN(7, "ISH_I2C1_SDA"),
+	PINCTRL_PIN(8, "ISH_I2C1_SCL"),
+	PINCTRL_PIN(9, "I2C5_SDA"),
+	PINCTRL_PIN(10, "I2C5_SCL"),
+	PINCTRL_PIN(11, "PMCALERTB"),
+	PINCTRL_PIN(12, "SLP_S0B"),
+	PINCTRL_PIN(13, "PLTRSTB"),
+	PINCTRL_PIN(14, "SPKR"),
+	PINCTRL_PIN(15, "GSPI0_CS0B"),
+	PINCTRL_PIN(16, "GSPI0_CLK"),
+	PINCTRL_PIN(17, "GSPI0_MISO"),
+	PINCTRL_PIN(18, "GSPI0_MOSI"),
+	PINCTRL_PIN(19, "GSPI1_CS0B"),
+	PINCTRL_PIN(20, "GSPI1_CLK"),
+	PINCTRL_PIN(21, "GSPI1_MISO"),
+	PINCTRL_PIN(22, "GSPI1_MOSI"),
+	PINCTRL_PIN(23, "SML1ALERTB"),
+	PINCTRL_PIN(24, "GSPI0_CLK_LOOPBK"),
+	PINCTRL_PIN(25, "GSPI1_CLK_LOOPBK"),
+	/* GPP_T */
+	PINCTRL_PIN(26, "I2C6_SDA"),
+	PINCTRL_PIN(27, "I2C6_SCL"),
+	PINCTRL_PIN(28, "I2C7_SDA"),
+	PINCTRL_PIN(29, "I2C7_SCL"),
+	PINCTRL_PIN(30, "UART4_RXD"),
+	PINCTRL_PIN(31, "UART4_TXD"),
+	PINCTRL_PIN(32, "UART4_RTSB"),
+	PINCTRL_PIN(33, "UART4_CTSB"),
+	PINCTRL_PIN(34, "UART5_RXD"),
+	PINCTRL_PIN(35, "UART5_TXD"),
+	PINCTRL_PIN(36, "UART5_RTSB"),
+	PINCTRL_PIN(37, "UART5_CTSB"),
+	PINCTRL_PIN(38, "UART6_RXD"),
+	PINCTRL_PIN(39, "UART6_TXD"),
+	PINCTRL_PIN(40, "UART6_RTSB"),
+	PINCTRL_PIN(41, "UART6_CTSB"),
+	/* GPP_A */
+	PINCTRL_PIN(42, "ESPI_IO_0"),
+	PINCTRL_PIN(43, "ESPI_IO_1"),
+	PINCTRL_PIN(44, "ESPI_IO_2"),
+	PINCTRL_PIN(45, "ESPI_IO_3"),
+	PINCTRL_PIN(46, "ESPI_CSB"),
+	PINCTRL_PIN(47, "ESPI_CLK"),
+	PINCTRL_PIN(48, "ESPI_RESETB"),
+	PINCTRL_PIN(49, "I2S2_SCLK"),
+	PINCTRL_PIN(50, "I2S2_SFRM"),
+	PINCTRL_PIN(51, "I2S2_TXD"),
+	PINCTRL_PIN(52, "I2S2_RXD"),
+	PINCTRL_PIN(53, "PMC_I2C_SDA"),
+	PINCTRL_PIN(54, "SATAXPCIE_1"),
+	PINCTRL_PIN(55, "PMC_I2C_SCL"),
+	PINCTRL_PIN(56, "USB2_OCB_1"),
+	PINCTRL_PIN(57, "USB2_OCB_2"),
+	PINCTRL_PIN(58, "USB2_OCB_3"),
+	PINCTRL_PIN(59, "DDSP_HPD_C"),
+	PINCTRL_PIN(60, "DDSP_HPD_B"),
+	PINCTRL_PIN(61, "DDSP_HPD_1"),
+	PINCTRL_PIN(62, "DDSP_HPD_2"),
+	PINCTRL_PIN(63, "GPPC_A_21"),
+	PINCTRL_PIN(64, "GPPC_A_22"),
+	PINCTRL_PIN(65, "I2S1_SCLK"),
+	PINCTRL_PIN(66, "ESPI_CLK_LOOPBK"),
+	/* GPP_S */
+	PINCTRL_PIN(67, "SNDW0_CLK"),
+	PINCTRL_PIN(68, "SNDW0_DATA"),
+	PINCTRL_PIN(69, "SNDW1_CLK"),
+	PINCTRL_PIN(70, "SNDW1_DATA"),
+	PINCTRL_PIN(71, "SNDW2_CLK"),
+	PINCTRL_PIN(72, "SNDW2_DATA"),
+	PINCTRL_PIN(73, "SNDW3_CLK"),
+	PINCTRL_PIN(74, "SNDW3_DATA"),
+	/* GPP_H */
+	PINCTRL_PIN(75, "GPPC_H_0"),
+	PINCTRL_PIN(76, "GPPC_H_1"),
+	PINCTRL_PIN(77, "GPPC_H_2"),
+	PINCTRL_PIN(78, "SX_EXIT_HOLDOFFB"),
+	PINCTRL_PIN(79, "I2C2_SDA"),
+	PINCTRL_PIN(80, "I2C2_SCL"),
+	PINCTRL_PIN(81, "I2C3_SDA"),
+	PINCTRL_PIN(82, "I2C3_SCL"),
+	PINCTRL_PIN(83, "I2C4_SDA"),
+	PINCTRL_PIN(84, "I2C4_SCL"),
+	PINCTRL_PIN(85, "SRCCLKREQB_4"),
+	PINCTRL_PIN(86, "SRCCLKREQB_5"),
+	PINCTRL_PIN(87, "M2_SKT2_CFG_0"),
+	PINCTRL_PIN(88, "M2_SKT2_CFG_1"),
+	PINCTRL_PIN(89, "M2_SKT2_CFG_2"),
+	PINCTRL_PIN(90, "M2_SKT2_CFG_3"),
+	PINCTRL_PIN(91, "DDPB_CTRLCLK"),
+	PINCTRL_PIN(92, "DDPB_CTRLDATA"),
+	PINCTRL_PIN(93, "CPU_C10_GATEB"),
+	PINCTRL_PIN(94, "TIME_SYNC_0"),
+	PINCTRL_PIN(95, "IMGCLKOUT_1"),
+	PINCTRL_PIN(96, "IMGCLKOUT_2"),
+	PINCTRL_PIN(97, "IMGCLKOUT_3"),
+	PINCTRL_PIN(98, "IMGCLKOUT_4"),
+	/* GPP_D */
+	PINCTRL_PIN(99, "ISH_GP_0"),
+	PINCTRL_PIN(100, "ISH_GP_1"),
+	PINCTRL_PIN(101, "ISH_GP_2"),
+	PINCTRL_PIN(102, "ISH_GP_3"),
+	PINCTRL_PIN(103, "IMGCLKOUT_0"),
+	PINCTRL_PIN(104, "SRCCLKREQB_0"),
+	PINCTRL_PIN(105, "SRCCLKREQB_1"),
+	PINCTRL_PIN(106, "SRCCLKREQB_2"),
+	PINCTRL_PIN(107, "SRCCLKREQB_3"),
+	PINCTRL_PIN(108, "ISH_SPI_CSB"),
+	PINCTRL_PIN(109, "ISH_SPI_CLK"),
+	PINCTRL_PIN(110, "ISH_SPI_MISO"),
+	PINCTRL_PIN(111, "ISH_SPI_MOSI"),
+	PINCTRL_PIN(112, "ISH_UART0_RXD"),
+	PINCTRL_PIN(113, "ISH_UART0_TXD"),
+	PINCTRL_PIN(114, "ISH_UART0_RTSB"),
+	PINCTRL_PIN(115, "ISH_UART0_CTSB"),
+	PINCTRL_PIN(116, "ISH_GP_4"),
+	PINCTRL_PIN(117, "ISH_GP_5"),
+	PINCTRL_PIN(118, "I2S_MCLK1_OUT"),
+	PINCTRL_PIN(119, "GSPI2_CLK_LOOPBK"),
+	/* GPP_U */
+	PINCTRL_PIN(120, "UART3_RXD"),
+	PINCTRL_PIN(121, "UART3_TXD"),
+	PINCTRL_PIN(122, "UART3_RTSB"),
+	PINCTRL_PIN(123, "UART3_CTSB"),
+	PINCTRL_PIN(124, "GSPI3_CS0B"),
+	PINCTRL_PIN(125, "GSPI3_CLK"),
+	PINCTRL_PIN(126, "GSPI3_MISO"),
+	PINCTRL_PIN(127, "GSPI3_MOSI"),
+	PINCTRL_PIN(128, "GSPI4_CS0B"),
+	PINCTRL_PIN(129, "GSPI4_CLK"),
+	PINCTRL_PIN(130, "GSPI4_MISO"),
+	PINCTRL_PIN(131, "GSPI4_MOSI"),
+	PINCTRL_PIN(132, "GSPI5_CS0B"),
+	PINCTRL_PIN(133, "GSPI5_CLK"),
+	PINCTRL_PIN(134, "GSPI5_MISO"),
+	PINCTRL_PIN(135, "GSPI5_MOSI"),
+	PINCTRL_PIN(136, "GSPI6_CS0B"),
+	PINCTRL_PIN(137, "GSPI6_CLK"),
+	PINCTRL_PIN(138, "GSPI6_MISO"),
+	PINCTRL_PIN(139, "GSPI6_MOSI"),
+	PINCTRL_PIN(140, "GSPI3_CLK_LOOPBK"),
+	PINCTRL_PIN(141, "GSPI4_CLK_LOOPBK"),
+	PINCTRL_PIN(142, "GSPI5_CLK_LOOPBK"),
+	PINCTRL_PIN(143, "GSPI6_CLK_LOOPBK"),
+	/* vGPIO */
+	PINCTRL_PIN(144, "CNV_BTEN"),
+	PINCTRL_PIN(145, "CNV_BT_HOST_WAKEB"),
+	PINCTRL_PIN(146, "CNV_BT_IF_SELECT"),
+	PINCTRL_PIN(147, "vCNV_BT_UART_TXD"),
+	PINCTRL_PIN(148, "vCNV_BT_UART_RXD"),
+	PINCTRL_PIN(149, "vCNV_BT_UART_CTS_B"),
+	PINCTRL_PIN(150, "vCNV_BT_UART_RTS_B"),
+	PINCTRL_PIN(151, "vCNV_MFUART1_TXD"),
+	PINCTRL_PIN(152, "vCNV_MFUART1_RXD"),
+	PINCTRL_PIN(153, "vCNV_MFUART1_CTS_B"),
+	PINCTRL_PIN(154, "vCNV_MFUART1_RTS_B"),
+	PINCTRL_PIN(155, "vUART0_TXD"),
+	PINCTRL_PIN(156, "vUART0_RXD"),
+	PINCTRL_PIN(157, "vUART0_CTS_B"),
+	PINCTRL_PIN(158, "vUART0_RTS_B"),
+	PINCTRL_PIN(159, "vISH_UART0_TXD"),
+	PINCTRL_PIN(160, "vISH_UART0_RXD"),
+	PINCTRL_PIN(161, "vISH_UART0_CTS_B"),
+	PINCTRL_PIN(162, "vISH_UART0_RTS_B"),
+	PINCTRL_PIN(163, "vCNV_BT_I2S_BCLK"),
+	PINCTRL_PIN(164, "vCNV_BT_I2S_WS_SYNC"),
+	PINCTRL_PIN(165, "vCNV_BT_I2S_SDO"),
+	PINCTRL_PIN(166, "vCNV_BT_I2S_SDI"),
+	PINCTRL_PIN(167, "vI2S2_SCLK"),
+	PINCTRL_PIN(168, "vI2S2_SFRM"),
+	PINCTRL_PIN(169, "vI2S2_TXD"),
+	PINCTRL_PIN(170, "vI2S2_RXD"),
+	/* GPP_C */
+	PINCTRL_PIN(171, "SMBCLK"),
+	PINCTRL_PIN(172, "SMBDATA"),
+	PINCTRL_PIN(173, "SMBALERTB"),
+	PINCTRL_PIN(174, "SML0CLK"),
+	PINCTRL_PIN(175, "SML0DATA"),
+	PINCTRL_PIN(176, "SML0ALERTB"),
+	PINCTRL_PIN(177, "SML1CLK"),
+	PINCTRL_PIN(178, "SML1DATA"),
+	PINCTRL_PIN(179, "UART0_RXD"),
+	PINCTRL_PIN(180, "UART0_TXD"),
+	PINCTRL_PIN(181, "UART0_RTSB"),
+	PINCTRL_PIN(182, "UART0_CTSB"),
+	PINCTRL_PIN(183, "UART1_RXD"),
+	PINCTRL_PIN(184, "UART1_TXD"),
+	PINCTRL_PIN(185, "UART1_RTSB"),
+	PINCTRL_PIN(186, "UART1_CTSB"),
+	PINCTRL_PIN(187, "I2C0_SDA"),
+	PINCTRL_PIN(188, "I2C0_SCL"),
+	PINCTRL_PIN(189, "I2C1_SDA"),
+	PINCTRL_PIN(190, "I2C1_SCL"),
+	PINCTRL_PIN(191, "UART2_RXD"),
+	PINCTRL_PIN(192, "UART2_TXD"),
+	PINCTRL_PIN(193, "UART2_RTSB"),
+	PINCTRL_PIN(194, "UART2_CTSB"),
+	/* GPP_F */
+	PINCTRL_PIN(195, "CNV_BRI_DT"),
+	PINCTRL_PIN(196, "CNV_BRI_RSP"),
+	PINCTRL_PIN(197, "CNV_RGI_DT"),
+	PINCTRL_PIN(198, "CNV_RGI_RSP"),
+	PINCTRL_PIN(199, "CNV_RF_RESET_B"),
+	PINCTRL_PIN(200, "GPPC_F_5"),
+	PINCTRL_PIN(201, "CNV_PA_BLANKING"),
+	PINCTRL_PIN(202, "GPPC_F_7"),
+	PINCTRL_PIN(203, "I2S_MCLK2_INOUT"),
+	PINCTRL_PIN(204, "BOOTMPC"),
+	PINCTRL_PIN(205, "GPPC_F_10"),
+	PINCTRL_PIN(206, "GPPC_F_11"),
+	PINCTRL_PIN(207, "GSXDOUT"),
+	PINCTRL_PIN(208, "GSXSLOAD"),
+	PINCTRL_PIN(209, "GSXDIN"),
+	PINCTRL_PIN(210, "GSXSRESETB"),
+	PINCTRL_PIN(211, "GSXCLK"),
+	PINCTRL_PIN(212, "GPPC_F_17"),
+	PINCTRL_PIN(213, "GPPC_F_18"),
+	PINCTRL_PIN(214, "SRCCLKREQB_6"),
+	PINCTRL_PIN(215, "EXT_PWR_GATEB"),
+	PINCTRL_PIN(216, "EXT_PWR_GATE2B"),
+	PINCTRL_PIN(217, "VNN_CTRL"),
+	PINCTRL_PIN(218, "V1P05_CTRL"),
+	PINCTRL_PIN(219, "GPPF_CLK_LOOPBACK"),
+	/* HVCMOS */
+	PINCTRL_PIN(220, "L_BKLTEN"),
+	PINCTRL_PIN(221, "L_BKLTCTL"),
+	PINCTRL_PIN(222, "L_VDDEN"),
+	PINCTRL_PIN(223, "SYS_PWROK"),
+	PINCTRL_PIN(224, "SYS_RESETB"),
+	PINCTRL_PIN(225, "MLK_RSTB"),
+	/* GPP_E */
+	PINCTRL_PIN(226, "SATAXPCIE_0"),
+	PINCTRL_PIN(227, "SPI1_IO_2"),
+	PINCTRL_PIN(228, "SPI1_IO_3"),
+	PINCTRL_PIN(229, "CPU_GP_0"),
+	PINCTRL_PIN(230, "SATA_DEVSLP_0"),
+	PINCTRL_PIN(231, "SATA_DEVSLP_1"),
+	PINCTRL_PIN(232, "GPPC_E_6"),
+	PINCTRL_PIN(233, "CPU_GP_1"),
+	PINCTRL_PIN(234, "SPI1_CS1B"),
+	PINCTRL_PIN(235, "USB2_OCB_0"),
+	PINCTRL_PIN(236, "SPI1_CSB"),
+	PINCTRL_PIN(237, "SPI1_CLK"),
+	PINCTRL_PIN(238, "SPI1_MISO_IO_1"),
+	PINCTRL_PIN(239, "SPI1_MOSI_IO_0"),
+	PINCTRL_PIN(240, "DDSP_HPD_A"),
+	PINCTRL_PIN(241, "ISH_GP_6"),
+	PINCTRL_PIN(242, "ISH_GP_7"),
+	PINCTRL_PIN(243, "GPPC_E_17"),
+	PINCTRL_PIN(244, "DDP1_CTRLCLK"),
+	PINCTRL_PIN(245, "DDP1_CTRLDATA"),
+	PINCTRL_PIN(246, "DDP2_CTRLCLK"),
+	PINCTRL_PIN(247, "DDP2_CTRLDATA"),
+	PINCTRL_PIN(248, "DDPA_CTRLCLK"),
+	PINCTRL_PIN(249, "DDPA_CTRLDATA"),
+	PINCTRL_PIN(250, "SPI1_CLK_LOOPBK"),
+	/* JTAG */
+	PINCTRL_PIN(251, "JTAG_TDO"),
+	PINCTRL_PIN(252, "JTAGX"),
+	PINCTRL_PIN(253, "PRDYB"),
+	PINCTRL_PIN(254, "PREQB"),
+	PINCTRL_PIN(255, "CPU_TRSTB"),
+	PINCTRL_PIN(256, "JTAG_TDI"),
+	PINCTRL_PIN(257, "JTAG_TMS"),
+	PINCTRL_PIN(258, "JTAG_TCK"),
+	PINCTRL_PIN(259, "DBG_PMODE"),
+	/* GPP_R */
+	PINCTRL_PIN(260, "HDA_BCLK"),
+	PINCTRL_PIN(261, "HDA_SYNC"),
+	PINCTRL_PIN(262, "HDA_SDO"),
+	PINCTRL_PIN(263, "HDA_SDI_0"),
+	PINCTRL_PIN(264, "HDA_RSTB"),
+	PINCTRL_PIN(265, "HDA_SDI_1"),
+	PINCTRL_PIN(266, "GPP_R_6"),
+	PINCTRL_PIN(267, "GPP_R_7"),
+	/* SPI */
+	PINCTRL_PIN(268, "SPI0_IO_2"),
+	PINCTRL_PIN(269, "SPI0_IO_3"),
+	PINCTRL_PIN(270, "SPI0_MOSI_IO_0"),
+	PINCTRL_PIN(271, "SPI0_MISO_IO_1"),
+	PINCTRL_PIN(272, "SPI0_TPM_CSB"),
+	PINCTRL_PIN(273, "SPI0_FLASH_0_CSB"),
+	PINCTRL_PIN(274, "SPI0_FLASH_1_CSB"),
+	PINCTRL_PIN(275, "SPI0_CLK"),
+	PINCTRL_PIN(276, "SPI0_CLK_LOOPBK"),
+};
+
+static const struct intel_padgroup tgllp_community0_gpps[] = {
+	TGL_GPP(0, 0, 25),	/* GPP_B */
+	TGL_GPP(1, 26, 41),	/* GPP_T */
+	TGL_GPP(2, 42, 66),	/* GPP_A */
+};
+
+static const struct intel_padgroup tgllp_community1_gpps[] = {
+	TGL_GPP(0, 67, 74),	/* GPP_S */
+	TGL_GPP(1, 75, 98),	/* GPP_H */
+	TGL_GPP(2, 99, 119),	/* GPP_D */
+	TGL_GPP(3, 120, 143),	/* GPP_U */
+	TGL_GPP(4, 144, 170),	/* vGPIO */
+};
+
+static const struct intel_padgroup tgllp_community4_gpps[] = {
+	TGL_GPP(0, 171, 194),	/* GPP_C */
+	TGL_GPP(1, 195, 219),	/* GPP_F */
+	TGL_GPP(2, 220, 225),	/* HVCMOS */
+	TGL_GPP(3, 226, 250),	/* GPP_E */
+	TGL_GPP(4, 251, 259),	/* JTAG */
+};
+
+static const struct intel_padgroup tgllp_community5_gpps[] = {
+	TGL_GPP(0, 260, 267),	/* GPP_R */
+	TGL_GPP(1, 268, 276),	/* SPI */
+};
+
+static const struct intel_community tgllp_communities[] = {
+	TGL_COMMUNITY(0, 0, 66, tgllp_community0_gpps),
+	TGL_COMMUNITY(1, 67, 170, tgllp_community1_gpps),
+	TGL_COMMUNITY(2, 171, 259, tgllp_community4_gpps),
+	TGL_COMMUNITY(3, 260, 276, tgllp_community5_gpps),
+};
+
+static const struct intel_pinctrl_soc_data tgllp_soc_data = {
+	.pins = tgllp_pins,
+	.npins = ARRAY_SIZE(tgllp_pins),
+	.communities = tgllp_communities,
+	.ncommunities = ARRAY_SIZE(tgllp_communities),
+};
+
+/* Tiger Lake-H */
+static const struct pinctrl_pin_desc tglh_pins[] = {
+	/* SPI */
+	PINCTRL_PIN(0, "SPI0_IO_2"),
+	PINCTRL_PIN(1, "SPI0_IO_3"),
+	PINCTRL_PIN(2, "SPI0_MOSI_IO_0"),
+	PINCTRL_PIN(3, "SPI0_MISO_IO_1"),
+	PINCTRL_PIN(4, "SPI0_TPM_CSB"),
+	PINCTRL_PIN(5, "SPI0_FLASH_0_CSB"),
+	PINCTRL_PIN(6, "SPI0_FLASH_1_CSB"),
+	PINCTRL_PIN(7, "SPI0_CLK"),
+	PINCTRL_PIN(8, "SPI0_CLK_LOOPBK"),
+	/* GPP_A */
+	PINCTRL_PIN(9, "ESPI_ALERT1B"),
+	PINCTRL_PIN(10, "ESPI_IO_0"),
+	PINCTRL_PIN(11, "ESPI_IO_1"),
+	PINCTRL_PIN(12, "ESPI_IO_2"),
+	PINCTRL_PIN(13, "ESPI_IO_3"),
+	PINCTRL_PIN(14, "ESPI_CS0B"),
+	PINCTRL_PIN(15, "ESPI_CS1B"),
+	PINCTRL_PIN(16, "ESPI_ALERT0B"),
+	PINCTRL_PIN(17, "PCIE_LNK_DOWN"),
+	PINCTRL_PIN(18, "ESPI_CLK"),
+	PINCTRL_PIN(19, "GPP_A_10"),
+	PINCTRL_PIN(20, "ISH_UART0_RTSB"),
+	PINCTRL_PIN(21, "SX_EXIT_HOLDOFFB"),
+	PINCTRL_PIN(22, "SUSWARNB_SUSPWRDNACK"),
+	PINCTRL_PIN(23, "ESPI_RESETB"),
+	PINCTRL_PIN(24, "SUSACKB"),
+	PINCTRL_PIN(25, "CLKOUT_48"),
+	PINCTRL_PIN(26, "ISH_GP_7"),
+	PINCTRL_PIN(27, "ISH_GP_0"),
+	PINCTRL_PIN(28, "ISH_GP_1"),
+	PINCTRL_PIN(29, "ISH_GP_2"),
+	PINCTRL_PIN(30, "ISH_GP_3"),
+	PINCTRL_PIN(31, "ISH_GP_4"),
+	PINCTRL_PIN(32, "ISH_GP_5"),
+	PINCTRL_PIN(33, "ESPI_CLK_LOOPBK"),
+	/* GPP_B */
+	PINCTRL_PIN(34, "GSPI0_CS1B"),
+	PINCTRL_PIN(35, "GSPI1_CS1B"),
+	PINCTRL_PIN(36, "VRALERTB"),
+	PINCTRL_PIN(37, "CPU_GP_2"),
+	PINCTRL_PIN(38, "CPU_GP_3"),
+	PINCTRL_PIN(39, "SRCCLKREQB_0"),
+	PINCTRL_PIN(40, "SRCCLKREQB_1"),
+	PINCTRL_PIN(41, "SRCCLKREQB_2"),
+	PINCTRL_PIN(42, "SRCCLKREQB_3"),
+	PINCTRL_PIN(43, "SRCCLKREQB_4"),
+	PINCTRL_PIN(44, "SRCCLKREQB_5"),
+	PINCTRL_PIN(45, "I2S_MCLK"),
+	PINCTRL_PIN(46, "SLP_S0B"),
+	PINCTRL_PIN(47, "PLTRSTB"),
+	PINCTRL_PIN(48, "SPKR"),
+	PINCTRL_PIN(49, "GSPI0_CS0B"),
+	PINCTRL_PIN(50, "GSPI0_CLK"),
+	PINCTRL_PIN(51, "GSPI0_MISO"),
+	PINCTRL_PIN(52, "GSPI0_MOSI"),
+	PINCTRL_PIN(53, "GSPI1_CS0B"),
+	PINCTRL_PIN(54, "GSPI1_CLK"),
+	PINCTRL_PIN(55, "GSPI1_MISO"),
+	PINCTRL_PIN(56, "GSPI1_MOSI"),
+	PINCTRL_PIN(57, "SML1ALERTB"),
+	PINCTRL_PIN(58, "GSPI0_CLK_LOOPBK"),
+	PINCTRL_PIN(59, "GSPI1_CLK_LOOPBK"),
+	/* vGPIO_0 */
+	PINCTRL_PIN(60, "ESPI_USB_OCB_0"),
+	PINCTRL_PIN(61, "ESPI_USB_OCB_1"),
+	PINCTRL_PIN(62, "ESPI_USB_OCB_2"),
+	PINCTRL_PIN(63, "ESPI_USB_OCB_3"),
+	PINCTRL_PIN(64, "USB_CPU_OCB_0"),
+	PINCTRL_PIN(65, "USB_CPU_OCB_1"),
+	PINCTRL_PIN(66, "USB_CPU_OCB_2"),
+	PINCTRL_PIN(67, "USB_CPU_OCB_3"),
+	/* GPP_C */
+	PINCTRL_PIN(68, "SMBCLK"),
+	PINCTRL_PIN(69, "SMBDATA"),
+	PINCTRL_PIN(70, "SMBALERTB"),
+	PINCTRL_PIN(71, "ISH_UART0_RXD"),
+	PINCTRL_PIN(72, "ISH_UART0_TXD"),
+	PINCTRL_PIN(73, "SML0ALERTB"),
+	PINCTRL_PIN(74, "ISH_I2C2_SDA"),
+	PINCTRL_PIN(75, "ISH_I2C2_SCL"),
+	PINCTRL_PIN(76, "UART0_RXD"),
+	PINCTRL_PIN(77, "UART0_TXD"),
+	PINCTRL_PIN(78, "UART0_RTSB"),
+	PINCTRL_PIN(79, "UART0_CTSB"),
+	PINCTRL_PIN(80, "UART1_RXD"),
+	PINCTRL_PIN(81, "UART1_TXD"),
+	PINCTRL_PIN(82, "UART1_RTSB"),
+	PINCTRL_PIN(83, "UART1_CTSB"),
+	PINCTRL_PIN(84, "I2C0_SDA"),
+	PINCTRL_PIN(85, "I2C0_SCL"),
+	PINCTRL_PIN(86, "I2C1_SDA"),
+	PINCTRL_PIN(87, "I2C1_SCL"),
+	PINCTRL_PIN(88, "UART2_RXD"),
+	PINCTRL_PIN(89, "UART2_TXD"),
+	PINCTRL_PIN(90, "UART2_RTSB"),
+	PINCTRL_PIN(91, "UART2_CTSB"),
+	/* GPP_D */
+	PINCTRL_PIN(92, "SPI1_CSB"),
+	PINCTRL_PIN(93, "SPI1_CLK"),
+	PINCTRL_PIN(94, "SPI1_MISO_IO_1"),
+	PINCTRL_PIN(95, "SPI1_MOSI_IO_0"),
+	PINCTRL_PIN(96, "SML1CLK"),
+	PINCTRL_PIN(97, "I2S2_SFRM"),
+	PINCTRL_PIN(98, "I2S2_TXD"),
+	PINCTRL_PIN(99, "I2S2_RXD"),
+	PINCTRL_PIN(100, "I2S2_SCLK"),
+	PINCTRL_PIN(101, "SML0CLK"),
+	PINCTRL_PIN(102, "SML0DATA"),
+	PINCTRL_PIN(103, "I2S1_SCLK"),
+	PINCTRL_PIN(104, "ISH_UART0_CTSB"),
+	PINCTRL_PIN(105, "SPI1_IO_2"),
+	PINCTRL_PIN(106, "SPI1_IO_3"),
+	PINCTRL_PIN(107, "SML1DATA"),
+	PINCTRL_PIN(108, "GSPI3_CS0B"),
+	PINCTRL_PIN(109, "GSPI3_CLK"),
+	PINCTRL_PIN(110, "GSPI3_MISO"),
+	PINCTRL_PIN(111, "GSPI3_MOSI"),
+	PINCTRL_PIN(112, "UART3_RXD"),
+	PINCTRL_PIN(113, "UART3_TXD"),
+	PINCTRL_PIN(114, "UART3_RTSB"),
+	PINCTRL_PIN(115, "UART3_CTSB"),
+	PINCTRL_PIN(116, "GSPI2_CLK_LOOPBK"),
+	PINCTRL_PIN(117, "SPI1_CLK_LOOPBK"),
+	/* GPP_R */
+	PINCTRL_PIN(118, "HDA_BCLK"),
+	PINCTRL_PIN(119, "HDA_SYNC"),
+	PINCTRL_PIN(120, "HDA_SDO"),
+	PINCTRL_PIN(121, "HDA_SDI_0"),
+	PINCTRL_PIN(122, "HDA_RSTB"),
+	PINCTRL_PIN(123, "HDA_SDI_1"),
+	PINCTRL_PIN(124, "GPP_R_6"),
+	PINCTRL_PIN(125, "GPP_R_7"),
+	/* GPP_S */
+	PINCTRL_PIN(126, "SNDW1_CLK"),
+	PINCTRL_PIN(127, "SNDW1_DATA"),
+	PINCTRL_PIN(128, "SNDW2_CLK"),
+	PINCTRL_PIN(129, "SNDW2_DATA"),
+	PINCTRL_PIN(130, "SNDW3_CLK"),
+	PINCTRL_PIN(131, "SNDW3_DATA"),
+	PINCTRL_PIN(132, "SNDW4_CLK"),
+	PINCTRL_PIN(133, "SNDW4_DATA"),
+	/* GPP_G */
+	PINCTRL_PIN(134, "DDPA_CTRLCLK"),
+	PINCTRL_PIN(135, "DDPA_CTRLDATA"),
+	PINCTRL_PIN(136, "DNX_FORCE_RELOAD"),
+	PINCTRL_PIN(137, "GPPC_G_3"),
+	PINCTRL_PIN(138, "GPPC_G_4"),
+	PINCTRL_PIN(139, "GPPC_G_5"),
+	PINCTRL_PIN(140, "GPPC_G_6"),
+	PINCTRL_PIN(141, "GPPC_G_7"),
+	PINCTRL_PIN(142, "ISH_SPI_CSB"),
+	PINCTRL_PIN(143, "ISH_SPI_CLK"),
+	PINCTRL_PIN(144, "ISH_SPI_MISO"),
+	PINCTRL_PIN(145, "ISH_SPI_MOSI"),
+	PINCTRL_PIN(146, "DDP1_CTRLCLK"),
+	PINCTRL_PIN(147, "DDP1_CTRLDATA"),
+	PINCTRL_PIN(148, "DDP2_CTRLCLK"),
+	PINCTRL_PIN(149, "DDP2_CTRLDATA"),
+	/* vGPIO */
+	PINCTRL_PIN(150, "CNV_BTEN"),
+	PINCTRL_PIN(151, "CNV_BT_HOST_WAKEB"),
+	PINCTRL_PIN(152, "CNV_BT_IF_SELECT"),
+	PINCTRL_PIN(153, "vCNV_BT_UART_TXD"),
+	PINCTRL_PIN(154, "vCNV_BT_UART_RXD"),
+	PINCTRL_PIN(155, "vCNV_BT_UART_CTS_B"),
+	PINCTRL_PIN(156, "vCNV_BT_UART_RTS_B"),
+	PINCTRL_PIN(157, "vCNV_MFUART1_TXD"),
+	PINCTRL_PIN(158, "vCNV_MFUART1_RXD"),
+	PINCTRL_PIN(159, "vCNV_MFUART1_CTS_B"),
+	PINCTRL_PIN(160, "vCNV_MFUART1_RTS_B"),
+	PINCTRL_PIN(161, "vUART0_TXD"),
+	PINCTRL_PIN(162, "vUART0_RXD"),
+	PINCTRL_PIN(163, "vUART0_CTS_B"),
+	PINCTRL_PIN(164, "vUART0_RTS_B"),
+	PINCTRL_PIN(165, "vISH_UART0_TXD"),
+	PINCTRL_PIN(166, "vISH_UART0_RXD"),
+	PINCTRL_PIN(167, "vISH_UART0_CTS_B"),
+	PINCTRL_PIN(168, "vISH_UART0_RTS_B"),
+	PINCTRL_PIN(169, "vCNV_BT_I2S_BCLK"),
+	PINCTRL_PIN(170, "vCNV_BT_I2S_WS_SYNC"),
+	PINCTRL_PIN(171, "vCNV_BT_I2S_SDO"),
+	PINCTRL_PIN(172, "vCNV_BT_I2S_SDI"),
+	PINCTRL_PIN(173, "vI2S2_SCLK"),
+	PINCTRL_PIN(174, "vI2S2_SFRM"),
+	PINCTRL_PIN(175, "vI2S2_TXD"),
+	PINCTRL_PIN(176, "vI2S2_RXD"),
+	/* GPP_E */
+	PINCTRL_PIN(177, "SATAXPCIE_0"),
+	PINCTRL_PIN(178, "SATAXPCIE_1"),
+	PINCTRL_PIN(179, "SATAXPCIE_2"),
+	PINCTRL_PIN(180, "CPU_GP_0"),
+	PINCTRL_PIN(181, "SATA_DEVSLP_0"),
+	PINCTRL_PIN(182, "SATA_DEVSLP_1"),
+	PINCTRL_PIN(183, "SATA_DEVSLP_2"),
+	PINCTRL_PIN(184, "CPU_GP_1"),
+	PINCTRL_PIN(185, "SATA_LEDB"),
+	PINCTRL_PIN(186, "USB2_OCB_0"),
+	PINCTRL_PIN(187, "USB2_OCB_1"),
+	PINCTRL_PIN(188, "USB2_OCB_2"),
+	PINCTRL_PIN(189, "USB2_OCB_3"),
+	/* GPP_F */
+	PINCTRL_PIN(190, "SATAXPCIE_3"),
+	PINCTRL_PIN(191, "SATAXPCIE_4"),
+	PINCTRL_PIN(192, "SATAXPCIE_5"),
+	PINCTRL_PIN(193, "SATAXPCIE_6"),
+	PINCTRL_PIN(194, "SATAXPCIE_7"),
+	PINCTRL_PIN(195, "SATA_DEVSLP_3"),
+	PINCTRL_PIN(196, "SATA_DEVSLP_4"),
+	PINCTRL_PIN(197, "SATA_DEVSLP_5"),
+	PINCTRL_PIN(198, "SATA_DEVSLP_6"),
+	PINCTRL_PIN(199, "SATA_DEVSLP_7"),
+	PINCTRL_PIN(200, "SATA_SCLOCK"),
+	PINCTRL_PIN(201, "SATA_SLOAD"),
+	PINCTRL_PIN(202, "SATA_SDATAOUT1"),
+	PINCTRL_PIN(203, "SATA_SDATAOUT0"),
+	PINCTRL_PIN(204, "PS_ONB"),
+	PINCTRL_PIN(205, "M2_SKT2_CFG_0"),
+	PINCTRL_PIN(206, "M2_SKT2_CFG_1"),
+	PINCTRL_PIN(207, "M2_SKT2_CFG_2"),
+	PINCTRL_PIN(208, "M2_SKT2_CFG_3"),
+	PINCTRL_PIN(209, "L_VDDEN"),
+	PINCTRL_PIN(210, "L_BKLTEN"),
+	PINCTRL_PIN(211, "L_BKLTCTL"),
+	PINCTRL_PIN(212, "VNN_CTRL"),
+	PINCTRL_PIN(213, "GPP_F_23"),
+	/* GPP_H */
+	PINCTRL_PIN(214, "SRCCLKREQB_6"),
+	PINCTRL_PIN(215, "SRCCLKREQB_7"),
+	PINCTRL_PIN(216, "SRCCLKREQB_8"),
+	PINCTRL_PIN(217, "SRCCLKREQB_9"),
+	PINCTRL_PIN(218, "SRCCLKREQB_10"),
+	PINCTRL_PIN(219, "SRCCLKREQB_11"),
+	PINCTRL_PIN(220, "SRCCLKREQB_12"),
+	PINCTRL_PIN(221, "SRCCLKREQB_13"),
+	PINCTRL_PIN(222, "SRCCLKREQB_14"),
+	PINCTRL_PIN(223, "SRCCLKREQB_15"),
+	PINCTRL_PIN(224, "SML2CLK"),
+	PINCTRL_PIN(225, "SML2DATA"),
+	PINCTRL_PIN(226, "SML2ALERTB"),
+	PINCTRL_PIN(227, "SML3CLK"),
+	PINCTRL_PIN(228, "SML3DATA"),
+	PINCTRL_PIN(229, "SML3ALERTB"),
+	PINCTRL_PIN(230, "SML4CLK"),
+	PINCTRL_PIN(231, "SML4DATA"),
+	PINCTRL_PIN(232, "SML4ALERTB"),
+	PINCTRL_PIN(233, "ISH_I2C0_SDA"),
+	PINCTRL_PIN(234, "ISH_I2C0_SCL"),
+	PINCTRL_PIN(235, "ISH_I2C1_SDA"),
+	PINCTRL_PIN(236, "ISH_I2C1_SCL"),
+	PINCTRL_PIN(237, "TIME_SYNC_0"),
+	/* GPP_K */
+	PINCTRL_PIN(238, "GSXDOUT"),
+	PINCTRL_PIN(239, "GSXSLOAD"),
+	PINCTRL_PIN(240, "GSXDIN"),
+	PINCTRL_PIN(241, "GSXSRESETB"),
+	PINCTRL_PIN(242, "GSXCLK"),
+	PINCTRL_PIN(243, "ADR_COMPLETE"),
+	PINCTRL_PIN(244, "DDSP_HPD_A"),
+	PINCTRL_PIN(245, "DDSP_HPD_B"),
+	PINCTRL_PIN(246, "CORE_VID_0"),
+	PINCTRL_PIN(247, "CORE_VID_1"),
+	PINCTRL_PIN(248, "DDSP_HPD_C"),
+	PINCTRL_PIN(249, "GPP_K_11"),
+	/* GPP_J */
+	PINCTRL_PIN(250, "CNV_PA_BLANKING"),
+	PINCTRL_PIN(251, "CPU_C10_GATEB"),
+	PINCTRL_PIN(252, "CNV_BRI_DT"),
+	PINCTRL_PIN(253, "CNV_BRI_RSP"),
+	PINCTRL_PIN(254, "CNV_RGI_DT"),
+	PINCTRL_PIN(255, "CNV_RGI_RSP"),
+	PINCTRL_PIN(256, "CNV_MFUART2_RXD"),
+	PINCTRL_PIN(257, "CNV_MFUART2_TXD"),
+	PINCTRL_PIN(258, "GPP_J_8"),
+	PINCTRL_PIN(259, "GPP_J_9"),
+	/* GPP_I */
+	PINCTRL_PIN(260, "PMCALERTB"),
+	PINCTRL_PIN(261, "DDSP_HPD_1"),
+	PINCTRL_PIN(262, "DDSP_HPD_2"),
+	PINCTRL_PIN(263, "DDSP_HPD_3"),
+	PINCTRL_PIN(264, "DDSP_HPD_4"),
+	PINCTRL_PIN(265, "DDPB_CTRLCLK"),
+	PINCTRL_PIN(266, "DDPB_CTRLDATA"),
+	PINCTRL_PIN(267, "DDPC_CTRLCLK"),
+	PINCTRL_PIN(268, "DDPC_CTRLDATA"),
+	PINCTRL_PIN(269, "FUSA_DIAGTEST_EN"),
+	PINCTRL_PIN(270, "FUSA_DIAGTEST_MODE"),
+	PINCTRL_PIN(271, "USB2_OCB_4"),
+	PINCTRL_PIN(272, "USB2_OCB_5"),
+	PINCTRL_PIN(273, "USB2_OCB_6"),
+	PINCTRL_PIN(274, "USB2_OCB_7"),
+	PINCTRL_PIN(275, "SYS_PWROK"),
+	PINCTRL_PIN(276, "SYS_RESETB"),
+	PINCTRL_PIN(277, "MLK_RSTB"),
+	/* JTAG */
+	PINCTRL_PIN(278, "JTAG_TDO"),
+	PINCTRL_PIN(279, "JTAGX"),
+	PINCTRL_PIN(280, "PRDYB"),
+	PINCTRL_PIN(281, "PREQB"),
+	PINCTRL_PIN(282, "CPU_TRSTB"),
+	PINCTRL_PIN(283, "JTAG_TDI"),
+	PINCTRL_PIN(284, "JTAG_TMS"),
+	PINCTRL_PIN(285, "JTAG_TCK"),
+	PINCTRL_PIN(286, "DBG_PMODE"),
+};
+
+static const struct intel_padgroup tglh_community0_gpps[] = {
+	TGL_GPP(0, 0, 8),	/* SPI */
+	TGL_GPP(1, 9, 33),	/* GPP_A */
+	TGL_GPP(2, 34, 59),	/* GPP_B */
+	TGL_GPP(3, 60, 67),	/* vGPIO_0 */
+};
+
+static const struct intel_padgroup tglh_community1_gpps[] = {
+	TGL_GPP(0, 68, 91),	/* GPP_C */
+	TGL_GPP(1, 92, 117),	/* GPP_D */
+	TGL_GPP(2, 118, 125),	/* GPP_R */
+	TGL_GPP(3, 126, 133),	/* GPP_S */
+	TGL_GPP(4, 134, 149),	/* GPP_G */
+	TGL_GPP(5, 150, 176),	/* vGPIO */
+};
+
+static const struct intel_padgroup tglh_community3_gpps[] = {
+	TGL_GPP(0, 177, 189),	/* GPP_E */
+	TGL_GPP(1, 190, 213),	/* GPP_F */
+};
+
+static const struct intel_padgroup tglh_community4_gpps[] = {
+	TGL_GPP(0, 214, 237),	/* GPP_H */
+	TGL_GPP(1, 238, 249),	/* GPP_K */
+	TGL_GPP(2, 250, 259),	/* GPP_J */
+};
+
+static const struct intel_padgroup tglh_community5_gpps[] = {
+	TGL_GPP(0, 260, 277),	/* GPP_I */
+	TGL_GPP(1, 278, 286),	/* JTAG */
+};
+
+static const struct intel_community tglh_communities[] = {
+	TGL_COMMUNITY(0, 0, 67, tglh_community0_gpps),
+	TGL_COMMUNITY(1, 68, 176, tglh_community1_gpps),
+	TGL_COMMUNITY(2, 177, 213, tglh_community3_gpps),
+	TGL_COMMUNITY(3, 214, 259, tglh_community4_gpps),
+	TGL_COMMUNITY(4, 260, 286, tglh_community5_gpps),
+};
+
+static const struct intel_pinctrl_soc_data tglh_soc_data = {
+	.pins = tglh_pins,
+	.npins = ARRAY_SIZE(tglh_pins),
+	.communities = tglh_communities,
+	.ncommunities = ARRAY_SIZE(tglh_communities),
+};
+
+/* Tiger Lake-K */
+static const struct pinctrl_pin_desc tglk_pins[] = {
+	/* GPP_A */
+	PINCTRL_PIN(0, "ESPI_IO_0"),
+	PINCTRL_PIN(1, "ESPI_IO_1"),
+	PINCTRL_PIN(2, "ESPI_IO_2"),
+	PINCTRL_PIN(3, "ESPI_IO_3"),
+	PINCTRL_PIN(4, "ESPI_CSB"),
+	PINCTRL_PIN(5, "ESPI_CLK"),
+	PINCTRL_PIN(6, "ESPI_RESETB"),
+	PINCTRL_PIN(7, "SMBCLK"),
+	PINCTRL_PIN(8, "SMBDATA"),
+	PINCTRL_PIN(9, "SMBALERTB"),
+	PINCTRL_PIN(10, "CPU_GP_0"),
+	PINCTRL_PIN(11, "CPU_GP_1"),
+	PINCTRL_PIN(12, "TIME_SYNC_0"),
+	PINCTRL_PIN(13, "TIME_SYNC_1"),
+	PINCTRL_PIN(14, "SML0CLK"),
+	PINCTRL_PIN(15, "SML0DATA"),
+	PINCTRL_PIN(16, "CPU_C10_GATEB"),
+	PINCTRL_PIN(17, "DDSP_HPD_A"),
+	PINCTRL_PIN(18, "L_BKLTEN"),
+	PINCTRL_PIN(19, "L_BKLTCTL"),
+	PINCTRL_PIN(20, "L_VDDEN"),
+	PINCTRL_PIN(21, "SYS_PWROK"),
+	PINCTRL_PIN(22, "SYS_RESETB"),
+	PINCTRL_PIN(23, "ESPI_CLK_LOOPBK"),
+	/* GPP_B */
+	PINCTRL_PIN(24, "CORE_VID_0"),
+	PINCTRL_PIN(25, "CORE_VID_1"),
+	PINCTRL_PIN(26, "VRALERTB"),
+	PINCTRL_PIN(27, "CPU_GP_2"),
+	PINCTRL_PIN(28, "CPU_GP_3"),
+	PINCTRL_PIN(29, "SRCCLKREQB_0"),
+	PINCTRL_PIN(30, "SRCCLKREQB_1"),
+	PINCTRL_PIN(31, "SRCCLKREQB_2"),
+	PINCTRL_PIN(32, "SRCCLKREQB_3"),
+	PINCTRL_PIN(33, "SRCCLKREQB_4"),
+	PINCTRL_PIN(34, "SRCCLKREQB_5"),
+	PINCTRL_PIN(35, "PMCALERTB"),
+	PINCTRL_PIN(36, "SLP_S0B"),
+	PINCTRL_PIN(37, "PLTRSTB"),
+	PINCTRL_PIN(38, "UART0_RTSB"),
+	PINCTRL_PIN(39, "UART0_RXD"),
+	PINCTRL_PIN(40, "UART0_TXD"),
+	PINCTRL_PIN(41, "UART0_CTSB"),
+	PINCTRL_PIN(42, "UART2_RXD"),
+	PINCTRL_PIN(43, "UART2_TXD"),
+	PINCTRL_PIN(44, "USB2_OCB_0"),
+	PINCTRL_PIN(45, "USB2_OCB_1"),
+	PINCTRL_PIN(46, "GPP_B_22"),
+	PINCTRL_PIN(47, "GPP_B_23"),
+	/* GPP_C */
+	PINCTRL_PIN(48, "GPP_C_0"),
+	PINCTRL_PIN(49, "GPP_C_1"),
+	PINCTRL_PIN(50, "GPP_C_2"),
+	PINCTRL_PIN(51, "GPP_C_3"),
+	PINCTRL_PIN(52, "GPP_C_4"),
+	PINCTRL_PIN(53, "GPP_C_5"),
+	PINCTRL_PIN(54, "GPP_C_6"),
+	PINCTRL_PIN(55, "GPP_C_7"),
+	PINCTRL_PIN(56, "GPP_C_8"),
+	PINCTRL_PIN(57, "TBT_LSX0_A"),
+	PINCTRL_PIN(58, "TBT_LSX0_B"),
+	PINCTRL_PIN(59, "TBT_LSX1_A"),
+	PINCTRL_PIN(60, "TBT_LSX1_B"),
+	PINCTRL_PIN(61, "TBT_LSX2_A"),
+	PINCTRL_PIN(62, "TBT_LSX2_B"),
+	PINCTRL_PIN(63, "TBT_LSX3_A"),
+	PINCTRL_PIN(64, "TBT_LSX3_B"),
+	PINCTRL_PIN(65, "TBT_LSX4_A"),
+	PINCTRL_PIN(66, "TBT_LSX4_B"),
+	PINCTRL_PIN(67, "TBT_LSX5_A"),
+	PINCTRL_PIN(68, "TBT_LSX5_B"),
+	PINCTRL_PIN(69, "PCIE_LNK_DOWN"),
+	PINCTRL_PIN(70, "PCHHOTB"),
+	PINCTRL_PIN(71, "DNX_FORCE_RELOAD"),
+	/* GPP_D */
+	PINCTRL_PIN(72, "GPP_D_0"),
+	PINCTRL_PIN(73, "GPP_D_1"),
+	PINCTRL_PIN(74, "GPP_D_2"),
+	PINCTRL_PIN(75, "GPP_D_3"),
+	PINCTRL_PIN(76, "GPP_D_4"),
+	PINCTRL_PIN(77, "GPP_D_5"),
+	PINCTRL_PIN(78, "GPP_D_6"),
+	PINCTRL_PIN(79, "GPP_D_7"),
+	PINCTRL_PIN(80, "GPP_D_8"),
+	PINCTRL_PIN(81, "GPP_D_9"),
+	PINCTRL_PIN(82, "GPP_D_10"),
+	PINCTRL_PIN(83, "GPP_D_11"),
+	PINCTRL_PIN(84, "GPP_D_12"),
+	PINCTRL_PIN(85, "GPP_D_13"),
+	PINCTRL_PIN(86, "GPP_D_14"),
+	PINCTRL_PIN(87, "GPP_D_15"),
+	PINCTRL_PIN(88, "GPP_D_16"),
+	PINCTRL_PIN(89, "GPP_D_17"),
+	PINCTRL_PIN(90, "GPP_D_18"),
+	PINCTRL_PIN(91, "GPP_D_19"),
+	PINCTRL_PIN(92, "EXT_PWR_GATEB"),
+	PINCTRL_PIN(93, "EXT_PWR_GATE2B"),
+	PINCTRL_PIN(94, "VNN_CTRL"),
+	PINCTRL_PIN(95, "V1P05_CTRL"),
+	/* JTAG */
+	PINCTRL_PIN(96, "JTAG_TDO"),
+	PINCTRL_PIN(97, "JTAGX"),
+	PINCTRL_PIN(98, "PRDYB"),
+	PINCTRL_PIN(99, "PREQB"),
+	PINCTRL_PIN(100, "CPU_TRSTB"),
+	PINCTRL_PIN(101, "JTAG_TDI"),
+	PINCTRL_PIN(102, "JTAG_TMS"),
+	PINCTRL_PIN(103, "JTAG_TCK"),
+	PINCTRL_PIN(104, "DBG_PMODE"),
+};
+
+static const struct intel_padgroup tglk_community0_gpps[] = {
+	TGL_GPP(0, 0, 23),	/* GPP_A */
+	TGL_GPP(1, 24, 47),	/* GPP_B */
+};
+
+static const struct intel_padgroup tglk_community1_gpps[] = {
+	TGL_GPP(0, 48, 71),	/* GPP_C */
+	TGL_GPP(1, 72, 95),	/* GPP_D */
+};
+
+static const struct intel_padgroup tglk_community4_gpps[] = {
+	TGL_GPP(0, 96, 104),	/* JTAG */
+};
+
+static const struct intel_community tglk_communities[] = {
+	TGL_COMMUNITY(0, 0, 47, tglk_community0_gpps),
+	TGL_COMMUNITY(1, 48, 95, tglk_community1_gpps),
+	TGL_COMMUNITY(2, 96, 104, tglk_community4_gpps),
+};
+
+static const struct intel_pinctrl_soc_data tglk_soc_data = {
+	.pins = tglk_pins,
+	.npins = ARRAY_SIZE(tglk_pins),
+	.communities = tglk_communities,
+	.ncommunities = ARRAY_SIZE(tglk_communities),
+};
+
+static const struct acpi_device_id tgl_pinctrl_acpi_match[] = {
+	{ "INT34C5", (kernel_ulong_t)&tgllp_soc_data },
+	{ "INT34C6", (kernel_ulong_t)&tglh_soc_data },
+	{ "INT34C7", (kernel_ulong_t)&tglk_soc_data },
+	{ },
+};
+MODULE_DEVICE_TABLE(acpi, tgl_pinctrl_acpi_match);
+
+static INTEL_PINCTRL_PM_OPS(tgl_pinctrl_pm_ops);
+
+static struct platform_driver tgl_pinctrl_driver = {
+	.probe = intel_pinctrl_probe_by_hid,
+	.driver = {
+		.name = "tigerlake-pinctrl",
+		.acpi_match_table = tgl_pinctrl_acpi_match,
+		.pm = &tgl_pinctrl_pm_ops,
+	},
+};
+
+module_platform_driver(tgl_pinctrl_driver);
+
+MODULE_AUTHOR("Andy Shevchenko <andriy.shevchenko@linux.intel.com>");
+MODULE_AUTHOR("Mika Westerberg <mika.westerberg@linux.intel.com>");
+MODULE_DESCRIPTION("Intel Tiger Lake PCH pinctrl/GPIO driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

