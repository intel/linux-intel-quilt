From 800dd54a6975620ac37bbe114521e6231ebcb730 Mon Sep 17 00:00:00 2001
From: Xinyun Liu <xinyun.liu@intel.com>
Date: Thu, 5 Jul 2018 11:34:17 +0800
Subject: [PATCH 1696/2313] drm/i915/gvt: update comments for kerneldoc

Fix missing description and typo in
drivers/gpu/drm/i915/gvt/{cfg_space.c, hypercall.h, mmio.c, mpt.h}

Signed-off-by: Xinyun Liu <xinyun.liu@intel.com>
Reviewed-by: Min He <min.he@intel.com>
Acked-by: Yakui Zhao <yakui.zhao@intel.com>
---
 drivers/gpu/drm/i915/gvt/cfg_space.c | 13 +++++++++++
 drivers/gpu/drm/i915/gvt/hypercall.h | 25 +++++++++++++++++++-
 drivers/gpu/drm/i915/gvt/mmio.c      | 45 ++++++++++++++++++------------------
 drivers/gpu/drm/i915/gvt/mpt.h       | 36 ++++++++++++++++++++++++++---
 4 files changed, 93 insertions(+), 26 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/cfg_space.c b/drivers/gpu/drm/i915/gvt/cfg_space.c
index f532e4b..78219f1 100644
--- a/drivers/gpu/drm/i915/gvt/cfg_space.c
+++ b/drivers/gpu/drm/i915/gvt/cfg_space.c
@@ -56,6 +56,10 @@ static const u8 pci_cfg_space_rw_bmp[PCI_INTERRUPT_LINE + 4] = {
 
 /**
  * vgpu_pci_cfg_mem_write - write virtual cfg space memory
+ * @vgpu: a vGPU
+ * @off: offset into the PCI configuration space
+ * @src: data buffer write to vGPU's emulated configure space
+ * @bytes: size of data to write in bytes
  *
  * Use this function to write virtual cfg space memory.
  * For standard cfg space, only RW bits can be changed,
@@ -92,6 +96,11 @@ static void vgpu_pci_cfg_mem_write(struct intel_vgpu *vgpu, unsigned int off,
 /**
  * intel_vgpu_emulate_cfg_read - emulate vGPU configuration space read
  *
+ * @vgpu: a vGPU
+ * @offset: offset into the PCI configuration space
+ * @p_data: data buffer read from vGPU's emulated configure space
+ * @bytes: size of data to read in bytes
+ *
  * Returns:
  * Zero on success, negative error code if failed.
  */
@@ -263,6 +272,10 @@ static int emulate_pci_bar_write(struct intel_vgpu *vgpu, unsigned int offset,
 
 /**
  * intel_vgpu_emulate_cfg_read - emulate vGPU configuration space write
+ * @vgpu: a vGPU
+ * @offset: offset into the PCI configuration space
+ * @p_data: data buffer write to vGPU's emulated configure space
+ * @bytes: size of data to write in bytes
  *
  * Returns:
  * Zero on success, negative error code if failed.
diff --git a/drivers/gpu/drm/i915/gvt/hypercall.h b/drivers/gpu/drm/i915/gvt/hypercall.h
index 25cd19b..b152964 100644
--- a/drivers/gpu/drm/i915/gvt/hypercall.h
+++ b/drivers/gpu/drm/i915/gvt/hypercall.h
@@ -33,7 +33,30 @@
 #ifndef _GVT_HYPERCALL_H_
 #define _GVT_HYPERCALL_H_
 
-/*
+/**
+ * struct intel_gvt_mpt - GVT module Mediate Pass-through Interface (MPT)
+ *
+ * @host_init: register intel_gvt_ops interface into hypervisor MPT module and
+ *             init GVT-g host side
+ * @host_exit: exit GVT-g host side
+ * @attach_vgpu: call hypervisor to initialize vGPU related stuffs inside
+ *               hypervisor
+ * @detach_vgpu: call hypervisor to release vGPU related stuffs inside
+ *               hypervisor
+ * @inject_msi: inject a MSI interrupt into vGPU
+ * @from_virt_to_mfn: translate a host VA into MFN
+ * @set_wp_page: set a guest page to write-protected
+ * @unset_wp_page: remove the write-protection of a guest page
+ * @read_gpa: copy data from GPA to host data buffer
+ * @write_gpa: copy data from host data buffer to GPA
+ * @gfn_to_mfn: translate a GFN to MFN
+ * @map_gfn_to_mfn: map a GFN region to MFN
+ * @set_trap_area: Trap a guest PA region
+ * @set_pvmmio: Set the pvmmio area
+ * @pause_domain: pause a domain
+ * @unpause_domain: unpause a domain
+ * @dom0_ready: raise a uevent when Dom 0 is ready for Dom U
+ *
  * Specific GVT-g MPT modules function collections. Currently GVT-g supports
  * both Xen and KVM by providing dedicated hypervisor-related MPT modules.
  */
diff --git a/drivers/gpu/drm/i915/gvt/mmio.c b/drivers/gpu/drm/i915/gvt/mmio.c
index 6726df7..68a8af7 100644
--- a/drivers/gpu/drm/i915/gvt/mmio.c
+++ b/drivers/gpu/drm/i915/gvt/mmio.c
@@ -39,7 +39,7 @@
 /**
  * intel_vgpu_gpa_to_mmio_offset - translate a GPA to MMIO offset
  * @vgpu: a vGPU
- *
+ * @gpa: guest physical address
  * Returns:
  * Zero on success, negative error code if failed
  */
@@ -107,16 +107,6 @@ static void failsafe_emulate_mmio_rw(struct intel_vgpu *vgpu, uint64_t pa,
 	}
 }
 
-/**
- * intel_vgpu_emulate_mmio_read - emulate MMIO read
- * @vgpu: a vGPU
- * @pa: guest physical address
- * @p_data: data return buffer
- * @bytes: access data length
- *
- * Returns:
- * Zero on success, negative error code if failed
- */
 int intel_vgpu_emulate_mmio_read_locked(struct intel_vgpu *vgpu, uint64_t pa,
 		void *p_data, unsigned int bytes)
 {
@@ -191,6 +181,16 @@ int intel_vgpu_emulate_mmio_read_locked(struct intel_vgpu *vgpu, uint64_t pa,
 	return ret;
 }
 
+/**
+ * intel_vgpu_emulate_mmio_read - emulate MMIO read
+ * @vgpu: a vGPU
+ * @pa: guest physical address
+ * @p_data: data return buffer
+ * @bytes: access data length
+ *
+ * Returns:
+ * Zero on success, negative error code if failed
+ */
 int intel_vgpu_emulate_mmio_read(struct intel_vgpu *vgpu, uint64_t pa,
 		void *p_data, unsigned int bytes)
 {
@@ -203,16 +203,7 @@ int intel_vgpu_emulate_mmio_read(struct intel_vgpu *vgpu, uint64_t pa,
 	return ret;
 }
 
-/**
- * intel_vgpu_emulate_mmio_write - emulate MMIO write
- * @vgpu: a vGPU
- * @pa: guest physical address
- * @p_data: write data buffer
- * @bytes: access data length
- *
- * Returns:
- * Zero on success, negative error code if failed
- */
+
 int intel_vgpu_emulate_mmio_write_locked(struct intel_vgpu *vgpu, uint64_t pa,
 		void *p_data, unsigned int bytes)
 {
@@ -288,6 +279,16 @@ int intel_vgpu_emulate_mmio_write_locked(struct intel_vgpu *vgpu, uint64_t pa,
 	return ret;
 }
 
+/**
+ * intel_vgpu_emulate_mmio_write - emulate MMIO write
+ * @vgpu: a vGPU
+ * @pa: guest physical address
+ * @p_data: write data buffer
+ * @bytes: access data length
+ *
+ * Returns:
+ * Zero on success, negative error code if failed
+ */
 int intel_vgpu_emulate_mmio_write(struct intel_vgpu *vgpu, uint64_t pa,
 		void *p_data, unsigned int bytes)
 {
@@ -303,7 +304,7 @@ int intel_vgpu_emulate_mmio_write(struct intel_vgpu *vgpu, uint64_t pa,
 /**
  * intel_vgpu_reset_mmio - reset virtual MMIO space
  * @vgpu: a vGPU
- *
+ * @dmlr: vGPU Device Model Level Reset or GT Reset
  */
 void intel_vgpu_reset_mmio(struct intel_vgpu *vgpu, bool dmlr)
 {
diff --git a/drivers/gpu/drm/i915/gvt/mpt.h b/drivers/gpu/drm/i915/gvt/mpt.h
index 95b806c..4d6a521 100644
--- a/drivers/gpu/drm/i915/gvt/mpt.h
+++ b/drivers/gpu/drm/i915/gvt/mpt.h
@@ -45,6 +45,9 @@
 
 /**
  * intel_gvt_hypervisor_host_init - init GVT-g host side
+ * @dev: i915 device
+ * @gvt: GVT device
+ * @ops: intel_gvt_ops interface
  *
  * Returns:
  * Zero on success, negative error code if failed
@@ -61,6 +64,8 @@ static inline int intel_gvt_hypervisor_host_init(struct device *dev,
 
 /**
  * intel_gvt_hypervisor_host_exit - exit GVT-g host side
+ * @dev: i915 device
+ * @gvt: GVT device
  */
 static inline void intel_gvt_hypervisor_host_exit(struct device *dev,
 			void *gvt)
@@ -75,6 +80,7 @@ static inline void intel_gvt_hypervisor_host_exit(struct device *dev,
 /**
  * intel_gvt_hypervisor_attach_vgpu - call hypervisor to initialize vGPU
  * related stuffs inside hypervisor.
+ * @vgpu: a vGPU
  *
  * Returns:
  * Zero on success, negative error code if failed.
@@ -91,6 +97,7 @@ static inline int intel_gvt_hypervisor_attach_vgpu(struct intel_vgpu *vgpu)
 /**
  * intel_gvt_hypervisor_detach_vgpu - call hypervisor to release vGPU
  * related stuffs inside hypervisor.
+ * @vgpu: a vGPU
  *
  * Returns:
  * Zero on success, negative error code if failed.
@@ -111,6 +118,7 @@ static inline void intel_gvt_hypervisor_detach_vgpu(struct intel_vgpu *vgpu)
 
 /**
  * intel_gvt_hypervisor_inject_msi - inject a MSI interrupt into vGPU
+ * @vgpu: a vGPU
  *
  * Returns:
  * Zero on success, negative error code if failed.
@@ -142,7 +150,7 @@ static inline int intel_gvt_hypervisor_inject_msi(struct intel_vgpu *vgpu)
 }
 
 /**
- * intel_gvt_hypervisor_set_wp_page - translate a host VA into MFN
+ * intel_gvt_hypervisor_virt_to_mfn - translate a host VA into MFN
  * @p: host kernel virtual address
  *
  * Returns:
@@ -237,7 +245,7 @@ static inline int intel_gvt_hypervisor_write_gpa(struct intel_vgpu *vgpu,
 /**
  * intel_gvt_hypervisor_gfn_to_mfn - translate a GFN to MFN
  * @vgpu: a vGPU
- * @gpfn: guest pfn
+ * @gfn: guest pfn
  *
  * Returns:
  * MFN on success, INTEL_GVT_INVALID_ADDR if failed.
@@ -312,7 +320,13 @@ static inline int intel_gvt_hypervisor_set_pvmmio(
 	return intel_gvt_host.mpt->set_pvmmio(vgpu->handle, start, end, map);
 }
 
-
+/**
+ * intel_gvt_hypervisor_pause_domain - Pause a domain
+ * @vgpu: a vGPU
+ *
+ * Returns:
+ * Zero on success, negative error code if failed
+ */
 static inline int intel_gvt_hypervisor_pause_domain(struct intel_vgpu *vgpu)
 {
 	if (!intel_gvt_host.mpt || !intel_gvt_host.mpt->pause_domain)
@@ -321,6 +335,13 @@ static inline int intel_gvt_hypervisor_pause_domain(struct intel_vgpu *vgpu)
 	return intel_gvt_host.mpt->pause_domain(vgpu->handle);
 }
 
+/**
+ * intel_gvt_hypervisor_unpause_domain - Unpause a domain
+ * @vgpu: a vGPU
+ *
+ * Returns:
+ * Zero on success, negative error code if failed
+ */
 static inline int intel_gvt_hypervisor_unpause_domain(struct intel_vgpu *vgpu)
 {
 	if (!intel_gvt_host.mpt || !intel_gvt_host.mpt->unpause_domain)
@@ -329,6 +350,15 @@ static inline int intel_gvt_hypervisor_unpause_domain(struct intel_vgpu *vgpu)
 	return intel_gvt_host.mpt->unpause_domain(vgpu->handle);
 }
 
+/**
+ * intel_gvt_hypervisor_dom0_ready - Signal Dom 0 is ready for Dom U
+ *
+ * It's to raise a uevent to notify Dom 0 is ready to start a Dom U, so that
+ * Dom U can be started as early as possible
+ *
+ * Returns:
+ * Zero on success, negative error code if failed
+ */
 static inline int intel_gvt_hypervisor_dom0_ready(void)
 {
 	if (!intel_gvt_host.mpt->dom0_ready)
-- 
2.7.4

