From 86cad13438964bcb8a554c42b73190053d2db38b Mon Sep 17 00:00:00 2001
From: Vincent Cao <vincent.t.cao@intel.com>
Date: Tue, 19 Jun 2018 16:49:01 -0700
Subject: [PATCH 02/70] TEE/OPTEE: Adds a kernel internal TEE client interface

Enable TEE core additional kernel interface client interface to be
used by other drivers.

all patch credited to Jens Wiklander
https://patchwork.kernel.org/patch/9845351/

Change-Id: Ibd4f50350d10e005fc7930f2230f689b0ecf3854
Signed-off-by: Vincent Cao <vincent.t.cao@intel.com>
Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 README.intel.optee      | 13 +++++++
 drivers/tee/tee_core.c  | 80 +++--------------------------------------
 include/linux/tee_drv.h | 74 +++++++-------------------------------
 3 files changed, 30 insertions(+), 137 deletions(-)
 create mode 100644 README.intel.optee

diff --git a/README.intel.optee b/README.intel.optee
new file mode 100644
index 000000000000..0945d23cc882
--- /dev/null
+++ b/README.intel.optee
@@ -0,0 +1,13 @@
+IP Block: OPTEE core driver
+Platform Affect: (ARM64) IOTG KeemBay
+BugFix: None
+
+This branch pulls in driver interface enhancement to OPTEE TEE driver to expose
+an kernel internal TEE client interface to be used by other drivers.
+
+This patch was pushed to the upstream kernel mailinglist by Jens Wiklander (OPTEE maintainer)
+nearly a year ago but no effort to include yet in any recently release.
+
+https://patchwork.kernel.org/patch/9845351/
+
+CONFIG_TEE and CONFIG_OPTEE in defconfig must be enabled for driver to compile.
diff --git a/drivers/tee/tee_core.c b/drivers/tee/tee_core.c
index 3ca3d2ea92f8..7f33ba2dd5fe 100644
--- a/drivers/tee/tee_core.c
+++ b/drivers/tee/tee_core.c
@@ -6,6 +6,7 @@
 #define pr_fmt(fmt) "%s: " fmt, __func__
 
 #include <linux/cdev.h>
+#include <linux/device.h>
 #include <linux/fs.h>
 #include <linux/idr.h>
 #include <linux/module.h>
@@ -54,7 +55,6 @@ static struct tee_context *teedev_open(struct tee_device *teedev)
 	kfree(ctx);
 	tee_device_put(teedev);
 	return ERR_PTR(rc);
-
 }
 
 void teedev_ctx_get(struct tee_context *ctx)
@@ -96,11 +96,6 @@ static int tee_open(struct inode *inode, struct file *filp)
 	if (IS_ERR(ctx))
 		return PTR_ERR(ctx);
 
-	/*
-	 * Default user-space behaviour is to wait for tee-supplicant
-	 * if not present for any requests in this context.
-	 */
-	ctx->supp_nowait = false;
 	filp->private_data = ctx;
 	return 0;
 }
@@ -977,16 +972,6 @@ tee_client_open_context(struct tee_context *start,
 	} while (IS_ERR(ctx) && PTR_ERR(ctx) != -ENOMEM);
 
 	put_device(put_dev);
-	/*
-	 * Default behaviour for in kernel client is to not wait for
-	 * tee-supplicant if not present for any requests in this context.
-	 * Also this flag could be configured again before call to
-	 * tee_client_open_session() if any in kernel client requires
-	 * different behaviour.
-	 */
-	if (!IS_ERR(ctx))
-		ctx->supp_nowait = true;
-
 	return ctx;
 }
 EXPORT_SYMBOL_GPL(tee_client_open_context);
@@ -1032,49 +1017,6 @@ int tee_client_invoke_func(struct tee_context *ctx,
 }
 EXPORT_SYMBOL_GPL(tee_client_invoke_func);
 
-int tee_client_cancel_req(struct tee_context *ctx,
-			  struct tee_ioctl_cancel_arg *arg)
-{
-	if (!ctx->teedev->desc->ops->cancel_req)
-		return -EINVAL;
-	return ctx->teedev->desc->ops->cancel_req(ctx, arg->cancel_id,
-						  arg->session);
-}
-EXPORT_SYMBOL_GPL(tee_client_cancel_req);
-
-static int tee_client_device_match(struct device *dev,
-				   struct device_driver *drv)
-{
-	const struct tee_client_device_id *id_table;
-	struct tee_client_device *tee_device;
-
-	id_table = to_tee_client_driver(drv)->id_table;
-	tee_device = to_tee_client_device(dev);
-
-	while (!uuid_is_null(&id_table->uuid)) {
-		if (uuid_equal(&tee_device->id.uuid, &id_table->uuid))
-			return 1;
-		id_table++;
-	}
-
-	return 0;
-}
-
-static int tee_client_device_uevent(struct device *dev,
-				    struct kobj_uevent_env *env)
-{
-	uuid_t *dev_id = &to_tee_client_device(dev)->id.uuid;
-
-	return add_uevent_var(env, "MODALIAS=tee:%pUb", dev_id);
-}
-
-struct bus_type tee_bus_type = {
-	.name		= "tee",
-	.match		= tee_client_device_match,
-	.uevent		= tee_client_device_uevent,
-};
-EXPORT_SYMBOL_GPL(tee_bus_type);
-
 static int __init tee_init(void)
 {
 	int rc;
@@ -1088,32 +1030,18 @@ static int __init tee_init(void)
 	rc = alloc_chrdev_region(&tee_devt, 0, TEE_NUM_DEVICES, "tee");
 	if (rc) {
 		pr_err("failed to allocate char dev region\n");
-		goto out_unreg_class;
-	}
-
-	rc = bus_register(&tee_bus_type);
-	if (rc) {
-		pr_err("failed to register tee bus\n");
-		goto out_unreg_chrdev;
+		class_destroy(tee_class);
+		tee_class = NULL;
 	}
 
-	return 0;
-
-out_unreg_chrdev:
-	unregister_chrdev_region(tee_devt, TEE_NUM_DEVICES);
-out_unreg_class:
-	class_destroy(tee_class);
-	tee_class = NULL;
-
 	return rc;
 }
 
 static void __exit tee_exit(void)
 {
-	bus_unregister(&tee_bus_type);
-	unregister_chrdev_region(tee_devt, TEE_NUM_DEVICES);
 	class_destroy(tee_class);
 	tee_class = NULL;
+	unregister_chrdev_region(tee_devt, TEE_NUM_DEVICES);
 }
 
 subsys_initcall(tee_init);
diff --git a/include/linux/tee_drv.h b/include/linux/tee_drv.h
index 7a03f68fb982..7ce4dd8c76ae 100644
--- a/include/linux/tee_drv.h
+++ b/include/linux/tee_drv.h
@@ -6,14 +6,11 @@
 #ifndef __TEE_DRV_H
 #define __TEE_DRV_H
 
-#include <linux/device.h>
+#include <linux/types.h>
 #include <linux/idr.h>
 #include <linux/kref.h>
 #include <linux/list.h>
-#include <linux/mod_devicetable.h>
 #include <linux/tee.h>
-#include <linux/types.h>
-#include <linux/uuid.h>
 
 /*
  * The file describes the API provided by the generic TEE driver to the
@@ -41,11 +38,6 @@ struct tee_shm_pool;
  * @releasing:  flag that indicates if context is being released right now.
  *		It is needed to break circular dependency on context during
  *              shared memory release.
- * @supp_nowait: flag that indicates that requests in this context should not
- *              wait for tee-supplicant daemon to be started if not present
- *              and just return with an error code. It is needed for requests
- *              that arises from TEE based kernel drivers that should be
- *              non-blocking in nature.
  */
 struct tee_context {
 	struct tee_device *teedev;
@@ -53,7 +45,6 @@ struct tee_context {
 	void *data;
 	struct kref refcount;
 	bool releasing;
-	bool supp_nowait;
 };
 
 struct tee_param_memref {
@@ -453,6 +444,18 @@ static inline int tee_shm_get_id(struct tee_shm *shm)
  */
 struct tee_shm *tee_shm_get_from_id(struct tee_context *ctx, int id);
 
+static inline bool tee_param_is_memref(struct tee_param *param)
+{
+	switch (param->attr & TEE_IOCTL_PARAM_ATTR_TYPE_MASK) {
+	case TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT:
+	case TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT:
+	case TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT:
+		return true;
+	default:
+		return false;
+	}
+}
+
 /**
  * tee_client_open_context() - Open a TEE context
  * @start:	if not NULL, continue search after this context
@@ -526,55 +529,4 @@ int tee_client_invoke_func(struct tee_context *ctx,
 			   struct tee_ioctl_invoke_arg *arg,
 			   struct tee_param *param);
 
-/**
- * tee_client_cancel_req() - Request cancellation of the previous open-session
- * or invoke-command operations in a Trusted Application
- * @ctx:       TEE Context
- * @arg:       Cancellation arguments, see description of
- *             struct tee_ioctl_cancel_arg
- *
- * Returns < 0 on error else 0 if the cancellation was successfully requested.
- */
-int tee_client_cancel_req(struct tee_context *ctx,
-			  struct tee_ioctl_cancel_arg *arg);
-
-static inline bool tee_param_is_memref(struct tee_param *param)
-{
-	switch (param->attr & TEE_IOCTL_PARAM_ATTR_TYPE_MASK) {
-	case TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT:
-	case TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT:
-	case TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT:
-		return true;
-	default:
-		return false;
-	}
-}
-
-extern struct bus_type tee_bus_type;
-
-/**
- * struct tee_client_device - tee based device
- * @id:			device identifier
- * @dev:		device structure
- */
-struct tee_client_device {
-	struct tee_client_device_id id;
-	struct device dev;
-};
-
-#define to_tee_client_device(d) container_of(d, struct tee_client_device, dev)
-
-/**
- * struct tee_client_driver - tee client driver
- * @id_table:		device id table supported by this driver
- * @driver:		driver structure
- */
-struct tee_client_driver {
-	const struct tee_client_device_id *id_table;
-	struct device_driver driver;
-};
-
-#define to_tee_client_driver(d) \
-		container_of(d, struct tee_client_driver, driver)
-
 #endif /*__TEE_DRV_H*/
-- 
2.17.1

