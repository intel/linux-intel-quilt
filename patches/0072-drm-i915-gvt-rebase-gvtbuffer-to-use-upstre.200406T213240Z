From c9820dc3bfa2e47340c969e3798edb2a09b340d6 Mon Sep 17 00:00:00 2001
From: Zhipeng Gong <zhipeng.gong@intel.com>
Date: Tue, 23 Oct 2018 11:02:11 +0800
Subject: [PATCH 072/100] drm/i915/gvt: rebase gvtbuffer to use upstream
 functions.

Upstream code ignores pipe id passed from user space and detect
active pipe automatically in intel_vgpu_decode_primary_plane.

This patch rebases gvtbuffer ioctl to use the upstream functions
and ignore pipe id.

v2: split the patch
v3: add CONFIG_DRM_I915_GVT enable check and gvt null check
v4: only build i915_gem_gvtbuffer.c when CONFIG_DRM_I915_GVT enabled

Tracked-On: projectacrn/acrn-hypervisor#1576
Signed-off-by: Zhipeng Gong <zhipeng.gong@intel.com>
Reviewed-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/gpu/drm/i915/Makefile             |  3 +-
 drivers/gpu/drm/i915/gvt/fb_decoder.c     | 67 ------------------
 drivers/gpu/drm/i915/gvt/fb_decoder.h     |  5 --
 drivers/gpu/drm/i915/i915_drv.h           |  8 +++
 drivers/gpu/drm/i915/i915_gem_gvtbuffer.c | 86 ++++++++++++-----------
 5 files changed, 55 insertions(+), 114 deletions(-)

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index aff633866ec2..7e469c1736e7 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -151,7 +151,6 @@ i915-y += \
 	  i915_trace_points.o \
 	  i915_vma.o \
 	  intel_region_lmem.o \
-	  i915_gem_gvtbuffer.o \
 	  intel_wopcm.o
 
 # general-purpose microcontroller (GuC) support
@@ -267,7 +266,7 @@ i915-$(CONFIG_DRM_I915_SELFTEST) += \
 i915-y += i915_vgpu.o
 
 ifeq ($(CONFIG_DRM_I915_GVT),y)
-i915-y += intel_gvt.o
+i915-y += intel_gvt.o i915_gem_gvtbuffer.o
 include $(src)/gvt/Makefile
 endif
 
diff --git a/drivers/gpu/drm/i915/gvt/fb_decoder.c b/drivers/gpu/drm/i915/gvt/fb_decoder.c
index 393302f3df80..0b66429bd429 100644
--- a/drivers/gpu/drm/i915/gvt/fb_decoder.c
+++ b/drivers/gpu/drm/i915/gvt/fb_decoder.c
@@ -507,70 +507,3 @@ int intel_vgpu_decode_sprite_plane(struct intel_vgpu *vgpu,
 
 	return 0;
 }
-
-/**
- * intel_vgpu_decode_fb_format - Decode framebuffer information from raw vMMIO
- * @gvt: GVT device
- * @vmid: guest domain ID
- * @fb: frame buffer infomation of guest.
- * This function is called for query frame buffer format, so that gl can
- * display guest fb in Dom0
- *
- * Returns:
- * Zero on success, negative error code if failed.
- */
-int intel_vgpu_decode_fb_format(struct intel_gvt *gvt, int id,
-				struct intel_vgpu_fb_format *fb)
-
-{
-	int i;
-	struct intel_vgpu *vgpu = NULL;
-	int ret = 0;
-	struct drm_i915_private *dev_priv = gvt->dev_priv;
-
-	if (!fb)
-		return -EINVAL;
-
-	/* TODO: use fine-grained refcnt later */
-	mutex_lock(&gvt->lock);
-
-	for_each_active_vgpu(gvt, vgpu, i)
-		if (vgpu->id == id)
-			break;
-
-	if (!vgpu) {
-		gvt_err("Invalid vgpu ID (%d)\n", id);
-		mutex_unlock(&gvt->lock);
-		return -ENODEV;
-	}
-
-	for (i = 0; i < I915_MAX_PIPES; i++) {
-		struct intel_vgpu_pipe_format *pipe = &fb->pipes[i];
-		u32 ddi_func_ctl = vgpu_vreg_t(vgpu, TRANS_DDI_FUNC_CTL(i));
-
-		if (!(ddi_func_ctl & TRANS_DDI_FUNC_ENABLE)) {
-			pipe->ddi_port = DDI_PORT_NONE;
-		} else {
-			u32 port = (ddi_func_ctl & TRANS_DDI_PORT_MASK) >>
-						TRANS_DDI_PORT_SHIFT;
-			if (port <= DDI_PORT_E)
-				pipe->ddi_port = port;
-			else
-				pipe->ddi_port = DDI_PORT_NONE;
-		}
-
-		ret |= intel_vgpu_decode_primary_plane(vgpu, &pipe->primary);
-		ret |= intel_vgpu_decode_sprite_plane(vgpu, &pipe->sprite);
-		ret |= intel_vgpu_decode_cursor_plane(vgpu, &pipe->cursor);
-
-		if (ret) {
-			gvt_err("Decode format error for pipe(%d)\n", i);
-			ret = -EINVAL;
-			break;
-		}
-	}
-
-	mutex_unlock(&gvt->lock);
-
-	return ret;
-}
diff --git a/drivers/gpu/drm/i915/gvt/fb_decoder.h b/drivers/gpu/drm/i915/gvt/fb_decoder.h
index 51626759534b..6c51fe00d421 100644
--- a/drivers/gpu/drm/i915/gvt/fb_decoder.h
+++ b/drivers/gpu/drm/i915/gvt/fb_decoder.h
@@ -169,9 +169,4 @@ int intel_vgpu_decode_cursor_plane(struct intel_vgpu *vgpu,
 	struct intel_vgpu_cursor_plane_format *plane);
 int intel_vgpu_decode_sprite_plane(struct intel_vgpu *vgpu,
 	struct intel_vgpu_sprite_plane_format *plane);
-
-extern
-int intel_vgpu_decode_fb_format(struct intel_gvt *pdev, int vmid,
-				struct intel_vgpu_fb_format *fb);
-
 #endif
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 9f196a069deb..81ed44185e3a 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1802,8 +1802,16 @@ static inline bool intel_vgpu_active(struct drm_i915_private *dev_priv)
 int i915_getparam_ioctl(struct drm_device *dev, void *data,
 			struct drm_file *file_priv);
 
+#ifdef CONFIG_DRM_I915_GVT
 int i915_gem_gvtbuffer_ioctl(struct drm_device *dev, void *data,
 			     struct drm_file *file);
+#else
+static inline int i915_gem_gvtbuffer_ioctl(struct drm_device *dev, void *data,
+			     struct drm_file *file)
+{
+	return -EINVAL;
+}
+#endif
 
 /* i915_gem.c */
 int i915_gem_init_userptr(struct drm_i915_private *dev_priv);
diff --git a/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c b/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c
index a625a35d9d41..018beb310a2a 100644
--- a/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_gvtbuffer.c
@@ -141,53 +141,59 @@ static int gvt_decode_information(struct drm_device *dev,
 				  struct drm_i915_gem_gvtbuffer *args)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
-	struct intel_vgpu_fb_format fb;
-	struct intel_vgpu_primary_plane_format *p;
-	struct intel_vgpu_cursor_plane_format *c;
-	struct intel_vgpu_pipe_format *pipe;
-#if IS_ENABLED(CONFIG_DRM_I915_GVT)
-	u32 id = args->id;
-
-	if (intel_vgpu_decode_fb_format(dev_priv->gvt, id, &fb))
+	struct intel_gvt *gvt = dev_priv->gvt;
+	struct intel_vgpu_primary_plane_format p;
+	struct intel_vgpu_cursor_plane_format c;
+	struct intel_vgpu *vgpu = NULL;
+	int ret;
+	int i;
+
+	if (!intel_gvt_active(dev_priv))
 		return -EINVAL;
-#else
-	return -EINVAL;
-#endif
 
-	pipe = ((args->pipe_id >= I915_MAX_PIPES) ?
-		NULL : &fb.pipes[args->pipe_id]);
+	mutex_lock(&gvt->lock);
+	for_each_active_vgpu(gvt, vgpu, i)
+		if (vgpu->id == args->id)
+			break;
 
-	if (!pipe || !pipe->primary.enabled) {
-		DRM_DEBUG_DRIVER("GVT_GEM: Invalid pipe_id: %d\n",
-				 args->pipe_id);
-		return -EINVAL;
+	if (!vgpu) {
+		gvt_err("Invalid vgpu ID (%d)\n", args->id);
+		mutex_unlock(&gvt->lock);
+		return -ENODEV;
 	}
+	mutex_unlock(&gvt->lock);
 
 	if ((args->plane_id) == I915_GVT_PLANE_PRIMARY) {
-		p = &pipe->primary;
-		args->enabled = p->enabled;
-		args->x_offset = p->x_offset;
-		args->y_offset = p->y_offset;
-		args->start = p->base;
-		args->width = p->width;
-		args->height = p->height;
-		args->stride = p->stride;
-		args->bpp = p->bpp;
-		args->hw_format = p->hw_format;
-		args->drm_format = p->drm_format;
-		args->tiled = p->tiled;
+		ret = intel_vgpu_decode_primary_plane(vgpu, &p);
+		if (ret)
+			return ret;
+
+		args->enabled = p.enabled;
+		args->x_offset = p.x_offset;
+		args->y_offset = p.y_offset;
+		args->start = p.base;
+		args->width = p.width;
+		args->height = p.height;
+		args->stride = p.stride;
+		args->bpp = p.bpp;
+		args->hw_format = p.hw_format;
+		args->drm_format = p.drm_format;
+		args->tiled = p.tiled;
 	} else if ((args->plane_id) == I915_GVT_PLANE_CURSOR) {
-		c = &pipe->cursor;
-		args->enabled = c->enabled;
-		args->x_offset = c->x_hot;
-		args->y_offset = c->y_hot;
-		args->x_pos = c->x_pos;
-		args->y_pos = c->y_pos;
-		args->start = c->base;
-		args->width = c->width;
-		args->height = c->height;
-		args->stride = c->width * (c->bpp / 8);
-		args->bpp = c->bpp;
+		ret = intel_vgpu_decode_cursor_plane(vgpu, &c);
+		if (ret)
+			return ret;
+
+		args->enabled = c.enabled;
+		args->x_offset = c.x_hot;
+		args->y_offset = c.y_hot;
+		args->x_pos = c.x_pos;
+		args->y_pos = c.y_pos;
+		args->start = c.base;
+		args->width = c.width;
+		args->height = c.height;
+		args->stride = c.width * (c.bpp / 8);
+		args->bpp = c.bpp;
 		args->tiled = 0;
 	} else {
 		DRM_DEBUG_DRIVER("GVT_GEM: Invalid plaine_id: %d\n",
-- 
2.17.1

