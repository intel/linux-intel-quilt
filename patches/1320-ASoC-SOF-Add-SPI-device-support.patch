From c54eddf439a0e6f39f1c2fcd9a4c7354543a7546 Mon Sep 17 00:00:00 2001
From: Liam Girdwood <liam.r.girdwood@linux.intel.com>
Date: Mon, 8 Jan 2018 20:36:46 +0000
Subject: [PATCH 1320/2367] ASoC: SOF: Add SPI device support

Add support for SPI based DSP devices.

Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
---
 sound/soc/sof/hw-spi.c      | 253 ++++++++++++++++++++++++++++++++++++++++++++
 sound/soc/sof/sof-spi-dev.c | 167 +++++++++++++++++++++++++++++
 2 files changed, 420 insertions(+)
 create mode 100644 sound/soc/sof/hw-spi.c
 create mode 100644 sound/soc/sof/sof-spi-dev.c

diff --git a/sound/soc/sof/hw-spi.c b/sound/soc/sof/hw-spi.c
new file mode 100644
index 00000000..d6ba29f
--- /dev/null
+++ b/sound/soc/sof/hw-spi.c
@@ -0,0 +1,253 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2017 Intel Corporation. All rights reserved.
+ *
+ * Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+ */
+
+/*
+ * Hardware interface for audio DSPs via SPI
+ */
+
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/dma-mapping.h>
+#include <linux/firmware.h>
+#include <linux/spi/spi.h>
+#include <linux/of_device.h>
+
+#include <linux/device.h>
+#include <sound/sof.h>
+#include <uapi/sound/sof-fw.h>
+
+#include "sof-priv.h"
+#include "ops.h"
+#include "intel.h"
+
+/*
+ * Memory copy.
+ */
+
+static void spi_block_write(struct snd_sof_dev *sdev, u32 offset, void *src,
+			    size_t size)
+{
+	// use spi_write() to copy data to DSP
+}
+
+static void spi_block_read(struct snd_sof_dev *sdev, u32 offset, void *dest,
+			   size_t size)
+{
+	// use spi_read() to copy data from DSP
+}
+
+/*
+ * IPC Firmware ready.
+ */
+static int spi_fw_ready(struct snd_sof_dev *sdev, u32 msg_id)
+{
+	struct sof_ipc_fw_ready *fw_ready = &sdev->fw_ready;
+	struct sof_ipc_fw_version *v = &fw_ready->version;
+
+	dev_dbg(sdev->dev, "ipc: DSP is ready 0x%8.8x\n", msg_id);
+
+	// read local buffer with SPI data
+
+	dev_info(sdev->dev, " Firmware info: version %d:%d-%s build %d on %s:%s\n",
+		 v->major, v->minor, v->tag, v->build, v->date, v->time);
+
+	return 0;
+}
+
+/*
+ * IPC Mailbox IO
+ */
+
+static void spi_mailbox_write(struct snd_sof_dev *sdev, u32 offset,
+			      void *message, size_t bytes)
+{
+	void __iomem *dest = sdev->bar[sdev->mailbox_bar] + offset;
+
+	//memcpy_toio(dest, message, bytes);
+	/*
+	 * this will copy to a local memory buffer that will be sent to DSP via
+	 * SPI at next IPC
+	 */
+}
+
+static void spi_mailbox_read(struct snd_sof_dev *sdev, u32 offset,
+			     void *message, size_t bytes)
+{
+	void __iomem *src = sdev->bar[sdev->mailbox_bar] + offset;
+
+	//memcpy_fromio(message, src, bytes);
+	/*
+	 * this will copy from a local memory buffer that will be received from
+	 * DSP via SPI at last IPC
+	 */
+}
+
+/*
+ * IPC Doorbell IRQ handler and thread.
+ */
+
+static irqreturn_t spi_irq_handler(int irq, void *context)
+{
+	struct snd_sof_dev *sdev = (struct snd_sof_dev *)context;
+	int ret = IRQ_NONE;
+
+	// on SPI based devices this will likely come via a SoC GPIO IRQ
+
+	// check if GPIO is assetred and if so run thread.
+
+	return ret;
+}
+
+static irqreturn_t spi_irq_thread(int irq, void *context)
+{
+	struct snd_sof_dev *sdev = (struct snd_sof_dev *)context;
+
+	// read SPI data into local buffer and determine IPC cmd or reply
+
+	/*
+	 * if reply. Handle Immediate reply from DSP Core and set DSP
+	 * state to ready
+	 */
+	//snd_sof_ipc_reply(sdev, ipcx);
+
+	/* if cmd, Handle messages from DSP Core */
+	//snd_sof_ipc_msgs_rx(sdev);
+
+	/* continue to send any remaining messages... */
+	snd_sof_ipc_msgs_tx(sdev);
+
+	return IRQ_HANDLED;
+}
+
+static int spi_is_ready(struct snd_sof_dev *sdev)
+{
+	// use local variable to store DSP command state. either DSP is ready
+	// for new cmd or still processing current cmd.
+
+	return 1;
+}
+
+static int spi_send_msg(struct snd_sof_dev *sdev, struct snd_sof_ipc_msg *msg)
+{
+	u64 cmd = msg->header;
+
+	/* send the message */
+	spi_mailbox_write(sdev, sdev->host_box.offset, msg->msg_data,
+			  msg->msg_size);
+
+	return 0;
+}
+
+static int spi_get_reply(struct snd_sof_dev *sdev, struct snd_sof_ipc_msg *msg)
+{
+	struct sof_ipc_reply reply;
+	int ret = 0;
+	u32 size;
+
+	/* get reply */
+	spi_mailbox_read(sdev, sdev->host_box.offset, &reply, sizeof(reply));
+	if (reply.error < 0) {
+		size = sizeof(reply);
+		ret = reply.error;
+	} else {
+		/* reply correct size ? */
+		if (reply.hdr.size != msg->reply_size) {
+			dev_err(sdev->dev, "error: reply expected 0x%lx got 0x%x bytes\n",
+				msg->reply_size, reply.hdr.size);
+			size = msg->reply_size;
+			ret = -EINVAL;
+		} else {
+			size = reply.hdr.size;
+		}
+	}
+
+	/* read the message */
+	if (msg->msg_data && size > 0)
+		spi_mailbox_read(sdev, sdev->host_box.offset, msg->reply_data,
+				 size);
+
+	return ret;
+}
+
+/*
+ * Probe and remove.
+ */
+
+static int spi_sof_probe(struct snd_sof_dev *sdev)
+{
+	struct snd_sof_pdata *pdata = sdev->pdata;
+	const struct sof_dev_desc *desc = pdata->desc;
+	struct platform_device *pdev =
+		container_of(sdev->parent, struct platform_device, dev);
+	int ret = 0;
+
+	/* get IRQ from Device tree or ACPI - register our IRQ */
+	dev_dbg(sdev->dev, "using IRQ %d\n", sdev->ipc_irq);
+	ret = request_threaded_irq(sdev->ipc_irq, spi_irq_handler,
+				   spi_irq_thread, IRQF_SHARED, "AudioDSP",
+				   sdev);
+	if (ret < 0) {
+		dev_err(sdev->dev, "error: failed to register IRQ %d\n",
+			sdev->ipc_irq);
+		goto irq_err;
+	}
+
+	return ret;
+}
+
+static int spi_sof_remove(struct snd_sof_dev *sdev)
+{
+	free_irq(sdev->ipc_irq, sdev);
+	return 0;
+}
+
+/* baytrail ops */
+struct snd_sof_dsp_ops snd_sof_spi_ops = {
+	/* device init */
+	.probe		= spi_sof_probe,
+	.remove		= spi_sof_remove,
+
+	/* Block IO */
+	.block_read	= spi_block_read,
+	.block_write	= spi_block_write,
+
+	/* doorbell */
+	.irq_handler	= spi_irq_handler,
+	.irq_thread	= spi_irq_thread,
+
+	/* mailbox */
+	.mailbox_read	= spi_mailbox_read,
+	.mailbox_write	= spi_mailbox_write,
+
+	/* ipc */
+	.send_msg	= spi_send_msg,
+	.get_reply	= spi_get_reply,
+	.fw_ready	= spi_fw_ready,
+	.is_ready	= spi_is_ready,
+	.cmd_done	= spi_cmd_done,
+
+	/* debug */
+	.debug_map	= spi_debugfs,
+	.debug_map_count	= ARRAY_SIZE(spi_debugfs),
+	.dbg_dump	= spi_dump,
+
+	/* module loading */
+	.load_module	= snd_sof_parse_module_memcpy,
+
+	/*Firmware loading */
+	.load_firmware	= snd_sof_load_firmware_memcpy,
+};
+EXPORT_SYMBOL(snd_sof_spi_ops);
+
+MODULE_LICENSE("Dual BSD/GPL");
diff --git a/sound/soc/sof/sof-spi-dev.c b/sound/soc/sof/sof-spi-dev.c
new file mode 100644
index 00000000..f5b17d0
--- /dev/null
+++ b/sound/soc/sof/sof-spi-dev.c
@@ -0,0 +1,167 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2017 Intel Corporation. All rights reserved.
+ *
+ * Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+ */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/pm_runtime.h>
+#include <linux/platform_device.h>
+#include <linux/firmware.h>
+#include <sound/pcm.h>
+#include <sound/sof.h>
+#include <linux/spi/spi.h>
+#include <linux/of_device.h>
+#include "sof-priv.h"
+
+struct sof_spi_priv {
+	struct snd_sof_pdata *sof_pdata;
+	struct platform_device *pdev_pcm;
+};
+
+static void sof_spi_fw_cb(const struct firmware *fw, void *context)
+{
+	struct sof_spi_priv *priv = context;
+	struct snd_sof_pdata *sof_pdata = priv->sof_pdata;
+	const struct snd_sof_machine *mach = sof_pdata->machine;
+	struct device *dev = sof_pdata->dev;
+
+	sof_pdata->fw = fw;
+	if (!fw) {
+		dev_err(dev, "Cannot load firmware %s\n",
+			mach->sof_fw_filename);
+		return;
+	}
+
+	/* register PCM and DAI driver */
+	priv->pdev_pcm =
+		platform_device_register_data(dev, "sof-audio", -1,
+					      sof_pdata, sizeof(*sof_pdata));
+	if (IS_ERR(priv->pdev_pcm)) {
+		dev_err(dev, "Cannot register device sof-audio. Error %d\n",
+			(int)PTR_ERR(priv->pdev_pcm));
+	}
+}
+
+static const struct dev_pm_ops sof_spi_pm = {
+	SET_SYSTEM_SLEEP_PM_OPS(snd_sof_suspend, snd_sof_resume)
+	SET_RUNTIME_PM_OPS(snd_sof_runtime_suspend, snd_sof_runtime_resume,
+			   NULL)
+	.suspend_late = snd_sof_suspend_late,
+};
+
+static int sof_spi_probe(struct spi_device *spi)
+{
+	struct device *dev = &spi->dev;
+	const struct snd_sof_machine *mach;
+	struct snd_sof_machine *m;
+	struct snd_sof_pdata *sof_pdata;
+	struct sof_spi_priv *priv;
+	int ret = 0;
+
+	dev_dbg(&spi->dev, "SPI DSP detected");
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+	spi_set_drvdata(spi, priv);
+
+	sof_pdata = devm_kzalloc(dev, sizeof(*sof_pdata), GFP_KERNEL);
+	if (!sof_pdata)
+		return -ENOMEM;
+
+	/* use nocodec machine atm */
+	dev_err(dev, "No matching ASoC machine driver found - using nocodec\n");
+	sof_pdata->drv_name = "sof-nocodec";
+	m = devm_kzalloc(dev, sizeof(*mach), GFP_KERNEL);
+	if (!m)
+		return -ENOMEM;
+
+	m->drv_name = "sof-nocodec";
+	m->sof_fw_filename = desc->nocodec_fw_filename;
+	m->sof_tplg_filename = desc->nocodec_tplg_filename;
+	m->ops = desc->machines[0].ops;
+	m->asoc_plat_name = "sof-platform";
+	mach = m;
+
+	sof_pdata->id = pci_id->device;
+	sof_pdata->name = spi_name(spi);
+	sof_pdata->machine = mach;
+	sof_pdata->desc = (struct sof_dev_desc *)pci_id->driver_data;
+	priv->sof_pdata = sof_pdata;
+	sof_pdata->spi = spi;
+	sof_pdata->dev = dev;
+
+	/* register machine driver */
+	sof_pdata->pdev_mach =
+		platform_device_register_data(dev, mach->drv_name, -1,
+					      sof_pdata, sizeof(*sof_pdata));
+	if (IS_ERR(sof_pdata->pdev_mach))
+		return PTR_ERR(sof_pdata->pdev_mach);
+	dev_dbg(dev, "created machine %s\n",
+		dev_name(&sof_pdata->pdev_mach->dev));
+
+	/* continue probing after firmware is loaded */
+	ret = request_firmware_nowait(THIS_MODULE, true, mach->sof_fw_filename,
+				      dev, GFP_KERNEL, priv, sof_spi_fw_cb);
+	if (ret)
+		platform_device_unregister(sof_pdata->pdev_mach);
+
+	return ret;
+}
+
+static int sof_spi_remove(struct spi_device *spi)
+{
+	struct sof_spi_priv *priv = spi_get_drvdata(spi);
+	struct snd_sof_pdata *sof_pdata = priv->sof_pdata;
+
+	platform_device_unregister(sof_pdata->pdev_mach);
+	if (!IS_ERR_OR_NULL(priv->pdev_pcm))
+		platform_device_unregister(priv->pdev_pcm);
+	release_firmware(sof_pdata->fw);
+}
+
+static struct spi_driver wm8731_spi_driver = {
+	.driver = {
+		.name	= "sof-spi-dev",
+		.of_match_table = sof_of_match,
+	},
+	.probe		= sof_spi_probe,
+	.remove		= sof_spi_remove,
+};
+
+static const struct snd_sof_machine sof_spi_machines[] = {
+	{ "INT343A", "bxt_alc298s_i2s", "intel/reef-spi.ri",
+		"intel/reef-spi.tplg", "0000:00:0e.0", &snd_sof_spi_ops },
+};
+
+static const struct sof_dev_desc spi_desc = {
+	.machines		= sof_spi_machines,
+	.nocodec_fw_filename = "intel/reef-spi.ri",
+	.nocodec_tplg_filename = "intel/reef-spi.tplg"
+};
+
+static int __init sof_spi_modinit(void)
+{
+	int ret;
+
+	ret = spi_register_driver(&sof_spi_driver);
+	if (ret != 0)
+		pr_err("Failed to register SOF SPI driver: %d\n", ret);
+
+	return ret;
+}
+module_init(sof_spi_modinit);
+
+static void __exit sof_spi_modexit(void)
+{
+	spi_unregister_driver(&sof_spi_driver);
+}
+module_exit(sof_spi_modexit);
+
+MODULE_LICENSE("Dual BSD/GPL");
-- 
2.7.4

