From d7a29133422dc3e1d17ed6f81c7a9416662351cf Mon Sep 17 00:00:00 2001
From: "Tan, Tee Min" <tee.min.tan@intel.com>
Date: Fri, 14 Feb 2020 16:42:05 +0800
Subject: [PATCH 42/44] REVERTME: net: stmmac: WA to skip SerDes error checking
 for PSE SGMII

Introduce serdes_pse_sgmii_wa for 2 GBE PSE SGMII to skip SerDes
error checking due to the EHL A0 bug.

Signed-off-by: Tan, Tee Min <tee.min.tan@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/intel_serdes.c | 12 ++++++------
 drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c   |  2 ++
 include/linux/stmmac.h                             |  1 +
 3 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c b/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c
index 794503521789..d3e82ff9c0b1 100644
--- a/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c
+++ b/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c
@@ -67,7 +67,7 @@ static int intel_serdes_powerup(struct net_device *ndev)
 				  SERDES_PLL_CLK,
 				  SERDES_PLL_CLK);
 
-	if (data) {
+	if (data && !priv->plat->serdes_pse_sgmii_wa) {
 		dev_err(priv->device, "Serdes PLL clk request timeout\n");
 		return data;
 	}
@@ -87,7 +87,7 @@ static int intel_serdes_powerup(struct net_device *ndev)
 				  SERDES_RST,
 				  SERDES_RST);
 
-	if (data) {
+	if (data && !priv->plat->serdes_pse_sgmii_wa) {
 		dev_err(priv->device, "Serdes assert lane reset timeout\n");
 		return data;
 	}
@@ -108,7 +108,7 @@ static int intel_serdes_powerup(struct net_device *ndev)
 				  SERDES_PWR_ST_MASK,
 				  SERDES_PWR_ST_P0 << SERDES_PWR_ST_SHIFT);
 
-	if (data) {
+	if (data && !priv->plat->serdes_pse_sgmii_wa) {
 		dev_err(priv->device, "Serdes power state P0 timeout.\n");
 		return data;
 	}
@@ -143,7 +143,7 @@ static int intel_serdes_powerdown(struct net_device *ndev)
 				  SERDES_PWR_ST_MASK,
 				  SERDES_PWR_ST_P3 << SERDES_PWR_ST_SHIFT);
 
-	if (data) {
+	if (data && !priv->plat->serdes_pse_sgmii_wa) {
 		dev_err(priv->device, "Serdes power state P3 timeout\n");
 		return data;
 	}
@@ -163,7 +163,7 @@ static int intel_serdes_powerdown(struct net_device *ndev)
 				  SERDES_PLL_CLK,
 				  (u32)~SERDES_PLL_CLK);
 
-	if (data) {
+	if (data && !priv->plat->serdes_pse_sgmii_wa) {
 		dev_err(priv->device, "Serdes PLL clk de-assert timeout\n");
 		return data;
 	}
@@ -183,7 +183,7 @@ static int intel_serdes_powerdown(struct net_device *ndev)
 				  SERDES_RST,
 				  (u32)~SERDES_RST);
 
-	if (data) {
+	if (data && !priv->plat->serdes_pse_sgmii_wa) {
 		dev_err(priv->device, "Serdes de-assert lane reset timeout\n");
 		return data;
 	}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 15ee11bc75c2..7e3a7edccc66 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -430,6 +430,7 @@ static int ehl_pse0_sgmii1g_data(struct pci_dev *pdev,
 {
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
 	ehl_sgmii_path_latency_data(plat);
+	plat->serdes_pse_sgmii_wa = 1;
 
 	return ehl_pse0_common_data(pdev, plat);
 }
@@ -479,6 +480,7 @@ static int ehl_pse1_sgmii1g_data(struct pci_dev *pdev,
 {
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
 	ehl_sgmii_path_latency_data(plat);
+	plat->serdes_pse_sgmii_wa = 1;
 
 	return ehl_pse1_common_data(pdev, plat);
 }
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 461eaccc766a..cb5a9aa2321e 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -236,6 +236,7 @@ struct plat_stmmacenet_data {
 	bool has_safety_feat;
 	bool is_hfpga;
 	bool ehl_ao_wa;
+	bool serdes_pse_sgmii_wa;
 	/* TX and RX PHY latency (ns) */
 	u64 phy_tx_latency_2500;
 	u64 phy_tx_latency_1000;
-- 
2.17.1

