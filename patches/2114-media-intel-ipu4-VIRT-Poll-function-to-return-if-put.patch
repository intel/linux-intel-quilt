From cfecbdc0bbaf132c607546d9dc61a5fb8d3c6050 Mon Sep 17 00:00:00 2001
From: Ong Hock Yu <ong.hock.yu@intel.com>
Date: Wed, 22 Aug 2018 21:33:38 +0000
Subject: [PATCH 2114/2313] media: intel-ipu4: [VIRT] Poll function to return
 if put buf list is not empty

Under corner case when all buffers are queued to driver, a poll request
will always timeout at apps side as current implementation require a
new frame data to trigger the return. The change is to return from poll
function whenever the put buf list is not empty.

Change-Id: I8522ee587ca1ebccce857e694f8ae49a0f5c4b82
Signed-off-by: Ong Hock Yu <ong.hock.yu@intel.com>
---
 .../pci/intel/virtio/intel-ipu4-virtio-be-bridge.c |  5 ++--
 .../pci/intel/virtio/intel-ipu4-virtio-be-stream.c | 34 +++++++++++++++++++++-
 2 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
index a43d5e8..b88fe6d 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
@@ -35,8 +35,9 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op0 - virtual device node number
 			 * op1 - Actual device fd. By default set to 0
 			 */
-			pr_debug("POLL: virtual_dev_id:%d actual_fd:%d\n", req->op[0], req->op[1]);
-			req->stat = IPU4_REQ_NEEDS_FOLLOW_UP;
+			pr_debug("%s: process_poll pre", __func__);
+			req->stat = process_poll(domid, req);
+			pr_debug("%s: process_poll post", __func__);
 			break;
 	case IPU4_CMD_DEVICE_OPEN:
 			/*
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
index ba98bc2..9c6bbf6 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
@@ -138,7 +138,39 @@ int process_set_format(int domid, struct ipu4_virtio_req *req)
 
 int process_poll(int domid, struct ipu4_virtio_req *req)
 {
-	return 0;
+	struct stream_node *sn = NULL;
+	struct ici_isys_stream *as;
+	bool found, empty;
+	unsigned long flags = 0;
+
+	pr_debug("%s: %d %d", __func__, hash_initialised, req->op[0]);
+
+	if (!hash_initialised)
+		return -1;
+
+	found = false;
+	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
+		if (sn != NULL) {
+			pr_debug("process_put_buf: node %d %p", req->op[0], sn);
+			found = true;
+			break;
+		}
+	}
+
+	if (!found) {
+		pr_debug("%s: stream not found %d\n", __func__, req->op[0]);
+		return -1;
+	}
+
+	as = dev_to_stream(sn->f->private_data);
+	spin_lock_irqsave(&as->buf_list.lock, flags);
+	empty = list_empty(&as->buf_list.putbuf_list);
+	spin_unlock_irqrestore(&as->buf_list.lock, flags);
+	if (!empty) {
+		req->func_ret = 1;
+		return IPU4_REQ_PROCESSED;
+	} else
+		return IPU4_REQ_NEEDS_FOLLOW_UP;
 }
 
 int process_put_buf(int domid, struct ipu4_virtio_req *req)
-- 
2.7.4

