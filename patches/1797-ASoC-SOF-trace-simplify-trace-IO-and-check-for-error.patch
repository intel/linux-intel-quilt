From 9f0edb77eb337d8c3079a27fbca9a0682edc565c Mon Sep 17 00:00:00 2001
From: Liam Girdwood <liam.r.girdwood@linux.intel.com>
Date: Wed, 18 Jul 2018 20:41:34 +0100
Subject: [PATCH 1797/2313] ASoC: SOF: trace: simplify trace IO and check for
 errors

Simplify the trace IO by removing redundant arithmetic and stop trace
read on any trace FW errors.

Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
---
 sound/soc/sof/sof-priv.h |  1 +
 sound/soc/sof/trace.c    | 83 +++++++++++++++++++++---------------------------
 2 files changed, 37 insertions(+), 47 deletions(-)

diff --git a/sound/soc/sof/sof-priv.h b/sound/soc/sof/sof-priv.h
index 5def46b..7fa4eda 100644
--- a/sound/soc/sof/sof-priv.h
+++ b/sound/soc/sof/sof-priv.h
@@ -349,6 +349,7 @@ struct snd_sof_dev {
 	wait_queue_head_t trace_sleep;
 	u32 host_offset;
 	bool dtrace_is_enabled;
+	bool dtrace_error;
 
 	void *private;			/* core does not touch this */
 };
diff --git a/sound/soc/sof/trace.c b/sound/soc/sof/trace.c
index d3aa6e4..04acd78 100644
--- a/sound/soc/sof/trace.c
+++ b/sound/soc/sof/trace.c
@@ -26,10 +26,9 @@
 #include "sof-priv.h"
 #include "ops.h"
 
-static int sof_wait_trace_avail(struct snd_sof_dev *sdev, size_t *count,
-				loff_t pos, size_t size)
+static size_t sof_wait_trace_avail(struct snd_sof_dev *sdev,
+				   loff_t pos, size_t buffer_size)
 {
-	size_t avail;
 	wait_queue_entry_t wait;
 
 	/*
@@ -37,14 +36,12 @@ static int sof_wait_trace_avail(struct snd_sof_dev *sdev, size_t *count,
 	 * host DMA buffer has been wrapped. We should output the trace data
 	 * at the end of host DMA buffer at first.
 	 */
-	if (sdev->host_offset < pos) {
-		avail = size - pos;
-		goto _host_end;
-	}
+	if (sdev->host_offset < pos)
+		return buffer_size - pos;
 
 	/* If there is available trace data now, it is unnecessary to wait. */
 	if (sdev->host_offset > pos)
-		goto _endcheck;
+		return sdev->host_offset - pos;
 
 	/* wait for available trace data from FW */
 	init_waitqueue_entry(&wait, current);
@@ -53,22 +50,19 @@ static int sof_wait_trace_avail(struct snd_sof_dev *sdev, size_t *count,
 
 	if (signal_pending(current)) {
 		remove_wait_queue(&sdev->trace_sleep, &wait);
-		goto _endcheck;
+		goto out;
 	}
 
 	/* set timeout to max value, no error code */
 	schedule_timeout(MAX_SCHEDULE_TIMEOUT);
 	remove_wait_queue(&sdev->trace_sleep, &wait);
 
-_endcheck:
-	/* calculate the available count */
-	avail = sdev->host_offset - pos;
-
-_host_end:
-	/* return min value between available and request count */
-	*count = avail < *count ? avail : *count;
-
-	return 0;
+out:
+	/* return bytes available for copy */
+	if (sdev->host_offset < pos)
+		return buffer_size - pos;
+	else
+		return sdev->host_offset - pos;
 }
 
 static ssize_t sof_dfsentry_trace_read(struct file *file, char __user *buffer,
@@ -76,49 +70,42 @@ static ssize_t sof_dfsentry_trace_read(struct file *file, char __user *buffer,
 {
 	struct snd_sof_dfsentry_buf *dfse = file->private_data;
 	struct snd_sof_dev *sdev = dfse->sdev;
-	int err;
-	loff_t pos = *ppos;
-	loff_t lpos = pos;
-	size_t ret, size;
+	unsigned long rem;
+	loff_t lpos = *ppos;
+	size_t avail, buffer_size = dfse->size;
 
-	size = dfse->size;
+	/* make sure we know about any failures on the DSP side */
+	sdev->dtrace_error = false;
 
 	/* check pos and count */
-	if (pos < 0)
+	if (lpos < 0)
 		return -EINVAL;
 	if (!count)
 		return 0;
 
-	/*
-	 * If pos exceeds size, it means host DMA buffer has been wrapped. So
-	 * local pos will be truncated from global pos. It is possible to wrap
-	 * host DMA buffer multiply times when keep output long time, so we
-	 * need one loop to process it.
-	 */
-	while (lpos >= size)
-		lpos -= size;
-
-	if (count > size - lpos)
-		count = size - lpos;
+	/* check for buffer wrap and count overflow */
+	lpos = lpos % buffer_size;
+	if (count > buffer_size - lpos)
+		count = buffer_size - lpos;
 
 	/* get available count based on current host offset */
-	err = sof_wait_trace_avail(sdev, &count, lpos, size);
-	if (err < 0) {
-		dev_err(sdev->dev,
-			"error: can't get more trace %d\n", err);
-		return 0;
+	avail = sof_wait_trace_avail(sdev, lpos, buffer_size);
+	if (sdev->dtrace_error) {
+		dev_err(sdev->dev, "error: trace IO error\n");
+		return -EIO;
 	}
 
-	/* copy available trace data to debugfs */
-	ret = copy_to_user(buffer, dfse->buf + lpos, count);
+	/* make sure count is <= avail */
+	count = avail > count ? count : avail;
 
-	if (ret == count)
+	/* copy available trace data to debugfs */
+	rem = copy_to_user(buffer, dfse->buf + lpos, count);
+	if (rem == count)
 		return -EFAULT;
-	count -= ret;
 
-	/* move debugfs reading position */
-	*ppos = pos + count;
+	*ppos += count;
 
+	/* move debugfs reading position */
 	return count;
 }
 
@@ -178,7 +165,7 @@ int snd_sof_init_trace(struct snd_sof_dev *sdev)
 				  DMA_BUF_SIZE_FOR_TRACE, &sdev->dmatb);
 	if (ret < 0) {
 		dev_err(sdev->dev,
-			"error: can't alloc buffer for trace%d\n", ret);
+			"error: can't alloc buffer for trace %d\n", ret);
 		goto page_err;
 	}
 
@@ -258,10 +245,12 @@ int snd_sof_trace_update_pos(struct snd_sof_dev *sdev,
 	return 0;
 }
 
+/* an error has occurred within the DSP that prevents further trace */
 void snd_sof_trace_notify_for_error(struct snd_sof_dev *sdev)
 {
 	if (sdev->dtrace_is_enabled) {
 		dev_err(sdev->dev, "error: waking up any trace sleepers\n");
+		sdev->dtrace_error = true;
 		wake_up(&sdev->trace_sleep);
 	}
 }
-- 
2.7.4

