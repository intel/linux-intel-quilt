From 2882514b9649fe36938300f5f4e408bef1eea188 Mon Sep 17 00:00:00 2001
From: Piotr Maziarz <piotrx.maziarz@intel.com>
Date: Thu, 10 Oct 2019 15:43:31 +0200
Subject: [PATCH 1179/1214] Revert "ASoC: Intel: Skylake: Generic firmware
 recovery on IPC timeout."

This reverts commit 9a30c94df97750427a8b8231db58d0b68637b0ea.

Since patch "ASoC: Intel: Skylake: Recover BXT FW on DSP boot timeout
error" introduces proper way of reloading firmware this commit is
obsolete.

Change-Id: Ie54e902e276929e7088e828747c0e50c542586e2
---
 sound/soc/intel/skylake/skl-debug.c   |  4 +--
 sound/soc/intel/skylake/skl-sst-ipc.c | 55 ++++++++++-------------------------
 sound/soc/intel/skylake/skl-sst-ipc.h |  2 --
 3 files changed, 17 insertions(+), 44 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-debug.c b/sound/soc/intel/skylake/skl-debug.c
index e5acb86..28060ea 100644
--- a/sound/soc/intel/skylake/skl-debug.c
+++ b/sound/soc/intel/skylake/skl-debug.c
@@ -238,11 +238,11 @@ static ssize_t mod_control_write(struct file *file,
 
 	default:
 		if (mbsz)
-			retval = skl_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
+			retval = sst_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
 				mod_set_get->mailbx, mbsz, NULL, NULL);
 
 		else
-			retval = skl_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
+			retval = sst_ipc_tx_message_wait(&ctx->ipc, *ipc_header,
 				NULL, 0, NULL, NULL);
 
 		break;
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index f591d62..f171969b 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -907,31 +907,6 @@ void skl_ipc_free(struct sst_generic_ipc *ipc)
 	sst_ipc_fini(ipc);
 }
 
-int skl_ipc_tx_message_wait(struct sst_generic_ipc *ipc, u64 header,
-		void *tx_data, size_t tx_bytes, void *rx_data, size_t *rx_bytes)
-{
-	struct skl_sst *ctx = container_of(ipc, struct skl_sst, ipc);
-	int ret;
-
-	ret = sst_ipc_tx_message_wait(ipc, header, tx_data, tx_bytes,
-		rx_data, rx_bytes);
-
-	if (ret == -ETIMEDOUT) {
-		ctx->enable_miscbdcge(ipc->dev, false);
-		ctx->clock_power_gating(ipc->dev, false);
-
-		ret = ctx->dsp_ops->init_fw(ipc->dev, ctx);
-
-		ctx->enable_miscbdcge(ipc->dev, true);
-		ctx->clock_power_gating(ipc->dev, true);
-
-		dev_warn(ipc->dev, "Recover from IPC timeout: %d\n", ret);
-	}
-
-	return ret;
-}
-EXPORT_SYMBOL_GPL(skl_ipc_tx_message_wait);
-
 int skl_ipc_create_pipeline(struct sst_generic_ipc *ipc,
 		u16 ppl_mem_size, u8 ppl_type, u8 instance_id, u8 lp_mode)
 {
@@ -949,7 +924,7 @@ int skl_ipc_create_pipeline(struct sst_generic_ipc *ipc,
 	header.extension = IPC_PPL_LP_MODE(lp_mode);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: create pipeline fail, err: %d\n", ret);
 		return ret;
@@ -971,7 +946,7 @@ int skl_ipc_delete_pipeline(struct sst_generic_ipc *ipc, u8 instance_id)
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: delete pipeline failed, err %d\n", ret);
 		return ret;
@@ -995,7 +970,7 @@ int skl_ipc_set_pipeline_state(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_PPL_STATE(state);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: set pipeline state failed, err: %d\n", ret);
 		return ret;
@@ -1018,7 +993,7 @@ skl_ipc_save_pipeline(struct sst_generic_ipc *ipc, u8 instance_id, int dma_id)
 
 	header.extension = IPC_DMA_ID(dma_id);
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: save pipeline failed, err: %d\n", ret);
 		return ret;
@@ -1040,7 +1015,7 @@ int skl_ipc_restore_pipeline(struct sst_generic_ipc *ipc, u8 instance_id)
 	header.primary |= IPC_INSTANCE_ID(instance_id);
 
 	dev_dbg(ipc->dev, "In %s header=%d\n", __func__, header.primary);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: restore  pipeline failed, err: %d\n", ret);
 		return ret;
@@ -1065,7 +1040,7 @@ int skl_ipc_set_dx(struct sst_generic_ipc *ipc, u8 instance_id,
 
 	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
 			 header.primary, header.extension);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header,
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
 				dx, sizeof(*dx), NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: set dx failed, err %d\n", ret);
@@ -1091,7 +1066,7 @@ int skl_ipc_delete_instance(struct sst_generic_ipc *ipc,
 
 	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
 			 header.primary, header.extension);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL,
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL,
 			msg->param_data_size, NULL, NULL);
 
 	if (ret < 0) {
@@ -1129,7 +1104,7 @@ int skl_ipc_init_instance(struct sst_generic_ipc *ipc,
 
 	dev_dbg(ipc->dev, "In %s primary =%x ext=%x\n", __func__,
 			 header.primary, header.extension);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, param_data,
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, param_data,
 			msg->param_data_size, NULL, NULL);
 
 	if (ret < 0) {
@@ -1162,7 +1137,7 @@ int skl_ipc_bind_unbind(struct sst_generic_ipc *ipc,
 
 	dev_dbg(ipc->dev, "In %s hdr=%x ext=%x\n", __func__, header.primary,
 			 header.extension);
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0, NULL, NULL);
 	if (ret < 0) {
 		dev_err(ipc->dev, "ipc: bind/unbind failed\n");
 		return ret;
@@ -1190,7 +1165,7 @@ int skl_ipc_load_modules(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_GLB_TYPE(IPC_GLB_LOAD_MULTIPLE_MODS);
 	header.primary |= IPC_LOAD_MODULE_CNT(module_cnt);
 
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, data,
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, data,
 				(sizeof(u16) * module_cnt), NULL, NULL);
 	if (ret < 0)
 		dev_err(ipc->dev, "ipc: load modules failed :%d\n", ret);
@@ -1211,7 +1186,7 @@ int skl_ipc_unload_modules(struct sst_generic_ipc *ipc, u8 module_cnt,
 	header.primary |= IPC_GLB_TYPE(IPC_GLB_UNLOAD_MULTIPLE_MODS);
 	header.primary |= IPC_LOAD_MODULE_CNT(module_cnt);
 
-	ret = skl_ipc_tx_message_wait(ipc, *ipc_header, data,
+	ret = sst_ipc_tx_message_wait(ipc, *ipc_header, data,
 				(sizeof(u16) * module_cnt), NULL, NULL);
 	if (ret < 0)
 		dev_err(ipc->dev, "ipc: unload modules failed :%d\n", ret);
@@ -1251,7 +1226,7 @@ int skl_ipc_set_large_config(struct sst_generic_ipc *ipc,
 			header.primary, header.extension);
 		dev_dbg(ipc->dev, "transmitting offset: %#x, size: %#x\n",
 			(unsigned)data_offset, (unsigned)tx_size);
-		ret = skl_ipc_tx_message_wait(ipc, *ipc_header,
+		ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
 					  ((char *)param) + data_offset,
 					  tx_size, NULL, NULL);
 		if (ret < 0) {
@@ -1319,7 +1294,7 @@ int skl_ipc_get_large_config(struct sst_generic_ipc *ipc,
 		if (rx_bytes != NULL)
 			*rx_bytes = rx_size;
 
-		ret = skl_ipc_tx_message_wait(ipc, *ipc_header,
+		ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
 			((char *)txparam), tx_bytes,
 			((char *)param) + data_offset, rx_bytes);
 
@@ -1384,8 +1359,8 @@ int skl_sst_ipc_load_library(struct sst_generic_ipc *ipc,
 	header.primary |= IPC_MOD_ID(dma_id);
 
 	if (wait)
-		ret = skl_ipc_tx_message_wait(ipc, *ipc_header, NULL, 0,
-					NULL, NULL);
+		ret = sst_ipc_tx_message_wait(ipc, *ipc_header,
+					NULL, 0, NULL, NULL);
 	else
 		ret = sst_ipc_tx_message_nowait(ipc, *ipc_header, NULL, 0);
 
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index abddf44..4c29802 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -413,8 +413,6 @@ struct skl_module_notify {
 
 irqreturn_t skl_dsp_irq_thread_handler(int irq, void *context);
 
-int skl_ipc_tx_message_wait(struct sst_generic_ipc *ipc, u64 header,
-	void *tx_data, size_t tx_bytes, void *rx_data, size_t *rx_bytes);
 int skl_ipc_create_pipeline(struct sst_generic_ipc *sst_ipc,
 		u16 ppl_mem_size, u8 ppl_type, u8 instance_id, u8 lp_mode);
 
-- 
2.7.4

