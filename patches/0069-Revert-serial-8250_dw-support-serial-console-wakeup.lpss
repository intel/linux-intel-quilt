From fd8b726ef6607fa8990bc3664374ed7df87fb641 Mon Sep 17 00:00:00 2001
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date: Mon, 29 Jul 2019 17:08:22 +0300
Subject: [PATCH 69/82] Revert "serial: 8250_dw: support serial console wakeup"

This reverts commit 210dec91eb8f1b463edee14f2180525bcc623b1c.

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
---
 drivers/tty/serial/8250/8250_dw.c | 53 -------------------------------
 1 file changed, 53 deletions(-)

diff --git a/drivers/tty/serial/8250/8250_dw.c b/drivers/tty/serial/8250/8250_dw.c
index caf04cd25c56..ea835dd6b506 100644
--- a/drivers/tty/serial/8250/8250_dw.c
+++ b/drivers/tty/serial/8250/8250_dw.c
@@ -11,7 +11,6 @@
  */
 #include <linux/delay.h>
 #include <linux/device.h>
-#include <linux/gpio/consumer.h>
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/serial_8250.h>
@@ -19,9 +18,7 @@
 #include <linux/of.h>
 #include <linux/of_irq.h>
 #include <linux/of_platform.h>
-#include <linux/pinctrl/consumer.h>
 #include <linux/platform_device.h>
-#include <linux/pm_wakeirq.h>
 #include <linux/slab.h>
 #include <linux/acpi.h>
 #include <linux/clk.h>
@@ -373,41 +370,6 @@ static void dw8250_quirks(struct uart_port *p, struct dw8250_data *data)
 	}
 }
 
-static int dw8250_init_wakeup(struct device *dev)
-{
-	struct gpio_desc *wake;
-	int irq, err;
-
-	/* Set up RxD or CTS pin as wake source */
-	wake = gpiod_get(dev, "rx", GPIOD_IN);
-	if (IS_ERR(wake))
-		wake = gpiod_get(dev, "cts", GPIOD_IN);
-	if (IS_ERR(wake))
-		return PTR_ERR(wake);
-
-	irq = gpiod_to_irq(wake);
-	if (irq < 0) {
-		err = irq;
-	} else {
-		device_init_wakeup(dev, true);
-		err = dev_pm_set_dedicated_wake_irq(dev, irq);
-		if (err) {
-			dev_warn(dev, "Can't set dedicated wake IRQ: %d\n", err);
-			device_init_wakeup(dev, false);
-		} else {
-			irq_set_irq_type(irq, IRQ_TYPE_EDGE_BOTH);
-		}
-	}
-	gpiod_put(wake);
-	return err;
-}
-
-static void dw8250_clear_wakeup(struct device *dev)
-{
-	dev_pm_clear_wake_irq(dev);
-	device_init_wakeup(dev, false);
-}
-
 static int dw8250_probe(struct platform_device *pdev)
 {
 	struct uart_8250_port uart = {}, *up = &uart;
@@ -560,10 +522,6 @@ static int dw8250_probe(struct platform_device *pdev)
 		goto err_reset;
 	}
 
-	err = dw8250_init_wakeup(dev);
-	if (err)
-		dev_dbg(dev, "Can't init wakeup: %d\n", err);
-
 	platform_set_drvdata(pdev, data);
 
 	pm_runtime_use_autosuspend(dev);
@@ -593,8 +551,6 @@ static int dw8250_remove(struct platform_device *pdev)
 	struct dw8250_data *data = platform_get_drvdata(pdev);
 	struct device *dev = &pdev->dev;
 
-	dw8250_clear_wakeup(dev);
-
 	pm_runtime_get_sync(dev);
 
 	serial8250_unregister_port(data->data.line);
@@ -638,8 +594,6 @@ static int dw8250_runtime_suspend(struct device *dev)
 {
 	struct dw8250_data *data = dev_get_drvdata(dev);
 
-	pinctrl_pm_select_sleep_state(dev);
-
 	if (!IS_ERR(data->clk))
 		clk_disable_unprepare(data->clk);
 
@@ -652,7 +606,6 @@ static int dw8250_runtime_suspend(struct device *dev)
 static int dw8250_runtime_resume(struct device *dev)
 {
 	struct dw8250_data *data = dev_get_drvdata(dev);
-	struct uart_8250_port *up = serial8250_get_port(data->line);
 
 	if (!IS_ERR(data->pclk))
 		clk_prepare_enable(data->pclk);
@@ -660,12 +613,6 @@ static int dw8250_runtime_resume(struct device *dev)
 	if (!IS_ERR(data->clk))
 		clk_prepare_enable(data->clk);
 
-	pinctrl_pm_select_default_state(dev);
-
-	/* Restore context */
-	serial8250_do_restore_context(&up->port);
-
-	/* TODO: Check if it needs more than it's done in serial8250_console_restore() */
 	return 0;
 }
 #endif
-- 
2.17.1

