From 8b9ae7862f2074ec825c35dcc8a6a06357df8235 Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Tue, 6 Aug 2019 16:52:54 +0800
Subject: [PATCH 44/89] net: stmmac: support recalculating of CBS idle slope
 under EST

When EST enabled, credit is accumulated only when then gate is open.
Hence, the effective data rate of the idleSlope must be increased to
reflect the duty cycle of the transmission gate associated with the
queue. The new idleSlope is calculated using the equation below:

idleSlope = (operIdleSlope(N) * OperCycle/GateOpenTime)

operIdleSlope = calculated idle slope before EST enabled
N             = queue number
OperCycle     = Cycle time for queue N
GateOpenTime  = Total gate open time for queue N

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |  1 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |  3 +
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  |  4 +-
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  9 +-
 .../net/ethernet/stmicro/stmmac/stmmac_tc.c   | 43 ++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 95 ++++++++++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  3 +
 7 files changed, 153 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index 8ad770dfb237..c62f927724ff 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1118,6 +1118,7 @@ const struct stmmac_ops dwmac510_ops = {
 	.get_est_gcc = tsn_est_gcc_get,
 	.est_irq_status = tsn_est_irq_status,
 	.dump_tsn_mmc = tsn_mmc_dump,
+	.cbs_recal_idleslope = tsn_cbs_recal_idleslope,
 };
 
 static u32 dwmac4_get_num_vlan(void __iomem *ioaddr)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 98ab4013d0d9..af55842bef08 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -161,6 +161,9 @@
 #define EST_PTOV_MAX			0xff	/* Max PTP time offset */
 #define EST_CTOV_MAX			0xfff	/* Max Current time offset */
 
+/* CBS Global defines */
+#define CBS_IDLESLOPE_MAX		0x1fffff
+
 /* MAC Core Version */
 #define TSN_VER_MASK		0xFF
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 41e67df455c9..b2fecb07be6c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -167,11 +167,13 @@ static u32 dwmac5_est_get_txqcnt(void __iomem *ioaddr)
 
 static void dwmac5_est_get_max(u32 *ptov_max,
 			       u32 *ctov_max,
-			       u32 *cycle_max)
+			       u32 *cycle_max,
+			       u32 *idleslope_max)
 {
 	*ptov_max = EST_PTOV_MAX;
 	*ctov_max = EST_CTOV_MAX;
 	*cycle_max = EST_CTR_HI_MAX;
+	*idleslope_max = CBS_IDLESLOPE_MAX;
 }
 
 static int dwmac5_est_write_gcl_config(void __iomem *ioaddr, u32 data, u32 addr,
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 58cbb82cc1cb..c4822571be53 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -393,6 +393,10 @@ struct stmmac_ops {
 			       struct net_device *dev);
 	int (*dump_tsn_mmc)(struct mac_device_info *hw, int index,
 			    unsigned long *count, const char **desc);
+	int (*cbs_recal_idleslope)(struct mac_device_info *hw,
+				   struct net_device *dev,
+				   u32 queue,
+				   u32 *idle_slope);
 };
 
 #define stmmac_core_init(__priv, __args...) \
@@ -505,6 +509,8 @@ struct stmmac_ops {
 	stmmac_do_void_callback(__priv, mac, est_irq_status, __args)
 #define stmmac_dump_tsn_mmc(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, dump_tsn_mmc, __args)
+#define stmmac_cbs_recal_idleslope(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, cbs_recal_idleslope, __args)
 
 /* Helpers for serdes */
 struct stmmac_serdes_ops {
@@ -670,7 +676,8 @@ struct tsnif_ops {
 	u32 (*est_get_gcl_depth)(void __iomem *ioaddr);
 	u32 (*est_get_ti_width)(void __iomem *ioaddr);
 	u32 (*est_get_txqcnt)(void __iomem *ioaddr);
-	void (*est_get_max)(u32 *ptov_max, u32 *ctov_max, u32 *ct_max);
+	void (*est_get_max)(u32 *ptov_max, u32 *ctov_max, u32 *ct_max,
+			    u32 *idleslope_max);
 	int (*est_write_gcl_config)(void __iomem *ioaddr, u32 data, u32 addr,
 				    bool is_gcrr,
 				    u32 dbgb, bool is_dbgm);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index 781a446bfbe9..56693fae731c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -444,8 +444,47 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 	egcrr.base_nsec = base_ns;
 	egcrr.ter_nsec = extension_ns;
 
-	return stmmac_set_est_gcrr_times(priv, priv->hw, priv->dev,
-					 &egcrr, 0, 0);
+	ret = stmmac_set_est_gcrr_times(priv, priv->hw, priv->dev,
+					&egcrr, 0, 0);
+	if (ret) {
+		dev_err(priv->device,
+			"EST: fail to program GCRR times into HW\n");
+		return ret;
+	}
+
+	if (priv->plat->tx_queues_to_use > 1) {
+		u32 queue;
+
+		for (queue = 1; queue < priv->plat->tx_queues_to_use; queue++) {
+			u32 new_idle_slope;
+
+			struct stmmac_txq_cfg *txqcfg =
+				&priv->plat->tx_queues_cfg[queue];
+
+			if (txqcfg->mode_to_use == MTL_QUEUE_DCB)
+				continue;
+
+			new_idle_slope = txqcfg->idle_slope;
+			ret = stmmac_cbs_recal_idleslope(priv, priv->hw,
+							 priv->dev, queue,
+							 &new_idle_slope);
+
+			if (ret) {
+				dev_err(priv->device,
+					"Recal idleslope failed.\n");
+				break;
+			}
+
+			stmmac_config_cbs(priv, priv->hw,
+					  txqcfg->send_slope,
+					  new_idle_slope,
+					  txqcfg->high_credit,
+					  txqcfg->low_credit,
+					  queue);
+		}
+	}
+
+	return ret;
 }
 
 const struct stmmac_tc_ops dwmac510_tc_ops = {
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index 3288f1f54179..a76a5f68353f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -24,6 +24,48 @@ static u32 est_get_gcl_total_intervals_nsec(struct est_gc_config *gcc,
 	return nsec;
 }
 
+static u64 est_get_all_open_time(struct est_gc_config *est_gcc,
+				 u32 bank,
+				 u64 cycle_ns,
+				 u32 queue)
+{
+	u32 gate = 0x1 << queue;
+	u64 tti_ns = 0;
+	u64 total = 0;
+	struct est_gc_entry *gcl;
+	u32 gcl_len;
+	int row;
+
+	gcl_len = est_gcc->gcb[bank].gcrr.llr;
+	gcl = est_gcc->gcb[bank].gcl;
+
+	/* GCL which exceeds the cycle time will be truncated.
+	 * So, time interval that exceeds the cycle time will not be
+	 * included.
+	 */
+	for (row = 0; row < gcl_len; row++) {
+		tti_ns += gcl->ti_nsec;
+
+		if (gcl->gates & gate) {
+			if (tti_ns <= cycle_ns)
+				total += gcl->ti_nsec;
+			else
+				total += gcl->ti_nsec -
+					 (tti_ns - cycle_ns);
+		}
+
+		gcl++;
+	}
+
+	/* The gates wihtout any setting of open/close within
+	 * the cycle time are considered as open.
+	 */
+	if (tti_ns < cycle_ns)
+		total += cycle_ns - tti_ns;
+
+	return total;
+}
+
 int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 {
 	struct tsnif_info *info = &hw->tsn_info;
@@ -95,7 +137,8 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 	tils_max = (tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_EST) ? 3 : 0);
 	tils_max = (1 << tils_max) - 1;
 	cap->tils_max = tils_max;
-	tsnif_est_get_max(hw, &cap->ptov_max, &cap->ctov_max, &cap->cycle_max);
+	tsnif_est_get_max(hw, &cap->ptov_max, &cap->ctov_max,
+			  &cap->cycle_max, &cap->idleslope_max);
 	cap->est_support = 1;
 
 	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tils_max=%u, tqcnt=%u\n",
@@ -716,3 +759,53 @@ int tsn_mmc_dump(struct mac_device_info *hw,
 		*desc = (mmc_desc + index)->desc;
 	return 0;
 }
+
+int tsn_cbs_recal_idleslope(struct mac_device_info *hw, struct net_device *dev,
+			    u32 queue, u32 *idle_slope)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+	u64 scaling = 0;
+	struct est_gc_config *est_gcc;
+	struct tsn_hw_cap *cap;
+	u64 new_idle_slope;
+	u64 cycle_time_ns;
+	u32 open_time;
+	u32 hw_bank;
+
+	cap = &info->cap;
+	est_gcc = &info->est_gcc;
+	hw_bank = tsnif_est_get_bank(hw, ioaddr, 1);
+
+	cycle_time_ns = (est_gcc->gcb[hw_bank].gcrr.cycle_sec *
+			 NSEC_PER_SEC) +
+			 est_gcc->gcb[hw_bank].gcrr.cycle_nsec;
+
+	if (!cycle_time_ns) {
+		netdev_warn(dev, "EST: Cycle time is 0.\n");
+		netdev_warn(dev, "CBS idle slope will not be reconfigured.\n");
+
+		return -EINVAL;
+	}
+
+	open_time = est_get_all_open_time(est_gcc, hw_bank,
+					  cycle_time_ns, queue);
+
+	if (!open_time) {
+		netdev_warn(dev, "EST: Total gate open time for queue %d is 0\n",
+			    queue);
+
+		return -EINVAL;
+	}
+
+	scaling = cycle_time_ns;
+	do_div(scaling, open_time);
+
+	new_idle_slope = *idle_slope * scaling;
+	if (new_idle_slope > cap->idleslope_max)
+		new_idle_slope = cap->idleslope_max;
+
+	*idle_slope = new_idle_slope;
+
+	return 0;
+}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index b855b33526e3..6571fa92d4f8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -51,6 +51,7 @@ struct tsn_hw_cap {
 	u32 tils_max;		/* Max time interval left shift */
 	u32 ptov_max;		/* Max PTP Offset */
 	u32 ctov_max;		/* Max Current Time Offset */
+	u32 idleslope_max;	/* Max idle slope */
 };
 
 /* EST Gate Control Entry */
@@ -135,5 +136,7 @@ int tsn_est_gcc_get(struct mac_device_info *hw, struct net_device *dev,
 void tsn_est_irq_status(struct mac_device_info *hw, struct net_device *dev);
 int tsn_mmc_dump(struct mac_device_info *hw,
 		 int index, unsigned long *count, const char **desc);
+int tsn_cbs_recal_idleslope(struct mac_device_info *hw, struct net_device *dev,
+			    u32 queue, u32 *idle_slope);
 
 #endif /* __STMMAC_TSN_H__ */
-- 
2.22.0.545.g9c9b961d7e

