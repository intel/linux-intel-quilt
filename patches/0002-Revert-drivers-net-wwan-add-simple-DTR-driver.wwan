From 3cf96b3db01d9cf7e8938b369a319decb20c935b Mon Sep 17 00:00:00 2001
From: "Qiao, Wei" <wei.qiao@intel.com>
Date: Mon, 6 Jan 2025 16:54:03 +0800
Subject: [PATCH 2/9] Revert "drivers: net: wwan: add simple DTR driver"

This reverts commit 9ef566090b39005277f7f84e0968fd30f21f3665.
---
 drivers/bus/mhi/host/main.c        |  11 ---
 drivers/bus/mhi/host/pci_generic.c |   4 --
 drivers/net/wwan/Kconfig           |  11 ---
 drivers/net/wwan/Makefile          |   1 -
 drivers/net/wwan/mhi_wwan_ctrl.c   |  52 +--------------
 drivers/net/wwan/mhi_wwan_dtr.c    | 103 -----------------------------
 include/linux/mhi.h                |   2 -
 7 files changed, 3 insertions(+), 181 deletions(-)
 delete mode 100644 drivers/net/wwan/mhi_wwan_dtr.c

diff --git a/drivers/bus/mhi/host/main.c b/drivers/bus/mhi/host/main.c
index d449e4ed54de5..4de75674f1935 100644
--- a/drivers/bus/mhi/host/main.c
+++ b/drivers/bus/mhi/host/main.c
@@ -326,11 +326,6 @@ int mhi_destroy_device(struct device *dev, void *data)
 	dev_dbg(&mhi_cntrl->mhi_dev->dev, "destroy device for chan:%s\n",
 		 mhi_dev->name);
 
-	if (!strcmp(mhi_dev->name, "IP_CTRL")) {
-		dev_dbg(dev, "destroying IP_CTRL\n");
-		mhi_cntrl->mhi_dev_ip_ctrl = NULL;
-	}
-
 	/* Notify the client and remove the device from MHI bus */
 	device_del(dev);
 	put_device(dev);
@@ -431,12 +426,6 @@ void mhi_create_devices(struct mhi_controller *mhi_cntrl)
 		ret = device_add(&mhi_dev->dev);
 		if (ret)
 			put_device(&mhi_dev->dev);
-		else {
-			if (!strcmp(mhi_dev->name, "IP_CTRL")) {
-				dev_dbg(dev, "IP_CTRL supported\n");
-				mhi_cntrl->mhi_dev_ip_ctrl = mhi_dev;
-			}
-		}
 	}
 }
 
diff --git a/drivers/bus/mhi/host/pci_generic.c b/drivers/bus/mhi/host/pci_generic.c
index 0f3be0f73c5f1..e74dddb52897e 100644
--- a/drivers/bus/mhi/host/pci_generic.c
+++ b/drivers/bus/mhi/host/pci_generic.c
@@ -686,8 +686,6 @@ static const struct mhi_channel_config mhi_telit_fn980_hw_v2_channels[] = {
 	MHI_CHANNEL_CONFIG_AMSS_SBL_DL(5, "DIAG", 64, 1),
 	MHI_CHANNEL_CONFIG_UL(14, "QMI", 32, 0),
 	MHI_CHANNEL_CONFIG_DL(15, "QMI", 32, 0),
-	MHI_CHANNEL_CONFIG_UL(18, "IP_CTRL", 8, 1),
-	MHI_CHANNEL_CONFIG_DL_AUTOQUEUE(19, "IP_CTRL", 8, 1),
 	MHI_CHANNEL_CONFIG_UL(20, "IPCR", 16, 0),
 	MHI_CHANNEL_CONFIG_DL_AUTOQUEUE(21, "IPCR", 16, 0),
 	MHI_CHANNEL_CONFIG_UL(32, "DUN", 8, 1),
@@ -734,8 +732,6 @@ static const struct mhi_channel_config mhi_telit_fn990_channels[] = {
 	MHI_CHANNEL_CONFIG_AMSS_SBL_DL(5, "DIAG", 64, 1),
 	MHI_CHANNEL_CONFIG_UL(12, "MBIM", 32, 0),
 	MHI_CHANNEL_CONFIG_DL(13, "MBIM", 32, 0),
-	MHI_CHANNEL_CONFIG_UL(18, "IP_CTRL", 8, 1),
-	MHI_CHANNEL_CONFIG_DL_AUTOQUEUE(19, "IP_CTRL", 8, 1),
 	MHI_CHANNEL_CONFIG_UL(32, "DUN", 32, 0),
 	MHI_CHANNEL_CONFIG_DL(33, "DUN", 32, 0),
 	MHI_CHANNEL_CONFIG_UL(92, "DUN2", 32, 1),
diff --git a/drivers/net/wwan/Kconfig b/drivers/net/wwan/Kconfig
index 66794849b5324..410b0245114e8 100644
--- a/drivers/net/wwan/Kconfig
+++ b/drivers/net/wwan/Kconfig
@@ -39,7 +39,6 @@ config WWAN_HWSIM
 config MHI_WWAN_CTRL
 	tristate "MHI WWAN control driver for QCOM-based PCIe modems"
 	depends on MHI_BUS
-	select MHI_WWAN_DTR
 	help
 	  MHI WWAN CTRL allows QCOM-based PCIe modems to expose different modem
 	  control protocols/ports to userspace, including AT, MBIM, QMI, DIAG
@@ -50,16 +49,6 @@ config MHI_WWAN_CTRL
 	  To compile this driver as a module, choose M here: the module will be
 	  called mhi_wwan_ctrl.
 
-config MHI_WWAN_DTR
-	tristate "MHI WWAN DTR driver for QCOM-based PCIe modems"
-	depends on MHI_BUS
-	help
-	  MHI WWAN DTR allows to set DTR and RTS signals on QCOM-based PCIe
-	  DUN ports.
-
-	  To compile this driver as a module, choose M here: the module will be
-	  called mhi_wwan_dtr.
-
 config MHI_WWAN_MBIM
         tristate "MHI WWAN MBIM network driver for QCOM-based PCIe modems"
         depends on MHI_BUS
diff --git a/drivers/net/wwan/Makefile b/drivers/net/wwan/Makefile
index c37396680f330..3960c0ae2445c 100644
--- a/drivers/net/wwan/Makefile
+++ b/drivers/net/wwan/Makefile
@@ -8,7 +8,6 @@ wwan-objs += wwan_core.o
 
 obj-$(CONFIG_WWAN_HWSIM) += wwan_hwsim.o
 
-obj-$(CONFIG_MHI_WWAN_DTR) += mhi_wwan_dtr.o
 obj-$(CONFIG_MHI_WWAN_CTRL) += mhi_wwan_ctrl.o
 obj-$(CONFIG_MHI_WWAN_MBIM) += mhi_wwan_mbim.o
 obj-$(CONFIG_QCOM_BAM_DMUX) += qcom_bam_dmux.o
diff --git a/drivers/net/wwan/mhi_wwan_ctrl.c b/drivers/net/wwan/mhi_wwan_ctrl.c
index 2b2fc291b80b8..9dd70f9cb6e36 100644
--- a/drivers/net/wwan/mhi_wwan_ctrl.c
+++ b/drivers/net/wwan/mhi_wwan_ctrl.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0-only
-/* Copyright (c) 2023, Linaro Ltd <loic.poulain@linaro.org> */
+/* Copyright (c) 2021, Linaro Ltd <loic.poulain@linaro.org> */
 #include <linux/kernel.h>
 #include <linux/mhi.h>
 #include <linux/mod_devicetable.h>
@@ -104,44 +104,6 @@ static void mhi_wwan_ctrl_refill_work(struct work_struct *work)
 	}
 }
 
-static int mhi_wwan_dtr_set(struct wwan_port *port, int dtr, int rts)
-{
-	struct mhi_wwan_dev *mhiwwan = wwan_port_get_drvdata(port);
-	int ret;
-
-	if (mhiwwan->mhi_dev->mhi_cntrl->mhi_dev_ip_ctrl) {
-		struct __packed dtr_ctrl_msg {
-			u32 preamble;
-			u32 msg_id;
-			u32 dest_id;
-			u32 size;
-			u32 msg;
-		};
-
-		struct dtr_ctrl_msg dtr_msg = {0};
-		struct sk_buff *skb;
-
-		dtr_msg.preamble = 0x4C525443;
-		dtr_msg.msg_id = 0x10;
-		dtr_msg.dest_id = mhiwwan->mhi_dev->ul_chan_id;
-		dtr_msg.size = sizeof(u32);
-		if (dtr)
-			dtr_msg.msg |= BIT(0);
-		if (rts)
-			dtr_msg.msg |= BIT(1);
-		skb = alloc_skb(sizeof(dtr_msg), GFP_KERNEL);
-		skb_put_data(skb, &dtr_msg, sizeof(dtr_msg));
-		dev_dbg(&mhiwwan->mhi_dev->mhi_cntrl->mhi_dev_ip_ctrl->dev, "Queuing DTR skb %u...\n", skb->len);
-		ret = mhi_queue_skb(mhiwwan->mhi_dev->mhi_cntrl->mhi_dev_ip_ctrl, DMA_TO_DEVICE, skb, skb->len, MHI_EOT);
-		if (ret) {
-			dev_dbg(&mhiwwan->mhi_dev->mhi_cntrl->mhi_dev_ip_ctrl->dev, "Unable to send UART signals\n");
-				kfree_skb(skb);
-		}
-	}
-
-	return 0;
-}
-
 static int mhi_wwan_ctrl_start(struct wwan_port *port)
 {
 	struct mhi_wwan_dev *mhiwwan = wwan_port_get_drvdata(port);
@@ -161,22 +123,14 @@ static int mhi_wwan_ctrl_start(struct wwan_port *port)
 		mhi_wwan_ctrl_refill_work(&mhiwwan->rx_refill);
 	}
 
-	if (wwan_port_get_type(port) == WWAN_PORT_AT) {
-		dev_dbg(&mhiwwan->mhi_dev->dev, "Setting DTR and RTS for port\n");
-		mhi_wwan_dtr_set(port, 1, 1);
-	}
-
 	return 0;
 }
 
 static void mhi_wwan_ctrl_stop(struct wwan_port *port)
 {
 	struct mhi_wwan_dev *mhiwwan = wwan_port_get_drvdata(port);
-
-	if (wwan_port_get_type(port) == WWAN_PORT_AT) {
-		dev_dbg(&mhiwwan->mhi_dev->dev, "Unsetting DTR and RTS for port\n");
-		mhi_wwan_dtr_set(port, 0, 0);
-	}
+	struct mhi_device *mhi_dev = mhiwwan->mhi_dev;
+	struct mhi_controller *cntrl = mhi_dev->mhi_cntrl;
 
 	spin_lock_bh(&mhiwwan->rx_lock);
 	clear_bit(MHI_WWAN_RX_REFILL, &mhiwwan->flags);
diff --git a/drivers/net/wwan/mhi_wwan_dtr.c b/drivers/net/wwan/mhi_wwan_dtr.c
deleted file mode 100644
index f0c7f2f7af3d9..0000000000000
--- a/drivers/net/wwan/mhi_wwan_dtr.c
+++ /dev/null
@@ -1,103 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/* Copyright (c) 2023, Daniele Palmas <dnlplm@gmail.com> */
-#include <linux/kernel.h>
-#include <linux/mhi.h>
-#include <linux/mod_devicetable.h>
-#include <linux/module.h>
-#include <linux/wwan.h>
-
-struct mhi_wwan_dev {
-	struct mhi_device *mhi_dev;
-};
-
-static int mhi_wwan_dtr_start(struct wwan_port *port)
-{
-	return 0;
-}
-
-static void mhi_wwan_dtr_stop(struct wwan_port *port)
-{
-}
-
-static int mhi_wwan_dtr_tx(struct wwan_port *port, struct sk_buff *skb)
-{
-	struct mhi_wwan_dev *mhiwwan = wwan_port_get_drvdata(port);
-
-	/* Queue the packet for MHI transfer */
-	return mhi_queue_skb(mhiwwan->mhi_dev, DMA_TO_DEVICE, skb, skb->len, MHI_EOT);
-}
-
-static const struct wwan_port_ops wwan_pops = {
-	.start = mhi_wwan_dtr_start,
-	.stop = mhi_wwan_dtr_stop,
-	.tx = mhi_wwan_dtr_tx,
-};
-
-static void mhi_dtr_ul_xfer_cb(struct mhi_device *mhi_dev,
-			   struct mhi_result *mhi_result)
-{
-	struct sk_buff *skb = mhi_result->buf_addr;
-
-	dev_dbg(&mhi_dev->dev, "%s: status: %d xfer_len: %zu\n", __func__,
-		mhi_result->transaction_status, mhi_result->bytes_xferd);
-
-	/* MHI core has done with the buffer, release it */
-	consume_skb(skb);
-}
-
-static void mhi_dtr_dl_xfer_cb(struct mhi_device *mhi_dev,
-			   struct mhi_result *mhi_result)
-{
-	/* Currently we don't use the information provided by the modem */
-	dev_dbg(&mhi_dev->dev, "%s: status: %d receive_len: %zu\n", __func__,
-		mhi_result->transaction_status, mhi_result->bytes_xferd);
-}
-
-static int mhi_wwan_dtr_probe(struct mhi_device *mhi_dev,
-			       const struct mhi_device_id *id)
-{
-	struct mhi_wwan_dev *mhiwwan;
-
-	mhiwwan = kzalloc(sizeof(*mhiwwan), GFP_KERNEL);
-	if (!mhiwwan)
-		return -ENOMEM;
-
-	mhiwwan->mhi_dev = mhi_dev;
-
-	dev_set_drvdata(&mhi_dev->dev, mhiwwan);
-
-	/* Start mhi device's channel(s) */
-	return mhi_prepare_for_transfer_autoqueue(mhiwwan->mhi_dev);
-};
-
-static void mhi_wwan_dtr_remove(struct mhi_device *mhi_dev)
-{
-	struct mhi_wwan_dev *mhiwwan = dev_get_drvdata(&mhi_dev->dev);
-
-	mhi_unprepare_from_transfer(mhiwwan->mhi_dev);
-
-	kfree(mhiwwan);
-}
-
-static const struct mhi_device_id mhi_wwan_dtr_match_table[] = {
-	{ .chan = "IP_CTRL", .driver_data = 0 },
-	{}
-};
-MODULE_DEVICE_TABLE(mhi, mhi_wwan_dtr_match_table);
-
-static struct mhi_driver mhi_wwan_dtr_simple_driver = {
-	.id_table = mhi_wwan_dtr_match_table,
-	.remove = mhi_wwan_dtr_remove,
-	.probe = mhi_wwan_dtr_probe,
-	.ul_xfer_cb = mhi_dtr_ul_xfer_cb,
-	.dl_xfer_cb = mhi_dtr_dl_xfer_cb,
-	.driver = {
-		.name = "mhi_wwan_dtr_simple",
-	},
-};
-
-module_mhi_driver(mhi_wwan_dtr_simple_driver);
-
-MODULE_LICENSE("GPL v2");
-MODULE_DESCRIPTION("MHI WWAN DTR Simple Driver");
-MODULE_AUTHOR("Daniele Palmas <dnlplm@gmail.com>");
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index 1aadce2d3448a..63980f0546af1 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -385,8 +385,6 @@ struct mhi_controller {
 	struct device *cntrl_dev;
 	struct mhi_device *mhi_dev;
 	struct dentry *debugfs_dentry;
-	/* Reference to ip_ctrl device for managing DUN signals */
-	struct mhi_device *mhi_dev_ip_ctrl;
 	void __iomem *regs;
 	void __iomem *bhi;
 	void __iomem *bhie;
-- 
2.25.1

