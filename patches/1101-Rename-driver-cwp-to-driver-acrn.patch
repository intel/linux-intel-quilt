From 9f1f46d0b27231bde5fe6e0d78b3223f39dbf903 Mon Sep 17 00:00:00 2001
From: "Li, Fei1" <fei1.li@intel.com>
Date: Sat, 24 Feb 2018 19:40:56 +0800
Subject: [PATCH 1101/2313] Rename driver/cwp to driver/acrn

Change-Id: Ia8e4c4abd489a2eb70bdeb9b60cfda7da58bb6cf
Signed-off-by: Li, Fei1 <fei1.li@intel.com>
---
 drivers/Kconfig                           |   2 +-
 drivers/Makefile                          |   2 +-
 drivers/acrn/Kconfig                      |  20 ++++
 drivers/acrn/Makefile                     |   3 +
 drivers/{cwp/cwp_hvlog.c => acrn/hvlog.c} | 160 +++++++++++++++---------------
 drivers/{cwp => acrn}/sbuf.c              |   0
 drivers/{cwp => acrn}/sbuf.h              |   6 +-
 drivers/{cwp/cwp_trace.c => acrn/trace.c} |  87 ++++++++--------
 drivers/cwp/Kconfig                       |  20 ----
 drivers/cwp/Makefile                      |   3 -
 10 files changed, 149 insertions(+), 154 deletions(-)
 create mode 100644 drivers/acrn/Kconfig
 create mode 100644 drivers/acrn/Makefile
 rename drivers/{cwp/cwp_hvlog.c => acrn/hvlog.c} (69%)
 rename drivers/{cwp => acrn}/sbuf.c (100%)
 rename drivers/{cwp => acrn}/sbuf.h (98%)
 rename drivers/{cwp/cwp_trace.c => acrn/trace.c} (78%)
 delete mode 100644 drivers/cwp/Kconfig
 delete mode 100644 drivers/cwp/Makefile

diff --git a/drivers/Kconfig b/drivers/Kconfig
index 430f6b0..cb03e48 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -217,7 +217,7 @@ source "drivers/opp/Kconfig"
 
 source "drivers/vbs/Kconfig"
 
-source "drivers/cwp/Kconfig"
+source "drivers/acrn/Kconfig"
 
 source "drivers/vhm/Kconfig"
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 5856632..0076bdd 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -188,4 +188,4 @@ obj-$(CONFIG_TEE)		+= tee/
 obj-$(CONFIG_MULTIPLEXER)	+= mux/
 obj-$(CONFIG_SDW)		+= sdw/
 obj-$(CONFIG_CWP_VHM) 		+= vhm/
-obj-$(CONFIG_CWP)		+= cwp/
+obj-$(CONFIG_ACRN)		+= acrn/
diff --git a/drivers/acrn/Kconfig b/drivers/acrn/Kconfig
new file mode 100644
index 0000000..9056a4f
--- /dev/null
+++ b/drivers/acrn/Kconfig
@@ -0,0 +1,20 @@
+config ACRN_SHARED_BUFFER
+	bool "Intel ACRN SHARED BUFFER"
+	---help---
+	  Ring buffer shared between ACRN Hypervisor and its SOS.
+	  Help ACRN performance profiling.
+
+config ACRN_TRACE
+	tristate "Intel ACRN Hypervisor Trace support"
+	select ACRN_SHARED_BUFFER
+	---help---
+		This is the Trace driver for the Intel ACRN hypervisor.
+		You can say y to build it into the kernel, or m to build
+		it as a module.
+
+config ACRN_HVLOG
+	bool "Intel ACRN Hypervisor Logmsg support"
+	select ACRN_SHARED_BUFFER
+	---help---
+		This is the Trace driver for the Intel ACRN hypervisor log.
+		You can say y to build it into the kernel.
diff --git a/drivers/acrn/Makefile b/drivers/acrn/Makefile
new file mode 100644
index 0000000..0a15771
--- /dev/null
+++ b/drivers/acrn/Makefile
@@ -0,0 +1,3 @@
+obj-$(CONFIG_ACRN_SHARED_BUFFER) += sbuf.o
+obj-$(CONFIG_ACRN_TRACE) += trace.o
+obj-$(CONFIG_ACRN_HVLOG) += hvlog.o
diff --git a/drivers/cwp/cwp_hvlog.c b/drivers/acrn/hvlog.c
similarity index 69%
rename from drivers/cwp/cwp_hvlog.c
rename to drivers/acrn/hvlog.c
index c9481a9..ed1ab79 100644
--- a/drivers/cwp/cwp_hvlog.c
+++ b/drivers/acrn/hvlog.c
@@ -1,5 +1,5 @@
 /*
- * CWP Hypervisor logmsg
+ * ACRN Hypervisor logmsg
  *
  * This file is provided under a dual BSD/GPLv2 license.Â  When using or
  * redistributing this file, you may do so under either license.
@@ -52,7 +52,7 @@
  * Li Fei <fei1.li@intel.com>
  *
  */
-#define pr_fmt(fmt) "CWP HVLog: " fmt
+#define pr_fmt(fmt) "ACRN HVLog: " fmt
 
 #include <linux/memblock.h>
 #include <linux/kernel.h>
@@ -74,12 +74,12 @@
 	for ((idx) = 0; (idx) < (hvlog_type); (idx)++)
 
 enum sbuf_hvlog_index {
-	CWP_CURRNET_HVLOG = 0,
-	CWP_LAST_HVLOG,
-	CWP_HVLOG_TYPE
+	ACRN_CURRNET_HVLOG = 0,
+	ACRN_LAST_HVLOG,
+	ACRN_HVLOG_TYPE
 };
 
-struct cwp_hvlog {
+struct acrn_hvlog {
 	struct miscdevice miscdev;
 	shared_buf_t *sbuf;
 	atomic_t open_cnt;
@@ -128,68 +128,68 @@ static inline shared_buf_t *hvlog_mark_unread(shared_buf_t *sbuf)
 	return sbuf;
 }
 
-static int cwp_hvlog_open(struct inode *inode, struct file *filp)
+static int hvlog_open(struct inode *inode, struct file *filp)
 {
-	struct cwp_hvlog *cwp_hvlog;
+	struct acrn_hvlog *acrn_hvlog;
 
-	cwp_hvlog = container_of(filp->private_data,
-				struct cwp_hvlog, miscdev);
-	pr_debug("%s, %s\n", __func__, cwp_hvlog->miscdev.name);
+	acrn_hvlog = container_of(filp->private_data,
+				struct acrn_hvlog, miscdev);
+	pr_debug("%s, %s\n", __func__, acrn_hvlog->miscdev.name);
 
-	if (cwp_hvlog->pcpu_num >= PCPU_NRS) {
+	if (acrn_hvlog->pcpu_num >= PCPU_NRS) {
 		pr_err("%s, invalid pcpu_num: %d\n",
-				__func__, cwp_hvlog->pcpu_num);
+				__func__, acrn_hvlog->pcpu_num);
 		return -EIO;
 	}
 
 	/* More than one reader at the same time could get data messed up */
-	if (atomic_cmpxchg(&cwp_hvlog->open_cnt, 0, 1) != 0)
+	if (atomic_cmpxchg(&acrn_hvlog->open_cnt, 0, 1) != 0)
 		return -EBUSY;
 
-	filp->private_data = cwp_hvlog;
+	filp->private_data = acrn_hvlog;
 
 	return 0;
 }
 
-static int cwp_hvlog_release(struct inode *inode, struct file *filp)
+static int hvlog_release(struct inode *inode, struct file *filp)
 {
-	struct cwp_hvlog *cwp_hvlog;
+	struct acrn_hvlog *acrn_hvlog;
 
-	cwp_hvlog = filp->private_data;
+	acrn_hvlog = filp->private_data;
 
-	pr_debug("%s, %s\n", __func__, cwp_hvlog->miscdev.name);
+	pr_debug("%s, %s\n", __func__, acrn_hvlog->miscdev.name);
 
-	if (cwp_hvlog->pcpu_num >= PCPU_NRS) {
+	if (acrn_hvlog->pcpu_num >= PCPU_NRS) {
 		pr_err("%s, invalid pcpu_num: %d\n",
-				__func__, cwp_hvlog->pcpu_num);
+				__func__, acrn_hvlog->pcpu_num);
 		return -EIO;
 	}
 
-	atomic_dec(&cwp_hvlog->open_cnt);
+	atomic_dec(&acrn_hvlog->open_cnt);
 	filp->private_data = NULL;
 
 	return 0;
 }
 
-static ssize_t cwp_hvlog_read(struct file *filp, char __user *buf,
+static ssize_t hvlog_read(struct file *filp, char __user *buf,
 				size_t count, loff_t *offset)
 {
 	char data[LOG_ENTRY_SIZE];
-	struct cwp_hvlog *cwp_hvlog;
+	struct acrn_hvlog *acrn_hvlog;
 	int ret;
 
-	cwp_hvlog = (struct cwp_hvlog *)filp->private_data;
+	acrn_hvlog = (struct acrn_hvlog *)filp->private_data;
 
-	pr_debug("%s, %s\n", __func__, cwp_hvlog->miscdev.name);
+	pr_debug("%s, %s\n", __func__, acrn_hvlog->miscdev.name);
 
-	if (cwp_hvlog->pcpu_num >= PCPU_NRS) {
+	if (acrn_hvlog->pcpu_num >= PCPU_NRS) {
 		pr_err("%s, invalid pcpu_num: %d\n",
-				__func__, cwp_hvlog->pcpu_num);
+				__func__, acrn_hvlog->pcpu_num);
 		return -EIO;
 	}
 
-	if (cwp_hvlog->sbuf != NULL) {
-		ret = sbuf_get(cwp_hvlog->sbuf, (uint8_t *)&data);
+	if (acrn_hvlog->sbuf != NULL) {
+		ret = sbuf_get(acrn_hvlog->sbuf, (uint8_t *)&data);
 		if (ret > 0) {
 			if (copy_to_user(buf, &data, ret))
 				return -EFAULT;
@@ -201,85 +201,85 @@ static ssize_t cwp_hvlog_read(struct file *filp, char __user *buf,
 	return 0;
 }
 
-static const struct file_operations cwp_hvlog_fops = {
+static const struct file_operations hvlog_fops = {
 	.owner  = THIS_MODULE,
-	.open   = cwp_hvlog_open,
-	.release = cwp_hvlog_release,
-	.read = cwp_hvlog_read,
+	.open   = hvlog_open,
+	.release = hvlog_release,
+	.read = hvlog_read,
 };
 
-static struct cwp_hvlog cwp_hvlog_devs[CWP_HVLOG_TYPE][PCPU_NRS] = {
-	[CWP_CURRNET_HVLOG] = {
+static struct acrn_hvlog hvlog_devs[ACRN_HVLOG_TYPE][PCPU_NRS] = {
+	[ACRN_CURRNET_HVLOG] = {
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_cur_0",
+				.name   = "acrn_hvlog_cur_0",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 0,
 		},
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_cur_1",
+				.name   = "acrn_hvlog_cur_1",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 1,
 		},
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_cur_2",
+				.name   = "acrn_hvlog_cur_2",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 2,
 		},
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_cur_3",
+				.name   = "acrn_hvlog_cur_3",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 3,
 		},
 	},
-	[CWP_LAST_HVLOG] = {
+	[ACRN_LAST_HVLOG] = {
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_last_0",
+				.name   = "acrn_hvlog_last_0",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 0,
 		},
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_last_1",
+				.name   = "acrn_hvlog_last_1",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 1,
 		},
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_last_2",
+				.name   = "acrn_hvlog_last_2",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 2,
 		},
 		{
 			.miscdev = {
-				.name   = "cwp_hvlog_last_3",
+				.name   = "acrn_hvlog_last_3",
 				.minor  = MISC_DYNAMIC_MINOR,
-				.fops   = &cwp_hvlog_fops,
+				.fops   = &hvlog_fops,
 			},
 			.pcpu_num = 3,
 		},
 	}
 };
 
-static int __init cwp_hvlog_init(void)
+static int __init acrn_hvlog_init(void)
 {
 	int ret = 0;
 	int i, j, idx;
@@ -321,9 +321,9 @@ static int __init cwp_hvlog_init(void)
 			continue;
 
 		foreach_cpu(pcpu_id, PCPU_NRS) {
-			cwp_hvlog_devs[CWP_LAST_HVLOG][pcpu_id].sbuf =
+			hvlog_devs[ACRN_LAST_HVLOG][pcpu_id].sbuf =
 					hvlog_mark_unread(sbuf0[pcpu_id]);
-			cwp_hvlog_devs[CWP_CURRNET_HVLOG][pcpu_id].sbuf =
+			hvlog_devs[ACRN_CURRNET_HVLOG][pcpu_id].sbuf =
 				sbuf_construct(ele_num, ele_size,
 					logbuf_base1 + size * pcpu_id);
 		}
@@ -336,40 +336,40 @@ static int __init cwp_hvlog_init(void)
 				continue;
 
 			foreach_cpu(pcpu_id, PCPU_NRS) {
-				cwp_hvlog_devs[CWP_LAST_HVLOG][pcpu_id].sbuf =
+				hvlog_devs[ACRN_LAST_HVLOG][pcpu_id].sbuf =
 					hvlog_mark_unread(sbuf1[pcpu_id]);
 			}
 		}
 		foreach_cpu(pcpu_id, PCPU_NRS) {
-			cwp_hvlog_devs[CWP_CURRNET_HVLOG][pcpu_id].sbuf =
+			hvlog_devs[ACRN_CURRNET_HVLOG][pcpu_id].sbuf =
 				sbuf_construct(ele_num, ele_size,
 					logbuf_base0 + size * pcpu_id);
 		}
 		sbuf_constructed = true;
 	}
 
-	idx = CWP_CURRNET_HVLOG;
+	idx = ACRN_CURRNET_HVLOG;
 	{
 		foreach_cpu(pcpu_id, PCPU_NRS) {
-			ret = sbuf_share_setup(pcpu_id, CWP_HVLOG,
-					cwp_hvlog_devs[idx][pcpu_id].sbuf);
+			ret = sbuf_share_setup(pcpu_id, ACRN_HVLOG,
+					hvlog_devs[idx][pcpu_id].sbuf);
 			if (ret < 0) {
 				pr_err("Failed to setup %s, errno %d\n",
-				cwp_hvlog_devs[idx][pcpu_id].miscdev.name, ret);
+				hvlog_devs[idx][pcpu_id].miscdev.name, ret);
 				goto setup_err;
 			}
 		}
 	}
 
-	foreach_hvlog_type(idx, CWP_HVLOG_TYPE) {
+	foreach_hvlog_type(idx, ACRN_HVLOG_TYPE) {
 		foreach_cpu(pcpu_id, PCPU_NRS) {
-			atomic_set(&cwp_hvlog_devs[idx][pcpu_id].open_cnt, 0);
+			atomic_set(&hvlog_devs[idx][pcpu_id].open_cnt, 0);
 
 			ret = misc_register(
-					&cwp_hvlog_devs[idx][pcpu_id].miscdev);
+					&hvlog_devs[idx][pcpu_id].miscdev);
 			if (ret < 0) {
 				pr_err("Failed to register %s, errno %d\n",
-				cwp_hvlog_devs[idx][pcpu_id].miscdev.name, ret);
+				hvlog_devs[idx][pcpu_id].miscdev.name, ret);
 				goto reg_err;
 			}
 		}
@@ -380,53 +380,53 @@ static int __init cwp_hvlog_init(void)
 reg_err:
 	foreach_hvlog_type(i, idx) {
 		foreach_cpu(j, PCPU_NRS) {
-			misc_deregister(&cwp_hvlog_devs[i][j].miscdev);
+			misc_deregister(&hvlog_devs[i][j].miscdev);
 		}
 	}
 
 	foreach_cpu(j, pcpu_id) {
-		misc_deregister(&cwp_hvlog_devs[idx][j].miscdev);
+		misc_deregister(&hvlog_devs[idx][j].miscdev);
 	}
 
 	pcpu_id = PCPU_NRS;
 setup_err:
-	idx = CWP_CURRNET_HVLOG;
+	idx = ACRN_CURRNET_HVLOG;
 	{
 		foreach_cpu(j, pcpu_id) {
-			sbuf_share_setup(j, CWP_HVLOG, 0);
-			sbuf_deconstruct(cwp_hvlog_devs[idx][j].sbuf);
+			sbuf_share_setup(j, ACRN_HVLOG, 0);
+			sbuf_deconstruct(hvlog_devs[idx][j].sbuf);
 		}
 	}
 
 	return ret;
 }
 
-static void __exit cwp_hvlog_exit(void)
+static void __exit acrn_hvlog_exit(void)
 {
 	int idx;
 	uint32_t pcpu_id;
 
 	pr_info("%s\n", __func__);
 
-	foreach_hvlog_type(idx, CWP_HVLOG_TYPE) {
+	foreach_hvlog_type(idx, ACRN_HVLOG_TYPE) {
 		foreach_cpu(pcpu_id, PCPU_NRS) {
-			misc_deregister(&cwp_hvlog_devs[idx][pcpu_id].miscdev);
+			misc_deregister(&hvlog_devs[idx][pcpu_id].miscdev);
 		}
 	}
 
-	idx = CWP_CURRNET_HVLOG;
+	idx = ACRN_CURRNET_HVLOG;
 	{
 		foreach_cpu(pcpu_id, PCPU_NRS) {
-			sbuf_share_setup(pcpu_id, CWP_HVLOG, 0);
-			sbuf_deconstruct(cwp_hvlog_devs[idx][pcpu_id].sbuf);
+			sbuf_share_setup(pcpu_id, ACRN_HVLOG, 0);
+			sbuf_deconstruct(hvlog_devs[idx][pcpu_id].sbuf);
 		}
 	}
 }
 
-module_init(cwp_hvlog_init);
-module_exit(cwp_hvlog_exit);
+module_init(acrn_hvlog_init);
+module_exit(acrn_hvlog_exit);
 
 MODULE_LICENSE("Dual BSD/GPL");
 MODULE_AUTHOR("Intel Corp., http://www.intel.com");
-MODULE_DESCRIPTION("Driver for the Intel CWP Hypervisor Logmsg");
+MODULE_DESCRIPTION("Driver for the Intel ACRN Hypervisor Logmsg");
 MODULE_VERSION("0.1");
diff --git a/drivers/cwp/sbuf.c b/drivers/acrn/sbuf.c
similarity index 100%
rename from drivers/cwp/sbuf.c
rename to drivers/acrn/sbuf.c
diff --git a/drivers/cwp/sbuf.h b/drivers/acrn/sbuf.h
similarity index 98%
rename from drivers/cwp/sbuf.h
rename to drivers/acrn/sbuf.h
index 07588f9..4fae7a2 100644
--- a/drivers/cwp/sbuf.h
+++ b/drivers/acrn/sbuf.h
@@ -68,9 +68,9 @@
 #define OVERWRITE_EN	(1ULL << 1) /* whether overwrite is enabled */
 
 enum sbuf_type {
-	CWP_TRACE,
-	CWP_HVLOG,
-	CWP_SBUF_TYPE_MAX,
+	ACRN_TRACE,
+	ACRN_HVLOG,
+	ACRN_SBUF_TYPE_MAX,
 };
 /**
  * (sbuf) head + buf (store (ele_num - 1) elements at most)
diff --git a/drivers/cwp/cwp_trace.c b/drivers/acrn/trace.c
similarity index 78%
rename from drivers/cwp/cwp_trace.c
rename to drivers/acrn/trace.c
index 84efecb..2a9d87e 100644
--- a/drivers/cwp/cwp_trace.c
+++ b/drivers/acrn/trace.c
@@ -1,6 +1,6 @@
 /*
 *
-* CWP Trace module
+* ACRN Trace module
 *
 * This file is provided under a dual BSD/GPLv2 license.Â  When using or
 * redistributing this file, you may do so under either license.
@@ -54,7 +54,7 @@
 *
 */
 
-#define pr_fmt(fmt) "CWPTrace: " fmt
+#define pr_fmt(fmt) "ACRNTrace: " fmt
 
 #include <linux/kernel.h>
 #include <linux/module.h>
@@ -93,7 +93,7 @@ static inline int get_id_from_devname(struct file *filep)
 	char id_str[16];
 	struct miscdevice *dev = filep->private_data;
 
-	strncpy(id_str, (void *)dev->name + sizeof("cwp_trace_") - 1, 16);
+	strncpy(id_str, (void *)dev->name + sizeof("acrn_trace_") - 1, 16);
 	id_str[15] = '\0';
 	err = kstrtoul(&id_str[0], 10, (unsigned long *)&cpuid);
 
@@ -114,7 +114,7 @@ static inline int get_id_from_devname(struct file *filep)
  * file_operations functions
  *
  ***********************************************************************/
-static int cwp_trace_open(struct inode *inode, struct file *filep)
+static int trace_open(struct inode *inode, struct file *filep)
 {
 	int cpuid = get_id_from_devname(filep);
 
@@ -131,7 +131,7 @@ static int cwp_trace_open(struct inode *inode, struct file *filep)
 	return 0;
 }
 
-static int cwp_trace_release(struct inode *inode, struct file *filep)
+static int trace_release(struct inode *inode, struct file *filep)
 {
 	int cpuid = get_id_from_devname(filep);
 
@@ -144,7 +144,7 @@ static int cwp_trace_release(struct inode *inode, struct file *filep)
 	return 0;
 }
 
-static int cwp_trace_mmap(struct file *filep, struct vm_area_struct *vma)
+static int trace_mmap(struct file *filep, struct vm_area_struct *vma)
 {
 	int cpuid = get_id_from_devname(filep);
 	phys_addr_t paddr;
@@ -167,57 +167,52 @@ static int cwp_trace_mmap(struct file *filep, struct vm_area_struct *vma)
 	return 0;
 }
 
-static const struct file_operations cwp_trace_fops = {
+static const struct file_operations trace_fops = {
 	.owner  = THIS_MODULE,
-	.open   = cwp_trace_open,
-	.release = cwp_trace_release,
-	.mmap   = cwp_trace_mmap,
+	.open   = trace_open,
+	.release = trace_release,
+	.mmap   = trace_mmap,
 };
 
-static struct miscdevice cwp_trace_dev0 = {
-	.name   = "cwp_trace_0",
+static struct miscdevice trace_dev0 = {
+	.name   = "acrn_trace_0",
 	.minor  = MISC_DYNAMIC_MINOR,
-	.fops   = &cwp_trace_fops,
+	.fops   = &trace_fops,
 };
 
-static struct miscdevice cwp_trace_dev1 = {
-	.name   = "cwp_trace_1",
+static struct miscdevice trace_dev1 = {
+	.name   = "acrn_trace_1",
 	.minor  = MISC_DYNAMIC_MINOR,
-	.fops   = &cwp_trace_fops,
+	.fops   = &trace_fops,
 };
 
-static struct miscdevice cwp_trace_dev2 = {
-	.name   = "cwp_trace_2",
+static struct miscdevice trace_dev2 = {
+	.name   = "acrn_trace_2",
 	.minor  = MISC_DYNAMIC_MINOR,
-	.fops   = &cwp_trace_fops,
+	.fops   = &trace_fops,
 };
 
-static struct miscdevice cwp_trace_dev3 = {
-	.name   = "cwp_trace_3",
+static struct miscdevice trace_dev3 = {
+	.name   = "acrn_trace_3",
 	.minor  = MISC_DYNAMIC_MINOR,
-	.fops   = &cwp_trace_fops,
+	.fops   = &trace_fops,
 };
 
-static struct miscdevice *cwp_trace_devs[4] = {
-	&cwp_trace_dev0,
-	&cwp_trace_dev1,
-	&cwp_trace_dev2,
-	&cwp_trace_dev3,
+static struct miscdevice *trace_devs[4] = {
+	&trace_dev0,
+	&trace_dev1,
+	&trace_dev2,
+	&trace_dev3,
 };
 
 /*
- * cwp_trace_init()
+ * acrn_trace_init()
  */
-static int __init cwp_trace_init(void)
+static int __init acrn_trace_init(void)
 {
 	int ret = 0;
 	int i, cpu;
 
-	if (x86_hyper_type != X86_HYPER_CWP) {
-		pr_err("cwp_trace: not support cwp hypervisor!\n");
-		return -EINVAL;
-	}
-
 	/* TBD: we could get the native cpu number by hypercall later */
 	pr_info("%s, cpu_num %d\n", __func__, nr_cpus);
 	if (nr_cpus > MAX_NR_CPUS) {
@@ -239,7 +234,7 @@ static int __init cwp_trace_init(void)
 	}
 
 	foreach_cpu(cpu, pcpu_num) {
-		ret = sbuf_share_setup(cpu, CWP_TRACE, sbuf_per_cpu[cpu]);
+		ret = sbuf_share_setup(cpu, ACRN_TRACE, sbuf_per_cpu[cpu]);
 		if (ret < 0) {
 			pr_err("Failed to setup SBuf, cpuid %d\n", cpu);
 			goto out_sbuf;
@@ -247,9 +242,9 @@ static int __init cwp_trace_init(void)
 	}
 
 	foreach_cpu(cpu, pcpu_num) {
-		ret = misc_register(cwp_trace_devs[cpu]);
+		ret = misc_register(trace_devs[cpu]);
 		if (ret < 0) {
-			pr_err("Failed to register cwp_trace_%d, errno %d\n",
+			pr_err("Failed to register acrn_trace_%d, errno %d\n",
 				cpu, ret);
 			goto out_dereg;
 		}
@@ -259,12 +254,12 @@ static int __init cwp_trace_init(void)
 
 out_dereg:
 	for (i = --cpu; i >= 0; i--)
-		misc_deregister(cwp_trace_devs[i]);
+		misc_deregister(trace_devs[i]);
 	cpu = pcpu_num;
 
 out_sbuf:
 	for (i = --cpu; i >= 0; i--)
-		sbuf_share_setup(i, CWP_TRACE, NULL);
+		sbuf_share_setup(i, ACRN_TRACE, NULL);
 	cpu = pcpu_num;
 
 out_free:
@@ -275,9 +270,9 @@ static int __init cwp_trace_init(void)
 }
 
 /*
- * cwp_trace_exit()
+ * acrn_trace_exit()
  */
-static void __exit cwp_trace_exit(void)
+static void __exit acrn_trace_exit(void)
 {
 	int cpu;
 
@@ -285,20 +280,20 @@ static void __exit cwp_trace_exit(void)
 
 	foreach_cpu(cpu, pcpu_num) {
 		/* deregister devices */
-		misc_deregister(cwp_trace_devs[cpu]);
+		misc_deregister(trace_devs[cpu]);
 
 		/* set sbuf pointer to NULL in HV */
-		sbuf_share_setup(cpu, CWP_TRACE, NULL);
+		sbuf_share_setup(cpu, ACRN_TRACE, NULL);
 
 		/* free sbuf, sbuf_per_cpu[cpu] should be set NULL */
 		sbuf_free(sbuf_per_cpu[cpu]);
 	}
 }
 
-module_init(cwp_trace_init);
-module_exit(cwp_trace_exit);
+module_init(acrn_trace_init);
+module_exit(acrn_trace_exit);
 
 MODULE_LICENSE("Dual BSD/GPL");
 MODULE_AUTHOR("Intel Corp., http://www.intel.com");
-MODULE_DESCRIPTION("Driver for the Intel CWP Hypervisor Trace");
+MODULE_DESCRIPTION("Driver for the Intel ACRN Hypervisor Trace");
 MODULE_VERSION("0.1");
diff --git a/drivers/cwp/Kconfig b/drivers/cwp/Kconfig
deleted file mode 100644
index 091b3a1..0000000
--- a/drivers/cwp/Kconfig
+++ /dev/null
@@ -1,20 +0,0 @@
-config CWP_SHARED_BUFFER
-	bool "Intel CWP SHARED BUFFER"
-	---help---
-	  Ring buffer shared between CWP Hypervisor and its SOS.
-	  Help CWP performance profiling.
-
-config CWP_TRACE
-	tristate "Intel CWP Hypervisor Trace support"
-	select CWP_SHARED_BUFFER
-	---help---
-		This is the Trace driver for the Intel CWP hypervisor.
-		You can say y to build it into the kernel, or m to build
-		it as a module.
-
-config CWP_HVLOG
-	bool "Intel CWP Hypervisor Logmsg support"
-	select CWP_SHARED_BUFFER
-	---help---
-		This is the Trace driver for the Intel CWP hypervisor log.
-		You can say y to build it into the kernel.
diff --git a/drivers/cwp/Makefile b/drivers/cwp/Makefile
deleted file mode 100644
index 2e5fe43c..0000000
--- a/drivers/cwp/Makefile
+++ /dev/null
@@ -1,3 +0,0 @@
-obj-$(CONFIG_CWP_SHARED_BUFFER) += sbuf.o
-obj-$(CONFIG_CWP_TRACE) += cwp_trace.o
-obj-$(CONFIG_CWP_HVLOG) += cwp_hvlog.o
-- 
2.7.4

