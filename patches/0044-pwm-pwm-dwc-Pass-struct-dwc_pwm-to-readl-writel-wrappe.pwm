From 4f0d199d266fa285391e53408e7cc0ce0ac15613 Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Wed, 3 Jun 2020 16:10:56 +0300
Subject: [PATCH 44/55] pwm: pwm-dwc: Pass struct dwc_pwm * to readl/writel
 wrappers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Pass struct dwc_pwm * instead of void __iomem * to dwc_pwm_readl() and
dwc_pwm_writel() and change order of dwc_pwm_writel() arguments back.

Review comment from Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>:
	"I would have chosen the following prototype:
	static inline void dwc_pwm_writel(struct dwc_pwm *dwc, u32 value, u32 offset)
	Passing a struct dwc_pwm * instead of a void __iomem * saves some
	horizontal space and putting the base in the middle looks bad (but
	that might be subjective?)"

Jarkko: Note except void __iomem * to struct dwc_pwm * change this brings
dwc_pwm_writel() to same than it was before previous review comment.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/pwm/pwm-dwc.c | 42 ++++++++++++++++++------------------------
 1 file changed, 18 insertions(+), 24 deletions(-)

diff --git a/drivers/pwm/pwm-dwc.c b/drivers/pwm/pwm-dwc.c
index 1badb12aa360..f1e2d0759943 100644
--- a/drivers/pwm/pwm-dwc.c
+++ b/drivers/pwm/pwm-dwc.c
@@ -56,14 +56,14 @@ struct dwc_pwm {
 };
 #define to_dwc_pwm(p)	(container_of((p), struct dwc_pwm, chip))
 
-static inline u32 dwc_pwm_readl(void __iomem *base, u32 offset)
+static inline u32 dwc_pwm_readl(struct dwc_pwm *dwc, u32 offset)
 {
-	return readl(base + offset);
+	return readl(dwc->base + offset);
 }
 
-static inline void dwc_pwm_writel(u32 value, void __iomem *base, u32 offset)
+static inline void dwc_pwm_writel(struct dwc_pwm *dwc, u32 value, u32 offset)
 {
-	writel(value, base + offset);
+	writel(value, dwc->base + offset);
 }
 
 static void __dwc_pwm_configure(struct dwc_pwm *dwc, int pwm,
@@ -77,25 +77,25 @@ static void __dwc_pwm_configure(struct dwc_pwm *dwc, int pwm,
 	high = DIV_ROUND_CLOSEST(duty_ns, DWC_CLK_PERIOD_NS) - 1;
 	low = DIV_ROUND_CLOSEST(period_ns - duty_ns, DWC_CLK_PERIOD_NS) - 1;
 
-	dwc_pwm_writel(low, dwc->base, DWC_TIM_LD_CNT(pwm));
-	dwc_pwm_writel(high, dwc->base, DWC_TIM_LD_CNT2(pwm));
+	dwc_pwm_writel(dwc, low, DWC_TIM_LD_CNT(pwm));
+	dwc_pwm_writel(dwc, high, DWC_TIM_LD_CNT2(pwm));
 
 	ctrl = DWC_TIM_CTRL_MODE_USER | DWC_TIM_CTRL_PWM;
-	dwc_pwm_writel(ctrl, dwc->base, DWC_TIM_CTRL(pwm));
+	dwc_pwm_writel(dwc, ctrl, DWC_TIM_CTRL(pwm));
 }
 
 static void __dwc_pwm_set_enable(struct dwc_pwm *dwc, int pwm, int enabled)
 {
 	u32 reg;
 
-	reg = dwc_pwm_readl(dwc->base, DWC_TIM_CTRL(pwm));
+	reg = dwc_pwm_readl(dwc, DWC_TIM_CTRL(pwm));
 
 	if (enabled)
 		reg |= DWC_TIM_CTRL_EN;
 	else
 		reg &= ~DWC_TIM_CTRL_EN;
 
-	dwc_pwm_writel(reg, dwc->base, DWC_TIM_CTRL(pwm));
+	dwc_pwm_writel(dwc, reg, DWC_TIM_CTRL(pwm));
 }
 
 static void __dwc_pwm_configure_timer(struct dwc_pwm *dwc,
@@ -138,16 +138,16 @@ static void dwc_pwm_get_state(struct pwm_chip *chip, struct pwm_device *pwm,
 
 	pm_runtime_get_sync(dwc->dev);
 
-	state->enabled = !!(dwc_pwm_readl(dwc->base,
+	state->enabled = !!(dwc_pwm_readl(dwc,
 				DWC_TIM_CTRL(pwm->hwpwm)) & DWC_TIM_CTRL_EN);
 
-	duty = dwc_pwm_readl(dwc->base, DWC_TIM_LD_CNT2(pwm->hwpwm));
+	duty = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT2(pwm->hwpwm));
 	duty += 1;
 	duty *= DWC_CLK_PERIOD_NS;
 	/* Cap the value to 2^32-1 ns */
 	state->duty_cycle = min(duty, (u64)(u32)-1);
 
-	period = dwc_pwm_readl(dwc->base, DWC_TIM_LD_CNT(pwm->hwpwm));
+	period = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT(pwm->hwpwm));
 	period += 1;
 	period *= DWC_CLK_PERIOD_NS;
 	period += duty;
@@ -241,12 +241,9 @@ static int dwc_pwm_suspend(struct device *dev)
 				i, dwc->chip.pwms[i].label);
 			return -EBUSY;
 		}
-		dwc->ctx[i].cnt =
-			dwc_pwm_readl(dwc->base, DWC_TIM_LD_CNT(i));
-		dwc->ctx[i].cnt2 =
-			dwc_pwm_readl(dwc->base, DWC_TIM_LD_CNT2(i));
-		dwc->ctx[i].ctrl =
-			dwc_pwm_readl(dwc->base, DWC_TIM_CTRL(i));
+		dwc->ctx[i].cnt = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT(i));
+		dwc->ctx[i].cnt2 = dwc_pwm_readl(dwc, DWC_TIM_LD_CNT2(i));
+		dwc->ctx[i].ctrl = dwc_pwm_readl(dwc, DWC_TIM_CTRL(i));
 	}
 
 	return 0;
@@ -259,12 +256,9 @@ static int dwc_pwm_resume(struct device *dev)
 	int i;
 
 	for (i = 0; i < DWC_TIMERS_TOTAL; i++) {
-		dwc_pwm_writel(dwc->ctx[i].cnt,
-			       dwc->base, DWC_TIM_LD_CNT(i));
-		dwc_pwm_writel(dwc->ctx[i].cnt2,
-			       dwc->base, DWC_TIM_LD_CNT2(i));
-		dwc_pwm_writel(dwc->ctx[i].ctrl,
-			       dwc->base, DWC_TIM_CTRL(i));
+		dwc_pwm_writel(dwc, dwc->ctx[i].cnt, DWC_TIM_LD_CNT(i));
+		dwc_pwm_writel(dwc, dwc->ctx[i].cnt2, DWC_TIM_LD_CNT2(i));
+		dwc_pwm_writel(dwc, dwc->ctx[i].ctrl, DWC_TIM_CTRL(i));
 	}
 
 	return 0;
-- 
2.27.0

