From 63fccd788da04c59b17168276c49698e8e9c9f64 Mon Sep 17 00:00:00 2001
From: Christopher Hall <christopher.s.hall@intel.com>
Date: Mon, 14 Oct 2019 08:26:08 -0700
Subject: [PATCH 14/14] Add TSC/ART translation

Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
---
 arch/x86/include/asm/tsc.h        |  5 ++-
 arch/x86/kernel/tsc.c             | 61 ++++++++++++++++++++-----------
 drivers/ptp/ptp-intel-pmc-tgpio.c | 29 ++++++++++-----
 3 files changed, 61 insertions(+), 34 deletions(-)

diff --git a/arch/x86/include/asm/tsc.h b/arch/x86/include/asm/tsc.h
index b7a9f4385a82..7ee2e58bfbfe 100644
--- a/arch/x86/include/asm/tsc.h
+++ b/arch/x86/include/asm/tsc.h
@@ -32,8 +32,9 @@ static inline cycles_t get_cycles(void)
 
 extern struct system_counterval_t convert_art_to_tsc(u64 art);
 extern struct system_counterval_t convert_art_ns_to_tsc(u64 art_ns);
-extern void get_tsc_ns(struct system_counterval_t *tsc_counterval, u64 *tsc_ns);
-extern u64 get_art_ns_now(void);
+extern struct timespec64 get_tsc_ns_now(struct system_counterval_t
+					*system_counter);
+extern u64 convert_tsc_ns_to_art(struct timespec64 *tsc_ns);
 
 extern void tsc_early_init(void);
 extern void tsc_init(void);
diff --git a/arch/x86/kernel/tsc.c b/arch/x86/kernel/tsc.c
index 72253d59dd4f..9caac0d0ae63 100644
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@ -1232,14 +1232,15 @@ struct system_counterval_t convert_art_to_tsc(u64 art)
 }
 EXPORT_SYMBOL(convert_art_to_tsc);
 
-void get_tsc_ns(struct system_counterval_t *tsc_counterval, u64 *tsc_ns)
-{
+struct timespec64 get_tsc_ns_now(struct system_counterval_t *system_counter) {
 	u64 tmp, res, rem;
 	u64 cycles;
 
-	tsc_counterval->cycles = clocksource_tsc.read(NULL);
-	cycles = tsc_counterval->cycles;
-	tsc_counterval->cs = art_related_clocksource;
+	cycles = clocksource_tsc.read(NULL);
+	if (system_counter != NULL) {
+		system_counter->cycles = cycles;
+		system_counter->cs = art_related_clocksource;
+	}
 
 	rem = do_div(cycles, tsc_khz);
 
@@ -1249,30 +1250,46 @@ void get_tsc_ns(struct system_counterval_t *tsc_counterval, u64 *tsc_ns)
 	do_div(tmp, tsc_khz);
 	res += tmp;
 
-	*tsc_ns = res;
+	rem = do_div(res, NSEC_PER_SEC);
+
+	return (struct timespec64) {.tv_sec = res, .tv_nsec = rem};
 }
-EXPORT_SYMBOL(get_tsc_ns);
+EXPORT_SYMBOL(get_tsc_ns_now);
 
-u64 get_art_ns_now(void)
-{
-	struct system_counterval_t tsc_cycles;
-	u64 tsc_ns;
-	unsigned int eax;
-	unsigned int ebx;
-	unsigned int ecx;
-	unsigned int edx;
+static u64 convert_tsc_ns_to_tsc(struct timespec64 *tsc_ns) {
+	u64 tmp, res, rem;
+	u64 cycles;
 
-	get_tsc_ns(&tsc_cycles, &tsc_ns);
+	cycles = ((u64)tsc_ns->tv_sec * NSEC_PER_SEC) + tsc_ns->tv_nsec;
 
-	/* CPUID 15H TSC/Crystal ratio, plus optionally Crystal Hz */
-	cpuid(ART_CPUID_LEAF, &eax, &ebx, &ecx, &edx);
+	rem = do_div(cycles, USEC_PER_SEC);
+
+	res = cycles * tsc_khz;
+	tmp = rem * tsc_khz;
+
+	do_div(tmp, USEC_PER_SEC);
+
+	return res + tmp;
+}
+
+
+u64 convert_tsc_ns_to_art(struct timespec64 *tsc_ns) {
+	u64 tmp, res, rem;
+	u64 cycles;
+
+	cycles = convert_tsc_ns_to_tsc( tsc_ns );
+	cycles -= art_to_tsc_offset;
+
+	rem = do_div(cycles, art_to_tsc_numerator);
+
+	res = cycles * art_to_tsc_denominator;
+	tmp = rem * art_to_tsc_denominator;
 
-	printk(KERN_INFO "====> tsc_ns %llu %llu\n", tsc_ns,
-			DIV_ROUND_UP_ULL(ecx * ebx, eax));
+	do_div(tmp, art_to_tsc_numerator);
 
-	return tsc_ns;
+	return res + tmp;
 }
-EXPORT_SYMBOL(get_art_ns_now);
+EXPORT_SYMBOL(convert_tsc_ns_to_art);
 
 /**
  * convert_art_ns_to_tsc() - Convert ART in nanoseconds to TSC.
diff --git a/drivers/ptp/ptp-intel-pmc-tgpio.c b/drivers/ptp/ptp-intel-pmc-tgpio.c
index 571c6604299e..02634f81c807 100644
--- a/drivers/ptp/ptp-intel-pmc-tgpio.c
+++ b/drivers/ptp/ptp-intel-pmc-tgpio.c
@@ -137,11 +137,9 @@ static int intel_pmc_tgpio_gettime64(struct ptp_clock_info *info,
 		struct timespec64 *ts)
 {
 	struct intel_pmc_tgpio	*tgpio = to_intel_pmc_tgpio(info);
-	u64 now;
 
 	mutex_lock(&tgpio->lock);
-	now = get_art_ns_now();
-	*ts = ns_to_timespec64(now);
+	*ts = get_tsc_ns_now(NULL);
 	mutex_unlock(&tgpio->lock);
 
 	return 0;
@@ -226,25 +224,33 @@ static int intel_pmc_tgpio_config_input(struct intel_pmc_tgpio *tgpio,
 	return 0;
 }
 
+#define ptp_clock_time_to_ts64(x) ((struct timespec64){.tv_sec = (x).sec, \
+						       .tv_nsec = (x).nsec})
+
 static int intel_pmc_tgpio_config_output(struct intel_pmc_tgpio *tgpio,
 		struct ptp_perout_request *perout, int on)
 {
 	u32			ctrl;
+	u64			art;
 
 	ctrl = intel_pmc_tgpio_readl(tgpio->base, TGPIOCTL);
 	if (on) {
-		struct ptp_clock_time *period = &perout->period;
-		struct ptp_clock_time *start = &perout->start;
+		struct timespec64 period = ptp_clock_time_to_ts64
+			(perout->period);
+		struct timespec64 start = ptp_clock_time_to_ts64
+			(perout->start);
 
+		art = convert_tsc_ns_to_art(&start);
 		intel_pmc_tgpio_writel(tgpio->base, TGPIOCOMPV63_32,
-				start->sec);
+				art >> 32);
 		intel_pmc_tgpio_writel(tgpio->base, TGPIOCOMPV31_0,
-				start->nsec);
+				art & 0xFFFFFFFF);
 
+		art = convert_tsc_ns_to_art(&period);
 		intel_pmc_tgpio_writeq(tgpio->base, TGPIOPIV63_32,
-				period->sec);
+				art >> 32);
 		intel_pmc_tgpio_writeq(tgpio->base, TGPIOPIV31_0,
-				period->nsec);
+				art & 0xFFFFFFFF);
 
 		ctrl &= ~TGPIOCTL_DIR;
 		if (perout->flags & PTP_PEROUT_ONE_SHOT)
@@ -290,7 +296,10 @@ static int intel_pmc_tgpio_enable(struct ptp_clock_info *info,
 static int intel_pmc_tgpio_get_time_fn(ktime_t *device_time,
 		struct system_counterval_t *system_counter, void *_tgpio)
 {
-	get_tsc_ns(system_counter, device_time);
+	struct timespec64 now_ns;
+
+	now_ns = get_tsc_ns_now(system_counter);
+	*device_time = timespec64_to_ktime(now_ns);
 	return 0;
 }
 
-- 
2.17.1

