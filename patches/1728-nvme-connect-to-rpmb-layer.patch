From e64282c5fe2a951bcb5b14b57fb87eb1ad75c20a Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Wed, 25 Apr 2018 19:07:06 +0300
Subject: [PATCH 1728/2328] nvme: connect to rpmb layer

Change-Id: I9b409d1410ab47b7f4df0120a5267ac8310af068
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/nvme/host/core.c | 161 ++++++++++++++++++++++++++++++++++++++++++++++-
 drivers/nvme/host/nvme.h |   5 ++
 drivers/nvme/host/pci.c  |   5 ++
 3 files changed, 170 insertions(+), 1 deletion(-)

diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index 768ac75..3af4922 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -11,7 +11,8 @@
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  * more details.
  */
-
+#define FORMAT(fmt) "%s: %d: " fmt, __func__, __LINE__
+#define pr_fmt(fmt) KBUILD_MODNAME ": " FORMAT(fmt)
 #include <linux/blkdev.h>
 #include <linux/blk-mq.h>
 #include <linux/delay.h>
@@ -28,6 +29,7 @@
 #include <linux/t10-pi.h>
 #include <linux/pm_qos.h>
 #include <asm/unaligned.h>
+#include <linux/rpmb.h>
 
 #include "nvme.h"
 #include "fabrics.h"
@@ -1355,6 +1357,44 @@ static const struct pr_ops nvme_pr_ops = {
 	.pr_clear	= nvme_pr_clear,
 };
 
+static int nvme_sec_send(struct nvme_ctrl *ctrl, u8 nssf, u16 spsp, u8 secp,
+			 void *buffer, size_t len)
+{
+	struct nvme_command cmd;
+
+	dev_err(ctrl->device, "%s target = %hhu SPSP = %hu SECP = %hhX len=%zd\n",
+		__func__, nssf, spsp, secp, len);
+
+	memset(&cmd, 0, sizeof(cmd));
+	cmd.common.opcode = nvme_admin_security_send;
+	cmd.common.nsid = 0;
+	cmd.common.cdw10[0] =
+		cpu_to_le32(((u32)secp) << 24 | ((u32)spsp) << 8 | nssf);
+	cmd.common.cdw10[1] = cpu_to_le32(len);
+
+	return __nvme_submit_sync_cmd(ctrl->admin_q, &cmd, NULL, buffer, len,
+				      ADMIN_TIMEOUT, NVME_QID_ANY, 1, 0);
+}
+
+static int nvme_sec_recv(struct nvme_ctrl *ctrl, u8 nssf, u16 spsp, u8 secp,
+			 void *buffer, size_t len)
+{
+	struct nvme_command cmd;
+
+	dev_err(ctrl->device, "%s target = %hhu SPSP = %hu SECP = %hhX len=%zd\n",
+		__func__, nssf, spsp, secp, len);
+
+	memset(&cmd, 0, sizeof(cmd));
+	cmd.common.opcode = nvme_admin_security_recv;
+	cmd.common.nsid = 0;
+	cmd.common.cdw10[0] =
+		cpu_to_le32(((u32)secp) << 24 | ((u32)spsp) << 8 | nssf);
+	cmd.common.cdw10[1] = cpu_to_le32(len);
+
+	return __nvme_submit_sync_cmd(ctrl->admin_q, &cmd, NULL, buffer, len,
+				      ADMIN_TIMEOUT, NVME_QID_ANY, 1, 0);
+}
+
 #ifdef CONFIG_BLK_SED_OPAL
 int nvme_sec_submit(void *data, u16 spsp, u8 secp, void *buffer, size_t len,
 		bool send)
@@ -1684,6 +1724,122 @@ static void nvme_set_latency_tolerance(struct device *dev, s32 val)
 	}
 }
 
+#define NVME_SECP_RPMB   0xEA /* Security Protocol EAh is assigned
+			       * for NVMe use (refer to ACS-4)
+			       */
+#define NVME_SPSP_RPMB 0x0001 /* RPMB Target */
+static int nvme_rpmb_cmd_seq(struct device *dev, u8 target,
+			     struct rpmb_cmd *cmds, u32 ncmds)
+{
+	struct nvme_ctrl *ctrl;
+	struct rpmb_cmd *cmd;
+	u32 size;
+	int ret;
+	int i;
+
+	ctrl = dev_get_drvdata(dev);
+
+	for (ret = 0, i = 0; i < ncmds && !ret; i++) {
+		cmd = &cmds[i];
+		size = rpmb_ioc_frames_len_nvme(cmd->nframes);
+		if (cmd->flags & RPMB_F_WRITE)
+			ret = nvme_sec_send(ctrl, target,
+					    NVME_SPSP_RPMB, NVME_SECP_RPMB,
+					    cmd->frames, size);
+		else
+			ret = nvme_sec_recv(ctrl, target,
+					    NVME_SPSP_RPMB, NVME_SECP_RPMB,
+					    cmd->frames, size);
+	}
+
+	return ret;
+}
+
+static int nvme_rpmb_get_capacity(struct device *dev, u8 target)
+{
+	struct nvme_ctrl *ctrl;
+
+	ctrl = dev_get_drvdata(dev);
+
+	return ((ctrl->rpmbs >> 16) & 0xFF) + 1;
+}
+
+static struct rpmb_ops nvme_rpmb_dev_ops = {
+	.cmd_seq = nvme_rpmb_cmd_seq,
+	.get_capacity = nvme_rpmb_get_capacity,
+	.type = RPMB_TYPE_NVME,
+};
+
+static void nvme_rpmb_set_cap(struct nvme_ctrl *ctrl,
+			      struct rpmb_ops *ops)
+{
+	ops->wr_cnt_max = ((ctrl->rpmbs >> 24) & 0xFF) + 1;
+	ops->rd_cnt_max = ops->wr_cnt_max;
+	ops->block_size = 2; /* 1 sector == 2 half sectors */
+	ops->auth_method = (ctrl->rpmbs >> 3) & 0x3;
+}
+
+static void nvme_rpmb_add(struct nvme_ctrl *ctrl)
+{
+	struct rpmb_dev *rdev;
+	int ndevs = ctrl->rpmbs & 0x7;
+	int i;
+
+	nvme_rpmb_set_cap(ctrl, &nvme_rpmb_dev_ops);
+
+	/* Add RPMB partitions */
+	for (i = 0; i < ndevs; i++) {
+		rdev = rpmb_dev_register(ctrl->device, i, &nvme_rpmb_dev_ops);
+		if (IS_ERR(rdev)) {
+			dev_warn(ctrl->device, "%s: cannot register to rpmb %ld\n",
+				 dev_name(ctrl->device), PTR_ERR(rdev));
+		}
+		dev_set_drvdata(&rdev->dev, ctrl);
+	}
+}
+
+static void nvme_rpmb_remove(struct nvme_ctrl *ctrl)
+{
+	int ndevs = ctrl->rpmbs & 0x7;
+	int i;
+
+	/* FIXME: target */
+	for (i = 0; i < ndevs; i++)
+		rpmb_dev_unregister_by_device(ctrl->device, i);
+}
+
+int nvme_init_rpmb(struct nvme_ctrl *ctrl)
+{
+	dev_err(ctrl->device, "RPMBS %X\n", ctrl->rpmbs);
+
+	if ((ctrl->rpmbs & 0x7) == 0x0) {
+		dev_err(ctrl->device, "RPMBS No partitions\n");
+		return 0;
+	}
+
+	dev_err(ctrl->device, "RPMBS Number of partitions %d\n",
+		ctrl->rpmbs & 0x7);
+	dev_err(ctrl->device, "RPMBS Authentication Method: %d\n",
+		(ctrl->rpmbs >> 3) & 0x3);
+	dev_err(ctrl->device, "RPMBS Total Size: %d %dK",
+		(ctrl->rpmbs >> 16) & 0xFF,
+		(((ctrl->rpmbs >> 16) & 0xFF) + 1) *  128);
+	dev_err(ctrl->device, "RPMBS Access Size: %d %dB",
+		(ctrl->rpmbs >> 24) & 0xFF,
+		(((ctrl->rpmbs >> 24) & 0xFF) + 1) * 512);
+
+	nvme_rpmb_add(ctrl);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(nvme_init_rpmb);
+
+void nvme_exit_rpmb(struct nvme_ctrl *ctrl)
+{
+	nvme_rpmb_remove(ctrl);
+}
+EXPORT_SYMBOL_GPL(nvme_exit_rpmb);
+
 struct nvme_core_quirk_entry {
 	/*
 	 * NVMe model and firmware strings are padded with spaces.  For
@@ -1900,6 +2056,9 @@ int nvme_init_identify(struct nvme_ctrl *ctrl)
 		ctrl->hmmaxd = le16_to_cpu(id->hmmaxd);
 	}
 
+	ctrl->rpmbs = le32_to_cpu(id->rpmbs);
+	dev_info(ctrl->device, "RPMBS=%08X\n", ctrl->rpmbs);
+
 	kfree(id);
 
 	if (ctrl->apst_enabled && !prev_apst_enabled)
diff --git a/drivers/nvme/host/nvme.h b/drivers/nvme/host/nvme.h
index 7ef0a8e..950695e 100644
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@ -20,6 +20,7 @@
 #include <linux/blk-mq.h>
 #include <linux/lightnvm.h>
 #include <linux/sed-opal.h>
+#include <linux/rpmb.h>
 
 extern unsigned char nvme_io_timeout;
 #define NVME_IO_TIMEOUT	(nvme_io_timeout * HZ)
@@ -144,6 +145,7 @@ struct nvme_ctrl {
 	struct work_struct reset_work;
 
 	struct opal_dev *opal_dev;
+	struct rpmb_dev *rdev;
 
 	char name[12];
 	char serial[20];
@@ -172,6 +174,7 @@ struct nvme_ctrl {
 	u16 kas;
 	u8 npss;
 	u8 apsta;
+	u32 rpmbs;
 	unsigned int shutdown_timeout;
 	unsigned int kato;
 	bool subsystem;
@@ -297,6 +300,8 @@ void nvme_start_ctrl(struct nvme_ctrl *ctrl);
 void nvme_stop_ctrl(struct nvme_ctrl *ctrl);
 void nvme_put_ctrl(struct nvme_ctrl *ctrl);
 int nvme_init_identify(struct nvme_ctrl *ctrl);
+int nvme_init_rpmb(struct nvme_ctrl *ctrl);
+void nvme_exit_rpmb(struct nvme_ctrl *ctrl);
 
 void nvme_queue_scan(struct nvme_ctrl *ctrl);
 void nvme_remove_namespaces(struct nvme_ctrl *ctrl);
diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
index cd11cce..d62600a 100644
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -2194,6 +2194,10 @@ static void nvme_reset_work(struct work_struct *work)
 	if (result)
 		goto out;
 
+	result = nvme_init_rpmb(&dev->ctrl);
+	if (result < 0)
+		goto out;
+
 	if (dev->ctrl.oacs & NVME_CTRL_OACS_SEC_SUPP) {
 		if (!dev->ctrl.opal_dev)
 			dev->ctrl.opal_dev =
@@ -2373,6 +2377,7 @@ static int nvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	quirks |= check_vendor_combination_bug(pdev);
 
+	dev_info(&pdev->dev, "calling nvme_init_ctrl\n");
 	result = nvme_init_ctrl(&dev->ctrl, &pdev->dev, &nvme_pci_ctrl_ops,
 			quirks);
 	if (result)
-- 
2.7.4

