From aeeb82b1cdff5f658065602a957c2dec0f661065 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Sat, 10 Aug 2019 06:54:21 +0800
Subject: [PATCH 54/89] net: stmmac: introduce IEEE 802.1Qbu implementation

The following functionalities are added:-

PEC is meant to specify which TxQ is preemptible queue. By default,
TxQ0 must NOT be express queue.

pMAC STS is to indicate whether preemptible MAC is in either Hold
or Release state.

The newly added IEEE 802.1Qbu functionalities are also hooked into
the driver main logics:
a) stmmac_dvr_probe: to enable/disable FPE feature according to platform
   data setting.
b) stmmac_hw_setup: to include FPRQ (frame preemption residue queue)
   setting, i.e. default RxQ (none RxQ0 - Express Frame default RxQ)
   to receive preemptible frame that is not steered to any other RxQs.

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |   4 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |  19 +++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  |  73 +++++++-
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  41 ++++-
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |   7 +-
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |   3 +
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 158 +++++++++++++++---
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  22 ++-
 include/linux/stmmac.h                        |   3 +
 9 files changed, 306 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index c62f927724ff..30f8bc61488b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1119,6 +1119,10 @@ const struct stmmac_ops dwmac510_ops = {
 	.est_irq_status = tsn_est_irq_status,
 	.dump_tsn_mmc = tsn_mmc_dump,
 	.cbs_recal_idleslope = tsn_cbs_recal_idleslope,
+	.fpe_set_txqpec = tsn_fpe_set_txqpec,
+	.fpe_set_enable = tsn_fpe_set_enable,
+	.fpe_get_config = tsn_fpe_get_config,
+	.fpe_show_pmac_sts = tsn_fpe_show_pmac_sts,
 };
 
 static u32 dwmac4_get_num_vlan(void __iomem *ioaddr)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index d222599b1896..f3dbb98027c9 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -88,6 +88,7 @@
 
 /* MAC HW features3 bitmap */
 #define GMAC_HW_FEAT_TBSSEL		BIT(27)
+#define GMAC_HW_FEAT_FPESEL		BIT(26)
 #define GMAC_HW_FEAT_ESTWID		GENMASK(21, 20)
 #define GMAC_HW_FEAT_ESTWID_SHIFT	20
 #define GMAC_HW_FEAT_ESTDEP		GENMASK(19, 17)
@@ -165,6 +166,24 @@
 /* CBS Global defines */
 #define CBS_IDLESLOPE_MAX		0x1fffff
 
+/* FPRQ only available in EQoS ver5.00 MAC_RxQ_Ctrl1 */
+#define GMAC_RXQCTRL_FPRQ_MASK		GENMASK(26, 24) /* FPE Residue Queue */
+#define GMAC_RXQCTRL_FPRQ_SHIFT		24
+
+/* MAC FPE control status */
+#define MAC_FPE_CTRL_STS		0x00000234
+#define MAC_FPE_CTRL_STS_EFPE		BIT(0)
+
+/* MTL FPE control status */
+#define MTL_FPE_CTRL_STS		0x00000c90
+#define MTL_FPE_CTRL_STS_HRS		BIT(28)	/* Hold/Release Status */
+#define MTL_FPE_CTRL_STS_HRS_SHIFT	28
+#define MTL_FPE_CTRL_STS_PEC		GENMASK(15, 8)	/* FPE Classification */
+#define MTL_FPE_CTRL_STS_PEC_SHIFT	8
+
+/* FPE Global defines */
+#define FPE_PMAC_BIT			BIT(0)	/* TxQ0 is always preemptible */
+
 /* DMA Tx Channel X Control register TBS bits defines */
 #define DMA_CONTROL_EDSE		BIT(28)
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 8bd5a3ee695f..826e623350bf 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -78,6 +78,8 @@ static bool dwmac5_has_tsn_cap(void __iomem *ioaddr, enum tsn_feat_id featid)
 	switch (featid) {
 	case TSN_FEAT_ID_EST:
 		return (hw_cap3 & GMAC_HW_FEAT_ESTSEL);
+	case TSN_FEAT_ID_FPE:
+		return (hw_cap3 & GMAC_HW_FEAT_FPESEL);
 	case TSN_FEAT_ID_TBS:
 		return (hw_cap3 & GMAC_HW_FEAT_TBSSEL);
 	default:
@@ -85,7 +87,8 @@ static bool dwmac5_has_tsn_cap(void __iomem *ioaddr, enum tsn_feat_id featid)
 	};
 }
 
-static void dwmac5_hw_setup(void __iomem *ioaddr, enum tsn_feat_id featid)
+static void dwmac5_hw_setup(void __iomem *ioaddr, enum tsn_feat_id featid,
+			    u32 fprq)
 {
 	u32 value;
 
@@ -97,6 +100,12 @@ static void dwmac5_hw_setup(void __iomem *ioaddr, enum tsn_feat_id featid)
 			 MTL_EST_INT_EN_IECC);
 		writel(value, ioaddr + MTL_EST_INT_EN);
 		break;
+	case TSN_FEAT_ID_FPE:
+		/* Update FPRQ */
+		value = readl(ioaddr + GMAC_RXQ_CTRL1);
+		value &= ~GMAC_RXQCTRL_FPRQ_MASK;
+		value |= fprq << GMAC_RXQCTRL_FPRQ_SHIFT;
+		writel(value, ioaddr + GMAC_RXQ_CTRL1);
 	default:
 		return;
 	};
@@ -167,6 +176,13 @@ static u32 dwmac5_est_get_txqcnt(void __iomem *ioaddr)
 	return ((hw_cap2 & GMAC_HW_FEAT_TXQCNT) >> 6) + 1;
 }
 
+static u32 dwmac5_est_get_rxqcnt(void __iomem *ioaddr)
+{
+	u32 hw_cap2 = readl(ioaddr + GMAC_HW_FEATURE2);
+
+	return (hw_cap2 & GMAC_HW_FEAT_RXQCNT) + 1;
+}
+
 static void dwmac5_est_get_max(u32 *ptov_max,
 			       u32 *ctov_max,
 			       u32 *cycle_max,
@@ -403,6 +419,55 @@ int dwmac5_est_irq_status(void __iomem *ioaddr, struct net_device *dev,
 	return status;
 }
 
+static void dwmac5_fpe_get_info(u32 *pmac_bit)
+{
+	*pmac_bit = FPE_PMAC_BIT;
+}
+
+static void dwmac5_fpe_set_txqpec(void *ioaddr, u32 txqpec, u32 txqmask)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_FPE_CTRL_STS);
+	value &= ~(txqmask << MTL_FPE_CTRL_STS_PEC_SHIFT);
+	value |= (txqpec << MTL_FPE_CTRL_STS_PEC_SHIFT);
+
+	writel(value, ioaddr + MTL_FPE_CTRL_STS);
+}
+
+static void dwmac5_fpe_set_enable(void *ioaddr, bool enable)
+{
+	u32 value;
+
+	value = readl(ioaddr + MAC_FPE_CTRL_STS);
+	if (enable)
+		value |= MAC_FPE_CTRL_STS_EFPE;
+	else
+		value &= ~MAC_FPE_CTRL_STS_EFPE;
+
+	writel(value, ioaddr + MAC_FPE_CTRL_STS);
+}
+
+void dwmac5_fpe_get_config(void *ioaddr, u32 *txqpec, bool *enable)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_FPE_CTRL_STS);
+	*txqpec = (value & MTL_FPE_CTRL_STS_PEC) >>
+		  MTL_FPE_CTRL_STS_PEC_SHIFT;
+
+	value = readl(ioaddr + MAC_FPE_CTRL_STS);
+	*enable = (bool)(value & MAC_FPE_CTRL_STS_EFPE);
+}
+
+void dwmac5_fpe_get_pmac_sts(void *ioaddr, u32 *hrs)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_FPE_CTRL_STS);
+	*hrs = (value & MTL_FPE_CTRL_STS_HRS) >> MTL_FPE_CTRL_STS_HRS_SHIFT;
+}
+
 static void dwmac5_tbs_get_max(u32 *leos_max,
 			       u32 *legos_max,
 			       u32 *ftos_max,
@@ -521,6 +586,7 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.est_get_gcl_depth = dwmac5_est_get_gcl_depth,
 	.est_get_ti_width = dwmac5_est_get_ti_width,
 	.est_get_txqcnt = dwmac5_est_get_txqcnt,
+	.est_get_rxqcnt = dwmac5_est_get_rxqcnt,
 	.est_get_max = dwmac5_est_get_max,
 	.est_write_gcl_config = dwmac5_est_write_gcl_config,
 	.est_read_gcl_config = dwmac5_est_read_gcl_config,
@@ -533,6 +599,11 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.est_get_bank = dwmac5_est_get_bank,
 	.est_switch_swol = dwmac5_est_switch_swol,
 	.est_irq_status = dwmac5_est_irq_status,
+	.fpe_get_info = dwmac5_fpe_get_info,
+	.fpe_set_txqpec = dwmac5_fpe_set_txqpec,
+	.fpe_set_enable = dwmac5_fpe_set_enable,
+	.fpe_get_config = dwmac5_fpe_get_config,
+	.fpe_get_pmac_sts = dwmac5_fpe_get_pmac_sts,
 	.tbs_get_max = dwmac5_tbs_get_max,
 	.tbs_set_estm = dwmac5_tbs_set_estm,
 	.tbs_set_leos = dwmac5_tbs_set_leos,
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 169ffa389fbd..68c9c58da425 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -362,7 +362,7 @@ struct stmmac_ops {
 	bool (*has_tsn_feat)(struct mac_device_info *hw, struct net_device *dev,
 			     enum tsn_feat_id featid);
 	void (*setup_tsn_hw)(struct mac_device_info *hw,
-			     struct net_device *dev);
+			     struct net_device *dev, u32 fprq);
 	int (*set_tsn_hwtunable)(struct mac_device_info *hw,
 				 struct net_device *dev,
 				 enum tsn_hwtunable_id id,
@@ -397,6 +397,15 @@ struct stmmac_ops {
 				   struct net_device *dev,
 				   u32 queue,
 				   u32 *idle_slope);
+	int (*fpe_set_txqpec)(struct mac_device_info *hw,
+			      struct net_device *dev, u32 txqpec);
+	int (*fpe_set_enable)(struct mac_device_info *hw,
+			      struct net_device *dev, bool enable);
+	int (*fpe_get_config)(struct mac_device_info *hw,
+			      struct net_device *dev, u32 *txqpec,
+			      bool *enable);
+	int (*fpe_show_pmac_sts)(struct mac_device_info *hw,
+				 struct net_device *dev);
 };
 
 #define stmmac_core_init(__priv, __args...) \
@@ -511,6 +520,14 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, dump_tsn_mmc, __args)
 #define stmmac_cbs_recal_idleslope(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, cbs_recal_idleslope, __args)
+#define stmmac_fpe_set_txqpec(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, fpe_set_txqpec, __args)
+#define stmmac_fpe_set_enable(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, fpe_set_enable, __args)
+#define stmmac_fpe_get_config(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, fpe_get_config, __args)
+#define stmmac_fpe_show_pmac_sts(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, fpe_show_pmac_sts, __args)
 
 /* Helpers for serdes */
 struct stmmac_serdes_ops {
@@ -677,11 +694,13 @@ struct tsn_mmc_stat;
 struct tsnif_ops {
 	u32 (*read_hwid)(void __iomem *ioaddr);
 	bool (*has_tsn_cap)(void __iomem *ioaddr, enum tsn_feat_id featid);
-	void (*hw_setup)(void __iomem *ioaddr, enum tsn_feat_id featid);
+	void (*hw_setup)(void __iomem *ioaddr, enum tsn_feat_id featid,
+			 u32 fprq);
 	/* IEEE 802.1Qbv Enhanced Scheduled Traffics (EST) */
 	u32 (*est_get_gcl_depth)(void __iomem *ioaddr);
 	u32 (*est_get_ti_width)(void __iomem *ioaddr);
 	u32 (*est_get_txqcnt)(void __iomem *ioaddr);
+	u32 (*est_get_rxqcnt)(void __iomem *ioaddr);
 	void (*est_get_max)(u32 *ptov_max, u32 *ctov_max, u32 *ct_max,
 			    u32 *idleslope_max);
 	int (*est_write_gcl_config)(void __iomem *ioaddr, u32 data, u32 addr,
@@ -704,6 +723,12 @@ struct tsnif_ops {
 	int (*est_irq_status)(void *ioaddr, struct net_device *dev,
 			      struct tsn_mmc_stat *mmc_stat,
 			      unsigned int txqcnt);
+	/* Frame Preemption (FPE) */
+	void (*fpe_get_info)(u32 *pmac_bit);
+	void (*fpe_set_txqpec)(void *ioaddr, u32 txqpec, u32 txqmask);
+	void (*fpe_set_enable)(void *ioaddr, bool enable);
+	void (*fpe_get_config)(void *ioaddr, u32 *txqpec, bool *enable);
+	void (*fpe_get_pmac_sts)(void *ioaddr, u32 *hrs);
 	/* Time-Based Scheduling (TBS) */
 	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max,
 			    u32 *ftos_max, u32 *fgos_max);
@@ -730,6 +755,8 @@ struct tsnif_ops {
 	tsnif_do_callback(__hw, est_get_ti_width, __args)
 #define tsnif_est_get_txqcnt(__hw, __args...) \
 	tsnif_do_callback(__hw, est_get_txqcnt, __args)
+#define tsnif_est_get_rxqcnt(__hw, __args...) \
+	tsnif_do_callback(__hw, est_get_rxqcnt, __args)
 #define tsnif_est_get_max(__hw, __args...) \
 	tsnif_do_void_callback(__hw, est_get_max, __args)
 #define tsnif_est_write_gcl_config(__hw, __args...) \
@@ -754,6 +781,16 @@ struct tsnif_ops {
 	tsnif_do_void_callback(__hw, est_switch_swol, __args)
 #define tsnif_est_irq_status(__hw, __args...) \
 	tsnif_do_callback(__hw, est_irq_status, __args)
+#define tsnif_fpe_get_info(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_get_info, __args)
+#define tsnif_fpe_set_txqpec(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_set_txqpec, __args)
+#define tsnif_fpe_set_enable(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_set_enable, __args)
+#define tsnif_fpe_get_config(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_get_config, __args)
+#define tsnif_fpe_get_pmac_sts(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_get_pmac_sts, __args)
 #define tsnif_tbs_get_max(__hw, __args...) \
 	tsnif_do_void_callback(__hw, tbs_get_max, __args)
 #define tsnif_tbs_set_estm(__hw, __args...) \
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 5ea03b015cf0..78b60d2a5b29 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -2667,7 +2667,7 @@ static int stmmac_hw_setup(struct net_device *dev, bool init_ptp)
 	/* Set HW VLAN stripping mode */
 	stmmac_set_hw_vlan_mode(priv, priv->ioaddr, dev->features);
 
-	stmmac_tsn_hw_setup(priv, priv->hw, priv->dev);
+	stmmac_tsn_hw_setup(priv, priv->hw, priv->dev, priv->plat->fprq);
 
 	/* Set TSN HW tunable */
 	if (priv->plat->ptov)
@@ -4908,6 +4908,11 @@ int stmmac_dvr_probe(struct device *device,
 				    true);
 		dev_info(priv->device, "EST feature enabled\n");
 	}
+	if (priv->hw->tsn_info.cap.fpe_support && priv->plat->tsn_fpe_en) {
+		stmmac_set_tsn_feat(priv, priv->hw, ndev, TSN_FEAT_ID_FPE,
+				    true);
+		dev_info(priv->device, "FPE feature enabled\n");
+	}
 	if (priv->hw->tsn_info.cap.tbs_support && priv->plat->tsn_tbs_en) {
 		stmmac_set_tsn_feat(priv, priv->hw, ndev, TSN_FEAT_ID_TBS,
 				    true);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index a2524398006b..9e5f881d6213 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -161,7 +161,10 @@ static int intel_mgbe_common_data(struct pci_dev *pdev,
 	plat->force_sf_dma_mode = 0;
 	plat->tso_en = 1;
 	plat->tsn_est_en = 1;
+	plat->tsn_fpe_en = 1;
 	plat->tsn_tbs_en = 1;
+	/* FPE HW Tunable */
+	plat->fprq = 1;
 	/* TBS HW Tunable */
 	plat->estm = 0;  /* Absolute Mode */
 	plat->leos = 0;  /* Launch Expiry Offset */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index a8f4aa430636..799face82466 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -94,15 +94,7 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_EST)) {
 		dev_info(pdev, "EST NOT supported\n");
 		cap->est_support = 0;
-		return 0;
-	}
-
-	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_TBS)) {
-		dev_info(pdev, "TBS NOT supported\n");
-		cap->tbs_support = 0;
-	} else {
-		dev_info(pdev, "TBS capable\n");
-		cap->tbs_support = 1;
+		goto check_fpe;
 	}
 
 	gcl_depth = tsnif_est_get_gcl_depth(hw, ioaddr);
@@ -150,19 +142,42 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 
 	cap->est_support = 1;
 
-	tsnif_tbs_get_max(hw, &cap->leos_max, &cap->legos_max,
-			  &cap->ftos_max, &cap->fgos_max);
-
 	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tils_max=%u, tqcnt=%u\n",
 		 gcl_depth, ti_wid, cap->ext_max, tils_max, cap->txqcnt);
 
-	if (cap->tbs_support) {
-		dev_info(pdev, "TBS: leos_max=%u, legos_max=%u\n",
-			 cap->leos_max, cap->legos_max);
-		dev_info(pdev, "TBS: ftos_max=%u, fgos_max=%u\n",
-			 cap->ftos_max, cap->fgos_max);
+check_fpe:
+	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_FPE)) {
+		dev_info(pdev, "FPE NOT supported\n");
+		cap->fpe_support = 0;
+		goto check_tbs;
+	}
+
+	tsnif_fpe_get_info(hw, &cap->pmac_bit);
+	cap->rxqcnt = tsnif_est_get_rxqcnt(hw, ioaddr);
+	cap->fpe_support = 1;
+
+	dev_info(pdev, "FPE: pMAC Bit=0x%x\n", cap->pmac_bit);
+
+check_tbs:
+	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_TBS)) {
+		dev_info(pdev, "TBS NOT supported\n");
+		cap->tbs_support = 0;
+		goto scan_done;
+	} else {
+		dev_info(pdev, "TBS capable\n");
+		cap->tbs_support = 1;
 	}
 
+	tsnif_tbs_get_max(hw, &cap->leos_max, &cap->legos_max,
+			  &cap->ftos_max, &cap->fgos_max);
+
+	dev_info(pdev, "TBS: leos_max=%u, legos_max=%u\n",
+		 cap->leos_max, cap->legos_max);
+	dev_info(pdev, "TBS: ftos_max=%u, fgos_max=%u\n",
+		 cap->ftos_max, cap->fgos_max);
+
+scan_done:
+
 	return 0;
 }
 
@@ -194,12 +209,25 @@ bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
  * stmmac_init_dma_engine() which resets MAC controller.
  * This is so-that MAC registers are not cleared.
  */
-void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev)
+void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev,
+		  u32 fprq)
 {
+	struct tsnif_info *info = &hw->tsn_info;
+	struct tsn_hw_cap *cap = &info->cap;
 	void __iomem *ioaddr = hw->pcsr;
 
 	if (tsn_has_feat(hw, dev, TSN_FEAT_ID_EST))
-		tsnif_hw_setup(hw, ioaddr, TSN_FEAT_ID_EST);
+		tsnif_hw_setup(hw, ioaddr, TSN_FEAT_ID_EST, 0);
+
+	if (tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		/* RxQ0 default to Express Frame, FPRQ != RxQ0 */
+		if (fprq > 0 && fprq < cap->rxqcnt) {
+			netdev_info(dev, "FPE: Set FPRQ = %d\n", fprq);
+			tsnif_hw_setup(hw, ioaddr, TSN_FEAT_ID_FPE, fprq);
+		} else {
+			netdev_warn(dev, "FPE: FPRQ is out-of-bound.\n");
+		}
+	}
 }
 
 int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
@@ -988,3 +1016,95 @@ int tsn_cbs_recal_idleslope(struct mac_device_info *hw, struct net_device *dev,
 
 	return 0;
 }
+
+int tsn_fpe_set_txqpec(struct mac_device_info *hw, struct net_device *dev,
+		       u32 txqpec)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	struct tsn_hw_cap *cap = &info->cap;
+	void __iomem *ioaddr = hw->pcsr;
+	u32 txqmask;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		netdev_info(dev, "FPE: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	/* Check PEC is within TxQ range */
+	txqmask = (1 << cap->txqcnt) - 1;
+	if (txqpec & ~txqmask) {
+		netdev_warn(dev, "FPE: Tx PEC is out-of-bound.\n");
+
+		return -EINVAL;
+	}
+
+	/* When EST and FPE are both enabled, TxQ0 is always preemptible
+	 * queue. If FPE is enabled, we expect at least lsb is set.
+	 * If FPE is not enabled, we should allow PEC = 0.
+	 */
+	if (txqpec && !(txqpec & cap->pmac_bit) && info->est_gcc.enable) {
+		netdev_warn(dev, "FPE: TxQ0 must not be express queue.\n");
+
+		return -EINVAL;
+	}
+
+	tsnif_fpe_set_txqpec(hw, ioaddr, txqpec, txqmask);
+	info->fpe_cfg.txqpec = txqpec;
+	netdev_info(dev, "FPE: TxQ PEC = 0x%x\n", txqpec);
+
+	return 0;
+}
+
+int tsn_fpe_set_enable(struct mac_device_info *hw, struct net_device *dev,
+		       bool enable)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		netdev_info(dev, "FPE: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	if (info->fpe_cfg.enable != enable) {
+		tsnif_fpe_set_enable(hw, ioaddr, enable);
+		info->fpe_cfg.enable = enable;
+	}
+
+	return 0;
+}
+
+int tsn_fpe_get_config(struct mac_device_info *hw, struct net_device *dev,
+		       u32 *txqpec, bool *enable)
+{
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		netdev_info(dev, "FPE: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	tsnif_fpe_get_config(hw, ioaddr, txqpec, enable);
+
+	return 0;
+}
+
+int tsn_fpe_show_pmac_sts(struct mac_device_info *hw, struct net_device *dev)
+{
+	void __iomem *ioaddr = hw->pcsr;
+	u32 hrs;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		netdev_info(dev, "FPE: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	tsnif_fpe_get_pmac_sts(hw, ioaddr, &hrs);
+
+	if (hrs)
+		netdev_info(dev, "FPE: pMAC is in Hold state.\n");
+	else
+		netdev_info(dev, "FPE: pMAC is in Release state.\n");
+
+	return 0;
+}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index dd366db0c8c8..5651633e20ed 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -27,6 +27,7 @@ enum tsn_hwtunable_id {
 /* TSN Feature Enabled List */
 enum tsn_feat_id {
 	TSN_FEAT_ID_EST = 0,
+	TSN_FEAT_ID_FPE = 1,
 	TSN_FEAT_ID_TBS = 2,
 	TSN_FEAT_ID_MAX,
 };
@@ -49,8 +50,10 @@ enum tsn_gcl_param_idx {
 /* TSN HW Capabilities */
 struct tsn_hw_cap {
 	bool est_support;	/* 1: supported */
+	bool fpe_support;	/* 1: supported */
 	bool tbs_support;	/* 1: supported */
 	u32 txqcnt;		/* Number of TxQ (control gate) */
+	u32 rxqcnt;		/* Number of RxQ (for FPRQ) */
 	u32 gcl_depth;		/* GCL depth. */
 	u32 ti_wid;		/* time interval width */
 	u32 ext_max;		/* Max time extension */
@@ -59,6 +62,8 @@ struct tsn_hw_cap {
 	u32 ptov_max;		/* Max PTP Offset */
 	u32 ctov_max;		/* Max Current Time Offset */
 	u32 idleslope_max;	/* Max idle slope */
+	/* FPE */
+	u32 pmac_bit;		/* Preemptible MAC bit */
 	u32 leos_max;		/* Launch Expiry Offset */
 	u32 legos_max;		/* Launch Expiry GSN Offset */
 	u32 ftos_max;		/* Max Fetch Time Offset */
@@ -95,6 +100,12 @@ struct est_gc_config {
 	bool enable;			/* 1: enabled */
 };
 
+/* FPE Configuration */
+struct fpe_config {
+	u32 txqpec;		/* TxQ Preemption Classification */
+	bool enable;		/* 1: enabled */
+};
+
 /* TSN MMC Statistics */
 struct tsn_mmc_desc {
 	bool valid;
@@ -110,6 +121,7 @@ struct tsnif_info {
 	bool feat_en[TSN_FEAT_ID_MAX];
 	u32 hwtunable[TSN_HWTUNA_MAX];
 	struct est_gc_config est_gcc;
+	struct fpe_config fpe_cfg;
 	struct tsn_mmc_stat mmc_stat;
 	const struct tsn_mmc_desc *mmc_desc;
 };
@@ -122,7 +134,8 @@ int tsn_feat_set(struct mac_device_info *hw, struct net_device *dev,
 		 enum tsn_feat_id featid, bool enable);
 bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
 		  enum tsn_feat_id featid);
-void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev);
+void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev,
+		  u32 fprq);
 int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 		      enum tsn_hwtunable_id id, const u32 data);
 int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
@@ -149,5 +162,12 @@ int tsn_mmc_dump(struct mac_device_info *hw,
 		 int index, unsigned long *count, const char **desc);
 int tsn_cbs_recal_idleslope(struct mac_device_info *hw, struct net_device *dev,
 			    u32 queue, u32 *idle_slope);
+int tsn_fpe_set_txqpec(struct mac_device_info *hw, struct net_device *dev,
+		       u32 txqpec);
+int tsn_fpe_set_enable(struct mac_device_info *hw, struct net_device *dev,
+		       bool enable);
+int tsn_fpe_get_config(struct mac_device_info *hw, struct net_device *dev,
+		       u32 *txqpec, bool *enable);
+int tsn_fpe_show_pmac_sts(struct mac_device_info *hw, struct net_device *dev);
 
 #endif /* __STMMAC_TSN_H__ */
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index df9c93ac96e2..24dc56ade269 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -184,6 +184,7 @@ struct plat_stmmacenet_data {
 	bool has_sun8i;
 	bool tso_en;
 	bool tsn_est_en;
+	bool tsn_fpe_en;
 	bool tsn_tbs_en;
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
@@ -203,6 +204,8 @@ struct plat_stmmacenet_data {
 	u32 ptov;
 	u32 ctov;
 	u32 tils;
+	/*FPE */
+	u32 fprq;
 	/* TBS */
 	u32 estm;
 	u32 leos;
-- 
2.22.0.545.g9c9b961d7e

