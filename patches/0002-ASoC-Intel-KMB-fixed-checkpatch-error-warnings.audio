From de68a5cdc3908379f35278bef3d3a22d8b828273 Mon Sep 17 00:00:00 2001
From: wsit <michael.wei.hong.sit@intel.com>
Date: Wed, 13 Jun 2018 10:34:14 +0800
Subject: [PATCH 2/9] ASoC:Intel:KMB: fixed checkpatch error/warnings

checkpatch for driver code

Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Signed-off-by: Sia Jee Heng <jee.heng.sia@intel.com>
---
 sound/soc/intel/boards/kmb-mach.c      | 25 ++++++++++--------
 sound/soc/intel/keembay/kmb_platform.c | 47 +++++++++++++++++-----------------
 sound/soc/intel/keembay/kmb_platform.h | 14 +++++-----
 3 files changed, 45 insertions(+), 41 deletions(-)

diff --git a/sound/soc/intel/boards/kmb-mach.c b/sound/soc/intel/boards/kmb-mach.c
index 91491c2..b809a3b 100644
--- a/sound/soc/intel/boards/kmb-mach.c
+++ b/sound/soc/intel/boards/kmb-mach.c
@@ -30,16 +30,16 @@
 #define I2S_MONO_CHANNEL 1
 #define I2S_STEREO_CHANNEL 2
 
-#define I2S_MIN_RATE 		8000
-#define I2S_MAX_RATE 		48000
+#define I2S_MIN_RATE		8000
+#define I2S_MAX_RATE		48000
 #define I2S_MIN_PERIODS		10
 #define I2S_MAX_PERIODS		50
-#define I2S_FIFO_SIZE 		8
+#define I2S_FIFO_SIZE		8
 
-#define I2S_MAX_BUFFER 			96000
-#define I2S_MIN_BUFFER 			96000
-#define I2S_MIN_PERIOD_BYTES 	640
-#define I2S_MAX_PERIOD_BYTES 	48000
+#define I2S_MAX_BUFFER		96000
+#define I2S_MIN_BUFFER		96000
+#define I2S_MIN_PERIOD_BYTES	640
+#define I2S_MAX_PERIOD_BYTES	48000
 
 static struct snd_pcm_hardware kmb_pcm_hw_stereo = {
 	.info =	(SNDRV_PCM_INFO_INTERLEAVED |
@@ -87,8 +87,9 @@ static int kmb_mach_dai_link_prepare(struct snd_pcm_substream *substream)
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
 	struct snd_soc_card *card = rtd->card;
+
 	return 0;
-}/*kmb_mach_dai_link_prepare*/
+} /*kmb_mach_dai_link_prepare*/
 
 static int kmb_mach_dai_link_hw_params(struct snd_pcm_substream *substream,
 				      struct snd_pcm_hw_params *params)
@@ -98,6 +99,7 @@ static int kmb_mach_dai_link_hw_params(struct snd_pcm_substream *substream,
 	struct snd_soc_card *card = rtd->card;
 	int ret = 0;
 	unsigned int fmt;
+
 	fmt =   SND_SOC_DAIFMT_I2S |
 			SND_SOC_DAIFMT_NB_NF |
 			SND_SOC_DAIFMT_CBS_CFS; //Codec Slave, SSP Master
@@ -128,7 +130,7 @@ static int kmb_mach_dai_link_startup(struct snd_pcm_substream *substream)
 	return snd_pcm_hw_constraint_list(str_runtime, 0,
 					   SNDRV_PCM_HW_PARAM_RATE,
 					   &constraints_48000);
-}/*kmb_mach_dai_link_startup*/
+} /*kmb_mach_dai_link_startup*/
 
 static struct snd_soc_ops kmb_mach_dai_link_ops = {
 	.startup = kmb_mach_dai_link_startup,
@@ -165,7 +167,7 @@ static int kmb_mach_audio_probe(struct platform_device *pdev)
 
 	card->dev = &pdev->dev;
 	kmb_mach.dev = &pdev->dev;
-	
+
 	ret = snd_soc_register_card(card);
 	if (ret) {
 		dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n",
@@ -178,6 +180,7 @@ static int kmb_mach_audio_probe(struct platform_device *pdev)
 static int kmb_mach_audio_remove(struct platform_device *pdev)
 {
 	struct snd_soc_card *soc_card = platform_get_drvdata(pdev);
+
 	snd_soc_card_set_drvdata(soc_card, NULL);
 	snd_soc_unregister_card(soc_card);
 	platform_set_drvdata(pdev, NULL);
@@ -204,5 +207,5 @@ module_platform_driver(kmb_mach_audio)
 MODULE_DESCRIPTION("Intel Audio machine driver for KeemBay");
 MODULE_AUTHOR("Sia Jee Heng <jee.heng.sia@intel.com>");
 MODULE_AUTHOR("Sit, Michael Wei Hong <michael.wei.hong.sit@intel.com>");
-MODULE_LICENSE("GPLV2");
+MODULE_LICENSE("GPL v2");
 MODULE_ALIAS("platform:kmb_mach");
diff --git a/sound/soc/intel/keembay/kmb_platform.c b/sound/soc/intel/keembay/kmb_platform.c
index f6118bd..c9e026c 100644
--- a/sound/soc/intel/keembay/kmb_platform.c
+++ b/sound/soc/intel/keembay/kmb_platform.c
@@ -47,7 +47,7 @@ static unsigned int dw_pcm_tx_##sample_bits(struct kmb_i2s_info *dev, \
 		struct snd_pcm_runtime *runtime, unsigned int tx_ptr, \
 		bool *period_elapsed) \
 { \
-	const u##sample_bits (*p)[2] = (void *)runtime->dma_area; \
+	const u##sample_bits(*p)[2] = (void *)runtime->dma_area; \
 	unsigned int period_pos = tx_ptr % runtime->period_size; \
 	int i; \
 \
@@ -68,7 +68,7 @@ static unsigned int dw_pcm_rx_##sample_bits(struct kmb_i2s_info *dev, \
 		struct snd_pcm_runtime *runtime, unsigned int rx_ptr, \
 		bool *period_elapsed) \
 { \
-	u##sample_bits (*p)[2] = (void *)runtime->dma_area; \
+	u##sample_bits(*p)[2] = (void *)runtime->dma_area; \
 	unsigned int period_pos = rx_ptr % runtime->period_size; \
 	int i; \
 \
@@ -189,7 +189,7 @@ static inline void i2s_clear_irqs(struct kmb_i2s_info *dev, u32 stream)
 static inline void i2s_disable_irqs(struct kmb_i2s_info *dev, u32 stream,
 				    int chan_nr)
 {
-	u32 i=0, irq;
+	u32 i = 0, irq;
 
 	if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		for (i = 0; i < (chan_nr / 2); i++) {
@@ -207,7 +207,7 @@ static inline void i2s_disable_irqs(struct kmb_i2s_info *dev, u32 stream,
 static inline void i2s_enable_irqs(struct kmb_i2s_info *dev, u32 stream,
 				   int chan_nr)
 {
-	u32 i=0, irq;
+	u32 i = 0, irq;
 
 	if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		for (i = 0; i < (chan_nr / 2); i++) {
@@ -249,7 +249,7 @@ static void kmb_pcm_transfer(struct kmb_i2s_info *dev, bool push)
 			cmpxchg(&dev->rx_ptr, ptr, new_ptr);
 		}
 
-		if (period_elapsed){
+		if (period_elapsed) {
 			snd_pcm_period_elapsed(substream);
 		}
 	}
@@ -259,6 +259,7 @@ static void kmb_pcm_transfer(struct kmb_i2s_info *dev, bool push)
 void kmb_pcm_push_tx(struct kmb_i2s_info *dev)
 {
 	int i;
+
 	kmb_pcm_transfer(dev, true);
 }
 
@@ -329,8 +330,8 @@ static irqreturn_t i2s_irq_handler(int irq, void *dev_id)
 {
 	struct kmb_i2s_info *dev = dev_id;
 	bool irq_valid = false;
-	u32 isr[4],regval;
-	int i=0;
+	u32 isr[4], regval;
+	int i = 0;
 
 //	for (i = 0; i < 4; i++){// Commented out for single I2S port on PSS
 		isr[i] = i2s_read_reg(dev->i2s_base, ISR(i));
@@ -366,7 +367,7 @@ static irqreturn_t i2s_irq_handler(int irq, void *dev_id)
 
 		/* Error Handling: RX */
 		if (isr[i] & ISR_RXFO) {
-			
+
 			dev_err(dev->dev, "RX overrun (ch_id=%d)\n", i);
 			irq_valid = true;
 		}
@@ -379,7 +380,7 @@ static irqreturn_t i2s_irq_handler(int irq, void *dev_id)
 }
 
 static const struct snd_soc_component_driver kmb_component = {
-        .name           = "kmb",
+	.name           = "kmb",
 };
 
 /*
@@ -638,7 +639,7 @@ static int kmb_dai_trigger(struct snd_pcm_substream *substream,
 
 static void i2s_config(struct kmb_i2s_info *dev, int stream)
 {
-	u32 ch_reg,regval;
+	u32 ch_reg, regval;
 	struct i2s_clk_config_data *config = &dev->config;
 
 	i2s_disable_channels(dev, stream);
@@ -772,9 +773,9 @@ static struct snd_soc_dai_ops kmb_dai_ops = {
 			SNDRV_PCM_RATE_16000 | SNDRV_PCM_RATE_22050 | \
 			SNDRV_PCM_RATE_44100 | SNDRV_PCM_RATE_48000)
 
-#define I2S_SAMPLE_RATES ( SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_CONTINUOUS)
+#define I2S_SAMPLE_RATES (SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_CONTINUOUS)
 
-#define I2S_SUPPORTED_FORMATS ( SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S24_3LE | \
+#define I2S_SUPPORTED_FORMATS (SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S24_3LE | \
 			SNDRV_PCM_FMTBIT_S16_LE | \
 			SNDRV_PCM_FMTBIT_U16_LE | \
 			SNDRV_PCM_FMTBIT_S8 | \
@@ -919,15 +920,15 @@ static int kmb_plat_dai_probe(struct platform_device *pdev)
 
 	cpr_base = ioremap(CPR_PHY_ADDRESS, 0x200);
 
-	write_cpr_reg(cpr_base,0x010,0xFFFFFFFF);
-	write_cpr_reg(cpr_base,0x014,0xFFFFFFF8);
-	write_cpr_reg(cpr_base,0x0,0xFFFFFFFF);
-	write_cpr_reg(cpr_base,0x0100,0xFFFFFFFF);
-	write_cpr_reg(cpr_base,0x0,0xE3FFFFFF);
-	write_cpr_reg(cpr_base,0x070,0x000A001E);
-	write_cpr_reg(cpr_base,0x0,0xFFFFFFFF);
-	write_cpr_reg(cpr_base,0x0,0xE3FFFFFF);
-	write_cpr_reg(cpr_base,0x11C,0x1FF8000F);
+	write_cpr_reg(cpr_base, 0x010, 0xFFFFFFFF);
+	write_cpr_reg(cpr_base, 0x014, 0xFFFFFFF8);
+	write_cpr_reg(cpr_base, 0x0, 0xFFFFFFFF);
+	write_cpr_reg(cpr_base, 0x0100, 0xFFFFFFFF);
+	write_cpr_reg(cpr_base, 0x0, 0xE3FFFFFF);
+	write_cpr_reg(cpr_base, 0x070, 0x000A001E);
+	write_cpr_reg(cpr_base, 0x0, 0xFFFFFFFF);
+	write_cpr_reg(cpr_base, 0x0, 0xE3FFFFFF);
+	write_cpr_reg(cpr_base, 0x11C, 0x1FF8000F);
 
 	i2s_info = devm_kzalloc(&pdev->dev, sizeof(struct kmb_i2s_info), GFP_KERNEL);
 	if (!i2s_info)
@@ -965,7 +966,7 @@ static int kmb_plat_dai_probe(struct platform_device *pdev)
 
 	if (i2s_info->capability & DW_I2S_MASTER) {
 		i2s_info->clk_i2s = devm_clk_get(&pdev->dev, clk_id);
-		if (IS_ERR(i2s_info->clk_i2s)){
+		if (IS_ERR(i2s_info->clk_i2s)) {
 			dev_err(&pdev->dev, "no clock configure method\n");
 			return PTR_ERR(i2s_info->clk_i2s);
 		}
@@ -981,7 +982,7 @@ static int kmb_plat_dai_probe(struct platform_device *pdev)
 		snd_soc_unregister_component(&pdev->dev);
 		return -EBUSY;
 	}
-	
+
 	ret = devm_snd_soc_register_component(&pdev->dev, &kmb_component,
 				intel_kmb_platform_dai,
 				ARRAY_SIZE(intel_kmb_platform_dai));
diff --git a/sound/soc/intel/keembay/kmb_platform.h b/sound/soc/intel/keembay/kmb_platform.h
index 07b5e225..e7c5a5c 100644
--- a/sound/soc/intel/keembay/kmb_platform.h
+++ b/sound/soc/intel/keembay/kmb_platform.h
@@ -38,21 +38,21 @@
 #include <sound/soc-dai.h>
 #include <sound/dmaengine_pcm.h>
 
-#define I2S_MIN_RATE 		8000
-#define I2S_MAX_RATE 		48000
+#define I2S_MIN_RATE		8000
+#define I2S_MAX_RATE		48000
 #define I2S_MIN_PERIODS		10
 #define I2S_MAX_PERIODS		50
-#define I2S_FIFO_SIZE 		0
+#define I2S_FIFO_SIZE		0
 
 #define NUMBER_OF_I2S_PORT      4
 /* I2S support */
 #define I2S_MONO_CHANNEL 1
 #define I2S_STEREO_CHANNEL 2
 
-#define I2S_MAX_BUFFER 			96000
-#define I2S_MIN_BUFFER 			96000
-#define I2S_MIN_PERIOD_BYTES 	640
-#define I2S_MAX_PERIOD_BYTES 	48000
+#define I2S_MAX_BUFFER		96000
+#define I2S_MIN_BUFFER		96000
+#define I2S_MIN_PERIOD_BYTES	640
+#define I2S_MAX_PERIOD_BYTES	48000
 
 /* TDM 8 support */
 #define I2S_TDM8_CHANNEL 8
-- 
2.7.4

