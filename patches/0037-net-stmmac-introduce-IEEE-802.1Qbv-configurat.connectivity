From 16186a1d61a65627af3d41be1e44c24618ef76dc Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Fri, 6 Jul 2018 06:16:28 +0800
Subject: [PATCH 37/89] net: stmmac: introduce IEEE 802.1Qbv configuration
 functionalities

IEEE 802.1Qbv Enhancements for Scheduled Traffics (EST) is available in
EQoS ver5.xx. The change adds basic EST functionalities:

a) EST initialization with hardware capabilities detection.
b) Setting Gate Control List (GCL), i.e. gate open/close & time intervals,
   and all GC Related Registers (GCRR), e.g., base time (BTR), cycle time
   (CTR), time extension (TER) and GC List Length (LLR).
c) Enable/disable EST.
d) Getting TSN hardware capabilities.
e) Getting Gate Control configuration either from driver data store or
   hardware.

We extend the main driver logic to include basic TSN capability discovery,
and setup. We also add EST feature enable/disable control.

The TSN driver framework is split into IP-specific and IP-agnostic and
the interface calls are all defined inside hwif.h:-

a) The set of tsnif_xxx APIs are for IP-specific and dwmac5_tsn.c contains
   all TSN implementation specific to IP v5.xx.
b) The set of stmmac_xxx_tsn_yyy APIs are for IP-agnostic logics that are
   called by stmmac_main.c and other high-level interface such as tc.

Reviewed-by: Voon Weifeng <weifeng.voon@intel.com>
Reviewed-by: Kweh Hock Leong <hock.leong.kweh@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/Makefile  |   2 +-
 drivers/net/ethernet/stmicro/stmmac/common.h  |   3 +
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |  11 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |  56 +-
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  | 249 ++++++++
 drivers/net/ethernet/stmicro/stmmac/hwif.h    | 131 ++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |  15 +
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 574 ++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  | 106 ++++
 include/linux/stmmac.h                        |   1 +
 10 files changed, 1146 insertions(+), 2 deletions(-)
 create mode 100644 drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
 create mode 100644 drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
 create mode 100644 drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h

diff --git a/drivers/net/ethernet/stmicro/stmmac/Makefile b/drivers/net/ethernet/stmicro/stmmac/Makefile
index 3230d2673cb5..d50c29afe70e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Makefile
+++ b/drivers/net/ethernet/stmicro/stmmac/Makefile
@@ -6,7 +6,7 @@ stmmac-objs:= stmmac_main.o stmmac_ethtool.o stmmac_mdio.o ring_mode.o	\
 	      mmc_core.o stmmac_hwtstamp.o stmmac_ptp.o dwmac4_descs.o	\
 	      dwmac4_dma.o dwmac4_lib.o dwmac4_core.o dwmac5.o hwif.o \
 	      stmmac_tc.o dwxgmac2_core.o dwxgmac2_dma.o dwxgmac2_descs.o \
-	      intel_serdes.o $(stmmac-y)
+	      intel_serdes.o stmmac_tsn.o dwmac5_tsn.o $(stmmac-y)
 
 stmmac-$(CONFIG_STMMAC_SELFTESTS) += stmmac_selftests.o
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/common.h b/drivers/net/ethernet/stmicro/stmmac/common.h
index db167adbf08e..4ef66574ae13 100644
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@ -21,6 +21,7 @@
 #include <linux/if_vlan.h>
 #endif
 
+#include "stmmac_tsn.h"
 #include "descs.h"
 #include "hwif.h"
 #include "mmc.h"
@@ -461,6 +462,8 @@ struct mac_device_info {
 	unsigned int promisc;
 	bool vlan_fail_q_en;
 	u8 vlan_fail_q;
+	const struct tsnif_ops *tsnif;
+	struct tsnif_info tsn_info;
 };
 
 struct stmmac_rx_routing {
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index eaea83783b7a..d21439b1811e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1102,6 +1102,17 @@ const struct stmmac_ops dwmac510_ops = {
 	.add_hw_vlan_rx_fltr = dwmac4_add_hw_vlan_rx_fltr,
 	.del_hw_vlan_rx_fltr = dwmac4_del_hw_vlan_rx_fltr,
 	.restore_hw_vlan_rx_fltr = dwmac4_restore_hw_vlan_rx_fltr,
+	.tsnif_setup = dwmac510_tsnif_setup,
+	.init_tsn = tsn_init,
+	.set_tsn_feat = tsn_feat_set,
+	.has_tsn_feat = tsn_has_feat,
+	.set_est_enable = tsn_est_enable_set,
+	.get_est_bank = tsn_est_bank_get,
+	.set_est_gce = tsn_est_gce_set,
+	.get_est_gcl_len = tsn_est_gcl_len_get,
+	.set_est_gcl_len = tsn_est_gcl_len_set,
+	.set_est_gcrr_times = tsn_est_gcrr_times_set,
+	.get_est_gcc = tsn_est_gcc_get,
 };
 
 static u32 dwmac4_get_num_vlan(void __iomem *ioaddr)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index e62181bf50ec..0b71ae6f592d 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -1,5 +1,6 @@
 // SPDX-License-Identifier: (GPL-2.0 OR MIT)
 // Copyright (c) 2017 Synopsys, Inc. and/or its affiliates.
+// Copyright (c) 2019, Intel Corporation.
 // stmmac Support for 5.xx Ethernet QoS cores
 
 #ifndef __DWMAC5_H__
@@ -81,6 +82,59 @@
 #define GMAC_RXQCTRL_VFFQ_SHIFT		17
 #define GMAC_RXQCTRL_VFFQE		BIT(16)
 
+/* DWMAC v5.xx supports the following Time Sensitive Networking protocols:
+ * 1) IEEE 802.1Qbv Enhancements for Scheduled Traffic (EST)
+ */
+
+/* MAC HW features3 bitmap */
+#define GMAC_HW_FEAT_ESTWID		GENMASK(21, 20)
+#define GMAC_HW_FEAT_ESTWID_SHIFT	20
+#define GMAC_HW_FEAT_ESTDEP		GENMASK(19, 17)
+#define GMAC_HW_FEAT_ESTDEP_SHIFT	17
+#define GMAC_HW_FEAT_ESTSEL		BIT(16)
+
+/* MTL EST control register */
+#define MTL_EST_CTRL			0x00000c50
+#define MTL_EST_CTRL_SSWL		BIT(1)	/* Switch to SWOL */
+#define MTL_EST_CTRL_EEST		BIT(0)	/* Enable EST */
+
+/* MTL EST status register */
+#define MTL_EST_STATUS			0x00000c58
+#define MTL_EST_STATUS_BTRL		GENMASK(11, 8)	/* BTR ERR loop cnt */
+#define MTL_EST_STATUS_BTRL_SHIFT	8
+#define MTL_EST_STATUS_BTRL_MAX		(0xF << 8)
+#define MTL_EST_STATUS_SWOL		BIT(7)	/* SW owned list */
+#define MTL_EST_STATUS_SWOL_SHIFT	7
+#define MTL_EST_STATUS_BTRE		BIT(1)	/* BTR Error */
+#define MTL_EST_STATUS_SWLC		BIT(0)	/* Switch to SWOL complete */
+
+/* MTL EST GCL control register */
+#define MTL_EST_GCL_CTRL		0x00000c80
+#define MTL_EST_GCL_CTRL_ADDR(dep)	GENMASK(8 + (dep) - 1, 8) /* GCL Addr */
+#define MTL_EST_GCL_CTRL_ADDR_VAL(addr)	((addr) << 8)
+#define GCL_CTRL_ADDR_BTR_LO		0x0
+#define GCL_CTRL_ADDR_BTR_HI		0x1
+#define GCL_CTRL_ADDR_CTR_LO		0x2
+#define GCL_CTRL_ADDR_CTR_HI		0x3
+#define GCL_CTRL_ADDR_TER		0x4
+#define GCL_CTRL_ADDR_LLR		0x5
+#define MTL_EST_GCL_CTRL_DBGB1		BIT(5)	/* Debug Mode Bank Select */
+#define MTL_EST_GCL_CTRL_DBGM		BIT(4)	/* Debug Mode */
+#define MTL_EST_GCL_CTRL_GCRR		BIT(2)	/* GC Related Registers */
+#define MTL_EST_GCL_CTRL_R1W0		BIT(1)	/* Read / Write Operation */
+#define GCL_OPS_R			BIT(1)
+#define GCL_OPS_W			0
+#define MTL_EST_GCL_CTRL_SRWO		BIT(0)	/* Start R/W Operation */
+
+/* MTL EST GCL data register */
+#define MTL_EST_GCL_DATA		0x00000c84
+
+/* EST Global defines */
+#define EST_CTR_HI_MAX			0xff	/* CTR Hi is 8-bit only */
+
+/* MAC Core Version */
+#define TSN_VER_MASK		0xFF
+
 int dwmac5_safety_feat_config(void __iomem *ioaddr, unsigned int asp);
 int dwmac5_safety_feat_irq_status(struct net_device *ndev,
 		void __iomem *ioaddr, unsigned int asp,
@@ -92,5 +146,5 @@ int dwmac5_rxp_config(void __iomem *ioaddr, struct stmmac_tc_entry *entries,
 int dwmac5_flex_pps_config(void __iomem *ioaddr, int index,
 			   struct stmmac_pps_cfg *cfg, bool enable,
 			   u32 sub_second_inc, u32 systime_flags);
-
+void dwmac510_tsnif_setup(struct mac_device_info *mac);
 #endif /* __DWMAC5_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
new file mode 100644
index 000000000000..64b263336b87
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -0,0 +1,249 @@
+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
+/* Copyright (c) 2019, Intel Corporation.
+ * DW EQoS v5.00 TSN IP Implementation
+ */
+#include <linux/iopoll.h>
+#include "dwmac4.h"
+#include "dwmac5.h"
+#include "hwif.h"
+#include "stmmac_tsn.h"
+
+static int est_set_gcl_addr(void __iomem *ioaddr, u32 addr,
+			    bool is_gcrr, u32 rwops, u32 dep,
+			    u32 dbgb, bool is_dbgm)
+{
+	u32 value;
+
+	value = MTL_EST_GCL_CTRL_ADDR_VAL(addr) & MTL_EST_GCL_CTRL_ADDR(dep);
+
+	if (is_dbgm) {
+		if (dbgb)
+			value |= MTL_EST_GCL_CTRL_DBGB1;
+
+		value |= MTL_EST_GCL_CTRL_DBGM;
+	}
+
+	if (is_gcrr)
+		value |= MTL_EST_GCL_CTRL_GCRR;
+
+	/* This is the only place SRWO is set and driver polls SRWO
+	 * for self-cleared before exit. Therefore, caller should
+	 * check return status for possible time out error.
+	 */
+	value |= (rwops | MTL_EST_GCL_CTRL_SRWO);
+
+	writel(value, ioaddr + MTL_EST_GCL_CTRL);
+
+	return readl_poll_timeout(ioaddr + MTL_EST_GCL_CTRL, value,
+				  !(value & MTL_EST_GCL_CTRL_SRWO),
+				  50000, 600000);
+}
+
+static u32 dwmac5_read_hwid(void __iomem *ioaddr)
+{
+	return (readl(ioaddr + GMAC4_VERSION) & TSN_VER_MASK);
+}
+
+static bool dwmac5_has_tsn_cap(void __iomem *ioaddr, enum tsn_feat_id featid)
+{
+	u32 hw_cap3 = readl(ioaddr + GMAC_HW_FEATURE3);
+
+	switch (featid) {
+	case TSN_FEAT_ID_EST:
+		return (hw_cap3 & GMAC_HW_FEAT_ESTSEL);
+	default:
+		return false;
+	};
+}
+
+static u32 dwmac5_est_get_gcl_depth(void __iomem *ioaddr)
+{
+	u32 hw_cap3;
+	u32 estdep;
+	u32 depth;
+
+	hw_cap3 = readl(ioaddr + GMAC_HW_FEATURE3);
+	estdep = (hw_cap3 & GMAC_HW_FEAT_ESTDEP) >> GMAC_HW_FEAT_ESTDEP_SHIFT;
+
+	switch (estdep) {
+	case 1:
+		depth = 64;
+		break;
+	case 2:
+		depth = 128;
+		break;
+	case 3:
+		depth = 256;
+		break;
+	case 4:
+		depth = 512;
+		break;
+	case 5:
+		depth = 1024;
+		break;
+	default:
+		depth = 0;
+	}
+
+	return depth;
+}
+
+static u32 dwmac5_est_get_ti_width(void __iomem *ioaddr)
+{
+	u32 hw_cap3;
+	u32 estwid;
+	u32 width;
+
+	hw_cap3 = readl(ioaddr + GMAC_HW_FEATURE3);
+	estwid = (hw_cap3 & GMAC_HW_FEAT_ESTWID) >> GMAC_HW_FEAT_ESTWID_SHIFT;
+
+	switch (estwid) {
+	case 1:
+		width = 16;
+		break;
+	case 2:
+		width = 20;
+		break;
+	case 3:
+		width = 24;
+		break;
+	default:
+		width = 0;
+	}
+
+	return width;
+}
+
+static u32 dwmac5_est_get_txqcnt(void __iomem *ioaddr)
+{
+	u32 hw_cap2 = readl(ioaddr + GMAC_HW_FEATURE2);
+
+	return ((hw_cap2 & GMAC_HW_FEAT_TXQCNT) >> 6) + 1;
+}
+
+static void dwmac5_est_get_max(u32 *cycle_max)
+{
+	*cycle_max = EST_CTR_HI_MAX;
+}
+
+static int dwmac5_est_write_gcl_config(void __iomem *ioaddr, u32 data, u32 addr,
+				       bool is_gcrr,
+				       u32 dbgb, bool is_dbgm)
+{
+	u32 dep = dwmac5_est_get_gcl_depth(ioaddr);
+
+	dep = ilog2(dep);
+	writel(data, ioaddr + MTL_EST_GCL_DATA);
+
+	return est_set_gcl_addr(ioaddr, addr, is_gcrr, GCL_OPS_W, dep,
+				dbgb, is_dbgm);
+}
+
+static int dwmac5_est_read_gcl_config(void __iomem *ioaddr, u32 *data, u32 addr,
+				      bool is_gcrr,
+				      u32 dbgb, bool is_dbgm)
+{
+	u32 dep = dwmac5_est_get_gcl_depth(ioaddr);
+	int ret;
+
+	dep = ilog2(dep);
+	ret = est_set_gcl_addr(ioaddr, addr, is_gcrr, GCL_OPS_R, dep,
+			       dbgb, is_dbgm);
+	if (ret)
+		return ret;
+
+	*data = readl(ioaddr + MTL_EST_GCL_DATA);
+
+	return ret;
+}
+
+static int dwmac5_est_read_gce(void __iomem *ioaddr, u32 row,
+			       u32 *gates, u32 *ti_nsec,
+			       u32 ti_wid, u32 txqcnt,
+			       u32 dbgb, bool is_dbgm)
+{
+	u32 gates_mask;
+	u32 ti_mask;
+	u32 value;
+	int ret;
+
+	gates_mask = (1 << txqcnt) - 1;
+	ti_mask = (1 << ti_wid) - 1;
+
+	ret = dwmac5_est_read_gcl_config(ioaddr, &value, row, 0, dbgb, is_dbgm);
+	if (ret)
+		return ret;
+
+	*ti_nsec = value & ti_mask;
+	*gates = (value >> ti_wid) & gates_mask;
+
+	return ret;
+}
+
+static int dwmac5_est_set_enable(void __iomem *ioaddr, bool enable)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_CTRL);
+	value &= ~(MTL_EST_CTRL_SSWL | MTL_EST_CTRL_EEST);
+	value |= (enable & MTL_EST_CTRL_EEST);
+
+	writel(value, ioaddr + MTL_EST_CTRL);
+
+	return 0;
+}
+
+static bool dwmac5_est_get_enable(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_CTRL);
+
+	return (value & MTL_EST_CTRL_EEST);
+}
+
+static u32 dwmac5_est_get_bank(void __iomem *ioaddr, bool is_own)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_STATUS);
+
+	value = ((value & MTL_EST_STATUS_SWOL) >>
+		MTL_EST_STATUS_SWOL_SHIFT);
+
+	if (is_own)
+		return value;
+	else
+		return (~value & 0x1);
+}
+
+static void dwmac5_est_switch_swol(void __iomem *ioaddr)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_EST_CTRL);
+	value |= MTL_EST_CTRL_SSWL;
+
+	writel(value, ioaddr + MTL_EST_CTRL);
+}
+
+const struct tsnif_ops dwmac510_tsnif_ops = {
+	.read_hwid = dwmac5_read_hwid,
+	.has_tsn_cap = dwmac5_has_tsn_cap,
+	.est_get_gcl_depth = dwmac5_est_get_gcl_depth,
+	.est_get_ti_width = dwmac5_est_get_ti_width,
+	.est_get_txqcnt = dwmac5_est_get_txqcnt,
+	.est_get_max = dwmac5_est_get_max,
+	.est_write_gcl_config = dwmac5_est_write_gcl_config,
+	.est_read_gcl_config = dwmac5_est_read_gcl_config,
+	.est_read_gce = dwmac5_est_read_gce,
+	.est_set_enable = dwmac5_est_set_enable,
+	.est_get_enable = dwmac5_est_get_enable,
+	.est_get_bank = dwmac5_est_get_bank,
+	.est_switch_swol = dwmac5_est_switch_swol,
+};
+
+void dwmac510_tsnif_setup(struct mac_device_info *mac)
+{
+	mac->tsnif = &dwmac510_tsnif_ops;
+}
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index c644ddd83eb1..5e796f714b02 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -257,6 +257,10 @@ struct rgmii_adv;
 struct stmmac_safety_stats;
 struct stmmac_tc_entry;
 struct stmmac_pps_cfg;
+enum tsn_feat_id;
+struct est_gc_entry;
+struct est_gcrr;
+struct est_gc_config;
 
 /* Helpers to program the MAC core */
 struct stmmac_ops {
@@ -348,6 +352,33 @@ struct stmmac_ops {
 				   __be16 proto, u16 vid);
 	void (*restore_hw_vlan_rx_fltr)(struct net_device *dev,
 					struct mac_device_info *hw);
+	/* TSN APIs */
+	void (*tsnif_setup)(struct mac_device_info *mac);
+	int (*init_tsn)(struct mac_device_info *hw, struct net_device *dev);
+	int (*set_tsn_feat)(struct mac_device_info *hw,
+			    struct net_device *dev,
+			    enum tsn_feat_id featid, bool enable);
+	bool (*has_tsn_feat)(struct mac_device_info *hw, struct net_device *dev,
+			     enum tsn_feat_id featid);
+	int (*set_est_enable)(struct mac_device_info *hw,
+			      struct net_device *dev, bool enable);
+	int (*get_est_bank)(struct mac_device_info *hw, struct net_device *dev,
+			    bool is_own, u32 *bank);
+	int (*set_est_gce)(struct mac_device_info *hw, struct net_device *dev,
+			   struct est_gc_entry *gce, u32 row,
+			   u32 dbgb, bool is_dbgm);
+	int (*get_est_gcl_len)(struct mac_device_info *hw,
+			       struct net_device *dev, u32 *gcl_len,
+			       u32 dbgb, bool is_dbgm);
+	int (*set_est_gcl_len)(struct mac_device_info *hw,
+			       struct net_device *dev, u32 gcl_len,
+			       u32 dbgb, bool is_dbgm);
+	int (*set_est_gcrr_times)(struct mac_device_info *hw,
+				  struct net_device *dev,
+				  struct est_gcrr *gcrr,
+				  u32 dbgb, bool is_dbgm);
+	int (*get_est_gcc)(struct mac_device_info *hw, struct net_device *dev,
+			   struct est_gc_config **gcc);
 };
 
 #define stmmac_core_init(__priv, __args...) \
@@ -428,6 +459,32 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, del_hw_vlan_rx_fltr, __args)
 #define stmmac_restore_hw_vlan_rx_fltr(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mac, restore_hw_vlan_rx_fltr, __args)
+#define stmmac_tsnif_setup(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, tsnif_setup, __args)
+#define stmmac_tsn_init(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, init_tsn, __args)
+#define stmmac_set_tsn_feat(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, set_tsn_feat, __args)
+#define stmmac_has_tsn_feat(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, has_tsn_feat, __args)
+#define stmmac_set_tsn_hwtunable(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, set_tsn_hwtunable, __args)
+#define stmmac_get_tsn_hwtunable(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, get_tsn_hwtunable, __args)
+#define stmmac_set_est_enable(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, set_est_enable, __args)
+#define stmmac_get_est_bank(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, get_est_bank, __args)
+#define stmmac_set_est_gce(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, set_est_gce, __args)
+#define stmmac_set_est_gcl_len(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, set_est_gcl_len, __args)
+#define stmmac_get_est_gcl_len(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, get_est_gcl_len, __args)
+#define stmmac_set_est_gcrr_times(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, set_est_gcrr_times, __args)
+#define stmmac_get_est_gcc(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, get_est_gcc, __args)
 
 /* Helpers for serdes */
 struct stmmac_serdes_ops {
@@ -555,4 +612,78 @@ extern const struct stmmac_mmc_ops dwmac_mmc_ops;
 
 int stmmac_hwif_init(struct stmmac_priv *priv);
 
+/* TSN Interface HW IP Specific Functions
+ * Note:
+ *  These functions implement IP specifics logics and are callable by TSN APIs
+ *  defined in struct stmmac_ops. To differentiate them from high level TSN
+ *  APIs, we use tsnif_xxx here.
+ */
+#define tsnif_do_void_callback(__hw, __cname,  __arg0, __args...) \
+({ \
+	int __result = -EINVAL; \
+	if ((__hw)->tsnif && (__hw)->tsnif->__cname) { \
+		(__hw)->tsnif->__cname((__arg0), ##__args); \
+		__result = 0; \
+	} \
+	__result; \
+})
+#define tsnif_do_callback(__hw, __cname,  __arg0, __args...) \
+({ \
+	int __result = -EINVAL; \
+	if ((__hw)->tsnif && (__hw)->tsnif->__cname) \
+		__result = (__hw)->tsnif->__cname((__arg0), ##__args); \
+	__result; \
+})
+
+struct tsnif_ops {
+	u32 (*read_hwid)(void __iomem *ioaddr);
+	bool (*has_tsn_cap)(void __iomem *ioaddr, enum tsn_feat_id featid);
+	/* IEEE 802.1Qbv Enhanced Scheduled Traffics (EST) */
+	u32 (*est_get_gcl_depth)(void __iomem *ioaddr);
+	u32 (*est_get_ti_width)(void __iomem *ioaddr);
+	u32 (*est_get_txqcnt)(void __iomem *ioaddr);
+	void (*est_get_max)(u32 *ct_max);
+	int (*est_write_gcl_config)(void __iomem *ioaddr, u32 data, u32 addr,
+				    bool is_gcrr,
+				    u32 dbgb, bool is_dbgm);
+	int (*est_read_gcl_config)(void __iomem *ioaddr, u32 *data, u32 addr,
+				   bool is_gcrr,
+				   u32 dbgb, bool is_dbgm);
+	int (*est_read_gce)(void __iomem *ioaddr, u32 row,
+			    u32 *gates, u32 *ti_nsec,
+			    u32 ti_wid, u32 txqcnt,
+			    u32 dbgb, bool is_dbgm);
+	int (*est_set_enable)(void __iomem *ioaddr, bool enable);
+	bool (*est_get_enable)(void __iomem *ioaddr);
+	u32 (*est_get_bank)(void __iomem *ioaddr, bool is_own);
+	void (*est_switch_swol)(void __iomem *ioaddr);
+};
+
+#define tsnif_read_hwid(__hw, __args...) \
+	tsnif_do_callback(__hw, read_hwid, __args)
+#define tsnif_has_tsn_cap(__hw, __args...) \
+	tsnif_do_callback(__hw, has_tsn_cap, __args)
+#define tsnif_est_get_gcl_depth(__hw, __args...) \
+	tsnif_do_callback(__hw, est_get_gcl_depth, __args)
+#define tsnif_est_get_ti_width(__hw, __args...) \
+	tsnif_do_callback(__hw, est_get_ti_width, __args)
+#define tsnif_est_get_txqcnt(__hw, __args...) \
+	tsnif_do_callback(__hw, est_get_txqcnt, __args)
+#define tsnif_est_get_max(__hw, __args...) \
+	tsnif_do_void_callback(__hw, est_get_max, __args)
+#define tsnif_est_write_gcl_config(__hw, __args...) \
+	tsnif_do_callback(__hw, est_write_gcl_config, __args)
+#define tsnif_est_read_gcl_config(__hw, __args...) \
+	tsnif_do_callback(__hw, est_read_gcl_config, __args)
+#define tsnif_est_read_gce(__hw, __args...) \
+	tsnif_do_callback(__hw, est_read_gce, __args)
+#define tsnif_est_set_enable(__hw, __args...) \
+	tsnif_do_callback(__hw, est_set_enable, __args)
+#define tsnif_est_get_enable(__hw, __args...) \
+	tsnif_do_callback(__hw, est_get_enable, __args)
+#define tsnif_est_get_bank(__hw, __args...) \
+	tsnif_do_callback(__hw, est_get_bank, __args)
+#define tsnif_est_switch_swol(__hw, __args...) \
+	tsnif_do_void_callback(__hw, est_switch_swol, __args)
+
 #endif /* __STMMAC_HWIF_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 62ae8485770c..02e953ee1639 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -45,6 +45,7 @@
 #include "dwxgmac2.h"
 #include "hwif.h"
 #include "intel_serdes.h"
+#include "stmmac_tsn.h"
 
 #define	STMMAC_ALIGN(x)		__ALIGN_KERNEL(x, SMP_CACHE_BYTES)
 #define	TSO_MAX_BUFF_SIZE	(SZ_16K - 1)
@@ -4512,6 +4513,12 @@ static int stmmac_hw_init(struct stmmac_priv *priv)
 	if (ret)
 		return ret;
 
+	/* Initialize TSN capability */
+	stmmac_tsnif_setup(priv, priv->hw);
+	ret = stmmac_tsn_init(priv, priv->hw, priv->dev);
+	if (ret)
+		return ret;
+
 	/* Get the HW capability (new GMAC newer than 3.50a) */
 	priv->hw_cap_support = stmmac_get_hw_features(priv);
 	if (priv->hw_cap_support) {
@@ -4715,6 +4722,14 @@ int stmmac_dvr_probe(struct device *device,
 
 	ndev->features |= ndev->hw_features | NETIF_F_HIGHDMA;
 	ndev->watchdog_timeo = msecs_to_jiffies(watchdog);
+
+	/* TSN HW feature setup */
+	if (priv->hw->tsn_info.cap.est_support && priv->plat->tsn_est_en) {
+		stmmac_set_tsn_feat(priv, priv->hw, ndev, TSN_FEAT_ID_EST,
+				    true);
+		dev_info(priv->device, "EST feature enabled\n");
+	}
+
 #ifdef STMMAC_VLAN_TAG_USED
 	/* Both mac100 and gmac support receive VLAN tag detection */
 	ndev->hw_features |= NETIF_F_HW_VLAN_CTAG_RX | NETIF_F_HW_VLAN_STAG_RX;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
new file mode 100644
index 000000000000..582552d5506b
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -0,0 +1,574 @@
+// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
+/* Copyright (c) 2019, Intel Corporation.
+ * TSN General APIs
+ */
+#include <linux/iopoll.h>
+#include <linux/string.h>
+#include <linux/time64.h>
+#include "stmmac_ptp.h"
+#include "common.h"
+
+static u32 est_get_gcl_total_intervals_nsec(struct est_gc_config *gcc,
+					    u32 bank, u32 gcl_len)
+{
+	struct est_gc_entry *gcl = gcc->gcb[bank].gcl;
+	u32 nsec = 0;
+	u32 row;
+
+	for (row = 0; row < gcl_len; row++) {
+		nsec += gcl->ti_nsec;
+		gcl++;
+	}
+
+	return nsec;
+}
+
+int tsn_init(struct mac_device_info *hw, struct net_device *dev)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	struct device *pdev = dev->dev.parent;
+	void __iomem *ioaddr = hw->pcsr;
+	struct est_gc_entry *gcl;
+	struct tsn_hw_cap *cap;
+	u32 gcl_depth;
+	u32 ti_wid;
+	u32 bank;
+	u32 hwid;
+	int ret;
+
+	/* Init TSN HW Cap */
+	cap = &hw->tsn_info.cap;
+	memset(cap, 0, sizeof(*cap));
+
+	hwid = tsnif_read_hwid(hw, ioaddr);
+	if (hwid < MIN_TSN_CORE_VER) {
+		dev_info(pdev, "IP v5.00 does not support TSN\n");
+		cap->est_support = 0;
+		return 0;
+	}
+
+	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_EST)) {
+		dev_info(pdev, "EST NOT supported\n");
+		cap->est_support = 0;
+		return 0;
+	}
+
+	gcl_depth = tsnif_est_get_gcl_depth(hw, ioaddr);
+	if (gcl_depth < 0) {
+		dev_err(pdev, "EST GCL depth(%d) < 0\n", gcl_depth);
+		cap->est_support = 0;
+		return -EINVAL;
+	}
+
+	for (bank = 0; bank < EST_GCL_BANK_MAX; bank++) {
+		gcl = devm_kzalloc(pdev,
+				   (sizeof(*gcl) * gcl_depth),
+				   GFP_KERNEL);
+		if (!gcl) {
+			ret = -ENOMEM;
+			break;
+		}
+		info->est_gcc.gcb[bank].gcl = gcl;
+		ret = 0;
+	}
+	if (ret) {
+		int i;
+
+		for (i = bank - 1; i >= 0; i--) {
+			gcl = info->est_gcc.gcb[bank].gcl;
+			devm_kfree(pdev, gcl);
+			info->est_gcc.gcb[bank].gcl = NULL;
+		}
+		dev_warn(pdev, "EST: GCL -ENOMEM\n");
+
+		return ret;
+	}
+
+	ti_wid = tsnif_est_get_ti_width(hw, ioaddr);
+	cap->ti_wid = ti_wid;
+	cap->gcl_depth = gcl_depth;
+
+	cap->ext_max = EST_TIWID_TO_EXTMAX(ti_wid);
+	cap->txqcnt = tsnif_est_get_txqcnt(hw, ioaddr);
+	tsnif_est_get_max(hw, &cap->cycle_max);
+	cap->est_support = 1;
+
+	dev_info(pdev, "EST: depth=%u, ti_wid=%u, ter_max=%uns, tqcnt=%u\n",
+		 gcl_depth, ti_wid, cap->ext_max, cap->txqcnt);
+
+	return 0;
+}
+
+int tsn_feat_set(struct mac_device_info *hw, struct net_device *dev,
+		 enum tsn_feat_id featid, bool enable)
+{
+	if (featid >= TSN_FEAT_ID_MAX) {
+		netdev_warn(dev, "TSN: invalid feature id(%u)\n", featid);
+		return -EINVAL;
+	}
+
+	hw->tsn_info.feat_en[featid] = enable;
+
+	return 0;
+}
+
+bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
+		  enum tsn_feat_id featid)
+{
+	if (featid >= TSN_FEAT_ID_MAX) {
+		netdev_warn(dev, "TSN: invalid feature id(%u)\n", featid);
+		return -EINVAL;
+	}
+
+	return hw->tsn_info.feat_en[featid];
+}
+
+int tsn_est_enable_set(struct mac_device_info *hw, struct net_device *dev,
+		       bool enable)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	tsnif_est_set_enable(hw, ioaddr, enable);
+
+	info->est_gcc.enable = enable;
+
+	return 0;
+}
+
+int tsn_est_bank_get(struct mac_device_info *hw, struct net_device *dev,
+		     bool is_own, u32 *bank)
+{
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	*bank = tsnif_est_get_bank(hw, ioaddr, is_own);
+
+	return 0;
+}
+
+int tsn_est_gce_set(struct mac_device_info *hw, struct net_device *dev,
+		    struct est_gc_entry *gce, u32 row,
+		    u32 dbgb, bool is_dbgm)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	struct tsn_hw_cap *cap = &info->cap;
+	void __iomem *ioaddr = hw->pcsr;
+	u32 ti_nsec = gce->ti_nsec;
+	u32 gates = gce->gates;
+	struct est_gc_entry *gcl;
+	u32 gates_mask;
+	u32 ti_wid;
+	u32 ti_max;
+	u32 value;
+	u32 bank;
+	int ret;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	if (dbgb >= EST_GCL_BANK_MAX)
+		return -EINVAL;
+
+	bank = is_dbgm ? dbgb : tsnif_est_get_bank(hw, ioaddr, 1);
+
+	if (!cap->gcl_depth || row > cap->gcl_depth) {
+		netdev_warn(dev, "EST: row(%u) > GCL depth(%u)\n",
+			    row, cap->gcl_depth);
+
+		return -EINVAL;
+	}
+
+	ti_wid = cap->ti_wid;
+	ti_max = (1 << ti_wid) - 1;
+	if (ti_nsec > ti_max) {
+		netdev_warn(dev, "EST: ti_nsec(%u) > upper limit(%u)\n",
+			    ti_nsec, ti_max);
+
+		return -EINVAL;
+	}
+
+	gates_mask = (1 << cap->txqcnt) - 1;
+	if (gates > gates_mask) {
+		netdev_warn(dev, "EST: gates 0x%x is out of boundary 0x%x",
+			    gates, gates_mask);
+
+		return -EINVAL;
+	}
+
+	value = ((gates & gates_mask) << ti_wid) | ti_nsec;
+
+	ret = tsnif_est_write_gcl_config(hw, ioaddr, value, row, I_GCE,
+					 dbgb, is_dbgm);
+	if (ret) {
+		netdev_err(dev, "EST: GCE write failed: bank=%u row=%u.\n",
+			   bank, row);
+
+		return ret;
+	}
+
+	netdev_info(dev, "EST: GCE write: dbgm=%u bank=%u row=%u, gc=0x%x.\n",
+		    is_dbgm, bank, row, value);
+
+	/* Since GC write is successful, update GCL copy of the driver */
+	gcl = info->est_gcc.gcb[bank].gcl + row;
+	gcl->gates = gates;
+	gcl->ti_nsec = ti_nsec;
+
+	return ret;
+}
+
+int tsn_est_gcl_len_get(struct mac_device_info *hw, struct net_device *dev,
+			u32 *gcl_len,
+			u32 dbgb, bool is_dbgm)
+{
+	void __iomem *ioaddr = hw->pcsr;
+	u32 value;
+	u32 bank;
+	int ret;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	if (dbgb >= EST_GCL_BANK_MAX)
+		return -EINVAL;
+
+	bank = is_dbgm ? dbgb : tsnif_est_get_bank(hw, ioaddr, 1);
+
+	ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+					GCL_PARAM_IDX_LLR, I_PRM,
+					dbgb, is_dbgm);
+	if (ret) {
+		netdev_err(dev, "read LLR fail at bank=%u\n", bank);
+
+		return ret;
+	}
+
+	*gcl_len = value;
+
+	return 0;
+}
+
+int tsn_est_gcl_len_set(struct mac_device_info *hw, struct net_device *dev,
+			u32 gcl_len,
+			u32 dbgb, bool is_dbgm)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	struct tsn_hw_cap *cap = &info->cap;
+	void __iomem *ioaddr = hw->pcsr;
+	int ret = 0;
+	struct est_gcrr *bgcrr;
+	u32 bank;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	if (dbgb >= EST_GCL_BANK_MAX)
+		return -EINVAL;
+
+	bank = is_dbgm ? dbgb : tsnif_est_get_bank(hw, ioaddr, 1);
+
+	if (gcl_len > cap->gcl_depth) {
+		netdev_warn(dev, "EST: GCL length(%u) > depth(%u)\n",
+			    gcl_len, cap->gcl_depth);
+
+		return -EINVAL;
+	}
+
+	bgcrr = &info->est_gcc.gcb[bank].gcrr;
+
+	if (gcl_len != bgcrr->llr) {
+		ret = tsnif_est_write_gcl_config(hw, ioaddr, gcl_len,
+						 GCL_PARAM_IDX_LLR, I_PRM,
+						 dbgb, is_dbgm);
+		if (ret) {
+			netdev_err(dev, "EST: GCRR programming failure!\n");
+
+			return ret;
+		}
+		bgcrr->llr = gcl_len;
+	}
+
+	return 0;
+}
+
+int tsn_est_gcrr_times_set(struct mac_device_info *hw,
+			   struct net_device *dev,
+			   struct est_gcrr *gcrr,
+			   u32 dbgb, bool is_dbgm)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	struct tsn_hw_cap *cap = &info->cap;
+	u32 cycle_nsec = gcrr->cycle_nsec;
+	u32 cycle_sec = gcrr->cycle_sec;
+	u32 base_nsec = gcrr->base_nsec;
+	void __iomem *ioaddr = hw->pcsr;
+	u32 base_sec = gcrr->base_sec;
+	u32 ext_nsec = gcrr->ter_nsec;
+	int ret = 0;
+	u64 val_ns, sys_ns, tti_ns;
+	struct est_gcrr *bgcrr;
+	u32 gcl_len, bank;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	if (dbgb >= EST_GCL_BANK_MAX)
+		return -EINVAL;
+
+	bank = is_dbgm ? dbgb : tsnif_est_get_bank(hw, ioaddr, 1);
+
+	if (base_nsec > NSEC_PER_SEC || cycle_nsec > NSEC_PER_SEC) {
+		netdev_warn(dev, "EST: base(%u) or cycle(%u) nsec > 1s !\n",
+			    base_nsec, cycle_nsec);
+
+		return -EINVAL;
+	}
+
+	/* Ensure base time is later than MAC system time */
+	val_ns = (u64)base_nsec;
+	val_ns += (u64)(base_sec * NSEC_PER_SEC);
+
+	/* Get the MAC system time */
+	sys_ns = readl(ioaddr + PTP_STNSR);
+	sys_ns += readl(ioaddr + PTP_STSR) * NSEC_PER_SEC;
+
+	if (val_ns <= sys_ns) {
+		netdev_warn(dev, "EST: base time(%llu) <= system time(%llu)\n",
+			    val_ns, sys_ns);
+
+		return -EINVAL;
+	}
+
+	if (cycle_sec > cap->cycle_max) {
+		netdev_warn(dev, "EST: cycle time(%u) > %u seconds\n",
+			    cycle_sec, cap->cycle_max);
+
+		return -EINVAL;
+	}
+
+	if (ext_nsec > cap->ext_max) {
+		netdev_warn(dev, "EST: invalid time extension(%u), max=%u\n",
+			    ext_nsec, cap->ext_max);
+
+		return -EINVAL;
+	}
+
+	bgcrr = &info->est_gcc.gcb[bank].gcrr;
+	gcl_len = bgcrr->llr;
+
+	/* Sanity test on GCL total time intervals against cycle time.
+	 * a) For GC length = 1, if its time interval is equal or greater
+	 *    than cycle time, it is a constant gate error.
+	 * b) If total time interval > cycle time, irregardless of GC
+	 *    length, it is not considered an error that GC list is
+	 *    truncated. In this case, giving a warning message is
+	 *    sufficient.
+	 * c) If total time interval < cycle time, irregardless of GC
+	 *    length, all GATES are OPEN after the last GC is processed
+	 *    until cycle time lapses. This is potentially due to poor
+	 *    GCL configuration but is not an error, so we inform user
+	 *    about it.
+	 */
+	tti_ns = (u64)est_get_gcl_total_intervals_nsec(&info->est_gcc, bank,
+						       gcl_len);
+	val_ns = (u64)cycle_nsec;
+	val_ns += (u64)(cycle_sec * NSEC_PER_SEC);
+	if (gcl_len == 1 && tti_ns >= val_ns) {
+		netdev_warn(dev, "EST: Constant gate error!\n");
+
+		return -EINVAL;
+	}
+
+	if (tti_ns > val_ns)
+		netdev_warn(dev, "EST: GCL is truncated!\n");
+
+	if (tti_ns < val_ns) {
+		netdev_info(dev,
+			    "EST: All GCs OPEN at %llu-ns of %llu-ns cycle\n",
+			    tti_ns, val_ns);
+	}
+
+	/* Finally, start programming GCL related registers if the value
+	 * differs from the driver copy for efficiency.
+	 */
+
+	if (base_nsec != bgcrr->base_nsec)
+		ret |= tsnif_est_write_gcl_config(hw, ioaddr, base_nsec,
+						  GCL_PARAM_IDX_BTR_LO, I_PRM,
+						  dbgb, is_dbgm);
+
+	if (base_sec != bgcrr->base_sec)
+		ret |= tsnif_est_write_gcl_config(hw, ioaddr, base_sec,
+						  GCL_PARAM_IDX_BTR_HI, I_PRM,
+						  dbgb, is_dbgm);
+
+	if (cycle_nsec != bgcrr->cycle_nsec)
+		ret |= tsnif_est_write_gcl_config(hw, ioaddr, cycle_nsec,
+						  GCL_PARAM_IDX_CTR_LO, I_PRM,
+						  dbgb, is_dbgm);
+
+	if (cycle_sec != bgcrr->cycle_sec)
+		ret |= tsnif_est_write_gcl_config(hw, ioaddr, cycle_sec,
+						  GCL_PARAM_IDX_CTR_HI, I_PRM,
+						  dbgb, is_dbgm);
+
+	if (ext_nsec != bgcrr->ter_nsec)
+		ret |= tsnif_est_write_gcl_config(hw, ioaddr, ext_nsec,
+						  GCL_PARAM_IDX_TER, I_PRM,
+						  dbgb, is_dbgm);
+
+	if (ret) {
+		netdev_err(dev, "EST: GCRR programming failure!\n");
+
+		return ret;
+	}
+
+	/* Finally, we are ready to switch SWOL now. */
+	tsnif_est_switch_swol(hw, ioaddr);
+
+	/* Update driver copy */
+	bgcrr->base_sec = base_sec;
+	bgcrr->base_nsec = base_nsec;
+	bgcrr->cycle_sec = cycle_sec;
+	bgcrr->cycle_nsec = cycle_nsec;
+	bgcrr->ter_nsec = ext_nsec;
+
+	netdev_info(dev, "EST: gcrr set successful\n");
+
+	return 0;
+}
+
+int tsn_est_gcc_get(struct mac_device_info *hw, struct net_device *dev,
+		    struct est_gc_config **gcc)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+	struct est_gc_config *pgcc;
+	u32 ti_wid;
+	u32 txqcnt;
+	u32 value;
+	u32 bank;
+	int ret;
+
+	if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_EST)) {
+		netdev_info(dev, "EST: feature unsupported\n");
+		return -ENOTSUPP;
+	}
+
+	/* Get GC config from HW */
+	pgcc = &info->est_gcc;
+	pgcc->enable = tsnif_est_get_enable(hw, ioaddr);
+
+	for (bank = 0; bank < EST_GCL_BANK_MAX; bank++) {
+		u32 llr, row;
+		struct est_gc_bank *gcbc = &pgcc->gcb[bank];
+
+		ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+						GCL_PARAM_IDX_BTR_LO, I_PRM,
+						bank, 1);
+		if (ret) {
+			netdev_err(dev, "read BTR(low) fail at bank=%u\n",
+				   bank);
+
+			return ret;
+		}
+		gcbc->gcrr.base_nsec = value;
+
+		ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+						GCL_PARAM_IDX_BTR_HI, I_PRM,
+						bank, 1);
+		if (ret) {
+			netdev_err(dev, "read BTR(high) fail at bank=%u\n",
+				   bank);
+
+			return ret;
+		}
+		gcbc->gcrr.base_sec = value;
+
+		ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+						GCL_PARAM_IDX_CTR_LO, I_PRM,
+						bank, 1);
+		if (ret) {
+			netdev_err(dev, "read CTR(low) fail at bank=%u\n",
+				   bank);
+
+			return ret;
+		}
+		gcbc->gcrr.cycle_nsec = value;
+
+		ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+						GCL_PARAM_IDX_CTR_HI, I_PRM,
+						bank, 1);
+		if (ret) {
+			netdev_err(dev, "read CTR(high) fail at bank=%u\n",
+				   bank);
+
+			return ret;
+		}
+		gcbc->gcrr.cycle_sec = value;
+
+		ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+						GCL_PARAM_IDX_TER, I_PRM,
+						bank, 1);
+		if (ret) {
+			netdev_err(dev, "read TER fail at bank=%u\n", bank);
+
+			return ret;
+		}
+		gcbc->gcrr.ter_nsec = value;
+
+		ret = tsnif_est_read_gcl_config(hw, ioaddr, &value,
+						GCL_PARAM_IDX_LLR, I_PRM,
+						bank, 1);
+		if (ret) {
+			netdev_err(dev, "read LLR fail at bank=%u\n", bank);
+
+			return ret;
+		}
+		gcbc->gcrr.llr = value;
+		llr = value;
+
+		ti_wid = info->cap.ti_wid;
+		txqcnt = info->cap.txqcnt;
+		for (row = 0; row < llr; row++) {
+			struct est_gc_entry *gce = gcbc->gcl + row;
+			u32 gates, ti_nsec;
+
+			ret = tsnif_est_read_gce(hw, ioaddr, row,
+						 &gates, &ti_nsec,
+						 ti_wid, txqcnt, bank, 1);
+			if (ret) {
+				netdev_err(dev,
+					   "read GCE fail at bank=%u row=%u\n",
+					   bank, row);
+
+				return ret;
+			}
+			gce->gates = gates;
+			gce->ti_nsec = ti_nsec;
+		}
+	}
+
+	*gcc = pgcc;
+	netdev_info(dev, "EST: read GCL from HW done.\n");
+
+	return 0;
+}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
new file mode 100644
index 000000000000..e70ee6eea0d0
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -0,0 +1,106 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019, Intel Corporation.
+ * Time-Sensitive Networking (TSN) Header
+ */
+
+#ifndef __STMMAC_TSN_H__
+#define __STMMAC_TSN_H__
+
+#define MIN_TSN_CORE_VER	0x50
+#define EST_GCL_BANK_MAX		(2)
+#define EST_TIWID_TO_EXTMAX(ti_wid)	((1 << ((ti_wid) + 7)) - 1)
+
+/* TSN Feature Enabled List */
+enum tsn_feat_id {
+	TSN_FEAT_ID_EST = 0,
+	TSN_FEAT_ID_MAX,
+};
+
+/* TSN GCL Parameter Index */
+#define I_GCE		0	/* Is GCE */
+#define I_PRM		1	/* Is GCL Parameters */
+/* Currently, the order of Param Index matches the GCL addr
+ * order defined in IPv5.xx MTL EST GCL control register
+ */
+enum tsn_gcl_param_idx {
+	GCL_PARAM_IDX_BTR_LO = 0,
+	GCL_PARAM_IDX_BTR_HI = 1,
+	GCL_PARAM_IDX_CTR_LO = 2,
+	GCL_PARAM_IDX_CTR_HI = 3,
+	GCL_PARAM_IDX_TER = 4,
+	GCL_PARAM_IDX_LLR = 5,
+};
+
+/* TSN HW Capabilities */
+struct tsn_hw_cap {
+	bool est_support;	/* 1: supported */
+	u32 txqcnt;		/* Number of TxQ (control gate) */
+	u32 gcl_depth;		/* GCL depth. */
+	u32 ti_wid;		/* time interval width */
+	u32 ext_max;		/* Max time extension */
+	u32 cycle_max;		/* Max Cycle Time */
+};
+
+/* EST Gate Control Entry */
+struct est_gc_entry {
+	u32 gates;		/* gate control: 0: closed,
+				 *               1: open.
+				 */
+	u32 ti_nsec;		/* time interval in nsec */
+};
+
+/* EST GCL Related Registers */
+struct est_gcrr {
+	u32 base_nsec;		/* base time denominator (nsec) */
+	u32 base_sec;		/* base time numerator (sec) */
+	u32 cycle_nsec;		/* cycle time denominator (nsec) */
+	u32 cycle_sec;		/* cycle time numerator sec)*/
+	u32 ter_nsec;		/* time extension (nsec) */
+	u32 llr;		/* GC list length */
+};
+
+/* EST Gate Control bank */
+struct est_gc_bank {
+	struct est_gc_entry *gcl;	/* Gate Control List */
+	struct est_gcrr gcrr;		/* GCL Related Registers */
+};
+
+/* EST Gate Control Configuration */
+struct est_gc_config {
+	struct est_gc_bank gcb[EST_GCL_BANK_MAX];
+	bool enable;			/* 1: enabled */
+};
+
+struct tsnif_info {
+	struct tsn_hw_cap cap;
+	bool feat_en[TSN_FEAT_ID_MAX];
+	struct est_gc_config est_gcc;
+};
+
+struct mac_device_info;
+
+/* TSN functions */
+int tsn_init(struct mac_device_info *hw, struct net_device *dev);
+int tsn_feat_set(struct mac_device_info *hw, struct net_device *dev,
+		 enum tsn_feat_id featid, bool enable);
+bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
+		  enum tsn_feat_id featid);
+int tsn_est_enable_set(struct mac_device_info *hw, struct net_device *dev,
+		       bool enable);
+int tsn_est_bank_get(struct mac_device_info *hw, struct net_device *dev,
+		     bool is_own, u32 *bank);
+int tsn_est_gce_set(struct mac_device_info *hw, struct net_device *dev,
+		    struct est_gc_entry *gce, u32 row,
+		    u32 dbgb, bool is_dbgm);
+int tsn_est_gcl_len_set(struct mac_device_info *hw, struct net_device *dev,
+			u32 gcl_len, u32 dbgb, bool is_dbgm);
+int tsn_est_gcl_len_get(struct mac_device_info *hw, struct net_device *dev,
+			u32 *gcl_len, u32 dbgb, bool is_dbgm);
+int tsn_est_gcrr_times_set(struct mac_device_info *hw,
+			   struct net_device *dev,
+			   struct est_gcrr *gcrr,
+			   u32 dbgb, bool is_dbgm);
+int tsn_est_gcc_get(struct mac_device_info *hw, struct net_device *dev,
+		    struct est_gc_config **gcc);
+
+#endif /* __STMMAC_TSN_H__ */
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 870a6ba7e387..f9832f3be04b 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -181,6 +181,7 @@ struct plat_stmmacenet_data {
 	int has_serdes;
 	bool has_sun8i;
 	bool tso_en;
+	bool tsn_est_en;
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
 	int has_xgmac;
-- 
2.22.0.545.g9c9b961d7e

