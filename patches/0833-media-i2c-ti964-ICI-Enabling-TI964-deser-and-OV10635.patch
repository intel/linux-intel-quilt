From 9daee7e087932bdc565e25a58108672b3c57b9b7 Mon Sep 17 00:00:00 2001
From: "Gopal, Puunithaaraj" <puunithaaraj.gopal@intel.com>
Date: Wed, 5 Dec 2018 22:36:31 +0800
Subject: [PATCH 0833/1225] media: i2c: ti964: [ICI] Enabling TI964 deser and
 OV10635 sensor

Add support of TI963 FDP-Link III deserializer and OV10635 camera sensor

Change-Id: I29d58bca9f3e18e837215dc047ed0731cb8b2671
Tracked-On: PKT-1644
Tracked-On: OAM-74863
Signed-off-by: Bandi, Kushal <kushal.bandi@intel.com>
---
 drivers/media/i2c/Kconfig                          |    4 +
 drivers/media/i2c/Makefile                         |    1 +
 .../i2c/crlmodule-lite/crl_ov10635_configuration.h | 6360 ++++++++++++++++++++
 drivers/media/i2c/crlmodule-lite/crlmodule-core.c  |  283 +-
 drivers/media/i2c/crlmodule-lite/crlmodule-data.c  |    2 +
 .../media/i2c/crlmodule-lite/crlmodule-sensor-ds.h |    1 +
 drivers/media/i2c/ici/Kconfig                      |   13 +
 drivers/media/i2c/ici/Makefile                     |    2 +
 drivers/media/i2c/ici/ti964_ici.c                  | 1128 ++++
 drivers/media/pci/intel/ici/ici-isys.c             |  276 +-
 .../media/platform/intel/ipu4-ici-bxt-p-pdata.c    |  191 +-
 include/media/crlmodule-lite.h                     |    2 +
 12 files changed, 7999 insertions(+), 264 deletions(-)
 create mode 100644 drivers/media/i2c/crlmodule-lite/crl_ov10635_configuration.h
 create mode 100644 drivers/media/i2c/ici/Kconfig
 create mode 100644 drivers/media/i2c/ici/Makefile
 create mode 100644 drivers/media/i2c/ici/ti964_ici.c

diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 4d3ee27..07f112a 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -1098,4 +1098,8 @@ endif
 
 endmenu
 
+if VIDEO_INTEL_ICI
+	source "drivers/media/i2c/ici/Kconfig"
+endif
+
 endif
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index f1e412a..7c6a6ba 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -116,3 +116,4 @@ obj-$(CONFIG_VIDEO_TI964) += ti964.o
 obj-$(CONFIG_VIDEO_MAX9286) += max9286.o
 obj-$(CONFIG_VIDEO_TI960) += ti960.o
 obj-$(CONFIG_VIDEO_CRLMODULE_LITE) += crlmodule-lite/
+obj-$(CONFIG_VIDEO_INTEL_ICI) += ici/
diff --git a/drivers/media/i2c/crlmodule-lite/crl_ov10635_configuration.h b/drivers/media/i2c/crlmodule-lite/crl_ov10635_configuration.h
new file mode 100644
index 00000000..012fdee
--- /dev/null
+++ b/drivers/media/i2c/crlmodule-lite/crl_ov10635_configuration.h
@@ -0,0 +1,6360 @@
+/*
+ * Copyright (c) 2016--2017 Intel Corporation.
+ *
+ * Author: Yunliang Ding <yunliang.ding@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __CRLMODULE_OV10635_CONFIGURATION_H_
+#define __CRLMODULE_OV10635_CONFIGURATION_H_
+
+#include "crlmodule-sensor-ds.h"
+
+#define OV10635_REG_RESET		0x0103
+
+static struct crl_register_write_rep ov10635_1280_800_YUV_HDR[] = {
+	{0x301b, CRL_REG_LEN_08BIT, 0xff},
+	{0x301c, CRL_REG_LEN_08BIT, 0xff},
+	{0x301a, CRL_REG_LEN_08BIT, 0xff},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x6900, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6901, CRL_REG_LEN_08BIT, 0x11},
+	{0x3503, CRL_REG_LEN_08BIT, 0x10},
+	{0x3025, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x20},
+	{0x3004, CRL_REG_LEN_08BIT, 0x21},
+	{0x3005, CRL_REG_LEN_08BIT, 0x20},
+	{0x3006, CRL_REG_LEN_08BIT, 0x91},
+	{0x3600, CRL_REG_LEN_08BIT, 0x74},
+	{0x3601, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3612, CRL_REG_LEN_08BIT, 0x00},
+	{0x3611, CRL_REG_LEN_08BIT, 0x67},
+	{0x3633, CRL_REG_LEN_08BIT, 0xca},
+	{0x3602, CRL_REG_LEN_08BIT, 0x2f},
+	{0x3603, CRL_REG_LEN_08BIT, 0x00},
+	{0x3630, CRL_REG_LEN_08BIT, 0x28},
+	{0x3631, CRL_REG_LEN_08BIT, 0x16},
+	{0x3714, CRL_REG_LEN_08BIT, 0x10},
+	{0x371d, CRL_REG_LEN_08BIT, 0x01},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x3020, CRL_REG_LEN_08BIT, 0x0b},
+	{0x3702, CRL_REG_LEN_08BIT, 0x20},
+	{0x3703, CRL_REG_LEN_08BIT, 0x48},
+	{0x3704, CRL_REG_LEN_08BIT, 0x32},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x370c, CRL_REG_LEN_08BIT, 0xc7},
+	{0x370d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3712, CRL_REG_LEN_08BIT, 0x00},
+	{0x3713, CRL_REG_LEN_08BIT, 0x20},
+	{0x3715, CRL_REG_LEN_08BIT, 0x04},
+	{0x381d, CRL_REG_LEN_08BIT, 0x40},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3822, CRL_REG_LEN_08BIT, 0x50},
+	{0x3824, CRL_REG_LEN_08BIT, 0x50},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3804, CRL_REG_LEN_08BIT, 0x05},
+	{0x3805, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3806, CRL_REG_LEN_08BIT, 0x03},
+	{0x3807, CRL_REG_LEN_08BIT, 0x29},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0x04},
+	{0x3808, CRL_REG_LEN_08BIT, 0x05},
+	{0x3809, CRL_REG_LEN_08BIT, 0x00},
+	{0x380a, CRL_REG_LEN_08BIT, 0x03},
+	{0x380b, CRL_REG_LEN_08BIT, 0x20},
+	{0x380c, CRL_REG_LEN_08BIT, 0x07},
+	{0x380d, CRL_REG_LEN_08BIT, 0x71},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x03},
+	{0x6e43, CRL_REG_LEN_08BIT, 0x48},
+	{0x380e, CRL_REG_LEN_08BIT, 0x03},
+	{0x380f, CRL_REG_LEN_08BIT, 0x48},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x3811, CRL_REG_LEN_08BIT, 0x10},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3828, CRL_REG_LEN_08BIT, 0x03},
+	{0x3829, CRL_REG_LEN_08BIT, 0x10},
+	{0x382a, CRL_REG_LEN_08BIT, 0x10},
+	{0x382b, CRL_REG_LEN_08BIT, 0x10},
+	{0x3621, CRL_REG_LEN_08BIT, 0x64},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x56d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d6, CRL_REG_LEN_08BIT, 0x80},
+	{0x56d7, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x56da, CRL_REG_LEN_08BIT, 0x80},
+	{0x56db, CRL_REG_LEN_08BIT, 0x00},
+	{0x56dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e9, CRL_REG_LEN_08BIT, 0x7f},
+	{0x56ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x56eb, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5100, CRL_REG_LEN_08BIT, 0x00},
+	{0x5101, CRL_REG_LEN_08BIT, 0x80},
+	{0x5102, CRL_REG_LEN_08BIT, 0x00},
+	{0x5103, CRL_REG_LEN_08BIT, 0x80},
+	{0x5104, CRL_REG_LEN_08BIT, 0x00},
+	{0x5105, CRL_REG_LEN_08BIT, 0x80},
+	{0x5106, CRL_REG_LEN_08BIT, 0x00},
+	{0x5107, CRL_REG_LEN_08BIT, 0x80},
+	{0x5108, CRL_REG_LEN_08BIT, 0x00},
+	{0x5109, CRL_REG_LEN_08BIT, 0x00},
+	{0x510a, CRL_REG_LEN_08BIT, 0x00},
+	{0x510b, CRL_REG_LEN_08BIT, 0x00},
+	{0x510c, CRL_REG_LEN_08BIT, 0x00},
+	{0x510d, CRL_REG_LEN_08BIT, 0x00},
+	{0x510e, CRL_REG_LEN_08BIT, 0x00},
+	{0x510f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5110, CRL_REG_LEN_08BIT, 0x00},
+	{0x5111, CRL_REG_LEN_08BIT, 0x80},
+	{0x5112, CRL_REG_LEN_08BIT, 0x00},
+	{0x5113, CRL_REG_LEN_08BIT, 0x80},
+	{0x5114, CRL_REG_LEN_08BIT, 0x00},
+	{0x5115, CRL_REG_LEN_08BIT, 0x80},
+	{0x5116, CRL_REG_LEN_08BIT, 0x00},
+	{0x5117, CRL_REG_LEN_08BIT, 0x80},
+	{0x5118, CRL_REG_LEN_08BIT, 0x00},
+	{0x5119, CRL_REG_LEN_08BIT, 0x00},
+	{0x511a, CRL_REG_LEN_08BIT, 0x00},
+	{0x511b, CRL_REG_LEN_08BIT, 0x00},
+	{0x511c, CRL_REG_LEN_08BIT, 0x00},
+	{0x511d, CRL_REG_LEN_08BIT, 0x00},
+	{0x511e, CRL_REG_LEN_08BIT, 0x00},
+	{0x511f, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x5006, CRL_REG_LEN_08BIT, 0x24},
+	{0x5608, CRL_REG_LEN_08BIT, 0x0d},
+	{0x52d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x528d, CRL_REG_LEN_08BIT, 0x08},
+	{0x5293, CRL_REG_LEN_08BIT, 0x12},
+	{0x52d3, CRL_REG_LEN_08BIT, 0x12},
+	{0x5288, CRL_REG_LEN_08BIT, 0x06},
+	{0x5289, CRL_REG_LEN_08BIT, 0x20},
+	{0x52c8, CRL_REG_LEN_08BIT, 0x06},
+	{0x52c9, CRL_REG_LEN_08BIT, 0x20},
+	{0x52cd, CRL_REG_LEN_08BIT, 0x04},
+	{0x5381, CRL_REG_LEN_08BIT, 0x00},
+	{0x5382, CRL_REG_LEN_08BIT, 0xff},
+	{0x5589, CRL_REG_LEN_08BIT, 0x76},
+	{0x558a, CRL_REG_LEN_08BIT, 0x47},
+	{0x558b, CRL_REG_LEN_08BIT, 0xef},
+	{0x558c, CRL_REG_LEN_08BIT, 0xc9},
+	{0x558d, CRL_REG_LEN_08BIT, 0x49},
+	{0x558e, CRL_REG_LEN_08BIT, 0x30},
+	{0x558f, CRL_REG_LEN_08BIT, 0x67},
+	{0x5590, CRL_REG_LEN_08BIT, 0x3f},
+	{0x5591, CRL_REG_LEN_08BIT, 0xf0},
+	{0x5592, CRL_REG_LEN_08BIT, 0x10},
+	{0x55a2, CRL_REG_LEN_08BIT, 0x6d},
+	{0x55a3, CRL_REG_LEN_08BIT, 0x55},
+	{0x55a4, CRL_REG_LEN_08BIT, 0xc3},
+	{0x55a5, CRL_REG_LEN_08BIT, 0xb5},
+	{0x55a6, CRL_REG_LEN_08BIT, 0x43},
+	{0x55a7, CRL_REG_LEN_08BIT, 0x38},
+	{0x55a8, CRL_REG_LEN_08BIT, 0x5f},
+	{0x55a9, CRL_REG_LEN_08BIT, 0x4b},
+	{0x55aa, CRL_REG_LEN_08BIT, 0xf0},
+	{0x55ab, CRL_REG_LEN_08BIT, 0x10},
+	{0x5581, CRL_REG_LEN_08BIT, 0x52},
+	{0x5300, CRL_REG_LEN_08BIT, 0x01},
+	{0x5301, CRL_REG_LEN_08BIT, 0x00},
+	{0x5302, CRL_REG_LEN_08BIT, 0x00},
+	{0x5303, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5304, CRL_REG_LEN_08BIT, 0x00},
+	{0x5305, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5306, CRL_REG_LEN_08BIT, 0x00},
+	{0x5307, CRL_REG_LEN_08BIT, 0x36},
+	{0x5308, CRL_REG_LEN_08BIT, 0x00},
+	{0x5309, CRL_REG_LEN_08BIT, 0xd9},
+	{0x530a, CRL_REG_LEN_08BIT, 0x00},
+	{0x530b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x530c, CRL_REG_LEN_08BIT, 0x00},
+	{0x530d, CRL_REG_LEN_08BIT, 0x2c},
+	{0x530e, CRL_REG_LEN_08BIT, 0x00},
+	{0x530f, CRL_REG_LEN_08BIT, 0x59},
+	{0x5310, CRL_REG_LEN_08BIT, 0x00},
+	{0x5311, CRL_REG_LEN_08BIT, 0x7b},
+	{0x5312, CRL_REG_LEN_08BIT, 0x00},
+	{0x5313, CRL_REG_LEN_08BIT, 0x22},
+	{0x5314, CRL_REG_LEN_08BIT, 0x00},
+	{0x5315, CRL_REG_LEN_08BIT, 0xd5},
+	{0x5316, CRL_REG_LEN_08BIT, 0x00},
+	{0x5317, CRL_REG_LEN_08BIT, 0x13},
+	{0x5318, CRL_REG_LEN_08BIT, 0x00},
+	{0x5319, CRL_REG_LEN_08BIT, 0x18},
+	{0x531a, CRL_REG_LEN_08BIT, 0x00},
+	{0x531b, CRL_REG_LEN_08BIT, 0x26},
+	{0x531c, CRL_REG_LEN_08BIT, 0x00},
+	{0x531d, CRL_REG_LEN_08BIT, 0xdc},
+	{0x531e, CRL_REG_LEN_08BIT, 0x00},
+	{0x531f, CRL_REG_LEN_08BIT, 0x02},
+	{0x5320, CRL_REG_LEN_08BIT, 0x00},
+	{0x5321, CRL_REG_LEN_08BIT, 0x24},
+	{0x5322, CRL_REG_LEN_08BIT, 0x00},
+	{0x5323, CRL_REG_LEN_08BIT, 0x56},
+	{0x5324, CRL_REG_LEN_08BIT, 0x00},
+	{0x5325, CRL_REG_LEN_08BIT, 0x85},
+	{0x5326, CRL_REG_LEN_08BIT, 0x00},
+	{0x5327, CRL_REG_LEN_08BIT, 0x20},
+	{0x5609, CRL_REG_LEN_08BIT, 0x01},
+	{0x560a, CRL_REG_LEN_08BIT, 0x40},
+	{0x560b, CRL_REG_LEN_08BIT, 0x01},
+	{0x560c, CRL_REG_LEN_08BIT, 0x40},
+	{0x560d, CRL_REG_LEN_08BIT, 0x00},
+	{0x560e, CRL_REG_LEN_08BIT, 0xfa},
+	{0x560f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5610, CRL_REG_LEN_08BIT, 0xfa},
+	{0x5611, CRL_REG_LEN_08BIT, 0x02},
+	{0x5612, CRL_REG_LEN_08BIT, 0x80},
+	{0x5613, CRL_REG_LEN_08BIT, 0x02},
+	{0x5614, CRL_REG_LEN_08BIT, 0x80},
+	{0x5615, CRL_REG_LEN_08BIT, 0x01},
+	{0x5616, CRL_REG_LEN_08BIT, 0x2c},
+	{0x5617, CRL_REG_LEN_08BIT, 0x01},
+	{0x5618, CRL_REG_LEN_08BIT, 0x2c},
+	{0x563b, CRL_REG_LEN_08BIT, 0x01},
+	{0x563c, CRL_REG_LEN_08BIT, 0x01},
+	{0x563d, CRL_REG_LEN_08BIT, 0x01},
+	{0x563e, CRL_REG_LEN_08BIT, 0x01},
+	{0x563f, CRL_REG_LEN_08BIT, 0x03},
+	{0x5640, CRL_REG_LEN_08BIT, 0x03},
+	{0x5641, CRL_REG_LEN_08BIT, 0x03},
+	{0x5642, CRL_REG_LEN_08BIT, 0x05},
+	{0x5643, CRL_REG_LEN_08BIT, 0x09},
+	{0x5644, CRL_REG_LEN_08BIT, 0x05},
+	{0x5645, CRL_REG_LEN_08BIT, 0x05},
+	{0x5646, CRL_REG_LEN_08BIT, 0x05},
+	{0x5647, CRL_REG_LEN_08BIT, 0x05},
+	{0x5651, CRL_REG_LEN_08BIT, 0x00},
+	{0x5652, CRL_REG_LEN_08BIT, 0x80},
+	{0x521a, CRL_REG_LEN_08BIT, 0x01},
+	{0x521b, CRL_REG_LEN_08BIT, 0x03},
+	{0x521c, CRL_REG_LEN_08BIT, 0x06},
+	{0x521d, CRL_REG_LEN_08BIT, 0x0a},
+	{0x521e, CRL_REG_LEN_08BIT, 0x0e},
+	{0x521f, CRL_REG_LEN_08BIT, 0x12},
+	{0x5220, CRL_REG_LEN_08BIT, 0x16},
+	{0x5223, CRL_REG_LEN_08BIT, 0x02},
+	{0x5225, CRL_REG_LEN_08BIT, 0x04},
+	{0x5227, CRL_REG_LEN_08BIT, 0x08},
+	{0x5229, CRL_REG_LEN_08BIT, 0x0c},
+	{0x522b, CRL_REG_LEN_08BIT, 0x12},
+	{0x522d, CRL_REG_LEN_08BIT, 0x18},
+	{0x522f, CRL_REG_LEN_08BIT, 0x1e},
+	{0x5241, CRL_REG_LEN_08BIT, 0x04},
+	{0x5242, CRL_REG_LEN_08BIT, 0x01},
+	{0x5243, CRL_REG_LEN_08BIT, 0x03},
+	{0x5244, CRL_REG_LEN_08BIT, 0x06},
+	{0x5245, CRL_REG_LEN_08BIT, 0x0a},
+	{0x5246, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5247, CRL_REG_LEN_08BIT, 0x12},
+	{0x5248, CRL_REG_LEN_08BIT, 0x16},
+	{0x524a, CRL_REG_LEN_08BIT, 0x03},
+	{0x524c, CRL_REG_LEN_08BIT, 0x04},
+	{0x524e, CRL_REG_LEN_08BIT, 0x08},
+	{0x5250, CRL_REG_LEN_08BIT, 0x0c},
+	{0x5252, CRL_REG_LEN_08BIT, 0x12},
+	{0x5254, CRL_REG_LEN_08BIT, 0x18},
+	{0x5256, CRL_REG_LEN_08BIT, 0x1e},
+	{0x4606, CRL_REG_LEN_08BIT, 0x07},
+	{0x4607, CRL_REG_LEN_08BIT, 0x71},
+	{0x460a, CRL_REG_LEN_08BIT, 0x02},
+	{0x460b, CRL_REG_LEN_08BIT, 0x70},
+	{0x460c, CRL_REG_LEN_08BIT, 0x00},
+	{0x4620, CRL_REG_LEN_08BIT, 0x0e},
+	{0x4700, CRL_REG_LEN_08BIT, 0x04},
+	{0x4701, CRL_REG_LEN_08BIT, 0x00},
+	{0x4702, CRL_REG_LEN_08BIT, 0x01},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4005, CRL_REG_LEN_08BIT, 0x18},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4052, CRL_REG_LEN_08BIT, 0x02},
+	{0x4057, CRL_REG_LEN_08BIT, 0x9c},
+	{0x405a, CRL_REG_LEN_08BIT, 0x00},
+	{0x3832, CRL_REG_LEN_08BIT, 0x00},
+	{0x3833, CRL_REG_LEN_08BIT, 0x02},
+	{0x3834, CRL_REG_LEN_08BIT, 0x03},
+	{0x3835, CRL_REG_LEN_08BIT, 0x48},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	{0x4202, CRL_REG_LEN_08BIT, 0x02},
+	{0x3023, CRL_REG_LEN_08BIT, 0x10},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x6f10, CRL_REG_LEN_08BIT, 0x07},
+	{0x6f11, CRL_REG_LEN_08BIT, 0x82},
+	{0x6f12, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f13, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f14, CRL_REG_LEN_08BIT, 0x1f},
+	{0x6f15, CRL_REG_LEN_08BIT, 0xdd},
+	{0x6f16, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f17, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f18, CRL_REG_LEN_08BIT, 0x36},
+	{0x6f19, CRL_REG_LEN_08BIT, 0x66},
+	{0x6f1a, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1b, CRL_REG_LEN_08BIT, 0x08},
+	{0x6f1c, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6f1d, CRL_REG_LEN_08BIT, 0xe7},
+	{0x6f1e, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1f, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd000, CRL_REG_LEN_08BIT, 0x19},
+	{0xd001, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd002, CRL_REG_LEN_08BIT, 0x00},
+	{0xd003, CRL_REG_LEN_08BIT, 0x01},
+	{0xd004, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd005, CRL_REG_LEN_08BIT, 0xad},
+	{0xd006, CRL_REG_LEN_08BIT, 0x10},
+	{0xd007, CRL_REG_LEN_08BIT, 0x40},
+	{0xd008, CRL_REG_LEN_08BIT, 0x44},
+	{0xd009, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd00b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd00d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd010, CRL_REG_LEN_08BIT, 0x19},
+	{0xd011, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd012, CRL_REG_LEN_08BIT, 0x00},
+	{0xd013, CRL_REG_LEN_08BIT, 0x01},
+	{0xd014, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd015, CRL_REG_LEN_08BIT, 0xad},
+	{0xd016, CRL_REG_LEN_08BIT, 0x13},
+	{0xd017, CRL_REG_LEN_08BIT, 0xd0},
+	{0xd018, CRL_REG_LEN_08BIT, 0x44},
+	{0xd019, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd01b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd01d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd020, CRL_REG_LEN_08BIT, 0x19},
+	{0xd021, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd022, CRL_REG_LEN_08BIT, 0x00},
+	{0xd023, CRL_REG_LEN_08BIT, 0x01},
+	{0xd024, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd025, CRL_REG_LEN_08BIT, 0xad},
+	{0xd026, CRL_REG_LEN_08BIT, 0x14},
+	{0xd027, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd028, CRL_REG_LEN_08BIT, 0x44},
+	{0xd029, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd02b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd02d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd030, CRL_REG_LEN_08BIT, 0x19},
+	{0xd031, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd032, CRL_REG_LEN_08BIT, 0x00},
+	{0xd033, CRL_REG_LEN_08BIT, 0x01},
+	{0xd034, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd035, CRL_REG_LEN_08BIT, 0xad},
+	{0xd036, CRL_REG_LEN_08BIT, 0x14},
+	{0xd037, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd038, CRL_REG_LEN_08BIT, 0x44},
+	{0xd039, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd03b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd03d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd040, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd041, CRL_REG_LEN_08BIT, 0x21},
+	{0xd042, CRL_REG_LEN_08BIT, 0xff},
+	{0xd043, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd044, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd045, CRL_REG_LEN_08BIT, 0x01},
+	{0xd046, CRL_REG_LEN_08BIT, 0x48},
+	{0xd047, CRL_REG_LEN_08BIT, 0x00},
+	{0xd048, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd049, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04a, CRL_REG_LEN_08BIT, 0x50},
+	{0xd04b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd04c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd04d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd04f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd050, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd051, CRL_REG_LEN_08BIT, 0x01},
+	{0xd052, CRL_REG_LEN_08BIT, 0x70},
+	{0xd053, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd054, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd055, CRL_REG_LEN_08BIT, 0x01},
+	{0xd056, CRL_REG_LEN_08BIT, 0x80},
+	{0xd057, CRL_REG_LEN_08BIT, 0x10},
+	{0xd058, CRL_REG_LEN_08BIT, 0x19},
+	{0xd059, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd05a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd05b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd05c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd05d, CRL_REG_LEN_08BIT, 0xce},
+	{0xd05e, CRL_REG_LEN_08BIT, 0x02},
+	{0xd05f, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd060, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd061, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd062, CRL_REG_LEN_08BIT, 0x00},
+	{0xd063, CRL_REG_LEN_08BIT, 0x00},
+	{0xd064, CRL_REG_LEN_08BIT, 0x84},
+	{0xd065, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd066, CRL_REG_LEN_08BIT, 0x00},
+	{0xd067, CRL_REG_LEN_08BIT, 0x00},
+	{0xd068, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd069, CRL_REG_LEN_08BIT, 0x03},
+	{0xd06a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd06b, CRL_REG_LEN_08BIT, 0x76},
+	{0xd06c, CRL_REG_LEN_08BIT, 0x1a},
+	{0xd06d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd070, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd071, CRL_REG_LEN_08BIT, 0x10},
+	{0xd072, CRL_REG_LEN_08BIT, 0x03},
+	{0xd073, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd074, CRL_REG_LEN_08BIT, 0x18},
+	{0xd075, CRL_REG_LEN_08BIT, 0x60},
+	{0xd076, CRL_REG_LEN_08BIT, 0x00},
+	{0xd077, CRL_REG_LEN_08BIT, 0x01},
+	{0xd078, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd079, CRL_REG_LEN_08BIT, 0x63},
+	{0xd07a, CRL_REG_LEN_08BIT, 0x07},
+	{0xd07b, CRL_REG_LEN_08BIT, 0x80},
+	{0xd07c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd07d, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd07e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd07f, CRL_REG_LEN_08BIT, 0x04},
+	{0xd080, CRL_REG_LEN_08BIT, 0x18},
+	{0xd081, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd082, CRL_REG_LEN_08BIT, 0x00},
+	{0xd083, CRL_REG_LEN_08BIT, 0x00},
+	{0xd084, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd085, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd086, CRL_REG_LEN_08BIT, 0x00},
+	{0xd087, CRL_REG_LEN_08BIT, 0x00},
+	{0xd088, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd089, CRL_REG_LEN_08BIT, 0x63},
+	{0xd08a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd08d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd08e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd08f, CRL_REG_LEN_08BIT, 0x14},
+	{0xd090, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd091, CRL_REG_LEN_08BIT, 0x01},
+	{0xd092, CRL_REG_LEN_08BIT, 0x30},
+	{0xd093, CRL_REG_LEN_08BIT, 0x18},
+	{0xd094, CRL_REG_LEN_08BIT, 0x07},
+	{0xd095, CRL_REG_LEN_08BIT, 0xff},
+	{0xd096, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd097, CRL_REG_LEN_08BIT, 0xfd},
+	{0xd098, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd099, CRL_REG_LEN_08BIT, 0x80},
+	{0xd09a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd09c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd09d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd09e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd0a0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd0a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0a3, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0a5, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd0a6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd0a8, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0a9, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0aa, CRL_REG_LEN_08BIT, 0x58},
+	{0xd0ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ac, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0ad, CRL_REG_LEN_08BIT, 0x8e},
+	{0xd0ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0b1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0b2, CRL_REG_LEN_08BIT, 0x30},
+	{0xd0b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b4, CRL_REG_LEN_08BIT, 0x98},
+	{0xd0b5, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd0b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd0ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0bb, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd0bc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0bd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd0be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0bf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd0c1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0c4, CRL_REG_LEN_08BIT, 0x95},
+	{0xd0c5, CRL_REG_LEN_08BIT, 0x8b},
+	{0xd0c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c8, CRL_REG_LEN_08BIT, 0x94},
+	{0xd0c9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd0ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0cb, CRL_REG_LEN_08BIT, 0x70},
+	{0xd0cc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0cd, CRL_REG_LEN_08BIT, 0x65},
+	{0xd0ce, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd0d1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d3, CRL_REG_LEN_08BIT, 0x62},
+	{0xd0d4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd0d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0da, CRL_REG_LEN_08BIT, 0x80},
+	{0xd0db, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0dd, CRL_REG_LEN_08BIT, 0x83},
+	{0xd0de, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0df, CRL_REG_LEN_08BIT, 0x29},
+	{0xd0e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e1, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd0e2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0e3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd0e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0e5, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e9, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd0ea, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0eb, CRL_REG_LEN_08BIT, 0x09},
+	{0xd0ec, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0ed, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd0ee, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0ef, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd0f0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f1, CRL_REG_LEN_08BIT, 0x07},
+	{0xd0f2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd0f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0f5, CRL_REG_LEN_08BIT, 0x66},
+	{0xd0f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f9, CRL_REG_LEN_08BIT, 0x05},
+	{0xd0fa, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0fc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ff, CRL_REG_LEN_08BIT, 0x01},
+	{0xd100, CRL_REG_LEN_08BIT, 0x98},
+	{0xd101, CRL_REG_LEN_08BIT, 0x90},
+	{0xd102, CRL_REG_LEN_08BIT, 0x00},
+	{0xd103, CRL_REG_LEN_08BIT, 0x00},
+	{0xd104, CRL_REG_LEN_08BIT, 0x84},
+	{0xd105, CRL_REG_LEN_08BIT, 0xae},
+	{0xd106, CRL_REG_LEN_08BIT, 0x00},
+	{0xd107, CRL_REG_LEN_08BIT, 0x00},
+	{0xd108, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd109, CRL_REG_LEN_08BIT, 0x63},
+	{0xd10a, CRL_REG_LEN_08BIT, 0x06},
+	{0xd10b, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd10c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd10d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd10e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd10f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd110, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd111, CRL_REG_LEN_08BIT, 0x03},
+	{0xd112, CRL_REG_LEN_08BIT, 0x30},
+	{0xd113, CRL_REG_LEN_08BIT, 0x00},
+	{0xd114, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd115, CRL_REG_LEN_08BIT, 0x65},
+	{0xd116, CRL_REG_LEN_08BIT, 0x00},
+	{0xd117, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd118, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd119, CRL_REG_LEN_08BIT, 0x84},
+	{0xd11a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd11b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11c, CRL_REG_LEN_08BIT, 0x10},
+	{0xd11d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11f, CRL_REG_LEN_08BIT, 0x07},
+	{0xd120, CRL_REG_LEN_08BIT, 0x18},
+	{0xd121, CRL_REG_LEN_08BIT, 0x80},
+	{0xd122, CRL_REG_LEN_08BIT, 0x80},
+	{0xd123, CRL_REG_LEN_08BIT, 0x06},
+	{0xd124, CRL_REG_LEN_08BIT, 0x94},
+	{0xd125, CRL_REG_LEN_08BIT, 0x65},
+	{0xd126, CRL_REG_LEN_08BIT, 0x00},
+	{0xd127, CRL_REG_LEN_08BIT, 0x70},
+	{0xd128, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd129, CRL_REG_LEN_08BIT, 0x43},
+	{0xd12a, CRL_REG_LEN_08BIT, 0x60},
+	{0xd12b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12c, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd12d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12f, CRL_REG_LEN_08BIT, 0x3e},
+	{0xd130, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd131, CRL_REG_LEN_08BIT, 0x64},
+	{0xd132, CRL_REG_LEN_08BIT, 0x38},
+	{0xd133, CRL_REG_LEN_08BIT, 0x24},
+	{0xd134, CRL_REG_LEN_08BIT, 0x18},
+	{0xd135, CRL_REG_LEN_08BIT, 0x80},
+	{0xd136, CRL_REG_LEN_08BIT, 0x80},
+	{0xd137, CRL_REG_LEN_08BIT, 0x06},
+	{0xd138, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd139, CRL_REG_LEN_08BIT, 0x64},
+	{0xd13a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd13b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd13c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd13d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd13e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd13f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd140, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd141, CRL_REG_LEN_08BIT, 0x63},
+	{0xd142, CRL_REG_LEN_08BIT, 0x00},
+	{0xd143, CRL_REG_LEN_08BIT, 0x40},
+	{0xd144, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd145, CRL_REG_LEN_08BIT, 0x23},
+	{0xd146, CRL_REG_LEN_08BIT, 0x00},
+	{0xd147, CRL_REG_LEN_08BIT, 0x00},
+	{0xd148, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd149, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14b, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd14c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd14d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd14e, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd14f, CRL_REG_LEN_08BIT, 0x44},
+	{0xd150, CRL_REG_LEN_08BIT, 0x19},
+	{0xd151, CRL_REG_LEN_08BIT, 0x00},
+	{0xd152, CRL_REG_LEN_08BIT, 0x80},
+	{0xd153, CRL_REG_LEN_08BIT, 0x06},
+	{0xd154, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd155, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd156, CRL_REG_LEN_08BIT, 0x3d},
+	{0xd157, CRL_REG_LEN_08BIT, 0x05},
+	{0xd158, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd159, CRL_REG_LEN_08BIT, 0x67},
+	{0xd15a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd15d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd15e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd160, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd161, CRL_REG_LEN_08BIT, 0x63},
+	{0xd162, CRL_REG_LEN_08BIT, 0x00},
+	{0xd163, CRL_REG_LEN_08BIT, 0x98},
+	{0xd164, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd165, CRL_REG_LEN_08BIT, 0x03},
+	{0xd166, CRL_REG_LEN_08BIT, 0x00},
+	{0xd167, CRL_REG_LEN_08BIT, 0x00},
+	{0xd168, CRL_REG_LEN_08BIT, 0x10},
+	{0xd169, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd16c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd16d, CRL_REG_LEN_08BIT, 0x48},
+	{0xd16e, CRL_REG_LEN_08BIT, 0x67},
+	{0xd16f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd170, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd171, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd172, CRL_REG_LEN_08BIT, 0x00},
+	{0xd173, CRL_REG_LEN_08BIT, 0x19},
+	{0xd174, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd175, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd176, CRL_REG_LEN_08BIT, 0x00},
+	{0xd177, CRL_REG_LEN_08BIT, 0x00},
+	{0xd178, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd179, CRL_REG_LEN_08BIT, 0x68},
+	{0xd17a, CRL_REG_LEN_08BIT, 0x67},
+	{0xd17b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd17c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd17d, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd17e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd17f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd180, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd181, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd182, CRL_REG_LEN_08BIT, 0x00},
+	{0xd183, CRL_REG_LEN_08BIT, 0x00},
+	{0xd184, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd185, CRL_REG_LEN_08BIT, 0x85},
+	{0xd186, CRL_REG_LEN_08BIT, 0x00},
+	{0xd187, CRL_REG_LEN_08BIT, 0x98},
+	{0xd188, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd189, CRL_REG_LEN_08BIT, 0x63},
+	{0xd18a, CRL_REG_LEN_08BIT, 0x30},
+	{0xd18b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd18c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd18d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd18e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd18f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd190, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd191, CRL_REG_LEN_08BIT, 0x83},
+	{0xd192, CRL_REG_LEN_08BIT, 0xff},
+	{0xd193, CRL_REG_LEN_08BIT, 0xff},
+	{0xd194, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd195, CRL_REG_LEN_08BIT, 0x64},
+	{0xd196, CRL_REG_LEN_08BIT, 0x00},
+	{0xd197, CRL_REG_LEN_08BIT, 0x48},
+	{0xd198, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd199, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd19a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd19b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd19c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd19d, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd19e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd19f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1a1, CRL_REG_LEN_08BIT, 0x60},
+	{0xd1a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1a5, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1a6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd1a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1a9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd1aa, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1ab, CRL_REG_LEN_08BIT, 0x22},
+	{0xd1ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ad, CRL_REG_LEN_08BIT, 0x80},
+	{0xd1ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1af, CRL_REG_LEN_08BIT, 0x70},
+	{0xd1b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1b1, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd1b2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1b3, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1b4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1b5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1b6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1b9, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1bd, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd1be, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1bf, CRL_REG_LEN_08BIT, 0x42},
+	{0xd1c0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1c1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd1c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1c5, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd1c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd1c9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd1ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cb, CRL_REG_LEN_08BIT, 0x08},
+	{0xd1cc, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1cd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1d1, CRL_REG_LEN_08BIT, 0x67},
+	{0xd1d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd1d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1d6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1d9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1da, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1dc, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1dd, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1df, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1e0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd1e1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e3, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd1e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1e5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd1e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd1e8, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1e9, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1ea, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1eb, CRL_REG_LEN_08BIT, 0xf6},
+	{0xd1ec, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f1, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1f2, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1f3, CRL_REG_LEN_08BIT, 0x86},
+	{0xd1f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1f5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f9, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd1fa, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd1fb, CRL_REG_LEN_08BIT, 0x45},
+	{0xd1fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1fd, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd1fe, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1ff, CRL_REG_LEN_08BIT, 0x87},
+	{0xd200, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd201, CRL_REG_LEN_08BIT, 0x05},
+	{0xd202, CRL_REG_LEN_08BIT, 0x18},
+	{0xd203, CRL_REG_LEN_08BIT, 0x00},
+	{0xd204, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd205, CRL_REG_LEN_08BIT, 0x66},
+	{0xd206, CRL_REG_LEN_08BIT, 0x00},
+	{0xd207, CRL_REG_LEN_08BIT, 0x00},
+	{0xd208, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd209, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd20a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd20b, CRL_REG_LEN_08BIT, 0x46},
+	{0xd20c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd20d, CRL_REG_LEN_08BIT, 0x07},
+	{0xd20e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd20f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd210, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd211, CRL_REG_LEN_08BIT, 0x84},
+	{0xd212, CRL_REG_LEN_08BIT, 0x55},
+	{0xd213, CRL_REG_LEN_08BIT, 0x88},
+	{0xd214, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd215, CRL_REG_LEN_08BIT, 0x65},
+	{0xd216, CRL_REG_LEN_08BIT, 0x00},
+	{0xd217, CRL_REG_LEN_08BIT, 0x00},
+	{0xd218, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd219, CRL_REG_LEN_08BIT, 0x04},
+	{0xd21a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd21b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd21c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd21d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21f, CRL_REG_LEN_08BIT, 0xce},
+	{0xd220, CRL_REG_LEN_08BIT, 0x19},
+	{0xd221, CRL_REG_LEN_08BIT, 0x00},
+	{0xd222, CRL_REG_LEN_08BIT, 0x80},
+	{0xd223, CRL_REG_LEN_08BIT, 0x06},
+	{0xd224, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd225, CRL_REG_LEN_08BIT, 0x63},
+	{0xd226, CRL_REG_LEN_08BIT, 0x00},
+	{0xd227, CRL_REG_LEN_08BIT, 0x00},
+	{0xd228, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd229, CRL_REG_LEN_08BIT, 0x63},
+	{0xd22a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22b, CRL_REG_LEN_08BIT, 0x40},
+	{0xd22c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd22d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd22e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd230, CRL_REG_LEN_08BIT, 0x13},
+	{0xd231, CRL_REG_LEN_08BIT, 0xff},
+	{0xd232, CRL_REG_LEN_08BIT, 0xff},
+	{0xd233, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd234, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd235, CRL_REG_LEN_08BIT, 0x00},
+	{0xd236, CRL_REG_LEN_08BIT, 0x00},
+	{0xd237, CRL_REG_LEN_08BIT, 0x40},
+	{0xd238, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd239, CRL_REG_LEN_08BIT, 0x64},
+	{0xd23a, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23b, CRL_REG_LEN_08BIT, 0x86},
+	{0xd23c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd23d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd23e, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23f, CRL_REG_LEN_08BIT, 0x87},
+	{0xd240, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd241, CRL_REG_LEN_08BIT, 0x03},
+	{0xd242, CRL_REG_LEN_08BIT, 0x40},
+	{0xd243, CRL_REG_LEN_08BIT, 0x00},
+	{0xd244, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd245, CRL_REG_LEN_08BIT, 0x64},
+	{0xd246, CRL_REG_LEN_08BIT, 0x55},
+	{0xd247, CRL_REG_LEN_08BIT, 0x88},
+	{0xd248, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd249, CRL_REG_LEN_08BIT, 0x05},
+	{0xd24a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd24c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd24d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd24e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd250, CRL_REG_LEN_08BIT, 0x03},
+	{0xd251, CRL_REG_LEN_08BIT, 0xff},
+	{0xd252, CRL_REG_LEN_08BIT, 0xff},
+	{0xd253, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd254, CRL_REG_LEN_08BIT, 0x19},
+	{0xd255, CRL_REG_LEN_08BIT, 0x00},
+	{0xd256, CRL_REG_LEN_08BIT, 0x80},
+	{0xd257, CRL_REG_LEN_08BIT, 0x06},
+	{0xd258, CRL_REG_LEN_08BIT, 0x94},
+	{0xd259, CRL_REG_LEN_08BIT, 0x84},
+	{0xd25a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd25b, CRL_REG_LEN_08BIT, 0x72},
+	{0xd25c, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd25d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd25e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd25f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd260, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd261, CRL_REG_LEN_08BIT, 0x00},
+	{0xd262, CRL_REG_LEN_08BIT, 0x00},
+	{0xd263, CRL_REG_LEN_08BIT, 0x3f},
+	{0xd264, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd265, CRL_REG_LEN_08BIT, 0x60},
+	{0xd266, CRL_REG_LEN_08BIT, 0x01},
+	{0xd267, CRL_REG_LEN_08BIT, 0x00},
+	{0xd268, CRL_REG_LEN_08BIT, 0x85},
+	{0xd269, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd26a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26c, CRL_REG_LEN_08BIT, 0x98},
+	{0xd26d, CRL_REG_LEN_08BIT, 0x70},
+	{0xd26e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd270, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd271, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd272, CRL_REG_LEN_08BIT, 0x00},
+	{0xd273, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd274, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd275, CRL_REG_LEN_08BIT, 0x63},
+	{0xd276, CRL_REG_LEN_08BIT, 0x20},
+	{0xd277, CRL_REG_LEN_08BIT, 0x00},
+	{0xd278, CRL_REG_LEN_08BIT, 0x10},
+	{0xd279, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27b, CRL_REG_LEN_08BIT, 0x07},
+	{0xd27c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd27d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd280, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd281, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd282, CRL_REG_LEN_08BIT, 0x00},
+	{0xd283, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd284, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd285, CRL_REG_LEN_08BIT, 0x63},
+	{0xd286, CRL_REG_LEN_08BIT, 0x28},
+	{0xd287, CRL_REG_LEN_08BIT, 0x02},
+	{0xd288, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd289, CRL_REG_LEN_08BIT, 0x84},
+	{0xd28a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd28b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd28c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd28d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd28e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd28f, CRL_REG_LEN_08BIT, 0x66},
+	{0xd290, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd291, CRL_REG_LEN_08BIT, 0x63},
+	{0xd292, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd293, CRL_REG_LEN_08BIT, 0x06},
+	{0xd294, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd295, CRL_REG_LEN_08BIT, 0x6a},
+	{0xd296, CRL_REG_LEN_08BIT, 0x00},
+	{0xd297, CRL_REG_LEN_08BIT, 0x77},
+	{0xd298, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd299, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29a, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd29b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd29c, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd29d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd29f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a3, CRL_REG_LEN_08BIT, 0x3c},
+	{0xd2a4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd2a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd2a9, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd2aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ab, CRL_REG_LEN_08BIT, 0x78},
+	{0xd2ac, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd2ad, CRL_REG_LEN_08BIT, 0x63},
+	{0xd2ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2af, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd2b1, CRL_REG_LEN_08BIT, 0x64},
+	{0xd2b2, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd2b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd2b4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b8, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2b9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2bb, CRL_REG_LEN_08BIT, 0x34},
+	{0xd2bc, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2bd, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2bf, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c0, CRL_REG_LEN_08BIT, 0xb9},
+	{0xd2c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c3, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2c4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd2c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2c9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd2ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cc, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2cd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cf, CRL_REG_LEN_08BIT, 0x2c},
+	{0xd2d0, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2d1, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2d2, CRL_REG_LEN_08BIT, 0x58},
+	{0xd2d3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2d4, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2d5, CRL_REG_LEN_08BIT, 0x81},
+	{0xd2d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2d7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2d8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2d9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd2da, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2dc, CRL_REG_LEN_08BIT, 0x10},
+	{0xd2dd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2df, CRL_REG_LEN_08BIT, 0x05},
+	{0xd2e0, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2e1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2e4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd2e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd2e6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e8, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2ea, CRL_REG_LEN_08BIT, 0x28},
+	{0xd2eb, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2ec, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2ed, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ef, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2f0, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2f1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd2f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f4, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f7, CRL_REG_LEN_08BIT, 0x20},
+	{0xd2f8, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd2f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fc, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2fd, CRL_REG_LEN_08BIT, 0x61},
+	{0xd2fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ff, CRL_REG_LEN_08BIT, 0x18},
+	{0xd300, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd301, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd302, CRL_REG_LEN_08BIT, 0x01},
+	{0xd303, CRL_REG_LEN_08BIT, 0x00},
+	{0xd304, CRL_REG_LEN_08BIT, 0x10},
+	{0xd305, CRL_REG_LEN_08BIT, 0x00},
+	{0xd306, CRL_REG_LEN_08BIT, 0x00},
+	{0xd307, CRL_REG_LEN_08BIT, 0x03},
+	{0xd308, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd309, CRL_REG_LEN_08BIT, 0x80},
+	{0xd30a, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd30c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd30f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd310, CRL_REG_LEN_08BIT, 0x18},
+	{0xd311, CRL_REG_LEN_08BIT, 0x60},
+	{0xd312, CRL_REG_LEN_08BIT, 0x80},
+	{0xd313, CRL_REG_LEN_08BIT, 0x06},
+	{0xd314, CRL_REG_LEN_08BIT, 0x85},
+	{0xd315, CRL_REG_LEN_08BIT, 0x01},
+	{0xd316, CRL_REG_LEN_08BIT, 0x00},
+	{0xd317, CRL_REG_LEN_08BIT, 0x14},
+	{0xd318, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd319, CRL_REG_LEN_08BIT, 0x83},
+	{0xd31a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd31b, CRL_REG_LEN_08BIT, 0x29},
+	{0xd31c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd31d, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd31e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd31f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd320, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd321, CRL_REG_LEN_08BIT, 0x84},
+	{0xd322, CRL_REG_LEN_08BIT, 0x00},
+	{0xd323, CRL_REG_LEN_08BIT, 0x00},
+	{0xd324, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd325, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd326, CRL_REG_LEN_08BIT, 0x38},
+	{0xd327, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd328, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd329, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd32a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32b, CRL_REG_LEN_08BIT, 0x09},
+	{0xd32c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd32d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd32e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd330, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd331, CRL_REG_LEN_08BIT, 0x06},
+	{0xd332, CRL_REG_LEN_08BIT, 0x18},
+	{0xd333, CRL_REG_LEN_08BIT, 0x00},
+	{0xd334, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd335, CRL_REG_LEN_08BIT, 0x65},
+	{0xd336, CRL_REG_LEN_08BIT, 0x00},
+	{0xd337, CRL_REG_LEN_08BIT, 0x00},
+	{0xd338, CRL_REG_LEN_08BIT, 0x84},
+	{0xd339, CRL_REG_LEN_08BIT, 0x81},
+	{0xd33a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd33b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd33c, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33d, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd33f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd340, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd341, CRL_REG_LEN_08BIT, 0x07},
+	{0xd342, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd343, CRL_REG_LEN_08BIT, 0x00},
+	{0xd344, CRL_REG_LEN_08BIT, 0x03},
+	{0xd345, CRL_REG_LEN_08BIT, 0xff},
+	{0xd346, CRL_REG_LEN_08BIT, 0xff},
+	{0xd347, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd348, CRL_REG_LEN_08BIT, 0x18},
+	{0xd349, CRL_REG_LEN_08BIT, 0x60},
+	{0xd34a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd34b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd34c, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd34d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34f, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd350, CRL_REG_LEN_08BIT, 0x18},
+	{0xd351, CRL_REG_LEN_08BIT, 0x60},
+	{0xd352, CRL_REG_LEN_08BIT, 0x80},
+	{0xd353, CRL_REG_LEN_08BIT, 0x06},
+	{0xd354, CRL_REG_LEN_08BIT, 0x00},
+	{0xd355, CRL_REG_LEN_08BIT, 0x00},
+	{0xd356, CRL_REG_LEN_08BIT, 0x00},
+	{0xd357, CRL_REG_LEN_08BIT, 0x11},
+	{0xd358, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd359, CRL_REG_LEN_08BIT, 0x83},
+	{0xd35a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd35b, CRL_REG_LEN_08BIT, 0x43},
+	{0xd35c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd35d, CRL_REG_LEN_08BIT, 0x6c},
+	{0xd35e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd35f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd360, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd361, CRL_REG_LEN_08BIT, 0x84},
+	{0xd362, CRL_REG_LEN_08BIT, 0x28},
+	{0xd363, CRL_REG_LEN_08BIT, 0x02},
+	{0xd364, CRL_REG_LEN_08BIT, 0x07},
+	{0xd365, CRL_REG_LEN_08BIT, 0xff},
+	{0xd366, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd367, CRL_REG_LEN_08BIT, 0x30},
+	{0xd368, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd369, CRL_REG_LEN_08BIT, 0x63},
+	{0xd36a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36b, CRL_REG_LEN_08BIT, 0x08},
+	{0xd36c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd36d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36f, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd370, CRL_REG_LEN_08BIT, 0x85},
+	{0xd371, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd372, CRL_REG_LEN_08BIT, 0x00},
+	{0xd373, CRL_REG_LEN_08BIT, 0x00},
+	{0xd374, CRL_REG_LEN_08BIT, 0x03},
+	{0xd375, CRL_REG_LEN_08BIT, 0xff},
+	{0xd376, CRL_REG_LEN_08BIT, 0xff},
+	{0xd377, CRL_REG_LEN_08BIT, 0xe7},
+	{0xd378, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd379, CRL_REG_LEN_08BIT, 0x01},
+	{0xd37a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd37b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd37c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd37d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd37e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd380, CRL_REG_LEN_08BIT, 0x03},
+	{0xd381, CRL_REG_LEN_08BIT, 0xff},
+	{0xd382, CRL_REG_LEN_08BIT, 0xff},
+	{0xd383, CRL_REG_LEN_08BIT, 0xdb},
+	{0xd384, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd385, CRL_REG_LEN_08BIT, 0x01},
+	{0xd386, CRL_REG_LEN_08BIT, 0x18},
+	{0xd387, CRL_REG_LEN_08BIT, 0x14},
+	{0xd388, CRL_REG_LEN_08BIT, 0x03},
+	{0xd389, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38a, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38b, CRL_REG_LEN_08BIT, 0xce},
+	{0xd38c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd38d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd38e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd390, CRL_REG_LEN_08BIT, 0x03},
+	{0xd391, CRL_REG_LEN_08BIT, 0xff},
+	{0xd392, CRL_REG_LEN_08BIT, 0xff},
+	{0xd393, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd394, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd395, CRL_REG_LEN_08BIT, 0x63},
+	{0xd396, CRL_REG_LEN_08BIT, 0x00},
+	{0xd397, CRL_REG_LEN_08BIT, 0xff},
+	{0xd398, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd399, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd39a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd39b, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd39c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd39d, CRL_REG_LEN_08BIT, 0x84},
+	{0xd39e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd39f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a1, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd3a2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd3a3, CRL_REG_LEN_08BIT, 0x0e},
+	{0xd3a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a5, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd3a6, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd3a7, CRL_REG_LEN_08BIT, 0x42},
+	{0xd3a8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3a9, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3aa, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ac, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3ad, CRL_REG_LEN_08BIT, 0x66},
+	{0xd3ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3b1, CRL_REG_LEN_08BIT, 0x05},
+	{0xd3b2, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b8, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b9, CRL_REG_LEN_08BIT, 0x41},
+	{0xd3ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bb, CRL_REG_LEN_08BIT, 0x04},
+	{0xd3bc, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3bd, CRL_REG_LEN_08BIT, 0x81},
+	{0xd3be, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bf, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3c0, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3c1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd3c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c3, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3c4, CRL_REG_LEN_08BIT, 0x86},
+	{0xd3c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c7, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3c8, CRL_REG_LEN_08BIT, 0x44},
+	{0xd3c9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ca, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3cd, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cf, CRL_REG_LEN_08BIT, 0x1c},
+	{0xd3d0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3d1, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3d2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3d3, CRL_REG_LEN_08BIT, 0xfc},
+	{0xd3d4, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd3d5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3db, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3dd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3de, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3df, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3e0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3e1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e3, CRL_REG_LEN_08BIT, 0x68},
+	{0xd3e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd3e5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd3e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e8, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3e9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3eb, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3ec, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f0, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f2, CRL_REG_LEN_08BIT, 0xd9},
+	{0xd3f3, CRL_REG_LEN_08BIT, 0x98},
+	{0xd3f4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3f9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3fa, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3fb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3fd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3fe, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd3ff, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd400, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd401, CRL_REG_LEN_08BIT, 0x63},
+	{0xd402, CRL_REG_LEN_08BIT, 0x00},
+	{0xd403, CRL_REG_LEN_08BIT, 0x00},
+	{0xd404, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd405, CRL_REG_LEN_08BIT, 0x23},
+	{0xd406, CRL_REG_LEN_08BIT, 0x00},
+	{0xd407, CRL_REG_LEN_08BIT, 0x01},
+	{0xd408, CRL_REG_LEN_08BIT, 0x10},
+	{0xd409, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40b, CRL_REG_LEN_08BIT, 0x25},
+	{0xd40c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd40d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd410, CRL_REG_LEN_08BIT, 0x00},
+	{0xd411, CRL_REG_LEN_08BIT, 0x00},
+	{0xd412, CRL_REG_LEN_08BIT, 0x00},
+	{0xd413, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd414, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd415, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd416, CRL_REG_LEN_08BIT, 0x00},
+	{0xd417, CRL_REG_LEN_08BIT, 0x02},
+	{0xd418, CRL_REG_LEN_08BIT, 0x07},
+	{0xd419, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41a, CRL_REG_LEN_08BIT, 0xd6},
+	{0xd41b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd41c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd41d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd420, CRL_REG_LEN_08BIT, 0x18},
+	{0xd421, CRL_REG_LEN_08BIT, 0x60},
+	{0xd422, CRL_REG_LEN_08BIT, 0x80},
+	{0xd423, CRL_REG_LEN_08BIT, 0x06},
+	{0xd424, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd425, CRL_REG_LEN_08BIT, 0x63},
+	{0xd426, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd427, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd428, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd429, CRL_REG_LEN_08BIT, 0x63},
+	{0xd42a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd42d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd42e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd430, CRL_REG_LEN_08BIT, 0x10},
+	{0xd431, CRL_REG_LEN_08BIT, 0x00},
+	{0xd432, CRL_REG_LEN_08BIT, 0x00},
+	{0xd433, CRL_REG_LEN_08BIT, 0x1b},
+	{0xd434, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd435, CRL_REG_LEN_08BIT, 0x00},
+	{0xd436, CRL_REG_LEN_08BIT, 0x00},
+	{0xd437, CRL_REG_LEN_08BIT, 0x00},
+	{0xd438, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd439, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd43a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd43c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd43d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd43e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd440, CRL_REG_LEN_08BIT, 0x18},
+	{0xd441, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd442, CRL_REG_LEN_08BIT, 0x80},
+	{0xd443, CRL_REG_LEN_08BIT, 0x06},
+	{0xd444, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd445, CRL_REG_LEN_08BIT, 0x67},
+	{0xd446, CRL_REG_LEN_08BIT, 0x30},
+	{0xd447, CRL_REG_LEN_08BIT, 0x00},
+	{0xd448, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd449, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd44a, CRL_REG_LEN_08BIT, 0xce},
+	{0xd44b, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd44c, CRL_REG_LEN_08BIT, 0x19},
+	{0xd44d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd44e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd44f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd450, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd451, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd452, CRL_REG_LEN_08BIT, 0x06},
+	{0xd453, CRL_REG_LEN_08BIT, 0x14},
+	{0xd454, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd455, CRL_REG_LEN_08BIT, 0x83},
+	{0xd456, CRL_REG_LEN_08BIT, 0x28},
+	{0xd457, CRL_REG_LEN_08BIT, 0x00},
+	{0xd458, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd459, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd45a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd45c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd45d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd45e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd45f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd460, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd461, CRL_REG_LEN_08BIT, 0x84},
+	{0xd462, CRL_REG_LEN_08BIT, 0x00},
+	{0xd463, CRL_REG_LEN_08BIT, 0x00},
+	{0xd464, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd465, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd466, CRL_REG_LEN_08BIT, 0x58},
+	{0xd467, CRL_REG_LEN_08BIT, 0x00},
+	{0xd468, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd469, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd46a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46b, CRL_REG_LEN_08BIT, 0xff},
+	{0xd46c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd46d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd46e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd470, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd471, CRL_REG_LEN_08BIT, 0x46},
+	{0xd472, CRL_REG_LEN_08BIT, 0x00},
+	{0xd473, CRL_REG_LEN_08BIT, 0x03},
+	{0xd474, CRL_REG_LEN_08BIT, 0x94},
+	{0xd475, CRL_REG_LEN_08BIT, 0x85},
+	{0xd476, CRL_REG_LEN_08BIT, 0x00},
+	{0xd477, CRL_REG_LEN_08BIT, 0x00},
+	{0xd478, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd479, CRL_REG_LEN_08BIT, 0x63},
+	{0xd47a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47b, CRL_REG_LEN_08BIT, 0x98},
+	{0xd47c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd47d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd47e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd480, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd481, CRL_REG_LEN_08BIT, 0xff},
+	{0xd482, CRL_REG_LEN_08BIT, 0xff},
+	{0xd483, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd484, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd485, CRL_REG_LEN_08BIT, 0x05},
+	{0xd486, CRL_REG_LEN_08BIT, 0x18},
+	{0xd487, CRL_REG_LEN_08BIT, 0x00},
+	{0xd488, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd489, CRL_REG_LEN_08BIT, 0x68},
+	{0xd48a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd48c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd48d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd490, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd491, CRL_REG_LEN_08BIT, 0x48},
+	{0xd492, CRL_REG_LEN_08BIT, 0x00},
+	{0xd493, CRL_REG_LEN_08BIT, 0x01},
+	{0xd494, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd495, CRL_REG_LEN_08BIT, 0xff},
+	{0xd496, CRL_REG_LEN_08BIT, 0xff},
+	{0xd497, CRL_REG_LEN_08BIT, 0xea},
+	{0xd498, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd499, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd49a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd49c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd49d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd49e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4a1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4a2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4a3, CRL_REG_LEN_08BIT, 0x14},
+	{0xd4a4, CRL_REG_LEN_08BIT, 0x07},
+	{0xd4a5, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4a6, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd4a7, CRL_REG_LEN_08BIT, 0x05},
+	{0xd4a8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4a9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd4aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ab, CRL_REG_LEN_08BIT, 0x10},
+	{0xd4ac, CRL_REG_LEN_08BIT, 0x85},
+	{0xd4ad, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b0, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4b1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b2, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b7, CRL_REG_LEN_08BIT, 0x04},
+	{0xd4b8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4b9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4bb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4bc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4bd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4be, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4bf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4c0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4c1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4c2, CRL_REG_LEN_08BIT, 0x09},
+	{0xd4c3, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4c4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4c5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4c6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4c8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4c9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ca, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4cb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4cc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4cd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ce, CRL_REG_LEN_08BIT, 0xc9},
+	{0xd4cf, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4d0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4d1, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4d2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4d9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4dc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4dd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4df, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4e1, CRL_REG_LEN_08BIT, 0x84},
+	{0xd4e2, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd4e3, CRL_REG_LEN_08BIT, 0x12},
+	{0xd4e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd4e5, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e8, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd4e9, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4eb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ec, CRL_REG_LEN_08BIT, 0x13},
+	{0xd4ed, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ee, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ef, CRL_REG_LEN_08BIT, 0xfe},
+	{0xd4f0, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fc, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ff, CRL_REG_LEN_08BIT, 0x00},
+	{0xd500, CRL_REG_LEN_08BIT, 0x00},
+	{0xd501, CRL_REG_LEN_08BIT, 0x00},
+	{0xd502, CRL_REG_LEN_08BIT, 0x00},
+	{0xd503, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0e, CRL_REG_LEN_08BIT, 0x33},
+	{0x6f0f, CRL_REG_LEN_08BIT, 0x33},
+	{0x460e, CRL_REG_LEN_08BIT, 0x08},
+	{0x460f, CRL_REG_LEN_08BIT, 0x01},
+	{0x4610, CRL_REG_LEN_08BIT, 0x00},
+	{0x4611, CRL_REG_LEN_08BIT, 0x01},
+	{0x4612, CRL_REG_LEN_08BIT, 0x00},
+	{0x4613, CRL_REG_LEN_08BIT, 0x01},
+	{0x4605, CRL_REG_LEN_08BIT, 0x08},
+	{0x4608, CRL_REG_LEN_08BIT, 0x00},
+	{0x4609, CRL_REG_LEN_08BIT, 0x08},
+	{0x6804, CRL_REG_LEN_08BIT, 0x00},
+	{0x6805, CRL_REG_LEN_08BIT, 0x06},
+	{0x6806, CRL_REG_LEN_08BIT, 0x00},
+	{0x5120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3504, CRL_REG_LEN_08BIT, 0x00},
+	{0x6800, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x5000, CRL_REG_LEN_08BIT, 0xff},
+	{0x5001, CRL_REG_LEN_08BIT, 0xbf},
+	{0x5002, CRL_REG_LEN_08BIT, 0x7e},
+	{0x5003, CRL_REG_LEN_08BIT, 0x0c},
+	{0x503d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc450, CRL_REG_LEN_08BIT, 0x01},
+	{0xc452, CRL_REG_LEN_08BIT, 0x04},
+	{0xc453, CRL_REG_LEN_08BIT, 0x00},
+	{0xc454, CRL_REG_LEN_08BIT, 0x01},
+	{0xc455, CRL_REG_LEN_08BIT, 0x00},
+	{0xc456, CRL_REG_LEN_08BIT, 0x00},
+	{0xc457, CRL_REG_LEN_08BIT, 0x00},
+	{0xc458, CRL_REG_LEN_08BIT, 0x00},
+	{0xc459, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc45f, CRL_REG_LEN_08BIT, 0x01},
+	{0xc460, CRL_REG_LEN_08BIT, 0x01},
+	{0xc461, CRL_REG_LEN_08BIT, 0x01},
+	{0xc462, CRL_REG_LEN_08BIT, 0x01},
+	{0xc464, CRL_REG_LEN_08BIT, 0x88},
+	{0xc465, CRL_REG_LEN_08BIT, 0x00},
+	{0xc466, CRL_REG_LEN_08BIT, 0x8a},
+	{0xc467, CRL_REG_LEN_08BIT, 0x00},
+	{0xc468, CRL_REG_LEN_08BIT, 0x86},
+	{0xc469, CRL_REG_LEN_08BIT, 0x00},
+	{0xc46a, CRL_REG_LEN_08BIT, 0x40},
+	{0xc46b, CRL_REG_LEN_08BIT, 0x50},
+	{0xc46c, CRL_REG_LEN_08BIT, 0x30},
+	{0xc46d, CRL_REG_LEN_08BIT, 0x28},
+	{0xc46e, CRL_REG_LEN_08BIT, 0x60},
+	{0xc46f, CRL_REG_LEN_08BIT, 0x40},
+	{0xc47c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc47d, CRL_REG_LEN_08BIT, 0x38},
+	{0xc47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc480, CRL_REG_LEN_08BIT, 0x00},
+	{0xc481, CRL_REG_LEN_08BIT, 0xff},
+	{0xc482, CRL_REG_LEN_08BIT, 0x00},
+	{0xc483, CRL_REG_LEN_08BIT, 0x40},
+	{0xc484, CRL_REG_LEN_08BIT, 0x00},
+	{0xc485, CRL_REG_LEN_08BIT, 0x18},
+	{0xc486, CRL_REG_LEN_08BIT, 0x00},
+	{0xc487, CRL_REG_LEN_08BIT, 0x18},
+	{0xc488, CRL_REG_LEN_08BIT, 0x34},
+	{0xc489, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x34},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48d, CRL_REG_LEN_08BIT, 0x04},
+	{0xc48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48f, CRL_REG_LEN_08BIT, 0x04},
+	{0xc490, CRL_REG_LEN_08BIT, 0x07},
+	{0xc492, CRL_REG_LEN_08BIT, 0x20},
+	{0xc493, CRL_REG_LEN_08BIT, 0x08},
+	{0xc498, CRL_REG_LEN_08BIT, 0x02},
+	{0xc499, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49a, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49c, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49f, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a5, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4a8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a9, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4aa, CRL_REG_LEN_08BIT, 0x0d},
+	{0xc4ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4ac, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4ad, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4b4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b5, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b7, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4ba, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4be, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4bf, CRL_REG_LEN_08BIT, 0x33},
+	{0xc4c8, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4c9, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4ca, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0x18},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0x18},
+	{0xc4d0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4d1, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4e0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4e1, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4e2, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4e4, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4e5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4e6, CRL_REG_LEN_08BIT, 0x30},
+	{0xc4e7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4e8, CRL_REG_LEN_08BIT, 0x50},
+	{0xc4e9, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4ea, CRL_REG_LEN_08BIT, 0x70},
+	{0xc4eb, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4ec, CRL_REG_LEN_08BIT, 0x90},
+	{0xc4ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc4ee, CRL_REG_LEN_08BIT, 0xb0},
+	{0xc4ef, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc4f0, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4f1, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc4f2, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4f3, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4f4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4f6, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f8, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4f9, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fe, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4ff, CRL_REG_LEN_08BIT, 0x02},
+	{0xc500, CRL_REG_LEN_08BIT, 0x48},
+	{0xc501, CRL_REG_LEN_08BIT, 0x74},
+	{0xc502, CRL_REG_LEN_08BIT, 0x58},
+	{0xc503, CRL_REG_LEN_08BIT, 0x80},
+	{0xc504, CRL_REG_LEN_08BIT, 0x05},
+	{0xc505, CRL_REG_LEN_08BIT, 0x80},
+	{0xc506, CRL_REG_LEN_08BIT, 0x03},
+	{0xc507, CRL_REG_LEN_08BIT, 0x80},
+	{0xc508, CRL_REG_LEN_08BIT, 0x01},
+	{0xc509, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc50a, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50b, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc50c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50d, CRL_REG_LEN_08BIT, 0x2c},
+	{0xc50e, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50f, CRL_REG_LEN_08BIT, 0x0a},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x01},
+	{0xc512, CRL_REG_LEN_08BIT, 0x01},
+	{0xc513, CRL_REG_LEN_08BIT, 0x80},
+	{0xc514, CRL_REG_LEN_08BIT, 0x04},
+	{0xc515, CRL_REG_LEN_08BIT, 0x00},
+	{0xc518, CRL_REG_LEN_08BIT, 0x03},
+	{0xc519, CRL_REG_LEN_08BIT, 0x48},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x07},
+	{0xc51b, CRL_REG_LEN_08BIT, 0x70},
+	{0xc2e0, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e1, CRL_REG_LEN_08BIT, 0x51},
+	{0xc2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e3, CRL_REG_LEN_08BIT, 0xd6},
+	{0xc2e4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2e5, CRL_REG_LEN_08BIT, 0x5e},
+	{0xc2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2ea, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2eb, CRL_REG_LEN_08BIT, 0x90},
+	{0xc2ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2ee, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2ef, CRL_REG_LEN_08BIT, 0x64},
+	{0xc308, CRL_REG_LEN_08BIT, 0x00},
+	{0xc309, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xc30e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc310, CRL_REG_LEN_08BIT, 0x01},
+	{0xc311, CRL_REG_LEN_08BIT, 0x60},
+	{0xc312, CRL_REG_LEN_08BIT, 0xff},
+	{0xc313, CRL_REG_LEN_08BIT, 0x08},
+	{0xc314, CRL_REG_LEN_08BIT, 0x01},
+	{0xc315, CRL_REG_LEN_08BIT, 0x7f},
+	{0xc316, CRL_REG_LEN_08BIT, 0xff},
+	{0xc317, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc318, CRL_REG_LEN_08BIT, 0x00},
+	{0xc319, CRL_REG_LEN_08BIT, 0x0c},
+	{0xc31a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31b, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc31c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31d, CRL_REG_LEN_08BIT, 0x14},
+	{0xc31e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31f, CRL_REG_LEN_08BIT, 0xc5},
+	{0xc320, CRL_REG_LEN_08BIT, 0xff},
+	{0xc321, CRL_REG_LEN_08BIT, 0x4b},
+	{0xc322, CRL_REG_LEN_08BIT, 0xff},
+	{0xc323, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc324, CRL_REG_LEN_08BIT, 0xff},
+	{0xc325, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc326, CRL_REG_LEN_08BIT, 0x00},
+	{0xc327, CRL_REG_LEN_08BIT, 0x46},
+	{0xc328, CRL_REG_LEN_08BIT, 0xff},
+	{0xc329, CRL_REG_LEN_08BIT, 0xd2},
+	{0xc32a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32b, CRL_REG_LEN_08BIT, 0xe4},
+	{0xc32c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32d, CRL_REG_LEN_08BIT, 0xbb},
+	{0xc32e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc32f, CRL_REG_LEN_08BIT, 0x61},
+	{0xc330, CRL_REG_LEN_08BIT, 0xff},
+	{0xc331, CRL_REG_LEN_08BIT, 0xf9},
+	{0xc332, CRL_REG_LEN_08BIT, 0x00},
+	{0xc333, CRL_REG_LEN_08BIT, 0xd9},
+	{0xc334, CRL_REG_LEN_08BIT, 0x00},
+	{0xc335, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc336, CRL_REG_LEN_08BIT, 0x00},
+	{0xc337, CRL_REG_LEN_08BIT, 0xb1},
+	{0xc338, CRL_REG_LEN_08BIT, 0xff},
+	{0xc339, CRL_REG_LEN_08BIT, 0x64},
+	{0xc33a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33b, CRL_REG_LEN_08BIT, 0xeb},
+	{0xc33c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33d, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc33e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc33f, CRL_REG_LEN_08BIT, 0x48},
+	{0xc340, CRL_REG_LEN_08BIT, 0xff},
+	{0xc341, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc342, CRL_REG_LEN_08BIT, 0xff},
+	{0xc343, CRL_REG_LEN_08BIT, 0xed},
+	{0xc344, CRL_REG_LEN_08BIT, 0xff},
+	{0xc345, CRL_REG_LEN_08BIT, 0xad},
+	{0xc346, CRL_REG_LEN_08BIT, 0x00},
+	{0xc347, CRL_REG_LEN_08BIT, 0x66},
+	{0xc348, CRL_REG_LEN_08BIT, 0x01},
+	{0xc349, CRL_REG_LEN_08BIT, 0x00},
+	{0x6700, CRL_REG_LEN_08BIT, 0x04},
+	{0x6701, CRL_REG_LEN_08BIT, 0x7b},
+	{0x6702, CRL_REG_LEN_08BIT, 0xfd},
+	{0x6703, CRL_REG_LEN_08BIT, 0xf9},
+	{0x6704, CRL_REG_LEN_08BIT, 0x3d},
+	{0x6705, CRL_REG_LEN_08BIT, 0x71},
+	{0x6706, CRL_REG_LEN_08BIT, 0x78},
+	{0x6708, CRL_REG_LEN_08BIT, 0x05},
+	{0x6f06, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f07, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0a, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f00, CRL_REG_LEN_08BIT, 0x03},
+	{0xc34c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc34d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc34e, CRL_REG_LEN_08BIT, 0x46},
+	{0xc34f, CRL_REG_LEN_08BIT, 0x55},
+	{0xc350, CRL_REG_LEN_08BIT, 0x00},
+	{0xc351, CRL_REG_LEN_08BIT, 0x40},
+	{0xc352, CRL_REG_LEN_08BIT, 0x00},
+	{0xc353, CRL_REG_LEN_08BIT, 0xff},
+	{0xc354, CRL_REG_LEN_08BIT, 0x04},
+	{0xc355, CRL_REG_LEN_08BIT, 0x08},
+	{0xc356, CRL_REG_LEN_08BIT, 0x01},
+	{0xc357, CRL_REG_LEN_08BIT, 0xef},
+	{0xc358, CRL_REG_LEN_08BIT, 0x30},
+	{0xc359, CRL_REG_LEN_08BIT, 0x01},
+	{0xc35a, CRL_REG_LEN_08BIT, 0x64},
+	{0xc35b, CRL_REG_LEN_08BIT, 0x46},
+	{0xc35c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301a, CRL_REG_LEN_08BIT, 0xf0},
+	{0xceb0, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb1, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb2, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb3, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb4, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb5, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb6, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+};
+
+static struct crl_register_write_rep ov10635_1280_720_YUV_HDR_BT656[] = {
+	{0x0103, CRL_REG_LEN_08BIT, 0x01},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x301b, CRL_REG_LEN_08BIT, 0xff},
+	{0x301c, CRL_REG_LEN_08BIT, 0xff},
+	{0x301a, CRL_REG_LEN_08BIT, 0xff},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x6900, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6901, CRL_REG_LEN_08BIT, 0x11},
+	{0x3503, CRL_REG_LEN_08BIT, 0x10},
+	{0x3025, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x14},
+	{0x3004, CRL_REG_LEN_08BIT, 0x11},
+	{0x3005, CRL_REG_LEN_08BIT, 0x20},
+	{0x3006, CRL_REG_LEN_08BIT, 0x91},
+	{0x3600, CRL_REG_LEN_08BIT, 0x74},
+	{0x3601, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3612, CRL_REG_LEN_08BIT, 0x00},
+	{0x3611, CRL_REG_LEN_08BIT, 0x67},
+	{0x3633, CRL_REG_LEN_08BIT, 0xca},
+	{0x3602, CRL_REG_LEN_08BIT, 0x2f},
+	{0x3603, CRL_REG_LEN_08BIT, 0x00},
+	{0x3630, CRL_REG_LEN_08BIT, 0x28},
+	{0x3631, CRL_REG_LEN_08BIT, 0x16},
+	{0x3714, CRL_REG_LEN_08BIT, 0x10},
+	{0x371d, CRL_REG_LEN_08BIT, 0x01},
+	{0x4300, CRL_REG_LEN_08BIT, 0x3a},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x3020, CRL_REG_LEN_08BIT, 0x0b},
+	{0x3702, CRL_REG_LEN_08BIT, 0x1a},
+	{0x3703, CRL_REG_LEN_08BIT, 0x40},
+	{0x3704, CRL_REG_LEN_08BIT, 0x2a},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x370c, CRL_REG_LEN_08BIT, 0xc7},
+	{0x370d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3712, CRL_REG_LEN_08BIT, 0x00},
+	{0x3713, CRL_REG_LEN_08BIT, 0x20},
+	{0x3715, CRL_REG_LEN_08BIT, 0x04},
+	{0x381d, CRL_REG_LEN_08BIT, 0x40},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3822, CRL_REG_LEN_08BIT, 0x50},
+	{0x3824, CRL_REG_LEN_08BIT, 0x50},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3804, CRL_REG_LEN_08BIT, 0x05},
+	{0x3805, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3806, CRL_REG_LEN_08BIT, 0x02},
+	{0x3807, CRL_REG_LEN_08BIT, 0xfd},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0x2c},
+	{0x3808, CRL_REG_LEN_08BIT, 0x05},
+	{0x3809, CRL_REG_LEN_08BIT, 0x00},
+	{0x380a, CRL_REG_LEN_08BIT, 0x02},
+	{0x380b, CRL_REG_LEN_08BIT, 0xd0},
+	{0x380c, CRL_REG_LEN_08BIT, 0x06},
+	{0x380d, CRL_REG_LEN_08BIT, 0xf6},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x02},
+	{0x6e43, CRL_REG_LEN_08BIT, 0xec},
+	{0x380e, CRL_REG_LEN_08BIT, 0x02},
+	{0x380f, CRL_REG_LEN_08BIT, 0xec},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x3811, CRL_REG_LEN_08BIT, 0x10},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3828, CRL_REG_LEN_08BIT, 0x03},
+	{0x3829, CRL_REG_LEN_08BIT, 0x10},
+	{0x382a, CRL_REG_LEN_08BIT, 0x10},
+	{0x382b, CRL_REG_LEN_08BIT, 0x10},
+	{0x3621, CRL_REG_LEN_08BIT, 0x64},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x56d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d6, CRL_REG_LEN_08BIT, 0x80},
+	{0x56d7, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x56da, CRL_REG_LEN_08BIT, 0x80},
+	{0x56db, CRL_REG_LEN_08BIT, 0x00},
+	{0x56dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e9, CRL_REG_LEN_08BIT, 0x7f},
+	{0x56ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x56eb, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5100, CRL_REG_LEN_08BIT, 0x00},
+	{0x5101, CRL_REG_LEN_08BIT, 0x80},
+	{0x5102, CRL_REG_LEN_08BIT, 0x00},
+	{0x5103, CRL_REG_LEN_08BIT, 0x80},
+	{0x5104, CRL_REG_LEN_08BIT, 0x00},
+	{0x5105, CRL_REG_LEN_08BIT, 0x80},
+	{0x5106, CRL_REG_LEN_08BIT, 0x00},
+	{0x5107, CRL_REG_LEN_08BIT, 0x80},
+	{0x5108, CRL_REG_LEN_08BIT, 0x00},
+	{0x5109, CRL_REG_LEN_08BIT, 0x00},
+	{0x510a, CRL_REG_LEN_08BIT, 0x00},
+	{0x510b, CRL_REG_LEN_08BIT, 0x00},
+	{0x510c, CRL_REG_LEN_08BIT, 0x00},
+	{0x510d, CRL_REG_LEN_08BIT, 0x00},
+	{0x510e, CRL_REG_LEN_08BIT, 0x00},
+	{0x510f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5110, CRL_REG_LEN_08BIT, 0x00},
+	{0x5111, CRL_REG_LEN_08BIT, 0x80},
+	{0x5112, CRL_REG_LEN_08BIT, 0x00},
+	{0x5113, CRL_REG_LEN_08BIT, 0x80},
+	{0x5114, CRL_REG_LEN_08BIT, 0x00},
+	{0x5115, CRL_REG_LEN_08BIT, 0x80},
+	{0x5116, CRL_REG_LEN_08BIT, 0x00},
+	{0x5117, CRL_REG_LEN_08BIT, 0x80},
+	{0x5118, CRL_REG_LEN_08BIT, 0x00},
+	{0x5119, CRL_REG_LEN_08BIT, 0x00},
+	{0x511a, CRL_REG_LEN_08BIT, 0x00},
+	{0x511b, CRL_REG_LEN_08BIT, 0x00},
+	{0x511c, CRL_REG_LEN_08BIT, 0x00},
+	{0x511d, CRL_REG_LEN_08BIT, 0x00},
+	{0x511e, CRL_REG_LEN_08BIT, 0x00},
+	{0x511f, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x5006, CRL_REG_LEN_08BIT, 0x24},
+	{0x5608, CRL_REG_LEN_08BIT, 0x0e},
+	{0x52d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x528d, CRL_REG_LEN_08BIT, 0x08},
+	{0x5293, CRL_REG_LEN_08BIT, 0x12},
+	{0x52d3, CRL_REG_LEN_08BIT, 0x12},
+	{0x5288, CRL_REG_LEN_08BIT, 0x06},
+	{0x5289, CRL_REG_LEN_08BIT, 0x20},
+	{0x52c8, CRL_REG_LEN_08BIT, 0x06},
+	{0x52c9, CRL_REG_LEN_08BIT, 0x20},
+	{0x52cd, CRL_REG_LEN_08BIT, 0x04},
+	{0x5381, CRL_REG_LEN_08BIT, 0x00},
+	{0x5382, CRL_REG_LEN_08BIT, 0xff},
+	{0x5589, CRL_REG_LEN_08BIT, 0x76},
+	{0x558a, CRL_REG_LEN_08BIT, 0x47},
+	{0x558b, CRL_REG_LEN_08BIT, 0xef},
+	{0x558c, CRL_REG_LEN_08BIT, 0xc9},
+	{0x558d, CRL_REG_LEN_08BIT, 0x49},
+	{0x558e, CRL_REG_LEN_08BIT, 0x30},
+	{0x558f, CRL_REG_LEN_08BIT, 0x67},
+	{0x5590, CRL_REG_LEN_08BIT, 0x3f},
+	{0x5591, CRL_REG_LEN_08BIT, 0xf0},
+	{0x5592, CRL_REG_LEN_08BIT, 0x10},
+	{0x55a2, CRL_REG_LEN_08BIT, 0x6d},
+	{0x55a3, CRL_REG_LEN_08BIT, 0x55},
+	{0x55a4, CRL_REG_LEN_08BIT, 0xc3},
+	{0x55a5, CRL_REG_LEN_08BIT, 0xb5},
+	{0x55a6, CRL_REG_LEN_08BIT, 0x43},
+	{0x55a7, CRL_REG_LEN_08BIT, 0x38},
+	{0x55a8, CRL_REG_LEN_08BIT, 0x5f},
+	{0x55a9, CRL_REG_LEN_08BIT, 0x4b},
+	{0x55aa, CRL_REG_LEN_08BIT, 0xf0},
+	{0x55ab, CRL_REG_LEN_08BIT, 0x10},
+	{0x5581, CRL_REG_LEN_08BIT, 0x52},
+	{0x5300, CRL_REG_LEN_08BIT, 0x01},
+	{0x5301, CRL_REG_LEN_08BIT, 0x00},
+	{0x5302, CRL_REG_LEN_08BIT, 0x00},
+	{0x5303, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5304, CRL_REG_LEN_08BIT, 0x00},
+	{0x5305, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5306, CRL_REG_LEN_08BIT, 0x00},
+	{0x5307, CRL_REG_LEN_08BIT, 0x36},
+	{0x5308, CRL_REG_LEN_08BIT, 0x00},
+	{0x5309, CRL_REG_LEN_08BIT, 0xd9},
+	{0x530a, CRL_REG_LEN_08BIT, 0x00},
+	{0x530b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x530c, CRL_REG_LEN_08BIT, 0x00},
+	{0x530d, CRL_REG_LEN_08BIT, 0x2c},
+	{0x530e, CRL_REG_LEN_08BIT, 0x00},
+	{0x530f, CRL_REG_LEN_08BIT, 0x59},
+	{0x5310, CRL_REG_LEN_08BIT, 0x00},
+	{0x5311, CRL_REG_LEN_08BIT, 0x7b},
+	{0x5312, CRL_REG_LEN_08BIT, 0x00},
+	{0x5313, CRL_REG_LEN_08BIT, 0x22},
+	{0x5314, CRL_REG_LEN_08BIT, 0x00},
+	{0x5315, CRL_REG_LEN_08BIT, 0xd5},
+	{0x5316, CRL_REG_LEN_08BIT, 0x00},
+	{0x5317, CRL_REG_LEN_08BIT, 0x13},
+	{0x5318, CRL_REG_LEN_08BIT, 0x00},
+	{0x5319, CRL_REG_LEN_08BIT, 0x18},
+	{0x531a, CRL_REG_LEN_08BIT, 0x00},
+	{0x531b, CRL_REG_LEN_08BIT, 0x26},
+	{0x531c, CRL_REG_LEN_08BIT, 0x00},
+	{0x531d, CRL_REG_LEN_08BIT, 0xdc},
+	{0x531e, CRL_REG_LEN_08BIT, 0x00},
+	{0x531f, CRL_REG_LEN_08BIT, 0x02},
+	{0x5320, CRL_REG_LEN_08BIT, 0x00},
+	{0x5321, CRL_REG_LEN_08BIT, 0x24},
+	{0x5322, CRL_REG_LEN_08BIT, 0x00},
+	{0x5323, CRL_REG_LEN_08BIT, 0x56},
+	{0x5324, CRL_REG_LEN_08BIT, 0x00},
+	{0x5325, CRL_REG_LEN_08BIT, 0x85},
+	{0x5326, CRL_REG_LEN_08BIT, 0x00},
+	{0x5327, CRL_REG_LEN_08BIT, 0x20},
+	{0x5609, CRL_REG_LEN_08BIT, 0x01},
+	{0x560a, CRL_REG_LEN_08BIT, 0x40},
+	{0x560b, CRL_REG_LEN_08BIT, 0x01},
+	{0x560c, CRL_REG_LEN_08BIT, 0x40},
+	{0x560d, CRL_REG_LEN_08BIT, 0x00},
+	{0x560e, CRL_REG_LEN_08BIT, 0xfa},
+	{0x560f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5610, CRL_REG_LEN_08BIT, 0xfa},
+	{0x5611, CRL_REG_LEN_08BIT, 0x02},
+	{0x5612, CRL_REG_LEN_08BIT, 0x80},
+	{0x5613, CRL_REG_LEN_08BIT, 0x02},
+	{0x5614, CRL_REG_LEN_08BIT, 0x80},
+	{0x5615, CRL_REG_LEN_08BIT, 0x01},
+	{0x5616, CRL_REG_LEN_08BIT, 0x2c},
+	{0x5617, CRL_REG_LEN_08BIT, 0x01},
+	{0x5618, CRL_REG_LEN_08BIT, 0x2c},
+	{0x563b, CRL_REG_LEN_08BIT, 0x01},
+	{0x563c, CRL_REG_LEN_08BIT, 0x01},
+	{0x563d, CRL_REG_LEN_08BIT, 0x01},
+	{0x563e, CRL_REG_LEN_08BIT, 0x01},
+	{0x563f, CRL_REG_LEN_08BIT, 0x03},
+	{0x5640, CRL_REG_LEN_08BIT, 0x03},
+	{0x5641, CRL_REG_LEN_08BIT, 0x03},
+	{0x5642, CRL_REG_LEN_08BIT, 0x05},
+	{0x5643, CRL_REG_LEN_08BIT, 0x09},
+	{0x5644, CRL_REG_LEN_08BIT, 0x05},
+	{0x5645, CRL_REG_LEN_08BIT, 0x05},
+	{0x5646, CRL_REG_LEN_08BIT, 0x05},
+	{0x5647, CRL_REG_LEN_08BIT, 0x05},
+	{0x5651, CRL_REG_LEN_08BIT, 0x00},
+	{0x5652, CRL_REG_LEN_08BIT, 0x80},
+	{0x521a, CRL_REG_LEN_08BIT, 0x01},
+	{0x521b, CRL_REG_LEN_08BIT, 0x03},
+	{0x521c, CRL_REG_LEN_08BIT, 0x06},
+	{0x521d, CRL_REG_LEN_08BIT, 0x0a},
+	{0x521e, CRL_REG_LEN_08BIT, 0x0e},
+	{0x521f, CRL_REG_LEN_08BIT, 0x12},
+	{0x5220, CRL_REG_LEN_08BIT, 0x16},
+	{0x5223, CRL_REG_LEN_08BIT, 0x02},
+	{0x5225, CRL_REG_LEN_08BIT, 0x04},
+	{0x5227, CRL_REG_LEN_08BIT, 0x08},
+	{0x5229, CRL_REG_LEN_08BIT, 0x0c},
+	{0x522b, CRL_REG_LEN_08BIT, 0x12},
+	{0x522d, CRL_REG_LEN_08BIT, 0x18},
+	{0x522f, CRL_REG_LEN_08BIT, 0x1e},
+	{0x5241, CRL_REG_LEN_08BIT, 0x04},
+	{0x5242, CRL_REG_LEN_08BIT, 0x01},
+	{0x5243, CRL_REG_LEN_08BIT, 0x03},
+	{0x5244, CRL_REG_LEN_08BIT, 0x06},
+	{0x5245, CRL_REG_LEN_08BIT, 0x0a},
+	{0x5246, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5247, CRL_REG_LEN_08BIT, 0x12},
+	{0x5248, CRL_REG_LEN_08BIT, 0x16},
+	{0x524a, CRL_REG_LEN_08BIT, 0x03},
+	{0x524c, CRL_REG_LEN_08BIT, 0x04},
+	{0x524e, CRL_REG_LEN_08BIT, 0x08},
+	{0x5250, CRL_REG_LEN_08BIT, 0x0c},
+	{0x5252, CRL_REG_LEN_08BIT, 0x12},
+	{0x5254, CRL_REG_LEN_08BIT, 0x18},
+	{0x5256, CRL_REG_LEN_08BIT, 0x1e},
+	{0x4606, CRL_REG_LEN_08BIT, 0x07},
+	{0x4607, CRL_REG_LEN_08BIT, 0x71},
+	{0x460a, CRL_REG_LEN_08BIT, 0x03},
+	{0x460b, CRL_REG_LEN_08BIT, 0xe7},
+	{0x460c, CRL_REG_LEN_08BIT, 0x40},
+	{0x4620, CRL_REG_LEN_08BIT, 0x0e},
+	{0x4700, CRL_REG_LEN_08BIT, 0x06},
+	{0x4701, CRL_REG_LEN_08BIT, 0x00},
+	{0x4702, CRL_REG_LEN_08BIT, 0x01},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4005, CRL_REG_LEN_08BIT, 0x18},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4052, CRL_REG_LEN_08BIT, 0x02},
+	{0x4057, CRL_REG_LEN_08BIT, 0x9c},
+	{0x405a, CRL_REG_LEN_08BIT, 0x00},
+	{0x4302, CRL_REG_LEN_08BIT, 0x03},
+	{0x4303, CRL_REG_LEN_08BIT, 0xff},
+	{0x4304, CRL_REG_LEN_08BIT, 0x00},
+	{0x4305, CRL_REG_LEN_08BIT, 0x10},
+	{0x4306, CRL_REG_LEN_08BIT, 0x03},
+	{0x4307, CRL_REG_LEN_08BIT, 0xff},
+	{0x4308, CRL_REG_LEN_08BIT, 0x00},
+	{0x4309, CRL_REG_LEN_08BIT, 0x10},
+	{0x4202, CRL_REG_LEN_08BIT, 0x02},
+	{0x3023, CRL_REG_LEN_08BIT, 0x10},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x6f10, CRL_REG_LEN_08BIT, 0x07},
+	{0x6f11, CRL_REG_LEN_08BIT, 0x82},
+	{0x6f12, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f13, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f14, CRL_REG_LEN_08BIT, 0x1f},
+	{0x6f15, CRL_REG_LEN_08BIT, 0xdd},
+	{0x6f16, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f17, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f18, CRL_REG_LEN_08BIT, 0x36},
+	{0x6f19, CRL_REG_LEN_08BIT, 0x66},
+	{0x6f1a, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1b, CRL_REG_LEN_08BIT, 0x08},
+	{0x6f1c, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6f1d, CRL_REG_LEN_08BIT, 0xe7},
+	{0x6f1e, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1f, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd000, CRL_REG_LEN_08BIT, 0x19},
+	{0xd001, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd002, CRL_REG_LEN_08BIT, 0x00},
+	{0xd003, CRL_REG_LEN_08BIT, 0x01},
+	{0xd004, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd005, CRL_REG_LEN_08BIT, 0xad},
+	{0xd006, CRL_REG_LEN_08BIT, 0x10},
+	{0xd007, CRL_REG_LEN_08BIT, 0x40},
+	{0xd008, CRL_REG_LEN_08BIT, 0x44},
+	{0xd009, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd00b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd00d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd010, CRL_REG_LEN_08BIT, 0x19},
+	{0xd011, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd012, CRL_REG_LEN_08BIT, 0x00},
+	{0xd013, CRL_REG_LEN_08BIT, 0x01},
+	{0xd014, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd015, CRL_REG_LEN_08BIT, 0xad},
+	{0xd016, CRL_REG_LEN_08BIT, 0x14},
+	{0xd017, CRL_REG_LEN_08BIT, 0x40},
+	{0xd018, CRL_REG_LEN_08BIT, 0x44},
+	{0xd019, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd01b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd01d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd020, CRL_REG_LEN_08BIT, 0x19},
+	{0xd021, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd022, CRL_REG_LEN_08BIT, 0x00},
+	{0xd023, CRL_REG_LEN_08BIT, 0x01},
+	{0xd024, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd025, CRL_REG_LEN_08BIT, 0xad},
+	{0xd026, CRL_REG_LEN_08BIT, 0x15},
+	{0xd027, CRL_REG_LEN_08BIT, 0x28},
+	{0xd028, CRL_REG_LEN_08BIT, 0x44},
+	{0xd029, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd02b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd02d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd030, CRL_REG_LEN_08BIT, 0x19},
+	{0xd031, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd032, CRL_REG_LEN_08BIT, 0x00},
+	{0xd033, CRL_REG_LEN_08BIT, 0x01},
+	{0xd034, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd035, CRL_REG_LEN_08BIT, 0xad},
+	{0xd036, CRL_REG_LEN_08BIT, 0x15},
+	{0xd037, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd038, CRL_REG_LEN_08BIT, 0x44},
+	{0xd039, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd03b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd03d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd040, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd041, CRL_REG_LEN_08BIT, 0x21},
+	{0xd042, CRL_REG_LEN_08BIT, 0xff},
+	{0xd043, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd044, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd045, CRL_REG_LEN_08BIT, 0x01},
+	{0xd046, CRL_REG_LEN_08BIT, 0x48},
+	{0xd047, CRL_REG_LEN_08BIT, 0x00},
+	{0xd048, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd049, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04a, CRL_REG_LEN_08BIT, 0x50},
+	{0xd04b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd04c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd04d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd04f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd050, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd051, CRL_REG_LEN_08BIT, 0x01},
+	{0xd052, CRL_REG_LEN_08BIT, 0x70},
+	{0xd053, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd054, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd055, CRL_REG_LEN_08BIT, 0x01},
+	{0xd056, CRL_REG_LEN_08BIT, 0x80},
+	{0xd057, CRL_REG_LEN_08BIT, 0x10},
+	{0xd058, CRL_REG_LEN_08BIT, 0x19},
+	{0xd059, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd05a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd05b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd05c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd05d, CRL_REG_LEN_08BIT, 0xce},
+	{0xd05e, CRL_REG_LEN_08BIT, 0x02},
+	{0xd05f, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd060, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd061, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd062, CRL_REG_LEN_08BIT, 0x00},
+	{0xd063, CRL_REG_LEN_08BIT, 0x00},
+	{0xd064, CRL_REG_LEN_08BIT, 0x84},
+	{0xd065, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd066, CRL_REG_LEN_08BIT, 0x00},
+	{0xd067, CRL_REG_LEN_08BIT, 0x00},
+	{0xd068, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd069, CRL_REG_LEN_08BIT, 0x03},
+	{0xd06a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd06b, CRL_REG_LEN_08BIT, 0x76},
+	{0xd06c, CRL_REG_LEN_08BIT, 0x1a},
+	{0xd06d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd070, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd071, CRL_REG_LEN_08BIT, 0x10},
+	{0xd072, CRL_REG_LEN_08BIT, 0x03},
+	{0xd073, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd074, CRL_REG_LEN_08BIT, 0x18},
+	{0xd075, CRL_REG_LEN_08BIT, 0x60},
+	{0xd076, CRL_REG_LEN_08BIT, 0x00},
+	{0xd077, CRL_REG_LEN_08BIT, 0x01},
+	{0xd078, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd079, CRL_REG_LEN_08BIT, 0x63},
+	{0xd07a, CRL_REG_LEN_08BIT, 0x07},
+	{0xd07b, CRL_REG_LEN_08BIT, 0x80},
+	{0xd07c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd07d, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd07e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd07f, CRL_REG_LEN_08BIT, 0x04},
+	{0xd080, CRL_REG_LEN_08BIT, 0x18},
+	{0xd081, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd082, CRL_REG_LEN_08BIT, 0x00},
+	{0xd083, CRL_REG_LEN_08BIT, 0x00},
+	{0xd084, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd085, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd086, CRL_REG_LEN_08BIT, 0x00},
+	{0xd087, CRL_REG_LEN_08BIT, 0x00},
+	{0xd088, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd089, CRL_REG_LEN_08BIT, 0x63},
+	{0xd08a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd08d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd08e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd08f, CRL_REG_LEN_08BIT, 0x14},
+	{0xd090, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd091, CRL_REG_LEN_08BIT, 0x01},
+	{0xd092, CRL_REG_LEN_08BIT, 0x30},
+	{0xd093, CRL_REG_LEN_08BIT, 0x18},
+	{0xd094, CRL_REG_LEN_08BIT, 0x07},
+	{0xd095, CRL_REG_LEN_08BIT, 0xff},
+	{0xd096, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd097, CRL_REG_LEN_08BIT, 0xfd},
+	{0xd098, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd099, CRL_REG_LEN_08BIT, 0x80},
+	{0xd09a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd09c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd09d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd09e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd0a0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd0a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0a3, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0a5, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd0a6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd0a8, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0a9, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0aa, CRL_REG_LEN_08BIT, 0x58},
+	{0xd0ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ac, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0ad, CRL_REG_LEN_08BIT, 0x8e},
+	{0xd0ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0b1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0b2, CRL_REG_LEN_08BIT, 0x30},
+	{0xd0b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b4, CRL_REG_LEN_08BIT, 0x98},
+	{0xd0b5, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd0b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd0ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0bb, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd0bc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0bd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd0be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0bf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd0c1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0c4, CRL_REG_LEN_08BIT, 0x95},
+	{0xd0c5, CRL_REG_LEN_08BIT, 0x8b},
+	{0xd0c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c8, CRL_REG_LEN_08BIT, 0x94},
+	{0xd0c9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd0ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0cb, CRL_REG_LEN_08BIT, 0x70},
+	{0xd0cc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0cd, CRL_REG_LEN_08BIT, 0x65},
+	{0xd0ce, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd0d1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d3, CRL_REG_LEN_08BIT, 0x62},
+	{0xd0d4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd0d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0da, CRL_REG_LEN_08BIT, 0x80},
+	{0xd0db, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0dd, CRL_REG_LEN_08BIT, 0x83},
+	{0xd0de, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0df, CRL_REG_LEN_08BIT, 0x29},
+	{0xd0e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e1, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd0e2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0e3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd0e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0e5, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e9, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd0ea, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0eb, CRL_REG_LEN_08BIT, 0x09},
+	{0xd0ec, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0ed, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd0ee, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0ef, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd0f0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f1, CRL_REG_LEN_08BIT, 0x07},
+	{0xd0f2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd0f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0f5, CRL_REG_LEN_08BIT, 0x66},
+	{0xd0f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f9, CRL_REG_LEN_08BIT, 0x05},
+	{0xd0fa, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0fc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ff, CRL_REG_LEN_08BIT, 0x01},
+	{0xd100, CRL_REG_LEN_08BIT, 0x98},
+	{0xd101, CRL_REG_LEN_08BIT, 0x90},
+	{0xd102, CRL_REG_LEN_08BIT, 0x00},
+	{0xd103, CRL_REG_LEN_08BIT, 0x00},
+	{0xd104, CRL_REG_LEN_08BIT, 0x84},
+	{0xd105, CRL_REG_LEN_08BIT, 0xae},
+	{0xd106, CRL_REG_LEN_08BIT, 0x00},
+	{0xd107, CRL_REG_LEN_08BIT, 0x00},
+	{0xd108, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd109, CRL_REG_LEN_08BIT, 0x63},
+	{0xd10a, CRL_REG_LEN_08BIT, 0x06},
+	{0xd10b, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd10c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd10d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd10e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd10f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd110, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd111, CRL_REG_LEN_08BIT, 0x03},
+	{0xd112, CRL_REG_LEN_08BIT, 0x30},
+	{0xd113, CRL_REG_LEN_08BIT, 0x00},
+	{0xd114, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd115, CRL_REG_LEN_08BIT, 0x65},
+	{0xd116, CRL_REG_LEN_08BIT, 0x00},
+	{0xd117, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd118, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd119, CRL_REG_LEN_08BIT, 0x84},
+	{0xd11a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd11b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11c, CRL_REG_LEN_08BIT, 0x10},
+	{0xd11d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11f, CRL_REG_LEN_08BIT, 0x07},
+	{0xd120, CRL_REG_LEN_08BIT, 0x18},
+	{0xd121, CRL_REG_LEN_08BIT, 0x80},
+	{0xd122, CRL_REG_LEN_08BIT, 0x80},
+	{0xd123, CRL_REG_LEN_08BIT, 0x06},
+	{0xd124, CRL_REG_LEN_08BIT, 0x94},
+	{0xd125, CRL_REG_LEN_08BIT, 0x65},
+	{0xd126, CRL_REG_LEN_08BIT, 0x00},
+	{0xd127, CRL_REG_LEN_08BIT, 0x70},
+	{0xd128, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd129, CRL_REG_LEN_08BIT, 0x43},
+	{0xd12a, CRL_REG_LEN_08BIT, 0x60},
+	{0xd12b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12c, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd12d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12f, CRL_REG_LEN_08BIT, 0x3e},
+	{0xd130, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd131, CRL_REG_LEN_08BIT, 0x64},
+	{0xd132, CRL_REG_LEN_08BIT, 0x38},
+	{0xd133, CRL_REG_LEN_08BIT, 0x24},
+	{0xd134, CRL_REG_LEN_08BIT, 0x18},
+	{0xd135, CRL_REG_LEN_08BIT, 0x80},
+	{0xd136, CRL_REG_LEN_08BIT, 0x80},
+	{0xd137, CRL_REG_LEN_08BIT, 0x06},
+	{0xd138, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd139, CRL_REG_LEN_08BIT, 0x64},
+	{0xd13a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd13b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd13c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd13d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd13e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd13f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd140, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd141, CRL_REG_LEN_08BIT, 0x63},
+	{0xd142, CRL_REG_LEN_08BIT, 0x00},
+	{0xd143, CRL_REG_LEN_08BIT, 0x40},
+	{0xd144, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd145, CRL_REG_LEN_08BIT, 0x23},
+	{0xd146, CRL_REG_LEN_08BIT, 0x00},
+	{0xd147, CRL_REG_LEN_08BIT, 0x00},
+	{0xd148, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd149, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14b, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd14c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd14d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd14e, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd14f, CRL_REG_LEN_08BIT, 0x44},
+	{0xd150, CRL_REG_LEN_08BIT, 0x19},
+	{0xd151, CRL_REG_LEN_08BIT, 0x00},
+	{0xd152, CRL_REG_LEN_08BIT, 0x80},
+	{0xd153, CRL_REG_LEN_08BIT, 0x06},
+	{0xd154, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd155, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd156, CRL_REG_LEN_08BIT, 0x3d},
+	{0xd157, CRL_REG_LEN_08BIT, 0x05},
+	{0xd158, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd159, CRL_REG_LEN_08BIT, 0x67},
+	{0xd15a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd15d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd15e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd160, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd161, CRL_REG_LEN_08BIT, 0x63},
+	{0xd162, CRL_REG_LEN_08BIT, 0x00},
+	{0xd163, CRL_REG_LEN_08BIT, 0x98},
+	{0xd164, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd165, CRL_REG_LEN_08BIT, 0x03},
+	{0xd166, CRL_REG_LEN_08BIT, 0x00},
+	{0xd167, CRL_REG_LEN_08BIT, 0x00},
+	{0xd168, CRL_REG_LEN_08BIT, 0x10},
+	{0xd169, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd16c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd16d, CRL_REG_LEN_08BIT, 0x48},
+	{0xd16e, CRL_REG_LEN_08BIT, 0x67},
+	{0xd16f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd170, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd171, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd172, CRL_REG_LEN_08BIT, 0x00},
+	{0xd173, CRL_REG_LEN_08BIT, 0x19},
+	{0xd174, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd175, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd176, CRL_REG_LEN_08BIT, 0x00},
+	{0xd177, CRL_REG_LEN_08BIT, 0x00},
+	{0xd178, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd179, CRL_REG_LEN_08BIT, 0x68},
+	{0xd17a, CRL_REG_LEN_08BIT, 0x67},
+	{0xd17b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd17c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd17d, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd17e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd17f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd180, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd181, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd182, CRL_REG_LEN_08BIT, 0x00},
+	{0xd183, CRL_REG_LEN_08BIT, 0x00},
+	{0xd184, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd185, CRL_REG_LEN_08BIT, 0x85},
+	{0xd186, CRL_REG_LEN_08BIT, 0x00},
+	{0xd187, CRL_REG_LEN_08BIT, 0x98},
+	{0xd188, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd189, CRL_REG_LEN_08BIT, 0x63},
+	{0xd18a, CRL_REG_LEN_08BIT, 0x30},
+	{0xd18b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd18c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd18d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd18e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd18f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd190, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd191, CRL_REG_LEN_08BIT, 0x83},
+	{0xd192, CRL_REG_LEN_08BIT, 0xff},
+	{0xd193, CRL_REG_LEN_08BIT, 0xff},
+	{0xd194, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd195, CRL_REG_LEN_08BIT, 0x64},
+	{0xd196, CRL_REG_LEN_08BIT, 0x00},
+	{0xd197, CRL_REG_LEN_08BIT, 0x48},
+	{0xd198, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd199, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd19a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd19b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd19c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd19d, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd19e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd19f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1a1, CRL_REG_LEN_08BIT, 0x60},
+	{0xd1a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1a5, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1a6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd1a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1a9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd1aa, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1ab, CRL_REG_LEN_08BIT, 0x22},
+	{0xd1ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ad, CRL_REG_LEN_08BIT, 0x80},
+	{0xd1ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1af, CRL_REG_LEN_08BIT, 0x70},
+	{0xd1b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1b1, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd1b2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1b3, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1b4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1b5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1b6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1b9, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1bd, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd1be, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1bf, CRL_REG_LEN_08BIT, 0x42},
+	{0xd1c0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1c1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd1c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1c5, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd1c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd1c9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd1ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cb, CRL_REG_LEN_08BIT, 0x08},
+	{0xd1cc, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1cd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1d1, CRL_REG_LEN_08BIT, 0x67},
+	{0xd1d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd1d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1d6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1d9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1da, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1dc, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1dd, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1df, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1e0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd1e1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e3, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd1e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1e5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd1e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd1e8, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1e9, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1ea, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1eb, CRL_REG_LEN_08BIT, 0xf6},
+	{0xd1ec, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f1, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1f2, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1f3, CRL_REG_LEN_08BIT, 0x86},
+	{0xd1f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1f5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f9, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd1fa, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd1fb, CRL_REG_LEN_08BIT, 0x45},
+	{0xd1fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1fd, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd1fe, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1ff, CRL_REG_LEN_08BIT, 0x87},
+	{0xd200, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd201, CRL_REG_LEN_08BIT, 0x05},
+	{0xd202, CRL_REG_LEN_08BIT, 0x18},
+	{0xd203, CRL_REG_LEN_08BIT, 0x00},
+	{0xd204, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd205, CRL_REG_LEN_08BIT, 0x66},
+	{0xd206, CRL_REG_LEN_08BIT, 0x00},
+	{0xd207, CRL_REG_LEN_08BIT, 0x00},
+	{0xd208, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd209, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd20a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd20b, CRL_REG_LEN_08BIT, 0x46},
+	{0xd20c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd20d, CRL_REG_LEN_08BIT, 0x07},
+	{0xd20e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd20f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd210, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd211, CRL_REG_LEN_08BIT, 0x84},
+	{0xd212, CRL_REG_LEN_08BIT, 0x55},
+	{0xd213, CRL_REG_LEN_08BIT, 0x88},
+	{0xd214, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd215, CRL_REG_LEN_08BIT, 0x65},
+	{0xd216, CRL_REG_LEN_08BIT, 0x00},
+	{0xd217, CRL_REG_LEN_08BIT, 0x00},
+	{0xd218, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd219, CRL_REG_LEN_08BIT, 0x04},
+	{0xd21a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd21b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd21c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd21d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21f, CRL_REG_LEN_08BIT, 0xce},
+	{0xd220, CRL_REG_LEN_08BIT, 0x19},
+	{0xd221, CRL_REG_LEN_08BIT, 0x00},
+	{0xd222, CRL_REG_LEN_08BIT, 0x80},
+	{0xd223, CRL_REG_LEN_08BIT, 0x06},
+	{0xd224, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd225, CRL_REG_LEN_08BIT, 0x63},
+	{0xd226, CRL_REG_LEN_08BIT, 0x00},
+	{0xd227, CRL_REG_LEN_08BIT, 0x00},
+	{0xd228, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd229, CRL_REG_LEN_08BIT, 0x63},
+	{0xd22a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22b, CRL_REG_LEN_08BIT, 0x40},
+	{0xd22c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd22d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd22e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd230, CRL_REG_LEN_08BIT, 0x13},
+	{0xd231, CRL_REG_LEN_08BIT, 0xff},
+	{0xd232, CRL_REG_LEN_08BIT, 0xff},
+	{0xd233, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd234, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd235, CRL_REG_LEN_08BIT, 0x00},
+	{0xd236, CRL_REG_LEN_08BIT, 0x00},
+	{0xd237, CRL_REG_LEN_08BIT, 0x40},
+	{0xd238, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd239, CRL_REG_LEN_08BIT, 0x64},
+	{0xd23a, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23b, CRL_REG_LEN_08BIT, 0x86},
+	{0xd23c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd23d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd23e, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23f, CRL_REG_LEN_08BIT, 0x87},
+	{0xd240, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd241, CRL_REG_LEN_08BIT, 0x03},
+	{0xd242, CRL_REG_LEN_08BIT, 0x40},
+	{0xd243, CRL_REG_LEN_08BIT, 0x00},
+	{0xd244, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd245, CRL_REG_LEN_08BIT, 0x64},
+	{0xd246, CRL_REG_LEN_08BIT, 0x55},
+	{0xd247, CRL_REG_LEN_08BIT, 0x88},
+	{0xd248, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd249, CRL_REG_LEN_08BIT, 0x05},
+	{0xd24a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd24c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd24d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd24e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd250, CRL_REG_LEN_08BIT, 0x03},
+	{0xd251, CRL_REG_LEN_08BIT, 0xff},
+	{0xd252, CRL_REG_LEN_08BIT, 0xff},
+	{0xd253, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd254, CRL_REG_LEN_08BIT, 0x19},
+	{0xd255, CRL_REG_LEN_08BIT, 0x00},
+	{0xd256, CRL_REG_LEN_08BIT, 0x80},
+	{0xd257, CRL_REG_LEN_08BIT, 0x06},
+	{0xd258, CRL_REG_LEN_08BIT, 0x94},
+	{0xd259, CRL_REG_LEN_08BIT, 0x84},
+	{0xd25a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd25b, CRL_REG_LEN_08BIT, 0x72},
+	{0xd25c, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd25d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd25e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd25f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd260, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd261, CRL_REG_LEN_08BIT, 0x00},
+	{0xd262, CRL_REG_LEN_08BIT, 0x00},
+	{0xd263, CRL_REG_LEN_08BIT, 0x4d},
+	{0xd264, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd265, CRL_REG_LEN_08BIT, 0x60},
+	{0xd266, CRL_REG_LEN_08BIT, 0x01},
+	{0xd267, CRL_REG_LEN_08BIT, 0x00},
+	{0xd268, CRL_REG_LEN_08BIT, 0x85},
+	{0xd269, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd26a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26c, CRL_REG_LEN_08BIT, 0x98},
+	{0xd26d, CRL_REG_LEN_08BIT, 0x70},
+	{0xd26e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd270, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd271, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd272, CRL_REG_LEN_08BIT, 0x00},
+	{0xd273, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd274, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd275, CRL_REG_LEN_08BIT, 0x63},
+	{0xd276, CRL_REG_LEN_08BIT, 0x20},
+	{0xd277, CRL_REG_LEN_08BIT, 0x00},
+	{0xd278, CRL_REG_LEN_08BIT, 0x10},
+	{0xd279, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27b, CRL_REG_LEN_08BIT, 0x07},
+	{0xd27c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd27d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd280, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd281, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd282, CRL_REG_LEN_08BIT, 0x00},
+	{0xd283, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd284, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd285, CRL_REG_LEN_08BIT, 0x63},
+	{0xd286, CRL_REG_LEN_08BIT, 0x28},
+	{0xd287, CRL_REG_LEN_08BIT, 0x02},
+	{0xd288, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd289, CRL_REG_LEN_08BIT, 0x84},
+	{0xd28a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd28b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd28c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd28d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd28e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd28f, CRL_REG_LEN_08BIT, 0x66},
+	{0xd290, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd291, CRL_REG_LEN_08BIT, 0x63},
+	{0xd292, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd293, CRL_REG_LEN_08BIT, 0x06},
+	{0xd294, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd295, CRL_REG_LEN_08BIT, 0x6a},
+	{0xd296, CRL_REG_LEN_08BIT, 0x00},
+	{0xd297, CRL_REG_LEN_08BIT, 0x77},
+	{0xd298, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd299, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29a, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd29b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd29c, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd29d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd29f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a3, CRL_REG_LEN_08BIT, 0x5a},
+	{0xd2a4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd2a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd2a9, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd2aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ab, CRL_REG_LEN_08BIT, 0x78},
+	{0xd2ac, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd2ad, CRL_REG_LEN_08BIT, 0x63},
+	{0xd2ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2af, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd2b1, CRL_REG_LEN_08BIT, 0x64},
+	{0xd2b2, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd2b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd2b4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b8, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2b9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2bb, CRL_REG_LEN_08BIT, 0x59},
+	{0xd2bc, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2bd, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2bf, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c0, CRL_REG_LEN_08BIT, 0xb9},
+	{0xd2c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c3, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2c4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd2c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2c9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd2ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cc, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2cd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cf, CRL_REG_LEN_08BIT, 0x51},
+	{0xd2d0, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2d1, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2d2, CRL_REG_LEN_08BIT, 0x58},
+	{0xd2d3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2d4, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2d5, CRL_REG_LEN_08BIT, 0x81},
+	{0xd2d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2d7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2d8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2d9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd2da, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2dc, CRL_REG_LEN_08BIT, 0x10},
+	{0xd2dd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2df, CRL_REG_LEN_08BIT, 0x05},
+	{0xd2e0, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2e1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2e4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd2e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd2e6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e8, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2ea, CRL_REG_LEN_08BIT, 0x28},
+	{0xd2eb, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2ec, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2ed, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ef, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2f0, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2f1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd2f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f4, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f7, CRL_REG_LEN_08BIT, 0x43},
+	{0xd2f8, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd2f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fc, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2fd, CRL_REG_LEN_08BIT, 0x61},
+	{0xd2fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ff, CRL_REG_LEN_08BIT, 0x18},
+	{0xd300, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd301, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd302, CRL_REG_LEN_08BIT, 0x01},
+	{0xd303, CRL_REG_LEN_08BIT, 0x00},
+	{0xd304, CRL_REG_LEN_08BIT, 0x10},
+	{0xd305, CRL_REG_LEN_08BIT, 0x00},
+	{0xd306, CRL_REG_LEN_08BIT, 0x00},
+	{0xd307, CRL_REG_LEN_08BIT, 0x03},
+	{0xd308, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd309, CRL_REG_LEN_08BIT, 0x80},
+	{0xd30a, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd30c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd30f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd310, CRL_REG_LEN_08BIT, 0x18},
+	{0xd311, CRL_REG_LEN_08BIT, 0x60},
+	{0xd312, CRL_REG_LEN_08BIT, 0x80},
+	{0xd313, CRL_REG_LEN_08BIT, 0x06},
+	{0xd314, CRL_REG_LEN_08BIT, 0x85},
+	{0xd315, CRL_REG_LEN_08BIT, 0x01},
+	{0xd316, CRL_REG_LEN_08BIT, 0x00},
+	{0xd317, CRL_REG_LEN_08BIT, 0x14},
+	{0xd318, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd319, CRL_REG_LEN_08BIT, 0x83},
+	{0xd31a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd31b, CRL_REG_LEN_08BIT, 0x29},
+	{0xd31c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd31d, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd31e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd31f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd320, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd321, CRL_REG_LEN_08BIT, 0x84},
+	{0xd322, CRL_REG_LEN_08BIT, 0x00},
+	{0xd323, CRL_REG_LEN_08BIT, 0x00},
+	{0xd324, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd325, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd326, CRL_REG_LEN_08BIT, 0x38},
+	{0xd327, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd328, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd329, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd32a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32b, CRL_REG_LEN_08BIT, 0x09},
+	{0xd32c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd32d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd32e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd330, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd331, CRL_REG_LEN_08BIT, 0x06},
+	{0xd332, CRL_REG_LEN_08BIT, 0x18},
+	{0xd333, CRL_REG_LEN_08BIT, 0x00},
+	{0xd334, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd335, CRL_REG_LEN_08BIT, 0x65},
+	{0xd336, CRL_REG_LEN_08BIT, 0x00},
+	{0xd337, CRL_REG_LEN_08BIT, 0x00},
+	{0xd338, CRL_REG_LEN_08BIT, 0x84},
+	{0xd339, CRL_REG_LEN_08BIT, 0x81},
+	{0xd33a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd33b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd33c, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33d, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd33f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd340, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd341, CRL_REG_LEN_08BIT, 0x07},
+	{0xd342, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd343, CRL_REG_LEN_08BIT, 0x00},
+	{0xd344, CRL_REG_LEN_08BIT, 0x03},
+	{0xd345, CRL_REG_LEN_08BIT, 0xff},
+	{0xd346, CRL_REG_LEN_08BIT, 0xff},
+	{0xd347, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd348, CRL_REG_LEN_08BIT, 0x18},
+	{0xd349, CRL_REG_LEN_08BIT, 0x60},
+	{0xd34a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd34b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd34c, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd34d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34f, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd350, CRL_REG_LEN_08BIT, 0x18},
+	{0xd351, CRL_REG_LEN_08BIT, 0x60},
+	{0xd352, CRL_REG_LEN_08BIT, 0x80},
+	{0xd353, CRL_REG_LEN_08BIT, 0x06},
+	{0xd354, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd355, CRL_REG_LEN_08BIT, 0x83},
+	{0xd356, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd357, CRL_REG_LEN_08BIT, 0x43},
+	{0xd358, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd359, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd35a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd35b, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd35c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd35d, CRL_REG_LEN_08BIT, 0x84},
+	{0xd35e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd35f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd360, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd361, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd362, CRL_REG_LEN_08BIT, 0x38},
+	{0xd363, CRL_REG_LEN_08BIT, 0x0e},
+	{0xd364, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd365, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd366, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd367, CRL_REG_LEN_08BIT, 0x42},
+	{0xd368, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd369, CRL_REG_LEN_08BIT, 0x05},
+	{0xd36a, CRL_REG_LEN_08BIT, 0x20},
+	{0xd36b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd36d, CRL_REG_LEN_08BIT, 0x67},
+	{0xd36e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd370, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd371, CRL_REG_LEN_08BIT, 0x06},
+	{0xd372, CRL_REG_LEN_08BIT, 0x18},
+	{0xd373, CRL_REG_LEN_08BIT, 0x00},
+	{0xd374, CRL_REG_LEN_08BIT, 0x18},
+	{0xd375, CRL_REG_LEN_08BIT, 0x60},
+	{0xd376, CRL_REG_LEN_08BIT, 0x80},
+	{0xd377, CRL_REG_LEN_08BIT, 0x01},
+	{0xd378, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd379, CRL_REG_LEN_08BIT, 0x63},
+	{0xd37a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37b, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd37c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd37d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd37e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd380, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd381, CRL_REG_LEN_08BIT, 0x23},
+	{0xd382, CRL_REG_LEN_08BIT, 0x00},
+	{0xd383, CRL_REG_LEN_08BIT, 0x01},
+	{0xd384, CRL_REG_LEN_08BIT, 0x10},
+	{0xd385, CRL_REG_LEN_08BIT, 0x00},
+	{0xd386, CRL_REG_LEN_08BIT, 0x00},
+	{0xd387, CRL_REG_LEN_08BIT, 0x28},
+	{0xd388, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd389, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd38a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38c, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd390, CRL_REG_LEN_08BIT, 0x15},
+	{0xd391, CRL_REG_LEN_08BIT, 0x00},
+	{0xd392, CRL_REG_LEN_08BIT, 0x00},
+	{0xd393, CRL_REG_LEN_08BIT, 0x00},
+	{0xd394, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd395, CRL_REG_LEN_08BIT, 0x6c},
+	{0xd396, CRL_REG_LEN_08BIT, 0x28},
+	{0xd397, CRL_REG_LEN_08BIT, 0x02},
+	{0xd398, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd399, CRL_REG_LEN_08BIT, 0x84},
+	{0xd39a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd39b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd39c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd39d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd39e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd39f, CRL_REG_LEN_08BIT, 0x22},
+	{0xd3a0, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd3a1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3a3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3a4, CRL_REG_LEN_08BIT, 0x03},
+	{0xd3a5, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3a6, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3a7, CRL_REG_LEN_08BIT, 0xb2},
+	{0xd3a8, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3a9, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd3aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ac, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3ad, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3af, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3b1, CRL_REG_LEN_08BIT, 0xe7},
+	{0xd3b2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3b3, CRL_REG_LEN_08BIT, 0x55},
+	{0xd3b4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3b5, CRL_REG_LEN_08BIT, 0x87},
+	{0xd3b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd3b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd3ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bb, CRL_REG_LEN_08BIT, 0x02},
+	{0xd3bc, CRL_REG_LEN_08BIT, 0x19},
+	{0xd3bd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3be, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3bf, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3c0, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3c1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3c2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c4, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd3c5, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3c6, CRL_REG_LEN_08BIT, 0x56},
+	{0xd3c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd3c9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cb, CRL_REG_LEN_08BIT, 0x04},
+	{0xd3cc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3cd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3ce, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3cf, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3d0, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3d1, CRL_REG_LEN_08BIT, 0xc5},
+	{0xd3d2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd3d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3d6, CRL_REG_LEN_08BIT, 0x28},
+	{0xd3d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3d9, CRL_REG_LEN_08BIT, 0x84},
+	{0xd3da, CRL_REG_LEN_08BIT, 0x1d},
+	{0xd3db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3dc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3dd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd3de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3df, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3e0, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd3e1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3e2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3e3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd3e5, CRL_REG_LEN_08BIT, 0x45},
+	{0xd3e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e7, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3e8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3e9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3eb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ec, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3ed, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3ee, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f0, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd3f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f3, CRL_REG_LEN_08BIT, 0xf1},
+	{0xd3f4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f8, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3fb, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd3fc, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ff, CRL_REG_LEN_08BIT, 0x00},
+	{0xd400, CRL_REG_LEN_08BIT, 0x03},
+	{0xd401, CRL_REG_LEN_08BIT, 0xff},
+	{0xd402, CRL_REG_LEN_08BIT, 0xff},
+	{0xd403, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd404, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd405, CRL_REG_LEN_08BIT, 0x01},
+	{0xd406, CRL_REG_LEN_08BIT, 0x40},
+	{0xd407, CRL_REG_LEN_08BIT, 0x18},
+	{0xd408, CRL_REG_LEN_08BIT, 0x03},
+	{0xd409, CRL_REG_LEN_08BIT, 0xff},
+	{0xd40a, CRL_REG_LEN_08BIT, 0xff},
+	{0xd40b, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd40c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd40d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd40e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd410, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd411, CRL_REG_LEN_08BIT, 0x60},
+	{0xd412, CRL_REG_LEN_08BIT, 0x00},
+	{0xd413, CRL_REG_LEN_08BIT, 0x00},
+	{0xd414, CRL_REG_LEN_08BIT, 0x03},
+	{0xd415, CRL_REG_LEN_08BIT, 0xff},
+	{0xd416, CRL_REG_LEN_08BIT, 0xff},
+	{0xd417, CRL_REG_LEN_08BIT, 0xb6},
+	{0xd418, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd419, CRL_REG_LEN_08BIT, 0x01},
+	{0xd41a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd41b, CRL_REG_LEN_08BIT, 0x14},
+	{0xd41c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd41d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41f, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd420, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd421, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd422, CRL_REG_LEN_08BIT, 0x00},
+	{0xd423, CRL_REG_LEN_08BIT, 0xff},
+	{0xd424, CRL_REG_LEN_08BIT, 0x85},
+	{0xd425, CRL_REG_LEN_08BIT, 0x21},
+	{0xd426, CRL_REG_LEN_08BIT, 0x00},
+	{0xd427, CRL_REG_LEN_08BIT, 0x00},
+	{0xd428, CRL_REG_LEN_08BIT, 0x85},
+	{0xd429, CRL_REG_LEN_08BIT, 0x41},
+	{0xd42a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd42c, CRL_REG_LEN_08BIT, 0x85},
+	{0xd42d, CRL_REG_LEN_08BIT, 0x81},
+	{0xd42e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd430, CRL_REG_LEN_08BIT, 0x85},
+	{0xd431, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd432, CRL_REG_LEN_08BIT, 0x00},
+	{0xd433, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd434, CRL_REG_LEN_08BIT, 0x86},
+	{0xd435, CRL_REG_LEN_08BIT, 0x01},
+	{0xd436, CRL_REG_LEN_08BIT, 0x00},
+	{0xd437, CRL_REG_LEN_08BIT, 0x10},
+	{0xd438, CRL_REG_LEN_08BIT, 0x44},
+	{0xd439, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43a, CRL_REG_LEN_08BIT, 0x48},
+	{0xd43b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd43d, CRL_REG_LEN_08BIT, 0x21},
+	{0xd43e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43f, CRL_REG_LEN_08BIT, 0x1c},
+	{0xd440, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd441, CRL_REG_LEN_08BIT, 0x21},
+	{0xd442, CRL_REG_LEN_08BIT, 0xff},
+	{0xd443, CRL_REG_LEN_08BIT, 0xfc},
+	{0xd444, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd445, CRL_REG_LEN_08BIT, 0x01},
+	{0xd446, CRL_REG_LEN_08BIT, 0x48},
+	{0xd447, CRL_REG_LEN_08BIT, 0x00},
+	{0xd448, CRL_REG_LEN_08BIT, 0x18},
+	{0xd449, CRL_REG_LEN_08BIT, 0x60},
+	{0xd44a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd44b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd44c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd44d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd44e, CRL_REG_LEN_08BIT, 0x07},
+	{0xd44f, CRL_REG_LEN_08BIT, 0x80},
+	{0xd450, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd451, CRL_REG_LEN_08BIT, 0x63},
+	{0xd452, CRL_REG_LEN_08BIT, 0x00},
+	{0xd453, CRL_REG_LEN_08BIT, 0x68},
+	{0xd454, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd455, CRL_REG_LEN_08BIT, 0x03},
+	{0xd456, CRL_REG_LEN_08BIT, 0x00},
+	{0xd457, CRL_REG_LEN_08BIT, 0x00},
+	{0xd458, CRL_REG_LEN_08BIT, 0x10},
+	{0xd459, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45b, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd45c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd460, CRL_REG_LEN_08BIT, 0x07},
+	{0xd461, CRL_REG_LEN_08BIT, 0xff},
+	{0xd462, CRL_REG_LEN_08BIT, 0xd9},
+	{0xd463, CRL_REG_LEN_08BIT, 0x7c},
+	{0xd464, CRL_REG_LEN_08BIT, 0x15},
+	{0xd465, CRL_REG_LEN_08BIT, 0x00},
+	{0xd466, CRL_REG_LEN_08BIT, 0x00},
+	{0xd467, CRL_REG_LEN_08BIT, 0x00},
+	{0xd468, CRL_REG_LEN_08BIT, 0x18},
+	{0xd469, CRL_REG_LEN_08BIT, 0x60},
+	{0xd46a, CRL_REG_LEN_08BIT, 0x80},
+	{0xd46b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd46c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd46d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd46e, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd46f, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd470, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd471, CRL_REG_LEN_08BIT, 0x63},
+	{0xd472, CRL_REG_LEN_08BIT, 0x00},
+	{0xd473, CRL_REG_LEN_08BIT, 0x00},
+	{0xd474, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd475, CRL_REG_LEN_08BIT, 0x23},
+	{0xd476, CRL_REG_LEN_08BIT, 0x00},
+	{0xd477, CRL_REG_LEN_08BIT, 0x01},
+	{0xd478, CRL_REG_LEN_08BIT, 0x10},
+	{0xd479, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47b, CRL_REG_LEN_08BIT, 0x25},
+	{0xd47c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd47d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd480, CRL_REG_LEN_08BIT, 0x00},
+	{0xd481, CRL_REG_LEN_08BIT, 0x00},
+	{0xd482, CRL_REG_LEN_08BIT, 0x00},
+	{0xd483, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd484, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd485, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd486, CRL_REG_LEN_08BIT, 0x00},
+	{0xd487, CRL_REG_LEN_08BIT, 0x02},
+	{0xd488, CRL_REG_LEN_08BIT, 0x07},
+	{0xd489, CRL_REG_LEN_08BIT, 0xff},
+	{0xd48a, CRL_REG_LEN_08BIT, 0xd6},
+	{0xd48b, CRL_REG_LEN_08BIT, 0x08},
+	{0xd48c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd48d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd490, CRL_REG_LEN_08BIT, 0x18},
+	{0xd491, CRL_REG_LEN_08BIT, 0x60},
+	{0xd492, CRL_REG_LEN_08BIT, 0x80},
+	{0xd493, CRL_REG_LEN_08BIT, 0x06},
+	{0xd494, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd495, CRL_REG_LEN_08BIT, 0x63},
+	{0xd496, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd497, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd498, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd499, CRL_REG_LEN_08BIT, 0x63},
+	{0xd49a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd49d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd49e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4a0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a3, CRL_REG_LEN_08BIT, 0x1b},
+	{0xd4a4, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd4a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4a8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd4a9, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd4aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ab, CRL_REG_LEN_08BIT, 0x02},
+	{0xd4ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4ad, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd4ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4b1, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd4b2, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4b4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4b5, CRL_REG_LEN_08BIT, 0x67},
+	{0xd4b6, CRL_REG_LEN_08BIT, 0x30},
+	{0xd4b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4b9, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd4ba, CRL_REG_LEN_08BIT, 0xce},
+	{0xd4bb, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd4bc, CRL_REG_LEN_08BIT, 0x19},
+	{0xd4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4be, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4bf, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4c0, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd4c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd4c2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4c3, CRL_REG_LEN_08BIT, 0x14},
+	{0xd4c4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4c5, CRL_REG_LEN_08BIT, 0x83},
+	{0xd4c6, CRL_REG_LEN_08BIT, 0x28},
+	{0xd4c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4c8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4c9, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd4ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4cb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4cc, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4cd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ce, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd4d1, CRL_REG_LEN_08BIT, 0x84},
+	{0xd4d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4d5, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd4d6, CRL_REG_LEN_08BIT, 0x58},
+	{0xd4d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd4d9, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd4da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4dc, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd4dd, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4df, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4e0, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd4e1, CRL_REG_LEN_08BIT, 0x46},
+	{0xd4e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e3, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4e4, CRL_REG_LEN_08BIT, 0x94},
+	{0xd4e5, CRL_REG_LEN_08BIT, 0x85},
+	{0xd4e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd4e9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4eb, CRL_REG_LEN_08BIT, 0x98},
+	{0xd4ec, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd4ed, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4ee, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f0, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd4f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4f2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4f3, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd4f4, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd4f5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd4f6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4f9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4fc, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd4fd, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ff, CRL_REG_LEN_08BIT, 0xff},
+	{0xd500, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd501, CRL_REG_LEN_08BIT, 0x48},
+	{0xd502, CRL_REG_LEN_08BIT, 0x00},
+	{0xd503, CRL_REG_LEN_08BIT, 0x01},
+	{0xd504, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd505, CRL_REG_LEN_08BIT, 0xff},
+	{0xd506, CRL_REG_LEN_08BIT, 0xff},
+	{0xd507, CRL_REG_LEN_08BIT, 0xea},
+	{0xd508, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd509, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd50a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd50b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd50c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd50d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd50e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd50f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd510, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd511, CRL_REG_LEN_08BIT, 0x63},
+	{0xd512, CRL_REG_LEN_08BIT, 0x06},
+	{0xd513, CRL_REG_LEN_08BIT, 0x14},
+	{0xd514, CRL_REG_LEN_08BIT, 0x07},
+	{0xd515, CRL_REG_LEN_08BIT, 0xff},
+	{0xd516, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd517, CRL_REG_LEN_08BIT, 0xe9},
+	{0xd518, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd519, CRL_REG_LEN_08BIT, 0x83},
+	{0xd51a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd51b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd51c, CRL_REG_LEN_08BIT, 0x85},
+	{0xd51d, CRL_REG_LEN_08BIT, 0x21},
+	{0xd51e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd51f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd520, CRL_REG_LEN_08BIT, 0x44},
+	{0xd521, CRL_REG_LEN_08BIT, 0x00},
+	{0xd522, CRL_REG_LEN_08BIT, 0x48},
+	{0xd523, CRL_REG_LEN_08BIT, 0x00},
+	{0xd524, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd525, CRL_REG_LEN_08BIT, 0x21},
+	{0xd526, CRL_REG_LEN_08BIT, 0x00},
+	{0xd527, CRL_REG_LEN_08BIT, 0x04},
+	{0xd528, CRL_REG_LEN_08BIT, 0x18},
+	{0xd529, CRL_REG_LEN_08BIT, 0x60},
+	{0xd52a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd52b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd52c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd52d, CRL_REG_LEN_08BIT, 0x80},
+	{0xd52e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd52f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd530, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd531, CRL_REG_LEN_08BIT, 0x63},
+	{0xd532, CRL_REG_LEN_08BIT, 0x09},
+	{0xd533, CRL_REG_LEN_08BIT, 0xef},
+	{0xd534, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd535, CRL_REG_LEN_08BIT, 0x03},
+	{0xd536, CRL_REG_LEN_08BIT, 0x20},
+	{0xd537, CRL_REG_LEN_08BIT, 0x00},
+	{0xd538, CRL_REG_LEN_08BIT, 0x18},
+	{0xd539, CRL_REG_LEN_08BIT, 0x60},
+	{0xd53a, CRL_REG_LEN_08BIT, 0x80},
+	{0xd53b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd53c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd53d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd53e, CRL_REG_LEN_08BIT, 0xc9},
+	{0xd53f, CRL_REG_LEN_08BIT, 0xef},
+	{0xd540, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd541, CRL_REG_LEN_08BIT, 0x03},
+	{0xd542, CRL_REG_LEN_08BIT, 0x20},
+	{0xd543, CRL_REG_LEN_08BIT, 0x00},
+	{0xd544, CRL_REG_LEN_08BIT, 0x44},
+	{0xd545, CRL_REG_LEN_08BIT, 0x00},
+	{0xd546, CRL_REG_LEN_08BIT, 0x48},
+	{0xd547, CRL_REG_LEN_08BIT, 0x00},
+	{0xd548, CRL_REG_LEN_08BIT, 0x15},
+	{0xd549, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd54d, CRL_REG_LEN_08BIT, 0x80},
+	{0xd54e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd54f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd550, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd551, CRL_REG_LEN_08BIT, 0x84},
+	{0xd552, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd553, CRL_REG_LEN_08BIT, 0x12},
+	{0xd554, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd555, CRL_REG_LEN_08BIT, 0x64},
+	{0xd556, CRL_REG_LEN_08BIT, 0x00},
+	{0xd557, CRL_REG_LEN_08BIT, 0x00},
+	{0xd558, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd559, CRL_REG_LEN_08BIT, 0x03},
+	{0xd55a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd55b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd55c, CRL_REG_LEN_08BIT, 0x13},
+	{0xd55d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd55e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd55f, CRL_REG_LEN_08BIT, 0xfe},
+	{0xd560, CRL_REG_LEN_08BIT, 0x15},
+	{0xd561, CRL_REG_LEN_08BIT, 0x00},
+	{0xd562, CRL_REG_LEN_08BIT, 0x00},
+	{0xd563, CRL_REG_LEN_08BIT, 0x00},
+	{0xd564, CRL_REG_LEN_08BIT, 0x44},
+	{0xd565, CRL_REG_LEN_08BIT, 0x00},
+	{0xd566, CRL_REG_LEN_08BIT, 0x48},
+	{0xd567, CRL_REG_LEN_08BIT, 0x00},
+	{0xd568, CRL_REG_LEN_08BIT, 0x15},
+	{0xd569, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56c, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd56f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd570, CRL_REG_LEN_08BIT, 0x00},
+	{0xd571, CRL_REG_LEN_08BIT, 0x00},
+	{0xd572, CRL_REG_LEN_08BIT, 0x00},
+	{0xd573, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0e, CRL_REG_LEN_08BIT, 0x33},
+	{0x6f0f, CRL_REG_LEN_08BIT, 0x33},
+	{0x460e, CRL_REG_LEN_08BIT, 0x08},
+	{0x460f, CRL_REG_LEN_08BIT, 0x01},
+	{0x4610, CRL_REG_LEN_08BIT, 0x00},
+	{0x4611, CRL_REG_LEN_08BIT, 0x01},
+	{0x4612, CRL_REG_LEN_08BIT, 0x00},
+	{0x4613, CRL_REG_LEN_08BIT, 0x01},
+	{0x4605, CRL_REG_LEN_08BIT, 0x0b},
+	{0x4608, CRL_REG_LEN_08BIT, 0x00},
+	{0x4609, CRL_REG_LEN_08BIT, 0x08},
+	{0x4602, CRL_REG_LEN_08BIT, 0x02},
+	{0x4603, CRL_REG_LEN_08BIT, 0xd8},
+	{0x6804, CRL_REG_LEN_08BIT, 0x00},
+	{0x6805, CRL_REG_LEN_08BIT, 0x06},
+	{0x6806, CRL_REG_LEN_08BIT, 0x00},
+	{0x5120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3504, CRL_REG_LEN_08BIT, 0x00},
+	{0x6800, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x5000, CRL_REG_LEN_08BIT, 0xff},
+	{0x5001, CRL_REG_LEN_08BIT, 0xbf},
+	{0x5002, CRL_REG_LEN_08BIT, 0x7e},
+	{0x5003, CRL_REG_LEN_08BIT, 0x0c},
+	{0x503d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc450, CRL_REG_LEN_08BIT, 0x01},
+	{0xc452, CRL_REG_LEN_08BIT, 0x04},
+	{0xc453, CRL_REG_LEN_08BIT, 0x00},
+	{0xc454, CRL_REG_LEN_08BIT, 0x00},
+	{0xc455, CRL_REG_LEN_08BIT, 0x00},
+	{0xc456, CRL_REG_LEN_08BIT, 0x00},
+	{0xc457, CRL_REG_LEN_08BIT, 0x00},
+	{0xc458, CRL_REG_LEN_08BIT, 0x00},
+	{0xc459, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc45f, CRL_REG_LEN_08BIT, 0x01},
+	{0xc460, CRL_REG_LEN_08BIT, 0x01},
+	{0xc461, CRL_REG_LEN_08BIT, 0x01},
+	{0xc462, CRL_REG_LEN_08BIT, 0x01},
+	{0xc464, CRL_REG_LEN_08BIT, 0x88},
+	{0xc465, CRL_REG_LEN_08BIT, 0x00},
+	{0xc466, CRL_REG_LEN_08BIT, 0x8a},
+	{0xc467, CRL_REG_LEN_08BIT, 0x00},
+	{0xc468, CRL_REG_LEN_08BIT, 0x86},
+	{0xc469, CRL_REG_LEN_08BIT, 0x00},
+	{0xc46a, CRL_REG_LEN_08BIT, 0x40},
+	{0xc46b, CRL_REG_LEN_08BIT, 0x50},
+	{0xc46c, CRL_REG_LEN_08BIT, 0x30},
+	{0xc46d, CRL_REG_LEN_08BIT, 0x28},
+	{0xc46e, CRL_REG_LEN_08BIT, 0x60},
+	{0xc46f, CRL_REG_LEN_08BIT, 0x40},
+	{0xc47c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc47d, CRL_REG_LEN_08BIT, 0x38},
+	{0xc47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc480, CRL_REG_LEN_08BIT, 0x00},
+	{0xc481, CRL_REG_LEN_08BIT, 0xff},
+	{0xc482, CRL_REG_LEN_08BIT, 0x00},
+	{0xc483, CRL_REG_LEN_08BIT, 0x40},
+	{0xc484, CRL_REG_LEN_08BIT, 0x00},
+	{0xc485, CRL_REG_LEN_08BIT, 0x18},
+	{0xc486, CRL_REG_LEN_08BIT, 0x00},
+	{0xc487, CRL_REG_LEN_08BIT, 0x18},
+	{0xc488, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc489, CRL_REG_LEN_08BIT, 0x40},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x40},
+	{0xc48c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48d, CRL_REG_LEN_08BIT, 0x04},
+	{0xc48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48f, CRL_REG_LEN_08BIT, 0x04},
+	{0xc490, CRL_REG_LEN_08BIT, 0x07},
+	{0xc492, CRL_REG_LEN_08BIT, 0x20},
+	{0xc493, CRL_REG_LEN_08BIT, 0x08},
+	{0xc498, CRL_REG_LEN_08BIT, 0x02},
+	{0xc499, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49a, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49c, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49f, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a5, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4a8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a9, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4aa, CRL_REG_LEN_08BIT, 0x0d},
+	{0xc4ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4ac, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4ad, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4b4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b5, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b7, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4ba, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4be, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4bf, CRL_REG_LEN_08BIT, 0x33},
+	{0xc4c8, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4c9, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4ca, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0x51},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0x51},
+	{0xc4d0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4d1, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4e0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4e1, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4e2, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4e4, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4e5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4e6, CRL_REG_LEN_08BIT, 0x30},
+	{0xc4e7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4e8, CRL_REG_LEN_08BIT, 0x50},
+	{0xc4e9, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4ea, CRL_REG_LEN_08BIT, 0x70},
+	{0xc4eb, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4ec, CRL_REG_LEN_08BIT, 0x90},
+	{0xc4ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc4ee, CRL_REG_LEN_08BIT, 0xb0},
+	{0xc4ef, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc4f0, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4f1, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc4f2, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4f3, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4f4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4f6, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f8, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4f9, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fe, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4ff, CRL_REG_LEN_08BIT, 0x02},
+	{0xc500, CRL_REG_LEN_08BIT, 0x48},
+	{0xc501, CRL_REG_LEN_08BIT, 0x74},
+	{0xc502, CRL_REG_LEN_08BIT, 0x58},
+	{0xc503, CRL_REG_LEN_08BIT, 0x80},
+	{0xc504, CRL_REG_LEN_08BIT, 0x05},
+	{0xc505, CRL_REG_LEN_08BIT, 0x80},
+	{0xc506, CRL_REG_LEN_08BIT, 0x03},
+	{0xc507, CRL_REG_LEN_08BIT, 0x80},
+	{0xc508, CRL_REG_LEN_08BIT, 0x01},
+	{0xc509, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc50a, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50b, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc50c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50d, CRL_REG_LEN_08BIT, 0x2c},
+	{0xc50e, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50f, CRL_REG_LEN_08BIT, 0x0a},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x00},
+	{0xc512, CRL_REG_LEN_08BIT, 0xe5},
+	{0xc513, CRL_REG_LEN_08BIT, 0x14},
+	{0xc514, CRL_REG_LEN_08BIT, 0x04},
+	{0xc515, CRL_REG_LEN_08BIT, 0x00},
+	{0xc518, CRL_REG_LEN_08BIT, 0x03},
+	{0xc519, CRL_REG_LEN_08BIT, 0x48},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x07},
+	{0xc51b, CRL_REG_LEN_08BIT, 0x70},
+	{0xc2e0, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e1, CRL_REG_LEN_08BIT, 0x51},
+	{0xc2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e3, CRL_REG_LEN_08BIT, 0xd6},
+	{0xc2e4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2e5, CRL_REG_LEN_08BIT, 0x5e},
+	{0xc2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2ea, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2eb, CRL_REG_LEN_08BIT, 0x90},
+	{0xc2ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2ee, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2ef, CRL_REG_LEN_08BIT, 0x64},
+	{0xc308, CRL_REG_LEN_08BIT, 0x00},
+	{0xc309, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xc30e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc310, CRL_REG_LEN_08BIT, 0x01},
+	{0xc311, CRL_REG_LEN_08BIT, 0x60},
+	{0xc312, CRL_REG_LEN_08BIT, 0xff},
+	{0xc313, CRL_REG_LEN_08BIT, 0x08},
+	{0xc314, CRL_REG_LEN_08BIT, 0x01},
+	{0xc315, CRL_REG_LEN_08BIT, 0x7f},
+	{0xc316, CRL_REG_LEN_08BIT, 0xff},
+	{0xc317, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc318, CRL_REG_LEN_08BIT, 0x00},
+	{0xc319, CRL_REG_LEN_08BIT, 0x0c},
+	{0xc31a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31b, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc31c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31d, CRL_REG_LEN_08BIT, 0x14},
+	{0xc31e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31f, CRL_REG_LEN_08BIT, 0xc5},
+	{0xc320, CRL_REG_LEN_08BIT, 0xff},
+	{0xc321, CRL_REG_LEN_08BIT, 0x4b},
+	{0xc322, CRL_REG_LEN_08BIT, 0xff},
+	{0xc323, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc324, CRL_REG_LEN_08BIT, 0xff},
+	{0xc325, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc326, CRL_REG_LEN_08BIT, 0x00},
+	{0xc327, CRL_REG_LEN_08BIT, 0x46},
+	{0xc328, CRL_REG_LEN_08BIT, 0xff},
+	{0xc329, CRL_REG_LEN_08BIT, 0xd2},
+	{0xc32a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32b, CRL_REG_LEN_08BIT, 0xe4},
+	{0xc32c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32d, CRL_REG_LEN_08BIT, 0xbb},
+	{0xc32e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc32f, CRL_REG_LEN_08BIT, 0x61},
+	{0xc330, CRL_REG_LEN_08BIT, 0xff},
+	{0xc331, CRL_REG_LEN_08BIT, 0xf9},
+	{0xc332, CRL_REG_LEN_08BIT, 0x00},
+	{0xc333, CRL_REG_LEN_08BIT, 0xd9},
+	{0xc334, CRL_REG_LEN_08BIT, 0x00},
+	{0xc335, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc336, CRL_REG_LEN_08BIT, 0x00},
+	{0xc337, CRL_REG_LEN_08BIT, 0xb1},
+	{0xc338, CRL_REG_LEN_08BIT, 0xff},
+	{0xc339, CRL_REG_LEN_08BIT, 0x64},
+	{0xc33a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33b, CRL_REG_LEN_08BIT, 0xeb},
+	{0xc33c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33d, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc33e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc33f, CRL_REG_LEN_08BIT, 0x48},
+	{0xc340, CRL_REG_LEN_08BIT, 0xff},
+	{0xc341, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc342, CRL_REG_LEN_08BIT, 0xff},
+	{0xc343, CRL_REG_LEN_08BIT, 0xed},
+	{0xc344, CRL_REG_LEN_08BIT, 0xff},
+	{0xc345, CRL_REG_LEN_08BIT, 0xad},
+	{0xc346, CRL_REG_LEN_08BIT, 0x00},
+	{0xc347, CRL_REG_LEN_08BIT, 0x66},
+	{0xc348, CRL_REG_LEN_08BIT, 0x01},
+	{0xc349, CRL_REG_LEN_08BIT, 0x00},
+	{0x6700, CRL_REG_LEN_08BIT, 0x04},
+	{0x6701, CRL_REG_LEN_08BIT, 0x7b},
+	{0x6702, CRL_REG_LEN_08BIT, 0xfd},
+	{0x6703, CRL_REG_LEN_08BIT, 0xf9},
+	{0x6704, CRL_REG_LEN_08BIT, 0x3d},
+	{0x6705, CRL_REG_LEN_08BIT, 0x71},
+	{0x6706, CRL_REG_LEN_08BIT, 0x78},
+	{0x6708, CRL_REG_LEN_08BIT, 0x05},
+	{0x6f06, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f07, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0a, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f00, CRL_REG_LEN_08BIT, 0x03},
+	{0xc34c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc34d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc34e, CRL_REG_LEN_08BIT, 0x46},
+	{0xc34f, CRL_REG_LEN_08BIT, 0x55},
+	{0xc350, CRL_REG_LEN_08BIT, 0x00},
+	{0xc351, CRL_REG_LEN_08BIT, 0x40},
+	{0xc352, CRL_REG_LEN_08BIT, 0x00},
+	{0xc353, CRL_REG_LEN_08BIT, 0xff},
+	{0xc354, CRL_REG_LEN_08BIT, 0x04},
+	{0xc355, CRL_REG_LEN_08BIT, 0x08},
+	{0xc356, CRL_REG_LEN_08BIT, 0x01},
+	{0xc357, CRL_REG_LEN_08BIT, 0xef},
+	{0xc358, CRL_REG_LEN_08BIT, 0x30},
+	{0xc359, CRL_REG_LEN_08BIT, 0x01},
+	{0xc35a, CRL_REG_LEN_08BIT, 0x64},
+	{0xc35b, CRL_REG_LEN_08BIT, 0x46},
+	{0xc35c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301b, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301a, CRL_REG_LEN_08BIT, 0xf0},
+	{0xceb0, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb1, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb2, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb3, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb4, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb5, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb6, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x5608, CRL_REG_LEN_08BIT, 0x0d},
+};
+
+static struct crl_register_write_rep ov10635_640_480_YUV_HDR[] = {
+	{0x301b, CRL_REG_LEN_08BIT, 0xff},
+	{0x301c, CRL_REG_LEN_08BIT, 0xff},
+	{0x301a, CRL_REG_LEN_08BIT, 0xff},
+	{0x3011, CRL_REG_LEN_08BIT, 0x42},
+	{0x6900, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6901, CRL_REG_LEN_08BIT, 0x11},
+	{0x3503, CRL_REG_LEN_08BIT, 0x10},
+	{0x3025, CRL_REG_LEN_08BIT, 0x03},
+	{0x3003, CRL_REG_LEN_08BIT, 0x14},
+	{0x3004, CRL_REG_LEN_08BIT, 0x23},
+	{0x3005, CRL_REG_LEN_08BIT, 0x20},
+	{0x3006, CRL_REG_LEN_08BIT, 0x91},
+	{0x3600, CRL_REG_LEN_08BIT, 0x74},
+	{0x3601, CRL_REG_LEN_08BIT, 0x2b},
+	{0x3612, CRL_REG_LEN_08BIT, 0x00},
+	{0x3611, CRL_REG_LEN_08BIT, 0x67},
+	{0x3633, CRL_REG_LEN_08BIT, 0xca},
+	{0x3602, CRL_REG_LEN_08BIT, 0x2f},
+	{0x3603, CRL_REG_LEN_08BIT, 0x00},
+	{0x3630, CRL_REG_LEN_08BIT, 0x28},
+	{0x3631, CRL_REG_LEN_08BIT, 0x16},
+	{0x3714, CRL_REG_LEN_08BIT, 0x10},
+	{0x371d, CRL_REG_LEN_08BIT, 0x01},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x3020, CRL_REG_LEN_08BIT, 0x0b},
+	{0x3702, CRL_REG_LEN_08BIT, 0x0a},
+	{0x3703, CRL_REG_LEN_08BIT, 0x17},
+	{0x3704, CRL_REG_LEN_08BIT, 0x0f},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x3709, CRL_REG_LEN_08BIT, 0xa8},
+	{0x370c, CRL_REG_LEN_08BIT, 0xc7},
+	{0x370d, CRL_REG_LEN_08BIT, 0x80},
+	{0x3712, CRL_REG_LEN_08BIT, 0x00},
+	{0x3713, CRL_REG_LEN_08BIT, 0x20},
+	{0x3715, CRL_REG_LEN_08BIT, 0x04},
+	{0x381d, CRL_REG_LEN_08BIT, 0x40},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3822, CRL_REG_LEN_08BIT, 0x50},
+	{0x3824, CRL_REG_LEN_08BIT, 0x50},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8c},
+	{0x3804, CRL_REG_LEN_08BIT, 0x05},
+	{0x3805, CRL_REG_LEN_08BIT, 0x1f},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3806, CRL_REG_LEN_08BIT, 0x02},
+	{0x3807, CRL_REG_LEN_08BIT, 0x89},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0xa4},
+	{0x3808, CRL_REG_LEN_08BIT, 0x02},
+	{0x3809, CRL_REG_LEN_08BIT, 0x80},
+	{0x380a, CRL_REG_LEN_08BIT, 0x01},
+	{0x380b, CRL_REG_LEN_08BIT, 0xe0},
+	{0x380c, CRL_REG_LEN_08BIT, 0x03},
+	{0x380d, CRL_REG_LEN_08BIT, 0xc0},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x02},
+	{0x6e43, CRL_REG_LEN_08BIT, 0x08},
+	{0x380e, CRL_REG_LEN_08BIT, 0x02},
+	{0x380f, CRL_REG_LEN_08BIT, 0x08},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x3811, CRL_REG_LEN_08BIT, 0x08},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0c},
+	{0x3828, CRL_REG_LEN_08BIT, 0x03},
+	{0x3829, CRL_REG_LEN_08BIT, 0x10},
+	{0x382a, CRL_REG_LEN_08BIT, 0x10},
+	{0x382b, CRL_REG_LEN_08BIT, 0x10},
+	{0x3621, CRL_REG_LEN_08BIT, 0x74},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x56d5, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d6, CRL_REG_LEN_08BIT, 0x80},
+	{0x56d7, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d9, CRL_REG_LEN_08BIT, 0x00},
+	{0x56da, CRL_REG_LEN_08BIT, 0x80},
+	{0x56db, CRL_REG_LEN_08BIT, 0x00},
+	{0x56dc, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e8, CRL_REG_LEN_08BIT, 0x00},
+	{0x56e9, CRL_REG_LEN_08BIT, 0x7f},
+	{0x56ea, CRL_REG_LEN_08BIT, 0x00},
+	{0x56eb, CRL_REG_LEN_08BIT, 0x7f},
+	{0x5100, CRL_REG_LEN_08BIT, 0x00},
+	{0x5101, CRL_REG_LEN_08BIT, 0x80},
+	{0x5102, CRL_REG_LEN_08BIT, 0x00},
+	{0x5103, CRL_REG_LEN_08BIT, 0x80},
+	{0x5104, CRL_REG_LEN_08BIT, 0x00},
+	{0x5105, CRL_REG_LEN_08BIT, 0x80},
+	{0x5106, CRL_REG_LEN_08BIT, 0x00},
+	{0x5107, CRL_REG_LEN_08BIT, 0x80},
+	{0x5108, CRL_REG_LEN_08BIT, 0x00},
+	{0x5109, CRL_REG_LEN_08BIT, 0x00},
+	{0x510a, CRL_REG_LEN_08BIT, 0x00},
+	{0x510b, CRL_REG_LEN_08BIT, 0x00},
+	{0x510c, CRL_REG_LEN_08BIT, 0x00},
+	{0x510d, CRL_REG_LEN_08BIT, 0x00},
+	{0x510e, CRL_REG_LEN_08BIT, 0x00},
+	{0x510f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5110, CRL_REG_LEN_08BIT, 0x00},
+	{0x5111, CRL_REG_LEN_08BIT, 0x80},
+	{0x5112, CRL_REG_LEN_08BIT, 0x00},
+	{0x5113, CRL_REG_LEN_08BIT, 0x80},
+	{0x5114, CRL_REG_LEN_08BIT, 0x00},
+	{0x5115, CRL_REG_LEN_08BIT, 0x80},
+	{0x5116, CRL_REG_LEN_08BIT, 0x00},
+	{0x5117, CRL_REG_LEN_08BIT, 0x80},
+	{0x5118, CRL_REG_LEN_08BIT, 0x00},
+	{0x5119, CRL_REG_LEN_08BIT, 0x00},
+	{0x511a, CRL_REG_LEN_08BIT, 0x00},
+	{0x511b, CRL_REG_LEN_08BIT, 0x00},
+	{0x511c, CRL_REG_LEN_08BIT, 0x00},
+	{0x511d, CRL_REG_LEN_08BIT, 0x00},
+	{0x511e, CRL_REG_LEN_08BIT, 0x00},
+	{0x511f, CRL_REG_LEN_08BIT, 0x00},
+	{0x56d0, CRL_REG_LEN_08BIT, 0x00},
+	{0x5006, CRL_REG_LEN_08BIT, 0x24},
+	{0x5608, CRL_REG_LEN_08BIT, 0x19},
+	{0x52d7, CRL_REG_LEN_08BIT, 0x06},
+	{0x528d, CRL_REG_LEN_08BIT, 0x08},
+	{0x5293, CRL_REG_LEN_08BIT, 0x12},
+	{0x52d3, CRL_REG_LEN_08BIT, 0x12},
+	{0x5288, CRL_REG_LEN_08BIT, 0x06},
+	{0x5289, CRL_REG_LEN_08BIT, 0x20},
+	{0x52c8, CRL_REG_LEN_08BIT, 0x06},
+	{0x52c9, CRL_REG_LEN_08BIT, 0x20},
+	{0x52cd, CRL_REG_LEN_08BIT, 0x04},
+	{0x5381, CRL_REG_LEN_08BIT, 0x00},
+	{0x5382, CRL_REG_LEN_08BIT, 0xff},
+	{0x5589, CRL_REG_LEN_08BIT, 0x76},
+	{0x558a, CRL_REG_LEN_08BIT, 0x47},
+	{0x558b, CRL_REG_LEN_08BIT, 0xef},
+	{0x558c, CRL_REG_LEN_08BIT, 0xc9},
+	{0x558d, CRL_REG_LEN_08BIT, 0x49},
+	{0x558e, CRL_REG_LEN_08BIT, 0x30},
+	{0x558f, CRL_REG_LEN_08BIT, 0x67},
+	{0x5590, CRL_REG_LEN_08BIT, 0x3f},
+	{0x5591, CRL_REG_LEN_08BIT, 0xf0},
+	{0x5592, CRL_REG_LEN_08BIT, 0x10},
+	{0x55a2, CRL_REG_LEN_08BIT, 0x6d},
+	{0x55a3, CRL_REG_LEN_08BIT, 0x55},
+	{0x55a4, CRL_REG_LEN_08BIT, 0xc3},
+	{0x55a5, CRL_REG_LEN_08BIT, 0xb5},
+	{0x55a6, CRL_REG_LEN_08BIT, 0x43},
+	{0x55a7, CRL_REG_LEN_08BIT, 0x38},
+	{0x55a8, CRL_REG_LEN_08BIT, 0x5f},
+	{0x55a9, CRL_REG_LEN_08BIT, 0x4b},
+	{0x55aa, CRL_REG_LEN_08BIT, 0xf0},
+	{0x55ab, CRL_REG_LEN_08BIT, 0x10},
+	{0x5581, CRL_REG_LEN_08BIT, 0x52},
+	{0x5300, CRL_REG_LEN_08BIT, 0x01},
+	{0x5301, CRL_REG_LEN_08BIT, 0x00},
+	{0x5302, CRL_REG_LEN_08BIT, 0x00},
+	{0x5303, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5304, CRL_REG_LEN_08BIT, 0x00},
+	{0x5305, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5306, CRL_REG_LEN_08BIT, 0x00},
+	{0x5307, CRL_REG_LEN_08BIT, 0x36},
+	{0x5308, CRL_REG_LEN_08BIT, 0x00},
+	{0x5309, CRL_REG_LEN_08BIT, 0xd9},
+	{0x530a, CRL_REG_LEN_08BIT, 0x00},
+	{0x530b, CRL_REG_LEN_08BIT, 0x0f},
+	{0x530c, CRL_REG_LEN_08BIT, 0x00},
+	{0x530d, CRL_REG_LEN_08BIT, 0x2c},
+	{0x530e, CRL_REG_LEN_08BIT, 0x00},
+	{0x530f, CRL_REG_LEN_08BIT, 0x59},
+	{0x5310, CRL_REG_LEN_08BIT, 0x00},
+	{0x5311, CRL_REG_LEN_08BIT, 0x7b},
+	{0x5312, CRL_REG_LEN_08BIT, 0x00},
+	{0x5313, CRL_REG_LEN_08BIT, 0x22},
+	{0x5314, CRL_REG_LEN_08BIT, 0x00},
+	{0x5315, CRL_REG_LEN_08BIT, 0xd5},
+	{0x5316, CRL_REG_LEN_08BIT, 0x00},
+	{0x5317, CRL_REG_LEN_08BIT, 0x13},
+	{0x5318, CRL_REG_LEN_08BIT, 0x00},
+	{0x5319, CRL_REG_LEN_08BIT, 0x18},
+	{0x531a, CRL_REG_LEN_08BIT, 0x00},
+	{0x531b, CRL_REG_LEN_08BIT, 0x26},
+	{0x531c, CRL_REG_LEN_08BIT, 0x00},
+	{0x531d, CRL_REG_LEN_08BIT, 0xdc},
+	{0x531e, CRL_REG_LEN_08BIT, 0x00},
+	{0x531f, CRL_REG_LEN_08BIT, 0x02},
+	{0x5320, CRL_REG_LEN_08BIT, 0x00},
+	{0x5321, CRL_REG_LEN_08BIT, 0x24},
+	{0x5322, CRL_REG_LEN_08BIT, 0x00},
+	{0x5323, CRL_REG_LEN_08BIT, 0x56},
+	{0x5324, CRL_REG_LEN_08BIT, 0x00},
+	{0x5325, CRL_REG_LEN_08BIT, 0x85},
+	{0x5326, CRL_REG_LEN_08BIT, 0x00},
+	{0x5327, CRL_REG_LEN_08BIT, 0x20},
+	{0x5609, CRL_REG_LEN_08BIT, 0x01},
+	{0x560a, CRL_REG_LEN_08BIT, 0x40},
+	{0x560b, CRL_REG_LEN_08BIT, 0x01},
+	{0x560c, CRL_REG_LEN_08BIT, 0x40},
+	{0x560d, CRL_REG_LEN_08BIT, 0x00},
+	{0x560e, CRL_REG_LEN_08BIT, 0xfa},
+	{0x560f, CRL_REG_LEN_08BIT, 0x00},
+	{0x5610, CRL_REG_LEN_08BIT, 0xfa},
+	{0x5611, CRL_REG_LEN_08BIT, 0x02},
+	{0x5612, CRL_REG_LEN_08BIT, 0x80},
+	{0x5613, CRL_REG_LEN_08BIT, 0x02},
+	{0x5614, CRL_REG_LEN_08BIT, 0x80},
+	{0x5615, CRL_REG_LEN_08BIT, 0x01},
+	{0x5616, CRL_REG_LEN_08BIT, 0x2c},
+	{0x5617, CRL_REG_LEN_08BIT, 0x01},
+	{0x5618, CRL_REG_LEN_08BIT, 0x2c},
+	{0x563b, CRL_REG_LEN_08BIT, 0x01},
+	{0x563c, CRL_REG_LEN_08BIT, 0x01},
+	{0x563d, CRL_REG_LEN_08BIT, 0x01},
+	{0x563e, CRL_REG_LEN_08BIT, 0x01},
+	{0x563f, CRL_REG_LEN_08BIT, 0x03},
+	{0x5640, CRL_REG_LEN_08BIT, 0x03},
+	{0x5641, CRL_REG_LEN_08BIT, 0x03},
+	{0x5642, CRL_REG_LEN_08BIT, 0x05},
+	{0x5643, CRL_REG_LEN_08BIT, 0x09},
+	{0x5644, CRL_REG_LEN_08BIT, 0x05},
+	{0x5645, CRL_REG_LEN_08BIT, 0x05},
+	{0x5646, CRL_REG_LEN_08BIT, 0x05},
+	{0x5647, CRL_REG_LEN_08BIT, 0x05},
+	{0x5651, CRL_REG_LEN_08BIT, 0x00},
+	{0x5652, CRL_REG_LEN_08BIT, 0x80},
+	{0x521a, CRL_REG_LEN_08BIT, 0x01},
+	{0x521b, CRL_REG_LEN_08BIT, 0x03},
+	{0x521c, CRL_REG_LEN_08BIT, 0x06},
+	{0x521d, CRL_REG_LEN_08BIT, 0x0a},
+	{0x521e, CRL_REG_LEN_08BIT, 0x0e},
+	{0x521f, CRL_REG_LEN_08BIT, 0x12},
+	{0x5220, CRL_REG_LEN_08BIT, 0x16},
+	{0x5223, CRL_REG_LEN_08BIT, 0x02},
+	{0x5225, CRL_REG_LEN_08BIT, 0x04},
+	{0x5227, CRL_REG_LEN_08BIT, 0x08},
+	{0x5229, CRL_REG_LEN_08BIT, 0x0c},
+	{0x522b, CRL_REG_LEN_08BIT, 0x12},
+	{0x522d, CRL_REG_LEN_08BIT, 0x18},
+	{0x522f, CRL_REG_LEN_08BIT, 0x1e},
+	{0x5241, CRL_REG_LEN_08BIT, 0x04},
+	{0x5242, CRL_REG_LEN_08BIT, 0x01},
+	{0x5243, CRL_REG_LEN_08BIT, 0x03},
+	{0x5244, CRL_REG_LEN_08BIT, 0x06},
+	{0x5245, CRL_REG_LEN_08BIT, 0x0a},
+	{0x5246, CRL_REG_LEN_08BIT, 0x0e},
+	{0x5247, CRL_REG_LEN_08BIT, 0x12},
+	{0x5248, CRL_REG_LEN_08BIT, 0x16},
+	{0x524a, CRL_REG_LEN_08BIT, 0x03},
+	{0x524c, CRL_REG_LEN_08BIT, 0x04},
+	{0x524e, CRL_REG_LEN_08BIT, 0x08},
+	{0x5250, CRL_REG_LEN_08BIT, 0x0c},
+	{0x5252, CRL_REG_LEN_08BIT, 0x12},
+	{0x5254, CRL_REG_LEN_08BIT, 0x18},
+	{0x5256, CRL_REG_LEN_08BIT, 0x1e},
+	{0x4606, CRL_REG_LEN_08BIT, 0x07},
+	{0x4607, CRL_REG_LEN_08BIT, 0x71},
+	{0x460a, CRL_REG_LEN_08BIT, 0x02},
+	{0x460b, CRL_REG_LEN_08BIT, 0x70},
+	{0x460c, CRL_REG_LEN_08BIT, 0x00},
+	{0x4620, CRL_REG_LEN_08BIT, 0x0e},
+	{0x4700, CRL_REG_LEN_08BIT, 0x04},
+	{0x4701, CRL_REG_LEN_08BIT, 0x00},
+	{0x4702, CRL_REG_LEN_08BIT, 0x01},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4005, CRL_REG_LEN_08BIT, 0x18},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4052, CRL_REG_LEN_08BIT, 0x02},
+	{0x4057, CRL_REG_LEN_08BIT, 0x9c},
+	{0x405a, CRL_REG_LEN_08BIT, 0x00},
+	/*FSIN enable*/
+	{0x3832, CRL_REG_LEN_08BIT, 0x00},
+	{0x3833, CRL_REG_LEN_08BIT, 0x02},
+	{0x3834, CRL_REG_LEN_08BIT, 0x02},
+	{0x3835, CRL_REG_LEN_08BIT, 0x08},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	/*FSIN end*/
+	{0x4202, CRL_REG_LEN_08BIT, 0x02},
+	{0x3023, CRL_REG_LEN_08BIT, 0x10},
+	{0x3003, CRL_REG_LEN_08BIT, 0x20},
+	{0x3004, CRL_REG_LEN_08BIT, 0x21},
+	{0x3005, CRL_REG_LEN_08BIT, 0x14},
+	{0x3006, CRL_REG_LEN_08BIT, 0x11},
+	{0x3024, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x0100, CRL_REG_LEN_08BIT, 0x01},
+	{0x6f10, CRL_REG_LEN_08BIT, 0x07},
+	{0x6f11, CRL_REG_LEN_08BIT, 0x82},
+	{0x6f12, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f13, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f14, CRL_REG_LEN_08BIT, 0x1f},
+	{0x6f15, CRL_REG_LEN_08BIT, 0xdd},
+	{0x6f16, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f17, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f18, CRL_REG_LEN_08BIT, 0x36},
+	{0x6f19, CRL_REG_LEN_08BIT, 0x66},
+	{0x6f1a, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1b, CRL_REG_LEN_08BIT, 0x08},
+	{0x6f1c, CRL_REG_LEN_08BIT, 0x0c},
+	{0x6f1d, CRL_REG_LEN_08BIT, 0xe7},
+	{0x6f1e, CRL_REG_LEN_08BIT, 0x04},
+	{0x6f1f, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd000, CRL_REG_LEN_08BIT, 0x19},
+	{0xd001, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd002, CRL_REG_LEN_08BIT, 0x00},
+	{0xd003, CRL_REG_LEN_08BIT, 0x01},
+	{0xd004, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd005, CRL_REG_LEN_08BIT, 0xad},
+	{0xd006, CRL_REG_LEN_08BIT, 0x10},
+	{0xd007, CRL_REG_LEN_08BIT, 0x40},
+	{0xd008, CRL_REG_LEN_08BIT, 0x44},
+	{0xd009, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd00b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd00d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd00f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd010, CRL_REG_LEN_08BIT, 0x19},
+	{0xd011, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd012, CRL_REG_LEN_08BIT, 0x00},
+	{0xd013, CRL_REG_LEN_08BIT, 0x01},
+	{0xd014, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd015, CRL_REG_LEN_08BIT, 0xad},
+	{0xd016, CRL_REG_LEN_08BIT, 0x13},
+	{0xd017, CRL_REG_LEN_08BIT, 0xd0},
+	{0xd018, CRL_REG_LEN_08BIT, 0x44},
+	{0xd019, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd01b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd01d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd01f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd020, CRL_REG_LEN_08BIT, 0x19},
+	{0xd021, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd022, CRL_REG_LEN_08BIT, 0x00},
+	{0xd023, CRL_REG_LEN_08BIT, 0x01},
+	{0xd024, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd025, CRL_REG_LEN_08BIT, 0xad},
+	{0xd026, CRL_REG_LEN_08BIT, 0x14},
+	{0xd027, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd028, CRL_REG_LEN_08BIT, 0x44},
+	{0xd029, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd02b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd02d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd02f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd030, CRL_REG_LEN_08BIT, 0x19},
+	{0xd031, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd032, CRL_REG_LEN_08BIT, 0x00},
+	{0xd033, CRL_REG_LEN_08BIT, 0x01},
+	{0xd034, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd035, CRL_REG_LEN_08BIT, 0xad},
+	{0xd036, CRL_REG_LEN_08BIT, 0x14},
+	{0xd037, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd038, CRL_REG_LEN_08BIT, 0x44},
+	{0xd039, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03a, CRL_REG_LEN_08BIT, 0x68},
+	{0xd03b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd03d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd03f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd040, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd041, CRL_REG_LEN_08BIT, 0x21},
+	{0xd042, CRL_REG_LEN_08BIT, 0xff},
+	{0xd043, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd044, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd045, CRL_REG_LEN_08BIT, 0x01},
+	{0xd046, CRL_REG_LEN_08BIT, 0x48},
+	{0xd047, CRL_REG_LEN_08BIT, 0x00},
+	{0xd048, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd049, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04a, CRL_REG_LEN_08BIT, 0x50},
+	{0xd04b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd04c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd04d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd04e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd04f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd050, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd051, CRL_REG_LEN_08BIT, 0x01},
+	{0xd052, CRL_REG_LEN_08BIT, 0x70},
+	{0xd053, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd054, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd055, CRL_REG_LEN_08BIT, 0x01},
+	{0xd056, CRL_REG_LEN_08BIT, 0x80},
+	{0xd057, CRL_REG_LEN_08BIT, 0x10},
+	{0xd058, CRL_REG_LEN_08BIT, 0x19},
+	{0xd059, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd05a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd05b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd05c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd05d, CRL_REG_LEN_08BIT, 0xce},
+	{0xd05e, CRL_REG_LEN_08BIT, 0x02},
+	{0xd05f, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd060, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd061, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd062, CRL_REG_LEN_08BIT, 0x00},
+	{0xd063, CRL_REG_LEN_08BIT, 0x00},
+	{0xd064, CRL_REG_LEN_08BIT, 0x84},
+	{0xd065, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd066, CRL_REG_LEN_08BIT, 0x00},
+	{0xd067, CRL_REG_LEN_08BIT, 0x00},
+	{0xd068, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd069, CRL_REG_LEN_08BIT, 0x03},
+	{0xd06a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd06b, CRL_REG_LEN_08BIT, 0x76},
+	{0xd06c, CRL_REG_LEN_08BIT, 0x1a},
+	{0xd06d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd06f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd070, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd071, CRL_REG_LEN_08BIT, 0x10},
+	{0xd072, CRL_REG_LEN_08BIT, 0x03},
+	{0xd073, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd074, CRL_REG_LEN_08BIT, 0x18},
+	{0xd075, CRL_REG_LEN_08BIT, 0x60},
+	{0xd076, CRL_REG_LEN_08BIT, 0x00},
+	{0xd077, CRL_REG_LEN_08BIT, 0x01},
+	{0xd078, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd079, CRL_REG_LEN_08BIT, 0x63},
+	{0xd07a, CRL_REG_LEN_08BIT, 0x07},
+	{0xd07b, CRL_REG_LEN_08BIT, 0x80},
+	{0xd07c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd07d, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd07e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd07f, CRL_REG_LEN_08BIT, 0x04},
+	{0xd080, CRL_REG_LEN_08BIT, 0x18},
+	{0xd081, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd082, CRL_REG_LEN_08BIT, 0x00},
+	{0xd083, CRL_REG_LEN_08BIT, 0x00},
+	{0xd084, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd085, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd086, CRL_REG_LEN_08BIT, 0x00},
+	{0xd087, CRL_REG_LEN_08BIT, 0x00},
+	{0xd088, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd089, CRL_REG_LEN_08BIT, 0x63},
+	{0xd08a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd08c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd08d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd08e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd08f, CRL_REG_LEN_08BIT, 0x14},
+	{0xd090, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd091, CRL_REG_LEN_08BIT, 0x01},
+	{0xd092, CRL_REG_LEN_08BIT, 0x30},
+	{0xd093, CRL_REG_LEN_08BIT, 0x18},
+	{0xd094, CRL_REG_LEN_08BIT, 0x07},
+	{0xd095, CRL_REG_LEN_08BIT, 0xff},
+	{0xd096, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd097, CRL_REG_LEN_08BIT, 0xfd},
+	{0xd098, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd099, CRL_REG_LEN_08BIT, 0x80},
+	{0xd09a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd09c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd09d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd09e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd09f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd0a0, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0a1, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd0a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0a3, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0a5, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd0a6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd0a7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd0a8, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0a9, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0aa, CRL_REG_LEN_08BIT, 0x58},
+	{0xd0ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ac, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0ad, CRL_REG_LEN_08BIT, 0x8e},
+	{0xd0ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd0b1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd0b2, CRL_REG_LEN_08BIT, 0x30},
+	{0xd0b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b4, CRL_REG_LEN_08BIT, 0x98},
+	{0xd0b5, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd0b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0b8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0b9, CRL_REG_LEN_08BIT, 0x64},
+	{0xd0ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0bb, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd0bc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0bd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd0be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0bf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c0, CRL_REG_LEN_08BIT, 0x10},
+	{0xd0c1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0c4, CRL_REG_LEN_08BIT, 0x95},
+	{0xd0c5, CRL_REG_LEN_08BIT, 0x8b},
+	{0xd0c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0c8, CRL_REG_LEN_08BIT, 0x94},
+	{0xd0c9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd0ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0cb, CRL_REG_LEN_08BIT, 0x70},
+	{0xd0cc, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd0cd, CRL_REG_LEN_08BIT, 0x65},
+	{0xd0ce, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0cf, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd0d1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d3, CRL_REG_LEN_08BIT, 0x62},
+	{0xd0d4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd0d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0da, CRL_REG_LEN_08BIT, 0x80},
+	{0xd0db, CRL_REG_LEN_08BIT, 0x06},
+	{0xd0dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0dd, CRL_REG_LEN_08BIT, 0x83},
+	{0xd0de, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0df, CRL_REG_LEN_08BIT, 0x29},
+	{0xd0e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e1, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd0e2, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0e3, CRL_REG_LEN_08BIT, 0x08},
+	{0xd0e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0e5, CRL_REG_LEN_08BIT, 0x84},
+	{0xd0e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0e8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0e9, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd0ea, CRL_REG_LEN_08BIT, 0x40},
+	{0xd0eb, CRL_REG_LEN_08BIT, 0x09},
+	{0xd0ec, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd0ed, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd0ee, CRL_REG_LEN_08BIT, 0x38},
+	{0xd0ef, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd0f0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f1, CRL_REG_LEN_08BIT, 0x07},
+	{0xd0f2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd0f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd0f5, CRL_REG_LEN_08BIT, 0x66},
+	{0xd0f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0f8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd0f9, CRL_REG_LEN_08BIT, 0x05},
+	{0xd0fa, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0fc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd0fd, CRL_REG_LEN_08BIT, 0x60},
+	{0xd0fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd0ff, CRL_REG_LEN_08BIT, 0x01},
+	{0xd100, CRL_REG_LEN_08BIT, 0x98},
+	{0xd101, CRL_REG_LEN_08BIT, 0x90},
+	{0xd102, CRL_REG_LEN_08BIT, 0x00},
+	{0xd103, CRL_REG_LEN_08BIT, 0x00},
+	{0xd104, CRL_REG_LEN_08BIT, 0x84},
+	{0xd105, CRL_REG_LEN_08BIT, 0xae},
+	{0xd106, CRL_REG_LEN_08BIT, 0x00},
+	{0xd107, CRL_REG_LEN_08BIT, 0x00},
+	{0xd108, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd109, CRL_REG_LEN_08BIT, 0x63},
+	{0xd10a, CRL_REG_LEN_08BIT, 0x06},
+	{0xd10b, CRL_REG_LEN_08BIT, 0x4c},
+	{0xd10c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd10d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd10e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd10f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd110, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd111, CRL_REG_LEN_08BIT, 0x03},
+	{0xd112, CRL_REG_LEN_08BIT, 0x30},
+	{0xd113, CRL_REG_LEN_08BIT, 0x00},
+	{0xd114, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd115, CRL_REG_LEN_08BIT, 0x65},
+	{0xd116, CRL_REG_LEN_08BIT, 0x00},
+	{0xd117, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd118, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd119, CRL_REG_LEN_08BIT, 0x84},
+	{0xd11a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd11b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11c, CRL_REG_LEN_08BIT, 0x10},
+	{0xd11d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd11f, CRL_REG_LEN_08BIT, 0x07},
+	{0xd120, CRL_REG_LEN_08BIT, 0x18},
+	{0xd121, CRL_REG_LEN_08BIT, 0x80},
+	{0xd122, CRL_REG_LEN_08BIT, 0x80},
+	{0xd123, CRL_REG_LEN_08BIT, 0x06},
+	{0xd124, CRL_REG_LEN_08BIT, 0x94},
+	{0xd125, CRL_REG_LEN_08BIT, 0x65},
+	{0xd126, CRL_REG_LEN_08BIT, 0x00},
+	{0xd127, CRL_REG_LEN_08BIT, 0x70},
+	{0xd128, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd129, CRL_REG_LEN_08BIT, 0x43},
+	{0xd12a, CRL_REG_LEN_08BIT, 0x60},
+	{0xd12b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12c, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd12d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd12f, CRL_REG_LEN_08BIT, 0x3e},
+	{0xd130, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd131, CRL_REG_LEN_08BIT, 0x64},
+	{0xd132, CRL_REG_LEN_08BIT, 0x38},
+	{0xd133, CRL_REG_LEN_08BIT, 0x24},
+	{0xd134, CRL_REG_LEN_08BIT, 0x18},
+	{0xd135, CRL_REG_LEN_08BIT, 0x80},
+	{0xd136, CRL_REG_LEN_08BIT, 0x80},
+	{0xd137, CRL_REG_LEN_08BIT, 0x06},
+	{0xd138, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd139, CRL_REG_LEN_08BIT, 0x64},
+	{0xd13a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd13b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd13c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd13d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd13e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd13f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd140, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd141, CRL_REG_LEN_08BIT, 0x63},
+	{0xd142, CRL_REG_LEN_08BIT, 0x00},
+	{0xd143, CRL_REG_LEN_08BIT, 0x40},
+	{0xd144, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd145, CRL_REG_LEN_08BIT, 0x23},
+	{0xd146, CRL_REG_LEN_08BIT, 0x00},
+	{0xd147, CRL_REG_LEN_08BIT, 0x00},
+	{0xd148, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd149, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd14b, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd14c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd14d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd14e, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd14f, CRL_REG_LEN_08BIT, 0x44},
+	{0xd150, CRL_REG_LEN_08BIT, 0x19},
+	{0xd151, CRL_REG_LEN_08BIT, 0x00},
+	{0xd152, CRL_REG_LEN_08BIT, 0x80},
+	{0xd153, CRL_REG_LEN_08BIT, 0x06},
+	{0xd154, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd155, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd156, CRL_REG_LEN_08BIT, 0x3d},
+	{0xd157, CRL_REG_LEN_08BIT, 0x05},
+	{0xd158, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd159, CRL_REG_LEN_08BIT, 0x67},
+	{0xd15a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd15d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd15e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd15f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd160, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd161, CRL_REG_LEN_08BIT, 0x63},
+	{0xd162, CRL_REG_LEN_08BIT, 0x00},
+	{0xd163, CRL_REG_LEN_08BIT, 0x98},
+	{0xd164, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd165, CRL_REG_LEN_08BIT, 0x03},
+	{0xd166, CRL_REG_LEN_08BIT, 0x00},
+	{0xd167, CRL_REG_LEN_08BIT, 0x00},
+	{0xd168, CRL_REG_LEN_08BIT, 0x10},
+	{0xd169, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd16b, CRL_REG_LEN_08BIT, 0x10},
+	{0xd16c, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd16d, CRL_REG_LEN_08BIT, 0x48},
+	{0xd16e, CRL_REG_LEN_08BIT, 0x67},
+	{0xd16f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd170, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd171, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd172, CRL_REG_LEN_08BIT, 0x00},
+	{0xd173, CRL_REG_LEN_08BIT, 0x19},
+	{0xd174, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd175, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd176, CRL_REG_LEN_08BIT, 0x00},
+	{0xd177, CRL_REG_LEN_08BIT, 0x00},
+	{0xd178, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd179, CRL_REG_LEN_08BIT, 0x68},
+	{0xd17a, CRL_REG_LEN_08BIT, 0x67},
+	{0xd17b, CRL_REG_LEN_08BIT, 0x03},
+	{0xd17c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd17d, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd17e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd17f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd180, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd181, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd182, CRL_REG_LEN_08BIT, 0x00},
+	{0xd183, CRL_REG_LEN_08BIT, 0x00},
+	{0xd184, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd185, CRL_REG_LEN_08BIT, 0x85},
+	{0xd186, CRL_REG_LEN_08BIT, 0x00},
+	{0xd187, CRL_REG_LEN_08BIT, 0x98},
+	{0xd188, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd189, CRL_REG_LEN_08BIT, 0x63},
+	{0xd18a, CRL_REG_LEN_08BIT, 0x30},
+	{0xd18b, CRL_REG_LEN_08BIT, 0x04},
+	{0xd18c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd18d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd18e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd18f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd190, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd191, CRL_REG_LEN_08BIT, 0x83},
+	{0xd192, CRL_REG_LEN_08BIT, 0xff},
+	{0xd193, CRL_REG_LEN_08BIT, 0xff},
+	{0xd194, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd195, CRL_REG_LEN_08BIT, 0x64},
+	{0xd196, CRL_REG_LEN_08BIT, 0x00},
+	{0xd197, CRL_REG_LEN_08BIT, 0x48},
+	{0xd198, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd199, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd19a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd19b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd19c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd19d, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd19e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd19f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1a1, CRL_REG_LEN_08BIT, 0x60},
+	{0xd1a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1a5, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1a6, CRL_REG_LEN_08BIT, 0x18},
+	{0xd1a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1a8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1a9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd1aa, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1ab, CRL_REG_LEN_08BIT, 0x22},
+	{0xd1ac, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ad, CRL_REG_LEN_08BIT, 0x80},
+	{0xd1ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1af, CRL_REG_LEN_08BIT, 0x70},
+	{0xd1b0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1b1, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd1b2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1b3, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1b4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd1b5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1b6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1b8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1b9, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1bc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1bd, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd1be, CRL_REG_LEN_08BIT, 0x38},
+	{0xd1bf, CRL_REG_LEN_08BIT, 0x42},
+	{0xd1c0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1c1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd1c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1c5, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1c7, CRL_REG_LEN_08BIT, 0x01},
+	{0xd1c8, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd1c9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd1ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cb, CRL_REG_LEN_08BIT, 0x08},
+	{0xd1cc, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1cd, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd1ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1cf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1d0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1d1, CRL_REG_LEN_08BIT, 0x67},
+	{0xd1d2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d4, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd1d5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1d6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd1d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1d8, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1d9, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1da, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1db, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1dc, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1dd, CRL_REG_LEN_08BIT, 0x43},
+	{0xd1de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1df, CRL_REG_LEN_08BIT, 0x07},
+	{0xd1e0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd1e1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e3, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd1e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd1e5, CRL_REG_LEN_08BIT, 0x05},
+	{0xd1e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1e7, CRL_REG_LEN_08BIT, 0x02},
+	{0xd1e8, CRL_REG_LEN_08BIT, 0x03},
+	{0xd1e9, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1ea, CRL_REG_LEN_08BIT, 0xff},
+	{0xd1eb, CRL_REG_LEN_08BIT, 0xf6},
+	{0xd1ec, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd1ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd1ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f1, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd1f2, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1f3, CRL_REG_LEN_08BIT, 0x86},
+	{0xd1f4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd1f5, CRL_REG_LEN_08BIT, 0x63},
+	{0xd1f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd1f8, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1f9, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd1fa, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd1fb, CRL_REG_LEN_08BIT, 0x45},
+	{0xd1fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd1fd, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd1fe, CRL_REG_LEN_08BIT, 0x55},
+	{0xd1ff, CRL_REG_LEN_08BIT, 0x87},
+	{0xd200, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd201, CRL_REG_LEN_08BIT, 0x05},
+	{0xd202, CRL_REG_LEN_08BIT, 0x18},
+	{0xd203, CRL_REG_LEN_08BIT, 0x00},
+	{0xd204, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd205, CRL_REG_LEN_08BIT, 0x66},
+	{0xd206, CRL_REG_LEN_08BIT, 0x00},
+	{0xd207, CRL_REG_LEN_08BIT, 0x00},
+	{0xd208, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd209, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd20a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd20b, CRL_REG_LEN_08BIT, 0x46},
+	{0xd20c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd20d, CRL_REG_LEN_08BIT, 0x07},
+	{0xd20e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd20f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd210, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd211, CRL_REG_LEN_08BIT, 0x84},
+	{0xd212, CRL_REG_LEN_08BIT, 0x55},
+	{0xd213, CRL_REG_LEN_08BIT, 0x88},
+	{0xd214, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd215, CRL_REG_LEN_08BIT, 0x65},
+	{0xd216, CRL_REG_LEN_08BIT, 0x00},
+	{0xd217, CRL_REG_LEN_08BIT, 0x00},
+	{0xd218, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd219, CRL_REG_LEN_08BIT, 0x04},
+	{0xd21a, CRL_REG_LEN_08BIT, 0x18},
+	{0xd21b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd21c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd21d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd21f, CRL_REG_LEN_08BIT, 0xce},
+	{0xd220, CRL_REG_LEN_08BIT, 0x19},
+	{0xd221, CRL_REG_LEN_08BIT, 0x00},
+	{0xd222, CRL_REG_LEN_08BIT, 0x80},
+	{0xd223, CRL_REG_LEN_08BIT, 0x06},
+	{0xd224, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd225, CRL_REG_LEN_08BIT, 0x63},
+	{0xd226, CRL_REG_LEN_08BIT, 0x00},
+	{0xd227, CRL_REG_LEN_08BIT, 0x00},
+	{0xd228, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd229, CRL_REG_LEN_08BIT, 0x63},
+	{0xd22a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22b, CRL_REG_LEN_08BIT, 0x40},
+	{0xd22c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd22d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd22e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd22f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd230, CRL_REG_LEN_08BIT, 0x13},
+	{0xd231, CRL_REG_LEN_08BIT, 0xff},
+	{0xd232, CRL_REG_LEN_08BIT, 0xff},
+	{0xd233, CRL_REG_LEN_08BIT, 0xc8},
+	{0xd234, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd235, CRL_REG_LEN_08BIT, 0x00},
+	{0xd236, CRL_REG_LEN_08BIT, 0x00},
+	{0xd237, CRL_REG_LEN_08BIT, 0x40},
+	{0xd238, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd239, CRL_REG_LEN_08BIT, 0x64},
+	{0xd23a, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23b, CRL_REG_LEN_08BIT, 0x86},
+	{0xd23c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd23d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd23e, CRL_REG_LEN_08BIT, 0x55},
+	{0xd23f, CRL_REG_LEN_08BIT, 0x87},
+	{0xd240, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd241, CRL_REG_LEN_08BIT, 0x03},
+	{0xd242, CRL_REG_LEN_08BIT, 0x40},
+	{0xd243, CRL_REG_LEN_08BIT, 0x00},
+	{0xd244, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd245, CRL_REG_LEN_08BIT, 0x64},
+	{0xd246, CRL_REG_LEN_08BIT, 0x55},
+	{0xd247, CRL_REG_LEN_08BIT, 0x88},
+	{0xd248, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd249, CRL_REG_LEN_08BIT, 0x05},
+	{0xd24a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd24c, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd24d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd24e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd24f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd250, CRL_REG_LEN_08BIT, 0x03},
+	{0xd251, CRL_REG_LEN_08BIT, 0xff},
+	{0xd252, CRL_REG_LEN_08BIT, 0xff},
+	{0xd253, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd254, CRL_REG_LEN_08BIT, 0x19},
+	{0xd255, CRL_REG_LEN_08BIT, 0x00},
+	{0xd256, CRL_REG_LEN_08BIT, 0x80},
+	{0xd257, CRL_REG_LEN_08BIT, 0x06},
+	{0xd258, CRL_REG_LEN_08BIT, 0x94},
+	{0xd259, CRL_REG_LEN_08BIT, 0x84},
+	{0xd25a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd25b, CRL_REG_LEN_08BIT, 0x72},
+	{0xd25c, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd25d, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd25e, CRL_REG_LEN_08BIT, 0x60},
+	{0xd25f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd260, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd261, CRL_REG_LEN_08BIT, 0x00},
+	{0xd262, CRL_REG_LEN_08BIT, 0x00},
+	{0xd263, CRL_REG_LEN_08BIT, 0x3f},
+	{0xd264, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd265, CRL_REG_LEN_08BIT, 0x60},
+	{0xd266, CRL_REG_LEN_08BIT, 0x01},
+	{0xd267, CRL_REG_LEN_08BIT, 0x00},
+	{0xd268, CRL_REG_LEN_08BIT, 0x85},
+	{0xd269, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd26a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26c, CRL_REG_LEN_08BIT, 0x98},
+	{0xd26d, CRL_REG_LEN_08BIT, 0x70},
+	{0xd26e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd26f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd270, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd271, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd272, CRL_REG_LEN_08BIT, 0x00},
+	{0xd273, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd274, CRL_REG_LEN_08BIT, 0xe5},
+	{0xd275, CRL_REG_LEN_08BIT, 0x63},
+	{0xd276, CRL_REG_LEN_08BIT, 0x20},
+	{0xd277, CRL_REG_LEN_08BIT, 0x00},
+	{0xd278, CRL_REG_LEN_08BIT, 0x10},
+	{0xd279, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27b, CRL_REG_LEN_08BIT, 0x07},
+	{0xd27c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd27d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd27f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd280, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd281, CRL_REG_LEN_08BIT, 0xaa},
+	{0xd282, CRL_REG_LEN_08BIT, 0x00},
+	{0xd283, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd284, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd285, CRL_REG_LEN_08BIT, 0x63},
+	{0xd286, CRL_REG_LEN_08BIT, 0x28},
+	{0xd287, CRL_REG_LEN_08BIT, 0x02},
+	{0xd288, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd289, CRL_REG_LEN_08BIT, 0x84},
+	{0xd28a, CRL_REG_LEN_08BIT, 0x28},
+	{0xd28b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd28c, CRL_REG_LEN_08BIT, 0x07},
+	{0xd28d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd28e, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd28f, CRL_REG_LEN_08BIT, 0x66},
+	{0xd290, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd291, CRL_REG_LEN_08BIT, 0x63},
+	{0xd292, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd293, CRL_REG_LEN_08BIT, 0x06},
+	{0xd294, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd295, CRL_REG_LEN_08BIT, 0x6a},
+	{0xd296, CRL_REG_LEN_08BIT, 0x00},
+	{0xd297, CRL_REG_LEN_08BIT, 0x77},
+	{0xd298, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd299, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29a, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd29b, CRL_REG_LEN_08BIT, 0x06},
+	{0xd29c, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd29d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd29e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd29f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a0, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a3, CRL_REG_LEN_08BIT, 0x3c},
+	{0xd2a4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd2a5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2a8, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd2a9, CRL_REG_LEN_08BIT, 0x8a},
+	{0xd2aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ab, CRL_REG_LEN_08BIT, 0x78},
+	{0xd2ac, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd2ad, CRL_REG_LEN_08BIT, 0x63},
+	{0xd2ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2af, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2b0, CRL_REG_LEN_08BIT, 0xe1},
+	{0xd2b1, CRL_REG_LEN_08BIT, 0x64},
+	{0xd2b2, CRL_REG_LEN_08BIT, 0x5b},
+	{0xd2b3, CRL_REG_LEN_08BIT, 0x06},
+	{0xd2b4, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2b5, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2b8, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2b9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2bb, CRL_REG_LEN_08BIT, 0x34},
+	{0xd2bc, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2bd, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2be, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2bf, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c0, CRL_REG_LEN_08BIT, 0xb9},
+	{0xd2c1, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd2c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c3, CRL_REG_LEN_08BIT, 0x88},
+	{0xd2c4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd2c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2c7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2c8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2c9, CRL_REG_LEN_08BIT, 0x68},
+	{0xd2ca, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cc, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2cd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2cf, CRL_REG_LEN_08BIT, 0x2c},
+	{0xd2d0, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2d1, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2d2, CRL_REG_LEN_08BIT, 0x58},
+	{0xd2d3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2d4, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2d5, CRL_REG_LEN_08BIT, 0x81},
+	{0xd2d6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2d7, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2d8, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2d9, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd2da, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2dc, CRL_REG_LEN_08BIT, 0x10},
+	{0xd2dd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2df, CRL_REG_LEN_08BIT, 0x05},
+	{0xd2e0, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2e1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e3, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2e4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd2e5, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd2e6, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2e8, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xd2ea, CRL_REG_LEN_08BIT, 0x28},
+	{0xd2eb, CRL_REG_LEN_08BIT, 0x14},
+	{0xd2ec, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2ed, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd2ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ef, CRL_REG_LEN_08BIT, 0x18},
+	{0xd2f0, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd2f1, CRL_REG_LEN_08BIT, 0x66},
+	{0xd2f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f4, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd2f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2f7, CRL_REG_LEN_08BIT, 0x20},
+	{0xd2f8, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd2f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2fc, CRL_REG_LEN_08BIT, 0x84},
+	{0xd2fd, CRL_REG_LEN_08BIT, 0x61},
+	{0xd2fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd2ff, CRL_REG_LEN_08BIT, 0x18},
+	{0xd300, CRL_REG_LEN_08BIT, 0xbd},
+	{0xd301, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd302, CRL_REG_LEN_08BIT, 0x01},
+	{0xd303, CRL_REG_LEN_08BIT, 0x00},
+	{0xd304, CRL_REG_LEN_08BIT, 0x10},
+	{0xd305, CRL_REG_LEN_08BIT, 0x00},
+	{0xd306, CRL_REG_LEN_08BIT, 0x00},
+	{0xd307, CRL_REG_LEN_08BIT, 0x03},
+	{0xd308, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd309, CRL_REG_LEN_08BIT, 0x80},
+	{0xd30a, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd30c, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xd30e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd30f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd310, CRL_REG_LEN_08BIT, 0x18},
+	{0xd311, CRL_REG_LEN_08BIT, 0x60},
+	{0xd312, CRL_REG_LEN_08BIT, 0x80},
+	{0xd313, CRL_REG_LEN_08BIT, 0x06},
+	{0xd314, CRL_REG_LEN_08BIT, 0x85},
+	{0xd315, CRL_REG_LEN_08BIT, 0x01},
+	{0xd316, CRL_REG_LEN_08BIT, 0x00},
+	{0xd317, CRL_REG_LEN_08BIT, 0x14},
+	{0xd318, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd319, CRL_REG_LEN_08BIT, 0x83},
+	{0xd31a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd31b, CRL_REG_LEN_08BIT, 0x29},
+	{0xd31c, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd31d, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd31e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd31f, CRL_REG_LEN_08BIT, 0x08},
+	{0xd320, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd321, CRL_REG_LEN_08BIT, 0x84},
+	{0xd322, CRL_REG_LEN_08BIT, 0x00},
+	{0xd323, CRL_REG_LEN_08BIT, 0x00},
+	{0xd324, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd325, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd326, CRL_REG_LEN_08BIT, 0x38},
+	{0xd327, CRL_REG_LEN_08BIT, 0x2a},
+	{0xd328, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd329, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd32a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32b, CRL_REG_LEN_08BIT, 0x09},
+	{0xd32c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd32d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd32e, CRL_REG_LEN_08BIT, 0x40},
+	{0xd32f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd330, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd331, CRL_REG_LEN_08BIT, 0x06},
+	{0xd332, CRL_REG_LEN_08BIT, 0x18},
+	{0xd333, CRL_REG_LEN_08BIT, 0x00},
+	{0xd334, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd335, CRL_REG_LEN_08BIT, 0x65},
+	{0xd336, CRL_REG_LEN_08BIT, 0x00},
+	{0xd337, CRL_REG_LEN_08BIT, 0x00},
+	{0xd338, CRL_REG_LEN_08BIT, 0x84},
+	{0xd339, CRL_REG_LEN_08BIT, 0x81},
+	{0xd33a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd33b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd33c, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33d, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd33e, CRL_REG_LEN_08BIT, 0x20},
+	{0xd33f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd340, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd341, CRL_REG_LEN_08BIT, 0x07},
+	{0xd342, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd343, CRL_REG_LEN_08BIT, 0x00},
+	{0xd344, CRL_REG_LEN_08BIT, 0x03},
+	{0xd345, CRL_REG_LEN_08BIT, 0xff},
+	{0xd346, CRL_REG_LEN_08BIT, 0xff},
+	{0xd347, CRL_REG_LEN_08BIT, 0x6f},
+	{0xd348, CRL_REG_LEN_08BIT, 0x18},
+	{0xd349, CRL_REG_LEN_08BIT, 0x60},
+	{0xd34a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd34b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd34c, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd34d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd34f, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd350, CRL_REG_LEN_08BIT, 0x18},
+	{0xd351, CRL_REG_LEN_08BIT, 0x60},
+	{0xd352, CRL_REG_LEN_08BIT, 0x80},
+	{0xd353, CRL_REG_LEN_08BIT, 0x06},
+	{0xd354, CRL_REG_LEN_08BIT, 0x00},
+	{0xd355, CRL_REG_LEN_08BIT, 0x00},
+	{0xd356, CRL_REG_LEN_08BIT, 0x00},
+	{0xd357, CRL_REG_LEN_08BIT, 0x11},
+	{0xd358, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd359, CRL_REG_LEN_08BIT, 0x83},
+	{0xd35a, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd35b, CRL_REG_LEN_08BIT, 0x43},
+	{0xd35c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd35d, CRL_REG_LEN_08BIT, 0x6c},
+	{0xd35e, CRL_REG_LEN_08BIT, 0x28},
+	{0xd35f, CRL_REG_LEN_08BIT, 0x02},
+	{0xd360, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd361, CRL_REG_LEN_08BIT, 0x84},
+	{0xd362, CRL_REG_LEN_08BIT, 0x28},
+	{0xd363, CRL_REG_LEN_08BIT, 0x02},
+	{0xd364, CRL_REG_LEN_08BIT, 0x07},
+	{0xd365, CRL_REG_LEN_08BIT, 0xff},
+	{0xd366, CRL_REG_LEN_08BIT, 0xf8},
+	{0xd367, CRL_REG_LEN_08BIT, 0x30},
+	{0xd368, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd369, CRL_REG_LEN_08BIT, 0x63},
+	{0xd36a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd36b, CRL_REG_LEN_08BIT, 0x08},
+	{0xd36c, CRL_REG_LEN_08BIT, 0x03},
+	{0xd36d, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36e, CRL_REG_LEN_08BIT, 0xff},
+	{0xd36f, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd370, CRL_REG_LEN_08BIT, 0x85},
+	{0xd371, CRL_REG_LEN_08BIT, 0x4e},
+	{0xd372, CRL_REG_LEN_08BIT, 0x00},
+	{0xd373, CRL_REG_LEN_08BIT, 0x00},
+	{0xd374, CRL_REG_LEN_08BIT, 0x03},
+	{0xd375, CRL_REG_LEN_08BIT, 0xff},
+	{0xd376, CRL_REG_LEN_08BIT, 0xff},
+	{0xd377, CRL_REG_LEN_08BIT, 0xe7},
+	{0xd378, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd379, CRL_REG_LEN_08BIT, 0x01},
+	{0xd37a, CRL_REG_LEN_08BIT, 0x40},
+	{0xd37b, CRL_REG_LEN_08BIT, 0x18},
+	{0xd37c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd37d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd37e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd37f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd380, CRL_REG_LEN_08BIT, 0x03},
+	{0xd381, CRL_REG_LEN_08BIT, 0xff},
+	{0xd382, CRL_REG_LEN_08BIT, 0xff},
+	{0xd383, CRL_REG_LEN_08BIT, 0xdb},
+	{0xd384, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd385, CRL_REG_LEN_08BIT, 0x01},
+	{0xd386, CRL_REG_LEN_08BIT, 0x18},
+	{0xd387, CRL_REG_LEN_08BIT, 0x14},
+	{0xd388, CRL_REG_LEN_08BIT, 0x03},
+	{0xd389, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38a, CRL_REG_LEN_08BIT, 0xff},
+	{0xd38b, CRL_REG_LEN_08BIT, 0xce},
+	{0xd38c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd38d, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd38e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd38f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd390, CRL_REG_LEN_08BIT, 0x03},
+	{0xd391, CRL_REG_LEN_08BIT, 0xff},
+	{0xd392, CRL_REG_LEN_08BIT, 0xff},
+	{0xd393, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd394, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd395, CRL_REG_LEN_08BIT, 0x63},
+	{0xd396, CRL_REG_LEN_08BIT, 0x00},
+	{0xd397, CRL_REG_LEN_08BIT, 0xff},
+	{0xd398, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd399, CRL_REG_LEN_08BIT, 0xe3},
+	{0xd39a, CRL_REG_LEN_08BIT, 0x38},
+	{0xd39b, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd39c, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd39d, CRL_REG_LEN_08BIT, 0x84},
+	{0xd39e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd39f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a1, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd3a2, CRL_REG_LEN_08BIT, 0x38},
+	{0xd3a3, CRL_REG_LEN_08BIT, 0x0e},
+	{0xd3a4, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3a5, CRL_REG_LEN_08BIT, 0xc3},
+	{0xd3a6, CRL_REG_LEN_08BIT, 0x6e},
+	{0xd3a7, CRL_REG_LEN_08BIT, 0x42},
+	{0xd3a8, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3a9, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3aa, CRL_REG_LEN_08BIT, 0x20},
+	{0xd3ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ac, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3ad, CRL_REG_LEN_08BIT, 0x66},
+	{0xd3ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd3b1, CRL_REG_LEN_08BIT, 0x05},
+	{0xd3b2, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b4, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3b8, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3b9, CRL_REG_LEN_08BIT, 0x41},
+	{0xd3ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bb, CRL_REG_LEN_08BIT, 0x04},
+	{0xd3bc, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3bd, CRL_REG_LEN_08BIT, 0x81},
+	{0xd3be, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3bf, CRL_REG_LEN_08BIT, 0x08},
+	{0xd3c0, CRL_REG_LEN_08BIT, 0x85},
+	{0xd3c1, CRL_REG_LEN_08BIT, 0xc1},
+	{0xd3c2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c3, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3c4, CRL_REG_LEN_08BIT, 0x86},
+	{0xd3c5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3c6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3c7, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3c8, CRL_REG_LEN_08BIT, 0x44},
+	{0xd3c9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ca, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3cd, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3ce, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3cf, CRL_REG_LEN_08BIT, 0x1c},
+	{0xd3d0, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd3d1, CRL_REG_LEN_08BIT, 0x21},
+	{0xd3d2, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3d3, CRL_REG_LEN_08BIT, 0xfc},
+	{0xd3d4, CRL_REG_LEN_08BIT, 0xd4},
+	{0xd3d5, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd3d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3d8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3d9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3db, CRL_REG_LEN_08BIT, 0x01},
+	{0xd3dc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3dd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3de, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3df, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3e0, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd3e1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e3, CRL_REG_LEN_08BIT, 0x68},
+	{0xd3e4, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd3e5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd3e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3e8, CRL_REG_LEN_08BIT, 0x10},
+	{0xd3e9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3eb, CRL_REG_LEN_08BIT, 0x0c},
+	{0xd3ec, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ee, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3ef, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f0, CRL_REG_LEN_08BIT, 0x07},
+	{0xd3f1, CRL_REG_LEN_08BIT, 0xff},
+	{0xd3f2, CRL_REG_LEN_08BIT, 0xd9},
+	{0xd3f3, CRL_REG_LEN_08BIT, 0x98},
+	{0xd3f4, CRL_REG_LEN_08BIT, 0x15},
+	{0xd3f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd3f8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd3f9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd3fa, CRL_REG_LEN_08BIT, 0x80},
+	{0xd3fb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd3fc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd3fd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd3fe, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd3ff, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd400, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd401, CRL_REG_LEN_08BIT, 0x63},
+	{0xd402, CRL_REG_LEN_08BIT, 0x00},
+	{0xd403, CRL_REG_LEN_08BIT, 0x00},
+	{0xd404, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd405, CRL_REG_LEN_08BIT, 0x23},
+	{0xd406, CRL_REG_LEN_08BIT, 0x00},
+	{0xd407, CRL_REG_LEN_08BIT, 0x01},
+	{0xd408, CRL_REG_LEN_08BIT, 0x10},
+	{0xd409, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40b, CRL_REG_LEN_08BIT, 0x25},
+	{0xd40c, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd40d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd40f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd410, CRL_REG_LEN_08BIT, 0x00},
+	{0xd411, CRL_REG_LEN_08BIT, 0x00},
+	{0xd412, CRL_REG_LEN_08BIT, 0x00},
+	{0xd413, CRL_REG_LEN_08BIT, 0x0b},
+	{0xd414, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd415, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd416, CRL_REG_LEN_08BIT, 0x00},
+	{0xd417, CRL_REG_LEN_08BIT, 0x02},
+	{0xd418, CRL_REG_LEN_08BIT, 0x07},
+	{0xd419, CRL_REG_LEN_08BIT, 0xff},
+	{0xd41a, CRL_REG_LEN_08BIT, 0xd6},
+	{0xd41b, CRL_REG_LEN_08BIT, 0x24},
+	{0xd41c, CRL_REG_LEN_08BIT, 0x15},
+	{0xd41d, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd41f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd420, CRL_REG_LEN_08BIT, 0x18},
+	{0xd421, CRL_REG_LEN_08BIT, 0x60},
+	{0xd422, CRL_REG_LEN_08BIT, 0x80},
+	{0xd423, CRL_REG_LEN_08BIT, 0x06},
+	{0xd424, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd425, CRL_REG_LEN_08BIT, 0x63},
+	{0xd426, CRL_REG_LEN_08BIT, 0xc4},
+	{0xd427, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd428, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd429, CRL_REG_LEN_08BIT, 0x63},
+	{0xd42a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42b, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42c, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd42d, CRL_REG_LEN_08BIT, 0x23},
+	{0xd42e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd42f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd430, CRL_REG_LEN_08BIT, 0x10},
+	{0xd431, CRL_REG_LEN_08BIT, 0x00},
+	{0xd432, CRL_REG_LEN_08BIT, 0x00},
+	{0xd433, CRL_REG_LEN_08BIT, 0x1b},
+	{0xd434, CRL_REG_LEN_08BIT, 0x9d},
+	{0xd435, CRL_REG_LEN_08BIT, 0x00},
+	{0xd436, CRL_REG_LEN_08BIT, 0x00},
+	{0xd437, CRL_REG_LEN_08BIT, 0x00},
+	{0xd438, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd439, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd43a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd43c, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd43d, CRL_REG_LEN_08BIT, 0xc0},
+	{0xd43e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd43f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd440, CRL_REG_LEN_08BIT, 0x18},
+	{0xd441, CRL_REG_LEN_08BIT, 0xa0},
+	{0xd442, CRL_REG_LEN_08BIT, 0x80},
+	{0xd443, CRL_REG_LEN_08BIT, 0x06},
+	{0xd444, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd445, CRL_REG_LEN_08BIT, 0x67},
+	{0xd446, CRL_REG_LEN_08BIT, 0x30},
+	{0xd447, CRL_REG_LEN_08BIT, 0x00},
+	{0xd448, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd449, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd44a, CRL_REG_LEN_08BIT, 0xce},
+	{0xd44b, CRL_REG_LEN_08BIT, 0xb0},
+	{0xd44c, CRL_REG_LEN_08BIT, 0x19},
+	{0xd44d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd44e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd44f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd450, CRL_REG_LEN_08BIT, 0xa9},
+	{0xd451, CRL_REG_LEN_08BIT, 0x6b},
+	{0xd452, CRL_REG_LEN_08BIT, 0x06},
+	{0xd453, CRL_REG_LEN_08BIT, 0x14},
+	{0xd454, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd455, CRL_REG_LEN_08BIT, 0x83},
+	{0xd456, CRL_REG_LEN_08BIT, 0x28},
+	{0xd457, CRL_REG_LEN_08BIT, 0x00},
+	{0xd458, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd459, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd45a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd45b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd45c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd45d, CRL_REG_LEN_08BIT, 0x63},
+	{0xd45e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd45f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd460, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd461, CRL_REG_LEN_08BIT, 0x84},
+	{0xd462, CRL_REG_LEN_08BIT, 0x00},
+	{0xd463, CRL_REG_LEN_08BIT, 0x00},
+	{0xd464, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd465, CRL_REG_LEN_08BIT, 0xa3},
+	{0xd466, CRL_REG_LEN_08BIT, 0x58},
+	{0xd467, CRL_REG_LEN_08BIT, 0x00},
+	{0xd468, CRL_REG_LEN_08BIT, 0xa4},
+	{0xd469, CRL_REG_LEN_08BIT, 0xc6},
+	{0xd46a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46b, CRL_REG_LEN_08BIT, 0xff},
+	{0xd46c, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd46d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd46e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd46f, CRL_REG_LEN_08BIT, 0x18},
+	{0xd470, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd471, CRL_REG_LEN_08BIT, 0x46},
+	{0xd472, CRL_REG_LEN_08BIT, 0x00},
+	{0xd473, CRL_REG_LEN_08BIT, 0x03},
+	{0xd474, CRL_REG_LEN_08BIT, 0x94},
+	{0xd475, CRL_REG_LEN_08BIT, 0x85},
+	{0xd476, CRL_REG_LEN_08BIT, 0x00},
+	{0xd477, CRL_REG_LEN_08BIT, 0x00},
+	{0xd478, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd479, CRL_REG_LEN_08BIT, 0x63},
+	{0xd47a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd47b, CRL_REG_LEN_08BIT, 0x98},
+	{0xd47c, CRL_REG_LEN_08BIT, 0xe0},
+	{0xd47d, CRL_REG_LEN_08BIT, 0x64},
+	{0xd47e, CRL_REG_LEN_08BIT, 0x18},
+	{0xd47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xd480, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd481, CRL_REG_LEN_08BIT, 0xff},
+	{0xd482, CRL_REG_LEN_08BIT, 0xff},
+	{0xd483, CRL_REG_LEN_08BIT, 0xf0},
+	{0xd484, CRL_REG_LEN_08BIT, 0xdc},
+	{0xd485, CRL_REG_LEN_08BIT, 0x05},
+	{0xd486, CRL_REG_LEN_08BIT, 0x18},
+	{0xd487, CRL_REG_LEN_08BIT, 0x00},
+	{0xd488, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd489, CRL_REG_LEN_08BIT, 0x68},
+	{0xd48a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48b, CRL_REG_LEN_08BIT, 0x01},
+	{0xd48c, CRL_REG_LEN_08BIT, 0xa5},
+	{0xd48d, CRL_REG_LEN_08BIT, 0x03},
+	{0xd48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd48f, CRL_REG_LEN_08BIT, 0xff},
+	{0xd490, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd491, CRL_REG_LEN_08BIT, 0x48},
+	{0xd492, CRL_REG_LEN_08BIT, 0x00},
+	{0xd493, CRL_REG_LEN_08BIT, 0x01},
+	{0xd494, CRL_REG_LEN_08BIT, 0x0f},
+	{0xd495, CRL_REG_LEN_08BIT, 0xff},
+	{0xd496, CRL_REG_LEN_08BIT, 0xff},
+	{0xd497, CRL_REG_LEN_08BIT, 0xea},
+	{0xd498, CRL_REG_LEN_08BIT, 0xb8},
+	{0xd499, CRL_REG_LEN_08BIT, 0xe8},
+	{0xd49a, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49b, CRL_REG_LEN_08BIT, 0x02},
+	{0xd49c, CRL_REG_LEN_08BIT, 0x18},
+	{0xd49d, CRL_REG_LEN_08BIT, 0x60},
+	{0xd49e, CRL_REG_LEN_08BIT, 0x00},
+	{0xd49f, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4a0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4a1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4a2, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4a3, CRL_REG_LEN_08BIT, 0x14},
+	{0xd4a4, CRL_REG_LEN_08BIT, 0x07},
+	{0xd4a5, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4a6, CRL_REG_LEN_08BIT, 0xe4},
+	{0xd4a7, CRL_REG_LEN_08BIT, 0x05},
+	{0xd4a8, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4a9, CRL_REG_LEN_08BIT, 0x83},
+	{0xd4aa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ab, CRL_REG_LEN_08BIT, 0x10},
+	{0xd4ac, CRL_REG_LEN_08BIT, 0x85},
+	{0xd4ad, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4ae, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4af, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b0, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4b1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b2, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4b3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b4, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4b5, CRL_REG_LEN_08BIT, 0x21},
+	{0xd4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4b7, CRL_REG_LEN_08BIT, 0x04},
+	{0xd4b8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4b9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ba, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4bb, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4bc, CRL_REG_LEN_08BIT, 0x9c},
+	{0xd4bd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4be, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4bf, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4c0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4c1, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4c2, CRL_REG_LEN_08BIT, 0x09},
+	{0xd4c3, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4c4, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4c5, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4c6, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4c7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4c8, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4c9, CRL_REG_LEN_08BIT, 0x60},
+	{0xd4ca, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4cb, CRL_REG_LEN_08BIT, 0x06},
+	{0xd4cc, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4cd, CRL_REG_LEN_08BIT, 0x63},
+	{0xd4ce, CRL_REG_LEN_08BIT, 0xc9},
+	{0xd4cf, CRL_REG_LEN_08BIT, 0xef},
+	{0xd4d0, CRL_REG_LEN_08BIT, 0xd8},
+	{0xd4d1, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4d2, CRL_REG_LEN_08BIT, 0x20},
+	{0xd4d3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4d5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4d7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4d8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4d9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4da, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4db, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4dc, CRL_REG_LEN_08BIT, 0x18},
+	{0xd4dd, CRL_REG_LEN_08BIT, 0x80},
+	{0xd4de, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4df, CRL_REG_LEN_08BIT, 0x01},
+	{0xd4e0, CRL_REG_LEN_08BIT, 0xa8},
+	{0xd4e1, CRL_REG_LEN_08BIT, 0x84},
+	{0xd4e2, CRL_REG_LEN_08BIT, 0x0a},
+	{0xd4e3, CRL_REG_LEN_08BIT, 0x12},
+	{0xd4e4, CRL_REG_LEN_08BIT, 0x8c},
+	{0xd4e5, CRL_REG_LEN_08BIT, 0x64},
+	{0xd4e6, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4e8, CRL_REG_LEN_08BIT, 0xbc},
+	{0xd4e9, CRL_REG_LEN_08BIT, 0x03},
+	{0xd4ea, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4eb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ec, CRL_REG_LEN_08BIT, 0x13},
+	{0xd4ed, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ee, CRL_REG_LEN_08BIT, 0xff},
+	{0xd4ef, CRL_REG_LEN_08BIT, 0xfe},
+	{0xd4f0, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f1, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f2, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f3, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f4, CRL_REG_LEN_08BIT, 0x44},
+	{0xd4f5, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f6, CRL_REG_LEN_08BIT, 0x48},
+	{0xd4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4f8, CRL_REG_LEN_08BIT, 0x15},
+	{0xd4f9, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fc, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4fe, CRL_REG_LEN_08BIT, 0x00},
+	{0xd4ff, CRL_REG_LEN_08BIT, 0x00},
+	{0xd500, CRL_REG_LEN_08BIT, 0x00},
+	{0xd501, CRL_REG_LEN_08BIT, 0x00},
+	{0xd502, CRL_REG_LEN_08BIT, 0x00},
+	{0xd503, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0e, CRL_REG_LEN_08BIT, 0x33},
+	{0x6f0f, CRL_REG_LEN_08BIT, 0x33},
+	{0x460e, CRL_REG_LEN_08BIT, 0x08},
+	{0x460f, CRL_REG_LEN_08BIT, 0x01},
+	{0x4610, CRL_REG_LEN_08BIT, 0x00},
+	{0x4611, CRL_REG_LEN_08BIT, 0x01},
+	{0x4612, CRL_REG_LEN_08BIT, 0x00},
+	{0x4613, CRL_REG_LEN_08BIT, 0x01},
+	{0x4605, CRL_REG_LEN_08BIT, 0x08},/*YUV 8bit*/
+	{0x4608, CRL_REG_LEN_08BIT, 0x00},
+	{0x4609, CRL_REG_LEN_08BIT, 0x08},
+	{0x6804, CRL_REG_LEN_08BIT, 0x00},
+	{0x6805, CRL_REG_LEN_08BIT, 0x06},
+	{0x6806, CRL_REG_LEN_08BIT, 0x00},
+	{0x5120, CRL_REG_LEN_08BIT, 0x00},
+	{0x3510, CRL_REG_LEN_08BIT, 0x00},
+	{0x3504, CRL_REG_LEN_08BIT, 0x00},
+	{0x6800, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0d, CRL_REG_LEN_08BIT, 0x0f},
+	{0x5000, CRL_REG_LEN_08BIT, 0xff},
+	{0x5001, CRL_REG_LEN_08BIT, 0xbf},
+	{0x5002, CRL_REG_LEN_08BIT, 0x7e},
+	{0x5003, CRL_REG_LEN_08BIT, 0x0c},
+	{0x503d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc450, CRL_REG_LEN_08BIT, 0x01},
+	{0xc452, CRL_REG_LEN_08BIT, 0x04},
+	{0xc453, CRL_REG_LEN_08BIT, 0x00},
+	{0xc454, CRL_REG_LEN_08BIT, 0x01},
+	{0xc455, CRL_REG_LEN_08BIT, 0x00},
+	{0xc456, CRL_REG_LEN_08BIT, 0x00},
+	{0xc457, CRL_REG_LEN_08BIT, 0x00},
+	{0xc458, CRL_REG_LEN_08BIT, 0x00},
+	{0xc459, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc45e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc45f, CRL_REG_LEN_08BIT, 0x01},
+	{0xc460, CRL_REG_LEN_08BIT, 0x01},
+	{0xc461, CRL_REG_LEN_08BIT, 0x01},
+	{0xc462, CRL_REG_LEN_08BIT, 0x01},
+	{0xc464, CRL_REG_LEN_08BIT, 0x88},
+	{0xc465, CRL_REG_LEN_08BIT, 0x00},
+	{0xc466, CRL_REG_LEN_08BIT, 0x8a},
+	{0xc467, CRL_REG_LEN_08BIT, 0x00},
+	{0xc468, CRL_REG_LEN_08BIT, 0x86},
+	{0xc469, CRL_REG_LEN_08BIT, 0x00},
+	{0xc46a, CRL_REG_LEN_08BIT, 0x40},
+	{0xc46b, CRL_REG_LEN_08BIT, 0x50},
+	{0xc46c, CRL_REG_LEN_08BIT, 0x30},
+	{0xc46d, CRL_REG_LEN_08BIT, 0x28},
+	{0xc46e, CRL_REG_LEN_08BIT, 0x60},
+	{0xc46f, CRL_REG_LEN_08BIT, 0x40},
+	{0xc47c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc47d, CRL_REG_LEN_08BIT, 0x38},
+	{0xc47e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc47f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc480, CRL_REG_LEN_08BIT, 0x00},
+	{0xc481, CRL_REG_LEN_08BIT, 0xff},
+	{0xc482, CRL_REG_LEN_08BIT, 0x00},
+	{0xc483, CRL_REG_LEN_08BIT, 0x40},
+	{0xc484, CRL_REG_LEN_08BIT, 0x00},
+	{0xc485, CRL_REG_LEN_08BIT, 0x18},
+	{0xc486, CRL_REG_LEN_08BIT, 0x00},
+	{0xc487, CRL_REG_LEN_08BIT, 0x18},
+	{0xc488, CRL_REG_LEN_08BIT, 0x20},
+	{0xc489, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x20},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48d, CRL_REG_LEN_08BIT, 0x04},
+	{0xc48e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc48f, CRL_REG_LEN_08BIT, 0x04},
+	{0xc490, CRL_REG_LEN_08BIT, 0x07},
+	{0xc492, CRL_REG_LEN_08BIT, 0x20},
+	{0xc493, CRL_REG_LEN_08BIT, 0x08},
+	{0xc498, CRL_REG_LEN_08BIT, 0x02},
+	{0xc499, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49a, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49b, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49c, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc49e, CRL_REG_LEN_08BIT, 0x02},
+	{0xc49f, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4a0, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4a1, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a2, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4a3, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a5, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4a6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4a8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4a9, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4aa, CRL_REG_LEN_08BIT, 0x0d},
+	{0xc4ab, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4ac, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4ad, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4b4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b5, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b6, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b7, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4b8, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4b9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4ba, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4be, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4bf, CRL_REG_LEN_08BIT, 0x33},
+	{0xc4c8, CRL_REG_LEN_08BIT, 0x03},
+	{0xc4c9, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4ca, CRL_REG_LEN_08BIT, 0x0e},
+	{0xc4cb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0xd8},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0xd8},
+	{0xc4d0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4d1, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4e0, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4e1, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4e2, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4e4, CRL_REG_LEN_08BIT, 0x10},
+	{0xc4e5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4e6, CRL_REG_LEN_08BIT, 0x30},
+	{0xc4e7, CRL_REG_LEN_08BIT, 0x40},
+	{0xc4e8, CRL_REG_LEN_08BIT, 0x50},
+	{0xc4e9, CRL_REG_LEN_08BIT, 0x60},
+	{0xc4ea, CRL_REG_LEN_08BIT, 0x70},
+	{0xc4eb, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4ec, CRL_REG_LEN_08BIT, 0x90},
+	{0xc4ed, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc4ee, CRL_REG_LEN_08BIT, 0xb0},
+	{0xc4ef, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc4f0, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc4f1, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc4f2, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc4f3, CRL_REG_LEN_08BIT, 0x80},
+	{0xc4f4, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f5, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4f6, CRL_REG_LEN_08BIT, 0x02},
+	{0xc4f7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4f8, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4f9, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc4fa, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fb, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4fd, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4fe, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4ff, CRL_REG_LEN_08BIT, 0x02},
+	{0xc500, CRL_REG_LEN_08BIT, 0x48},
+	{0xc501, CRL_REG_LEN_08BIT, 0x74},
+	{0xc502, CRL_REG_LEN_08BIT, 0x58},
+	{0xc503, CRL_REG_LEN_08BIT, 0x80},
+	{0xc504, CRL_REG_LEN_08BIT, 0x05},
+	{0xc505, CRL_REG_LEN_08BIT, 0x80},
+	{0xc506, CRL_REG_LEN_08BIT, 0x03},
+	{0xc507, CRL_REG_LEN_08BIT, 0x80},
+	{0xc508, CRL_REG_LEN_08BIT, 0x01},
+	{0xc509, CRL_REG_LEN_08BIT, 0xc0},
+	{0xc50a, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50b, CRL_REG_LEN_08BIT, 0xa0},
+	{0xc50c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50d, CRL_REG_LEN_08BIT, 0x2c},
+	{0xc50e, CRL_REG_LEN_08BIT, 0x01},
+	{0xc50f, CRL_REG_LEN_08BIT, 0x0a},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x00},
+	{0xc512, CRL_REG_LEN_08BIT, 0x4d},
+	{0xc513, CRL_REG_LEN_08BIT, 0x84},
+	{0xc514, CRL_REG_LEN_08BIT, 0x04},
+	{0xc515, CRL_REG_LEN_08BIT, 0x00},
+	{0xc518, CRL_REG_LEN_08BIT, 0x03},
+	{0xc519, CRL_REG_LEN_08BIT, 0x48},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x07},
+	{0xc51b, CRL_REG_LEN_08BIT, 0x70},
+	{0xc2e0, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e1, CRL_REG_LEN_08BIT, 0x51},
+	{0xc2e2, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2e3, CRL_REG_LEN_08BIT, 0xd6},
+	{0xc2e4, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2e5, CRL_REG_LEN_08BIT, 0x5e},
+	{0xc2e9, CRL_REG_LEN_08BIT, 0x01},
+	{0xc2ea, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2eb, CRL_REG_LEN_08BIT, 0x90},
+	{0xc2ed, CRL_REG_LEN_08BIT, 0x00},
+	{0xc2ee, CRL_REG_LEN_08BIT, 0x7a},
+	{0xc2ef, CRL_REG_LEN_08BIT, 0x64},
+	{0xc308, CRL_REG_LEN_08BIT, 0x00},
+	{0xc309, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30d, CRL_REG_LEN_08BIT, 0x01},
+	{0xc30e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc30f, CRL_REG_LEN_08BIT, 0x00},
+	{0xc310, CRL_REG_LEN_08BIT, 0x01},
+	{0xc311, CRL_REG_LEN_08BIT, 0x60},
+	{0xc312, CRL_REG_LEN_08BIT, 0xff},
+	{0xc313, CRL_REG_LEN_08BIT, 0x08},
+	{0xc314, CRL_REG_LEN_08BIT, 0x01},
+	{0xc315, CRL_REG_LEN_08BIT, 0x7f},
+	{0xc316, CRL_REG_LEN_08BIT, 0xff},
+	{0xc317, CRL_REG_LEN_08BIT, 0x0b},
+	{0xc318, CRL_REG_LEN_08BIT, 0x00},
+	{0xc319, CRL_REG_LEN_08BIT, 0x0c},
+	{0xc31a, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31b, CRL_REG_LEN_08BIT, 0xe0},
+	{0xc31c, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31d, CRL_REG_LEN_08BIT, 0x14},
+	{0xc31e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc31f, CRL_REG_LEN_08BIT, 0xc5},
+	{0xc320, CRL_REG_LEN_08BIT, 0xff},
+	{0xc321, CRL_REG_LEN_08BIT, 0x4b},
+	{0xc322, CRL_REG_LEN_08BIT, 0xff},
+	{0xc323, CRL_REG_LEN_08BIT, 0xf0},
+	{0xc324, CRL_REG_LEN_08BIT, 0xff},
+	{0xc325, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc326, CRL_REG_LEN_08BIT, 0x00},
+	{0xc327, CRL_REG_LEN_08BIT, 0x46},
+	{0xc328, CRL_REG_LEN_08BIT, 0xff},
+	{0xc329, CRL_REG_LEN_08BIT, 0xd2},
+	{0xc32a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32b, CRL_REG_LEN_08BIT, 0xe4},
+	{0xc32c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc32d, CRL_REG_LEN_08BIT, 0xbb},
+	{0xc32e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc32f, CRL_REG_LEN_08BIT, 0x61},
+	{0xc330, CRL_REG_LEN_08BIT, 0xff},
+	{0xc331, CRL_REG_LEN_08BIT, 0xf9},
+	{0xc332, CRL_REG_LEN_08BIT, 0x00},
+	{0xc333, CRL_REG_LEN_08BIT, 0xd9},
+	{0xc334, CRL_REG_LEN_08BIT, 0x00},
+	{0xc335, CRL_REG_LEN_08BIT, 0x2e},
+	{0xc336, CRL_REG_LEN_08BIT, 0x00},
+	{0xc337, CRL_REG_LEN_08BIT, 0xb1},
+	{0xc338, CRL_REG_LEN_08BIT, 0xff},
+	{0xc339, CRL_REG_LEN_08BIT, 0x64},
+	{0xc33a, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33b, CRL_REG_LEN_08BIT, 0xeb},
+	{0xc33c, CRL_REG_LEN_08BIT, 0xff},
+	{0xc33d, CRL_REG_LEN_08BIT, 0xe8},
+	{0xc33e, CRL_REG_LEN_08BIT, 0x00},
+	{0xc33f, CRL_REG_LEN_08BIT, 0x48},
+	{0xc340, CRL_REG_LEN_08BIT, 0xff},
+	{0xc341, CRL_REG_LEN_08BIT, 0xd0},
+	{0xc342, CRL_REG_LEN_08BIT, 0xff},
+	{0xc343, CRL_REG_LEN_08BIT, 0xed},
+	{0xc344, CRL_REG_LEN_08BIT, 0xff},
+	{0xc345, CRL_REG_LEN_08BIT, 0xad},
+	{0xc346, CRL_REG_LEN_08BIT, 0x00},
+	{0xc347, CRL_REG_LEN_08BIT, 0x66},
+	{0xc348, CRL_REG_LEN_08BIT, 0x01},
+	{0xc349, CRL_REG_LEN_08BIT, 0x00},
+	{0x6700, CRL_REG_LEN_08BIT, 0x04},
+	{0x6701, CRL_REG_LEN_08BIT, 0x7b},
+	{0x6702, CRL_REG_LEN_08BIT, 0xfd},
+	{0x6703, CRL_REG_LEN_08BIT, 0xf9},
+	{0x6704, CRL_REG_LEN_08BIT, 0x3d},
+	{0x6705, CRL_REG_LEN_08BIT, 0x71},
+	{0x6706, CRL_REG_LEN_08BIT, 0x78},
+	{0x6708, CRL_REG_LEN_08BIT, 0x05},
+	{0x6f06, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f07, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f0a, CRL_REG_LEN_08BIT, 0x6f},
+	{0x6f0b, CRL_REG_LEN_08BIT, 0x00},
+	{0x6f00, CRL_REG_LEN_08BIT, 0x03},
+	{0xc34c, CRL_REG_LEN_08BIT, 0x01},
+	{0xc34d, CRL_REG_LEN_08BIT, 0x00},
+	{0xc34e, CRL_REG_LEN_08BIT, 0x46},
+	{0xc34f, CRL_REG_LEN_08BIT, 0x55},
+	{0xc350, CRL_REG_LEN_08BIT, 0x00},
+	{0xc351, CRL_REG_LEN_08BIT, 0x40},
+	{0xc352, CRL_REG_LEN_08BIT, 0x00},
+	{0xc353, CRL_REG_LEN_08BIT, 0xff},
+	{0xc354, CRL_REG_LEN_08BIT, 0x04},
+	{0xc355, CRL_REG_LEN_08BIT, 0x08},
+	{0xc356, CRL_REG_LEN_08BIT, 0x01},
+	{0xc357, CRL_REG_LEN_08BIT, 0xef},
+	{0xc358, CRL_REG_LEN_08BIT, 0x30},
+	{0xc359, CRL_REG_LEN_08BIT, 0x01},
+	{0xc35a, CRL_REG_LEN_08BIT, 0x64},
+	{0xc35b, CRL_REG_LEN_08BIT, 0x46},
+	{0xc35c, CRL_REG_LEN_08BIT, 0x00},
+	{0x3621, CRL_REG_LEN_08BIT, 0x73},
+	{0x3702, CRL_REG_LEN_08BIT, 0x20},
+	{0x3703, CRL_REG_LEN_08BIT, 0x48},
+	{0x3704, CRL_REG_LEN_08BIT, 0x32},
+	{0x3800, CRL_REG_LEN_08BIT, 0x00},
+	{0x3801, CRL_REG_LEN_08BIT, 0x00},
+	{0x3802, CRL_REG_LEN_08BIT, 0x00},
+	{0x3803, CRL_REG_LEN_08BIT, 0xA4},
+	{0x3804, CRL_REG_LEN_08BIT, 0x00},
+	{0x3805, CRL_REG_LEN_08BIT, 0xFF},
+	{0x3806, CRL_REG_LEN_08BIT, 0x02},
+	{0x3807, CRL_REG_LEN_08BIT, 0x89},
+	{0x3808, CRL_REG_LEN_08BIT, 0x02},
+	{0x3809, CRL_REG_LEN_08BIT, 0x80},
+	{0x380a, CRL_REG_LEN_08BIT, 0x01},
+	{0x380b, CRL_REG_LEN_08BIT, 0xE0},
+	{0x380c, CRL_REG_LEN_08BIT, 0x04},
+	{0x380d, CRL_REG_LEN_08BIT, 0xAC},
+	{0x6e42, CRL_REG_LEN_08BIT, 0x05},
+	{0x6e43, CRL_REG_LEN_08BIT, 0x3A},
+	{0x3810, CRL_REG_LEN_08BIT, 0x00},
+	{0x3811, CRL_REG_LEN_08BIT, 0x08},
+	{0x3812, CRL_REG_LEN_08BIT, 0x00},
+	{0x3813, CRL_REG_LEN_08BIT, 0x02},
+	{0x381c, CRL_REG_LEN_08BIT, 0x00},
+	{0x381e, CRL_REG_LEN_08BIT, 0x00},
+	{0x381f, CRL_REG_LEN_08BIT, 0x0C},
+	{0x4001, CRL_REG_LEN_08BIT, 0x06},
+	{0x4004, CRL_REG_LEN_08BIT, 0x04},
+	{0x4050, CRL_REG_LEN_08BIT, 0x22},
+	{0x4051, CRL_REG_LEN_08BIT, 0x24},
+	{0x4605, CRL_REG_LEN_08BIT, 0x08},
+	{0x4606, CRL_REG_LEN_08BIT, 0x09},
+	{0x4607, CRL_REG_LEN_08BIT, 0x58},
+	{0xc488, CRL_REG_LEN_08BIT, 0x53},
+	{0xc489, CRL_REG_LEN_08BIT, 0x20},
+	{0xc48a, CRL_REG_LEN_08BIT, 0x53},
+	{0xc48b, CRL_REG_LEN_08BIT, 0x20},
+	{0xc4cc, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cd, CRL_REG_LEN_08BIT, 0xD8},
+	{0xc4ce, CRL_REG_LEN_08BIT, 0x04},
+	{0xc4cf, CRL_REG_LEN_08BIT, 0xD8},
+	{0xc510, CRL_REG_LEN_08BIT, 0x00},
+	{0xc511, CRL_REG_LEN_08BIT, 0x00},
+	{0xc512, CRL_REG_LEN_08BIT, 0x4D},
+	{0xc513, CRL_REG_LEN_08BIT, 0x84},
+	{0x5005, CRL_REG_LEN_08BIT, 0x08},
+	{0x3007, CRL_REG_LEN_08BIT, 0x01},
+	{0xc518, CRL_REG_LEN_08BIT, 0x05},
+	{0xc519, CRL_REG_LEN_08BIT, 0x3A},
+	{0xc51a, CRL_REG_LEN_08BIT, 0x04},
+	{0xc51b, CRL_REG_LEN_08BIT, 0xAC},
+	{0x5608, CRL_REG_LEN_08BIT, 0x15},
+	{0x3815, CRL_REG_LEN_08BIT, 0x8C},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x3042, CRL_REG_LEN_08BIT, 0xf0},
+	{0x302e, CRL_REG_LEN_08BIT, 0x00},
+	{0x301b, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301c, CRL_REG_LEN_08BIT, 0xf0},
+	{0x301a, CRL_REG_LEN_08BIT, 0xf0},
+	{0xceb0, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb1, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb2, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb3, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb4, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb5, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb6, CRL_REG_LEN_08BIT, 0x00},
+	{0xceb7, CRL_REG_LEN_08BIT, 0x00},
+	{0xc4bc, CRL_REG_LEN_08BIT, 0x01},
+	{0xc4bd, CRL_REG_LEN_08BIT, 0x60},
+};
+
+static struct crl_dynamic_register_access ov10635_h_flip_regs[] = {
+	{
+		.address = 0x381d,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0x3,
+	}
+};
+
+static struct crl_dynamic_register_access ov10635_v_flip_regs[] = {
+	{
+		.address = 0x381c,
+		.len = CRL_REG_LEN_08BIT | CRL_REG_READ_AND_UPDATE,
+		.ops_items = 0,
+		.ops = 0,
+		.mask = 0xc0,
+	}
+};
+
+/* Needed for acpi support for runtime detection */
+static struct crl_sensor_detect_config ov10635_sensor_detect_regset[] = {
+	{
+		.reg = { 0x300A, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 8,
+	},
+	{
+		.reg = { 0x300B, CRL_REG_LEN_08BIT, 0x000000ff },
+		.width = 8,
+	}
+};
+
+static struct crl_pll_configuration ov10635_pll_configurations[] = {
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 16,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 10,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	},
+	{
+		.input_clk = 24000000,
+		.op_sys_clk = 400000000,
+		.bitsperpixel = 20,
+		.pixel_rate_csi = 529000000,
+		.pixel_rate_pa = 529000000, /* pixel_rate = MIPICLK*2 *4/12 */
+		.csi_lanes = 4,
+		.comp_items = 0,
+		.ctrl_data = 0,
+		.pll_regs_items = 0,
+		.pll_regs = NULL,
+	}
+};
+
+static struct crl_subdev_rect_rep ov10635_1280_800_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	},
+};
+
+static struct crl_subdev_rect_rep ov10635_1280_720_rects_BT656[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 720,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 720,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 720,
+	},
+};
+
+static struct crl_subdev_rect_rep ov10635_640_480_rects[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 1280,
+		.out_rect.height = 800,
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.in_rect.left = 0,
+		.in_rect.top = 0,
+		.in_rect.width = 1280,
+		.in_rect.height = 800,
+		.out_rect.left = 0,
+		.out_rect.top = 0,
+		.out_rect.width = 640,
+		.out_rect.height = 480,
+	},
+};
+
+static struct crl_register_write_rep ov10635_powerup_regs[] = {
+	{OV10635_REG_RESET, CRL_REG_LEN_08BIT, 0x01},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+	{0x300c, CRL_REG_LEN_08BIT, 0x61},
+};
+
+static struct crl_register_write_rep ov10635_poweroff_regs[] = {
+	{OV10635_REG_RESET, CRL_REG_LEN_08BIT, 0x01},
+};
+
+static struct crl_power_seq_entity ov10635_power_items[] = {
+	{
+		.type = CRL_POWER_ETY_GPIO_FROM_PDATA,
+		.val = 0x33,
+		.undo_val = 0x22,
+	},
+};
+
+static struct crl_mode_rep ov10635_modes[] = {
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10635_1280_800_rects),
+		.sd_rects = ov10635_1280_800_rects,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 800,
+		.min_llp = 2250,
+		.min_fll = 1320,
+		.mode_regs_items = ARRAY_SIZE(ov10635_1280_800_YUV_HDR),
+		.mode_regs = ov10635_1280_800_YUV_HDR,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10635_1280_720_rects_BT656),
+		.sd_rects = ov10635_1280_720_rects_BT656,
+		.binn_hor = 1,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 1280,
+		.height = 720,
+		.min_llp = 2250,
+		.min_fll = 1320,
+		.mode_regs_items = ARRAY_SIZE(ov10635_1280_720_YUV_HDR_BT656),
+		.mode_regs = ov10635_1280_720_YUV_HDR_BT656,
+	},
+	{
+		.sd_rects_items = ARRAY_SIZE(ov10635_640_480_rects),
+		.sd_rects = ov10635_640_480_rects,
+		.binn_hor = 2,
+		.binn_vert = 1,
+		.scale_m = 1,
+		.width = 640,
+		.height = 480,
+		.min_llp = 2250,
+		.min_fll = 1320,
+		.mode_regs_items = ARRAY_SIZE(ov10635_640_480_YUV_HDR),
+		.mode_regs = ov10635_640_480_YUV_HDR,
+	},
+};
+
+static struct crl_sensor_subdev_config ov10635_sensor_subdevs[] = {
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_BINNER,
+		.name = "ov10635 binner",
+	},
+	{
+		.subdev_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.name = "ov10635 pixel array",
+	}
+};
+
+static struct crl_sensor_limits ov10635_sensor_limits = {
+	.x_addr_min = 0,
+	.y_addr_min = 0,
+	.x_addr_max = 1280,
+	.y_addr_max = 800,
+	.min_frame_length_lines = 240,
+	.max_frame_length_lines = 65535,
+	.min_line_length_pixels = 320,
+	.max_line_length_pixels = 32752,
+};
+
+static struct crl_flip_data ov10635_flip_configurations[] = {
+	{
+		.flip = CRL_FLIP_DEFAULT_NONE,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	},
+	{
+		.flip = CRL_FLIP_HFLIP_VFLIP,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+	}
+};
+
+static struct crl_register_write_rep ov10635_yuyv_regs[] = {
+	{0x4300, CRL_REG_LEN_08BIT, 0x38},
+};
+
+static struct crl_register_write_rep ov10635_uyvy_regs[] = {
+	{0x4300, CRL_REG_LEN_08BIT, 0x3a},
+};
+
+static struct crl_csi_data_fmt ov10635_crl_csi_data_fmt[] = {
+
+	{
+		.code = ICI_FORMAT_YUYV,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(ov10635_yuyv_regs),
+		.regs = ov10635_yuyv_regs,
+	},
+
+	{
+		.code = ICI_FORMAT_UYVY,
+		.pixel_order = CRL_PIXEL_ORDER_IGNORE,
+		.bits_per_pixel = 16,
+		.regs_items = ARRAY_SIZE(ov10635_uyvy_regs),
+		.regs = ov10635_uyvy_regs,
+	},
+};
+
+static struct crl_ctrl_data ov10635_ctrls[] = {
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_CTRL_SET_OP,
+		.context = SENSOR_IDLE,
+		.ctrl_id = ICI_EXT_SD_PARAM_ID_LINK_FREQ,
+		.name = "CTRL_ID_LINK_FREQ",
+		.type = CRL_CTRL_TYPE_MENU_INT,
+		.data.int_menu.def = 0,
+		.data.int_menu.max = 0,
+		.data.int_menu.menu = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = ICI_EXT_SD_PARAM_ID_PIXEL_RATE,
+		.name = "CTRL_ID_PIXEL_RATE_PA",
+		.type = CRL_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_BINNER,
+		.op_type = CRL_CTRL_GET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = ICI_EXT_SD_PARAM_ID_PIXEL_RATE,
+		.name = "CTRL_ID_PIXEL_RATE_CSI",
+		.type = CRL_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = INT_MAX,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+		.regs_items = 0,
+		.regs = 0,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	},
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = ICI_EXT_SD_PARAM_ID_HFLIP,
+		.name = "CTRL_ID_HFLIP",
+		.type = CRL_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	//	.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10635_h_flip_regs),
+		.regs = ov10635_h_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+	{
+		.sd_type = CRL_SUBDEV_TYPE_PIXEL_ARRAY,
+		.op_type = CRL_CTRL_SET_OP,
+		.context = SENSOR_POWERED_ON,
+		.ctrl_id = ICI_EXT_SD_PARAM_ID_VFLIP,
+		.name = "CTRL_ID_VFLIP",
+		.type = CRL_CTRL_TYPE_INTEGER,
+		.data.std_data.min = 0,
+		.data.std_data.max = 1,
+		.data.std_data.step = 1,
+		.data.std_data.def = 0,
+		.flags = 0,
+		.impact = CRL_IMPACTS_NO_IMPACT,
+	//	.ctrl = 0,
+		.regs_items = ARRAY_SIZE(ov10635_v_flip_regs),
+		.regs = ov10635_v_flip_regs,
+		.dep_items = 0,
+		.dep_ctrls = 0,
+	 },
+};
+
+struct crl_sensor_configuration ov10635_crl_configuration = {
+
+	.powerup_regs_items = ARRAY_SIZE(ov10635_powerup_regs),
+	.powerup_regs = ov10635_powerup_regs,
+
+	.poweroff_regs_items = ARRAY_SIZE(ov10635_poweroff_regs),
+	.poweroff_regs = ov10635_poweroff_regs,
+
+	.power_items = ARRAY_SIZE(ov10635_power_items),
+	.power_entities = ov10635_power_items,
+
+	.id_reg_items = ARRAY_SIZE(ov10635_sensor_detect_regset),
+	.id_regs = ov10635_sensor_detect_regset,
+
+	.subdev_items = ARRAY_SIZE(ov10635_sensor_subdevs),
+	.subdevs = ov10635_sensor_subdevs,
+
+	.pll_config_items = ARRAY_SIZE(ov10635_pll_configurations),
+	.pll_configs = ov10635_pll_configurations,
+
+	.sensor_limits = &ov10635_sensor_limits,
+
+	.modes_items = ARRAY_SIZE(ov10635_modes),
+	.modes = ov10635_modes,
+
+	.streamon_regs_items = 0,
+	.streamon_regs = 0,
+
+	.streamoff_regs_items = 0,
+	.streamoff_regs = 0,
+
+	.ctrl_items = ARRAY_SIZE(ov10635_ctrls),
+	.ctrl_bank = ov10635_ctrls,
+
+	.csi_fmts_items = ARRAY_SIZE(ov10635_crl_csi_data_fmt),
+	.csi_fmts = ov10635_crl_csi_data_fmt,
+
+	.flip_items = ARRAY_SIZE(ov10635_flip_configurations),
+	.flip_data = ov10635_flip_configurations,
+};
+
+#endif  /* __CRLMODULE_OV10635_CONFIGURATION_H_ */
diff --git a/drivers/media/i2c/crlmodule-lite/crlmodule-core.c b/drivers/media/i2c/crlmodule-lite/crlmodule-core.c
index 59896f4..efc0015 100644
--- a/drivers/media/i2c/crlmodule-lite/crlmodule-core.c
+++ b/drivers/media/i2c/crlmodule-lite/crlmodule-core.c
@@ -86,7 +86,7 @@ static int __crlmodule_get_crl_ctrl_index(struct crl_sensor *sensor,
  * Finds the value of a specific ctrl based on the ctrl-id
  */
 static int __crlmodule_get_param_value(struct crl_sensor *sensor,
-				      u32 id, u32 *val)
+					  u32 id, u32 *val)
 {
 	struct i2c_client *client = sensor->src->sd.client;
 	unsigned int i;
@@ -121,8 +121,8 @@ static int __crlmodule_get_param_value(struct crl_sensor *sensor,
 
 
 	dev_dbg(&client->dev, "%s ctrl_id: 0x%x desc: %s val: %d\n",
-			       __func__, id,
-			       sensor->ctrl_bank[i].name, *val);
+				   __func__, id,
+				   sensor->ctrl_bank[i].name, *val);
 	return 0;
 }
 
@@ -145,8 +145,8 @@ static struct crl_ctrl_data *__crlmodule_get_ctrl(
  * Grab / Release controls based on the ctrl update context
  */
 static void __crlmodule_enable_param(struct crl_sensor *sensor,
-				     enum crl_ctrl_update_context ctxt,
-				     bool enable)
+					 enum crl_ctrl_update_context ctxt,
+					 bool enable)
 {
 	struct crl_ctrl_data *crl_ctrl;
 	unsigned int i;
@@ -207,7 +207,7 @@ static int __crlmodule_update_pll_index(struct crl_sensor *sensor,
 	struct i2c_client *client = sensor->src->sd.client;
 	const struct crl_pll_configuration *pll_config;
 	const struct crl_csi_data_fmt *fmts =
-		     &sensor->sensor_ds->csi_fmts[sensor->fmt_index];
+			 &sensor->sensor_ds->csi_fmts[sensor->fmt_index];
 	unsigned int i;
 	u32 link_freq = 0;
 	
@@ -249,14 +249,14 @@ static int __crlmodule_update_pll_index(struct crl_sensor *sensor,
 
 		/* Check if there are any dynamic compare items */
 		if (sensor->ext_ctrl_impacts_pll_selection &&
-		    !__crlmodule_compare_ctrl_specific_data(sensor,
-						     pll_config->comp_items,
-						     pll_config->ctrl_data))
+			!__crlmodule_compare_ctrl_specific_data(sensor,
+							 pll_config->comp_items,
+							 pll_config->ctrl_data))
 			continue;
 
 		/* Found PLL index */
 		dev_dbg(&client->dev, "%s Found PLL index: %d for freq: %d\n",
-				      __func__, i, link_freq);
+					  __func__, i, link_freq);
 
 		sensor->pll_index = i;
 
@@ -267,7 +267,7 @@ static int __crlmodule_update_pll_index(struct crl_sensor *sensor,
 	}
 
 	dev_err(&client->dev, "%s no configuration found for freq: %d\n",
-			      __func__, link_freq);
+				  __func__, link_freq);
 	return -EINVAL;
 }
 
@@ -335,8 +335,8 @@ static void __crlmodule_dep_ctrl_perform_action(
  * Parse the dynamic entity based on the Operand type
  */
 static int __crlmodule_parse_dynamic_entity(struct crl_sensor *sensor,
-					    struct crl_dynamic_entity entity,
-					    u32 *val)
+						struct crl_dynamic_entity entity,
+						u32 *val)
 {
 	switch (entity.entity_type) {
 	case CRL_DYNAMIC_VAL_OPERAND_TYPE_CONST:
@@ -344,7 +344,7 @@ static int __crlmodule_parse_dynamic_entity(struct crl_sensor *sensor,
 		return 0;
 	case CRL_DYNAMIC_VAL_OPERAND_TYPE_VAR_REF:
 		return __crlmodule_get_variable_ref(sensor,
-						    entity.entity_val, val);
+							entity.entity_val, val);
 	case CRL_DYNAMIC_VAL_OPERAND_TYPE_CTRL_VAL:
 		return __crlmodule_get_param_value(sensor,
 						  entity.entity_val, val);
@@ -462,8 +462,8 @@ static int __crlmodule_update_dynamic_regs(struct crl_sensor *sensor,
 
 		/* Get the value associated with the dynamic entity */
 		ret = __crlmodule_calc_dynamic_entity_values(sensor,
-							     reg->ops_items,
-							     reg->ops, &val_t);
+								 reg->ops_items,
+								 reg->ops, &val_t);
 		if (ret)
 			return ret;
 
@@ -497,8 +497,8 @@ static int __crlmodule_handle_dependency_ctrl(
 	int ret;
 
 	dev_dbg(&client->dev, "%s ctrl_id: 0x%x dependency controls: %d\n",
-			       __func__, crl_ctrl->ctrl_id,
-			       crl_ctrl->dep_items);
+				   __func__, crl_ctrl->ctrl_id,
+				   crl_ctrl->dep_items);
 
 	for (i = 0; i < crl_ctrl->dep_items; i++) {
 		dep_prov = &crl_ctrl->dep_ctrls[i];
@@ -512,14 +512,14 @@ static int __crlmodule_handle_dependency_ctrl(
 						 &dep_val);
 		if (ret) {
 			dev_err(&client->dev, "%s ctrl_id: 0x%x not found\n",
-					       __func__, dep_prov->ctrl_id);
+						   __func__, dep_prov->ctrl_id);
 			/* TODO! Shoud continue? */
 			continue;
 		}
 
 		/* Perform the action */
 		__crlmodule_dep_ctrl_perform_action(sensor, dep_prov, val,
-						    &dep_val);
+							&dep_val);
 
 		/* if this is dependency control, update the register */
 		if (dep_prov->action_type ==
@@ -564,7 +564,7 @@ static int crlmodule_get_fmt_index(struct crl_sensor *sensor,
 	}
 
 	dev_err(&client->dev, "%s no supported format for order: %d bpp: %d\n",
-			      __func__, pixel_order, bpp);
+				  __func__, pixel_order, bpp);
 
 	return -EINVAL;
 }
@@ -582,7 +582,7 @@ static int __crlmodule_update_flip_info(struct crl_sensor *sensor,
 	int i, ret;
 
 	dev_dbg(&client->dev, "%s current flip_info: %d curr index: %d\n",
-			       __func__, flip_info, sensor->fmt_index);
+				   __func__, flip_info, sensor->fmt_index);
 
 	switch (param->id) {
 	case ICI_EXT_SD_PARAM_ID_HFLIP:
@@ -596,7 +596,7 @@ static int __crlmodule_update_flip_info(struct crl_sensor *sensor,
 	}
 
 	dev_dbg(&client->dev, "%s flip success new flip_info: %d\n",
-			       __func__, flip_info);
+				   __func__, flip_info);
 
 	/* First check if the module actually supports any pixelorder changes */
 	for (i = 0; i < sensor->sensor_ds->flip_items; i++) {
@@ -608,7 +608,7 @@ static int __crlmodule_update_flip_info(struct crl_sensor *sensor,
 
 	if (i >= sensor->sensor_ds->flip_items) {
 		dev_err(&client->dev, "%s flip not supported %d\n",
-				      __func__, flip_info);
+					  __func__, flip_info);
 		return -EINVAL;
 	}
 
@@ -619,7 +619,7 @@ static int __crlmodule_update_flip_info(struct crl_sensor *sensor,
 	i = crlmodule_get_fmt_index(sensor, new_order, bpp);
 	if (i < 0) {
 		dev_err(&client->dev, "%s no format found order: %d bpp: %d\n",
-				      __func__, new_order, bpp);
+					  __func__, new_order, bpp);
 		return -EINVAL;
 	}
 
@@ -634,7 +634,7 @@ static int __crlmodule_update_flip_info(struct crl_sensor *sensor,
 	sensor->flip_info = flip_info;
 
 	dev_dbg(&client->dev, "%s flip success flip: %d new fmt index: %d\n",
-			      __func__, flip_info, i);
+				  __func__, flip_info, i);
 
 	return 0;
 }
@@ -667,11 +667,11 @@ static int __crlmodule_update_blanking(struct crl_sensor *sensor,
 	switch (param->id) {
 	case ICI_EXT_SD_PARAM_ID_HBLANK:
 		val = sensor->pixel_array->crop[CRL_PA_PAD_SRC].width +
-		      param->val;
+			  param->val;
 		break;
 	case ICI_EXT_SD_PARAM_ID_VBLANK:
 		val = sensor->pixel_array->crop[CRL_PA_PAD_SRC].height +
-		      param->val;
+			  param->val;
 		break;
 	default:
 		return -EINVAL;
@@ -701,7 +701,7 @@ static struct crl_ctrl_data *__crlmodule_find_crlctrl(
 	for (i = 0; i < sensor->sensor_ds->ctrl_items; i++) {
 		crl_ctrl = &sensor->ctrl_bank[i];
 		if (crl_ctrl->param.sd == param->sd &&
-		    crl_ctrl->ctrl_id == param->id)
+			crl_ctrl->ctrl_id == param->id)
 			return crl_ctrl;
 	}
 
@@ -716,7 +716,7 @@ static int crlmodule_set_param(struct ici_ext_sd_param *param)
 	int ret = 0;
 
 	dev_dbg(&client->dev, "%s id:%d val:%d\n", __func__, param->id,
-			      param->val);
+				  param->val);
 
 	/*
 	 * Need to find the corresponding crlmodule wrapper for this param.
@@ -724,23 +724,23 @@ static int crlmodule_set_param(struct ici_ext_sd_param *param)
 	crl_ctrl = __crlmodule_find_crlctrl(sensor, param);
 	if (!crl_ctrl) {
 		dev_err(&client->dev, "%s ctrl :0x%x not supported\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 
 	dev_dbg(&client->dev, "%s id:0x%x name:%s\n", __func__, param->id,
-			      crl_ctrl->name);
+				  crl_ctrl->name);
 
 	if (!crl_ctrl->enabled ||
 		crl_ctrl->flags & CRL_CTRL_FLAG_READ_ONLY) {
 		dev_err(&client->dev, "%s Control id:0x%x is not writeable\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 
 	if (param->type != ICI_EXT_SD_PARAM_TYPE_INT32) {
 		dev_err(&client->dev, "%s Control id:0x%x only INT32 is supported\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 
@@ -776,7 +776,7 @@ static int crlmodule_set_param(struct ici_ext_sd_param *param)
 	 * "self" and update the value accordingly now
 	 */
 	__crlmodule_handle_dependency_ctrl(sensor, crl_ctrl, &param->val,
-				     CRL_DEP_CTRL_ACTION_TYPE_SELF);
+					 CRL_DEP_CTRL_ACTION_TYPE_SELF);
 
 	/* Handle specific controls */
 	switch (param->id) {
@@ -818,7 +818,7 @@ static int crlmodule_set_param(struct ici_ext_sd_param *param)
 	 */
 	if (!ret && crl_ctrl)
 		__crlmodule_handle_dependency_ctrl(sensor, crl_ctrl, &param->val,
-					     CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL);
+						 CRL_DEP_CTRL_ACTION_TYPE_DEP_CTRL);
 
 	return ret;
 }
@@ -836,16 +836,16 @@ static int crlmodule_get_param(struct ici_ext_sd_param *param)
 	crl_ctrl = __crlmodule_find_crlctrl(sensor, param);
 	if (!crl_ctrl) {
 		dev_err(&client->dev, "%s ctrl :0x%x not supported\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 
 	dev_dbg(&client->dev, "%s id:0x%x name:%s\n", __func__, param->id,
-			      crl_ctrl->name);
+				  crl_ctrl->name);
 
 	if (crl_ctrl->flags & CRL_CTRL_FLAG_WRITE_ONLY) {
 		dev_err(&client->dev, "%s Control id:0x%x is not readable\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 	
@@ -878,8 +878,8 @@ static int crlmodule_get_param(struct ici_ext_sd_param *param)
 	reg = &crl_ctrl->regs[0];
 
 	/* Get the value associated with the dynamic entity */
-	return  __crlmodule_calc_dynamic_entity_values(sensor, reg->ops_items,
-						       reg->ops, &param->val);
+	return	__crlmodule_calc_dynamic_entity_values(sensor, reg->ops_items,
+							   reg->ops, &param->val);
 }
 
 static int crlmodule_get_menu_item(
@@ -892,13 +892,13 @@ static int crlmodule_get_menu_item(
 	crl_ctrl = __crlmodule_find_crlctrl(sensor, param);
 	if (!crl_ctrl) {
 		dev_err(&client->dev, "%s ctrl :0x%x not supported\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 
 	if (idx > crl_ctrl->max) {
 		dev_err(&client->dev, "%s Control id:0x%x has invalid index %u\n",
-				      __func__, param->id, idx);
+					  __func__, param->id, idx);
 		return -EINVAL;
 	}
 	switch (crl_ctrl->type)
@@ -921,7 +921,7 @@ static int crlmodule_get_menu_item(
 		break;
 	default:
 		dev_err(&client->dev, "%s Control id:0x%x does not have a menu\n",
-				      __func__, param->id);
+					  __func__, param->id);
 		return -EINVAL;
 	}
 	return 0;
@@ -959,7 +959,7 @@ static int __crlmodule_init_link_freq_ctrl_menu(
 		 */
 		for (j = 0; j < items && !dup; j++)
 			dup = (sensor->link_freq_menu[j] ==
-			       sensor->sensor_ds->pll_configs[i].op_sys_clk);
+				   sensor->sensor_ds->pll_configs[i].op_sys_clk);
 		if (dup)
 			continue;
 
@@ -1032,13 +1032,13 @@ static int crlmodule_init_controls(struct crl_sensor *sensor)
 			(crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
 			 crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER)) {
 			rval = __crlmodule_init_link_freq_ctrl_menu(sensor,
-								    crl_ctrl);
+									crl_ctrl);
 			if (rval)
 				return rval;
 		}
 	}
 	dev_dbg(&client->dev, "%s pa_ctrls: %d src_ctrls: %d\n", __func__,
-			       pa_ctrls, src_ctrls);
+				   pa_ctrls, src_ctrls);
 	for (i = 0; i < sensor->sensor_ds->ctrl_items; i++) {
 		crl_ctrl = &sensor->ctrl_bank[i];
 		switch (crl_ctrl->type) {
@@ -1072,27 +1072,27 @@ static int crlmodule_init_controls(struct crl_sensor *sensor)
 		 * Blank controls are disabled if framesize controls exists.
 		 */
 		if (crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_FRAME_LENGTH_LINES ||
-		    crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_LINE_LENGTH_PIXELS)
-		    sensor->blanking_ctrl_not_use = 1;
+			crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_LINE_LENGTH_PIXELS)
+			sensor->blanking_ctrl_not_use = 1;
 
 		if (crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_SENSOR_MODE)
 			sensor->direct_mode_in_use = 1;
 
 		/* Save mandatory control references - link_freq in src sd */
 		if (crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_LINK_FREQ &&
-		    (crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
-		     crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER))
-		     sensor->link_freq = crl_ctrl;
+			(crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
+			 crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER))
+			 sensor->link_freq = crl_ctrl;
 
 		/* Save mandatory control references - pixel_rate_pa PA sd */
 		if (crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_PIXEL_RATE &&
-		    crl_ctrl->sd_type == CRL_SUBDEV_TYPE_PIXEL_ARRAY)
+			crl_ctrl->sd_type == CRL_SUBDEV_TYPE_PIXEL_ARRAY)
 			sensor->pixel_rate_pa = crl_ctrl;
 
 		/* Save mandatory control references - pixel_rate_csi src sd */
 		if (crl_ctrl->ctrl_id == ICI_EXT_SD_PARAM_ID_PIXEL_RATE &&
-		    (crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
-		     crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER))
+			(crl_ctrl->sd_type == CRL_SUBDEV_TYPE_SCALER ||
+			 crl_ctrl->sd_type == CRL_SUBDEV_TYPE_BINNER))
 			sensor->pixel_rate_csi = crl_ctrl;
 
 		dev_dbg(&client->dev,
@@ -1105,8 +1105,8 @@ static int crlmodule_init_controls(struct crl_sensor *sensor)
 
 
 static bool __crlmodule_rect_matches(struct i2c_client *client,
-				     const struct ici_rect *const rect1,
-				     const struct ici_rect *const rect2)
+					 const struct ici_rect *const rect1,
+					 const struct ici_rect *const rect2)
 {
 	dev_dbg(&client->dev, "%s rect1 l:%d t:%d w:%d h:%d\n", __func__,
 		rect1->left, rect1->top, rect1->width, rect1->height);
@@ -1120,7 +1120,7 @@ static bool __crlmodule_rect_matches(struct i2c_client *client,
 }
 
 static int __crlmodule_update_hblank(struct crl_sensor *sensor,
-				      struct crl_ctrl_data *hblank)
+					  struct crl_ctrl_data *hblank)
 {
 	const struct crl_mode_rep *mode = sensor->current_mode;
 	const struct crl_sensor_limits *limits = sensor->sensor_ds->sensor_limits;
@@ -1148,7 +1148,7 @@ static int __crlmodule_update_hblank(struct crl_sensor *sensor,
 }
 
 static int __crlmodule_update_vblank(struct crl_sensor *sensor,
-				      struct crl_ctrl_data *vblank)
+					  struct crl_ctrl_data *vblank)
 {
 	const struct crl_mode_rep *mode = sensor->current_mode;
 	const struct crl_sensor_limits *limits = sensor->sensor_ds->sensor_limits;
@@ -1229,17 +1229,17 @@ static void crlmodule_update_mode_bysel(struct crl_sensor *sensor)
 	unsigned int i;
 
 	dev_dbg(&client->dev, "%s look for w: %d, h: %d, in [%d] modes\n",
-			      __func__, sensor->src->crop[CRL_PAD_SRC].width,
-			       sensor->src->crop[CRL_PAD_SRC].height,
-			       sensor->sensor_ds->modes_items);
+				  __func__, sensor->src->crop[CRL_PAD_SRC].width,
+				   sensor->src->crop[CRL_PAD_SRC].height,
+				   sensor->sensor_ds->modes_items);
 
 	for (i = 0; i < sensor->sensor_ds->modes_items; i++) {
 		this = &sensor->sensor_ds->modes[i];
 
 		dev_dbg(&client->dev, "%s check mode list[%d] w: %d, h: %d\n",
-				      __func__, i, this->width, this->height);
+					  __func__, i, this->width, this->height);
 		if (this->width != sensor->src->crop[CRL_PAD_SRC].width ||
-		    this->height != sensor->src->crop[CRL_PAD_SRC].height)
+			this->height != sensor->src->crop[CRL_PAD_SRC].height)
 			continue;
 
 		if (sensor->pixel_array) {
@@ -1251,16 +1251,16 @@ static void crlmodule_update_mode_bysel(struct crl_sensor *sensor)
 		}
 		if (sensor->binner) {
 			dev_dbg(&client->dev, "%s binning hor: %d vs. %d\n",
-					      __func__,
-					      sensor->binning_horizontal,
-					      this->binn_hor);
+						  __func__,
+						  sensor->binning_horizontal,
+						  this->binn_hor);
 			if (sensor->binning_horizontal != this->binn_hor)
 				continue;
 
 			dev_dbg(&client->dev, "%s binning vert: %d vs. %d\n",
-					      __func__,
-					      sensor->binning_vertical,
-					      this->binn_vert);
+						  __func__,
+						  sensor->binning_vertical,
+						  this->binn_vert);
 			if (sensor->binning_vertical != this->binn_vert)
 				continue;
 
@@ -1279,8 +1279,8 @@ static void crlmodule_update_mode_bysel(struct crl_sensor *sensor)
 
 		if (sensor->scaler) {
 			dev_dbg(&client->dev, "%s scaler scale_m %d vs. %d\n",
-					      __func__, sensor->scale_m,
-					      this->scale_m);
+						  __func__, sensor->scale_m,
+						  this->scale_m);
 			if (sensor->scale_m != this->scale_m)
 				continue;
 
@@ -1299,9 +1299,9 @@ static void crlmodule_update_mode_bysel(struct crl_sensor *sensor)
 
 		/* Check if there are any dynamic compare items */
 		if (sensor->ext_ctrl_impacts_mode_selection &&
-		    !__crlmodule_compare_ctrl_specific_data(sensor,
-							    this->comp_items,
-							    this->ctrl_data))
+			!__crlmodule_compare_ctrl_specific_data(sensor,
+								this->comp_items,
+								this->ctrl_data))
 			continue;
 
 		/* Found a perfect match! */
@@ -1729,10 +1729,10 @@ static int crlmodule_set_format(
 	struct ici_rect *crops[CRL_PADS];
 
 	dev_dbg(&client->dev, "%s sd_name: %s pad: %d w: %d, h: %d code: 0x%x",
-			       __func__, node->name, pff->pad.pad_idx,
-			       pff->ffmt.width,
-			       pff->ffmt.height,
-			       pff->ffmt.pixelformat);
+				   __func__, node->name, pff->pad.pad_idx,
+				   pff->ffmt.width,
+				   pff->ffmt.height,
+				   pff->ffmt.pixelformat);
 
 	mutex_lock(&sensor->mutex);
 
@@ -1753,7 +1753,7 @@ static int crlmodule_set_format(
 
 			if (idx < 0) {
 				dev_err(&client->dev, "%s invalid format\n",
-						       __func__);
+							   __func__);
 				mutex_unlock(&sensor->mutex);
 				return -EINVAL;
 			}
@@ -1806,27 +1806,27 @@ static int crlmodule_set_selection(
 	int ret;
 
 	dev_dbg(&client->dev, "%s sd_name: %s sel w: %d, h: %d",
-			       __func__, node->name, ps->rect.width,
-			       ps->rect.height);
+				   __func__, node->name, ps->rect.width,
+				   ps->rect.height);
 
 	ret = __crlmodule_sel_supported(subdev, ps->pad.pad_idx,
 		ps->sel_type);
 	if (ret) {
 		dev_dbg(&client->dev,
 			"%s sd_name: %s w: %d, h: %d not supported",
-			       __func__, node->name, ps->rect.width,
-			       ps->rect.height);
+				   __func__, node->name, ps->rect.width,
+				   ps->rect.height);
 		return ret;
 	}
 
 	mutex_lock(&sensor->mutex);
 
 	ps->rect.width = max_t(unsigned int,
-			     sensor->sensor_ds->sensor_limits->x_addr_min,
-			     ps->rect.width);
+				 sensor->sensor_ds->sensor_limits->x_addr_min,
+				 ps->rect.width);
 	ps->rect.height = max_t(unsigned int,
-			      sensor->sensor_ds->sensor_limits->y_addr_min,
-			      ps->rect.height);
+				  sensor->sensor_ds->sensor_limits->y_addr_min,
+				  ps->rect.height);
 	switch (ps->sel_type) {
 	case ICI_EXT_SEL_TYPE_CROP:
 		ret = crlmodule_set_crop(subdev, ps->pad.pad_idx,
@@ -1853,8 +1853,8 @@ static int crlmodule_start_streaming(struct crl_sensor *sensor)
 	int rval;
 
 	dev_dbg(&client->dev, "%s start streaming pll_idx: %d fmt_idx: %d\n",
-			      __func__, sensor->pll_index,
-			      sensor->fmt_index);
+				  __func__, sensor->pll_index,
+				  sensor->fmt_index);
 
 	pll = &sensor->sensor_ds->pll_configs[sensor->pll_index];
 	fmt = &sensor->sensor_ds->csi_fmts[sensor->fmt_index];
@@ -1897,8 +1897,8 @@ static int crlmodule_start_streaming(struct crl_sensor *sensor)
 static int crlmodule_stop_streaming(struct crl_sensor *sensor)
 {
 	return crlmodule_write_regs(sensor,
-				    sensor->sensor_ds->streamoff_regs,
-				    sensor->sensor_ds->streamoff_regs_items);
+					sensor->sensor_ds->streamoff_regs,
+					sensor->sensor_ds->streamoff_regs_items);
 }
 
 static int crlmodule_set_stream(
@@ -2012,8 +2012,8 @@ static int crlmodule_identify_module(
  * This function executes the initialisation routines after the power on
  * is successfully completed. Following operations are done
  *
- *    Initiases registers after sensor power up - if any such list is configured
- *    Ctrl handler framework intialisation
+ *	  Initiases registers after sensor power up - if any such list is configured
+ *	  Ctrl handler framework intialisation
  */
 static int crlmodule_run_poweron_init(struct crl_sensor *sensor)
 {
@@ -2021,14 +2021,14 @@ static int crlmodule_run_poweron_init(struct crl_sensor *sensor)
 	int rval;
 
 	dev_dbg(&client->dev, "%s set power up registers: %d\n",
-			       __func__, sensor->sensor_ds->powerup_regs_items);
+				   __func__, sensor->sensor_ds->powerup_regs_items);
 
 	/* Write the power up registers */
 	rval = crlmodule_write_regs(sensor, sensor->sensor_ds->powerup_regs,
-				    sensor->sensor_ds->powerup_regs_items);
+					sensor->sensor_ds->powerup_regs_items);
 	if (rval) {
 		dev_err(&client->dev, "%s failed to set powerup registers\n",
-				      __func__);
+					  __func__);
 		return rval;
 	}
 
@@ -2081,7 +2081,18 @@ static void crlmodule_undo_poweron_entities(
 						   entity->undo_val);
 			break;
 		case CRL_POWER_ETY_GPIO_CUSTOM:
-			gpio_set_value(entity->ent_number, entity->undo_val);
+			if (entity->gpiod_priv) {
+				if (gpiod_cansleep(entity->gpiod_priv))
+					gpiod_set_raw_value_cansleep(
+						entity->gpiod_priv,
+						entity->undo_val);
+				else
+					gpiod_set_raw_value(entity->gpiod_priv,
+							entity->undo_val);
+			} else {
+				gpio_set_value(entity->ent_number,
+					entity->undo_val);
+			}
 			break;
 		case CRL_POWER_ETY_REGULATOR_FRAMEWORK:
 			regulator_disable(entity->regulator_priv);
@@ -2090,7 +2101,8 @@ static void crlmodule_undo_poweron_entities(
 			clk_disable_unprepare(sensor->xclk);
 			break;
 		default:
-			dev_err(&client->dev, "%s Invalid power type\n", __func__);
+			dev_err(&client->dev, "%s Invalid power type\n",
+					__func__);
 			break;
 		}
 
@@ -2106,6 +2118,7 @@ static int __crlmodule_powerup_sequence(struct crl_sensor *sensor)
 	unsigned idx;
 	int rval;
 
+	dev_dbg(&client->dev, "%s platform_data->xshutdown: %d\n", __func__, sensor->platform_data->xshutdown);
 	for (idx = 0; idx < sensor->sensor_ds->power_items; idx++) {
 		entity = &sensor->pwr_entity[idx];
 		dev_dbg(&client->dev, "%s power type %d index %d\n",
@@ -2113,36 +2126,52 @@ static int __crlmodule_powerup_sequence(struct crl_sensor *sensor)
 
 		switch (entity->type) {
 		case CRL_POWER_ETY_GPIO_FROM_PDATA:
-			gpio_set_value(sensor->platform_data->xshutdown, entity->val);
+			gpio_set_value(sensor->platform_data->xshutdown,
+					entity->val);
 			break;
 		case CRL_POWER_ETY_GPIO_CUSTOM:
-			gpio_set_value(entity->ent_number, entity->val);
+			if (entity->gpiod_priv) {
+				if (gpiod_cansleep(entity->gpiod_priv))
+					gpiod_set_raw_value_cansleep(
+						entity->gpiod_priv,
+						entity->val);
+				else
+					gpiod_set_raw_value(entity->gpiod_priv,
+								entity->val);
+			} else {
+				gpio_set_value(entity->ent_number, entity->val);
+			}
 			break;
 		case CRL_POWER_ETY_REGULATOR_FRAMEWORK:
 			rval = regulator_enable(entity->regulator_priv);
 			if (rval) {
-				dev_err(&client->dev, "Failed to enable regulator: %d\n",
-						rval);
+				dev_err(&client->dev,
+					"Failed to enable regulator: %d\n",
+					rval);
 				devm_regulator_put(entity->regulator_priv);
 				entity->regulator_priv = NULL;
 				goto error;
 			}
 			break;
 		case CRL_POWER_ETY_CLK_FRAMEWORK:
-			rval = clk_set_rate(sensor->xclk, sensor->platform_data->ext_clk);
+			rval = clk_set_rate(sensor->xclk,
+					sensor->platform_data->ext_clk);
 			if (rval < 0) {
 				dev_err(&client->dev,
 				"unable to set clock freq to %u\n",
 				sensor->platform_data->ext_clk);
 				goto error;
 			}
-			if (clk_get_rate(sensor->xclk) != sensor->platform_data->ext_clk)
+			if (clk_get_rate(sensor->xclk) !=
+					sensor->platform_data->ext_clk)
 					dev_warn(&client->dev,
-						"warning: unable to set accurate clock freq %u\n",
+						"warning: unable to set \
+						accurate clock freq %u\n",
 						sensor->platform_data->ext_clk);
 			rval = clk_prepare_enable(sensor->xclk);
 			if (rval) {
-				dev_err(&client->dev, "Failed to enable clock: %d\n", rval);
+				dev_err(&client->dev, "Failed to enable \
+						clock: %d\n", rval);
 				goto error;
 			}
 			break;
@@ -2156,6 +2185,7 @@ static int __crlmodule_powerup_sequence(struct crl_sensor *sensor)
 		if (entity->delay)
 			usleep_range(entity->delay, entity->delay + 10);
 	}
+
 	return 0;
 error:
 	dev_err(&client->dev, "Error:Power sequece failed\n");
@@ -2216,6 +2246,7 @@ static int crlmodule_init_subdevs(
 	struct ici_ext_subdev *subdev)
 {
 	struct crl_sensor *sensor = to_crlmodule_sensor(subdev);
+	struct crlmodule_lite_platform_data *platform_data = sensor->platform_data;
 	struct i2c_client *client = sensor->src->sd.client;
 	struct crl_subdev *prev_sd = NULL;
 	int i = 0;
@@ -2231,21 +2262,21 @@ static int crlmodule_init_subdevs(
 	 * it must be the first sd.
 	 */
 	if (sensor->sensor_ds->subdevs[i].subdev_type
-	    == CRL_SUBDEV_TYPE_SCALER) {
+		== CRL_SUBDEV_TYPE_SCALER) {
 		sensor->scaler = &sensor->ssds[sensor->ssds_used];
 		sensor->ssds_used++;
 		i++;
 	}
 
 	if (sensor->sensor_ds->subdevs[i].subdev_type
-	    == CRL_SUBDEV_TYPE_BINNER) {
+		== CRL_SUBDEV_TYPE_BINNER) {
 		sensor->binner = &sensor->ssds[sensor->ssds_used];
 		sensor->ssds_used++;
 		i++;
 	}
 
 	if (sensor->sensor_ds->subdevs[i].subdev_type
-	    == CRL_SUBDEV_TYPE_PIXEL_ARRAY) {
+		== CRL_SUBDEV_TYPE_PIXEL_ARRAY) {
 		sensor->pixel_array = &sensor->ssds[sensor->ssds_used];
 		sensor->ssds_used++;
 		i++;
@@ -2289,7 +2320,6 @@ static int crlmodule_init_subdevs(
 			sd->crop[sd->sink_pad] = sd->compose;
 			//sd->pads[sd->sink_pad].flags = ICI_PAD_FLAGS_SINK;
 		}
-
 		rval = init_ext_sd(client, sd, i);
 		if (rval)
 			return rval;
@@ -2334,6 +2364,7 @@ static int __init_power_resources(
 		 sensor->sensor_ds->power_entities[idx];
 
 	dev_dbg(&client->dev, "%s\n", __func__);
+	dev_dbg(&client->dev, "%s platform_data->xshutdown: %d\n", __func__, sensor->platform_data->xshutdown);
 
 	for (idx = 0; idx < sensor->sensor_ds->power_items; idx++) {
 		int rval;
@@ -2350,6 +2381,17 @@ static int __init_power_resources(
 			}
 		break;
 		case CRL_POWER_ETY_GPIO_CUSTOM:
+			if (entity->ent_name[0]) {
+				entity->gpiod_priv = gpiod_get(NULL,
+					entity->ent_name, GPIOD_OUT_LOW);
+				if (IS_ERR(entity->gpiod_priv)) {
+					dev_err(&client->dev,
+						"Unable to acquire custom gpio %s\n",
+						entity->ent_name);
+					entity->gpiod_priv = NULL;
+					return -ENODEV;
+				}
+			} else {
 			if (devm_gpio_request_one(&client->dev,
 				entity->ent_number, 0,
 				"CRL Custom") != 0) {
@@ -2357,6 +2399,7 @@ static int __init_power_resources(
 				entity->ent_number);
 				return -ENODEV;
 			}
+		}
 		break;
 		case CRL_POWER_ETY_REGULATOR_FRAMEWORK:
 			entity->regulator_priv = devm_regulator_get(&client->dev,
@@ -2368,8 +2411,8 @@ static int __init_power_resources(
 				return -ENODEV;
 			}
 			rval = regulator_set_voltage(entity->regulator_priv,
-						     entity->val,
-						     entity->val);
+							 entity->val,
+							 entity->val);
 			/* Not all regulator supports voltage change */
 			if (rval  < 0)
 				dev_info(&client->dev,
@@ -2416,10 +2459,10 @@ static int crlmodule_registered(
 
 	/* one time init */
 	rval = crlmodule_write_regs(sensor, sensor->sensor_ds->onetime_init_regs,
-				    sensor->sensor_ds->onetime_init_regs_items);
+					sensor->sensor_ds->onetime_init_regs_items);
 	if (rval) {
 		dev_err(&client->dev, "%s failed to set powerup registers\n",
-				      __func__);
+					  __func__);
 		return -ENODEV;
 	}
 
@@ -2429,7 +2472,7 @@ static int crlmodule_registered(
 
 		if (rval) {
 			dev_err(&client->dev, "%s failed to run sensor specific init\n",
-				      __func__);
+					  __func__);
 			return -ENODEV;
 		}
 	}
@@ -2494,7 +2537,6 @@ static int init_ext_sd(struct i2c_client *client,
 		snprintf(name,
 			sizeof(name), "%s",
 			sensor->sensor_ds->subdevs[idx].name);
-
 	sd->client = client;
 	sd->num_pads = ssd->npads;
 	sd->src_pad = ssd->source_pad;
@@ -2592,10 +2634,12 @@ static int crlmodule_probe(struct i2c_client *client,
 {
 	struct crl_sensor *sensor;
 	int ret;
+	pr_debug("%s, entry\n", __func__);
 
-	if (client->dev.platform_data == NULL)
+	if (client->dev.platform_data == NULL) {
+		pr_err("%s, platform_data is null\n", __func__);
 		return -ENODEV;
-
+	}
 	/* TODO! Create the sensor based on the interface */
 	sensor = devm_kzalloc(&client->dev, sizeof(*sensor), GFP_KERNEL);
 	if (sensor == NULL)
@@ -2603,6 +2647,7 @@ static int crlmodule_probe(struct i2c_client *client,
 
 	sensor->platform_data = client->dev.platform_data;
 	mutex_init(&sensor->mutex);
+	dev_dbg(&client->dev, "%s xshutdown: %d\n", __func__, sensor->platform_data->xshutdown);
 	mutex_init(&sensor->power_mutex);
 
 	ret = crlmodule_populate_ds(sensor, &client->dev);
diff --git a/drivers/media/i2c/crlmodule-lite/crlmodule-data.c b/drivers/media/i2c/crlmodule-lite/crlmodule-data.c
index c22dc1f..000982f 100644
--- a/drivers/media/i2c/crlmodule-lite/crlmodule-data.c
+++ b/drivers/media/i2c/crlmodule-lite/crlmodule-data.c
@@ -8,6 +8,7 @@
 #include "crl_adv7481_hdmi_configuration.h"
 #include "crl_adv7481_eval_configuration.h"
 #include "crl_magna_configuration_ti964.h"
+#include "crl_ov10635_configuration.h"
 
 static const struct crlmodule_sensors supported_sensors[] = {
 	{ "ADV7481 CVBS", "adv7481_cvbs", &adv7481_cvbs_crl_configuration },
@@ -17,6 +18,7 @@ static const struct crlmodule_sensors supported_sensors[] = {
 	{ "MAGNA_TI964", "magna_ti964", &magna_ti964_crl_configuration },
 	{ "i2c-ADV7481A:00", "adv7481_hdmi", &adv7481_hdmi_crl_configuration },
 	{ "i2c-ADV7481B:00", "adv7481_cvbs", &adv7481_cvbs_crl_configuration },
+	{ "OV10635", "ov10635", &ov10635_crl_configuration },
 };
 
 /*
diff --git a/drivers/media/i2c/crlmodule-lite/crlmodule-sensor-ds.h b/drivers/media/i2c/crlmodule-lite/crlmodule-sensor-ds.h
index e8a6a6f..e34deb2 100644
--- a/drivers/media/i2c/crlmodule-lite/crlmodule-sensor-ds.h
+++ b/drivers/media/i2c/crlmodule-lite/crlmodule-sensor-ds.h
@@ -426,6 +426,7 @@ struct crl_power_seq_entity {
 	unsigned int undo_val; /* Undo value if any previous step failed */
 	unsigned int delay; /* delay in micro seconds */
 	struct regulator *regulator_priv; /* R/W */
+	struct gpio_desc *gpiod_priv;
 };
 
 struct crl_nvm_blob {
diff --git a/drivers/media/i2c/ici/Kconfig b/drivers/media/i2c/ici/Kconfig
new file mode 100644
index 00000000..db4fd7f
--- /dev/null
+++ b/drivers/media/i2c/ici/Kconfig
@@ -0,0 +1,13 @@
+if VIDEO_INTEL_ICI
+
+menu "Deserializers for ICI"
+
+config VIDEO_TI964_ICI
+	tristate "TI964 driver support"
+	depends on I2C && VIDEO_INTEL_ICI
+	---help---
+	This is a driver for TI964 camera for ICI.
+
+endmenu
+
+endif
diff --git a/drivers/media/i2c/ici/Makefile b/drivers/media/i2c/ici/Makefile
new file mode 100644
index 00000000..232f0cc
--- /dev/null
+++ b/drivers/media/i2c/ici/Makefile
@@ -0,0 +1,2 @@
+# SPDX-License-Identifier: GPL-2.0
+obj-$(CONFIG_VIDEO_TI964_ICI) += ti964_ici.o
diff --git a/drivers/media/i2c/ici/ti964_ici.c b/drivers/media/i2c/ici/ti964_ici.c
new file mode 100644
index 00000000..0892007
--- /dev/null
+++ b/drivers/media/i2c/ici/ti964_ici.c
@@ -0,0 +1,1128 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2016 - 2018 Intel Corporation
+
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/wait.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <media/ti964.h>
+#include <media/crlmodule-lite.h>
+#include <media/ici.h>
+#include <linux/version.h>
+#include "../ti964-reg.h"
+
+struct ti964_subdev {
+	struct ici_ext_subdev *sd;
+	unsigned short rx_port;
+	unsigned short fsin_gpio;
+	unsigned short phy_i2c_addr;
+	unsigned short alias_i2c_addr;
+	char sd_name[ICI_MAX_NODE_NAME];
+};
+
+struct ti964 {
+	struct ici_ext_subdev sd;
+	struct ici_ext_subdev_register reg;
+	struct ti964_pdata *pdata;
+	struct ti964_subdev sub_devs[NR_OF_TI964_SINK_PADS];
+	struct crlmodule_lite_platform_data subdev_pdata[NR_OF_TI964_SINK_PADS];
+	const char *name;
+
+	struct mutex mutex;
+
+	struct regmap *regmap8;
+	struct regmap *regmap16;
+
+	struct ici_pad_framefmt *ffmts[NR_OF_TI964_SINK_PADS];
+	struct ici_rect *crop;
+	struct ici_rect *compose;
+
+	struct {
+		unsigned int *stream_id;
+	} *stream; /* stream enable/disable status, indexed by pad */
+	struct {
+		unsigned int sink;
+		unsigned int source;
+		int flags;
+	} *route; /* pad level info, indexed by stream */
+
+	unsigned int nsinks;
+	unsigned int nsources;
+	unsigned int nstreams;
+	unsigned int npads;
+
+	struct gpio_chip gc;
+	int (*create_link)(
+		struct ici_isys_node *src,
+		u16 src_pad,
+		struct ici_isys_node *sink,
+		u16 sink_pad,
+		u32 flags);
+};
+
+static int init_ext_sd(struct i2c_client *client, struct ti964_subdev *sd, int idx);
+static int ti964_find_subdev_index(struct ti964 *va, struct ici_ext_subdev *sd);
+static int create_link(struct ici_isys_node *src_node, u16 srcpad,
+	struct ici_isys_node *sink_node, u16 sinkpad, u32 flag);
+static int ti964_get_param(struct ici_ext_sd_param *param);
+static int ti964_get_menu_item(struct ici_ext_sd_param *param, u32 idx);
+static int ti964_set_param(struct ici_ext_sd_param *param);
+
+#define to_ti964(_sd) container_of(_sd, struct ti964, sd)
+#define to_ici_ext_subdev(_node) container_of(_node, struct ici_ext_subdev, node)
+#define TI964_SRC_PAD 1
+
+static const s64 ti964_op_sys_clock[] =  {400000000, 800000000};
+static const u8 ti964_op_sys_clock_reg_val[] = {
+	TI964_MIPI_800MBPS,
+	TI964_MIPI_1600MBPS
+};
+
+
+static const struct ti964_csi_data_format va_csi_data_formats[] = {
+		{ ICI_FORMAT_YUYV, 16, 16, PIXEL_ORDER_GBRG, 0x1e },
+		{ ICI_FORMAT_UYVY, 16, 16, PIXEL_ORDER_GBRG, 0x1e },
+		{ ICI_FORMAT_SGRBG12, 12, 12, PIXEL_ORDER_GRBG, 0x2c },
+		{ ICI_FORMAT_SRGGB12, 12, 12, PIXEL_ORDER_RGGB, 0x2c },
+		{ ICI_FORMAT_SBGGR12, 12, 12, PIXEL_ORDER_BGGR, 0x2c },
+		{ ICI_FORMAT_SGBRG12, 12, 12, PIXEL_ORDER_GBRG, 0x2c },
+		{ ICI_FORMAT_SGRBG10, 10, 10, PIXEL_ORDER_GRBG, 0x2b },
+		{ ICI_FORMAT_SRGGB10, 10, 10, PIXEL_ORDER_RGGB, 0x2b },
+		{ ICI_FORMAT_SBGGR10, 10, 10, PIXEL_ORDER_BGGR, 0x2b },
+		{ ICI_FORMAT_SGBRG10, 10, 10, PIXEL_ORDER_GBRG, 0x2b },
+		{ ICI_FORMAT_SGRBG8, 8, 8, PIXEL_ORDER_GRBG, 0x2a },
+		{ ICI_FORMAT_SRGGB8, 8, 8, PIXEL_ORDER_RGGB, 0x2a },
+		{ ICI_FORMAT_SBGGR8, 8, 8, PIXEL_ORDER_BGGR, 0x2a },
+		{ ICI_FORMAT_SGBRG8, 8, 8, PIXEL_ORDER_GBRG, 0x2a },
+};
+
+
+static struct regmap_config ti964_reg_config8 = {
+	.reg_bits = 8,
+	.val_bits = 8,
+};
+
+static struct regmap_config ti964_reg_config16 = {
+	.reg_bits = 16,
+	.val_bits = 8,
+	.reg_format_endian = REGMAP_ENDIAN_BIG,
+};
+
+static int ti964_reg_set_bit(struct ti964 *va, unsigned char reg,
+	unsigned char bit, unsigned char val)
+{
+	int ret;
+	unsigned int reg_val;
+
+	ret = regmap_read(va->regmap8, reg, &reg_val);
+	if (ret)
+		return ret;
+	if (val)
+		reg_val |= 1 << bit;
+	else
+		reg_val &= ~(1 << bit);
+
+	return regmap_write(va->regmap8, reg, reg_val);
+}
+
+static int ti964_map_phy_i2c_addr(struct ti964 *va, unsigned short rx_port,
+				  unsigned short addr)
+{
+	int rval;
+
+	rval = regmap_write(va->regmap8, TI964_RX_PORT_SEL,
+		(rx_port << 4) + (1 << rx_port));
+	if (rval)
+		return rval;
+
+	return regmap_write(va->regmap8, TI964_SLAVE_ID0, addr);
+}
+
+static int ti964_map_alias_i2c_addr(struct ti964 *va, unsigned short rx_port,
+				  unsigned short addr)
+{
+	int rval;
+
+	rval = regmap_write(va->regmap8, TI964_RX_PORT_SEL,
+		(rx_port << 4) + (1 << rx_port));
+	if (rval)
+		return rval;
+
+	return regmap_write(va->regmap8, TI964_SLAVE_ALIAS_ID0, addr);
+}
+
+static int ti964_fsin_gpio_init(struct ti964 *va, unsigned short rx_port,
+					unsigned short fsin_gpio)
+{
+	int rval;
+	int reg_val;
+
+	rval = regmap_read(va->regmap8, TI964_FS_CTL, &reg_val);
+	if (rval) {
+		pr_err("Failed to read gpio status.\n");
+		return rval;
+	}
+
+	if (!reg_val & TI964_FSIN_ENABLE) {
+		pr_warn("FSIN not enabled, skip config FSIN GPIO.\n");
+		return 0;
+	}
+
+	rval = regmap_write(va->regmap8, TI964_RX_PORT_SEL,
+		(rx_port << 4) + (1 << rx_port));
+	if (rval)
+		return rval;
+
+	rval = regmap_read(va->regmap8, TI964_BC_GPIO_CTL0, &reg_val);
+	if (rval) {
+		pr_err("Failed to read gpio status.\n");
+		return rval;
+	}
+
+	if (fsin_gpio == 0) {
+		reg_val &= ~TI964_GPIO0_MASK;
+		reg_val |= TI964_GPIO0_FSIN;
+	} else {
+		reg_val &= ~TI964_GPIO1_MASK;
+		reg_val |= TI964_GPIO1_FSIN;
+	}
+
+	rval = regmap_write(va->regmap8, TI964_BC_GPIO_CTL0, reg_val);
+	if (rval)
+		pr_err("Failed to set gpio.\n");
+
+	return rval;
+}
+
+/*
+ * Function main code replicated from /drivers/media/i2c/smiapp/smiapp-core.c
+ * Slightly modified based on the CRL Module changes
+ */
+static int ti964_enum_mbus_code(struct ici_isys_node *node, struct ici_pad_supported_format_desc *psfd)
+{
+
+	psfd->color_format = 0x1e; // for ICI_FORMAT_UYVY
+		// sensor->sensor_ds->csi_fmts[psfd->idx].code;
+	psfd->min_width = TI964_MIN_WIDTH; //sensor->sensor_ds->sensor_limits->x_addr_min;
+	psfd->max_width = TI964_MAX_WIDTH; //sensor->sensor_ds->sensor_limits->x_addr_max;
+	psfd->min_height = TI964_MIN_HEIGHT; //sensor->sensor_ds->sensor_limits->y_addr_min;
+	psfd->max_height = TI964_MAX_HEIGHT; //sensor->sensor_ds->sensor_limits->y_addr_max;
+	return 0;
+}
+
+static const struct ti964_csi_data_format
+		*ti964_validate_csi_data_format(u32 code)
+{
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(va_csi_data_formats); i++) {
+		if (va_csi_data_formats[i].code == code)
+			return &va_csi_data_formats[i];
+	}
+
+	return &va_csi_data_formats[0];
+}
+
+static int __ti964_set_format(struct ici_ext_subdev *subdev, struct ici_pad_framefmt *pff)
+{
+	struct i2c_client *client = subdev->client;
+	struct ici_ext_subdev *sd = i2c_get_clientdata(client);
+	struct ti964 *va = to_ti964(sd);
+	int index = ti964_find_subdev_index(va, subdev);
+
+
+	va->ffmts[index]->ffmt.width = pff->ffmt.width;
+	va->ffmts[index]->ffmt.height = pff->ffmt.height;
+	va->ffmts[index]->ffmt.pixelformat = pff->ffmt.pixelformat;
+	va->ffmts[index]->ffmt.field = pff->ffmt.field;
+
+	return 0;
+}
+
+static int __ti964_get_format(struct ici_ext_subdev *subdev, struct ici_pad_framefmt *pff)
+{
+	struct i2c_client *client = subdev->client;
+	struct ici_ext_subdev *sd = i2c_get_clientdata(client);
+	struct ti964 *va = to_ti964(sd);
+	int index = ti964_find_subdev_index(va, subdev);
+
+// TODO hardocded same format for all pads of TI964
+	pff->ffmt.width = va->ffmts[index]->ffmt.width;
+	pff->ffmt.height = va->ffmts[index]->ffmt.height;
+	pff->ffmt.pixelformat = va->ffmts[index]->ffmt.pixelformat;
+//				  sensor->sensor_ds->csi_fmts[sensor->fmt_index].code;
+	pff->ffmt.field =
+				((va->ffmts[index]->ffmt.field == ICI_FIELD_ANY) ?
+				ICI_FIELD_NONE : va->ffmts[index]->ffmt.field);
+	return 0;
+
+}
+
+static int ti964_set_selection(struct ici_isys_node *node, struct ici_pad_selection *ps)
+{
+// TODO place holder
+	return 0;
+}
+
+static int ti964_get_selection(struct ici_isys_node *node, struct ici_pad_selection *ps)
+{
+// TODO place holder
+	return 0;
+}
+
+static int ti964_get_format(struct ici_isys_node *node, struct ici_pad_framefmt *pff)
+{
+	struct ici_ext_subdev *subsubdev = node->sd;
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(subsubdev->client);
+	struct ti964 *va = to_ti964(subdev);
+
+	mutex_lock(&va->mutex);
+	__ti964_get_format(subsubdev, pff);
+	mutex_unlock(&va->mutex);
+
+//	pr_debug(subdev->dev, "subdev_format: which: %s, pad: %d, stream: %d.\n",
+//		 fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE ?
+//		 "V4L2_SUBDEV_FORMAT_ACTIVE" : "V4L2_SUBDEV_FORMAT_TRY",
+//		 fmt->pad, fmt->stream);
+
+//	pr_debug("framefmt: width: %d, height: %d, code: 0x%x.\n",
+//		   fmt->format.width, fmt->format.height, fmt->format.code);
+
+	return 0;
+}
+
+static int ti964_set_format(struct ici_isys_node *node, struct ici_pad_framefmt *pff)
+{
+	struct ici_ext_subdev *subsubdev = node->sd;
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(subsubdev->client);
+	struct ti964 *va = to_ti964(subdev);
+
+	mutex_lock(&va->mutex);
+	__ti964_set_format(subsubdev, pff);
+
+	mutex_unlock(&va->mutex);
+
+	pr_debug("framefmt: width: %d, height: %d, code: 0x%x.\n",
+		   pff->ffmt.width, pff->ffmt.height, pff->ffmt.pixelformat);
+
+	return 0;
+}
+/* Initialize sensor connected to TI964 */
+static int ti964_init_ext_subdev(struct ti964_subdev_info *info,
+				struct ici_ext_subdev_register *reg,
+				struct i2c_client *client,
+				struct ici_ext_subdev_register *sd_register)
+{
+	struct i2c_client *client2;
+	struct ici_ext_subdev *sensor_sd;
+	int rval = 0;
+
+	request_module(I2C_MODULE_PREFIX "%s", info->board_info.type);
+
+	client2 = i2c_new_device(client->adapter, &info->board_info);
+
+	if (client2 == NULL || client2->dev.driver == NULL) {
+		pr_err("%s, No new i2c device\n", __func__);
+		return -ENODEV;
+	}
+
+	/* Get the clientdata set by the sensor driver */
+	sensor_sd = i2c_get_clientdata(client2);
+	if (!sensor_sd) {
+		pr_err("%s, Failed to get client data\n", __func__);
+		return -EINVAL;
+	}
+
+	sd_register->ipu_data = reg->ipu_data;
+	sd_register->sd = sensor_sd;
+	sd_register->setup_node = reg->setup_node;
+	sd_register->create_link = reg->create_link;
+
+	rval = sensor_sd->do_register(sd_register);
+
+	return rval;
+}
+
+static int ti964_registered(struct ici_ext_subdev_register *reg)
+{
+	struct ici_ext_subdev *subdev = reg->sd;
+	struct ti964 *va = to_ti964(subdev);
+	struct ti964_subdev *sd, *prev_sd = NULL;
+	struct i2c_client *client = subdev->client;
+	struct ici_ext_subdev_register sd_register = {0};
+	int i, k, rval;
+
+		if (!reg->sd || !reg->setup_node || !reg->create_link) {
+		pr_err("ti964_registered error\n");
+				return -EINVAL;
+	}
+
+	va->reg = *reg;
+	va->create_link = reg->create_link;
+
+	/* ti964->subdev represents the ti964 itself and
+	 ti964->sub_devs represents every port/vc */
+	subdev->get_param = ti964_get_param;
+	subdev->set_param = ti964_set_param;
+	subdev->get_menu_item = ti964_get_menu_item;
+
+	for (i = 0, k = 0; i < va->pdata->subdev_num; i++) {
+		struct ti964_subdev_info *info =
+			&va->pdata->subdev_info[i];
+		struct crlmodule_lite_platform_data *pdata =
+			(struct crlmodule_lite_platform_data *)
+			info->board_info.platform_data;
+
+		if (k >= va->nsinks)
+			break;
+
+		/*
+		 * The sensors should not share the same pdata structure.
+		 * Clone the pdata for each sensor.
+		 */
+		memcpy(&va->subdev_pdata[k], pdata, sizeof(*pdata));
+		if (va->subdev_pdata[k].xshutdown != 0 &&
+			va->subdev_pdata[k].xshutdown != 1) {
+			pr_err("xshutdown(%d) must be 0 or 1 to connect.\n",
+				va->subdev_pdata[k].xshutdown);
+			return -EINVAL;
+		}
+
+		/* If 0 is xshutdown, then 1 would be FSIN, vice versa. */
+		va->sub_devs[k].fsin_gpio = 1 - va->subdev_pdata[k].xshutdown;
+
+		/* Spin sensor subdev suffix name */
+		va->subdev_pdata[k].suffix = info->suffix;
+
+		/*
+		 * Change the gpio value to have xshutdown
+		 * and rx port included, so in gpio_set those
+		 * can be caculated from it.
+		 */
+		va->subdev_pdata[k].xshutdown += va->gc.base +
+					info->rx_port * NR_OF_GPIOS_PER_PORT;
+		info->board_info.platform_data = &va->subdev_pdata[k];
+
+		if (!info->phy_i2c_addr || !info->board_info.addr) {
+			pr_err("No physical i2c address and alias i2c address found\n");
+			return -EINVAL;
+		}
+
+		/* Map PHY I2C address. */
+		rval = ti964_map_phy_i2c_addr(va, info->rx_port,
+					info->phy_i2c_addr);
+		if (rval)
+			return rval;
+
+		/* Map 7bit ALIAS I2C address. */
+		rval = ti964_map_alias_i2c_addr(va, info->rx_port,
+				info->board_info.addr << 1);
+		if (rval)
+			return rval;
+
+		/* Initialize sensor connected to TI964 */
+		rval  = ti964_init_ext_subdev(info, reg, client,
+						  &sd_register);
+		if (rval) {
+			pr_err("%s, Failed to register external subdev\n", __func__);
+			continue;
+		}
+
+		/* Config FSIN GPIO */
+		rval = ti964_fsin_gpio_init(va, info->rx_port,
+				va->sub_devs[k].fsin_gpio);
+		if (rval)
+			return rval;
+
+		/* Allocate ici_ext_subdev for each TI964 port */
+		va->sub_devs[k].sd = devm_kzalloc(&client->dev, sizeof(struct ici_ext_subdev), GFP_KERNEL);
+		if (!va->sub_devs[k].sd) {
+			pr_err("can't create new i2c subdev %d-%04x\n",
+				info->i2c_adapter_id,
+				info->board_info.addr);
+			continue;
+		}
+		va->sub_devs[k].rx_port = info->rx_port;
+		va->sub_devs[k].phy_i2c_addr = info->phy_i2c_addr;
+		va->sub_devs[k].alias_i2c_addr = info->board_info.addr;
+		memcpy(va->sub_devs[k].sd_name,
+				va->subdev_pdata[k].module_name,
+				min(sizeof(va->sub_devs[k].sd_name) - 1,
+				sizeof(va->subdev_pdata[k].module_name) - 1));
+
+				sd = &va->sub_devs[k];
+				rval = init_ext_sd(va->sd.client, sd, k);
+		if (rval)
+						return rval;
+
+		rval = sd_register.create_link(&sd_register.sd->node,
+						   sd_register.sd->src_pad,
+						   &sd->sd->node, 0, 0);
+		if (rval) {
+			pr_err("%s, error creating link\n", __func__);
+			return rval;
+		}
+				if (prev_sd == NULL) {
+						prev_sd = sd;
+			k++;
+						continue;
+				}
+				prev_sd = sd;
+
+		k++;
+	}
+	/* Replace existing create_link address with TI964 create_link implementation
+	   to create link between TI964 node and CSI2 node */
+	reg->create_link = create_link;
+	return 0;
+}
+
+
+static int create_link(struct ici_isys_node *src_node,
+	u16 srcpad,
+	struct ici_isys_node *sink_node,
+	u16 sinkpad,
+	u32 flag)
+{
+	struct ici_ext_subdev *sd, *ssd;
+	struct ti964 *va;
+	struct ti964_subdev *subdev;
+	int i, ret;
+	if (!src_node || !sink_node)
+		return -EINVAL;
+
+	sd = to_ici_ext_subdev(src_node);
+	if (!sd)
+		return -EINVAL;
+
+	va = to_ti964(sd);
+	if (!va)
+		return -EINVAL;
+
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+		subdev = &va->sub_devs[i];
+		if (!subdev)
+			continue;
+		ssd = subdev->sd;
+		ret = va->create_link(&ssd->node,
+			TI964_SRC_PAD,
+			sink_node,
+			sinkpad,
+			0);
+		if (ret)
+			return ret;
+	}
+	return 0;
+}
+
+static void ti964_unregistered(struct ici_ext_subdev *subdev)
+{
+	pr_debug("%s\n", __func__);
+}
+
+static int ti964_set_param(struct ici_ext_sd_param *param)
+{
+	return 0;
+}
+
+static int ti964_set_power(struct ici_isys_node *node, int on)
+{
+	struct ici_ext_subdev *subsubdev = node->sd;
+	struct ti964 *va;
+	int ret;
+	u8 val;
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(subsubdev->client);
+	if (!subdev)
+		return -EINVAL;
+
+	va = to_ti964(subdev);
+
+	if (!va)
+		return -EINVAL;
+
+	pr_debug("%s %d\n", __func__, on);
+	ret = regmap_write(va->regmap8, TI964_RESET,
+			   (on) ? TI964_POWER_ON : TI964_POWER_OFF);
+	if (ret || !on)
+		return ret;
+
+	/* Configure MIPI clock bsaed on control value. */
+	ret = regmap_write(va->regmap8, TI964_CSI_PLL_CTL,
+				ti964_op_sys_clock_reg_val[0]);
+//				ti964_op_sys_clock_reg_val[
+//				v4l2_ctrl_g_ctrl(va->link_freq)]);
+	if (ret)
+		return ret;
+	val = TI964_CSI_ENABLE;
+//	val |= TI964_CSI_CONTS_CLOCK;
+	/* Enable skew calculation when 1.6Gbps output is enabled. */
+// TODO pegging to 0.8 Gbps for now
+//	if (v4l2_ctrl_g_ctrl(va->link_freq))
+//		val |= TI964_CSI_SKEWCAL;
+	return regmap_write(va->regmap8, TI964_CSI_CTL, val);
+}
+
+static int ti964_tp_set_stream(struct ici_ext_subdev *subdev, int enable)
+{
+	struct ti964 *va = to_ti964(subdev);
+	int i, rval;
+
+	for (i = 0; i < ARRAY_SIZE(ti964_tp_settings); i++) {
+		rval = regmap_write(va->regmap8,
+			ti964_tp_settings[i].reg,
+			ti964_tp_settings[i].val);
+		if (rval) {
+			pr_err("Register write error.\n");
+			return rval;
+		}
+	}
+
+	rval = regmap_write(va->regmap8, TI964_IND_ACC_DATA, enable);
+	if (rval) {
+		pr_err("Register write error.\n");
+		return rval;
+	}
+
+	return 0;
+}
+
+static int ti964_rx_port_config(struct ti964 *va, int sink, int rx_port)
+{
+	int rval;
+	u8 bpp;
+	int port_cfg2_val;
+	int vc_mode_reg_index;
+	int vc_mode_reg_val;
+	int mipi_dt_type;
+	int high_fv_flags = va->subdev_pdata[sink].high_framevalid_flags;
+
+	/* Select RX port. */
+	rval = regmap_write(va->regmap8, TI964_RX_PORT_SEL,
+			(rx_port << 4) + (1 << rx_port));
+	if (rval) {
+		pr_err("Failed to select RX port.\n");
+		return rval;
+	}
+
+	/* Set RX port mode. */
+	bpp = ti964_validate_csi_data_format(
+		va->ffmts[0]->ffmt.pixelformat)->width;
+	rval = regmap_write(va->regmap8, TI964_PORT_CONFIG,
+		(bpp == 12) ?
+		TI964_FPD3_RAW12_75MHz : TI964_FPD3_RAW10_100MHz);
+	if (rval) {
+		pr_err("Failed to set port config.\n");
+		return rval;
+	}
+
+	mipi_dt_type = ti964_validate_csi_data_format(
+		va->ffmts[0]->ffmt.pixelformat)->mipi_dt_code;
+	/*
+	 * RAW8 and YUV422 need to enable RAW10 bit mode.
+	 * RAW12 need to set the RAW10_8bit to reserved.
+	 */
+	switch (bpp) {
+	case 8:
+	case 16:
+		port_cfg2_val = TI964_RAW10_8BIT & (~high_fv_flags);
+		vc_mode_reg_index = TI964_RAW10_ID;
+		break;
+	case 12:
+		port_cfg2_val = TI964_RAW12;
+		vc_mode_reg_index = TI964_RAW12_ID;
+		break;
+	default:
+		port_cfg2_val = TI964_RAW10_NORMAL & (~high_fv_flags);
+		vc_mode_reg_index = TI964_RAW10_ID;
+		break;
+	}
+
+	vc_mode_reg_val =  mipi_dt_type | sink << 6;
+#if 0
+	rval = regmap_write(va->regmap8, vc_mode_reg_index, vc_mode_reg_val);
+	if (rval) {
+		pr_err("Failed to set virtual channel & data type.\n");
+		return rval;
+	}
+#endif
+
+	rval = regmap_write(va->regmap8, TI964_PORT_CONFIG2, port_cfg2_val);
+	if (rval) {
+		pr_err("Failed to set port config2.\n");
+		return rval;
+	}
+
+	return 0;
+}
+
+static int ti964_map_subdevs_addr(struct ti964 *va)
+{
+	unsigned short rx_port, phy_i2c_addr, alias_i2c_addr;
+	int i, rval;
+
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+		rx_port = va->sub_devs[i].rx_port;
+		phy_i2c_addr = va->sub_devs[i].phy_i2c_addr;
+		alias_i2c_addr = va->sub_devs[i].alias_i2c_addr;
+
+		if (!phy_i2c_addr || !alias_i2c_addr)
+			continue;
+
+		rval = ti964_map_phy_i2c_addr(va, rx_port, phy_i2c_addr);
+		if (rval)
+			return rval;
+
+		/* set 7bit alias i2c addr */
+		rval = ti964_map_alias_i2c_addr(va, rx_port,
+						alias_i2c_addr << 1);
+		if (rval)
+			return rval;
+	}
+
+	return 0;
+}
+
+static int ti964_find_subdev_index(struct ti964 *va, struct ici_ext_subdev *sd)
+{
+	int i;
+
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+		if (va->sub_devs[i].sd == sd)
+			return i;
+	}
+
+	WARN_ON(1);
+
+	return -EINVAL;
+}
+
+static int ti964_set_stream(struct ici_isys_node *node, void *ip, int enable)
+{
+	struct ti964 *va;
+	struct ici_ext_subdev *subsubdev = node->sd;
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(subsubdev->client);
+	int i, j, rval;
+	unsigned int rx_port;
+	DECLARE_BITMAP(rx_port_enabled, 32);
+
+	if (!subdev)
+		return -EINVAL;
+
+	va = to_ti964(subdev);
+
+	if (!va)
+		return -EINVAL;
+
+	pr_debug("TI964 set stream, enable %d\n", enable);
+#ifdef TEST_PATTERN
+		return ti964_tp_set_stream(subsubdev, enable);
+#endif
+
+	bitmap_zero(rx_port_enabled, 32);
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+		j = ti964_find_subdev_index(va, subsubdev);
+		if (j < 0)
+			return -EINVAL;
+		rx_port = va->sub_devs[j].rx_port;
+
+		rval = ti964_rx_port_config(va, i, rx_port);
+		if (rval < 0)
+			return rval;
+
+		bitmap_set(rx_port_enabled, rx_port, 1);
+			/* RX port fordward */
+		rval = ti964_reg_set_bit(va, TI964_FWD_CTL1,
+					rx_port + 4, !enable);
+		if (rval) {
+			pr_err("Failed to forward RX port%d. enable %d\n",
+				i, enable);
+			return rval;
+		}
+
+	}
+
+	return 0;
+}
+
+static int ti964_get_param(struct ici_ext_sd_param *param)
+{
+// TODO this is hard-coded for now
+
+	param->val = 400000000;
+// or param->val = 800000000;
+	return 0;
+}
+
+static int ti964_get_menu_item(struct ici_ext_sd_param *param, u32 idx)
+{
+	return 0;
+}
+
+static int init_ext_sd(struct i2c_client *client, struct ti964_subdev *ti_sd, int idx)
+{
+	struct ti964 *va;
+	char name[ICI_MAX_NODE_NAME];
+	int rval;
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(client);;
+
+	if (!subdev)
+		return -EINVAL;
+
+	va = to_ti964(subdev);
+
+	if (!va)
+		return -EINVAL;
+
+	if (va->pdata->suffix) {
+		snprintf(name,
+					sizeof(name), "TI964 %c %d",
+					va->pdata->suffix, idx);
+	} else
+		snprintf(name,
+					sizeof(name), "TI964 %4.4x %d",
+					i2c_adapter_id(client->adapter), idx);
+
+	ti_sd->sd->client = client;
+	ti_sd->sd->num_pads = 2;
+	//ti_sd->sd->pads[0].pad_id = 0;
+	//ti_sd->sd->pads[0].flags = ICI_PAD_FLAGS_SINK;
+	//ti_sd->sd->pads[1].pad_id = 1;
+	//ti_sd->sd->pads[1].flags = ICI_PAD_FLAGS_SOURCE;
+	// TODO
+	//sd->src_pad = ssd->source_pad;
+	// below fnctions invoked by csi2 fe code
+	ti_sd->sd->set_param = ti964_set_param; // meant to execute CTRL-IDs/CIDs
+	ti_sd->sd->get_param = ti964_get_param; // meant to execute CTRLIDs/CIDs
+	ti_sd->sd->get_menu_item = ti964_get_menu_item; // get LINK FREQ
+	if (va->reg.setup_node) {
+		rval = va->reg.setup_node(va->reg.ipu_data,
+									ti_sd->sd, name);
+		if (rval)
+				return rval;
+	} else
+		pr_err("node not registered\n");
+
+// below invoked by stream code
+	ti_sd->sd->node.node_set_power = ti964_set_power;
+	ti_sd->sd->node.node_set_streaming = ti964_set_stream;
+// below invoked by pipeline-device code
+	ti_sd->sd->node.node_get_pad_supported_format =
+				ti964_enum_mbus_code; //needs modification
+	ti_sd->sd->node.node_set_pad_ffmt = ti964_set_format;
+	ti_sd->sd->node.node_get_pad_ffmt = ti964_get_format;
+	ti_sd->sd->node.node_set_pad_sel = ti964_set_selection;
+	ti_sd->sd->node.node_get_pad_sel = ti964_get_selection;
+	return 0;
+}
+
+static int ti964_register_subdev(struct i2c_client *client, struct ti964 *va)
+{
+	int rval = 0;
+	int i = 0;
+
+	va->sd.client = client;
+	va->sd.do_register = ti964_registered;
+	va->sd.do_unregister = ti964_unregistered;
+	i2c_set_clientdata(client, &va->sd);
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+		va->ffmts[i]->ffmt.width = 1280;
+		va->ffmts[i]->ffmt.height = 720;
+		va->ffmts[i]->ffmt.pixelformat = ICI_FORMAT_UYVY;
+	}
+	return rval;
+}
+
+static int ti964_init(struct ti964 *va)
+{
+	unsigned int reset_gpio = va->pdata->reset_gpio;
+	int i, rval;
+	unsigned int val;
+
+	gpio_set_value(reset_gpio, 1);
+	usleep_range(2000, 3000);
+	pr_debug("Setting reset gpio %d to 1.\n", reset_gpio);
+
+	rval = regmap_read(va->regmap8, TI964_DEVID, &val);
+	if (rval) {
+		pr_err("Failed to read device ID of TI964!\n");
+		return rval;
+	}
+	pr_info("TI964 device ID: 0x%X\n", val);
+
+	for (i = 0; i < ARRAY_SIZE(ti964_init_settings); i++) {
+		rval = regmap_write(va->regmap8,
+			ti964_init_settings[i].reg,
+			ti964_init_settings[i].val);
+		if (rval)
+			return rval;
+	}
+
+	rval = ti964_map_subdevs_addr(va);
+	if (rval)
+		return rval;
+
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+		rval = ti964_fsin_gpio_init(va, va->sub_devs[i].rx_port,
+					va->sub_devs[i].fsin_gpio);
+		if (rval)
+			return rval;
+	}
+
+	return 0;
+}
+
+static void ti964_gpio_set(struct gpio_chip *chip, unsigned gpio, int value)
+{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 4, 0)
+	struct i2c_client *client = to_i2c_client(chip->dev);
+#else
+	struct i2c_client *client = to_i2c_client(chip->parent);
+#endif
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(client);
+	struct ti964 *va = to_ti964(subdev);
+	unsigned int reg_val;
+	int rx_port, gpio_port;
+	int ret;
+
+	if (gpio >= NR_OF_TI964_GPIOS)
+		return;
+
+	rx_port = gpio / NR_OF_GPIOS_PER_PORT;
+	gpio_port = gpio % NR_OF_GPIOS_PER_PORT;
+
+	ret = regmap_write(va->regmap8, TI964_RX_PORT_SEL,
+			  (rx_port << 4) + (1 << rx_port));
+	if (ret) {
+		pr_debug("Failed to select RX port.\n");
+		return;
+	}
+	ret = regmap_read(va->regmap8, TI964_BC_GPIO_CTL0, &reg_val);
+	if (ret) {
+		pr_debug("Failed to read gpio status.\n");
+		return;
+	}
+
+	if (gpio_port == 0) {
+		reg_val &= ~TI964_GPIO0_MASK;
+		reg_val |= value ? TI964_GPIO0_HIGH : TI964_GPIO0_LOW;
+	} else {
+		reg_val &= ~TI964_GPIO1_MASK;
+		reg_val |= value ? TI964_GPIO1_HIGH : TI964_GPIO1_LOW;
+	}
+
+	ret = regmap_write(va->regmap8, TI964_BC_GPIO_CTL0, reg_val);
+	if (ret)
+		pr_debug("Failed to set gpio.\n");
+}
+
+static int ti964_gpio_direction_output(struct gpio_chip *chip,
+					   unsigned gpio, int level)
+{
+	return 0;
+}
+
+static int ti964_probe(struct i2c_client *client,
+			const struct i2c_device_id *devid)
+{
+	struct ti964 *va;
+	int i, rval = 0;
+
+	if (client->dev.platform_data == NULL)
+		return -ENODEV;
+
+	va = devm_kzalloc(&client->dev, sizeof(*va), GFP_KERNEL);
+	if (!va)
+		return -ENOMEM;
+
+	va->pdata = client->dev.platform_data;
+
+	va->nsources = NR_OF_TI964_SOURCE_PADS;
+	va->nsinks = NR_OF_TI964_SINK_PADS;
+	va->npads = NR_OF_TI964_PADS;
+	va->nstreams = NR_OF_TI964_STREAMS;
+
+	va->crop = devm_kcalloc(&client->dev, va->npads,
+				sizeof(struct ici_rect), GFP_KERNEL);
+
+	va->compose = devm_kcalloc(&client->dev, va->npads,
+				   sizeof(struct ici_rect), GFP_KERNEL);
+
+	va->route = devm_kcalloc(&client->dev, va->nstreams,
+					   sizeof(*va->route), GFP_KERNEL);
+
+	va->stream = devm_kcalloc(&client->dev, va->npads,
+					   sizeof(*va->stream), GFP_KERNEL);
+
+	if (!va->crop || !va->compose || !va->route || !va->stream)
+		return -ENOMEM;
+
+	for (i = 0; i < va->npads; i++) {
+		va->ffmts[i] = devm_kcalloc(&client->dev, va->nstreams,
+						sizeof(struct ici_pad_framefmt),
+						GFP_KERNEL);
+		if (!va->ffmts[i])
+			return -ENOMEM;
+
+		va->stream[i].stream_id =
+			devm_kcalloc(&client->dev, va->nsinks,
+			sizeof(*va->stream[i].stream_id), GFP_KERNEL);
+		if (!va->stream[i].stream_id)
+			return -ENOMEM;
+	}
+
+	for (i = 0; i < va->nstreams; i++) {
+		va->route[i].sink = i;
+		va->route[i].source = TI964_PAD_SOURCE;
+		va->route[i].flags = 0;
+	}
+
+	for (i = 0; i < va->nsinks; i++) {
+		va->stream[i].stream_id[0] = i;
+		va->stream[TI964_PAD_SOURCE].stream_id[i] = i;
+	}
+
+	va->regmap8 = devm_regmap_init_i2c(client,
+					   &ti964_reg_config8);
+	if (IS_ERR(va->regmap8)) {
+		pr_err("Failed to init regmap8!\n");
+		return -EIO;
+	}
+
+	va->regmap16 = devm_regmap_init_i2c(client,
+						&ti964_reg_config16);
+	if (IS_ERR(va->regmap16)) {
+		pr_err("Failed to init regmap16!\n");
+		return -EIO;
+	}
+
+	mutex_init(&va->mutex);
+	rval = ti964_register_subdev(client, va);
+	if (rval) {
+		pr_err("Failed to register va subdevice!\n");
+		return rval;
+	}
+
+	if (devm_gpio_request_one(&client->dev, va->pdata->reset_gpio, 0,
+				  "ti964 reset") != 0) {
+		pr_err("Unable to acquire gpio %d\n",
+			va->pdata->reset_gpio);
+		return -ENODEV;
+	}
+
+	rval = ti964_init(va);
+	if (rval) {
+		pr_err("Failed to init TI964!\n");
+		return rval;
+	}
+
+	/*
+	 * TI964 has several back channel GPIOs.
+	 * We export GPIO0 and GPIO1 to control reset or fsin.
+	 */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 4, 0)
+	va->gc.dev = &client->dev;
+#else
+	va->gc.parent = &client->dev;
+#endif
+	va->gc.owner = THIS_MODULE;
+	va->gc.label = "TI964 GPIO";
+	va->gc.ngpio = NR_OF_TI964_GPIOS;
+	va->gc.base = -1;
+	va->gc.set = ti964_gpio_set;
+	va->gc.direction_output = ti964_gpio_direction_output;
+	rval = gpiochip_add(&va->gc);
+	if (rval) {
+		pr_err("Failed to add gpio chip!\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int ti964_remove(struct i2c_client *client)
+{
+	struct ti964 *va;
+	struct i2c_client *sub_client;
+	int i;
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(client);;
+
+	if (!subdev)
+		return -EINVAL;
+
+	va = to_ti964(subdev);
+
+	if (!va)
+		return 0;
+
+	mutex_destroy(&va->mutex);
+
+	for (i = 0; i < NR_OF_TI964_SINK_PADS; i++) {
+
+		if (va->sub_devs[i].sd) {
+			sub_client = va->sub_devs[i].sd->client;
+			i2c_unregister_device(sub_client);
+		}
+		va->sub_devs[i].sd = NULL;
+	}
+
+	gpiochip_remove(&va->gc);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int ti964_suspend(struct device *dev)
+{
+	return 0;
+}
+
+static int ti964_resume(struct device *dev)
+{
+	struct ti964 *va;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct ici_ext_subdev *subdev = i2c_get_clientdata(client);;
+
+	if (!subdev)
+		return -EINVAL;
+
+	va = to_ti964(subdev);
+
+	if (!va)
+		return -EINVAL;
+
+	return ti964_init(va);
+}
+#else
+#define ti964_suspend	NULL
+#define ti964_resume	NULL
+#endif /* CONFIG_PM */
+
+static const struct i2c_device_id ti964_id_table[] = {
+	{ TI964_NAME, 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(i2c, ti964_id_table);
+
+static const struct dev_pm_ops ti964_pm_ops = {
+	.suspend = ti964_suspend,
+	.resume = ti964_resume,
+};
+
+static struct i2c_driver ti964_i2c_driver = {
+	.driver = {
+		.name = TI964_NAME,
+		.pm = &ti964_pm_ops,
+	},
+	.probe	= ti964_probe,
+	.remove	= ti964_remove,
+	.id_table = ti964_id_table,
+};
+module_i2c_driver(ti964_i2c_driver);
+
+MODULE_AUTHOR("Karthik Gopalakrishnan <karthik.l.gopalakrishnan@intel.com>");
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_DESCRIPTION("TI964 CSI2-Aggregator driver for RTOS reference");
+
diff --git a/drivers/media/pci/intel/ici/ici-isys.c b/drivers/media/pci/intel/ici/ici-isys.c
index 466659b..ecae4d5 100644
--- a/drivers/media/pci/intel/ici/ici-isys.c
+++ b/drivers/media/pci/intel/ici/ici-isys.c
@@ -121,7 +121,7 @@ static int isys_determine_legacy_csi_lane_configuration(struct ici_isys *isys)
 			if (!isys->ici_csi2[j].nlanes)
 				continue;
 			if (csi_lanes_to_cfg[i].port_lanes[j] !=
-			    isys->ici_csi2[j].nlanes)
+				isys->ici_csi2[j].nlanes)
 				break;
 		}
 
@@ -162,7 +162,7 @@ static int isys_determine_csi_combo_lane_configuration(struct ici_isys *isys)
 			if (!isys->ici_csi2[j + IPU_ISYS_MAX_CSI2_LEGACY_PORTS].nlanes)
 				continue;
 			if (csi_lanes_to_cfg[i].port_lanes[j] !=
-			    isys->ici_csi2[j + IPU_ISYS_MAX_CSI2_LEGACY_PORTS].nlanes)
+				isys->ici_csi2[j + IPU_ISYS_MAX_CSI2_LEGACY_PORTS].nlanes)
 				break;
 		}
 
@@ -197,7 +197,7 @@ static int isys_i2c_test(struct device *dev, void *priv)
 		return 0;
 
 	if (i2c_adapter_id(client->adapter) != test->bus_nr
-	    || client->addr != test->addr)
+		|| client->addr != test->addr)
 		return 0;
 
 	test->client = client;
@@ -258,6 +258,7 @@ static int ext_device_setup_node(void* ipu_data,
 	struct ici_isys *isys = ipu_data;
 	sd->node.sd = sd;
 	sd->node.external = true;
+
 	rval = ici_isys_pipeline_node_init(
 		isys, &sd->node, name, sd->num_pads, sd->pads);
 	if (rval)
@@ -286,26 +287,24 @@ static int isys_complete_ext_device_registration(
 		return rval;
 	}
 	if (csi2) {
-        for (i = 0; i < NR_OF_CSI2_VC; i++) {
-            rval = node_pad_create_link(&sd->node, sd->src_pad,
-                    &isys->ici_csi2[csi2->port].asd[i].node,
-                    CSI2_ICI_PAD_SINK, 0);
-            if (rval) {
-                dev_warn(&isys->adev->dev,
-                        "can't create link from external node\n");
-                return rval;
-            }
-
-            isys->ici_csi2[csi2->port].nlanes = csi2->nlanes;
-            isys->ici_csi2[csi2->port].ext_sd = sd;
-        }
-    }
+		for (i = 0; i < NR_OF_CSI2_VC; i++) {
+			rval = sd_register.create_link(&sd->node, sd->src_pad,
+				&isys->ici_csi2[csi2->port].asd[i].node,
+				CSI2_ICI_PAD_SINK, 0);
+			if (rval) {
+				dev_warn(&isys->adev->dev,
+					"can't create link from external node\n");
+			}
+			isys->ici_csi2[csi2->port].nlanes = csi2->nlanes;
+			isys->ici_csi2[csi2->port].ext_sd = sd;
+		}
+	}
 	return 0;
 }
 
 static int isys_register_ext_subdev(struct ici_isys *isys,
-				    struct ipu_isys_subdev_info *sd_info,
-				    bool acpi_only)
+					struct ipu_isys_subdev_info *sd_info,
+					bool acpi_only)
 {
 	struct i2c_adapter *adapter =
 		i2c_get_adapter(sd_info->i2c.i2c_adapter_id);
@@ -326,7 +325,7 @@ static int isys_register_ext_subdev(struct ici_isys *isys,
 		dev_info(&isys->adev->dev, "sensor device on CSI port: %d\n",
 			sd_info->csi2->port);
 		if (sd_info->csi2->port >= IPU_ISYS_MAX_CSI2_PORTS ||
-		    !isys->ici_csi2[sd_info->csi2->port].isys) {
+			!isys->ici_csi2[sd_info->csi2->port].isys) {
 			dev_warn(&isys->adev->dev, "invalid csi2 port %u\n",
 				 sd_info->csi2->port);
 			rval = -EINVAL;
@@ -387,7 +386,6 @@ static int isys_register_ext_subdev(struct ici_isys *isys,
 		rval = -EINVAL;
 		goto skip_put_adapter;
 	}
-
 	return isys_complete_ext_device_registration(isys, sd, sd_info->csi2);
 
 skip_put_adapter:
@@ -415,11 +413,11 @@ static int isys_acpi_add_device(struct device *dev, void *priv,
 		return -ENODEV;
 
 	/* Lock the module so we can safely get the v4l2_subdev pointer */
-        if (!try_module_get(client->dev.driver->owner))
+		if (!try_module_get(client->dev.driver->owner))
 		return -ENODEV;
 
 	sd = i2c_get_clientdata(client);
-        module_put(client->dev.driver->owner);
+		module_put(client->dev.driver->owner);
 	if (!sd) {
 		dev_warn(&isys->adev->dev, "can't create new i2c subdev\n");
 		return -ENODEV;
@@ -449,7 +447,7 @@ static void isys_register_ext_subdevs(struct ici_isys *isys)
 	/* Handle real ACPI stuff */
 	request_module("ipu4-acpi");
 	ipu_get_acpi_devices(isys, &isys->adev->dev,
-				    isys_acpi_add_device);
+					isys_acpi_add_device);
 }
 
 static void isys_unregister_subdevices(struct ici_isys *isys)
@@ -460,7 +458,7 @@ static void isys_unregister_subdevices(struct ici_isys *isys)
 		&isys->pdata->ipdata->csi2;
 	unsigned int i;
 
-    for (i = 0; i < NR_OF_CSI2_BE_SOC_STREAMS; i++) {
+	for (i = 0; i < NR_OF_CSI2_BE_SOC_STREAMS; i++) {
 		ici_isys_csi2_be_cleanup(&isys->ici_csi2_be[i]);
 	}
 
@@ -513,19 +511,19 @@ static int isys_register_subdevices(struct ici_isys *isys)
 		}
 	}
 
-    for (i = 0; i < csi2->nports; i++) {
-        for (j = 0; j < NR_OF_CSI2_VC; j++ ) {
-            rval = node_pad_create_link(
-                    &isys->ici_csi2[i].asd[j].node, CSI2_ICI_PAD_SOURCE,
-                    &isys->ici_csi2_be[ICI_BE_RAW].asd.node,
-                    CSI2_BE_ICI_PAD_SINK, 0);
-            if (rval) {
-                dev_info(&isys->adev->dev,
-                        "can't create link between csi2 and csi2_be\n");
-                goto fail;
-            }
-
-            for (k = 1; k < NR_OF_CSI2_BE_SOC_STREAMS; k++ ) {
+	for (i = 0; i < csi2->nports; i++) {
+		for (j = 0; j < NR_OF_CSI2_VC; j++) {
+			rval = node_pad_create_link(
+					&isys->ici_csi2[i].asd[j].node, CSI2_ICI_PAD_SOURCE,
+					&isys->ici_csi2_be[ICI_BE_RAW].asd.node,
+					CSI2_BE_ICI_PAD_SINK, 0);
+			if (rval) {
+				dev_info(&isys->adev->dev,
+						"can't create link between csi2 and csi2_be\n");
+				goto fail;
+			}
+
+			for (k = 1; k < NR_OF_CSI2_BE_SOC_STREAMS; k++) {
 				rval = node_pad_create_link(
 					&isys->ici_csi2[i].asd[j].node, CSI2_ICI_PAD_SOURCE,
 					&isys->ici_csi2_be[k].asd.node,
@@ -535,7 +533,7 @@ static int isys_register_subdevices(struct ici_isys *isys)
 						"can't create link between csi2 and csi2_be soc\n");
 					goto fail;
 				}
-       		 	}
+				}
 		}
 	}
 
@@ -550,18 +548,18 @@ static int isys_register_subdevices(struct ici_isys *isys)
 			goto fail;
 		}
 
-        for (j = 1; j < NR_OF_CSI2_BE_SOC_STREAMS; j++) {
-		    rval = node_pad_create_link(
-			    &isys->ici_tpg[i].asd.node, TPG_PAD_SOURCE,
-			    &isys->ici_csi2_be[j].asd.node,
-			    CSI2_BE_ICI_PAD_SINK, 0);
-		    if (rval) {
-			    dev_info(&isys->adev->dev,
-			    	"can't create link between tpg and csi2_be soc\n");
-			    goto fail;
-		    }
-        }
-    }
+		for (j = 1; j < NR_OF_CSI2_BE_SOC_STREAMS; j++) {
+			rval = node_pad_create_link(
+				&isys->ici_tpg[i].asd.node, TPG_PAD_SOURCE,
+				&isys->ici_csi2_be[j].asd.node,
+				CSI2_BE_ICI_PAD_SINK, 0);
+			if (rval) {
+				dev_info(&isys->adev->dev,
+					"can't create link between tpg and csi2_be soc\n");
+				goto fail;
+			}
+		}
+	}
 
 	return 0;
 
@@ -581,7 +579,7 @@ static int isys_register_devices(struct ici_isys *isys)
 		dev_info(&isys->pipeline_dev.dev, "can't register pipeline device\n");
 		return rval;
 	}
-
+	dev_info(&isys->pipeline_dev.dev, "@%s\n", __func__);
 	rval = isys_register_subdevices(isys);
 	if (rval)
 		goto out_pipeline_device_unregister;
@@ -601,8 +599,8 @@ static int isys_register_devices(struct ici_isys *isys)
 
 #ifndef CONFIG_PM
 	ipu_buttress_csi_port_config(isys->adev->isp,
-					    isys->legacy_port_cfg,
-					    isys->combo_port_cfg);
+						isys->legacy_port_cfg,
+						isys->combo_port_cfg);
 #endif
 #endif
 	return 0;
@@ -632,11 +630,11 @@ static void isys_setup_hw(struct ici_isys *isys)
 
 	/* Enable irqs for all MIPI busses */
 	irqs = IPU_ISYS_UNISPART_IRQ_CSI2(0) |
-	       IPU_ISYS_UNISPART_IRQ_CSI2(1) |
-	       IPU_ISYS_UNISPART_IRQ_CSI2(2) |
-	       IPU_ISYS_UNISPART_IRQ_CSI2(3) |
-	       IPU_ISYS_UNISPART_IRQ_CSI2(4) |
-	       IPU_ISYS_UNISPART_IRQ_CSI2(5);
+		   IPU_ISYS_UNISPART_IRQ_CSI2(1) |
+		   IPU_ISYS_UNISPART_IRQ_CSI2(2) |
+		   IPU_ISYS_UNISPART_IRQ_CSI2(3) |
+		   IPU_ISYS_UNISPART_IRQ_CSI2(4) |
+		   IPU_ISYS_UNISPART_IRQ_CSI2(5);
 
 	irqs |= IPU_ISYS_UNISPART_IRQ_SW;
 
@@ -652,7 +650,7 @@ static void isys_setup_hw(struct ici_isys *isys)
 	/* Write CDC FIFO threshold values for isys */
 	for (i = 0; i < isys->pdata->ipdata->hw_variant.cdc_fifos; i++)
 		writel(isys->pdata->ipdata->hw_variant.cdc_fifo_threshold[i],
-		       base + IPU_REG_ISYS_CDC_THRESHOLD(i));
+			   base + IPU_REG_ISYS_CDC_THRESHOLD(i));
 }
 
 #ifdef CONFIG_PM
@@ -674,8 +672,8 @@ static int isys_runtime_pm_resume(struct device *dev)
 	pm_qos_update_request(&isys->pm_qos, ISYS_PM_QOS_VALUE);
 #if 0
 	ipu_buttress_csi_port_config(isp,
-					    isys->legacy_port_cfg,
-					    isys->combo_port_cfg);
+						isys->legacy_port_cfg,
+						isys->combo_port_cfg);
 #endif
 	ret = ipu_buttress_start_tsc_sync(isp);
 	if (ret)
@@ -762,8 +760,8 @@ static void isys_remove(struct ipu_bus_device *adev)
 
 	if (!isp->secure_mode) {
 		ipu_cpd_free_pkg_dir(adev, isys->pkg_dir,
-					    isys->pkg_dir_dma_addr,
-					    isys->pkg_dir_size);
+						isys->pkg_dir_dma_addr,
+						isys->pkg_dir_size);
 		ipu_buttress_unmap_fw_image(adev, &isys->fw_sgt);
 		release_firmware(isys->fw);
 	}
@@ -836,50 +834,50 @@ static int intel_ipu4_isys_init_debugfs(struct ici_isys *isys)
 
 static int alloc_fw_msg_buffers(struct ici_isys *isys, int amount)
 {
-        dma_addr_t dma_addr;
-        struct isys_fw_msgs *addr;
-        unsigned int i;
-        unsigned long flags;
-
-        for (i = 0; i < amount; i++) {
-                addr = dma_alloc_attrs(&isys->adev->dev,
-                                       sizeof(struct isys_fw_msgs),
-                                       &dma_addr, GFP_KERNEL,
+		dma_addr_t dma_addr;
+		struct isys_fw_msgs *addr;
+		unsigned int i;
+		unsigned long flags;
+
+		for (i = 0; i < amount; i++) {
+				addr = dma_alloc_attrs(&isys->adev->dev,
+									   sizeof(struct isys_fw_msgs),
+									   &dma_addr, GFP_KERNEL,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-                                       NULL
+									   NULL
 #else
-                                       0
+									   0
 #endif
-                    );
-                if (!addr)
-                        break;
-                addr->dma_addr = dma_addr;
-
-                spin_lock_irqsave(&isys->listlock, flags);
-                list_add(&addr->head, &isys->framebuflist);
-                spin_unlock_irqrestore(&isys->listlock, flags);
-        }
-        if (i == amount)
-                return 0;
-        spin_lock_irqsave(&isys->listlock, flags);
-        while (!list_empty(&isys->framebuflist)) {
-                addr = list_first_entry(&isys->framebuflist,
-                                        struct isys_fw_msgs, head);
-                list_del(&addr->head);
-                spin_unlock_irqrestore(&isys->listlock, flags);
-                dma_free_attrs(&isys->adev->dev,
-                               sizeof(struct isys_fw_msgs),
-                               addr, addr->dma_addr,
+					);
+				if (!addr)
+						break;
+				addr->dma_addr = dma_addr;
+
+				spin_lock_irqsave(&isys->listlock, flags);
+				list_add(&addr->head, &isys->framebuflist);
+				spin_unlock_irqrestore(&isys->listlock, flags);
+		}
+		if (i == amount)
+				return 0;
+		spin_lock_irqsave(&isys->listlock, flags);
+		while (!list_empty(&isys->framebuflist)) {
+				addr = list_first_entry(&isys->framebuflist,
+										struct isys_fw_msgs, head);
+				list_del(&addr->head);
+				spin_unlock_irqrestore(&isys->listlock, flags);
+				dma_free_attrs(&isys->adev->dev,
+							   sizeof(struct isys_fw_msgs),
+							   addr, addr->dma_addr,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-                               NULL
+							   NULL
 #else
-                               0
+							   0
 #endif
-                    );
-                spin_lock_irqsave(&isys->listlock, flags);
-        }
-        spin_unlock_irqrestore(&isys->listlock, flags);
-        return -ENOMEM;
+					);
+				spin_lock_irqsave(&isys->listlock, flags);
+		}
+		spin_unlock_irqrestore(&isys->listlock, flags);
+		return -ENOMEM;
 }
 
 static int isys_probe(struct ipu_bus_device *adev)
@@ -936,9 +934,9 @@ static int isys_probe(struct ipu_bus_device *adev)
 	mutex_init(&isys->stream_mutex);
 	mutex_init(&isys->lib_mutex);
 
-        spin_lock_init(&isys->listlock);
-        INIT_LIST_HEAD(&isys->framebuflist);
-        INIT_LIST_HEAD(&isys->framebuflist_fw);
+		spin_lock_init(&isys->listlock);
+		INIT_LIST_HEAD(&isys->framebuflist);
+		INIT_LIST_HEAD(&isys->framebuflist_fw);
 
 	dev_info(&adev->dev, "isys probe %p %p\n", adev, &adev->dev);
 	ipu_bus_set_drvdata(adev, isys);
@@ -973,12 +971,12 @@ static int isys_probe(struct ipu_bus_device *adev)
 	intel_ipu4_isys_init_debugfs(isys);
 
 	ipu_trace_init(adev->isp, isys->pdata->base, &adev->dev,
-			      isys_trace_blocks);
+				  isys_trace_blocks);
 
 	pm_qos_add_request(&isys->pm_qos, PM_QOS_CPU_DMA_LATENCY,
 			PM_QOS_DEFAULT_VALUE);
 
-        alloc_fw_msg_buffers(isys, 20);
+		alloc_fw_msg_buffers(isys, 20);
 
 	pm_runtime_allow(&adev->dev);
 	pm_runtime_enable(&adev->dev);
@@ -993,8 +991,8 @@ static int isys_probe(struct ipu_bus_device *adev)
 out_remove_pkg_dir_shared_buffer:
 	if (!isp->secure_mode)
 		ipu_cpd_free_pkg_dir(adev, isys->pkg_dir,
-					    isys->pkg_dir_dma_addr,
-					    isys->pkg_dir_size);
+						isys->pkg_dir_dma_addr,
+						isys->pkg_dir_size);
 remove_shared_buffer:
 	if (!isp->secure_mode)
 		ipu_buttress_unmap_fw_image(
@@ -1016,10 +1014,10 @@ static int isys_probe(struct ipu_bus_device *adev)
 		isys->short_packet_trace_buffer,
 		isys->short_packet_trace_buffer_dma_addr, &attrs);
 #else
-        dma_free_attrs(&adev->dev,
-                IPU_ISYS_SHORT_PACKET_TRACE_BUFFER_SIZE,
-                isys->short_packet_trace_buffer,
-                isys->short_packet_trace_buffer_dma_addr, attrs);
+		dma_free_attrs(&adev->dev,
+				IPU_ISYS_SHORT_PACKET_TRACE_BUFFER_SIZE,
+				isys->short_packet_trace_buffer,
+				isys->short_packet_trace_buffer_dma_addr, attrs);
 #endif
 	return rval;
 }
@@ -1031,20 +1029,20 @@ struct fwmsg {
 };
 
 static const struct fwmsg fw_msg[] = {
-	{ IA_CSS_ISYS_RESP_TYPE_STREAM_OPEN_DONE,    "STREAM_OPEN_DONE", 0 },
-	{ IA_CSS_ISYS_RESP_TYPE_STREAM_CLOSE_ACK,    "STREAM_CLOSE_ACK", 0 },
-	{ IA_CSS_ISYS_RESP_TYPE_STREAM_START_ACK,    "STREAM_START_ACK", 0 },
+	{ IA_CSS_ISYS_RESP_TYPE_STREAM_OPEN_DONE,	 "STREAM_OPEN_DONE", 0 },
+	{ IA_CSS_ISYS_RESP_TYPE_STREAM_CLOSE_ACK,	 "STREAM_CLOSE_ACK", 0 },
+	{ IA_CSS_ISYS_RESP_TYPE_STREAM_START_ACK,	 "STREAM_START_ACK", 0 },
 	{ IA_CSS_ISYS_RESP_TYPE_STREAM_START_AND_CAPTURE_ACK,
 	  "STREAM_START_AND_CAPTURE_ACK", 0 },
-	{ IA_CSS_ISYS_RESP_TYPE_STREAM_STOP_ACK,     "STREAM_STOP_ACK", 0 },
-	{ IA_CSS_ISYS_RESP_TYPE_STREAM_FLUSH_ACK,    "STREAM_FLUSH_ACK", 0 },
-	{ IA_CSS_ISYS_RESP_TYPE_PIN_DATA_READY,      "PIN_DATA_READY", 1 },
+	{ IA_CSS_ISYS_RESP_TYPE_STREAM_STOP_ACK,	 "STREAM_STOP_ACK", 0 },
+	{ IA_CSS_ISYS_RESP_TYPE_STREAM_FLUSH_ACK,	 "STREAM_FLUSH_ACK", 0 },
+	{ IA_CSS_ISYS_RESP_TYPE_PIN_DATA_READY,		 "PIN_DATA_READY", 1 },
 	{ IA_CSS_ISYS_RESP_TYPE_STREAM_CAPTURE_ACK,  "STREAM_CAPTURE_ACK", 0 },
 	{ IA_CSS_ISYS_RESP_TYPE_STREAM_START_AND_CAPTURE_DONE,
 	  "STREAM_START_AND_CAPTURE_DONE", 1 },
 	{ IA_CSS_ISYS_RESP_TYPE_STREAM_CAPTURE_DONE, "STREAM_CAPTURE_DONE", 1 },
-	{ IA_CSS_ISYS_RESP_TYPE_FRAME_SOF,           "FRAME_SOF", 1 },
-	{ IA_CSS_ISYS_RESP_TYPE_FRAME_EOF,           "FRAME_EOF", 1 },
+	{ IA_CSS_ISYS_RESP_TYPE_FRAME_SOF,			 "FRAME_SOF", 1 },
+	{ IA_CSS_ISYS_RESP_TYPE_FRAME_EOF,			 "FRAME_EOF", 1 },
 	{ -1, "UNKNOWN MESSAGE", 0 },
 };
 
@@ -1107,7 +1105,7 @@ static int isys_isr_one_ici(struct ipu_bus_device *adev)
 		return 0;
 
 	rval = ipu_lib_call_notrace_unlocked(stream_handle_response,
-						    isys, &resp);
+							isys, &resp);
 	if (rval < 0)
 		return rval;
 
@@ -1177,7 +1175,7 @@ static int isys_isr_one_ici(struct ipu_bus_device *adev)
 		break;
 	case IA_CSS_ISYS_RESP_TYPE_PIN_DATA_READY:
 		if (resp.pin_id <  IPU_ISYS_OUTPUT_PINS &&
-		    pipe->output_pins[resp.pin_id].pin_ready)
+			pipe->output_pins[resp.pin_id].pin_ready)
 			pipe->output_pins[resp.pin_id].pin_ready(pipe, &resp);
 		else
 			dev_err(&adev->dev,
@@ -1191,7 +1189,7 @@ static int isys_isr_one_ici(struct ipu_bus_device *adev)
 	case IA_CSS_ISYS_RESP_TYPE_STREAM_CAPTURE_DONE:
 
 		if(pipe->interlaced && pipe->short_packet_source ==
-            IPU_ISYS_SHORT_PACKET_FROM_TUNIT) {
+			IPU_ISYS_SHORT_PACKET_FROM_TUNIT) {
 			unsigned int i = pipe->short_packet_trace_index;
 			bool msg_matched = false;
 			unsigned int monitor_id;
@@ -1219,17 +1217,17 @@ static int isys_isr_one_ici(struct ipu_bus_device *adev)
 
 				i = (i + 1) % IPU_ISYS_SHORT_PACKET_TRACE_MSG_NUMBER;
 				if (msg.cmd == TRACE_REG_CMD_TYPE_D64MTS &&
-				    msg.monitor_id == monitor_id &&
-				    msg.fs == 1 &&
-				    msg.port == pipe->csi2->index &&
-				    msg.vc == pipe->vc &&
-				    delta_time_us < IPU_ISYS_SHORT_PACKET_TRACE_MAX_TIMESHIFT) {
-					    pipe->cur_field = (msg.sequence % 2) ?
-                            ICI_FIELD_TOP : ICI_FIELD_BOTTOM;
-					    pipe->short_packet_trace_index = i;
-					    msg_matched = true;
-					    dev_dbg(&isys->adev->dev,"Interlaced field ready. field = %d\n",
-                            pipe->cur_field);
+					msg.monitor_id == monitor_id &&
+					msg.fs == 1 &&
+					msg.port == pipe->csi2->index &&
+					msg.vc == pipe->vc &&
+					delta_time_us < IPU_ISYS_SHORT_PACKET_TRACE_MAX_TIMESHIFT) {
+						pipe->cur_field = (msg.sequence % 2) ?
+							ICI_FIELD_TOP : ICI_FIELD_BOTTOM;
+						pipe->short_packet_trace_index = i;
+						msg_matched = true;
+						dev_dbg(&isys->adev->dev, "Interlaced field ready. field = %d\n",
+							pipe->cur_field);
 					break;
 				}
 			} while (i != pipe->short_packet_trace_index);
@@ -1269,10 +1267,10 @@ static irqreturn_t isys_isr(struct ipu_bus_device *adev)
 	}
 
 	status = readl(isys->pdata->base +
-		       IPU_REG_ISYS_UNISPART_IRQ_STATUS);
+			   IPU_REG_ISYS_UNISPART_IRQ_STATUS);
 	do {
 		writel(status, isys->pdata->base +
-		       IPU_REG_ISYS_UNISPART_IRQ_CLEAR);
+			   IPU_REG_ISYS_UNISPART_IRQ_CLEAR);
 
 		if (isys->isr_csi2_bits & status) {
 			unsigned int i;
@@ -1281,7 +1279,7 @@ static irqreturn_t isys_isr(struct ipu_bus_device *adev)
 				if (status &
 				 IPU_ISYS_UNISPART_IRQ_CSI2(i)){
 
-				    ici_isys_csi2_isr(
+					ici_isys_csi2_isr(
 						&isys->ici_csi2[i]);
 				}
 			}
@@ -1300,7 +1298,7 @@ static irqreturn_t isys_isr(struct ipu_bus_device *adev)
 		 * events.
 		 */
 		if (status & IPU_ISYS_UNISPART_IRQ_SW &&
-		    !isys_isr_one_ici(adev))
+			!isys_isr_one_ici(adev))
 			status = IPU_ISYS_UNISPART_IRQ_SW;
 		else
 			status = 0;
diff --git a/drivers/media/platform/intel/ipu4-ici-bxt-p-pdata.c b/drivers/media/platform/intel/ipu4-ici-bxt-p-pdata.c
index 9d2a2a0..f6bf499 100644
--- a/drivers/media/platform/intel/ipu4-ici-bxt-p-pdata.c
+++ b/drivers/media/platform/intel/ipu4-ici-bxt-p-pdata.c
@@ -24,7 +24,7 @@
 #define ADV7481_CVBS_I2C_ADDRESS	0xe1
 static struct crlmodule_lite_platform_data adv7481_hdmi_pdata_lite = {
 #if (!IS_ENABLED(CONFIG_VIDEO_INTEL_UOS))
-// 	xshutdown GPIO pin unavailable on ACRN UOS
+//	xshutdown GPIO pin unavailable on ACRN UOS
 	.xshutdown = GPIO_BASE + 63,
 #endif
 	.lanes = ADV7481_HDMI_LANES,
@@ -51,7 +51,7 @@ static struct ipu_isys_subdev_info adv7481_hdmi_crl_sd_lite = {
 
 static struct crlmodule_lite_platform_data adv7481_cvbs_pdata_lite = {
 #if (!IS_ENABLED(CONFIG_VIDEO_INTEL_UOS))
-// 	xshutdown GPIO pin unavailable on ACRN UOS
+//	xshutdown GPIO pin unavailable on ACRN UOS
 	.xshutdown = GPIO_BASE + 63,
 #endif
 	.lanes = ADV7481_CVBS_LANES,
@@ -141,7 +141,7 @@ static struct crlmodule_lite_platform_data magna_ti964_pdata = {
 	.xshutdown = GPIO_BASE + 63,
 	.lanes = MAGNA_TI964_MIPI_LANES,
 	.ext_clk = 24000000,
-        .op_sys_clock = (uint64_t []){ 400000000 },
+		.op_sys_clock = (uint64_t []){ 400000000 },
 	.module_name = "MAGNA_TI964",
 };
 static struct ipu_isys_csi2_config magna_ti964_csi2_cfg = {
@@ -154,13 +154,188 @@ static struct ipu_isys_subdev_info magna_ti964_crl_sd = {
 		.board_info = {
 			I2C_BOARD_INFO(CRLMODULE_LITE_NAME, TI964_I2C_ADDRESS),
 			.platform_data = &magna_ti964_pdata,
-               },
+			   },
 		.i2c_adapter_id = 0,
-       }
+	   }
 };
 
 #endif
 
+#if IS_ENABLED(CONFIG_INTEL_IPU4_OV10635)
+#define OV10635_LANES			4
+#define OV10635_I2C_PHY_ADDR	0x60 /* 0x30 for 7bit addr */
+#define OV10635A_I2C_ADDRESS	0x61
+#define OV10635B_I2C_ADDRESS	0x62
+#define OV10635C_I2C_ADDRESS	0x63
+#define OV10635D_I2C_ADDRESS	0x64
+
+static struct crlmodule_lite_platform_data ov10635_pdata = {
+		.lanes = OV10635_LANES,
+		.ext_clk = 24000000,
+		.op_sys_clock = (uint64_t []){ 400000000 },
+		.module_name = "OV10635",
+		.id_string = "0xa6 0x35",
+
+		/*
+		 * The pin number of xshutdown will be determined
+		 * and replaced inside TI964 driver.
+		 * The number here stands for which GPIO to connect with.
+		 * 1 means to connect sensor xshutdown to GPIO1
+		 */
+		.xshutdown = 0,
+};
+#endif
+
+#if IS_ENABLED(CONFIG_VIDEO_TI964_ICI)
+#define TI964_I2C_ADAPTER	2
+#define TI964_I2C_ADAPTER_2	4
+#define TI964_I2C_ADDRESS	0x3d
+#define TI964_LANES		4
+
+static struct ipu_isys_csi2_config ti964_csi2_cfg = {
+	.nlanes = TI964_LANES,
+	.port = 0,
+};
+
+static struct ipu_isys_csi2_config ti964_csi2_cfg_2 = {
+	.nlanes = TI964_LANES,
+	.port = 4,
+};
+static struct ti964_subdev_info ti964_subdevs[] = {
+#ifdef CONFIG_INTEL_IPU4_OV10635
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635A_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER,
+		.rx_port = 0,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'a',
+	},
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635B_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER,
+		.rx_port = 1,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'b',
+	},
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635C_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER,
+		.rx_port = 2,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'c',
+	},
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635D_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER,
+		.rx_port = 3,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'd',
+	},
+#endif
+};
+static struct ti964_subdev_info ti964_subdevs_2[] = {
+#ifdef CONFIG_INTEL_IPU4_OV10635
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635A_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER_2,
+		.rx_port = 0,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'e',
+	},
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635B_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER_2,
+		.rx_port = 1,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'f',
+	},
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635C_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER_2,
+		.rx_port = 2,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'g',
+	},
+	{
+		.board_info = {
+			.type = CRLMODULE_LITE_NAME,
+			.addr = OV10635D_I2C_ADDRESS,
+			.platform_data = &ov10635_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER_2,
+		.rx_port = 3,
+		.phy_i2c_addr = OV10635_I2C_PHY_ADDR,
+		.suffix = 'h',
+	},
+#endif
+};
+static struct ti964_pdata ti964_pdata = {
+	.subdev_info = ti964_subdevs,
+	.subdev_num = ARRAY_SIZE(ti964_subdevs),
+	.reset_gpio = GPIO_BASE + 62,
+	.suffix = 'a',
+};
+
+static struct ipu_isys_subdev_info ti964_sd = {
+	.csi2 = &ti964_csi2_cfg,
+	.i2c = {
+		.board_info = {
+			 .type = "ti964",
+			 .addr = TI964_I2C_ADDRESS,
+			 .platform_data = &ti964_pdata,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER,
+	}
+};
+
+static struct ti964_pdata ti964_pdata_2 = {
+	.subdev_info = ti964_subdevs_2,
+	.subdev_num = ARRAY_SIZE(ti964_subdevs_2),
+	.reset_gpio = GPIO_BASE + 69,
+	.suffix = 'b',
+};
+
+static struct ipu_isys_subdev_info ti964_sd_2 = {
+	.csi2 = &ti964_csi2_cfg_2,
+	.i2c = {
+		.board_info = {
+			 .type = "ti964",
+			 .addr = TI964_I2C_ADDRESS,
+			 .platform_data = &ti964_pdata_2,
+		},
+		.i2c_adapter_id = TI964_I2C_ADAPTER_2,
+	}
+};
+#endif
+
 /*
  * Map buttress output sensor clocks to sensors -
  * this should be coming from ACPI
@@ -184,8 +359,12 @@ static struct ipu_isys_subdev_pdata pdata = {
 		&adv7481_eval_crl_sd_lite,
 		&adv7481b_eval_crl_sd_lite,
 #endif
+#ifdef CONFIG_VIDEO_TI964_ICI
+		&ti964_sd,
+		&ti964_sd_2,
+#endif
 #ifdef CONFIG_INTEL_IPU4_MAGNA_TI964
-               &magna_ti964_crl_sd,
+			   &magna_ti964_crl_sd,
 #endif
 		NULL,
 	},
diff --git a/include/media/crlmodule-lite.h b/include/media/crlmodule-lite.h
index ce812e8..ce0b18a 100644
--- a/include/media/crlmodule-lite.h
+++ b/include/media/crlmodule-lite.h
@@ -19,7 +19,9 @@ struct crlmodule_lite_platform_data {
 
 	int xshutdown;			/* gpio */
 	char module_name[16]; /* module name from ACPI */
+	const char *id_string;
 	char suffix; /* suffix to identify multi sensors, abcd.. */
+	unsigned int high_framevalid_flags; /* high framevaild flags*/
 };
 
 #endif /* __CRLMODULE_LITE_H  */
-- 
2.7.4

