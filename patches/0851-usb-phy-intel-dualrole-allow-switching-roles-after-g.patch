From 9d51af39aff71bfe1667fd085ab0a0d37c60f20f Mon Sep 17 00:00:00 2001
From: Tomasz Medrek <tomaszx.medrek@intel.com>
Date: Wed, 6 Dec 2017 19:37:05 +0100
Subject: [PATCH 0851/2302] usb: phy-intel-dualrole: allow switching roles
 after gadget/host unregistered

This fixes situation, where after gadget/host was unregistered (i.e.
ADBd was killed, which causes unregistration of functionfs gadget),
there was no longer possibility to switch role.

Ignoring the stop of gadget/host in set_peripheral/host prevents block
of otg_statemachine in intel_dr_phy_handle_notification, while all
checks for gadget and host can be leaved unchanged, so they can protect
the correct flow during first registration of host and gadget.

Change-Id: I07d65f63b71b7dbe4e2fa8b8e95edfbedc73432d
Signed-off-by: Tomasz Medrek <tomaszx.medrek@intel.com>
Acked-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
---
 drivers/usb/phy/phy-intel-dualrole.c | 20 +++++---------------
 1 file changed, 5 insertions(+), 15 deletions(-)

diff --git a/drivers/usb/phy/phy-intel-dualrole.c b/drivers/usb/phy/phy-intel-dualrole.c
index a49bd1e..0eaaf8e 100644
--- a/drivers/usb/phy/phy-intel-dualrole.c
+++ b/drivers/usb/phy/phy-intel-dualrole.c
@@ -107,14 +107,9 @@ static int intel_dr_phy_set_host(struct usb_otg *otg, struct usb_bus *host)
 {
 	struct intel_dr_phy *intel_phy;
 
-	if (!otg)
+	if (!otg || !host)
 		return -ENODEV;
 
-	if (!host) {
-		otg->host = NULL;
-		return -ENODEV;
-	}
-
 	intel_phy = container_of(otg->usb_phy, struct intel_dr_phy, phy);
 
 	otg->host = host;
@@ -133,14 +128,9 @@ static int intel_dr_phy_set_peripheral(struct usb_otg *otg,
 {
 	struct intel_dr_phy *intel_phy;
 
-	if (!otg)
+	if (!otg || !gadget)
 		return -ENODEV;
 
-	if (!gadget) {
-		otg->gadget = NULL;
-		return -ENODEV;
-	}
-
 	intel_phy = container_of(otg->usb_phy, struct intel_dr_phy, phy);
 
 	otg->gadget = gadget;
@@ -195,9 +185,9 @@ static int intel_dr_phy_handle_notification(struct notifier_block *nb,
 	}
 
 	/*
-	 * don't kick the state machine if host or device controller
-	 * is not registered. Just wait to kick it when set_host or
-	 * set_peripheral.
+	 * Don't kick the state machine if host or device controller
+	 * were never registered before. Just wait to kick it when
+	 * set_host or set_peripheral.
 	 * */
 
 	if (host && gadget)
-- 
2.7.4

