From 50dc882738d5a123dff1b9e8a95e9949d8500fd5 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Thu, 4 Jul 2019 15:23:15 +0800
Subject: [PATCH 06/86] phy: fix phy_id detection for C22 & C45 that varies in
 check condition

For C22, PHY ID may be all 0s and all 1s, so add the condition of all
0s back.

For C45, get_phy_c45_ids() set all 1s to phy_id to indicate there is
no C45 devices and set all 0s to phy_id if there is one C45 device
present. We add extra logics to check for valid device ID (Not All 1s
and All 0s) and only set phy_id=0 if at least one valid device ID is
present.

Fixes: 6436cbcd735a phy: fix phy_id detection also for broken hardware

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/phy/phy_device.c | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 7ddd91df99e3..c554a3754973 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -708,6 +708,7 @@ static int get_phy_c45_ids(struct mii_bus *bus, int addr, u32 *phy_id,
 	int i, reg_addr;
 	const int num_ids = ARRAY_SIZE(c45_ids->device_ids);
 	u32 *devs = &c45_ids->devices_in_package;
+	u32 valid_did = 0;
 
 	/* Find first non-zero Devices In package. Device zero is reserved
 	 * for 802.3 c45 complied PHYs, so don't probe it at first.
@@ -752,8 +753,16 @@ static int get_phy_c45_ids(struct mii_bus *bus, int addr, u32 *phy_id,
 		if (phy_reg < 0)
 			return -EIO;
 		c45_ids->device_ids[i] |= phy_reg;
+
+		if (c45_ids->device_ids[i] &&
+		    (c45_ids->device_ids[i] & 0x1fffffff) != 0x1fffffff)
+			valid_did |= (1 << i);
 	}
-	*phy_id = 0;
+	if (valid_did)
+		*phy_id = 0;
+	else
+		*phy_id = 0xffffffff;
+
 	return 0;
 }
 
@@ -820,9 +829,17 @@ struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45)
 	if (r)
 		return ERR_PTR(r);
 
-	/* If the phy_id is mostly Fs, there is no device there */
-	if ((phy_id & 0x1fffffff) == 0x1fffffff)
-		return ERR_PTR(-ENODEV);
+	/* For C45, get_phy_c45_ids() sets phy_id to all 1s to indicate
+	 * there is no device there. However, for C22, phy_id read from
+	 * PHY can be either all 1s or all 0s.
+	 */
+	if (is_c45) {
+		if ((phy_id & 0x1fffffff) == 0x1fffffff)
+			return ERR_PTR(-ENODEV);
+	} else {
+		if ((phy_id & 0x1fffffff) == 0x1fffffff || phy_id == 0x0)
+			return ERR_PTR(-ENODEV);
+	}
 
 	return phy_device_create(bus, addr, phy_id, is_c45, &c45_ids);
 }
-- 
2.17.1

