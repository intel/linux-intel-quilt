From 3d8a94e0cf7c4d421612421308f360be18164edf Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Tue, 19 Nov 2024 18:52:42 +0800
Subject: [PATCH 31/42] Revert "net: stmmac: support fp parameter of tc-taprio"

This reverts commit 15d8a407a54708cacefd5e36c069e7ba36a36050.
---
 .../net/ethernet/stmicro/stmmac/stmmac_tc.c   | 39 ++++++++-----------
 1 file changed, 17 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index 66b94a767f8c3..c9999cf1f2c61 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -932,9 +932,9 @@ static int tc_taprio_configure(struct stmmac_priv *priv,
 			       struct tc_taprio_qopt_offload *qopt)
 {
 	u32 size, wid = priv->dma_cap.estwid, dep = priv->dma_cap.estdep;
-	struct netlink_ext_ack *extack = qopt->mqprio.extack;
 	struct timespec64 time, current_time, qopt_time;
 	ktime_t current_time_ns;
+	bool fpe = false;
 	int i, ret = 0;
 	u64 ctr;
 
@@ -1019,12 +1019,16 @@ static int tc_taprio_configure(struct stmmac_priv *priv,
 
 		switch (qopt->entries[i].command) {
 		case TC_TAPRIO_CMD_SET_GATES:
+			if (fpe)
+				return -EINVAL;
 			break;
 		case TC_TAPRIO_CMD_SET_AND_HOLD:
 			gates |= BIT(0);
+			fpe = true;
 			break;
 		case TC_TAPRIO_CMD_SET_AND_RELEASE:
 			gates &= ~BIT(0);
+			fpe = true;
 			break;
 		default:
 			return -EOPNOTSUPP;
@@ -1055,6 +1059,11 @@ static int tc_taprio_configure(struct stmmac_priv *priv,
 
 	tc_taprio_map_maxsdu_txq(priv, qopt);
 
+	if (fpe && !priv->dma_cap.fpesel) {
+		mutex_unlock(&priv->est_lock);
+		return -EOPNOTSUPP;
+	}
+
 	ret = stmmac_est_configure(priv, priv, priv->est,
 				   priv->plat->clk_ptp_rate);
 	mutex_unlock(&priv->est_lock);
@@ -1063,11 +1072,6 @@ static int tc_taprio_configure(struct stmmac_priv *priv,
 		goto disable;
 	}
 
-	ret = stmmac_fpe_map_preemption_class(priv, priv->dev, extack,
-					      qopt->mqprio.preemptible_tcs);
-	if (ret)
-		goto disable;
-
 	netdev_info(priv->dev, "configured EST\n");
 
 	return 0;
@@ -1086,8 +1090,11 @@ static int tc_taprio_configure(struct stmmac_priv *priv,
 		mutex_unlock(&priv->est_lock);
 	}
 
-	stmmac_fpe_map_preemption_class(priv, priv->dev, extack, 0);
-
+	stmmac_fpe_configure(priv, priv->ioaddr,
+			     &priv->fpe_cfg,
+			     priv->plat->tx_queues_to_use,
+			     priv->plat->rx_queues_to_use,
+			     false, false);
 	netdev_info(priv->dev, "disabled FPE\n");
 
 	return ret;
@@ -1144,18 +1151,6 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 	return err;
 }
 
-static int tc_setup_taprio_without_fpe(struct stmmac_priv *priv,
-				       struct tc_taprio_qopt_offload *qopt)
-{
-	if (!qopt->mqprio.preemptible_tcs)
-		return tc_setup_taprio(priv, qopt);
-
-	NL_SET_ERR_MSG_MOD(qopt->mqprio.extack,
-			   "taprio with FPE is not implemented for this MAC");
-
-	return -EOPNOTSUPP;
-}
-
 static int tc_setup_etf(struct stmmac_priv *priv,
 			struct tc_etf_qopt_offload *qopt)
 {
@@ -1272,7 +1267,7 @@ const struct stmmac_tc_ops dwmac4_tc_ops = {
 	.setup_cls_u32 = tc_setup_cls_u32,
 	.setup_cbs = tc_setup_cbs,
 	.setup_cls = tc_setup_cls,
-	.setup_taprio = tc_setup_taprio_without_fpe,
+	.setup_taprio = tc_setup_taprio,
 	.setup_etf = tc_setup_etf,
 	.query_caps = tc_query_caps,
 	.setup_mqprio = tc_setup_mqprio_unimplemented,
@@ -1294,7 +1289,7 @@ const struct stmmac_tc_ops dwxgmac_tc_ops = {
 	.setup_cls_u32 = tc_setup_cls_u32,
 	.setup_cbs = tc_setup_cbs,
 	.setup_cls = tc_setup_cls,
-	.setup_taprio = tc_setup_taprio_without_fpe,
+	.setup_taprio = tc_setup_taprio,
 	.setup_etf = tc_setup_etf,
 	.query_caps = tc_query_caps,
 	.setup_mqprio = tc_setup_mqprio_unimplemented,
-- 
2.25.1

