From c23ac60bcc0bfa15149bdabf13ba82a3c8c9305a Mon Sep 17 00:00:00 2001
From: "Sun, Yi J" <yi.j.sun@intel.com>
Date: Tue, 13 Nov 2018 15:14:41 +0800
Subject: [PATCH 0853/1214] fix the race in cbc buffer queue

there is possible race in cbc_buffer_release, there is possible race
in cbc_buffer_release in memset.

Another issue is the cbc_buffer_queue read and write is defined as u8,
it will cause the read write overflow in queue and dequeue.

Change-Id: I1a853472e7c8940287b26a2cde993d474073b442
Signed-off-by: Sun, Yi J <yi.j.sun@intel.com>
Signed-off-by: he, bo <bo.he@intel.com>
Signed-off-by: zhang jun <jun.zhang@intel.com>
Tracked-On: PKT-1541
---
 drivers/tty/cbc/cbc_memory.c | 20 +++++++-------------
 1 file changed, 7 insertions(+), 13 deletions(-)

diff --git a/drivers/tty/cbc/cbc_memory.c b/drivers/tty/cbc/cbc_memory.c
index 69cf65e..716d431 100644
--- a/drivers/tty/cbc/cbc_memory.c
+++ b/drivers/tty/cbc/cbc_memory.c
@@ -91,17 +91,11 @@ struct cbc_buffer *cbc_memory_pool_get_buffer(struct cbc_memory_pool *pool)
 
 void cbc_buffer_release(struct cbc_buffer *buffer)
 {
-	int tmp;
 
 	if (!buffer)
 		return;
 
-	atomic_read(&buffer->refcount);
-
-	tmp = atomic_dec_return(&buffer->refcount);
-	if (tmp == 0)
-		memset(buffer->data, 0xCD, CBC_BUFFER_SIZE);
-
+	atomic_dec(&buffer->refcount);
 }
 
 void cbc_buffer_increment_ref(struct cbc_buffer *buffer)
@@ -122,13 +116,13 @@ int cbc_buffer_queue_enqueue(struct cbc_buffer_queue *queue,
 	if (!queue || !buffer)
 		return 0;
 
-	if (queue->read + CBC_QUEUE_LENGTH == queue->write) {
+	if (queue->read == ((queue->write + 1) & CBC_QUEUE_BM)) {
 		pr_err("cbc buffer queue full\n");
 		return 0;
 	}
+	queue->queue[queue->write] = buffer;
+	queue->write = ((++queue->write) & CBC_QUEUE_BM);
 
-	queue->queue[queue->write & CBC_QUEUE_BM] = buffer;
-	queue->write++;
 	return 1;
 }
 
@@ -144,9 +138,9 @@ struct cbc_buffer *cbc_buffer_queue_dequeue(struct cbc_buffer_queue *queue)
 		return buffer;
 	}
 
-	buffer = queue->queue[queue->read & CBC_QUEUE_BM];
-	queue->queue[queue->read & CBC_QUEUE_BM] = NULL;
-	queue->read++;
+	buffer = queue->queue[queue->read];
+	queue->queue[queue->read] = NULL;
+	queue->read = ((++queue->read) & CBC_QUEUE_BM);
 
 	return buffer;
 }
-- 
2.7.4

