From 6d66a95c5f6b0a787fc1b3374c698e58a33b44dc Mon Sep 17 00:00:00 2001
From: Gustaw Lewandowski <gustaw.lewandowski@intel.com>
Date: Fri, 15 Mar 2019 01:15:41 +0100
Subject: [PATCH 034/154] ASoC: Intel: Skylake: Add asynch time info feature

Implementation of asynch time info - feature named HammockHarbor.
Driver gets pcm_get_time_info request from user space and sends HHTSE
to last copier instance (BE) which talks to SSP. FW returns timestamp
data asynch via IPC notification, so pcm_get_time_info call is blocked
waiting for it.

Change-Id: I57877f5d347e59354cfebf9480c709fcb96d2ee6
Signed-off-by: Gustaw Lewandowski <gustaw.lewandowski@intel.com>
---
 sound/soc/intel/skylake/skl-pcm.c      | 76 +++++++++++++++++++++++++-
 sound/soc/intel/skylake/skl-sst-ipc.c  | 40 ++++++++++++++
 sound/soc/intel/skylake/skl-sst-ipc.h  |  8 +++
 sound/soc/intel/skylake/skl-topology.c |  2 +
 sound/soc/intel/skylake/skl-topology.h | 10 ++++
 5 files changed, 134 insertions(+), 2 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index e0a274e33aae..0b9d61cf7a45 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -35,7 +35,8 @@ static const struct snd_pcm_hardware azx_pcm_hw = {
 				 SNDRV_PCM_INFO_SYNC_START |
 				 SNDRV_PCM_INFO_HAS_WALL_CLOCK | /* legacy */
 				 SNDRV_PCM_INFO_HAS_LINK_ATIME |
-				 SNDRV_PCM_INFO_NO_PERIOD_WAKEUP),
+				 SNDRV_PCM_INFO_NO_PERIOD_WAKEUP |
+				 SNDRV_PCM_INFO_HAS_LINK_SYNCHRONIZED_ATIME),
 	.formats =		SNDRV_PCM_FMTBIT_S16_LE |
 				SNDRV_PCM_FMTBIT_S32_LE |
 				SNDRV_PCM_FMTBIT_S24_LE,
@@ -1246,6 +1247,41 @@ static u64 skl_adjust_codec_delay(struct snd_pcm_substream *substream,
 	return (nsec > codec_nsecs) ? nsec - codec_nsecs : 0;
 }
 
+static struct skl_module_cfg *
+skl_find_first_be_mconfig(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *be_dai = NULL;
+	struct snd_soc_dpcm *dpcm;
+	struct snd_pcm_substream *be_substream;
+	struct snd_soc_pcm_runtime *be_rtd;
+	struct skl_module_cfg *mconfig;
+
+	/* find first BE copier for given substream */
+	for_each_dpcm_be(rtd, substream->stream, dpcm) {
+		be_rtd = dpcm->be;
+		be_substream = snd_soc_dpcm_get_substream(be_rtd,
+				substream->stream);
+		be_rtd = snd_pcm_substream_chip(be_substream);
+		be_dai = be_rtd->cpu_dai;
+		break;
+	}
+
+	if (!be_dai) {
+		dev_err(rtd->dev, "%s: Could not find BE DAI\n",
+			__func__);
+		return NULL;
+	}
+
+	mconfig = skl_tplg_be_get_cpr_module(be_dai, substream->stream);
+	if (!mconfig)
+		dev_err(rtd->dev, "%s: Could not find copier in BE\n",
+			__func__);
+
+	return mconfig;
+}
+
+#define SKL_LOCAL_TSCTRL_HHTSE (1 << 7)
 static int skl_get_time_info(struct snd_pcm_substream *substream,
 			struct timespec *system_ts, struct timespec *audio_ts,
 			struct snd_pcm_audio_tstamp_config *audio_tstamp_config,
@@ -1253,7 +1289,9 @@ static int skl_get_time_info(struct snd_pcm_substream *substream,
 {
 	struct hdac_ext_stream *sstream = get_hdac_ext_stream(substream);
 	struct hdac_stream *hstr = hdac_stream(sstream);
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	u64 nsec;
+	int ret = 0;
 
 	if ((substream->runtime->hw.info & SNDRV_PCM_INFO_HAS_LINK_ATIME) &&
 		(audio_tstamp_config->type_requested == SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK)) {
@@ -1270,12 +1308,46 @@ static int skl_get_time_info(struct snd_pcm_substream *substream,
 		audio_tstamp_report->actual_type = SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK;
 		audio_tstamp_report->accuracy_report = 1; /* rest of struct is valid */
 		audio_tstamp_report->accuracy = 42; /* 24MHzWallClk == 42ns resolution */
+	} else if ((substream->runtime->hw.info &
+			SNDRV_PCM_INFO_HAS_LINK_SYNCHRONIZED_ATIME) &&
+			(audio_tstamp_config->type_requested ==
+			 SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_SYNCHRONIZED)) {
+		struct skl_module_cfg *mconfig =
+					skl_find_first_be_mconfig(substream);
+		u32 local_ts_control = SKL_LOCAL_TSCTRL_HHTSE;
+		struct skl_dev *skl = bus_to_skl(hstr->bus);
+
+		if (!mconfig)
+			return -EINVAL;
+
+		ret = skl_set_module_params(skl, &local_ts_control,
+			sizeof(local_ts_control), SKL_COPIER_TIMESTAMP_INIT,
+			mconfig);
+		if (ret < 0) {
+			dev_err(rtd->dev, "%s: Could not send timestamp init\n",
+				__func__);
+			return ret;
+		}
 
+		ret = wait_for_completion_interruptible_timeout(
+			&mconfig->ts_completion, msecs_to_jiffies(1000));
+		if (ret <= 0) {
+			dev_warn(rtd->dev, "%s: timestamp notification timeout\n",
+				__func__);
+			return ret ? ret : -ETIMEDOUT;
+		}
+		snd_pcm_gettime(substream->runtime, system_ts);
+		audio_tstamp_report->actual_type =
+					audio_tstamp_config->type_requested;
+		/* rest of struct is valid */
+		audio_tstamp_report->accuracy_report = 1;
+		*system_ts = ns_to_timespec(mconfig->ts.local_walclk);
+		*audio_ts = ns_to_timespec(mconfig->ts.time_stamp_cnt);
 	} else {
 		audio_tstamp_report->actual_type = SNDRV_PCM_AUDIO_TSTAMP_TYPE_DEFAULT;
 	}
 
-	return 0;
+	return ret;
 }
 
 static const struct snd_pcm_ops skl_platform_ops = {
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 780692cb25ae..7f565b5d6238 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -13,6 +13,7 @@
 #include "skl-sst-ipc.h"
 #include "skl-topology.h"
 #include "sound/hdaudio_ext.h"
+#include "skl-topology.h"
 
 
 #define IPC_IXC_STATUS_BITS		24
@@ -278,6 +279,12 @@ enum skl_ipc_module_msg {
 	IPC_MOD_SET_D0IX = 8
 };
 
+struct skl_event_timestamp_notify {
+	u32 module_instance_id;
+	u32 node_id;
+	struct skl_event_timestamp ts;
+} __packed;
+
 void skl_ipc_tx_data_copy(struct ipc_message *msg, char *tx_data,
 		size_t tx_size)
 {
@@ -343,6 +350,36 @@ static struct ipc_message *skl_ipc_reply_get_msg(struct sst_generic_ipc *ipc,
 
 }
 
+static
+int skl_process_timestamp_notification(struct skl_dev *skl)
+{
+	struct skl_module_cfg *mconfig;
+	struct skl_event_timestamp_notify ts_notif;
+	struct skl_pipeline *ppl;
+	struct skl_pipe_module *m;
+	u32 instance_id;
+	int copier_id = skl_get_module_id(skl, &skl_copier_mod_uuid);
+	int ret = -ENXIO;
+
+	sst_dsp_inbox_read(skl->dsp, &ts_notif, sizeof(ts_notif));
+	instance_id = ts_notif.module_instance_id & IPC_MOD_INSTANCE_ID_MASK;
+	dev_dbg(skl->dev, "%s copier instance:%d\n", __func__, instance_id);
+
+	list_for_each_entry(ppl, &skl->ppl_list, node)
+		list_for_each_entry(m, &ppl->pipe->w_list, node) {
+			mconfig = m->w->priv;
+			if ((mconfig->id.module_id == copier_id) &&
+			    (mconfig->id.pvt_id == instance_id)) {
+				mconfig->ts = ts_notif.ts;
+				complete(&mconfig->ts_completion);
+				ret = 0;
+				break;
+			}
+		}
+
+	return ret;
+}
+
 int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 		struct skl_ipc_header header)
 {
@@ -378,6 +415,9 @@ int skl_ipc_process_notification(struct sst_generic_ipc *ipc,
 			skl->miscbdcg_disabled = true;
 			break;
 
+		case IPC_GLB_NOTIFY_TIMESTAMP_CAPTURED:
+			return skl_process_timestamp_notification(skl);
+
 		default:
 			dev_err(ipc->dev, "ipc: Unhandled error msg=%x\n",
 						header.primary);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 07c028c508d5..5f12228df8bd 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -138,6 +138,10 @@ struct skl_base_outfmt_cfg {
 	struct skl_audio_data_format out_fmt;
 } __packed;
 
+static const guid_t skl_copier_mod_uuid =
+	GUID_INIT(0x9BA00C83, 0xCA12, 0x4A83, 0x94, 0x3C,
+		0x1F, 0xA2, 0xE8, 0x2F, 0x9D, 0xDA);
+
 enum skl_ipc_pipeline_state {
 	PPL_INVALID_STATE =	0,
 	PPL_UNINITIALIZED =	1,
@@ -149,6 +153,10 @@ enum skl_ipc_pipeline_state {
 	PPL_RESTORED =		7
 };
 
+enum skl_copier_runtime_param {
+	SKL_COPIER_TIMESTAMP_INIT = 1,
+};
+
 struct skl_ipc_dxstate_info {
 	u32 core_mask;
 	u32 dx_mask;
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 161ac6f0c25d..1748768b5f9d 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -2884,6 +2884,8 @@ static int skl_tplg_widget_load(struct snd_soc_component *cmpnt, int index,
 	if (!mconfig)
 		return -ENOMEM;
 
+	init_completion(&mconfig->ts_completion);
+
 	if (skl->nr_modules == 0) {
 		mconfig->module = devm_kzalloc(bus->dev,
 				sizeof(*mconfig->module), GFP_KERNEL);
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index f5b67026111c..9de1b7702689 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -13,6 +13,7 @@
 #define __SKL_TOPOLOGY_H__
 
 #include <linux/types.h>
+#include <linux/completion.h>
 
 #include <sound/hdaudio_ext.h>
 #include <sound/soc.h>
@@ -253,6 +254,13 @@ struct skl_module {
 	struct skl_module_iface formats[SKL_MAX_MODULE_FORMATS];
 };
 
+struct skl_event_timestamp {
+	u32 isoffset;
+	u64 local_sample;
+	u64 local_walclk;
+	u64 time_stamp_cnt;
+} __packed;
+
 struct skl_module_cfg {
 	u8 guid[16];
 	struct skl_module_inst_id id;
@@ -291,6 +299,8 @@ struct skl_module_cfg {
 	struct skl_pipe *pipe;
 	struct skl_specific_cfg formats_config;
 	struct skl_pipe_mcfg mod_cfg[SKL_MAX_MODULES_IN_PIPE];
+	struct skl_event_timestamp ts;
+	struct completion ts_completion;
 };
 
 struct skl_algo_data {
-- 
2.17.1

