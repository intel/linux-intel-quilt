From 118a2bce7147122e53a03aa4132a4b4e843f92b7 Mon Sep 17 00:00:00 2001
From: Chen Meng J <meng.j.chen@intel.com>
Date: Tue, 26 Mar 2019 13:49:58 +0800
Subject: [PATCH 1446/1505] media: intel-ipu4: ti960: split ti953 code

split into ti953-ser.c and ti960-des.c.
apply powerup sequence, reset, or init serializer, follow pdata.

Change-Id: I2d1d3c2e6b8748681ee1816fb3e88ff7604ede8a
Tracked-On: PKT-2588
Tracked-On: #JIIAP-736
Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
Signed-off-by: Meng Wei <wei.meng@intel.com>
---
 drivers/media/i2c/Makefile                 |   1 +
 drivers/media/i2c/ti953-ser.c              | 133 +++++++
 drivers/media/i2c/ti953.h                  | 125 +++++++
 drivers/media/i2c/{ti960.c => ti960-des.c} | 387 +++++----------------
 drivers/media/i2c/ti960-reg.h              | 103 +-----
 5 files changed, 348 insertions(+), 401 deletions(-)
 create mode 100644 drivers/media/i2c/ti953-ser.c
 create mode 100644 drivers/media/i2c/ti953.h
 rename drivers/media/i2c/{ti960.c => ti960-des.c} (82%)

diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 7c6a6ba46dc9..b3a52636994e 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -114,6 +114,7 @@ obj-$(CONFIG_SDR_MAX2175) += max2175.o
 obj-$(CONFIG_VIDEO_CRLMODULE) += crlmodule/
 obj-$(CONFIG_VIDEO_TI964) += ti964.o
 obj-$(CONFIG_VIDEO_MAX9286) += max9286.o
+ti960-objs := ti953-ser.o ti960-des.o
 obj-$(CONFIG_VIDEO_TI960) += ti960.o
 obj-$(CONFIG_VIDEO_CRLMODULE_LITE) += crlmodule-lite/
 obj-$(CONFIG_VIDEO_INTEL_ICI) += ici/
diff --git a/drivers/media/i2c/ti953-ser.c b/drivers/media/i2c/ti953-ser.c
new file mode 100644
index 000000000000..70cefcc3a4a7
--- /dev/null
+++ b/drivers/media/i2c/ti953-ser.c
@@ -0,0 +1,133 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2018 Intel Corporation
+
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/wait.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/version.h>
+
+#include <media/media-device.h>
+#include <media/media-entity.h>
+#include <media/ti960.h>
+#include <media/crlmodule.h>
+#include <media/v4l2-device.h>
+#include <media/videobuf2-core.h>
+
+#include "ti960-reg.h"
+#include "ti953.h"
+
+
+int ti953_reg_write(struct v4l2_subdev *sd, unsigned short rx_port,
+	unsigned short ser_alias, unsigned char reg, unsigned char val)
+{
+	int ret;
+	int retry, timeout = 10;
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	dev_dbg(sd->dev, "%s port %d, ser_alias %x, reg %x, val %x",
+		__func__, rx_port, ser_alias, reg, val);
+	client->addr = ser_alias;
+	for (retry = 0; retry < timeout; retry++) {
+		ret = i2c_smbus_write_byte_data(client, reg, val);
+		if (ret < 0)
+			usleep_range(5000, 6000);
+		else
+			break;
+	}
+
+	client->addr = TI960_I2C_ADDRESS;
+	if (retry >= timeout) {
+		dev_err(sd->dev,
+			"%s:write reg failed: port=%2x, addr=%2x, reg=%2x\n",
+			__func__, rx_port, ser_alias, reg);
+		return -EREMOTEIO;
+	}
+
+	return 0;
+}
+
+int ti953_reg_read(struct v4l2_subdev *sd, unsigned short rx_port,
+	unsigned short ser_alias, unsigned char reg, unsigned char *val)
+{
+	int retry, timeout = 10;
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	client->addr = ser_alias;
+	for (retry = 0; retry < timeout; retry++) {
+		*val = i2c_smbus_read_byte_data(client, reg);
+		if (*val < 0)
+			usleep_range(5000, 6000);
+		else
+			break;
+	}
+
+	client->addr = TI960_I2C_ADDRESS;
+	if (retry >= timeout) {
+		dev_err(sd->dev,
+			"%s:read reg failed: port=%2x, addr=%2x, reg=%2x\n",
+			__func__, rx_port, ser_alias, reg);
+		return -EREMOTEIO;
+	}
+
+	return 0;
+}
+
+bool ti953_detect(struct v4l2_subdev *sd, unsigned short rx_port,
+	 unsigned short ser_alias)
+{
+	bool ret = false;
+	int i;
+	int rval;
+	unsigned char val;
+
+	for (i = 0; i < ARRAY_SIZE(ti953_FPD3_RX_ID); i++) {
+		rval = ti953_reg_read(sd, rx_port, ser_alias,
+			ti953_FPD3_RX_ID[i].reg, &val);
+		if (rval) {
+			dev_err(sd->dev, "port %d, ti953 write timeout %d\n",
+				 rx_port, rval);
+			break;
+		}
+		if (val != ti953_FPD3_RX_ID[i].val_expected)
+			break;
+	}
+
+	if (i == ARRAY_SIZE(ti953_FPD3_RX_ID))
+		ret = true;
+
+	return ret;
+}
+
+int ti953_init(struct v4l2_subdev *sd, unsigned short rx_port,
+	 unsigned short ser_alias)
+{
+	int i, rval;
+
+	for (i = 0; i < ARRAY_SIZE(ti953_init_settings); i++) {
+		rval = ti953_reg_write(sd, rx_port, ser_alias,
+			ti953_init_settings[i].reg,
+			ti953_init_settings[i].val);
+		if (rval) {
+			dev_err(sd->dev, "port %d, ti953 write timeout %d\n",
+				 0, rval);
+			break;
+		}
+	}
+
+	for (i = 0; i < ARRAY_SIZE(ti953_init_settings_clk); i++) {
+		rval = ti953_reg_write(sd, rx_port, ser_alias,
+			ti953_init_settings_clk[i].reg,
+			ti953_init_settings_clk[i].val);
+		if (rval) {
+			dev_err(sd->dev, "port %d, ti953 write timeout %d\n",
+				 0, rval);
+			break;
+		}
+	}
+
+	return 0;
+}
diff --git a/drivers/media/i2c/ti953.h b/drivers/media/i2c/ti953.h
new file mode 100644
index 000000000000..b33baeff867b
--- /dev/null
+++ b/drivers/media/i2c/ti953.h
@@ -0,0 +1,125 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2019 Intel Corporation */
+
+#ifndef TI953_H
+#define TI953_H
+
+struct ti953_register_write {
+	u8 reg;
+	u8 val;
+};
+
+struct ti953_register_devid {
+	u8 reg;
+	u8 val_expected;
+};
+
+
+/* register definition */
+#define TI953_RESET_CTL		0x1
+#define TI953_LOCAL_GPIO_DATA	0xd
+#define TI953_GPIO_INPUT_CTRL	0xe
+
+/* register value definition */
+#define TI953_DIGITAL_RESET_1	0x2
+#define TI953_GPIO0_RMTEN	0x10
+#define TI953_GPIO0_OUT		0x1
+#define TI953_GPIO1_OUT		(0x1 << 1)
+#define TI953_GPIO_OUT_EN	0xf0
+
+static const struct ti953_register_write ti953_init_settings[] = {
+	{0x4c, 0x01}, /* ox03a10 init sequence */
+	{0xb0, 0x04},
+	{0xb1, 0x03},
+	{0xb2, 0x25},
+	{0xb1, 0x13},
+	{0xb2, 0x25},
+	{0xb0, 0x04},
+	{0xb1, 0x04},
+	{0xb2, 0x30},
+	{0xb1, 0x14},
+	{0xb2, 0x30},
+	{0xb0, 0x04},
+	{0xb1, 0x06},
+	{0xb2, 0x40},
+	{0x42, 0x01},
+	{0x41, 0x93},
+	{0x4c, 0x12},
+	{0xb0, 0x08},
+	{0xb1, 0x03},
+	{0xb2, 0x25},
+	{0xb1, 0x13},
+	{0xb2, 0x25},
+	{0xb0, 0x08},
+	{0xb1, 0x04},
+	{0xb2, 0x30},
+	{0xb1, 0x14},
+	{0xb2, 0x30},
+	{0xb0, 0x08},
+	{0xb1, 0x06},
+	{0xb2, 0x40},
+	{0x42, 0x01},
+	{0x41, 0x93},
+	{0x4c, 0x24},
+	{0xb0, 0x0c},
+	{0xb1, 0x03},
+	{0xb2, 0x25},
+	{0xb1, 0x13},
+	{0xb2, 0x25},
+	{0xb0, 0x0c},
+	{0xb1, 0x04},
+	{0xb2, 0x30},
+	{0xb1, 0x14},
+	{0xb2, 0x30},
+	{0xb0, 0x0c},
+	{0xb1, 0x06},
+	{0xb2, 0x40},
+	{0x42, 0x01},
+	{0x41, 0x93},
+	{0x4c, 0x38},
+	{0xb0, 0x10},
+	{0xb1, 0x03},
+	{0xb2, 0x25},
+	{0xb1, 0x13},
+	{0xb2, 0x25},
+	{0xb0, 0x10},
+	{0xb1, 0x04},
+	{0xb2, 0x30},
+	{0xb1, 0x14},
+	{0xb2, 0x30},
+	{0xb0, 0x10},
+	{0xb1, 0x06},
+	{0xb2, 0x40},
+	{0x42, 0x01},
+	{0x41, 0x93},
+};
+
+static const struct ti953_register_write ti953_init_settings_clk[] = {
+	{0x06, 0x41},
+	{0x07, 0x28},
+};
+
+static const struct ti953_register_devid ti953_FPD3_RX_ID[] = {
+	{0xf0, 0x5f},
+	{0xf1, 0x55},
+	{0xf2, 0x42},
+	{0xf3, 0x39},
+	{0xf4, 0x35},
+	{0xf5, 0x33},
+};
+
+
+int ti953_reg_write(struct v4l2_subdev *sd, unsigned short rx_port,
+		unsigned short ser_alias, unsigned char reg, unsigned char val);
+
+int ti953_reg_read(struct v4l2_subdev *sd, unsigned short rx_port,
+		unsigned short ser_alias, unsigned char reg,
+		unsigned char *val);
+
+bool ti953_detect(struct v4l2_subdev *sd, unsigned short rx_port,
+		unsigned short ser_alias);
+
+int ti953_init(struct v4l2_subdev *sd, unsigned short rx_port,
+		unsigned short ser_alias);
+
+#endif
diff --git a/drivers/media/i2c/ti960.c b/drivers/media/i2c/ti960-des.c
similarity index 82%
rename from drivers/media/i2c/ti960.c
rename to drivers/media/i2c/ti960-des.c
index 2430fcc85527..3414b8a75983 100644
--- a/drivers/media/i2c/ti960.c
+++ b/drivers/media/i2c/ti960-des.c
@@ -18,6 +18,7 @@
 #include <media/videobuf2-core.h>
 
 #include "ti960-reg.h"
+#include "ti953.h"
 
 struct ti960_subdev {
 	struct v4l2_subdev *sd;
@@ -126,86 +127,6 @@ static struct regmap_config ti960_reg_config16 = {
 	.reg_format_endian = REGMAP_ENDIAN_BIG,
 };
 
-static int ti953_reg_write(struct ti960 *va, unsigned short rx_port,
-	unsigned short ser_alias, unsigned char reg, unsigned char val)
-{
-	int ret;
-	int retry, timeout = 10;
-	struct i2c_client *client = v4l2_get_subdevdata(&va->sd);
-
-	dev_dbg(va->sd.dev, "%s port %d, ser_alias %x, reg %x, val %x",
-		__func__, rx_port, ser_alias, reg, val);
-	client->addr = ser_alias;
-	for (retry = 0; retry < timeout; retry++) {
-		ret = i2c_smbus_write_byte_data(client, reg, val);
-		if (ret < 0) {
-			dev_err(va->sd.dev, "ti953 reg write ret=%x", ret);
-			usleep_range(5000, 6000);
-		} else
-			break;
-	}
-
-	client->addr = TI960_I2C_ADDRESS;
-	if (retry >= timeout) {
-		dev_err(va->sd.dev,
-			"%s:write reg failed: port=%2x, addr=%2x, reg=%2x\n",
-			__func__, rx_port, ser_alias, reg);
-		return -EREMOTEIO;
-	}
-
-	return 0;
-}
-
-static int ti953_reg_read(struct ti960 *va, unsigned short rx_port,
-	unsigned short ser_alias, unsigned char reg, unsigned char *val)
-{
-	int retry, timeout = 10;
-	struct i2c_client *client = v4l2_get_subdevdata(&va->sd);
-
-	client->addr = ser_alias;
-	for (retry = 0; retry < timeout; retry++) {
-		*val = i2c_smbus_read_byte_data(client, reg);
-		if (*val < 0)
-			usleep_range(5000, 6000);
-		else
-			break;
-	}
-
-	client->addr = TI960_I2C_ADDRESS;
-	if (retry >= timeout) {
-		dev_err(va->sd.dev,
-			"%s:read reg failed: port=%2x, addr=%2x, reg=%2x\n",
-			__func__, rx_port, ser_alias, reg);
-		return -EREMOTEIO;
-	}
-
-	return 0;
-}
-
-static bool ti953_detect(struct ti960 *va, unsigned short rx_port, unsigned short ser_alias)
-{
-	bool ret = false;
-	int i;
-	int rval;
-	unsigned char val;
-
-	for (i = 0; i < ARRAY_SIZE(ti953_FPD3_RX_ID); i++) {
-		rval = ti953_reg_read(va, rx_port, ser_alias,
-			ti953_FPD3_RX_ID[i].reg, &val);
-		if (rval) {
-			dev_err(va->sd.dev, "port %d, ti953 write timeout %d\n", rx_port, rval);
-			break;
-		}
-		if (val != ti953_FPD3_RX_ID[i].val_expected)
-			break;
-	}
-
-	if (i == ARRAY_SIZE(ti953_FPD3_RX_ID))
-		ret = true;
-
-	return ret;
-}
-
 static int ti960_reg_read(struct ti960 *va, unsigned char reg, unsigned int *val)
 {
 	int ret, retry, timeout = 10;
@@ -355,12 +276,13 @@ static int ti960_fsin_gpio_init(struct ti960 *va, unsigned short rx_port,
 	}
 
 	/* enable output and remote control */
-	ti953_reg_write(va, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL, TI953_GPIO_OUT_EN);
-	rval = ti953_reg_read(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-			&gpio_data);
+	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL,
+			TI953_GPIO_OUT_EN);
+	rval = ti953_reg_read(&va->sd, rx_port, ser_alias,
+			TI953_LOCAL_GPIO_DATA, &gpio_data);
 	if (rval)
 		return rval;
-	ti953_reg_write(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
+	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
 			gpio_data | TI953_GPIO0_RMTEN << fsin_gpio);
 
 	return rval;
@@ -643,11 +565,45 @@ static int ti960_map_subdevs_addr(struct ti960 *va)
 	return 0;
 }
 
+/*
+ * FIXME: workaround, reset to avoid block.
+ */
+static int reset_sensor(struct ti960 *va, unsigned short rx_port,
+		unsigned short ser_alias, int reset)
+{
+	int rval;
+	unsigned char gpio_data;
+
+	rval = ti953_reg_read(&va->sd, rx_port, ser_alias,
+			TI953_LOCAL_GPIO_DATA,
+			&gpio_data);
+	if (rval)
+		return rval;
+
+	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL,
+			TI953_GPIO_OUT_EN);
+	gpio_data &= ~(TI953_GPIO0_RMTEN << reset);
+	gpio_data &= ~(TI953_GPIO0_OUT << reset);
+	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
+			gpio_data);
+	msleep(50);
+	gpio_data |= TI953_GPIO0_OUT << reset;
+	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
+			gpio_data);
+
+	return 0;
+}
+
 static int ti960_registered(struct v4l2_subdev *subdev)
 {
 	struct ti960 *va = to_ti960(subdev);
 	struct i2c_client *client = v4l2_get_subdevdata(subdev);
-	int i, j, k, l, rval;
+	int i, j, k, l, m, rval;
+	bool port_registered[NR_OF_TI960_SINK_PADS];
+
+
+	for (i = 0 ; i < NR_OF_TI960_SINK_PADS; i++)
+		port_registered[i] = false;
 
 	for (i = 0, k = 0; i < va->pdata->subdev_num; i++) {
 		struct ti960_subdev_info *info =
@@ -659,13 +615,20 @@ static int ti960_registered(struct v4l2_subdev *subdev)
 		if (k >= va->nsinks)
 			break;
 
+		if (port_registered[info->rx_port]) {
+			dev_err(va->sd.dev,
+				"rx port %d registed already\n",
+				info->rx_port);
+			continue;
+		}
+
 		rval = ti960_map_ser_alias_addr(va, info->rx_port,
 				info->ser_alias << 1);
 		if (rval)
 			return rval;
 
 
-		if (!ti953_detect(va, info->rx_port, info->ser_alias))
+		if (!ti953_detect(&va->sd, info->rx_port, info->ser_alias))
 			continue;
 
 		/*
@@ -693,6 +656,32 @@ static int ti960_registered(struct v4l2_subdev *subdev)
 			return -EINVAL;
 		}
 
+		ti953_reg_write(&va->sd, info->rx_port, info->ser_alias,
+				TI953_RESET_CTL, TI953_DIGITAL_RESET_1);
+		msleep(50);
+
+		if (va->subdev_pdata[k].module_flags & CRL_MODULE_FL_INIT_SER) {
+			rval = ti953_init(&va->sd, info->rx_port,
+					info->ser_alias);
+			if (rval)
+				return rval;
+		}
+
+		if (va->subdev_pdata[k].module_flags & CRL_MODULE_FL_POWERUP) {
+			ti953_reg_write(&va->sd, info->rx_port, info->ser_alias,
+				TI953_GPIO_INPUT_CTRL, TI953_GPIO_OUT_EN);
+
+			/* boot sequence */
+			for (m = 0; m < CRL_MAX_GPIO_POWERUP_SEQ; m++) {
+				if (va->subdev_pdata[k].gpio_powerup_seq[m] < 0)
+					break;
+				msleep(50);
+				ti953_reg_write(&va->sd, info->rx_port,
+				info->ser_alias, TI953_LOCAL_GPIO_DATA,
+				va->subdev_pdata[k].gpio_powerup_seq[m]);
+			}
+		}
+
 		/* Map PHY I2C address. */
 		rval = ti960_map_phy_i2c_addr(va, info->rx_port,
 					info->phy_i2c_addr);
@@ -751,6 +740,7 @@ static int ti960_registered(struct v4l2_subdev *subdev)
 				return -EINVAL;
 			}
 		}
+		port_registered[va->sub_devs[k].rx_port] = true;
 		k++;
 	}
 	rval = ti960_map_subdevs_addr(va);
@@ -986,28 +976,13 @@ static int ti960_set_stream(struct v4l2_subdev *subdev, int enable)
 					i, enable);
 				return rval;
 			}
-			/*
-			 * FIXME: workaround for ov495 block issue.
-			 * reset Ser TI953, to avoid ov495 block,
-			 * only do reset for ov495, then it won't break other sensors.
-			 */
-			if (memcmp(va->sub_devs[j].sd_name, "OV495", strlen("OV495")) == 0) {
-				unsigned char gpio_data;
-
-				ti953_reg_write(va, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL,
-						TI953_GPIO_OUT_EN);
-				rval = ti953_reg_read(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-						&gpio_data);
+			if (va->subdev_pdata[j].module_flags
+				& CRL_MODULE_FL_RESET) {
+				rval = reset_sensor(va, rx_port, ser_alias,
+						va->subdev_pdata[j].reset);
 				if (rval)
 					return rval;
-				gpio_data &= ~TI953_GPIO0_RMTEN;
-				ti953_reg_write(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-						gpio_data & ~TI953_GPIO0_OUT);
-				msleep(50);
-				ti953_reg_write(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-						gpio_data | TI953_GPIO0_OUT);
 			}
-
 		}
 	}
 
@@ -1043,27 +1018,16 @@ static int ti960_set_stream(struct v4l2_subdev *subdev, int enable)
 						"Failed to enable frame sync gpio init.\n");
 					return rval;
 				}
-				/*
-				 * FIXME: workaround for ov495 block issue.
-				 * reset Ser TI953, to avoid ov495 block,
-				 * only do reset for ov495, then it won't break other sensors.
-				 */
-				if (memcmp(va->sub_devs[i].sd_name, "OV495", strlen("OV495")) == 0) {
-					unsigned char gpio_data;
+
+				if (va->subdev_pdata[i].module_flags
+					& CRL_MODULE_FL_RESET) {
 					rx_port = va->sub_devs[i].rx_port;
 					ser_alias = va->sub_devs[i].ser_i2c_addr;
-					ti953_reg_write(va, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL,
-							TI953_GPIO_OUT_EN);
-					rval = ti953_reg_read(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-							&gpio_data);
+					rval = reset_sensor(va, rx_port,
+						ser_alias,
+						va->subdev_pdata[i].reset);
 					if (rval)
 						return rval;
-					gpio_data &= ~TI953_GPIO0_RMTEN;
-					ti953_reg_write(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-							gpio_data & ~TI953_GPIO0_OUT);
-					msleep(50);
-					ti953_reg_write(va, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-							gpio_data | TI953_GPIO0_OUT);
 				}
 			}
 		}
@@ -1260,88 +1224,11 @@ static int ti960_register_subdev(struct ti960 *va)
 	return rval;
 }
 
-struct slave_register_devid {
-	u16 reg;
-	u8 val_expected;
-};
-
-#define OV495_I2C_PHY_ADDR	0x48
-#define OV495_I2C_ALIAS_ADDR	0x30
-
-static const struct slave_register_devid ov495_devid[] = {
-	{0x3000, 0x51},
-	{0x3001, 0x49},
-	{0x3002, 0x56},
-	{0x3003, 0x4f},
-};
-
-/*
- * read sensor id reg of 16 bit addr, and 8 bit val
- */
-static int slave_id_read(struct i2c_client *client, u8 i2c_addr,
-				u16 reg, u8 *val)
-{
-	struct i2c_msg msg[2];
-	unsigned char data[2];
-	int rval;
-
-	/* override i2c_addr */
-	msg[0].addr = i2c_addr;
-	msg[0].flags = 0;
-	data[0] = (u8) (reg >> 8);
-	data[1] = (u8) (reg & 0xff);
-	msg[0].buf = data;
-	msg[0].len = 2;
-
-	msg[1].addr = i2c_addr;
-	msg[1].flags = I2C_M_RD;
-	msg[1].buf = data;
-	msg[1].len = 1;
-
-	rval = i2c_transfer(client->adapter, msg, 2);
-
-	if (rval < 0)
-		return rval;
-
-	*val = data[0];
-
-	return 0;
-}
-
-static bool slave_detect(struct ti960 *va, u8 i2c_addr,
-		const struct slave_register_devid *slave_devid, u8 len)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&va->sd);
-	int i;
-	int rval;
-	unsigned char val;
-
-	for (i = 0; i < len; i++) {
-		rval = slave_id_read(client, i2c_addr,
-			slave_devid[i].reg, &val);
-		if (rval) {
-			dev_err(va->sd.dev, "slave id read fail %d\n", rval);
-			break;
-		}
-		if (val != slave_devid[i].val_expected)
-			break;
-	}
-
-	if (i == len)
-		return true;
-
-	return false;
-}
-
 static int ti960_init(struct ti960 *va)
 {
 	unsigned int reset_gpio = va->pdata->reset_gpio;
 	int i, rval;
 	unsigned int val;
-	int m;
-	int rx_port = 0;
-	int ser_alias = 0;
-	bool ov495_detected;
 
 	gpio_set_value(reset_gpio, 1);
 	usleep_range(2000, 3000);
@@ -1367,11 +1254,6 @@ static int ti960_init(struct ti960 *va)
 	}
 	usleep_range(10000, 11000);
 
-	/*
-	 * fixed value of sensor phy, ser_alias, port config for ti960 each port,
-	 * not yet known sensor platform data here.
-	 */
-	ser_alias = 0x58;
 	for (i = 0; i < ARRAY_SIZE(ti960_init_settings); i++) {
 		rval = regmap_write(va->regmap8,
 			ti960_init_settings[i].reg,
@@ -1387,101 +1269,6 @@ static int ti960_init(struct ti960 *va)
 	/* wait for ti953 ready */
 	msleep(200);
 
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		unsigned short rx_port, phy_i2c_addr, alias_i2c_addr;
-
-		rx_port = i;
-		phy_i2c_addr = OV495_I2C_PHY_ADDR;
-		alias_i2c_addr = OV495_I2C_ALIAS_ADDR;
-
-		rval = ti960_map_phy_i2c_addr(va, rx_port, phy_i2c_addr);
-		if (rval)
-			return rval;
-
-		rval = ti960_map_alias_i2c_addr(va, rx_port,
-						alias_i2c_addr << 1);
-		if (rval)
-			return rval;
-
-		ov495_detected = slave_detect(va, alias_i2c_addr,
-					ov495_devid, ARRAY_SIZE(ov495_devid));
-
-		/* unmap to clear i2c addr space */
-		rval = ti960_map_phy_i2c_addr(va, rx_port, 0);
-		if (rval)
-			return rval;
-
-		rval = ti960_map_alias_i2c_addr(va, rx_port, 0);
-		if (rval)
-			return rval;
-
-		if (ov495_detected) {
-			dev_info(va->sd.dev, "ov495 detected on port %d\n", rx_port);
-			break;
-		}
-	}
-
-	for (i = 0; i < ARRAY_SIZE(ti953_init_settings); i++) {
-		if (ov495_detected)
-			break;
-		rval = ti953_reg_write(va, rx_port, ser_alias,
-			ti953_init_settings[i].reg,
-			ti953_init_settings[i].val);
-		if (rval) {
-			dev_err(va->sd.dev, "port %d, ti953 write timeout %d\n", 0, rval);
-			break;
-		}
-	}
-
-	for (m = 0; m < ARRAY_SIZE(ti960_init_settings_2); m++) {
-		rval = regmap_write(va->regmap8,
-			ti960_init_settings_2[m].reg,
-			ti960_init_settings_2[m].val);
-		if (rval) {
-			dev_err(va->sd.dev,
-				"Failed to write TI960 init setting 2, reg %2x, val %2x\n",
-				ti960_init_settings_2[m].reg, ti960_init_settings_2[m].val);
-			break;
-		}
-	}
-
-	rval = regmap_write(va->regmap8, TI960_RX_PORT_SEL,
-		(rx_port << 4) + (1 << rx_port));
-	if (rval)
-		return rval;
-	for (m = 1; m < ARRAY_SIZE(ti960_init_settings_3); m++) {
-		rval = regmap_write(va->regmap8,
-			ti960_init_settings_3[m].reg,
-			ti960_init_settings_3[m].val);
-		if (rval) {
-			dev_err(va->sd.dev,
-				"Failed to write TI960 init setting 2, reg %2x, val %2x\n",
-				ti960_init_settings_3[m].reg, ti960_init_settings_3[m].val);
-			break;
-		}
-	}
-
-	for (i = 0; i < ARRAY_SIZE(ti953_init_settings_2); i++) {
-		if (ov495_detected)
-			break;
-		rval = ti953_reg_write(va, rx_port, ser_alias,
-			ti953_init_settings_2[i].reg,
-			ti953_init_settings_2[i].val);
-		if (rval) {
-			dev_err(va->sd.dev, "port %d, ti953 write timeout %d\n", 0, rval);
-			break;
-		}
-	}
-
-	/* reset and power for ti953 */
-	if (!ov495_detected) {
-		ti953_reg_write(va, 0, ser_alias, TI953_GPIO_INPUT_CTRL, TI953_GPIO_OUT_EN);
-		ti953_reg_write(va, 0, ser_alias, TI953_LOCAL_GPIO_DATA, 0);
-		msleep(50);
-		ti953_reg_write(va, 0, ser_alias, TI953_LOCAL_GPIO_DATA,
-				TI953_GPIO0_OUT | TI953_GPIO1_OUT);
-	}
-
 	rval = ti960_map_subdevs_addr(va);
 	if (rval)
 		return rval;
@@ -1647,7 +1434,7 @@ static int ti960_probe(struct i2c_client *client,
 	va->gc.direction_output = ti960_gpio_direction_output;
 	rval = gpiochip_add(&va->gc);
 	if (rval) {
-		dev_err(&client->dev, "Failed to add gpio chip!\n");
+		dev_err(&client->dev, "Failed to add gpio chip! %d\n", rval);
 		return -EIO;
 	}
 
diff --git a/drivers/media/i2c/ti960-reg.h b/drivers/media/i2c/ti960-reg.h
index 60d9bf29a9b8..a878c63be480 100644
--- a/drivers/media/i2c/ti960-reg.h
+++ b/drivers/media/i2c/ti960-reg.h
@@ -81,86 +81,12 @@ static const struct ti960_register_write ti960_init_settings[] = {
 	{0x70, 0x2b},
 	{0x71, 0x2c},
 	{0x72, 0xe4},
-};
-
-static const struct ti960_register_write ti953_init_settings[] = {
-	{0x4c, 0x01},
-	{0xb0, 0x04},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x04},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x04},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01}, /* SLAVE_ID_ALIAS_1 */
-	{0x41, 0x93}, /* SLAVE_ID_ALIAS_0 */
-	{0x4c, 0x12},
-	{0xb0, 0x08},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x08},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x08},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-	{0x4c, 0x24},
-	{0xb0, 0x0c},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x0c},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x0c},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-	{0x4c, 0x38},
-	{0xb0, 0x10},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x10},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x10},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-};
-
-static const struct ti960_register_write ti960_init_settings_2[] = {
-	{0xb0, 0x14},
+	{0xb0, 0x14}, /* FPD3 RX Shared Reg */
 	{0xb1, 0x03},
 	{0xb2, 0x04},
 	{0xb1, 0x04},
 	{0xb2, 0x04},
-};
-
-static const struct ti960_register_write ti960_init_settings_3[] = {
-	{0x4c, 0x01},
-	{0x32, 0x01},
+	{0x32, 0x01}, /* TX and FWD */
 	{0x33, 0x03},
 	{0x32, 0x12},
 	{0x33, 0x03},
@@ -168,21 +94,6 @@ static const struct ti960_register_write ti960_init_settings_3[] = {
 	{0x21, 0x03},
 };
 
-static const struct ti960_register_write ti953_init_settings_2[] = {
-	{0x06, 0x41},
-	{0x07, 0x28},
-	{0x0e, 0xf0},
-};
-
-static const struct ti960_register_devid ti953_FPD3_RX_ID[] = {
-	{0xf0, 0x5f},
-	{0xf1, 0x55},
-	{0xf2, 0x42},
-	{0xf3, 0x39},
-	{0xf4, 0x35},
-	{0xf5, 0x33},
-};
-
 /* register definition */
 #define TI960_DEVID		0x0
 #define TI960_RESET		0x1
@@ -231,14 +142,4 @@ static const struct ti960_register_devid ti953_FPD3_RX_ID[] = {
 #define TI960_CSI_SKEWCAL	0x40
 #define TI960_FSIN_ENABLE	0x1
 
-/* register definition */
-#define TI953_LOCAL_GPIO_DATA	0xd
-#define TI953_GPIO_INPUT_CTRL	0xe
-
-/* register value definition */
-#define TI953_GPIO0_RMTEN	0x10
-#define TI953_GPIO0_OUT		0x1
-#define TI953_GPIO1_OUT		(0x1 << 1)
-#define TI953_GPIO_OUT_EN	0xf0
-
 #endif
-- 
2.17.1

