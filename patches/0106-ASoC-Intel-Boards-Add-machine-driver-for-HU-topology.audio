From d274349572711f8763db8a3dc2beb8eff8e89539 Mon Sep 17 00:00:00 2001
From: Puneeth Prabhu <puneethx.prabhu@intel.com>
Date: Mon, 7 May 2018 17:22:32 +0530
Subject: [PATCH 106/163] ASoC: Intel: Boards: Add machine driver for HU
 topology

This patch adds I2S machine driver for IVI HU topology
which uses dummy codec.

Change-Id: Iff3afa704d23bc7a479265bf1139db5af579b258
Signed-off-by: Puneeth Prabhu <puneethx.prabhu@intel.com>
Reviewed-on:
Reviewed-by: Singh, Guneshwor O <guneshwor.o.singh@intel.com>
Reviewed-by: Kesapragada, Pardha Saradhi <pardha.saradhi.kesapragada@intel.com>
Reviewed-by: Kale, Sanyog R <sanyog.r.kale@intel.com>
Tested-by: Madiwalar, MadiwalappaX <madiwalappax.madiwalar@intel.com>
Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
---
 sound/soc/intel/boards/Kconfig             |  12 ++
 sound/soc/intel/boards/Makefile            |   2 +
 sound/soc/intel/boards/bxtp_ivi_hu_rt298.c | 211 +++++++++++++++++++++
 3 files changed, 225 insertions(+)
 create mode 100644 sound/soc/intel/boards/bxtp_ivi_hu_rt298.c

diff --git a/sound/soc/intel/boards/Kconfig b/sound/soc/intel/boards/Kconfig
index 4fda24883744..a73529fb96ba 100644
--- a/sound/soc/intel/boards/Kconfig
+++ b/sound/soc/intel/boards/Kconfig
@@ -283,6 +283,9 @@ config SND_SOC_INTEL_BXT_RT298_MACH
 config SND_SOC_INTEL_BXTP_IVI_RSE_MACH
 	tristate
 
+config SND_SOC_INTEL_BXTP_IVI_HU_MACH
+	tristate
+
 choice SND_SOC_INTEL_BXT_RT298_I2S
 	tristate "Broxton with RT298 in I2S mode drivers"
 	depends on I2C && ACPI
@@ -307,6 +310,15 @@ config SND_SOC_INTEL_BXTP_IVI_DUMMY_RSE
 	  Say Y or m if you have such a device. This is a recommended option.
 	  If unsure select "N".
 
+config SND_SOC_INTEL_BXTP_IVI_DUMMY_HU
+	prompt "BXTP with Dummy codec for HU"
+	select SND_SOC_INTEL_BXTP_IVI_HU_MACH
+	help
+	  This adds support for ASoC machine driver for Broxton-P platforms
+	  with Dummy I2S audio codec for IVI Head Unit.
+	  Say Y or m if you have such a device. This is a recommended option.
+	  If unsure select "N".
+
 endchoice ## SND_SOC_INTEL_BXT_RT298_I2S
 
 config SND_SOC_INTEL_BXT_TDF8532_MACH
diff --git a/sound/soc/intel/boards/Makefile b/sound/soc/intel/boards/Makefile
index edcd6b99c8d5..a37c36406b5a 100644
--- a/sound/soc/intel/boards/Makefile
+++ b/sound/soc/intel/boards/Makefile
@@ -7,6 +7,7 @@ snd-soc-sst-broadwell-objs := broadwell.o
 snd-soc-sst-bxt-da7219_max98357a-objs := bxt_da7219_max98357a.o
 snd-soc-sst-bxt-rt298-objs := bxt_rt298.o
 snd-soc-bxtp_ivi_rse_rt298-objs := bxtp_ivi_rse_rt298.o
+snd-soc-bxtp_ivi_hu_rt298-objs := bxtp_ivi_hu_rt298.o
 snd-soc-sst_bxt_tdf8532-objs := bxt_tdf8532.o
 snd-soc-bxt_ivi_ull-objs := bxt_ivi_ull.o
 snd-soc-sst-glk-rt5682_max98357a-objs := glk_rt5682_max98357a.o
@@ -40,6 +41,7 @@ obj-$(CONFIG_SND_SOC_INTEL_BYT_MAX98090_MACH) += snd-soc-sst-byt-max98090-mach.o
 obj-$(CONFIG_SND_SOC_INTEL_BXT_DA7219_MAX98357A_MACH) += snd-soc-sst-bxt-da7219_max98357a.o
 obj-$(CONFIG_SND_SOC_INTEL_BXT_RT298_MACH) += snd-soc-sst-bxt-rt298.o
 obj-$(CONFIG_SND_SOC_INTEL_BXTP_IVI_RSE_MACH) += snd-soc-bxtp_ivi_rse_rt298.o
+obj-$(CONFIG_SND_SOC_INTEL_BXTP_IVI_HU_MACH) += snd-soc-bxtp_ivi_hu_rt298.o
 obj-$(CONFIG_SND_SOC_INTEL_BXT_TDF8532_MACH) += snd-soc-sst_bxt_tdf8532.o
 obj-$(CONFIG_SND_SOC_INTEL_BXT_ULL_MACH) += snd-soc-bxt_ivi_ull.o
 obj-$(CONFIG_SND_SOC_INTEL_GLK_RT5682_MAX98357A_MACH) += snd-soc-sst-glk-rt5682_max98357a.o
diff --git a/sound/soc/intel/boards/bxtp_ivi_hu_rt298.c b/sound/soc/intel/boards/bxtp_ivi_hu_rt298.c
new file mode 100644
index 000000000000..bbdcece0edc7
--- /dev/null
+++ b/sound/soc/intel/boards/bxtp_ivi_hu_rt298.c
@@ -0,0 +1,211 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// bxtp_ivi_hu_rt298.c  --  Intel HU I2S Machine Driver
+//
+// Copyright(c) 2018 Intel Corporation
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+
+#define DEF_BT_RATE_INBDEX 0x0
+
+struct bxtp_ivi_hu_prv {
+	int srate;
+};
+
+static unsigned int ivi_hu_bt_rates[] = {
+	8000,
+	16000,
+};
+
+/* sound card controls */
+static const char * const bt_rate[] = {"8K", "16K"};
+
+static const struct soc_enum btrate_enum =
+	SOC_ENUM_SINGLE_EXT(2, bt_rate);
+
+static int bt_sample_rate_get(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct bxtp_ivi_hu_prv *drv = snd_soc_card_get_drvdata(card);
+
+	ucontrol->value.integer.value[0] = drv->srate;
+	return 0;
+}
+
+static int bt_sample_rate_put(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct bxtp_ivi_hu_prv *drv = snd_soc_card_get_drvdata(card);
+
+	if (ucontrol->value.integer.value[0] == drv->srate)
+		return 0;
+
+	drv->srate = ucontrol->value.integer.value[0];
+	return 0;
+
+}
+
+static const struct snd_kcontrol_new hu_snd_controls[] = {
+
+	SOC_ENUM_EXT("BT Rate", btrate_enum,
+			bt_sample_rate_get, bt_sample_rate_put),
+};
+
+static const struct snd_soc_dapm_widget broxton_widgets[] = {
+	SND_SOC_DAPM_SPK("Speaker", NULL),
+	SND_SOC_DAPM_MIC("DMIC2", NULL),
+};
+
+static const struct snd_soc_dapm_route broxton_rt298_map[] = {
+	{"Speaker", NULL, "Dummy Playback"},
+	{"Dummy Capture", NULL, "DMIC2"},
+
+	{ "Dummy Playback", NULL, "ssp0 Tx"},
+	{ "ssp0 Tx", NULL, "codec0_out"},
+
+	{ "bt_ssp0_in", NULL, "ssp0 Rx" },
+	{ "ssp0 Rx", NULL, "Dummy Capture" },
+};
+
+static int bxtp_ssp0_gpio_init(struct snd_soc_pcm_runtime *rtd)
+{
+	char *gpio_addr;
+	u32 gpio_value1 = 0x40900500;
+	u32 gpio_value2 = 0x44000600;
+
+	gpio_addr = (void *)ioremap_nocache(0xd0c40610, 0x30);
+	if (gpio_addr == NULL)
+		return(-EIO);
+
+	memcpy_toio(gpio_addr + 0x8, &gpio_value1, sizeof(gpio_value1));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value2, sizeof(gpio_value2));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value2, sizeof(gpio_value2));
+	memcpy_toio(gpio_addr + 0x20, &gpio_value2, sizeof(gpio_value2));
+
+	iounmap(gpio_addr);
+	return 0;
+}
+
+static int broxton_ssp0_fixup(struct snd_soc_pcm_runtime *rtd,
+			struct snd_pcm_hw_params *params)
+{
+	struct snd_interval *rate = hw_param_interval(params,
+					SNDRV_PCM_HW_PARAM_RATE);
+
+	struct snd_soc_card *card =  rtd->card;
+	struct bxtp_ivi_hu_prv *drv = snd_soc_card_get_drvdata(card);
+
+	/* SSP0 operates with a BT Transceiver */
+	rate->min = rate->max = ivi_hu_bt_rates[drv->srate];
+	return 0;
+}
+
+SND_SOC_DAILINK_DEF(dummy,
+	DAILINK_COMP_ARRAY(COMP_DUMMY()));
+
+SND_SOC_DAILINK_DEF(ssp0_pin,
+	DAILINK_COMP_ARRAY(COMP_CPU("SSP0 Pin")));
+
+SND_SOC_DAILINK_DEF(platform,
+	DAILINK_COMP_ARRAY(COMP_PLATFORM("0000:00:0e.0")));
+
+/* broxton digital audio interface glue - connects codec <--> CPU */
+static struct snd_soc_dai_link broxton_rt298_dais[] = {
+	/* Back End DAI links */
+	{
+		/* SSP0 - Codec - for HDMI MCH */
+		.name = "SSP0-Codec",
+		.id = 0,
+		.no_pcm = 1,
+		.init = bxtp_ssp0_gpio_init,
+		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS,
+		.ignore_suspend = 1,
+		.ignore_pmdown_time = 1,
+		.be_hw_params_fixup = broxton_ssp0_fixup,
+		.dpcm_capture = 1,
+		.dpcm_playback = 1,
+		SND_SOC_DAILINK_REG(ssp0_pin, dummy, platform),
+	},
+};
+
+static int
+bxt_add_dai_link(struct snd_soc_card *card, struct snd_soc_dai_link *link)
+{
+	link->platforms->name = "0000:00:0e.0";
+	link->nonatomic = 1;
+
+	return 0;
+}
+
+/* broxton audio machine driver for SPT + RT298S */
+static struct snd_soc_card broxton_rt298 = {
+	.name = "broxton-ivi-hu",
+	.dai_link = broxton_rt298_dais,
+	.num_links = ARRAY_SIZE(broxton_rt298_dais),
+	.controls = hu_snd_controls,
+	.num_controls = ARRAY_SIZE(hu_snd_controls),
+	.dapm_widgets = broxton_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(broxton_widgets),
+	.dapm_routes = broxton_rt298_map,
+	.num_dapm_routes = ARRAY_SIZE(broxton_rt298_map),
+	.fully_routed = true,
+	.add_dai_link = bxt_add_dai_link,
+};
+
+static int broxton_audio_probe(struct platform_device *pdev)
+{
+	int ret_val;
+	struct bxtp_ivi_hu_prv *drv;
+
+	broxton_rt298.dev = &pdev->dev;
+
+	drv = devm_kzalloc(&pdev->dev, sizeof(*drv), GFP_KERNEL);
+	if (!drv)
+		return -ENOMEM;
+
+	drv->srate = DEF_BT_RATE_INBDEX;
+	snd_soc_card_set_drvdata(&broxton_rt298, drv);
+
+	ret_val = snd_soc_register_card(&broxton_rt298);
+	if (ret_val) {
+		dev_dbg(&pdev->dev, "snd_soc_register_card failed %d\n",
+								 ret_val);
+		return ret_val;
+	}
+
+	platform_set_drvdata(pdev, &broxton_rt298);
+
+	return ret_val;
+}
+
+static int broxton_audio_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_card(&broxton_rt298);
+	return 0;
+}
+
+static struct platform_driver broxton_audio = {
+	.probe = broxton_audio_probe,
+	.remove = broxton_audio_remove,
+	.driver = {
+		.name = "bxt_alc298s_i2s",
+	},
+};
+
+module_platform_driver(broxton_audio);
+
+/* Module information */
+MODULE_AUTHOR("Pardha Saradhi K <pardha.saradhi.kesapragada@intel.com>");
+MODULE_AUTHOR("Ramesh Babu <Ramesh.Babu@intel.com>");
+MODULE_AUTHOR("Senthilnathan Veppur <senthilnathanx.veppur@intel.com>");
+MODULE_DESCRIPTION("Intel SST Audio for Broxton-P IVI HU");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:bxt_alc298s_i2s");
-- 
2.17.1

