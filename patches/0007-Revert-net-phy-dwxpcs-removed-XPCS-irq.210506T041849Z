From 761ee43eab9babd8ec8fb3c16048f1bc9e3ebbb4 Mon Sep 17 00:00:00 2001
From: Vijayakannan Ayyathurai <vijayakannan.ayyathurai@intel.com>
Date: Wed, 5 May 2021 16:00:09 +0800
Subject: [PATCH 07/17] Revert "net: phy: dwxpcs: removed XPCS irq"

This reverts commit 2184115cb2d85816b26ef8f46a428a2095618593.

Original code is fixing the S0ix issue in EHL. But since then observe
the packet loss with tsn ref app validation. So original code will be
reverted till find the right solution.

Signed-off-by: Vijayakannan Ayyathurai <vijayakannan.ayyathurai@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |   4 +
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |   6 +
 drivers/net/phy/dwxpcs.c                      | 146 +++++++++++++++++-
 include/linux/dwxpcs.h                        |   1 +
 include/linux/stmmac.h                        |   1 +
 5 files changed, 153 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index f58e7c820642..583a7cc609a4 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -3633,6 +3633,7 @@ static int stmmac_open(struct net_device *dev)
 		const void *intel_pdata = priv->plat->intel_bi->platform_data;
 
 		pdata = (struct dwxpcs_platform_data *)intel_pdata;
+		pdata->irq = priv->phy_conv_irq;
 		pdata->ext_phy_addr = priv->plat->phy_addr;
 		pdata->speed_2500_en = priv->plat->speed_2500_en;
 
@@ -6671,6 +6672,7 @@ int stmmac_dvr_probe(struct device *device,
 	priv->dev->irq = res->irq;
 	priv->wol_irq = res->wol_irq;
 	priv->lpi_irq = res->lpi_irq;
+	priv->phy_conv_irq = res->phy_conv_irq;
 	priv->sfty_ce_irq = res->sfty_ce_irq;
 	priv->sfty_ue_irq = res->sfty_ue_irq;
 	for (i = 0; i < MTL_MAX_RX_QUEUES; i++)
@@ -7318,6 +7320,7 @@ int stmmac_resume_main(struct stmmac_priv *priv, struct net_device *ndev)
 		const void *intel_pdata = priv->plat->intel_bi->platform_data;
 
 		pdata = (struct dwxpcs_platform_data *)intel_pdata;
+		pdata->irq = priv->phy_conv_irq;
 		pdata->ext_phy_addr = priv->plat->phy_addr;
 		pdata->speed_2500_en = priv->plat->speed_2500_en;
 
@@ -7463,6 +7466,7 @@ int stmmac_resume(struct device *dev)
 		const void *intel_pdata = priv->plat->intel_bi->platform_data;
 
 		pdata = (struct dwxpcs_platform_data *)intel_pdata;
+		pdata->irq = priv->phy_conv_irq;
 		pdata->ext_phy_addr = priv->plat->phy_addr;
 		pdata->speed_2500_en = priv->plat->speed_2500_en;
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 9baf5bd5d1ed..71eb99df78fc 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -280,6 +280,7 @@ static int intel_mgbe_common_data(struct pci_dev *pdev,
 	plat->intel_adhoc_addr = 0x15;
 
 	/* Setup MSI vector offset specific to Intel mGbE controller */
+	plat->msi_phy_conv_vec = 30;
 	plat->msi_mac_vec = 29;
 	plat->msi_lpi_vec = 28;
 	plat->msi_sfty_ce_vec = 27;
@@ -570,6 +571,7 @@ static int synp_haps_sgmii_data(struct pci_dev *pdev,
 	plat->intel_adhoc_addr = 0;
 
 	/* Override: HAPS does not support MSI */
+	plat->msi_phy_conv_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_mac_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_lpi_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_sfty_ce_vec = STMMAC_MSI_VEC_MAX;
@@ -848,6 +850,9 @@ static int stmmac_config_multi_msi(struct pci_dev *pdev,
 		res->wol_irq = pci_irq_vector(pdev, plat->msi_wol_vec);
 	if (plat->msi_lpi_vec < STMMAC_MSI_VEC_MAX)
 		res->lpi_irq = pci_irq_vector(pdev, plat->msi_lpi_vec);
+	if (plat->msi_phy_conv_vec < STMMAC_MSI_VEC_MAX)
+		res->phy_conv_irq = pci_irq_vector(pdev,
+						   plat->msi_phy_conv_vec);
 	if (plat->msi_sfty_ce_vec < STMMAC_MSI_VEC_MAX)
 		res->sfty_ce_irq = pci_irq_vector(pdev, plat->msi_sfty_ce_vec);
 	if (plat->msi_sfty_ue_vec < STMMAC_MSI_VEC_MAX)
@@ -928,6 +933,7 @@ static int stmmac_pci_probe(struct pci_dev *pdev,
 	plat->msi_mac_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_wol_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_lpi_vec = STMMAC_MSI_VEC_MAX;
+	plat->msi_phy_conv_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_sfty_ce_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_sfty_ue_vec = STMMAC_MSI_VEC_MAX;
 	plat->msi_rx_base_vec = STMMAC_MSI_VEC_MAX;
diff --git a/drivers/net/phy/dwxpcs.c b/drivers/net/phy/dwxpcs.c
index fa0b7517e7d2..770c53fb15a6 100644
--- a/drivers/net/phy/dwxpcs.c
+++ b/drivers/net/phy/dwxpcs.c
@@ -49,6 +49,7 @@
 #define MDIO_MII_MMD_AN_CTRL_PCS_MD	GENMASK(2, 1) /* PCS Mode */
 #define AN_CTRL_PCS_MD_C37_1000BASEX	0x0	/* C37 AN for 1000BASE-X */
 #define AN_CTRL_PCS_MD_C37_SGMII	0x2	/* C37 AN for SGMII */
+#define MDIO_MII_MMD_AN_CTRL_AN_INTR_EN	BIT(0)	/* AN Complete Intr Enable */
 
 /* MII MMD AN Status defines for SGMII AN Status */
 #define AN_STAT_C37_AN_CMPLT		BIT(0)	/* AN Complete Intr */
@@ -150,7 +151,9 @@ static void dwxpcs_init(struct dwxpcs_priv *priv)
 		 * 2) VR_MII_AN_CTRL Bit(3) [TX_CONFIG] = 0b (MAC side SGMII)
 		 *    DW xPCS used with DW EQoS MAC is always MAC
 		 *    side SGMII.
-		 * 3) VR_MII_DIG_CTRL1 Bit(9) [MAC_AUTO_SW] = 1b (Automatic
+		 * 3) VR_MII_AN_CTRL Bit(0) [AN_INTR_EN] = 1b (AN Interrupt
+		 *    enabled)
+		 * 4) VR_MII_DIG_CTRL1 Bit(9) [MAC_AUTO_SW] = 1b (Automatic
 		 *    speed/duplex mode change by HW after SGMII AN complete)
 		 * Note: Since it is MAC side SGMII, there is no need to set
 		 *	 SR_MII_AN_ADV. MAC side SGMII receives AN Tx Config
@@ -160,7 +163,8 @@ static void dwxpcs_init(struct dwxpcs_priv *priv)
 		phydata = xpcs_read(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_AN_CTRL);
 		phydata &= ~MDIO_MII_MMD_AN_CTRL_PCS_MD;
 
-		phydata |= (AN_CTRL_PCS_MD_C37_SGMII <<
+		phydata |= MDIO_MII_MMD_AN_CTRL_AN_INTR_EN |
+			   (AN_CTRL_PCS_MD_C37_SGMII <<
 			    MDIO_MII_MMD_AN_CTRL_PCS_MD_SHIFT &
 			    MDIO_MII_MMD_AN_CTRL_PCS_MD) |
 			   (AN_CTRL_TX_CONF_MAC_SIDE_SGMII <<
@@ -175,13 +179,16 @@ static void dwxpcs_init(struct dwxpcs_priv *priv)
 	} else {
 		/* For AN for 1000BASE-X mode, the settings are :-
 		 * 1) VR_MII_AN_CTRL Bit(2:1)[PCS_MODE] = 00b (1000BASE-X C37)
-		 * 2) SR_MII_AN_ADV Bit(6)[FD] = 1b (Full Duplex)
+		 * 2) VR_MII_AN_CTRL Bit(0) [AN_INTR_EN] = 1b (AN Interrupt
+		 *    enabled)
+		 * 3) SR_MII_AN_ADV Bit(6)[FD] = 1b (Full Duplex)
 		 *    Note: Half Duplex is rarely used, so don't advertise.
-		 * 3) SR_MII_AN_ADV Bit(8:7)[PSE] = 11b (Sym & Asym Pause)
+		 * 4) SR_MII_AN_ADV Bit(8:7)[PSE] = 11b (Sym & Asym Pause)
 		 */
 		phydata = xpcs_read(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_AN_CTRL);
 		phydata &= ~MDIO_MII_MMD_AN_CTRL_PCS_MD;
-		phydata |= (AN_CTRL_PCS_MD_C37_1000BASEX <<
+		phydata |= MDIO_MII_MMD_AN_CTRL_AN_INTR_EN |
+			   (AN_CTRL_PCS_MD_C37_1000BASEX <<
 			    MDIO_MII_MMD_AN_CTRL_PCS_MD_SHIFT &
 			    MDIO_MII_MMD_AN_CTRL_PCS_MD);
 		xpcs_write(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_AN_CTRL, phydata);
@@ -256,6 +263,103 @@ static int dwxpcs_read_status(struct phy_device *phydev)
 	return 0;
 }
 
+static void dwxpcs_get_linkstatus(struct dwxpcs_priv *priv, int an_stat)
+{
+	struct mii_bus *bus = priv->mdiodev->bus;
+	struct pcs_stats *stats = &priv->stats;
+	int xpcs_addr = priv->mdiodev->addr;
+	int pcs_mode = priv->pdata->mode;
+
+	if (pcs_mode == DWXPCS_MODE_SGMII_AN) {
+		/* Check the SGMII AN link status */
+		if (an_stat & AN_STAT_SGMII_AN_LNKSTS) {
+			int speed_value;
+
+			stats->link = 1;
+
+			speed_value = ((an_stat & AN_STAT_SGMII_AN_SPEED) >>
+					AN_STAT_SGMII_AN_SPEED_SHIFT);
+			if (speed_value == AN_STAT_SGMII_AN_1000MBPS)
+				stats->speed = SPEED_1000;
+			else if (speed_value == AN_STAT_SGMII_AN_100MBPS)
+				stats->speed = SPEED_100;
+			else
+				stats->speed = SPEED_10;
+
+			if (an_stat & AN_STAT_SGMII_AN_FD)
+				stats->duplex = 1;
+			else
+				stats->duplex = 0;
+		} else {
+			stats->link = 0;
+		}
+	} else if (pcs_mode == DWXPCS_MODE_1000BASEX_AN) {
+		/* For 1000BASE-X AN, 1000BASE-X is always 1000Mbps.
+		 * For duplex mode, we read from BMCR_FULLDPLX which is
+		 * only valid if BMCR_ANENABLE is not enabeld.
+		 */
+		int phydata = xpcs_read(XPCS_MDIO_MII_MMD, MII_BMCR);
+
+		stats->link = 1;
+		stats->speed = SPEED_1000;
+		if (!(phydata & BMCR_ANENABLE))
+			stats->duplex = phydata & BMCR_FULLDPLX ? 1 : 0;
+	}
+}
+
+static void dwxpcs_irq_handle(struct dwxpcs_priv *priv)
+{
+	struct mii_bus *bus = priv->mdiodev->bus;
+	struct device *dev = &priv->mdiodev->dev;
+	int xpcs_addr = priv->mdiodev->addr;
+	int an_stat;
+
+	/* AN status */
+	an_stat = xpcs_read(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_AN_STAT);
+
+	if (an_stat & AN_STAT_C37_AN_CMPLT) {
+		struct pcs_stats *stats = &priv->stats;
+
+		dwxpcs_get_linkstatus(priv, an_stat);
+
+		/* Clear C37 AN complete status by writing zero */
+		xpcs_write(XPCS_MDIO_MII_MMD, MDIO_MII_MMD_AN_STAT, 0);
+
+		dev_info(dev, "%s: Link = %d - %d/%s\n",
+			 __func__,
+			 stats->link,
+			 stats->speed,
+			 stats->duplex ? "Full" : "Half");
+	}
+}
+
+static void dwxpcs_an_task(struct work_struct *work)
+{
+	struct dwxpcs_priv *priv = container_of(work,
+						struct dwxpcs_priv,
+						an_task);
+	dwxpcs_irq_handle(priv);
+
+	clear_bit(__DWXPCS_TASK_SCHED, &priv->state);
+}
+
+static irqreturn_t dwxpcs_interrupt(int irq, void *dev_id)
+{
+	struct dwxpcs_priv *priv = (struct dwxpcs_priv *)dev_id;
+
+	/* Handle the clearing of AN status outside of interrupt context
+	 * as it involves mdiobus_read() & mdiobus_write().
+	 */
+	if (!test_bit(__DWXPCS_REMOVING, &priv->state) &&
+	    !test_and_set_bit(__DWXPCS_TASK_SCHED, &priv->state)) {
+		queue_work(priv->int_wq, &priv->an_task);
+
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_NONE;
+}
+
 #ifdef CONFIG_ACPI
 static const struct acpi_device_id dwxpcs_acpi_match[] = {
 	{ "INTC1033" }, /* EHL Ethernet PCS */
@@ -272,6 +376,7 @@ static int dwxpcs_probe(struct mdio_device *mdiodev)
 	struct dwxpcs_priv *priv;
 	struct device_node *np;
 	struct device *dev;
+	int ret;
 
 	dev = &mdiodev->dev;
 	np = dev->of_node;
@@ -327,6 +432,33 @@ static int dwxpcs_probe(struct mdio_device *mdiodev)
 	priv->phy_dev->priv = priv;
 	priv->phy_dev->drv = &priv->conv_phy_drv;
 
+	if (priv->pdata->irq > 0) {
+		char *int_name;
+
+		INIT_WORK(&priv->an_task, dwxpcs_an_task);
+		clear_bit(__DWXPCS_TASK_SCHED, &priv->state);
+
+		int_name = priv->int_name;
+		sprintf(int_name, "%s-%d", "dwxpcs", priv->mdiodev->dev.id);
+		priv->int_wq = create_singlethread_workqueue(int_name);
+		if (!priv->int_wq) {
+			dev_err(dev, "%s: Failed to create workqueue\n",
+				int_name);
+			return -ENOMEM;
+		}
+
+		ret = request_irq(priv->pdata->irq, dwxpcs_interrupt,
+				  IRQF_SHARED, int_name, priv);
+		if (unlikely(ret < 0)) {
+			destroy_workqueue(priv->int_wq);
+			dev_err(dev, "%s: Allocating DW XPCS IRQ %d (%d)\n",
+				__func__, priv->pdata->irq, ret);
+			return ret;
+		}
+	}
+	dev_info(dev, "%s: DW XPCS mdio device (IRQ: %d) probed successful\n",
+		 __func__, priv->pdata->irq);
+
 	mdiodev->priv = priv;
 
 	return 0;
@@ -341,6 +473,10 @@ static void dwxpcs_remove(struct mdio_device *mdiodev)
 	/* Restore the original phy_device info */
 	priv->phy_dev->priv = priv->cached_phy_dev.priv;
 	priv->phy_dev->drv = priv->cached_phy_dev.drv;
+
+	free_irq(priv->pdata->irq, priv);
+	if (priv->int_wq)
+		destroy_workqueue(priv->int_wq);
 }
 
 static struct mdio_driver dwxpcs_driver = {
diff --git a/include/linux/dwxpcs.h b/include/linux/dwxpcs.h
index 95da58620aa9..85c2efcecc5a 100644
--- a/include/linux/dwxpcs.h
+++ b/include/linux/dwxpcs.h
@@ -10,6 +10,7 @@ enum dwxpcs_pcs_mode {
 };
 
 struct dwxpcs_platform_data {
+	int irq;
 	enum dwxpcs_pcs_mode mode;
 	int ext_phy_addr;
 	bool speed_2500_en;
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index c1a038224e5d..619f3cc94ec7 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -207,6 +207,7 @@ struct plat_stmmacenet_data {
 	int msi_mac_vec;
 	int msi_wol_vec;
 	int msi_lpi_vec;
+	int msi_phy_conv_vec;
 	int msi_sfty_ce_vec;
 	int msi_sfty_ue_vec;
 	int msi_rx_base_vec;
-- 
2.17.1

