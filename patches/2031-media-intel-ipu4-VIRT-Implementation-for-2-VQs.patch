From 3e8002627ad2458eba87eef4382e13179f0c4a46 Mon Sep 17 00:00:00 2001
From: "Bandi, Kushal" <kushal.bandi@intel.com>
Date: Fri, 27 Jul 2018 16:55:43 -0700
Subject: [PATCH 2031/2328] media: intel-ipu4: [VIRT] Implementation for 2 VQs

File ops are mapped to VIRT_Q_1
Stream & Pipeline ops are mapped to VIRT_Q_2

Added 2 wait queue and mutex lock for 2 VQ support.

Change-Id: I00c0c09c3640cf8f0f30bb084b4fa5eb8214227d
Signed-off-by: Bandi, Kushal <kushal.bandi@intel.com>
Signed-off-by: Ong Hock Yu <ong.hock.yu@intel.com>
---
 .../pci/intel/virtio/intel-ipu4-para-virt-drv.c    | 44 +++++++------
 .../media/pci/intel/virtio/intel-ipu4-virtio-be.c  | 14 ++---
 .../pci/intel/virtio/intel-ipu4-virtio-common.h    |  8 ++-
 .../intel/virtio/intel-ipu4-virtio-fe-pipeline.c   |  8 +--
 .../media/pci/intel/virtio/intel-ipu4-virtio-fe.c  | 73 ++++++++++++++--------
 5 files changed, 86 insertions(+), 61 deletions(-)

diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
index e900406..af2aba3 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
@@ -36,6 +36,8 @@ static int stream_dev_init;
 
 static struct ipu4_virtio_ctx *g_fe_priv;
 
+struct mutex fop_mutex;
+
 #ifdef CONFIG_COMPAT
 struct timeval32 {
 	__u32 tv_sec;
@@ -463,7 +465,7 @@ static int virt_isys_set_format(struct file *file, void *fh,
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_SET_FORMAT, &op[0]);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_0);
 	if (rval) {
 		dev_err(&strm_dev->dev, "Failed to open virtual device\n");
 		kfree(req);
@@ -491,7 +493,7 @@ static int virt_isys_stream_on(struct file *file, void *fh)
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_STREAM_ON, &op[0]);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_0);
 	if (rval) {
 		dev_err(&strm_dev->dev, "Failed to open virtual device\n");
 		kfree(req);
@@ -524,7 +526,7 @@ static int virt_isys_stream_off(struct file *file, void *fh)
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_STREAM_OFF, &op[0]);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_0);
 	if (rval) {
 		dev_err(&strm_dev->dev, "Failed to open virtual device\n");
 		kfree(req);
@@ -567,7 +569,7 @@ static int virt_isys_getbuf(struct file *file, void *fh,
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_GET_BUF, &op[0]);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_0);
 	if (rval) {
 		dev_err(&strm_dev->dev, "Failed to Get Buffer\n");
 		kfree(req);
@@ -600,7 +602,7 @@ static int virt_isys_putbuf(struct file *file, void *fh,
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_PUT_BUF, &op[0]);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_0);
 	if (rval) {
 		dev_err(&strm_dev->dev, "Failed to Get Buffer\n");
 		kfree(req);
@@ -636,18 +638,18 @@ static unsigned int stream_fop_poll(struct file *file, struct ici_stream_device
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_POLL, &op[0]);
 
-	mutex_lock(strm_dev->mutex);
+	mutex_lock(&fop_mutex);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_1);
 	if (rval) {
-		mutex_unlock(strm_dev->mutex);
+		mutex_unlock(&fop_mutex);
 		dev_err(&strm_dev->dev, "Failed to open virtual device\n");
 		kfree(req);
 		return rval;
 	}
 	kfree(req);
 
-	mutex_unlock(strm_dev->mutex);
+	mutex_unlock(&fop_mutex);
 
 	return req->func_ret;
 }
@@ -679,18 +681,18 @@ static int virt_stream_fop_open(struct inode *inode, struct file *file)
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_DEVICE_OPEN, &op[0]);
 
-	mutex_lock(strm_dev->mutex);
+	mutex_lock(&fop_mutex);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_1);
 	if (rval) {
-		mutex_unlock(strm_dev->mutex);
+		mutex_unlock(&fop_mutex);
 		dev_err(&strm_dev->dev, "Failed to open virtual device\n");
 		kfree(req);
 		return rval;
 	}
 	kfree(req);
 
-	mutex_unlock(strm_dev->mutex);
+	mutex_unlock(&fop_mutex);
 
 	return rval;
 }
@@ -715,18 +717,18 @@ static int virt_stream_fop_release(struct inode *inode, struct file *file)
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_DEVICE_CLOSE, &op[0]);
 
-	mutex_lock(strm_dev->mutex);
+	mutex_lock(&fop_mutex);
 
-	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true, IPU_VIRTIO_QUEUE_1);
 	if (rval) {
-		mutex_unlock(strm_dev->mutex);
+		mutex_unlock(&fop_mutex);
 		dev_err(&strm_dev->dev, "Failed to close virtual device\n");
 		kfree(req);
 		return rval;
 	}
 	kfree(req);
 
-	mutex_unlock(strm_dev->mutex);
+	mutex_unlock(&fop_mutex);
 
 	return rval;
 }
@@ -741,7 +743,7 @@ static unsigned int virt_stream_fop_poll(struct file *file,
 
 	res = stream_fop_poll(file, as);
 
-	res = POLLIN;
+	//res = POLLIN;
 
 	dev_dbg(&as->dev, "virt_stream_fop_poll res %u\n", res);
 
@@ -1024,7 +1026,7 @@ static int virt_pipeline_fop_open(struct inode *inode, struct file *file)
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_PIPELINE_OPEN, &op[0]);
 
-	rval = g_fe_priv->bknd_ops->send_req(g_fe_priv->domid, req, true);
+	rval = g_fe_priv->bknd_ops->send_req(g_fe_priv->domid, req, true, IPU_VIRTIO_QUEUE_1);
 	if (rval) {
 		pr_err("Failed to open virtual device\n");
 		kfree(req);
@@ -1055,7 +1057,7 @@ static int virt_pipeline_fop_release(struct inode *inode, struct file *file)
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_PIPELINE_CLOSE, &op[0]);
 
-	rval = g_fe_priv->bknd_ops->send_req(g_fe_priv->domid, req, true);
+	rval = g_fe_priv->bknd_ops->send_req(g_fe_priv->domid, req, true, IPU_VIRTIO_QUEUE_1);
 	if (rval) {
 		pr_err("Failed to close virtual device\n");
 		kfree(req);
@@ -1272,6 +1274,7 @@ static int __init virt_ici_init(void)
 		if (!vstream)
 			return -ENOMEM;
 		mutex_init(&vstream->mutex);
+		mutex_init(&fop_mutex);
 		vstream->strm_dev.mutex = &vstream->mutex;
 
 		rval = virt_frame_buf_init(&vstream->buf_list);
@@ -1296,6 +1299,7 @@ static int __init virt_ici_init(void)
 
 init_fail:
 	mutex_destroy(&vstream->mutex);
+	mutex_destroy(&fop_mutex);
 	kfree(vstream);
 	return rval;
 }
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
index 6245570..0662a9e 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be.c
@@ -18,11 +18,6 @@
 #include "intel-ipu4-virtio-common.h"
 #include "intel-ipu4-virtio-be-bridge.h"
 
-enum {
-	IPU_VIRTIO_RX_QUEUE = 0,
-	IPU_VIRTIO_QUEUE_MAX
-};
-
 /**
  * struct ipu4_virtio_be_priv - Backend of virtio-rng based on VBS-K
  *
@@ -242,17 +237,16 @@ static int ipu_vbk_open(struct inode *inode, struct file *f)
 		return -ENOMEM;
 	}
 
+	vqs = &priv->vqs[0];
+
 	dev = &priv->dev;
+
 	strncpy(dev->name, "vbs_ipu", VBS_NAME_LEN);
 	dev->dev_notify = handle_kick;
-	vqs = (struct virtio_vq_info *)&priv->vqs;
+
 
 	for (i = 0; i < IPU_VIRTIO_QUEUE_MAX; i++) {
 		vqs[i].dev = dev;
-		/*
-		 * Currently relies on VHM to kick us,
-		 * thus vq_notify not used
-		 */
 		vqs[i].vq_notify = NULL;
 	}
 
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
index 3098b47..e55685c 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-common.h
@@ -21,6 +21,12 @@
 
 #define MAX_ENTRY_FE 7
 
+enum virio_queue_type {
+      IPU_VIRTIO_QUEUE_0 = 0,
+      IPU_VIRTIO_QUEUE_1,
+      IPU_VIRTIO_QUEUE_MAX
+};
+
 struct ipu4_virtio_req {
 	unsigned int req_id;
 	unsigned int stat;
@@ -67,7 +73,7 @@ struct ipu4_bknd_ops {
 	/* retreiving id of current virtual machine */
 	int (*get_vm_id)(void);
 
-	int (*send_req)(int, struct ipu4_virtio_req *, int);
+	int (*send_req)(int, struct ipu4_virtio_req *, int, int);
 };
 
 struct ipu4_virtio_ctx {
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c
index 740808d..0f5d8b6 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c
@@ -12,10 +12,8 @@
 #include "intel-ipu4-virtio-fe-payload.h"
 #include "intel-ipu4-virtio-fe-pipeline.h"
 
-int process_pipeline(struct file *file,
-						struct ipu4_virtio_ctx *fe_priv,
-						void *data,
-						int cmd)
+int process_pipeline(struct file *file, struct ipu4_virtio_ctx *fe_priv,
+			void *data, int cmd)
 {
 	struct ipu4_virtio_req *req;
 	int rval = 0;
@@ -32,7 +30,7 @@ int process_pipeline(struct file *file,
 
 	intel_ipu4_virtio_create_req(req, cmd, &op[0]);
 
-	rval = fe_priv->bknd_ops->send_req(fe_priv->domid, req, true);
+	rval = fe_priv->bknd_ops->send_req(fe_priv->domid, req, true, IPU_VIRTIO_QUEUE_0);
 	if (rval) {
 		pr_err("Failed to send request to BE\n");
 		kfree(req);
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c
index eb1caec..a800113 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe.c
@@ -16,7 +16,7 @@
 static DEFINE_IDA(index_ida);
 
 struct ipu4_virtio_uos {
-	struct virtqueue *vq;
+	struct virtqueue *vq[IPU_VIRTIO_QUEUE_MAX];
 	struct completion have_data;
 	char name[25];
 	unsigned int data_avail;
@@ -25,40 +25,61 @@ struct ipu4_virtio_uos {
 	int vmid;
 };
 
+struct completion completion_queue[IPU_VIRTIO_QUEUE_MAX];
 
 /* Assuming there will be one FE instance per VM */
 static struct ipu4_virtio_uos *ipu4_virtio_fe;
 
-static void ipu_virtio_fe_tx_done(struct virtqueue *vq)
+static void ipu_virtio_fe_tx_done_vq_0(struct virtqueue *vq)
 {
-	struct ipu4_virtio_uos *priv = vq->vdev->priv;
+	struct ipu4_virtio_uos *priv = (struct ipu4_virtio_uos *)vq->vdev->priv;
 
 	/* We can get spurious callbacks, e.g. shared IRQs + virtio_pci. */
-	if (!virtqueue_get_buf(priv->vq, &priv->data_avail))
+	if (!virtqueue_get_buf(vq, &priv->data_avail))
 		return;
 
-	complete(&priv->have_data);
-	pr_debug("IPU FE:%s vmid:%d\n", __func__, priv->vmid);
+	complete(&completion_queue[0]);
+	pr_debug("IPU FE:%s vmid:%d TX for VQ 0 done\n", __func__, priv->vmid);
+}
+
+static void ipu_virtio_fe_tx_done_vq_1(struct virtqueue *vq)
+{
+	struct ipu4_virtio_uos *priv = (struct ipu4_virtio_uos *)vq->vdev->priv;
+
+	/* We can get spurious callbacks, e.g. shared IRQs + virtio_pci. */
+	if (!virtqueue_get_buf(vq, &priv->data_avail))
+		return;
+
+	complete(&completion_queue[1]);
+	pr_debug("IPU FE:%s vmid:%d TX for VQ 1 done\n", __func__, priv->vmid);
 }
 
 /* The host will fill any buffer we give it with sweet, sweet randomness. */
-static void ipu_virtio_fe_register_buffer(struct ipu4_virtio_uos *vi, void *buf, size_t size)
+static void ipu_virtio_fe_register_buffer(struct ipu4_virtio_uos *vi, void *buf, size_t size,
+		int nqueue)
 {
 	struct scatterlist sg;
+	if (nqueue >= IPU_VIRTIO_QUEUE_MAX) {
+		pr_debug("Number of queue exceeding max queue number\n");
+			return;
+	}
 
 	sg_init_one(&sg, buf, size);
 
 	/* There should always be room for one buffer. */
-	virtqueue_add_inbuf(vi->vq, &sg, 1, buf, GFP_KERNEL);
+	virtqueue_add_inbuf(vi->vq[nqueue], &sg, 1, buf, GFP_KERNEL);
 
-	virtqueue_kick(vi->vq);
+	virtqueue_kick(vi->vq[nqueue]);
 }
 
 static int ipu_virtio_fe_probe_common(struct virtio_device *vdev)
 {
-	int err, index;
+	int err, index, i;
 	struct ipu4_virtio_uos *priv = NULL;
-
+	vq_callback_t *callbacks[] = {ipu_virtio_fe_tx_done_vq_0,
+							ipu_virtio_fe_tx_done_vq_1};
+	static const char *names[] = {"csi_queue_0", "csi_queue_1"};
+	printk("Entering %s\n", __func__);
 	priv = kzalloc(sizeof(struct ipu4_virtio_uos), GFP_KERNEL);
 	if (!priv)
 		return -ENOMEM;
@@ -69,16 +90,15 @@ static int ipu_virtio_fe_probe_common(struct virtio_device *vdev)
 		goto err_ida;
 	}
 	sprintf(priv->name, "virtio_.%d", index);
-	init_completion(&priv->have_data);
+	for (i = 0; i < IPU_VIRTIO_QUEUE_MAX; i++)
+		init_completion(&completion_queue[i]);
 	priv->vmid = -1;
 	vdev->priv = priv;
-
-	/* We expect a single virtqueue. */
-	priv->vq = virtio_find_single_vq(vdev, ipu_virtio_fe_tx_done, "csi_input");
-	if (IS_ERR(priv->vq)) {
-		err = PTR_ERR(priv->vq);
+	err = virtio_find_vqs(vdev, IPU_VIRTIO_QUEUE_MAX,
+				      priv->vq, callbacks, names, NULL);
+	if (err)
 		goto err_find;
-	}
+
 	ipu4_virtio_fe = priv;
 
 	return 0;
@@ -93,19 +113,21 @@ static int ipu_virtio_fe_probe_common(struct virtio_device *vdev)
 static void ipu_virtio_fe_remove_common(struct virtio_device *vdev)
 {
 	struct ipu4_virtio_uos *priv = vdev->priv;
+	int i;
 
 	priv->data_avail = 0;
-	complete(&priv->have_data);
+	for (i = 0; i < IPU_VIRTIO_QUEUE_MAX; i++)
+		complete(&completion_queue[i]);
 	vdev->config->reset(vdev);
 	priv->busy = false;
 
 	vdev->config->del_vqs(vdev);
-	ida_simple_remove(&index_ida, priv->index);
+	//ida_simple_remove(&index_ida, priv->index);
 	kfree(priv);
 }
 
 static int ipu_virtio_fe_send_req(int vmid, struct ipu4_virtio_req *req,
-			      int wait)
+				int wait, int idx)
 {
 	struct ipu4_virtio_uos *priv = ipu4_virtio_fe;
 	int ret = 0;
@@ -115,9 +137,9 @@ static int ipu_virtio_fe_send_req(int vmid, struct ipu4_virtio_req *req,
 		return -ENOENT;
 	}
 
-	init_completion(&priv->have_data);
-	ipu_virtio_fe_register_buffer(ipu4_virtio_fe, req, sizeof(*req));
-	wait_for_completion(&priv->have_data);
+	init_completion(&completion_queue[idx]);
+	ipu_virtio_fe_register_buffer(ipu4_virtio_fe, req, sizeof(*req), idx);
+	wait_for_completion(&completion_queue[idx]);
 
 	return ret;
 }
@@ -162,7 +184,8 @@ static void virt_scan(struct virtio_device *vdev)
 		pr_err("IPU No frontend private data\n");
 		return;
 	}
-	ipu_virtio_fe_register_buffer(vi, &vi->vmid, sizeof(vi->vmid));
+	ipu_virtio_fe_register_buffer(vi, &vi->vmid, sizeof(vi->vmid),
+			IPU_VIRTIO_QUEUE_0);
 
 	while (timeout--) {
 		if (vi->vmid > 0)
-- 
2.7.4

