From e7f29049038b4ed921a726d5c755f6cd37039e0e Mon Sep 17 00:00:00 2001
From: Min He <min.he@intel.com>
Date: Wed, 3 May 2017 11:16:42 +0800
Subject: [PATCH 0924/2328] drm/i915/gvt: added option to disable wa_ctx
 shadowing

This patch add an option in GVTg to disable shadowing wa_ctx. In current
IVI environment, since Dom0 and DomU has the same i915, the wa_ctx of
them is same. So no need to do shadow copy of wa_ctx.
By default, shadowing wa_ctx is disabled. If for testing purpose, people
can enable it manually by modifying the code.

Change-Id: I535af0a720e7ccfbca80686e45c79c5c2a3dd9c6
Signed-off-by: Min He <min.he@intel.com>
Reviewed-by: Singh, Satyeshwar <satyeshwar.singh@intel.com>
Reviewed-by: Jiang, Fei <fei.jiang@intel.com>
Reviewed-by: Dong, Eddie <eddie.dong@intel.com>
Tested-by: Dong, Eddie <eddie.dong@intel.com>
---
 drivers/gpu/drm/i915/gvt/execlist.c  | 7 +++++--
 drivers/gpu/drm/i915/gvt/scheduler.c | 3 ++-
 drivers/gpu/drm/i915/gvt/scheduler.h | 2 ++
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/execlist.c b/drivers/gpu/drm/i915/gvt/execlist.c
index f7a21c5..658b4d1 100644
--- a/drivers/gpu/drm/i915/gvt/execlist.c
+++ b/drivers/gpu/drm/i915/gvt/execlist.c
@@ -46,6 +46,7 @@
 #define same_context(a, b) (((a)->context_id == (b)->context_id) && \
 		((a)->lrca == (b)->lrca))
 
+bool gvt_shadow_wa_ctx = false;
 static void clean_workloads(struct intel_vgpu *vgpu, unsigned long engine_mask);
 
 static int context_switch_events[] = {
@@ -459,7 +460,8 @@ static int prepare_execlist_workload(struct intel_vgpu_workload *workload)
 	intel_vgpu_sync_oos_pages(workload->vgpu);
 	intel_vgpu_flush_post_shadow(workload->vgpu);
 	prepare_shadow_batch_buffer(workload);
-	prepare_shadow_wa_ctx(&workload->wa_ctx);
+	if (gvt_shadow_wa_ctx)
+		prepare_shadow_wa_ctx(&workload->wa_ctx);
 	if (!workload->emulate_schedule_in)
 		return 0;
 
@@ -512,7 +514,8 @@ static int complete_execlist_workload(struct intel_vgpu_workload *workload)
 			workload->status);
 
 	release_shadow_batch_buffer(workload);
-	release_shadow_wa_ctx(&workload->wa_ctx);
+	if(gvt_shadow_wa_ctx)
+		release_shadow_wa_ctx(&workload->wa_ctx);
 
 	if (workload->status || (vgpu->resetting_eng & ENGINE_MASK(ring_id))) {
 		/* if workload->status is not successful means HW GPU
diff --git a/drivers/gpu/drm/i915/gvt/scheduler.c b/drivers/gpu/drm/i915/gvt/scheduler.c
index e21de78..d576d15 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.c
+++ b/drivers/gpu/drm/i915/gvt/scheduler.c
@@ -232,7 +232,8 @@ int intel_gvt_scan_and_shadow_workload(struct intel_vgpu_workload *workload)
 		goto out;
 
 	if ((workload->ring_id == RCS) &&
-	    (workload->wa_ctx.indirect_ctx.size != 0)) {
+	    (workload->wa_ctx.indirect_ctx.size != 0)
+	    && gvt_shadow_wa_ctx) {
 		ret = intel_gvt_scan_and_shadow_wa_ctx(&workload->wa_ctx);
 		if (ret)
 			goto out;
diff --git a/drivers/gpu/drm/i915/gvt/scheduler.h b/drivers/gpu/drm/i915/gvt/scheduler.h
index 93a49eb..d45c269 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.h
+++ b/drivers/gpu/drm/i915/gvt/scheduler.h
@@ -141,4 +141,6 @@ int intel_vgpu_init_gvt_context(struct intel_vgpu *vgpu);
 
 void intel_vgpu_clean_gvt_context(struct intel_vgpu *vgpu);
 
+extern bool gvt_shadow_wa_ctx;
+
 #endif
-- 
2.7.4

