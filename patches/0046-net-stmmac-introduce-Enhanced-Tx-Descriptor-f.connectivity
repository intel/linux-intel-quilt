From bc9676bbeff6dae074a75b10c1b8917d00227ff4 Mon Sep 17 00:00:00 2001
From: Kweh Hock Leong <hock.leong.kweh@intel.com>
Date: Thu, 8 Aug 2019 17:43:30 +0800
Subject: [PATCH 046/104] net: stmmac: introduce Enhanced Tx Descriptor for
 Time-Based Scheduling

DWMAC EQoS IPv5.xx newly introduces Time-Based Scheduling (TBS) that allow
per-packet transmission setting through Enhanced Tx Descriptor. The TxTime
is set in Launch Time field of the descriptor.

Signed-off-by: Kweh Hock Leong <hock.leong.kweh@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/common.h  |  2 +
 drivers/net/ethernet/stmicro/stmmac/descs.h   | 17 ++++
 .../ethernet/stmicro/stmmac/dwmac4_descs.c    | 87 +++++++++++++++++++
 3 files changed, 106 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/common.h b/drivers/net/ethernet/stmicro/stmmac/common.h
index 4ef66574ae13..45cd3aceba1c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@ -400,6 +400,7 @@ struct dma_features {
 
 #define STMMAC_CHAIN_MODE	0x1
 #define STMMAC_RING_MODE	0x2
+#define STMMAC_ENHANCED_TX_MODE	0x3
 
 #define JUMBO_LEN		9000
 
@@ -493,5 +494,6 @@ void dwmac_dma_flush_tx_fifo(void __iomem *ioaddr);
 extern const struct stmmac_mode_ops ring_mode_ops;
 extern const struct stmmac_mode_ops chain_mode_ops;
 extern const struct stmmac_desc_ops dwmac4_desc_ops;
+extern const struct stmmac_desc_ops dwmac5_desc_ops;
 
 #endif /* __COMMON_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/descs.h b/drivers/net/ethernet/stmicro/stmmac/descs.h
index 9f0b9a9e63b3..8bab8c83121f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/descs.h
+++ b/drivers/net/ethernet/stmicro/stmmac/descs.h
@@ -154,6 +154,14 @@
 #define RDES_PTP_SIGNALING		0xa
 #define RDES_PTP_PKT_RESERVED_TYPE	0xf
 
+/* Enhanced TX descriptor definitions (DWMAC v5.xx) */
+#define ETDESC4_LTV                    BIT(31)
+#define ETDESC4_GSN                    GENMASK(11, 8)
+#define ETDESC4_GSN_SHIFT              8
+#define ETDESC4_LT_SEC                 GENMASK(7, 0)
+#define ETDESC5_LT_NANOSEC             GENMASK(31, 8)
+#define ETDESC5_LT_NANOSEC_SHIFT       8
+
 /* Basic descriptor structure for normal and alternate descriptors */
 struct dma_desc {
 	__le32 des0;
@@ -171,6 +179,15 @@ struct dma_extended_desc {
 	__le32 des7;	/* Tx/Rx Timestamp High */
 };
 
+/* Enhanced TX descriptor structure (e.g. >= databook 5.00) */
+struct dma_enhanced_tx_desc {
+	__le32 etdes4;  /* Launch Time (s), GSN, LTV */
+	__le32 etdes5;  /* Launch Time (us) */
+	__le32 etdes6;  /* Reserved */
+	__le32 etdes7;  /* Reserved */
+	struct dma_desc basic;  /* Basic descriptors */
+};
+
 /* Transmit checksum insertion control */
 #define	TX_CIC_FULL	3	/* Include IP header and pseudoheader */
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c
index 484fb935f2bf..363b9be02cb2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_descs.c
@@ -491,6 +491,93 @@ const struct stmmac_desc_ops dwmac4_desc_ops = {
 	.clear = dwmac4_clear,
 };
 
+static void dwmac5_rd_init_tx_desc(struct dma_desc *p, int mode, int end)
+{
+	p->des0 = 0;
+	p->des1 = 0;
+	p->des2 = 0;
+	p->des3 = 0;
+
+	if (mode == STMMAC_ENHANCED_TX_MODE) {
+		struct dma_enhanced_tx_desc *enhtxdesc;
+
+		enhtxdesc = container_of(p, struct dma_enhanced_tx_desc, basic);
+		enhtxdesc->etdes4 = 0;
+		enhtxdesc->etdes5 = 0;
+		enhtxdesc->etdes6 = 0;
+		enhtxdesc->etdes7 = 0;
+	}
+}
+
+static void dwmac5_release_tx_desc(struct dma_desc *p, int mode)
+{
+	p->des2 = 0;
+	p->des3 = 0;
+
+	if (mode == STMMAC_ENHANCED_TX_MODE) {
+		struct dma_enhanced_tx_desc *enhtxdesc;
+
+		enhtxdesc = container_of(p, struct dma_enhanced_tx_desc, basic);
+		enhtxdesc->etdes4 = 0;
+		enhtxdesc->etdes5 = 0;
+	}
+}
+
+static void dwmac5_display_ring(void *head, unsigned int size, bool rx)
+{
+	struct dma_enhanced_tx_desc *enhp = (struct dma_enhanced_tx_desc *)head;
+	struct dma_desc *p = (struct dma_desc *)head;
+	int i;
+
+	pr_info("%s descriptor ring:\n", rx ? "RX" : "TX");
+
+	for (i = 0; i < size; i++) {
+		if (rx) {
+			pr_info("%d [0x%x]: 0x%x 0x%x 0x%x 0x%x\n",
+				i, (unsigned int)virt_to_phys(p),
+				le32_to_cpu(p->des0), le32_to_cpu(p->des1),
+				le32_to_cpu(p->des2), le32_to_cpu(p->des3));
+			p++;
+		} else {
+			pr_info("%d [0x%x]: 0x%x 0x%x 0x%x 0x%x\n",
+				i, (unsigned int)virt_to_phys(enhp),
+				le32_to_cpu(enhp->basic.des0),
+				le32_to_cpu(enhp->basic.des1),
+				le32_to_cpu(enhp->basic.des2),
+				le32_to_cpu(enhp->basic.des3));
+			enhp++;
+		}
+	}
+}
+
+const struct stmmac_desc_ops dwmac5_desc_ops = {
+	.tx_status = dwmac4_wrback_get_tx_status,
+	.rx_status = dwmac4_wrback_get_rx_status,
+	.get_tx_len = dwmac4_rd_get_tx_len,
+	.get_tx_owner = dwmac4_get_tx_owner,
+	.set_tx_owner = dwmac4_set_tx_owner,
+	.set_rx_owner = dwmac4_set_rx_owner,
+	.get_tx_ls = dwmac4_get_tx_ls,
+	.get_rx_vlan_tci = dwmac4_wrback_get_rx_vlan_tci,
+	.get_rx_vlan_valid = dwmac4_wrback_get_rx_vlan_valid,
+	.get_rx_frame_len = dwmac4_wrback_get_rx_frame_len,
+	.enable_tx_timestamp = dwmac4_rd_enable_tx_timestamp,
+	.get_tx_timestamp_status = dwmac4_wrback_get_tx_timestamp_status,
+	.get_rx_timestamp_status = dwmac4_wrback_get_rx_timestamp_status,
+	.get_timestamp = dwmac4_get_timestamp,
+	.set_tx_ic = dwmac4_rd_set_tx_ic,
+	.prepare_tx_desc = dwmac4_rd_prepare_tx_desc,
+	.prepare_tso_tx_desc = dwmac4_rd_prepare_tso_tx_desc,
+	.release_tx_desc = dwmac5_release_tx_desc,
+	.init_rx_desc = dwmac4_rd_init_rx_desc,
+	.init_tx_desc = dwmac5_rd_init_tx_desc,
+	.display_ring = dwmac5_display_ring,
+	.set_mss = dwmac4_set_mss_ctxt,
+	.get_addr = dwmac4_get_addr,
+	.set_addr = dwmac4_set_addr,
+	.clear = dwmac4_clear,
+};
+
 const struct stmmac_mode_ops dwmac4_ring_mode_ops = {
 	.set_16kib_bfsize = set_16kib_bfsize,
 };
-- 
2.17.1

