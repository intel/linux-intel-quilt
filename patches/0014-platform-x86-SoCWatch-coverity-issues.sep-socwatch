From 39fd758852a1283177b1d4a35cba7cbb395c2fb7 Mon Sep 17 00:00:00 2001
From: Faycal Benmlih <faycal.benmlih@intel.com>
Date: Fri, 26 Apr 2019 13:45:06 -0500
Subject: [PATCH 14/27] platform/x86: SoCWatch coverity issues

- INCK-96: unsigned idx variable compared with < 0
- INCK-95: incorrect pointer null check usage
- INCK-93, INCK-94: bad weak symbol comparison

Signed-off-by: Faycal Benmlih <faycal.benmlih@intel.com>
---
 .../platform/x86/socwatch/inc/sw_structs.h    |  2 +-
 drivers/platform/x86/socwatch/sw_collector.c  | 31 ++++++++-------
 .../platform/x86/socwatch/sw_ops_provider.c   |  2 +-
 drivers/platform/x86/socwatch/sw_telem.c      | 38 +++++++++----------
 .../platform/x86/socwatchhv/inc/sw_structs.h  |  2 +-
 5 files changed, 37 insertions(+), 38 deletions(-)

diff --git a/drivers/platform/x86/socwatch/inc/sw_structs.h b/drivers/platform/x86/socwatch/inc/sw_structs.h
index 738edd35de24..3c1bcc46be2f 100644
--- a/drivers/platform/x86/socwatch/inc/sw_structs.h
+++ b/drivers/platform/x86/socwatch/inc/sw_structs.h
@@ -250,7 +250,7 @@ struct sw_driver_trace_args_io_descriptor {
 struct sw_driver_telem_io_descriptor {
 	union {
 		pw_u16_t id;
-		pw_u8_t  idx;
+		pw_s8_t  idx;
 	};
 	pw_u8_t   unit;
 	pw_u8_t   scale_op;
diff --git a/drivers/platform/x86/socwatch/sw_collector.c b/drivers/platform/x86/socwatch/sw_collector.c
index ebc65666caf6..652d5af6113b 100644
--- a/drivers/platform/x86/socwatch/sw_collector.c
+++ b/drivers/platform/x86/socwatch/sw_collector.c
@@ -528,23 +528,22 @@ struct sw_collector_data *sw_alloc_collector_node(void)
 
 void sw_free_collector_node(struct sw_collector_data *node)
 {
-	if (node)
-		return;
-
-	if (node->info) {
-		sw_reset_driver_interface_info_i(node->info);
-		sw_free_driver_interface_info_i(node->info);
-		node->info = NULL;
-	}
-	if (node->ops) {
-		sw_free_ops_i(node->ops);
-		node->ops = NULL;
-	}
-	if (node->msg) {
-		sw_free_collector_msg_i(node->msg);
-		node->msg = NULL;
+	if (node) {
+		if (node->info) {
+			sw_reset_driver_interface_info_i(node->info);
+			sw_free_driver_interface_info_i(node->info);
+			node->info = NULL;
+		}
+		if (node->ops) {
+			sw_free_ops_i(node->ops);
+			node->ops = NULL;
+		}
+		if (node->msg) {
+			sw_free_collector_msg_i(node->msg);
+			node->msg = NULL;
+		}
+		sw_kfree(node);
 	}
-	sw_kfree(node);
 }
 
 int sw_handle_collector_node(struct sw_collector_data *node)
diff --git a/drivers/platform/x86/socwatch/sw_ops_provider.c b/drivers/platform/x86/socwatch/sw_ops_provider.c
index 6277d7d550ca..285bec0130fe 100644
--- a/drivers/platform/x86/socwatch/sw_ops_provider.c
+++ b/drivers/platform/x86/socwatch/sw_ops_provider.c
@@ -810,7 +810,7 @@ bool sw_socperf_available_i(void)
 	 * weak definition exists. This test will suffice to detect if
 	 * the socperf driver is loaded.
 	 */
-	if (SOCPERF_Read_Data3 != 0) {
+	if (SOCPERF_Read_Data3) {
 		pw_pr_debug("INFO: SoCPerf support in ON!\n");
 		retVal = true;
 	} else
diff --git a/drivers/platform/x86/socwatch/sw_telem.c b/drivers/platform/x86/socwatch/sw_telem.c
index 1aed81c8c119..eb162b1b28e3 100644
--- a/drivers/platform/x86/socwatch/sw_telem.c
+++ b/drivers/platform/x86/socwatch/sw_telem.c
@@ -703,25 +703,25 @@ static int builtin_telemetry_available(void)
 	 * weak definition exists. This test will suffice to detect if
 	 * the telemetry driver is loaded.
 	 */
-	if (telemetry_get_eventconfig == 0)
-		return 0;
-
-	/* OK, the telemetry driver is loaded. But it's possible it
-	 * hasn't been configured properly. To check that, retrieve
-	 * the number of events currently configured. This should never
-	 * be zero since the telemetry driver reserves some SSRAM slots
-	 * for its own use
-	 */
-	memset(&punit_evtconfig, 0, sizeof(punit_evtconfig));
-	memset(&pmc_evtconfig, 0, sizeof(pmc_evtconfig));
-
-	punit_evtconfig.evtmap = (u32 *) &punit_event_map;
-	pmc_evtconfig.evtmap = (u32 *) &pmc_event_map;
-
-	retval = telemetry_get_eventconfig(&punit_evtconfig, &pmc_evtconfig,
-					MAX_TELEM_EVENTS, MAX_TELEM_EVENTS);
-	return (retval == 0 && punit_evtconfig.num_evts > 0 &&
-		pmc_evtconfig.num_evts > 0);
+	if (telemetry_get_eventconfig) {
+		/* OK, the telemetry driver is loaded. But it's possible it
+		 * hasn't been configured properly. To check that, retrieve
+		 * the number of events currently configured. This should never
+		 * be zero since the telemetry driver reserves some SSRAM slots
+		 * for its own use
+		 */
+		memset(&punit_evtconfig, 0, sizeof(punit_evtconfig));
+		memset(&pmc_evtconfig, 0, sizeof(pmc_evtconfig));
+
+		punit_evtconfig.evtmap = (u32 *) &punit_event_map;
+		pmc_evtconfig.evtmap = (u32 *) &pmc_event_map;
+
+		retval = telemetry_get_eventconfig(&punit_evtconfig, &pmc_evtconfig,
+						MAX_TELEM_EVENTS, MAX_TELEM_EVENTS);
+		return (retval == 0 && punit_evtconfig.num_evts > 0 &&
+			pmc_evtconfig.num_evts > 0);
+	}
+	return 0;
 }
 
 /**
diff --git a/drivers/platform/x86/socwatchhv/inc/sw_structs.h b/drivers/platform/x86/socwatchhv/inc/sw_structs.h
index 738edd35de24..3c1bcc46be2f 100644
--- a/drivers/platform/x86/socwatchhv/inc/sw_structs.h
+++ b/drivers/platform/x86/socwatchhv/inc/sw_structs.h
@@ -250,7 +250,7 @@ struct sw_driver_trace_args_io_descriptor {
 struct sw_driver_telem_io_descriptor {
 	union {
 		pw_u16_t id;
-		pw_u8_t  idx;
+		pw_s8_t  idx;
 	};
 	pw_u8_t   unit;
 	pw_u8_t   scale_op;
-- 
2.17.1

