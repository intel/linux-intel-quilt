From 3985ed3ebbabedff73daf4d77b0084ef3c5ec9a7 Mon Sep 17 00:00:00 2001
From: Zhipeng Gong <zhipeng.gong@intel.com>
Date: Tue, 11 Sep 2018 11:41:41 +0800
Subject: [PATCH 2131/2367] drm/i915/gvt: add ggtt pv fallback handling

In some scenarios kernel can not alloc 2M contiguous pages for
ggtt pv and then GVT-g fails to create new intance.
This patch try to fallback to disable ggtt pv in this case.

v2:
- correct condition checking in gen8_mm_free_page_table

Tracked-On: projectacrn/acrn-hypervisor#1208
Signed-off-by: Zhipeng Gong <zhipeng.gong@intel.com>
Reviewed-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/gpu/drm/i915/gvt/cfg_space.c |  5 +++++
 drivers/gpu/drm/i915/gvt/gtt.c       | 19 +++++++++++++++----
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/cfg_space.c b/drivers/gpu/drm/i915/gvt/cfg_space.c
index d822b6b..0012030 100644
--- a/drivers/gpu/drm/i915/gvt/cfg_space.c
+++ b/drivers/gpu/drm/i915/gvt/cfg_space.c
@@ -160,6 +160,11 @@ int map_gttmmio(struct intel_vgpu *vgpu, bool map)
 		return ret;
 	}
 
+	if (!st) {
+		DRM_INFO("no scatter list, fallback to disable ggtt pv\n");
+		return -EINVAL;
+	}
+
 	start = *(u64 *)(vgpu_cfg_space(vgpu) + PCI_BASE_ADDRESS_0);
 	start &= ~GENMASK(3, 0);
 	start += vgpu->cfg_space.bar[INTEL_GVT_PCI_BAR_GTTMMIO].size >> 1;
diff --git a/drivers/gpu/drm/i915/gvt/gtt.c b/drivers/gpu/drm/i915/gvt/gtt.c
index 4bdc0b8..6306583 100644
--- a/drivers/gpu/drm/i915/gvt/gtt.c
+++ b/drivers/gpu/drm/i915/gvt/gtt.c
@@ -1590,6 +1590,7 @@ static void *alloc_ggtt_virtual_page_table(struct intel_vgpu_mm *mm)
 	sg_mark_end(sg);
 	free_ggtt_virtual_page_table(mm);
 	kfree(pages);
+	gm->st = NULL;
 	return NULL;
 }
 
@@ -1624,8 +1625,12 @@ static int gen8_mm_alloc_page_table(struct intel_vgpu_mm *mm)
 		mm->page_table_entry_size = mm->page_table_entry_cnt *
 			info->gtt_entry_size;
 		mem = alloc_ggtt_virtual_page_table(mm);
-		if (!mem)
-			return -ENOMEM;
+		if (!mem) {
+			DRM_INFO("fail to alloc contiguous pages, fallback\n");
+			mem = vzalloc(mm->page_table_entry_size);
+			if (!mem)
+				return -ENOMEM;
+		}
 		mm->virtual_page_table = mem;
 	}
 	return 0;
@@ -1637,8 +1642,14 @@ static void gen8_mm_free_page_table(struct intel_vgpu_mm *mm)
 		kfree(mm->virtual_page_table);
 	} else if (mm->type == INTEL_GVT_MM_GGTT) {
 		if (mm->virtual_page_table) {
-			map_gttmmio(mm->vgpu, false);
-			free_ggtt_virtual_page_table(mm);
+			struct intel_vgpu *vgpu = mm->vgpu;
+			struct intel_vgpu_gm *gm = &vgpu->gm;
+
+			if (gm->st) {
+				map_gttmmio(mm->vgpu, false);
+				free_ggtt_virtual_page_table(mm);
+			} else
+				vfree(mm->virtual_page_table);
 		}
 	}
 	mm->virtual_page_table = mm->shadow_page_table = NULL;
-- 
2.7.4

