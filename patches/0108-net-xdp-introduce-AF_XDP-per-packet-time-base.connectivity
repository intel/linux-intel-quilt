From 0ee1ac881dfc39bef7751b46a4dd73aa9efe54b4 Mon Sep 17 00:00:00 2001
From: "Wong, Vincent Por Yin" <vincent.por.yin.wong@intel.com>
Date: Mon, 14 Oct 2019 14:24:43 +0800
Subject: [PATCH 108/108] net: xdp: introduce AF_XDP per-packet time-based
 scheduling

Introduce per-packet time-based scheduling via the xdp descriptor. Users
specify per-packet transmit time via the xdp descriptor's txtime field.
Users are expected to specify the transmit time sufficiently ahead of
time based on their system's scheduling latency. Driver is reponsible to
either drop or transmit already late packets.

Signed-off-by: Wong, Vincent Por Yin <vincent.por.yin.wong@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_xsk.c  |  8 ++++
 include/uapi/linux/if_xdp.h                   |  1 +
 samples/bpf/xdpsock_user.c                    | 38 ++++++++++++++++---
 3 files changed, 42 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_xsk.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_xsk.c
index af96417db99b..d26f065527c3 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_xsk.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_xsk.c
@@ -730,6 +730,14 @@ static bool stmmac_xmit_zc(struct stmmac_tx_queue *xdp_q, unsigned int budget)
 
 		stmmac_set_desc_addr(priv, tx_desc, dma);
 
+		if (stmmac_enabled_xdp(priv) && desc.txtime > 0) {
+			if (stmmac_set_tbs_launchtime(priv, tx_desc,
+						      desc.txtime)) {
+				netdev_warn(priv->dev, "Launch time setting"
+						       "failed\n");
+			}
+		}
+
 		stmmac_prepare_tx_desc(priv, tx_desc, /* Tx descriptor */
 				       1, /* is first descriptor */
 				       desc.len,
diff --git a/include/uapi/linux/if_xdp.h b/include/uapi/linux/if_xdp.h
index be328c59389d..0e8ecdf19459 100644
--- a/include/uapi/linux/if_xdp.h
+++ b/include/uapi/linux/if_xdp.h
@@ -101,6 +101,7 @@ struct xdp_desc {
 	__u64 addr;
 	__u32 len;
 	__u32 options;
+	__u64 txtime;
 };
 
 /* UMEM descriptor is __u64 */
diff --git a/samples/bpf/xdpsock_user.c b/samples/bpf/xdpsock_user.c
index df011ac33402..e960b3e5c670 100644
--- a/samples/bpf/xdpsock_user.c
+++ b/samples/bpf/xdpsock_user.c
@@ -49,6 +49,8 @@
 #define DEBUG_HEXDUMP 0
 #define MAX_SOCKS 8
 
+#define TXTIME_PERIOD_NS 1000000	//1ms
+
 typedef __u64 u64;
 typedef __u32 u32;
 
@@ -71,6 +73,8 @@ static u32 opt_xdp_bind_flags = XDP_USE_NEED_WAKEUP;
 static u32 opt_umem_flags;
 static int opt_unaligned_chunks;
 static int opt_mmap_flags;
+static int opt_txtime;
+static int opt_period_ns = TXTIME_PERIOD_NS;
 static u32 opt_xdp_bind_flags;
 static int opt_xsk_frame_size = XSK_UMEM__DEFAULT_FRAME_SIZE;
 static int opt_timeout = 1000;
@@ -280,6 +284,14 @@ static size_t gen_eth_frame(struct xsk_umem_info *umem, u64 addr)
 	return sizeof(pkt_data) - 1;
 }
 
+static u64 get_time_sec(clockid_t clkid)
+{
+	struct timespec now;
+
+	clock_gettime(clkid, &now);
+	return now.tv_sec * 1000000000;
+}
+
 static struct xsk_umem_info *xsk_configure_umem(void *buffer, u64 size)
 {
 	struct xsk_umem_info *umem;
@@ -398,8 +410,8 @@ static void parse_command_line(int argc, char **argv)
 	opterr = 0;
 
 	for (;;) {
-		c = getopt_long(argc, argv, "Frtli:q:psSNn:czf:mu",
-				long_options, &option_index);
+		c = getopt_long(argc, argv, "Frtli:q:psSNn:czf:muTP:", long_options,
+				&option_index);
 		if (c == -1)
 			break;
 
@@ -452,7 +464,12 @@ static void parse_command_line(int argc, char **argv)
 			opt_need_wakeup = false;
 			opt_xdp_bind_flags &= ~XDP_USE_NEED_WAKEUP;
 			break;
-
+		case 'T':
+			opt_txtime = 1;
+			break;
+		case 'P':
+			opt_period_ns = atoi(optarg);
+			break;
 		default:
 			usage(basename(argv[0]));
 		}
@@ -608,7 +625,7 @@ static void rx_drop_all(void)
 	}
 }
 
-static void tx_only(struct xsk_socket_info *xsk, u32 frame_nb)
+static void tx_only(struct xsk_socket_info *xsk, u32 frame_nb, u64 tx_timestamp)
 {
 	u32 idx;
 
@@ -620,6 +637,8 @@ static void tx_only(struct xsk_socket_info *xsk, u32 frame_nb)
 				(frame_nb + i) << XSK_UMEM__DEFAULT_FRAME_SHIFT;
 			xsk_ring_prod__tx_desc(&xsk->tx, idx + i)->len =
 				sizeof(pkt_data) - 1;
+			xsk_ring_prod__tx_desc(&xsk->tx, idx + i)->txtime =
+				tx_timestamp;
 		}
 
 		xsk_ring_prod__submit(&xsk->tx, BATCH_SIZE);
@@ -643,6 +662,12 @@ static void tx_only_all(void)
 		fds[0].events = POLLOUT;
 	}
 
+	if (opt_txtime)
+		/* Initialize the first packet to the next second */
+		tx_timestamp = get_time_sec(CLOCK_TAI) + 1000000000;
+	else
+		tx_timestamp = 0;
+
 	for (;;) {
 		if (opt_poll) {
 			ret = poll(fds, num_socks, opt_timeout);
@@ -653,8 +678,11 @@ static void tx_only_all(void)
 				continue;
 		}
 
+		if (opt_txtime)
+			tx_timestamp += opt_period_ns;
+
 		for (i = 0; i < num_socks; i++)
-			tx_only(xsks[i], frame_nb[i]);
+			tx_only(xsks[i], frame_nb[i], tx_timestamp);
 	}
 }
 
-- 
2.17.1

