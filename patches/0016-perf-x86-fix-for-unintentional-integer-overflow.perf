From b8fccbaaf9731c20bacc6745b1f094b492b7ce65 Mon Sep 17 00:00:00 2001
From: Qin Chao <chao.qin@intel.com>
Date: Wed, 20 May 2020 08:11:23 +0800
Subject: [PATCH 16/16] perf/x86: fix for unintentional integer overflow

Potentially overflowing expression 65536 * pmu->pmu_idx with type
int (32 bits, signed) is evaluated using 32-bit arithmetic, and
then used in a context that expects an expression of type
resource_size_t (64 bits, unsigned).

Signed-off-by: Qin Chao <chao.qin@intel.com>
Signed-off-by: Dutta, Ranjan <ranjan.dutta@intel.com>
---
 arch/x86/events/intel/uncore_snb.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/x86/events/intel/uncore_snb.c b/arch/x86/events/intel/uncore_snb.c
index 3af2c0408994..ca52b6d8cc70 100644
--- a/arch/x86/events/intel/uncore_snb.c
+++ b/arch/x86/events/intel/uncore_snb.c
@@ -1230,7 +1230,7 @@ static void tgl_uncore_imc_freerunning_init_box(struct intel_uncore_box *box)
 		return;
 	}
 	mch_bar &= ~BIT(0);
-	addr = (resource_size_t)(mch_bar + TGL_UNCORE_MMIO_IMC_MEM_OFFSET * pmu->pmu_idx);
+	addr = mch_bar + (resource_size_t)(TGL_UNCORE_MMIO_IMC_MEM_OFFSET * pmu->pmu_idx);
 
 #ifdef CONFIG_PHYS_ADDR_T_64BIT
 	pci_read_config_dword(pdev, SNB_UNCORE_PCI_IMC_BAR_OFFSET + 4, &mch_bar);
-- 
2.27.0

