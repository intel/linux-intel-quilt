From 9f84c5eb397d8826b25471e4f6b33f370a38bfdd Mon Sep 17 00:00:00 2001
From: Laurent FERT <laurent.fert@intel.com>
Date: Wed, 23 Mar 2016 09:19:49 +0100
Subject: [PATCH 17/63] intel_th: Implement suspend and resume

Intel Trace Hub does not need to do anything when going to suspend.

When going to low power or suspending, firmwares will take care of
saving its current state, stopping the current trace and powering it
down.

When coming out of low power or suspend, firmwares will take care of
powering it up restoring its state and resuming the current trace.

The driver still needs to implement the suspend and resume calls so that
the kernel does not disable memory access by setting BME=0 in its PCI
config space before the firmwares do the proper shut down of the Trace
Hub.

Signed-off-by: Laurent FERT <laurent.fert@intel.com>
---
 drivers/hwtracing/intel_th/pci.c | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/drivers/hwtracing/intel_th/pci.c b/drivers/hwtracing/intel_th/pci.c
index 98295bf22e0b..a2174ba2213f 100644
--- a/drivers/hwtracing/intel_th/pci.c
+++ b/drivers/hwtracing/intel_th/pci.c
@@ -194,11 +194,34 @@ static const struct pci_device_id intel_th_pci_id_table[] = {
 
 MODULE_DEVICE_TABLE(pci, intel_th_pci_id_table);
 
+static int intel_th_suspend(struct device *dev)
+{
+	/*
+	 * Stub the call to avoid disabling the device.
+	 * Suspend is fully handled by firmwares.
+	 */
+	return 0;
+}
+
+static int intel_th_resume(struct device *dev)
+{
+	/* Firmwares have already restored the device state. */
+	return 0;
+}
+
+static const struct dev_pm_ops intel_th_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(intel_th_suspend,
+				intel_th_resume)
+};
+
 static struct pci_driver intel_th_pci_driver = {
 	.name		= DRIVER_NAME,
 	.id_table	= intel_th_pci_id_table,
 	.probe		= intel_th_pci_probe,
 	.remove		= intel_th_pci_remove,
+	.driver         = {
+		.pm     = &intel_th_pm_ops,
+	},
 };
 
 module_pci_driver(intel_th_pci_driver);
-- 
2.17.1

