From 3a76dbc9c56dd360617aa5b4d3ffba9592722de7 Mon Sep 17 00:00:00 2001
From: Maciej Bach <maciejx.bach@intel.com>
Date: Wed, 11 Mar 2020 05:30:51 -0400
Subject: [PATCH 1188/1214] Revert "ASoC: Intel: common: Provide an interface
 to send IPCs directly"

This reverts commit 8cd13327419a38ab996a6c215c836c09819f7cce.

The IPC response handling has been significantly changed in order to
make the driver resistant to cases where the system is overloaded and
direct_tx_msg no longer fits in.

Tracked-On: PKT-3258,OAM-90492
Signed-off-by: Maciej Bach <maciejx.bach@intel.com>
---
 sound/soc/intel/common/sst-ipc.c      | 12 ++----------
 sound/soc/intel/common/sst-ipc.h      |  1 -
 sound/soc/intel/skylake/skl-sst-ipc.c | 34 ----------------------------------
 3 files changed, 2 insertions(+), 45 deletions(-)

diff --git a/sound/soc/intel/common/sst-ipc.c b/sound/soc/intel/common/sst-ipc.c
index 4d0e802..ce796b3 100644
--- a/sound/soc/intel/common/sst-ipc.c
+++ b/sound/soc/intel/common/sst-ipc.c
@@ -144,16 +144,8 @@ static int ipc_tx_message(struct sst_generic_ipc *ipc, u64 header,
 		ipc->ops.tx_data_copy(msg, tx_data, tx_bytes);
 
 	list_add_tail(&msg->list, &ipc->tx_list);
-
-	if ((ipc->ops.is_dsp_busy && ipc->ops.is_dsp_busy(ipc->dsp)) ||
-                        (ipc->ops.direct_tx_msg == NULL)) {
-		queue_work(system_highpri_wq, &ipc->kwork);
-                spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
-        } else {
-                spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
-                ipc->ops.direct_tx_msg(ipc);
-		ipc->sent = true;
-        }
+	queue_work(system_highpri_wq, &ipc->kwork);
+        spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
 
 	if (wait)
 		return tx_wait_done(ipc, msg, rx_data,
diff --git a/sound/soc/intel/common/sst-ipc.h b/sound/soc/intel/common/sst-ipc.h
index 7c47e2c..d8865df 100644
--- a/sound/soc/intel/common/sst-ipc.h
+++ b/sound/soc/intel/common/sst-ipc.h
@@ -47,7 +47,6 @@ struct sst_generic_ipc;
 
 struct sst_plat_ipc_ops {
 	void (*tx_msg)(struct sst_generic_ipc *, struct ipc_message *);
-	void (*direct_tx_msg)(struct sst_generic_ipc *);
 	void (*shim_dbg)(struct sst_generic_ipc *, const char *);
 	void (*tx_data_copy)(struct ipc_message *, char *, size_t);
 	u64  (*reply_msg_match)(u64 header, u64 *mask);
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 3cb2342..afd1823 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -338,39 +338,6 @@ static bool skl_ipc_is_dsp_busy(struct sst_dsp *dsp)
 	return (hipci & SKL_ADSP_REG_HIPCI_BUSY);
 }
 
-static void skl_ipc_tx_msgs_direct(struct sst_generic_ipc *ipc)
-{
-        struct ipc_message *msg;
-        unsigned long flags;
-
-        spin_lock_irqsave(&ipc->dsp->spinlock, flags);
-
-        if (list_empty(&ipc->tx_list) || ipc->pending) {
-                spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
-                return;
-        }
-
-        /* if the DSP is busy, we will TX messages after IRQ.
-         * also postpone if we are in the middle of procesing completion irq*/
-        if (ipc->ops.is_dsp_busy && ipc->ops.is_dsp_busy(ipc->dsp)) {
-                dev_dbg(ipc->dev, "skl_ipc_tx_msgs_direct dsp busy\n");
-                spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
-                return;
-        }
-
-        msg = list_first_entry(&ipc->tx_list, struct ipc_message, list);
-        list_move(&msg->list, &ipc->rx_list);
-
-        dev_dbg(ipc->dev, "skl_ipc_tx_msgs_direct sending message, header - %#.16lx\n",
-                                (unsigned long)msg->header);
-        print_hex_dump_debug("Params:", DUMP_PREFIX_OFFSET, 8, 4,
-                             msg->tx_data, msg->tx_size, false);
-        if (ipc->ops.tx_msg != NULL)
-                ipc->ops.tx_msg(ipc, msg);
-
-        spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
-}
-
 /* Lock to be held by caller */
 static void skl_ipc_tx_msg(struct sst_generic_ipc *ipc, struct ipc_message *msg)
 {
@@ -874,7 +841,6 @@ int skl_ipc_init(struct device *dev, struct skl_sst *skl)
 
 	ipc->ops.tx_msg = skl_ipc_tx_msg;
 	ipc->ops.tx_data_copy = skl_ipc_tx_data_copy;
-	ipc->ops.direct_tx_msg = skl_ipc_tx_msgs_direct;
 	ipc->ops.is_dsp_busy = skl_ipc_is_dsp_busy;
 
 	return 0;
-- 
2.7.4

