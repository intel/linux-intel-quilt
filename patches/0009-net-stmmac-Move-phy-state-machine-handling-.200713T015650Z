From 8aa619f190dda26ddc08a0d8d173016be88ba40a Mon Sep 17 00:00:00 2001
From: "Song, Yoong Siang" <yoong.siang.song@intel.com>
Date: Thu, 28 May 2020 07:40:38 +0800
Subject: [PATCH 09/27] net: stmmac: Move phy state machine handling into
 common suspend/resume func

When WOL is enabled, phy state machine will still running even
Ethernet driver is suspended. This will hit phy_error kernel
dump because mdio bus is not available when IP is put into D3.

Therefore, this commit move the phy state machine handling into
common suspend/resume function as the handling is also needed for
non network proxy GbE port if wakeup machanism is enabled.

Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac_main.c     | 6 ++++++
 drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c | 6 ------
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 546b1c17cfe5..30e9f19950b2 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -6701,6 +6701,9 @@ int stmmac_suspend_common(struct stmmac_priv *priv, struct net_device *ndev)
 	u32 chan;
 	int ret;
 
+	if (ndev->phydev && device_may_wakeup(priv->device))
+		phy_stop_machine(ndev->phydev);
+
 	mutex_lock(&priv->lock);
 
 	netif_device_detach(ndev);
@@ -6939,6 +6942,9 @@ int stmmac_resume_common(struct stmmac_priv *priv, struct net_device *ndev)
 
 	mutex_unlock(&priv->lock);
 
+	if (ndev->phydev && device_may_wakeup(priv->device))
+		phy_start_machine(ndev->phydev);
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(stmmac_resume_common);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
index cb9fc1a91381..0406f20891db 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
@@ -134,9 +134,6 @@ irqreturn_t netproxy_isr_thread(int irq, void *dev_id)
 	stmmac_resume_common(priv, ndev);
 	priv->networkproxy_exit = 0;
 
-	if (ndev->phydev)
-		phy_start_machine(ndev->phydev);
-
 	netif_device_attach(ndev);
 
 	return IRQ_HANDLED;
@@ -177,9 +174,6 @@ static int stmmac_netprox_suspend(struct stmmac_priv *priv,
 	/* Message Network Proxy Agent to enter proxy mode */
 	netprox_host_proxy_enter();
 
-	if (ndev->phydev)
-		phy_stop_machine(ndev->phydev);
-
 	stmmac_suspend_common(priv, ndev);
 
 	/* Change the destination of MAC controller interrupt and DMA transfer
-- 
2.17.1

