From ea8021db5967f9aea33bd40dabe01b6dbd272b93 Mon Sep 17 00:00:00 2001
From: Jason Chen CJ <jason.cj.chen@intel.com>
Date: Fri, 31 Aug 2018 10:58:55 +0800
Subject: [PATCH 003/144] VHM: add guest memory management support

VHM provides guest memory management services for application.
It allocates/frees contiguous physical memory for guest based on dma-cma,
and provides corresponding EPT mapping for the allocated memory segment.

Change-Id: Ibbe26b0ccf8436700f44bca899b1ee38c2e4ef72
Tracked-On: 218445
Signed-off-by: liang ding <liang.ding@intel.com>
Signed-off-by: Jason Chen CJ <jason.cj.chen@intel.com>
Signed-off-by: Jason Zeng <jason.zeng@intel.com>
Signed-off-by: Xiao Zheng <xiao.zheng@intel.com>
Signed-off-by: Mingqiang Chi <mingqiang.chi@intel.com>
Reviewed-on:
Reviewed-by: Dong, Eddie <eddie.dong@intel.com>
Tested-by: Dong, Eddie <eddie.dong@intel.com>
---
 drivers/char/vhm/vhm_dev.c         |  26 +++
 drivers/vhm/Makefile               |   2 +-
 drivers/vhm/vhm_hypercall.c        |   5 +
 drivers/vhm/vhm_mm.c               | 364 +++++++++++++++++++++++++++++
 drivers/vhm/vhm_vm_mngt.c          |   2 +
 include/linux/vhm/acrn_hv_defs.h   |  26 +++
 include/linux/vhm/acrn_vhm_mm.h    |  88 +++++++
 include/linux/vhm/vhm_hypercall.h  |   1 +
 include/linux/vhm/vhm_ioctl_defs.h |  40 ++++
 include/linux/vhm/vhm_vm_mngt.h    |   2 +
 10 files changed, 555 insertions(+), 1 deletion(-)
 create mode 100644 drivers/vhm/vhm_mm.c
 create mode 100644 include/linux/vhm/acrn_vhm_mm.h

diff --git a/drivers/char/vhm/vhm_dev.c b/drivers/char/vhm/vhm_dev.c
index 527e90b187cf..3ea8de27cb3e 100644
--- a/drivers/char/vhm/vhm_dev.c
+++ b/drivers/char/vhm/vhm_dev.c
@@ -78,6 +78,7 @@
 
 #include <linux/vhm/acrn_hv_defs.h>
 #include <linux/vhm/vhm_ioctl_defs.h>
+#include <linux/vhm/acrn_vhm_mm.h>
 #include <linux/vhm/vhm_vm_mngt.h>
 #include <linux/vhm/vhm_hypercall.h>
 
@@ -100,6 +101,9 @@ static int vhm_dev_open(struct inode *inodep, struct file *filep)
 	vm->vmid = ACRN_INVALID_VMID;
 	vm->dev = vhm_device;
 
+	INIT_LIST_HEAD(&vm->memseg_list);
+	mutex_init(&vm->seg_lock);
+
 	vm_mutex_lock(&vhm_vm_list_lock);
 	vm->refcnt = 1;
 	vm_list_add(&vm->list);
@@ -163,6 +167,27 @@ static long vhm_dev_ioctl(struct file *filep,
 		ret = vhm_query_vm_state(vm);
 		break;
 
+	case IC_ALLOC_MEMSEG: {
+		struct vm_memseg memseg;
+
+		if (copy_from_user(&memseg, (void *)ioctl_param,
+			sizeof(struct vm_memseg)))
+			return -EFAULT;
+
+		return alloc_guest_memseg(vm, &memseg);
+	}
+
+	case IC_SET_MEMSEG: {
+		struct vm_memmap memmap;
+
+		if (copy_from_user(&memmap, (void *)ioctl_param,
+			sizeof(struct vm_memmap)))
+			return -EFAULT;
+
+		ret = map_guest_memseg(vm, &memmap);
+		break;
+	}
+
 	default:
 		pr_warn("Unknown IOCTL 0x%x\n", ioctl_num);
 		ret = 0;
@@ -189,6 +214,7 @@ static const struct file_operations fops = {
 	.open = vhm_dev_open,
 	.read = vhm_dev_read,
 	.write = vhm_dev_write,
+	.mmap = vhm_dev_mmap,
 	.release = vhm_dev_release,
 	.unlocked_ioctl = vhm_dev_ioctl,
 };
diff --git a/drivers/vhm/Makefile b/drivers/vhm/Makefile
index 220697aaccb7..7e5ec421fbc7 100644
--- a/drivers/vhm/Makefile
+++ b/drivers/vhm/Makefile
@@ -1 +1 @@
-obj-y += vhm_vm_mngt.o vhm_hypercall.o
+obj-y += vhm_mm.o vhm_vm_mngt.o vhm_hypercall.o
diff --git a/drivers/vhm/vhm_hypercall.c b/drivers/vhm/vhm_hypercall.c
index ddc085d0fa11..d80087bcb5fb 100644
--- a/drivers/vhm/vhm_hypercall.c
+++ b/drivers/vhm/vhm_hypercall.c
@@ -53,6 +53,11 @@
 #include <linux/vhm/acrn_hv_defs.h>
 #include <linux/vhm/vhm_hypercall.h>
 
+inline long hcall_set_memmap(unsigned long vmid, unsigned long memmap)
+{
+	return acrn_hypercall2(HC_VM_SET_MEMMAP, vmid, memmap);
+}
+
 inline long vhm_create_vm(struct vhm_vm *vm, unsigned long ioctl_param)
 {
 	long ret = 0;
diff --git a/drivers/vhm/vhm_mm.c b/drivers/vhm/vhm_mm.c
new file mode 100644
index 000000000000..9dd0b9414d3a
--- /dev/null
+++ b/drivers/vhm/vhm_mm.c
@@ -0,0 +1,364 @@
+/*
+ * virtio and hyperviosr service module (VHM): memory map
+ *
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright (c) 2017 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * BSD LICENSE
+ *
+ * Copyright (C) 2017 Intel Corporation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *
+ * Jason Zeng <jason.zeng@intel.com>
+ * Jason Chen CJ <jason.cj.chen@intel.com>
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/dma-mapping.h>
+#include <linux/gfp.h>
+#include <linux/mm.h>
+#include <linux/fs.h>
+#include <linux/poll.h>
+#include <linux/wait.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/list.h>
+#include <linux/uaccess.h>
+#include <linux/io.h>
+
+#include <linux/vhm/vhm_ioctl_defs.h>
+#include <linux/vhm/acrn_hv_defs.h>
+#include <linux/vhm/acrn_vhm_mm.h>
+#include <linux/vhm/vhm_vm_mngt.h>
+#include <linux/vhm/vhm_hypercall.h>
+
+struct guest_memseg {
+	struct list_head list;
+	int segid;
+	u64 base;
+	size_t len;
+	char name[SPECNAMELEN + 1];
+	u64 gpa;
+	int prot; /* RWX */
+	long vma_count;
+};
+
+static u64 _alloc_memblk(struct device *dev, size_t len)
+{
+	unsigned int count;
+	struct page *page;
+
+	if (!PAGE_ALIGNED(len)) {
+		pr_warn("alloc size of memblk must be page aligned\n");
+		return 0ULL;
+	}
+
+	count = PAGE_ALIGN(len) >> PAGE_SHIFT;
+	page = dma_alloc_from_contiguous(dev, count, 1, GFP_KERNEL);
+	if (page)
+		return page_to_phys(page);
+	else
+		return 0ULL;
+}
+
+static bool _free_memblk(struct device *dev, u64 base, size_t len)
+{
+	unsigned int count = PAGE_ALIGN(len) >> PAGE_SHIFT;
+	struct page *page = pfn_to_page(base >> PAGE_SHIFT);
+
+	return dma_release_from_contiguous(dev, page, count);
+}
+
+int alloc_guest_memseg(struct vhm_vm *vm, struct vm_memseg *memseg)
+{
+	struct guest_memseg *seg;
+	u64 base;
+
+	seg = kzalloc(sizeof(struct guest_memseg), GFP_KERNEL);
+	if (seg == NULL)
+		return -ENOMEM;
+
+	base = _alloc_memblk(vm->dev, memseg->len);
+	if (base == 0ULL) {
+		kfree(seg);
+		return -ENOMEM;
+	}
+
+	seg->segid = memseg->segid;
+	seg->base = base;
+	seg->len = memseg->len;
+	strncpy(seg->name, memseg->name, SPECNAMELEN + 1);
+	seg->gpa = memseg->gpa;
+
+	pr_info("VHM: alloc memseg[%s] with len=0x%lx, base=0x%llx,"
+		" and its guest gpa = 0x%llx\n",
+		seg->name, seg->len, seg->base, seg->gpa);
+
+	seg->vma_count = 0;
+	mutex_lock(&vm->seg_lock);
+	list_add(&seg->list, &vm->memseg_list);
+	mutex_unlock(&vm->seg_lock);
+
+	return 0;
+}
+
+static int _mem_set_memmap(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot, int type)
+{
+	struct vm_set_memmap set_memmap;
+
+	set_memmap.type = type;
+	set_memmap.foreign_gpa = guest_gpa;
+	set_memmap.hvm_gpa = host_gpa;
+	set_memmap.length = len;
+	set_memmap.prot = prot;
+
+	/* hypercall to notify hv the guest EPT setting*/
+	if (hcall_set_memmap(vmid,
+			virt_to_phys(&set_memmap)) < 0) {
+		pr_err("vhm: failed to set memmap %ld!\n", vmid);
+		return -EFAULT;
+	}
+
+	pr_debug("VHM: set ept for mem map[type=0x%x, host_gpa=0x%lx,"
+		"guest_gpa=0x%lx,len=0x%lx, prot=0x%x]\n",
+		type, host_gpa, guest_gpa, len, prot);
+
+	return 0;
+}
+
+int set_mmio_map(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot)
+{
+	return _mem_set_memmap(vmid, guest_gpa, host_gpa, len,
+		prot, MAP_MMIO);
+}
+
+int unset_mmio_map(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot)
+{
+	return _mem_set_memmap(vmid, guest_gpa, host_gpa, len,
+		prot, MAP_UNMAP);
+}
+
+int update_mem_map(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot)
+{
+	return _mem_set_memmap(vmid, guest_gpa, host_gpa, len,
+		prot, MAP_UPDATE);
+}
+
+int map_guest_memseg(struct vhm_vm *vm, struct vm_memmap *memmap)
+{
+	struct guest_memseg *seg = NULL;
+	struct vm_set_memmap set_memmap;
+
+	mutex_lock(&vm->seg_lock);
+
+	if (memmap->segid != VM_MMIO) {
+		list_for_each_entry(seg, &vm->memseg_list, list) {
+			if (seg->segid == memmap->segid
+				&& seg->gpa == memmap->mem.gpa
+				&& seg->len == memmap->mem.len)
+				break;
+		}
+		if (&seg->list == &vm->memseg_list) {
+			mutex_unlock(&vm->seg_lock);
+			return -EINVAL;
+		}
+		seg->prot = memmap->mem.prot;
+		set_memmap.type = MAP_MEM;
+		set_memmap.foreign_gpa = seg->gpa;
+		set_memmap.hvm_gpa = seg->base;
+		set_memmap.length = seg->len;
+		set_memmap.prot = seg->prot;
+		set_memmap.prot |= MMU_MEM_ATTR_WB_CACHE;
+	} else {
+		set_memmap.type = MAP_MMIO;
+		set_memmap.foreign_gpa = memmap->mmio.gpa;
+		set_memmap.hvm_gpa = memmap->mmio.hpa;
+		set_memmap.length = memmap->mmio.len;
+		set_memmap.prot = memmap->mmio.prot;
+		set_memmap.prot |= MMU_MEM_ATTR_UNCACHED;
+	}
+
+	/* hypercall to notify hv the guest EPT setting*/
+	if (hcall_set_memmap(vm->vmid, virt_to_phys(&set_memmap)) < 0) {
+		pr_err("vhm: failed to set memmap %ld!\n", vm->vmid);
+		mutex_unlock(&vm->seg_lock);
+		return -EFAULT;
+	}
+
+	mutex_unlock(&vm->seg_lock);
+
+	if (memmap->segid != VM_MMIO)
+		pr_debug("VHM: set ept for memseg [hvm_gpa=0x%llx,"
+			"guest_gpa=0x%llx,len=0x%lx, prot=0x%x]\n",
+			seg->base, seg->gpa, seg->len, seg->prot);
+	else
+		pr_debug("VHM: set ept for mmio [hpa=0x%llx,"
+			"gpa=0x%llx,len=0x%lx, prot=0x%x]\n",
+			memmap->mmio.hpa, memmap->mmio.gpa,
+			memmap->mmio.len, memmap->mmio.prot);
+
+	return 0;
+}
+
+void free_guest_mem(struct vhm_vm *vm)
+{
+	struct guest_memseg *seg;
+
+	mutex_lock(&vm->seg_lock);
+	while (!list_empty(&vm->memseg_list)) {
+		seg = list_first_entry(&vm->memseg_list,
+				struct guest_memseg, list);
+		if (!_free_memblk(vm->dev, seg->base, seg->len))
+			pr_warn("failed to free memblk\n");
+		list_del(&seg->list);
+		kfree(seg);
+	}
+	mutex_unlock(&vm->seg_lock);
+}
+
+int check_guest_mem(struct vhm_vm *vm)
+{
+	struct guest_memseg *seg;
+
+	mutex_lock(&vm->seg_lock);
+	list_for_each_entry(seg, &vm->memseg_list, list) {
+		if (seg->segid != VM_SYSMEM)
+			continue;
+
+		if (seg->vma_count == 0)
+			continue;
+
+		mutex_unlock(&vm->seg_lock);
+		return -EAGAIN;
+	}
+	mutex_unlock(&vm->seg_lock);
+	return 0;
+}
+
+static void guest_vm_open(struct vm_area_struct *vma)
+{
+	struct vhm_vm *vm = vma->vm_file->private_data;
+	struct guest_memseg *seg = vma->vm_private_data;
+
+	mutex_lock(&vm->seg_lock);
+	seg->vma_count++;
+	mutex_unlock(&vm->seg_lock);
+}
+
+static void guest_vm_close(struct vm_area_struct *vma)
+{
+	struct vhm_vm *vm = vma->vm_file->private_data;
+	struct guest_memseg *seg = vma->vm_private_data;
+
+	mutex_lock(&vm->seg_lock);
+	seg->vma_count--;
+	BUG_ON(seg->vma_count < 0);
+	mutex_unlock(&vm->seg_lock);
+}
+
+static const struct vm_operations_struct guest_vm_ops = {
+	.open = guest_vm_open,
+	.close = guest_vm_close,
+};
+
+static int do_mmap_guest(struct file *file,
+		struct vm_area_struct *vma, struct guest_memseg *seg)
+{
+	struct page *page;
+	size_t size = seg->len;
+	unsigned long pfn;
+	unsigned long start_addr;
+
+	vma->vm_flags |= VM_MIXEDMAP | VM_DONTEXPAND | VM_DONTCOPY;
+	pfn = seg->base >> PAGE_SHIFT;
+	start_addr = vma->vm_start;
+	while (size > 0) {
+		page = pfn_to_page(pfn);
+		if (vm_insert_page(vma, start_addr, page))
+			return -EINVAL;
+		size -= PAGE_SIZE;
+		start_addr += PAGE_SIZE;
+		pfn++;
+	}
+	seg->vma_count++;
+	vma->vm_ops = &guest_vm_ops;
+	vma->vm_private_data = (void *)seg;
+
+	pr_info("VHM: mmap for memseg [seg base=0x%llx, gpa=0x%llx] "
+		"to start addr 0x%lx\n",
+		seg->base, seg->gpa, start_addr);
+
+	return 0;
+}
+
+int vhm_dev_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	struct vhm_vm *vm = file->private_data;
+	struct guest_memseg *seg;
+	u64 offset = vma->vm_pgoff << PAGE_SHIFT;
+	size_t len = vma->vm_end - vma->vm_start;
+	int ret;
+
+	mutex_lock(&vm->seg_lock);
+	list_for_each_entry(seg, &vm->memseg_list, list) {
+		if (seg->segid != VM_SYSMEM)
+			continue;
+
+		if (seg->gpa != offset || seg->len != len)
+			continue;
+
+		ret = do_mmap_guest(file, vma, seg);
+		mutex_unlock(&vm->seg_lock);
+		return ret;
+	}
+	mutex_unlock(&vm->seg_lock);
+	return -EINVAL;
+}
diff --git a/drivers/vhm/vhm_vm_mngt.c b/drivers/vhm/vhm_vm_mngt.c
index 61db04b57362..3c4e6d2b2f23 100644
--- a/drivers/vhm/vhm_vm_mngt.c
+++ b/drivers/vhm/vhm_vm_mngt.c
@@ -58,6 +58,7 @@
 #include <asm/processor.h>
 #include <linux/vhm/acrn_hv_defs.h>
 #include <linux/vhm/vhm_ioctl_defs.h>
+#include <linux/vhm/acrn_vhm_mm.h>
 #include <linux/vhm/vhm_hypercall.h>
 
 LIST_HEAD(vhm_vm_list);
@@ -85,6 +86,7 @@ void put_vm(struct vhm_vm *vm)
 	vm->refcnt--;
 	if (vm->refcnt == 0) {
 		list_del(&vm->list);
+		free_guest_mem(vm);
 		kfree(vm);
 		pr_info("vhm: freed vm\n");
 	}
diff --git a/include/linux/vhm/acrn_hv_defs.h b/include/linux/vhm/acrn_hv_defs.h
index f338a8fbad3d..ab6554d017cb 100644
--- a/include/linux/vhm/acrn_hv_defs.h
+++ b/include/linux/vhm/acrn_hv_defs.h
@@ -74,8 +74,34 @@
 #define HC_PAUSE_VM                 _HC_ID(HC_ID, HC_ID_VM_BASE + 0x04)
 #define HC_QUERY_VMSTATE            _HC_ID(HC_ID, HC_ID_VM_BASE + 0x05)
 
+/* Guest memory management */
+#define HC_ID_MEM_BASE              0x300UL
+#define HC_VM_SET_MEMMAP            _HC_ID(HC_ID, HC_ID_MEM_BASE + 0x00)
+
 #define ACRN_DOM0_VMID (0UL)
 #define ACRN_INVALID_VMID (-1UL)
 #define ACRN_INVALID_HPA (-1UL)
 
+enum vm_memmap_type {
+	MAP_MEM = 0,
+	MAP_MMIO,
+	MAP_UNMAP,
+	MAP_UPDATE,
+};
+
+struct vm_set_memmap {
+	enum vm_memmap_type type;
+	/* IN: beginning guest GPA to map */
+	unsigned long foreign_gpa;
+
+	/* IN: VM0's GPA which foreign gpa will be mapped to */
+	unsigned long hvm_gpa;
+
+	/* IN: length of the range */
+	unsigned long length;
+
+	/* IN: not used right now */
+	int prot;
+} __attribute__((aligned(8)));
+
 #endif /* ACRN_HV_DEFS_H */
diff --git a/include/linux/vhm/acrn_vhm_mm.h b/include/linux/vhm/acrn_vhm_mm.h
new file mode 100644
index 000000000000..325f2b2026e8
--- /dev/null
+++ b/include/linux/vhm/acrn_vhm_mm.h
@@ -0,0 +1,88 @@
+/*
+ * virtio and hyperviosr service module (VHM): memory map
+ *
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright (c) 2017 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * BSD LICENSE
+ *
+ * Copyright (C) 2017 Intel Corporation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Jason Chen CJ <jason.cj.chen@intel.com>
+ *
+ */
+
+#ifndef __ACRN_VHM_MM_H__
+#define __ACRN_VHM_MM_H__
+
+#include <linux/vhm/vhm_ioctl_defs.h>
+#include <linux/vhm/vhm_vm_mngt.h>
+
+#define	MMU_MEM_ATTR_READ	0x00000001
+#define	MMU_MEM_ATTR_WRITE	0x00000002
+#define	MMU_MEM_ATTR_EXECUTE	0x00000004
+#define MMU_MEM_ATTR_WB_CACHE   0x00000040
+#define MMU_MEM_ATTR_WT_CACHE   0x00000080
+#define MMU_MEM_ATTR_UNCACHED   0x00000100
+#define MMU_MEM_ATTR_WC         0x00000200
+
+#define MMU_MEM_ATTR_ALL	0x00000007
+#define MMU_MEM_ATTR_WP		0x00000005
+#define MMU_MEM_ATTR_ALL_WB	0x00000047
+#define MMU_MEM_ATTR_ALL_WC	0x00000207
+
+int set_mmio_map(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot);
+int unset_mmio_map(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot);
+int update_mem_map(unsigned long vmid, unsigned long guest_gpa,
+	unsigned long host_gpa, unsigned long len, int prot);
+
+int vhm_dev_mmap(struct file *file, struct vm_area_struct *vma);
+
+int check_guest_mem(struct vhm_vm *vm);
+void free_guest_mem(struct vhm_vm *vm);
+
+int alloc_guest_memseg(struct vhm_vm *vm, struct vm_memseg *memseg);
+int map_guest_memseg(struct vhm_vm *vm, struct vm_memmap *memmap);
+
+#endif
diff --git a/include/linux/vhm/vhm_hypercall.h b/include/linux/vhm/vhm_hypercall.h
index c07163dbc3bd..e098a1f959bf 100644
--- a/include/linux/vhm/vhm_hypercall.h
+++ b/include/linux/vhm/vhm_hypercall.h
@@ -139,6 +139,7 @@ static inline long acrn_hypercall4(unsigned long hyp_id, unsigned long param1,
 	return result;
 }
 
+inline long hcall_set_memmap(unsigned long vmid, unsigned long memmap);
 inline long vhm_create_vm(struct vhm_vm *vm, unsigned long ioctl_param);
 inline long vhm_resume_vm(struct vhm_vm *vm);
 inline long vhm_pause_vm(struct vhm_vm *vm);
diff --git a/include/linux/vhm/vhm_ioctl_defs.h b/include/linux/vhm/vhm_ioctl_defs.h
index d8c81b6e9306..872092490259 100644
--- a/include/linux/vhm/vhm_ioctl_defs.h
+++ b/include/linux/vhm/vhm_ioctl_defs.h
@@ -64,4 +64,44 @@
 #define IC_PAUSE_VM                    _IC_ID(IC_ID, IC_ID_VM_BASE + 0x04)
 #define IC_QUERY_VMSTATE               _IC_ID(IC_ID, IC_ID_VM_BASE + 0x05)
 
+/* Guest memory management */
+#define IC_ID_MEM_BASE                  0x300UL
+#define IC_ALLOC_MEMSEG                 _IC_ID(IC_ID, IC_ID_MEM_BASE + 0x00)
+#define IC_SET_MEMSEG                   _IC_ID(IC_ID, IC_ID_MEM_BASE + 0x01)
+
+#define SPECNAMELEN 63
+
+enum {
+	VM_SYSMEM,
+	VM_BOOTROM,
+	VM_FRAMEBUFFER,
+	VM_MMIO,
+};
+
+struct vm_memseg {
+	int segid;
+	size_t len;
+	char name[SPECNAMELEN + 1];
+	unsigned long gpa;
+};
+
+struct vm_memmap {
+	int segid;		/* memory segment */
+	union {
+		struct {
+			uint64_t gpa;
+			uint64_t segoff;	/* offset into memory segment */
+			size_t len;		/* mmap length */
+			int prot;		/* RWX */
+			int flags;
+		} mem;
+		struct {
+			uint64_t gpa;
+			uint64_t hpa;
+			size_t len;
+			int prot;
+		} mmio;
+	};
+};
+
 #endif /* VHM_IOCTL_DEFS_H */
diff --git a/include/linux/vhm/vhm_vm_mngt.h b/include/linux/vhm/vhm_vm_mngt.h
index dcb246af561a..4f1a0db2c54d 100644
--- a/include/linux/vhm/vhm_vm_mngt.h
+++ b/include/linux/vhm/vhm_vm_mngt.h
@@ -66,6 +66,8 @@ struct vhm_vm {
 	struct list_head list;
 	unsigned long vmid;
 	long refcnt;
+	struct mutex seg_lock;
+	struct list_head memseg_list;
 };
 
 struct vhm_vm *find_get_vm(unsigned long vmid);
-- 
2.17.1

