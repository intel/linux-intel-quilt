From 47e8f0582e7e508aba4fd969eedbc4b24bbc78aa Mon Sep 17 00:00:00 2001
From: Jeremy Rocher <jeremy.rocher@intel.com>
Date: Wed, 4 Jun 2014 16:50:19 +0200
Subject: [PATCH 28/63] platform: x86: add pstore RAM backend managed by BIOS

BIOS manage a persisted RAM buffer across watchdog reset, this feature
is named PRAM. Buffer is reserved by BIOS and exposed as PRAM ACPI
table.

PRAM BIOS feature is configurable through BIOS setup or PRAM_Conf EFI
variable (GUID ecb54cd9-e5ae-4fdc-a971-e877756068f7). Accepted values
for this variable are 0, 1, 2 and 3 as ASCII string; will configure
PRAM feature respectively as Disabled, 4 MB, 16 MB and 64 MB.

This device driver bind the PRAM buffer exposed in PRAM ACPI table to
a pstore ram (ramoops) driver. It also exposes similar parameters as
the ramoops dummy device driver (fs/pstore/ram.c) : record_size,
console_size, ftrace_size, dump_oops, ecc.

Signed-off-by: Jeremy Rocher <jeremy.rocher@intel.com>
Signed-off-by: Tian, Baofeng <baofeng.tian@intel.com>
---
 drivers/platform/x86/Kconfig             |  17 +++
 drivers/platform/x86/Makefile            |   1 +
 drivers/platform/x86/intel_pstore_pram.c | 135 +++++++++++++++++++++++
 3 files changed, 153 insertions(+)
 create mode 100644 drivers/platform/x86/intel_pstore_pram.c

diff --git a/drivers/platform/x86/Kconfig b/drivers/platform/x86/Kconfig
index 0c1aa6c314f5..4d0dfd030b07 100644
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@ -1229,6 +1229,23 @@ config I2C_MULTI_INSTANTIATE
 	  To compile this driver as a module, choose M here: the module
 	  will be called i2c-multi-instantiate.
 
+config INTEL_PSTORE_PRAM
+	tristate "Intel pstore RAM backend driver (PRAM BIOS feature)"
+	depends on ACPI
+	depends on PSTORE_RAM
+	---help---
+	  This driver provides RAM backend for pstore, managed by BIOS
+	  as PRAM (Persisted RAM buffer) debug feature.
+
+	  PRAM BIOS feature is configurable through BIOS setup or PRAM_Conf
+	  EFI variable (GUID ecb54cd9-e5ae-4fdc-a971-e877756068f7).
+	  Accepted values for variable are 0, 1, 2 and 3 as ASCII
+	  string; will configure PRAM feature respectively as
+	  Disabled, 4 MB, 16 MB and 64 MB.
+
+	  Safe to say Y, will not bind if your BIOS doesn't support
+	  this feature.
+
 endif # X86_PLATFORM_DEVICES
 
 config PMC_ATOM
diff --git a/drivers/platform/x86/Makefile b/drivers/platform/x86/Makefile
index e6d1becf81ce..91fda053d781 100644
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@ -92,3 +92,4 @@ obj-$(CONFIG_MLX_PLATFORM)	+= mlx-platform.o
 obj-$(CONFIG_INTEL_TURBO_MAX_3) += intel_turbo_max_3.o
 obj-$(CONFIG_INTEL_CHTDC_TI_PWRBTN)	+= intel_chtdc_ti_pwrbtn.o
 obj-$(CONFIG_I2C_MULTI_INSTANTIATE)	+= i2c-multi-instantiate.o
+obj-$(CONFIG_INTEL_PSTORE_PRAM)	+= intel_pstore_pram.o
diff --git a/drivers/platform/x86/intel_pstore_pram.c b/drivers/platform/x86/intel_pstore_pram.c
new file mode 100644
index 000000000000..2d5205bfd204
--- /dev/null
+++ b/drivers/platform/x86/intel_pstore_pram.c
@@ -0,0 +1,135 @@
+/*
+ * Copyright (c) 2015, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/acpi.h>
+#include <linux/platform_device.h>
+#include <linux/pstore_ram.h>
+
+#define SZ_4K 0x00001000
+#define SZ_2M 0x00200000
+
+/* PRAM stands for 'Persisted RAM' from BIOS point of view */
+#define ACPI_SIG_PRAM "PRAM"
+
+/*
+ * Following parameters match to those defined in fs/pstore/ram.c in
+ * order to keep campatibility between driver intefaces, please refer
+ * to it for implementaion details.
+ */
+static ulong pram_record_size = SZ_4K;
+module_param_named(record_size, pram_record_size, ulong, 0400);
+MODULE_PARM_DESC(record_size, "size of each dump done on oops/panic");
+
+static ulong pram_console_size = SZ_2M;
+module_param_named(console_size, pram_console_size, ulong, 0400);
+MODULE_PARM_DESC(console_size, "size of kernel console log");
+
+static ulong pram_ftrace_size = 2*SZ_4K;
+module_param_named(ftrace_size, pram_ftrace_size, ulong, 0400);
+MODULE_PARM_DESC(ftrace_size, "size of ftrace log");
+
+static int pram_dump_oops = 1;
+module_param_named(dump_oops, pram_dump_oops, int, 0600);
+MODULE_PARM_DESC(dump_oops,
+		 "set to 1 to dump oopses, 0 to only dump panics (default 1)");
+
+static int pram_ecc;
+module_param_named(ecc, pram_ecc, int, 0600);
+MODULE_PARM_DESC(ecc,
+		 "if non-zero, the option enables SW ECC support, provided by"
+		 "fs/pstore/ram_core.c, and specifies ECC buffer size in bytes"
+		 "(1 is a special value, means 16 bytes ECC)");
+
+static struct ramoops_platform_data *pram_data;
+static struct platform_device *pram_dev;
+
+struct acpi_table_pram {
+	struct acpi_table_header header;
+	u64 addr;
+	u32 size;
+} __packed;
+
+static int register_pram_dev(unsigned long mem_address,
+			     unsigned long mem_size)
+{
+	pram_data = kzalloc(sizeof(*pram_data), GFP_KERNEL);
+	if (!pram_data) {
+		pr_err("could not allocate pram_data\n");
+		return -ENOMEM;
+	}
+
+	pram_data->mem_address = mem_address;
+	pram_data->mem_size = mem_size;
+	pram_data->record_size = pram_record_size;
+	pram_data->console_size = pram_console_size;
+	pram_data->ftrace_size = pram_ftrace_size;
+	pram_data->dump_oops = pram_dump_oops;
+	/*
+	 * For backwards compatibility with previous
+	 * fs/pstore/ram_core.c implementation,
+	 * intel_pstore_pram.ecc=1 means 16 bytes ECC.
+	 */
+	pram_data->ecc_info.ecc_size = pram_ecc == 1 ? 16 : pram_ecc;
+
+	pram_dev = platform_device_register_data(NULL, "ramoops", -1,
+			pram_data, sizeof(struct ramoops_platform_data));
+	if (IS_ERR(pram_dev)) {
+		pr_err("could not create platform device: %ld\n",
+		       PTR_ERR(pram_dev));
+		kfree(pram_data);
+		return PTR_ERR(pram_dev);
+	}
+
+	pr_info("registered pram device, addr=0x%lx, size=0x%lx\n",
+		pram_data->mem_address, pram_data->mem_size);
+
+	return 0;
+}
+
+static int __init intel_pram_init(void)
+{
+	acpi_status status;
+	struct acpi_table_pram *pramt;
+
+	status = acpi_get_table(ACPI_SIG_PRAM, 0,
+				(struct acpi_table_header **)&pramt);
+	if (status == AE_NOT_FOUND) {
+		pr_debug("PRAM table not found\n");
+		return -ENODEV;
+	} else if (ACPI_FAILURE(status)) {
+		const char *msg = acpi_format_exception(status);
+		pr_err("Failed to get PRAM table: %s\n", msg);
+		return -EINVAL;
+	}
+
+	if (!pramt->addr || !pramt->size) {
+		pr_debug("PRAM: bad address (0x%llx) or size (0x%lx)\n",
+			 (unsigned long long)pramt->addr,
+			 (unsigned long)pramt->size);
+		return -ENODEV;
+	}
+
+	return register_pram_dev(pramt->addr, pramt->size);
+}
+device_initcall(intel_pram_init);
+
+static void __exit intel_pram_exit(void)
+{
+	platform_device_unregister(pram_dev);
+	kfree(pram_data);
+}
+module_exit(intel_pram_exit);
-- 
2.17.1

