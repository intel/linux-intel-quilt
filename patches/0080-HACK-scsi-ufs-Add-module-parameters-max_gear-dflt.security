From 601385ad8c7d509600c4ef420c6158f56c7b07e9 Mon Sep 17 00:00:00 2001
From: Adrian Hunter <adrian.hunter@intel.com>
Date: Tue, 22 May 2018 10:44:51 +0300
Subject: [PATCH 080/106] HACK: scsi: ufs: Add module parameters max_gear,
 dflt_hs_rate, dflt_hs_mode, max_lines, no_auto_hibern8 and no_pwr_mode_chg

Add module parameters:
  max_gear :        Maximum gear: 1, 2 , 3 ... (int)
  max_lines :       Maximum lines: 1 or 2 (int)
  dflt_hs_rate :    Default high speed rate series : 1 (= rate A), 2 (= rate B) (int)
  dflt_hs_mode :    Default high speed power mode: 1 (= FAST), 4 (= FASTAUTO) (int)
  no_pwr_mode_chg : Do not change power mode i.e. continue to use initial power mode (int)
  no_auto_hibern8 : Disable auto-hibernate (int)

Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
Signed-off-by: Pan, Kris <kris.pan@intel.com>
---
 drivers/scsi/ufs/ufshcd.c | 50 +++++++++++++++++++++++++++++++++++----
 1 file changed, 46 insertions(+), 4 deletions(-)

diff --git a/drivers/scsi/ufs/ufshcd.c b/drivers/scsi/ufs/ufshcd.c
index 698e8d20b4ba..6333990c7f40 100644
--- a/drivers/scsi/ufs/ufshcd.c
+++ b/drivers/scsi/ufs/ufshcd.c
@@ -231,6 +231,13 @@ static struct ufs_dev_fix ufs_fixups[] = {
 	END_FIX
 };
 
+static int max_gear;
+static int max_lines;
+static int dflt_hs_rate;
+static int dflt_hs_mode;
+static int no_pwr_mode_chg;
+static int no_auto_hibern8;
+
 static irqreturn_t ufshcd_tmc_handler(struct ufs_hba *hba);
 static void ufshcd_async_scan(void *data, async_cookie_t cookie);
 static int ufshcd_reset_and_restore(struct ufs_hba *hba);
@@ -3932,7 +3939,7 @@ void ufshcd_auto_hibern8_enable(struct ufs_hba *hba)
 {
 	unsigned long flags;
 
-	if (!ufshcd_is_auto_hibern8_supported(hba) || !hba->ahit)
+	if (no_auto_hibern8 || !ufshcd_is_auto_hibern8_supported(hba) || !hba->ahit)
 		return;
 
 	spin_lock_irqsave(hba->host->host_lock, flags);
@@ -3967,9 +3974,15 @@ static int ufshcd_get_max_pwr_mode(struct ufs_hba *hba)
 	if (hba->max_pwr_info.is_valid)
 		return 0;
 
-	pwr_info->pwr_tx = FAST_MODE;
-	pwr_info->pwr_rx = FAST_MODE;
-	pwr_info->hs_rate = PA_HS_MODE_B;
+	if (dflt_hs_mode != FAST_MODE && dflt_hs_mode != FASTAUTO_MODE)
+		dflt_hs_mode = FAST_MODE;
+
+	if (dflt_hs_rate != PA_HS_MODE_A && dflt_hs_rate != PA_HS_MODE_B)
+		dflt_hs_rate = PA_HS_MODE_B;
+
+	pwr_info->pwr_tx = dflt_hs_mode;
+	pwr_info->pwr_rx = dflt_hs_mode;
+	pwr_info->hs_rate = dflt_hs_rate;
 
 	/* Get the connected lane count */
 	ufshcd_dme_get(hba, UIC_ARG_MIB(PA_CONNECTEDRXDATALANES),
@@ -3985,6 +3998,12 @@ static int ufshcd_get_max_pwr_mode(struct ufs_hba *hba)
 		return -EINVAL;
 	}
 
+	if (max_lines > 0 &&
+	    (pwr_info->lane_rx > max_lines || pwr_info->lane_tx > max_lines)) {
+		pwr_info->lane_rx = max_lines;
+		pwr_info->lane_tx = max_lines;
+	}
+
 	/*
 	 * First, get the maximum gears of HS speed.
 	 * If a zero value, it means there is no HSGEAR capability.
@@ -4015,6 +4034,12 @@ static int ufshcd_get_max_pwr_mode(struct ufs_hba *hba)
 		pwr_info->pwr_tx = SLOW_MODE;
 	}
 
+	if (max_gear > 0 &&
+	    (pwr_info->gear_rx > max_gear || pwr_info->gear_tx > max_gear)) {
+		pwr_info->gear_rx = max_gear;
+		pwr_info->gear_tx = max_gear;
+	}
+
 	hba->max_pwr_info.is_valid = true;
 	return 0;
 }
@@ -4024,6 +4049,9 @@ static int ufshcd_change_power_mode(struct ufs_hba *hba,
 {
 	int ret;
 
+	if (no_pwr_mode_chg)
+		return 0;
+
 	/* if already configured to the requested pwr_mode */
 	if (pwr_mode->gear_rx == hba->pwr_info.gear_rx &&
 	    pwr_mode->gear_tx == hba->pwr_info.gear_tx &&
@@ -8601,6 +8629,20 @@ int ufshcd_init(struct ufs_hba *hba, void __iomem *mmio_base, unsigned int irq)
 }
 EXPORT_SYMBOL_GPL(ufshcd_init);
 
+module_param(max_gear, int, 0444);
+module_param(max_lines, int, 0444);
+module_param(dflt_hs_rate, int, 0444);
+module_param(dflt_hs_mode, int, 0444);
+module_param(no_pwr_mode_chg, int, 0444);
+module_param(no_auto_hibern8, int, 0444);
+
+MODULE_PARM_DESC(max_gear, "Maximum gear: 1, 2 , 3 ...");
+MODULE_PARM_DESC(max_lines, "Maximum lines: 1 or 2");
+MODULE_PARM_DESC(dflt_hs_rate, "Default high speed rate series : 1 (= rate A), 2 (= rate B)");
+MODULE_PARM_DESC(dflt_hs_mode, "Default high speed power mode: 1 (= FAST), 4 (= FASTAUTO)");
+MODULE_PARM_DESC(no_pwr_mode_chg, "Do not change power mode i.e. continue to use initial power mode");
+MODULE_PARM_DESC(no_auto_hibern8, "Disable auto-hibernate");
+
 MODULE_AUTHOR("Santosh Yaragnavi <santosh.sy@samsung.com>");
 MODULE_AUTHOR("Vinayak Holikatti <h.vinayak@samsung.com>");
 MODULE_DESCRIPTION("Generic UFS host controller driver Core");
-- 
2.17.1

