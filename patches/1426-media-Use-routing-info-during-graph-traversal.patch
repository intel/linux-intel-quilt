From 4fc48393de3365626ebf819420aee258de3e52dd Mon Sep 17 00:00:00 2001
From: wu xia <xia.wu@intel.com>
Date: Wed, 26 Mar 2014 04:01:47 +0100
Subject: [PATCH 1426/2367] media: Use routing info during graph traversal

Take internal routing information as reported
by the entity has_route operation into account
during graph traversal to avoid following
unrelated links.

Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Signed-off-by: Michal Simek <michal.simek@xilinx.com>
Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
Signed-off-by: Jianxu Zheng <jian.xu.zheng@intel.com>
Signed-off-by: wu xia <xia.wu@intel.com>
---
 drivers/media/media-entity.c | 45 ++++++++++++++++++++++++++++++--------------
 include/media/media-entity.h |  1 +
 2 files changed, 32 insertions(+), 14 deletions(-)

diff --git a/drivers/media/media-entity.c b/drivers/media/media-entity.c
index 087f507..3a567a3 100644
--- a/drivers/media/media-entity.c
+++ b/drivers/media/media-entity.c
@@ -274,18 +274,9 @@ bool media_entity_has_route(struct media_entity *entity, unsigned int pad0,
 }
 EXPORT_SYMBOL_GPL(media_entity_has_route);
 
-static struct media_entity *
-media_entity_other(struct media_entity *entity, struct media_link *link)
-{
-	if (link->source->entity == entity)
-		return link->sink->entity;
-	else
-		return link->source->entity;
-}
-
 /* push an entity to traversal stack */
 static void stack_push(struct media_graph *graph,
-		       struct media_entity *entity)
+		       struct media_entity *entity, int pad)
 {
 	if (graph->top == MEDIA_ENTITY_ENUM_MAX_DEPTH - 1) {
 		WARN_ON(1);
@@ -293,6 +284,7 @@ static void stack_push(struct media_graph *graph,
 	}
 	graph->top++;
 	graph->stack[graph->top].link = entity->links.next;
+	graph->stack[graph->top].pad = pad;
 	graph->stack[graph->top].entity = entity;
 }
 
@@ -307,6 +299,7 @@ static struct media_entity *stack_pop(struct media_graph *graph)
 }
 
 #define link_top(en)	((en)->stack[(en)->top].link)
+#define pad_top(en)	((en)->stack[(en)->top].pad)
 #define stack_top(en)	((en)->stack[(en)->top].entity)
 
 /*
@@ -350,7 +343,7 @@ void media_graph_walk_start(struct media_graph *graph,
 
 	graph->top = 0;
 	graph->stack[graph->top].entity = NULL;
-	stack_push(graph, entity);
+	stack_push(graph, entity, -1);
 	dev_dbg(entity->graph_obj.mdev->dev,
 		"begin graph walk at '%s'\n", entity->name);
 }
@@ -360,7 +353,10 @@ static void media_graph_walk_iter(struct media_graph *graph)
 {
 	struct media_entity *entity = stack_top(graph);
 	struct media_link *link;
+	unsigned int from_pad = pad_top(graph);
 	struct media_entity *next;
+	struct media_pad *remote;
+	struct media_pad *local;
 
 	link = list_entry(link_top(graph), typeof(*link), list);
 
@@ -374,8 +370,29 @@ static void media_graph_walk_iter(struct media_graph *graph)
 		return;
 	}
 
-	/* Get the entity in the other end of the link . */
-	next = media_entity_other(entity, link);
+	/*
+	 * Get the local pad, the remote pad and the entity at the other
+	 * end of the link.
+	 */
+	if (link->source->entity == entity) {
+		remote = link->sink;
+		local = link->source;
+	} else {
+		remote = link->source;
+		local = link->sink;
+	}
+
+	next = remote->entity;
+
+	/*
+	 * Are the local pad and the pad we came from connected
+	 * internally in the entity ?
+	 */
+	if (from_pad != -1 &&
+	    !media_entity_has_route(entity, from_pad, local->index)) {
+		link_top(graph) = link_top(graph)->next;
+		return;
+	}
 
 	/* Has the entity already been visited? */
 	if (media_entity_enum_test_and_set(&graph->ent_enum, next)) {
@@ -388,7 +405,7 @@ static void media_graph_walk_iter(struct media_graph *graph)
 
 	/* Push the new entity to stack and start over. */
 	link_top(graph) = link_top(graph)->next;
-	stack_push(graph, next);
+	stack_push(graph, next, remote->index);
 	dev_dbg(entity->graph_obj.mdev->dev, "walk: pushing '%s' on stack\n",
 		next->name);
 }
diff --git a/include/media/media-entity.h b/include/media/media-entity.h
index f1bb7cd1..188b9b5 100644
--- a/include/media/media-entity.h
+++ b/include/media/media-entity.h
@@ -95,6 +95,7 @@ struct media_graph {
 	struct {
 		struct media_entity *entity;
 		struct list_head *link;
+		int pad;
 	} stack[MEDIA_ENTITY_ENUM_MAX_DEPTH];
 
 	struct media_entity_enum ent_enum;
-- 
2.7.4

