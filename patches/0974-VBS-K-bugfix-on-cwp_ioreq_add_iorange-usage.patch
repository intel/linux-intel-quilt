From 7be227779a13cbc5182dc54d6c771f50afd7ff07 Mon Sep 17 00:00:00 2001
From: Hao Li <hao.l.li@intel.com>
Date: Sun, 28 Jan 2018 19:54:49 -0500
Subject: [PATCH 0974/2328] VBS-K: bugfix on cwp_ioreq_add_iorange() usage

The values of arguments "long start" and "long end" in
cwp_ioreq_add_iorange() API showing below should be "start"
and "start + len - 1".

 - int cwp_ioreq_add_iorange(int client_id, uint32_t type,
			     long start, long end)

However, previous VBS-K rng reference driver mistakenly uses "start"
and "start + len". This leads to the fact that VBS-K not only
hooked "kick" register, VIRTIO_PCI_QUEUE_NOTIFY, but also "status"
register, VIRTIO_PCI_STATUS, mistakenly.

This bug wasn't exposed itself previously since when VBS-K rng gets
running, frontend driver no longer accessed status register. But if
frontend driver needs to access status register, it will get 0 from
VBS-K, instead of VIRTIO_CONFIG_S_DRIVER_OK, which is 4. This might
cause issue, for example if frontend driver does the following:

  /* If probe didn't do it, mark device DRIVER_OK ourselves. */
  if (!(dev->config->get_status(dev) & VIRTIO_CONFIG_S_DRIVER_OK))
    virtio_device_ready(dev);

With this patch on new VBS-K APIs (VHM wrapping API) we could make
sure that resetting device from virtio_device_ready() won't be
called twice mistakenly.

If VBS-K driver uses VHM raw APIs directly, they should make sure
following cwp_ioreq_add_iorange()'s rule.

Change-Id: I3eb8d2b126c1dd2a0ea966786ee76c5ba8dba273
Signed-off-by: Hao Li <hao.l.li@intel.com>
---
 drivers/vbs/vbs.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/vbs/vbs.c b/drivers/vbs/vbs.c
index 2fc7a55..fa7ef35 100644
--- a/drivers/vbs/vbs.c
+++ b/drivers/vbs/vbs.c
@@ -97,7 +97,7 @@ long virtio_dev_register(struct virtio_dev_info *dev)
 	ret = cwp_ioreq_add_iorange(dev->_ctx.vhm_client_id,
 				    dev->io_range_type ? REQ_MMIO : REQ_PORTIO,
 				    dev->io_range_start,
-				    dev->io_range_start + dev->io_range_len);
+				    dev->io_range_start + dev->io_range_len - 1);
 	if (ret < 0) {
 		pr_err("failed to add iorange to cwp ioreq!\n");
 		goto err;
-- 
2.7.4

