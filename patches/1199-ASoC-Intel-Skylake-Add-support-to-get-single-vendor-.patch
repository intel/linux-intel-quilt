From 4fdfa188b00667c4b5c092fb0a3dac5aa55d63e5 Mon Sep 17 00:00:00 2001
From: Szymon Mielczarek <szymonx.mielczarek@intel.com>
Date: Fri, 25 Oct 2019 08:35:11 +0200
Subject: [PATCH 1199/1214] ASoC: Intel: Skylake: Add support to get single
 vendor parameter

Using Large Config Get IPC we can retrieve one or more vendor parameters
from target module instance. Information about parameter id and its size
is expected in the message payload.

We are adding support to retrieve one vendor parameter which data fits
the maximum size of the mailbox.

Change-Id: I57497fd7ceee9ac190d5011f56005b93ce90e5f9
Tracked-On: PKT-3636, OAM-88809
Signed-off-by: Szymon Mielczarek <szymonx.mielczarek@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c | 25 ++++++++++++++++++++++---
 sound/soc/intel/skylake/skl-topology.c | 10 ++++++----
 sound/soc/intel/skylake/skl-topology.h |  2 ++
 3 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 53a8dc0..be49ca1 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -2794,16 +2794,35 @@ int skl_set_module_params(struct skl_sst *ctx, u32 *params, int size,
 	return skl_ipc_set_large_config(&ctx->ipc, &msg, params);
 }
 
+#define SKL_MODULE_PARAM_GET_SIZE (2 * sizeof(u32))
+
 int skl_get_module_params(struct skl_sst *ctx, u32 *params, int size,
 			  u32 param_id, struct skl_module_cfg *mcfg)
 {
 	struct skl_ipc_large_config_msg msg;
+	size_t rx_bytes;
+	u32 tx_bytes = 0;
+	u32 *tx_data = NULL;
 
 	msg.module_id = mcfg->id.module_id;
 	msg.instance_id = mcfg->id.pvt_id;
-	msg.param_data_size = size;
 	msg.large_param_id = param_id;
 
-	return skl_ipc_get_large_config(&ctx->ipc, &msg, params, NULL,
-			0, NULL);
+	if (param_id == SKL_PARAM_VENDOR_ID) {
+		/* Limit to single data fragment */
+		msg.param_data_size = size > ctx->ipc.dsp->mailbox.in_size
+			? ctx->ipc.dsp->mailbox.in_size : size;
+		/*
+		 * Currently, we support retrieving only one module parameter.
+		 * Params data used for TX payload will be then overwritten by
+		 * received data.
+		 */
+		tx_data = params;
+		tx_bytes = SKL_MODULE_PARAM_GET_SIZE;
+	} else {
+		msg.param_data_size = size;
+	}
+
+	return skl_ipc_get_large_config(&ctx->ipc, &msg, params, tx_data,
+			tx_bytes, &rx_bytes);
 }
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 805c7c1..55e2499 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -2208,10 +2208,14 @@ static int skl_tplg_tlv_control_get(struct snd_kcontrol *kcontrol,
 	struct snd_soc_dapm_widget *w = snd_soc_dapm_kcontrol_widget(kcontrol);
 	struct skl_module_cfg *mconfig = w->priv;
 	struct skl *skl = get_skl_ctx(w->dapm->dev);
+	int ret;
 
-	if (w->power)
-		skl_get_module_params(skl->skl_sst, (u32 *)bc->params,
+	if (w->power) {
+		ret = skl_get_module_params(skl->skl_sst, (u32 *)bc->params,
 				      bc->size, bc->param_id, mconfig);
+		if (ret < 0)
+			return ret;
+	}
 
 	/* decrement size for TLV header */
 	size -= 2 * sizeof(u32);
@@ -2232,8 +2236,6 @@ static int skl_tplg_tlv_control_get(struct snd_kcontrol *kcontrol,
 	return 0;
 }
 
-#define SKL_PARAM_VENDOR_ID 0xff
-
 static int skl_tplg_tlv_control_set(struct snd_kcontrol *kcontrol,
 			const unsigned int __user *data, unsigned int size)
 {
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 55aed1a..b25a5f7 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -58,6 +58,8 @@
 #define MAX_NUM_CHANNELS	8
 #define SKL_MAX_PARAMS_TYPES	4
 
+#define SKL_PARAM_VENDOR_ID 0xff
+
 enum skl_channel_index {
 	SKL_CHANNEL_LEFT = 0,
 	SKL_CHANNEL_RIGHT = 1,
-- 
2.7.4

