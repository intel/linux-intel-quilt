From 8d67a0372ee41a30e4e0737cbfc9c4bbf56ebf2a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Amadeusz=20S=C5=82awi=C5=84ski?=
 <amadeuszx.slawinski@intel.com>
Date: Tue, 16 Oct 2018 11:46:38 +0200
Subject: [PATCH 159/163] ASoC: Intel: Skylake: separate asrc and src ipc
 messages
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In logs src ipc is printed with whole asrc size, instead, of doing weird
size calculations, separate them into separate messages and handlers.

Also fix asrc definition, to how it is set in FW

Squash into:
ASoC: Intel: Skylake: Add a separate module type for ASRC algo

Change-Id: I517a5c9b301946f3e7472f0ef69f17b98813dc79
Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@intel.com>
Reviewed-on:
Reviewed-by: Lewandowski, Gustaw <gustaw.lewandowski@intel.com>
Tested-by: gkblditp <gkblditp@intel.com>
---
 sound/soc/intel/skylake/skl-messages.c | 37 ++++++++++++++++++--------
 sound/soc/intel/skylake/skl-sst-ipc.h  |  9 ++++++-
 2 files changed, 34 insertions(+), 12 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-messages.c b/sound/soc/intel/skylake/skl-messages.c
index 47c5e206b6ee..82466fb85d5b 100644
--- a/sound/soc/intel/skylake/skl-messages.c
+++ b/sound/soc/intel/skylake/skl-messages.c
@@ -24,8 +24,8 @@
 #include "skl-topology.h"
 
 #define INVALID_PIPELINE_ID	0xFF
-#define ASRC_MODE_UPLINK	2
-#define ASRC_MODE_DOWNLINK	1
+#define ASRC_MODE_UPLINK	BIT(0)
+#define ASRC_MODE_DOWNLINK	BIT(1)
 #define SKL_ENABLE_ALL_CHANNELS  0xffffffff
 
 static int skl_alloc_dma_buf(struct device *dev,
@@ -791,13 +791,23 @@ static void skl_set_src_format(struct skl_dev *skl,
 
 	src_mconfig->src_cfg = fmt->s_freq;
 
-	if (mconfig->m_type == SKL_MODULE_TYPE_ASRC) {
-		if (mconfig->pipe->p_params->stream ==
-				SNDRV_PCM_STREAM_PLAYBACK)
-			src_mconfig->mode = ASRC_MODE_DOWNLINK;
-		else
-			src_mconfig->mode = ASRC_MODE_UPLINK;
-	}
+}
+
+/*
+ * DSP needs ASRC module for asynchronous frequency conversion, ASRC takes
+ * the same parameters as a SRC module and mode parameter as an extra parameter
+ * to know in which direction stream is going
+ */
+static void skl_set_asrc_format(struct skl_dev *skl,
+			struct skl_module_cfg *mconfig,
+			struct skl_asrc_module_cfg *asrc_mconfig)
+{
+	skl_set_src_format(skl, mconfig, &asrc_mconfig->src_cfg);
+
+	if (mconfig->pipe->p_params->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		asrc_mconfig->mode = ASRC_MODE_UPLINK;
+	else
+		asrc_mconfig->mode = ASRC_MODE_DOWNLINK;
 }
 
 /*
@@ -893,9 +903,11 @@ static u16 skl_get_module_param_size(struct skl_dev *skl,
 		return param_size;
 
 	case SKL_MODULE_TYPE_SRCINT:
-	case SKL_MODULE_TYPE_ASRC:
 		return sizeof(struct skl_src_module_cfg);
 
+	case SKL_MODULE_TYPE_ASRC:
+		return sizeof(struct skl_asrc_module_cfg);
+
 	case SKL_MODULE_TYPE_UPDWMIX:
 		return sizeof(struct skl_up_down_mixer_cfg);
 
@@ -955,10 +967,13 @@ static int skl_set_module_format(struct skl_dev *skl,
 		break;
 
 	case SKL_MODULE_TYPE_SRCINT:
-	case SKL_MODULE_TYPE_ASRC:
 		skl_set_src_format(skl, module_config, *param_data);
 		break;
 
+	case SKL_MODULE_TYPE_ASRC:
+		skl_set_asrc_format(skl, module_config, *param_data);
+		break;
+
 	case SKL_MODULE_TYPE_UPDWMIX:
 		skl_set_updown_mixer_format(skl, module_config, *param_data);
 		break;
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 07e6fe789378..aa473af13c7a 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -120,7 +120,14 @@ struct skl_cpr_pin_fmt {
 struct skl_src_module_cfg {
 	struct skl_base_cfg base_cfg;
 	enum skl_s_freq src_cfg;
-	u32 mode;
+} __packed;
+
+struct skl_asrc_module_cfg {
+	struct skl_src_module_cfg src_cfg;
+	u32 mode:2;
+	u32 rsvd_1:2;
+	u32 disable_jitter_buffer:1;
+	u32 rsvd_2:27;
 } __packed;
 
 /* Maximum number of coefficients up down mixer module */
-- 
2.22.0.545.g9c9b961d7e

