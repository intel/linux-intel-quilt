From ec9a29b0a1e3a1c532dd024a5d947d0c0cf6e142 Mon Sep 17 00:00:00 2001
From: Kweh Hock Leong <hock.leong.kweh@intel.com>
Date: Fri, 9 Aug 2019 08:10:27 +0800
Subject: [PATCH 49/89] net: stmmac: scan for Time-Based Scheduling in DWMAC HW
 and setup

For DWMAC v5.1 and above, the capability for TBS is announced through
MAC_HW_Feature3 and the current design allow driver to TBS to be selected
through platform data:-

a) has_tbs : to load v5.1x support for Enhanced Tx Descriptor in desc and
             dma.
b) tsn_tbs_en: to enable/disable TBS capability

Signed-off-by: Kweh Hock Leong <hock.leong.kweh@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |  1 +
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  |  2 +
 drivers/net/ethernet/stmicro/stmmac/hwif.c    | 37 ++++++++++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |  7 ++++
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  2 +
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  |  8 ++++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  2 +
 include/linux/stmmac.h                        |  2 +
 8 files changed, 59 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index ae0d77c09634..40bbb93db382 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -87,6 +87,7 @@
  */
 
 /* MAC HW features3 bitmap */
+#define GMAC_HW_FEAT_TBSSEL		BIT(27)
 #define GMAC_HW_FEAT_ESTWID		GENMASK(21, 20)
 #define GMAC_HW_FEAT_ESTWID_SHIFT	20
 #define GMAC_HW_FEAT_ESTDEP		GENMASK(19, 17)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index b2fecb07be6c..84c979c5a5dc 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -78,6 +78,8 @@ static bool dwmac5_has_tsn_cap(void __iomem *ioaddr, enum tsn_feat_id featid)
 	switch (featid) {
 	case TSN_FEAT_ID_EST:
 		return (hw_cap3 & GMAC_HW_FEAT_ESTSEL);
+	case TSN_FEAT_ID_TBS:
+		return (hw_cap3 & GMAC_HW_FEAT_TBSSEL);
 	default:
 		return false;
 	};
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.c b/drivers/net/ethernet/stmicro/stmmac/hwif.c
index b88292ba4b4d..be4c6982dfd7 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.c
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.c
@@ -75,6 +75,7 @@ static const struct stmmac_hwif_entry {
 	bool xgmac;
 	bool mdio_intr_en;
 	bool has_serdes;
+	bool tbs;
 	u32 min_id;
 	const struct stmmac_regs_off regs;
 	const void *desc;
@@ -95,6 +96,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = false,
 		.mdio_intr_en = false,
 		.has_serdes = false,
+		.tbs = false,
 		.min_id = 0,
 		.regs = {
 			.ptp_off = PTP_GMAC3_X_OFFSET,
@@ -116,6 +118,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = false,
 		.mdio_intr_en = false,
 		.has_serdes = false,
+		.tbs = false,
 		.min_id = 0,
 		.regs = {
 			.ptp_off = PTP_GMAC3_X_OFFSET,
@@ -137,6 +140,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = false,
 		.mdio_intr_en = false,
 		.has_serdes = false,
+		.tbs = false,
 		.min_id = 0,
 		.regs = {
 			.ptp_off = PTP_GMAC4_OFFSET,
@@ -158,6 +162,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = false,
 		.mdio_intr_en = false,
 		.has_serdes = false,
+		.tbs = false,
 		.min_id = DWMAC_CORE_4_00,
 		.regs = {
 			.ptp_off = PTP_GMAC4_OFFSET,
@@ -179,6 +184,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = false,
 		.mdio_intr_en = false,
 		.has_serdes = false,
+		.tbs = false,
 		.min_id = DWMAC_CORE_4_10,
 		.regs = {
 			.ptp_off = PTP_GMAC4_OFFSET,
@@ -200,6 +206,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = false,
 		.mdio_intr_en = true,
 		.has_serdes = false,
+		.tbs = true,
 		.min_id = DWMAC_CORE_5_10,
 		.regs = {
 			.ptp_off = PTP_GMAC4_OFFSET,
@@ -221,6 +228,7 @@ static const struct stmmac_hwif_entry {
 		.xgmac = true,
 		.mdio_intr_en = false,
 		.has_serdes = false,
+		.tbs = false,
 		.min_id = DWXGMAC_CORE_2_10,
 		.regs = {
 			.ptp_off = PTP_XGMAC_OFFSET,
@@ -236,19 +244,41 @@ static const struct stmmac_hwif_entry {
 		.mmc = NULL,
 		.setup = dwxgmac2_setup,
 		.quirks = NULL,
+	}, {
+		.gmac = false,
+		.gmac4 = true,
+		.xgmac = false,
+		.mdio_intr_en = true,
+		.has_serdes = false,
+		.tbs = true,
+		.min_id = DWMAC_CORE_5_10,
+		.regs = {
+			.ptp_off = PTP_GMAC4_OFFSET,
+			.mmc_off = MMC_GMAC4_OFFSET,
+		},
+		.desc = &dwmac5_desc_ops,
+		.dma = &dwmac5_dma_ops,
+		.mac = &dwmac510_ops,
+		.serdes = NULL,
+		.hwtimestamp = &stmmac_ptp,
+		.mode = &dwmac4_ring_mode_ops,
+		.tc = &dwmac510_tc_ops,
+		.setup = dwmac4_setup,
+		.quirks = NULL,
 	}, {
 		.gmac = false,
 		.gmac4 = true,
 		.xgmac = false,
 		.mdio_intr_en = true,
 		.has_serdes = true,
+		.tbs = true,
 		.min_id = DWMAC_CORE_5_10,
 		.regs = {
 			.ptp_off = PTP_GMAC4_OFFSET,
 			.mmc_off = MMC_GMAC4_OFFSET,
 		},
-		.desc = &dwmac4_desc_ops,
-		.dma = &dwmac410_dma_ops,
+		.desc = &dwmac5_desc_ops,
+		.dma = &dwmac5_dma_ops,
 		.mac = &dwmac510_ops,
 		.serdes = &intel_serdes_ops,
 		.hwtimestamp = &stmmac_ptp,
@@ -265,6 +295,7 @@ int stmmac_hwif_init(struct stmmac_priv *priv)
 	bool needs_gmac4 = priv->plat->has_gmac4;
 	bool needs_gmac = priv->plat->has_gmac;
 	bool needs_serdes = priv->plat->has_serdes;
+	bool needs_tbs = priv->plat->has_tbs;
 	const struct stmmac_hwif_entry *entry;
 	struct mac_device_info *mac;
 	bool needs_setup = true;
@@ -311,6 +342,8 @@ int stmmac_hwif_init(struct stmmac_priv *priv)
 			continue;
 		if (needs_serdes ^ entry->has_serdes)
 			continue;
+		if (needs_tbs ^ entry->tbs)
+			continue;
 		/* Use synopsys_id var because some setups can override this */
 		if (priv->synopsys_id < entry->min_id)
 			continue;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 8ca1ce4673eb..3e6bf1998b9d 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -4845,6 +4845,13 @@ int stmmac_dvr_probe(struct device *device,
 				    true);
 		dev_info(priv->device, "EST feature enabled\n");
 	}
+	if (priv->hw->tsn_info.cap.tbs_support && priv->plat->tsn_tbs_en) {
+		stmmac_set_tsn_feat(priv, priv->hw, ndev, TSN_FEAT_ID_TBS,
+				    true);
+		priv->enhanced_tx_desc = 1;
+		priv->mode = STMMAC_ENHANCED_TX_MODE;
+		dev_info(priv->device, "TBS feature enabled\n");
+	}
 
 #ifdef STMMAC_VLAN_TAG_USED
 	/* Both mac100 and gmac support receive VLAN tag detection */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 24d9fa215db6..25ed8c303379 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -157,9 +157,11 @@ static int intel_mgbe_common_data(struct pci_dev *pdev,
 	plat->clk_trail_n = 2;
 	plat->has_gmac = 0;
 	plat->has_gmac4 = 1;
+	plat->has_tbs = 1;
 	plat->force_sf_dma_mode = 0;
 	plat->tso_en = 1;
 	plat->tsn_est_en = 1;
+	plat->tsn_tbs_en = 1;
 
 	plat->rx_sched_algorithm = MTL_RX_ALGORITHM_SP;
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index a76a5f68353f..d2e615659f4a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -97,6 +97,14 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 		return 0;
 	}
 
+	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_TBS)) {
+		dev_info(pdev, "TBS NOT supported\n");
+		cap->tbs_support = 0;
+	} else {
+		dev_info(pdev, "TBS capable\n");
+		cap->tbs_support = 1;
+	}
+
 	gcl_depth = tsnif_est_get_gcl_depth(hw, ioaddr);
 	if (gcl_depth < 0) {
 		dev_err(pdev, "EST GCL depth(%d) < 0\n", gcl_depth);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index 6571fa92d4f8..46de14829eff 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -22,6 +22,7 @@ enum tsn_hwtunable_id {
 /* TSN Feature Enabled List */
 enum tsn_feat_id {
 	TSN_FEAT_ID_EST = 0,
+	TSN_FEAT_ID_TBS = 2,
 	TSN_FEAT_ID_MAX,
 };
 
@@ -43,6 +44,7 @@ enum tsn_gcl_param_idx {
 /* TSN HW Capabilities */
 struct tsn_hw_cap {
 	bool est_support;	/* 1: supported */
+	bool tbs_support;	/* 1: supported */
 	u32 txqcnt;		/* Number of TxQ (control gate) */
 	u32 gcl_depth;		/* GCL depth. */
 	u32 ti_wid;		/* time interval width */
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 56077fd93345..7b4c0a468b6d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -179,9 +179,11 @@ struct plat_stmmacenet_data {
 	struct stmmac_axi *axi;
 	int has_gmac4;
 	int has_serdes;
+	int has_tbs;
 	bool has_sun8i;
 	bool tso_en;
 	bool tsn_est_en;
+	bool tsn_tbs_en;
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
 	int has_xgmac;
-- 
2.22.0.545.g9c9b961d7e

