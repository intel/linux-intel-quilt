From de55a48a523d1c801448c60c2263a03870dd1ccc Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Wed, 27 Jun 2018 08:16:16 +0800
Subject: [PATCH 24/58] net: add Time-Sensitive Networking related netdev
 features

Time-Sensitive Networking (TSN) Task Group defines a collection of
IEEE802.1 specs there are related to improve the timeliness of
transmitted frame.

We introduce 2 netdev features covered under TSN:-
 a) NETIF_F_HW_EST : IEEE802.1 Qbv Enhancements for Scheduled Traffic.
 b) NETIF_F_HW_FPE : IEEE802.1 Qbu Frame Preemption.

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 Documentation/networking/netdev-features.txt | 8 ++++++++
 include/linux/netdev_features.h              | 7 +++++++
 net/core/ethtool.c                           | 2 ++
 3 files changed, 17 insertions(+)

diff --git a/Documentation/networking/netdev-features.txt b/Documentation/networking/netdev-features.txt
index c4a54c1..58ee119 100644
--- a/Documentation/networking/netdev-features.txt
+++ b/Documentation/networking/netdev-features.txt
@@ -179,3 +179,11 @@ stricter than Hardware LRO.  A packet stream merged by Hardware GRO must
 be re-segmentable by GSO or TSO back to the exact original packet stream.
 Hardware GRO is dependent on RXCSUM since every packet successfully merged
 by hardware must also have the checksum verified by hardware.
+
+* Time-Sensitive Networking
+
+NETIF_F_HW_EST is meant to be used by drivers that support IEEE802.1 Qbv
+Enhancements for Scheduled Traffics. NETIF_F_HW_FPE is for IEEE802.1 Qbu
+Frame Preemption. These two hardware capabilities in network device are
+part of the many protocols covered under IEEE802.1 Time-Sensitive
+Networking (TSN) Task Group.
diff --git a/include/linux/netdev_features.h b/include/linux/netdev_features.h
index 623bb8c..636e785 100644
--- a/include/linux/netdev_features.h
+++ b/include/linux/netdev_features.h
@@ -83,6 +83,11 @@ enum {
 	NETIF_F_GRO_HW_BIT,		/* Hardware Generic receive offload */
 	NETIF_F_HW_TLS_RECORD_BIT,	/* Offload TLS record */
 
+	NETIF_F_HW_EST_BIT,		/* IEEE802.1 Qbv Enhancements for
+					 * Scheduled Traffics.
+					 */
+	NETIF_F_HW_FPE_BIT,		/* IEEE802.1 Qbu Frame Preemption */
+
 	/*
 	 * Add your fresh new feature above and remember to update
 	 * netdev_features_strings[] in net/core/ethtool.c and maybe
@@ -151,6 +156,8 @@ enum {
 #define NETIF_F_HW_TLS_RECORD	__NETIF_F(HW_TLS_RECORD)
 #define NETIF_F_GSO_UDP_L4	__NETIF_F(GSO_UDP_L4)
 #define NETIF_F_HW_TLS_TX	__NETIF_F(HW_TLS_TX)
+#define NETIF_F_HW_EST		__NETIF_F(HW_EST)
+#define NETIF_F_HW_FPE		__NETIF_F(HW_FPE)
 
 #define for_each_netdev_feature(mask_addr, bit)	\
 	for_each_set_bit(bit, (unsigned long *)mask_addr, NETDEV_FEATURE_COUNT)
diff --git a/net/core/ethtool.c b/net/core/ethtool.c
index e677a20..2216de2 100644
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@ -111,6 +111,8 @@ static const char netdev_features_strings[NETDEV_FEATURE_COUNT][ETH_GSTRING_LEN]
 	[NETIF_F_RX_UDP_TUNNEL_PORT_BIT] =	 "rx-udp_tunnel-port-offload",
 	[NETIF_F_HW_TLS_RECORD_BIT] =	"tls-hw-record",
 	[NETIF_F_HW_TLS_TX_BIT] =	 "tls-hw-tx-offload",
+	[NETIF_F_HW_EST_BIT] =		 "tx-est",
+	[NETIF_F_HW_FPE_BIT] =		 "tx-fpe",
 };
 
 static const char
-- 
2.7.4

