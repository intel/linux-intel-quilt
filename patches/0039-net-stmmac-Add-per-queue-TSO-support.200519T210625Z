From a40ed9f3c77d05928dfb7e5bac8809c801221b16 Mon Sep 17 00:00:00 2001
From: "Song, Yoong Siang" <yoong.siang.song@intel.com>
Date: Tue, 5 May 2020 06:12:51 +0800
Subject: [PATCH 39/42] net: stmmac: Add per queue TSO support

Add per queue TSO support:
1. TSO feature is mutually exclusive with TBS feature which is using
   enhanced descriptor. Therefore, only enable TCP segmentation
   for Tx Queues with no TBS support.
2. Use "tbs" flag to decide whether to use TSO in stmmac_xmit().
3. Remove TSO checking in tc_setup_etf() since per queue TBS and per
   queue TSO are supported.

Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 25 ++++++++++---------
 .../net/ethernet/stmicro/stmmac/stmmac_tc.c   |  6 -----
 2 files changed, 13 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 08cbc44232a8..05733584cb99 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -3040,12 +3040,6 @@ static int stmmac_hw_setup(struct net_device *dev, bool init_ptp,
 	/* set TX and RX rings length */
 	stmmac_set_rings_length(priv);
 
-	/* Enable TSO */
-	if (priv->tso) {
-		for (chan = 0; chan < tx_cnt; chan++)
-			stmmac_enable_tso(priv, priv->ioaddr, 1, chan);
-	}
-
 	/* Enable Split Header */
 	if (priv->sph && priv->hw->rx_csum) {
 		for (chan = 0; chan < rx_cnt; chan++)
@@ -3064,12 +3058,15 @@ static int stmmac_hw_setup(struct net_device *dev, bool init_ptp,
 	if (!lock_acquired)
 		rtnl_unlock();
 
-	/* TBS */
+	/* TSO and TBS are mutually exclusive. Only enable TSO when TBS is not
+	 * available in that particular Tx Queue.
+	 */
 	for (chan = 0; chan < tx_cnt; chan++) {
 		struct stmmac_tx_queue *tx_q = &priv->tx_queue[chan];
-		int enable = tx_q->tbs & STMMAC_TBS_AVAIL;
-
-		stmmac_enable_tbs(priv, priv->ioaddr, enable, chan);
+		if (tx_q->tbs & STMMAC_TBS_AVAIL)
+			stmmac_enable_tbs(priv, priv->ioaddr, 1, chan);
+		else if (priv->tso)
+			stmmac_enable_tso(priv, priv->ioaddr, 1, chan);
 	}
 
 	/* Start the ball rolling... */
@@ -4001,8 +3998,12 @@ static netdev_tx_t stmmac_xmit(struct sk_buff *skb, struct net_device *dev)
 	if (priv->tx_path_in_lpi_mode)
 		stmmac_disable_eee_mode(priv);
 
-	/* Manage oversized TCP frames for GMAC4 device */
-	if (skb_is_gso(skb) && priv->tso) {
+	/* Manage oversized TCP frames for GMAC4/GMAC5 device.
+	 * TSO feature is mutually exclusive with TBS feature which is using
+	 * enhanced descriptor. Therefore, we only implement TCP segmentation
+	 * on Tx Queues which have no TBS support.
+	 */
+	if (skb_is_gso(skb) && priv->tso && !(tx_q->tbs & STMMAC_TBS_AVAIL)) {
 		if (skb_shinfo(skb)->gso_type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6))
 			return stmmac_tso_xmit(skb, dev);
 	}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index c2941d2b9dba..1845cfdc391e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -815,12 +815,6 @@ static int tc_setup_etf(struct stmmac_priv *priv,
 	if (priv->speed == SPEED_10)
 		return -EOPNOTSUPP;
 
-	if (priv->tso && qopt->enable) {
-		dev_warn(priv->device,
-			 "TSO is ON, please disable it to enable TBS\n");
-		return -EOPNOTSUPP;
-	}
-
 	if (qopt->enable)
 		priv->tx_queue[qopt->queue].tbs |= STMMAC_TBS_EN;
 	else
-- 
2.17.1

