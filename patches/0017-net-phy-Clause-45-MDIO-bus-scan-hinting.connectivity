From 74547e870701ebeb57866e8ef911c5627a522a75 Mon Sep 17 00:00:00 2001
From: "Yong, Jonathan" <jonathan.yong@intel.com>
Date: Wed, 10 Oct 2018 06:38:38 +0000
Subject: [PATCH 17/26] net: phy: Clause 45 MDIO bus scan hinting

Currently, the kernel only scans the bus in C22 mode but some PHYs
only respond correctly with C45. This allows the MAC driver to
hint to the kernel to start scanning with C45 instead.

Current limitations:
In C45 each device on the bus can host up to 8 other devices, with
8 device IDs, we assume that all device IDs present are the same,
and proceed to use as though they were C22 device ID for the purpose
of binding device drivers.

The existing scanning code also assumes that the MDIO bus returns
all 0xffff reads if a device is not present, but some device return
0x0000 instead. It is unknown if this quirk is intentional or not.

Signed-off-by: Yong, Jonathan <jonathan.yong@intel.com>
Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c | 3 +++
 drivers/net/phy/mdio_bus.c                       | 2 +-
 drivers/net/phy/phy_device.c                     | 5 ++++-
 3 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 705c29950ef1..5b1e52cbd35a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -252,6 +252,9 @@ static int tgl_default_data(struct pci_dev *pdev,
 	plat->ptov = 0;
 	plat->tils = 0;
 
+	/* Marvell 88E2110 TSN AIC PHY */
+	plat->mdio_bus_data->is_c45 = 1;
+
 	return intel_common_data(pdev, plat);
 }
 
diff --git a/drivers/net/phy/mdio_bus.c b/drivers/net/phy/mdio_bus.c
index bd04fe762056..10f8533b6933 100644
--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@ -524,7 +524,7 @@ struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr)
 	struct phy_device *phydev;
 	int err;
 
-	phydev = get_phy_device(bus, addr, false);
+	phydev = get_phy_device(bus, addr, bus->c45_scan);
 	if (IS_ERR(phydev))
 		return phydev;
 
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index dcc93a873174..30c61d410617 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -708,6 +708,7 @@ static int get_phy_c45_ids(struct mii_bus *bus, int addr, u32 *phy_id,
 	int i, reg_addr;
 	const int num_ids = ARRAY_SIZE(c45_ids->device_ids);
 	u32 *devs = &c45_ids->devices_in_package;
+	*phy_id = 0;
 
 	/* Find first non-zero Devices In package. Device zero is reserved
 	 * for 802.3 c45 complied PHYs, so don't probe it at first.
@@ -752,8 +753,10 @@ static int get_phy_c45_ids(struct mii_bus *bus, int addr, u32 *phy_id,
 		if (phy_reg < 0)
 			return -EIO;
 		c45_ids->device_ids[i] |= phy_reg;
+
+		if (c45_ids->device_ids[i] && c45_ids->device_ids[i] != -1)
+			*phy_id = c45_ids->device_ids[i];
 	}
-	*phy_id = 0;
 	return 0;
 }
 
-- 
2.17.1

