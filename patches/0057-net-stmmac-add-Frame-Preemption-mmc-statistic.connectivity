From 88400461ae1dc8eee0dbfc1154bb650bff146ceb Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Wed, 21 Aug 2019 15:18:17 +0800
Subject: [PATCH 057/108] net: stmmac: add Frame Preemption mmc statistics
 reporting

The following MMC statistics are added:-
a) TXFFC (Tx FPE Fragment Counter)
   = Number of additional mPackets transmitted due to preemption.
b) TXHRC (Tx Hold Request Counter)
   = Number of hold request is given to MAC.
c) PAEC (Rx Packet Assembly Error Counter)
   = Number of MAC frames with reassembly errors on the Rx due to
     mismatch in the Fragment Count value.
d) PSEC (Rx Packet SMD Error Counter)
   = Number of MAC frames rejected due to incorrect SMD value or
     unexpected SMD-C received when there is no preceding preempted
     frame.
e) PAOC (Rx Packet Assembly OK Counter)
   = Number of MAC frames that were successfully reassembled.
f) FFC (RX FPE Fragment Counter)
   = Number of additional mPackets received due to preemption.

Thanks to Ong Boon Leong who implemented the handling of FPE MMC
interrupt handler and hook into ethtool.

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |  1 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  | 25 +++++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  | 97 +++++++++++++++++--
 drivers/net/ethernet/stmicro/stmmac/hwif.h    | 12 +++
 .../ethernet/stmicro/stmmac/stmmac_ethtool.c  | 12 ++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 11 +++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  1 +
 7 files changed, 150 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index 16630df356c5..3a65c5b906c0 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1195,6 +1195,7 @@ const struct stmmac_ops dwmac510_ops = {
 	.set_est_gcrr_times = tsn_est_gcrr_times_set,
 	.get_est_gcc = tsn_est_gcc_get,
 	.est_irq_status = tsn_est_irq_status,
+	.update_tsn_mmc_stat = tsn_mmc_stat_update,
 	.dump_tsn_mmc = tsn_mmc_dump,
 	.cbs_recal_idleslope = tsn_cbs_recal_idleslope,
 	.fpe_set_txqpec = tsn_fpe_set_txqpec,
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 1df32ac5d7df..f448cd26e8ab 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -196,6 +196,31 @@
 #define MTL_FPE_ADVANCE_RADV_SHIFT	16
 #define MTL_FPE_ADVANCE_HADV		GENMASK(15, 0)	/* Hold Advance */
 
+/* MMC related registers for FPE */
+#define MMC_FPE_TX_INTR			0x8a0	/* MMC FPE Tx Int */
+#define MMC_FPE_TX_INTR_MASK		0x8a4	/* MMC FPE Tx Int Mask */
+#define MMC_FPE_TX_INTR_MASK_HRCIM	BIT(1)	/* Hold Request cnt Int En */
+#define MMC_FPE_TX_INTR_MASK_FCIM	BIT(0)	/* Tx Fragments cnt Int En */
+#define MMC_FPE_TX_INTR_MASK_DEFAULT	(MMC_FPE_TX_INTR_MASK_HRCIM |\
+					 MMC_FPE_TX_INTR_MASK_FCIM)
+#define MMC_TX_FPE_FRAGMENT		0x8a8	/* Tx FPE Fragment cnt Int En */
+#define MMC_TX_HOLD_REQ			0x8ac	/* Tx Hold Request cnt Int En */
+
+#define MMC_FPE_RX_INTR			0x8c0	/* MMC FPE Rx Int */
+#define MMC_FPE_RX_INTR_MASK		0x8c4	/* MMC FPE Rx Int Mask */
+#define MMC_FPE_RX_INTR_MASK_FCIM	BIT(3)	/* Rx Fragments cnt Int En */
+#define MMC_FPE_RX_INTR_MASK_PAOCIM	BIT(2)	/* Rx Assembly OK Int En */
+#define MMC_FPE_RX_INTR_MASK_PSECIM	BIT(1)	/* Rx SMD Error cnt Int En */
+#define MMC_FPE_RX_INTR_MASK_PAECIM	BIT(0)	/* Rx Assembly Err cnt Int En */
+#define MMC_FPE_RX_INTR_MASK_DEFAULT	(MMC_FPE_RX_INTR_MASK_FCIM |\
+					 MMC_FPE_RX_INTR_MASK_PAOCIM |\
+					 MMC_FPE_RX_INTR_MASK_PSECIM |\
+					 MMC_FPE_RX_INTR_MASK_PAECIM)
+#define MMC_RX_PACKET_ASSEMBLY_ERR	0x8c8	/* Rx Pkt Assembly Error */
+#define MMC_RX_PACKET_SMD_ERR		0x8cc	/* Rx frame with SMD errors */
+#define MMC_RX_PACKET_ASSEMBLY_OK	0x8d0	/* Rx Pkt Assembly OK */
+#define MMC_RX_FPE_FRAGMENT		0x8d4	/* Rx Fragments count in FPE */
+
 /* FPE Global defines */
 #define FPE_PMAC_BIT			BIT(0)	/* TxQ0 is always preemptible */
 #define FPE_AFSZ_MAX			0x3	/* Max AFSZ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 192af21d6815..60d36b7a6daf 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -14,6 +14,12 @@ enum tsn_mmc_idx {
 	EST_MMC_HLBF = 2,
 	EST_MMC_HLBS = 3,
 	EST_MMC_CGCE = 4,
+	FPE_MMC_TXFFC = 5,
+	FPE_MMC_TXHRC = 6,
+	FPE_MMC_PAEC = 7,
+	FPE_MMC_PSEC = 8,
+	FPE_MMC_PAOC = 9,
+	FPE_MMC_FFC = 10,
 };
 
 const struct tsn_mmc_desc dwmac5_tsn_mmc_desc[STMMAC_TSN_STAT_SIZE] = {
@@ -22,12 +28,12 @@ const struct tsn_mmc_desc dwmac5_tsn_mmc_desc[STMMAC_TSN_STAT_SIZE] = {
 	{ true, "HLBF" },  /* Head-of-Line Blocking due to Frame Size */
 	{ true, "HLBS" },  /* Head-of-Line Blocking due to Scheduling */
 	{ true, "CGCE" },  /* Constant Gate Control Error */
-	{ false, "RESV" },
-	{ false, "RESV" },
-	{ false, "RESV" },
-	{ false, "RESV" },
-	{ false, "RESV" },
-	{ false, "RESV" },
+	{ true, "TXFFC" }, /* Tx FPE Fragment Counter */
+	{ true, "TXHRC" }, /* Tx Hold Request Counter */
+	{ true, "PAEC" },  /* Rx Packet Assembly Error Counter */
+	{ true, "PSEC" },  /* Rx Packet SMD Error Counter */
+	{ true, "PAOC" },  /* Rx Packet Assembly OK Counter */
+	{ true, "FFC" },   /* Rx FPE Fragment Counter */
 	{ false, "RESV" },
 	{ false, "RESV" },
 	{ false, "RESV" },
@@ -106,6 +112,13 @@ static void dwmac5_hw_setup(void __iomem *ioaddr, enum tsn_feat_id featid,
 		value &= ~GMAC_RXQCTRL_FPRQ_MASK;
 		value |= fprq << GMAC_RXQCTRL_FPRQ_SHIFT;
 		writel(value, ioaddr + GMAC_RXQ_CTRL1);
+
+		/* Unmask all FPE Tx & Rx MMC interrupts */
+		value = (u32)~MMC_FPE_TX_INTR_MASK_DEFAULT;
+		writel(value, ioaddr + MMC_FPE_TX_INTR_MASK);
+		value = (u32)~MMC_FPE_RX_INTR_MASK_DEFAULT;
+		writel(value, ioaddr + MMC_FPE_RX_INTR_MASK);
+		break;
 	default:
 		return;
 	};
@@ -551,6 +564,76 @@ void dwmac5_fpe_send_mpacket(void *ioaddr, enum mpacket_type type)
 	writel(value, ioaddr + MAC_FPE_CTRL_STS);
 }
 
+static void dwmac5_fpe_mmc_irq_status(void __iomem *ioaddr,
+				      struct net_device *dev)
+{
+	u32 tx_stat;
+	u32 rx_stat;
+	u32 value;
+
+	tx_stat = readl(ioaddr + MMC_FPE_TX_INTR);
+	rx_stat = readl(ioaddr + MMC_FPE_RX_INTR);
+
+	if (tx_stat & MMC_FPE_TX_INTR_MASK_DEFAULT) {
+		/* Read TXHRC to clear HRCIS bit */
+		if ((tx_stat & MMC_FPE_TX_INTR_MASK_HRCIM) ==
+		    MMC_FPE_TX_INTR_MASK_HRCIM) {
+			value = readl(ioaddr + MMC_TX_HOLD_REQ);
+			netdev_info(dev, "FPE IRQ: TXHRC = %d\n", value);
+		}
+
+		/* Read TXFFC to clear FCIS bit */
+		if ((tx_stat & MMC_FPE_TX_INTR_MASK_FCIM) ==
+		    MMC_FPE_TX_INTR_MASK_FCIM) {
+			value = readl(ioaddr + MMC_TX_FPE_FRAGMENT);
+			netdev_info(dev, "FPE IRQ: TXFFC = %d\n", value);
+		}
+	}
+
+	if (rx_stat & MMC_FPE_RX_INTR_MASK_DEFAULT) {
+		/* Read PAEC to clear PAECIS bit */
+		if ((rx_stat & MMC_FPE_RX_INTR_MASK_PAECIM) ==
+		    MMC_FPE_RX_INTR_MASK_PAECIM) {
+			value = readl(ioaddr + MMC_RX_PACKET_ASSEMBLY_ERR);
+			netdev_info(dev, "FPE IRQ: PAEC = %d\n", value);
+		}
+
+		/* Read PSEC to clear PSECIS bit */
+		if ((rx_stat & MMC_FPE_RX_INTR_MASK_PSECIM) ==
+		    MMC_FPE_RX_INTR_MASK_PSECIM) {
+			value = readl(ioaddr + MMC_RX_PACKET_SMD_ERR);
+			netdev_info(dev, "FPE IRQ: PSEC = %d\n", value);
+		}
+
+		/* Read PAOC to clear PAOCIS bit */
+		if ((rx_stat & MMC_FPE_RX_INTR_MASK_PAOCIM) ==
+		    MMC_FPE_RX_INTR_MASK_PAOCIM) {
+			value = readl(ioaddr + MMC_RX_PACKET_ASSEMBLY_OK);
+			netdev_info(dev, "FPE IRQ: PAOC = %d\n", value);
+		}
+
+		/* Read FFC to clear FCIS bit */
+		if ((rx_stat & MMC_FPE_RX_INTR_MASK_FCIM) ==
+		    MMC_FPE_RX_INTR_MASK_FCIM) {
+			value = readl(ioaddr + MMC_RX_FPE_FRAGMENT);
+			netdev_info(dev, "FPE IRQ: RXFFC = %d\n", value);
+		}
+	}
+}
+
+static void dwmac5_fpe_update_mmc_stat(void __iomem *ioaddr,
+				       struct tsn_mmc_stat *mmc_stat)
+{
+	mmc_stat->count[FPE_MMC_TXHRC] = readl(ioaddr + MMC_TX_HOLD_REQ);
+	mmc_stat->count[FPE_MMC_TXFFC] = readl(ioaddr + MMC_TX_FPE_FRAGMENT);
+	mmc_stat->count[FPE_MMC_PAEC] = readl(ioaddr +
+					      MMC_RX_PACKET_ASSEMBLY_ERR);
+	mmc_stat->count[FPE_MMC_PSEC] = readl(ioaddr + MMC_RX_PACKET_SMD_ERR);
+	mmc_stat->count[FPE_MMC_PAOC] = readl(ioaddr +
+					      MMC_RX_PACKET_ASSEMBLY_OK);
+	mmc_stat->count[FPE_MMC_FFC] = readl(ioaddr + MMC_RX_FPE_FRAGMENT);
+}
+
 static void dwmac5_tbs_get_max(u32 *leos_max,
 			       u32 *legos_max,
 			       u32 *ftos_max,
@@ -692,6 +775,8 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.fpe_set_radv = dwmac5_fpe_set_radv,
 	.fpe_irq_status = dwmac5_fpe_irq_status,
 	.fpe_send_mpacket = dwmac5_fpe_send_mpacket,
+	.fpe_update_mmc_stat = dwmac5_fpe_update_mmc_stat,
+	.fpe_mmc_irq_status = dwmac5_fpe_mmc_irq_status,
 	.tbs_get_max = dwmac5_tbs_get_max,
 	.tbs_set_estm = dwmac5_tbs_set_estm,
 	.tbs_set_leos = dwmac5_tbs_set_leos,
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index a1ef1f0e1322..f10143585c43 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -437,6 +437,8 @@ struct stmmac_ops {
 			   struct est_gc_config **gcc);
 	void (*est_irq_status)(struct mac_device_info *hw,
 			       struct net_device *dev);
+	void (*update_tsn_mmc_stat)(struct mac_device_info *hw,
+				    struct net_device *dev);
 	int (*dump_tsn_mmc)(struct mac_device_info *hw, int index,
 			    unsigned long *count, const char **desc);
 	int (*cbs_recal_idleslope)(struct mac_device_info *hw,
@@ -586,6 +588,8 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, get_est_gcc, __args)
 #define stmmac_est_irq_status(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mac, est_irq_status, __args)
+#define stmmac_update_tsn_mmc_stat(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, update_tsn_mmc_stat, __args)
 #define stmmac_dump_tsn_mmc(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, dump_tsn_mmc, __args)
 #define stmmac_cbs_recal_idleslope(__priv, __args...) \
@@ -819,6 +823,10 @@ struct tsnif_ops {
 	void (*fpe_send_mpacket)(void *ioaddr, enum mpacket_type type);
 	void (*fpe_irq_status)(void *ioaddr, struct net_device *dev,
 			       enum fpe_event *fpe_event);
+	void (*fpe_mmc_irq_status)(void __iomem *ioaddr,
+				   struct net_device *dev);
+	void (*fpe_update_mmc_stat)(void __iomem *ioaddr,
+				    struct tsn_mmc_stat *mmc_stat);
 	/* Time-Based Scheduling (TBS) */
 	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max,
 			    u32 *ftos_max, u32 *fgos_max);
@@ -893,6 +901,10 @@ struct tsnif_ops {
 	tsnif_do_void_callback(__hw, fpe_send_mpacket, __args)
 #define tsnif_fpe_irq_status(__hw, __args...) \
 	tsnif_do_void_callback(__hw, fpe_irq_status, __args)
+#define tsnif_fpe_mmc_irq_status(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_mmc_irq_status, __args)
+#define tsnif_fpe_update_mmc_stat(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_update_mmc_stat, __args)
 #define tsnif_tbs_get_max(__hw, __args...) \
 	tsnif_do_void_callback(__hw, tbs_get_max, __args)
 #define tsnif_tbs_set_estm(__hw, __args...) \
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
index 43f506543314..c48a77f6508c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
@@ -489,7 +489,11 @@ static void stmmac_get_ethtool_stats(struct net_device *dev,
 				data[j++] = count;
 		}
 	}
-	if (priv->hw->tsn_info.cap.est_support) {
+	if (priv->hw->tsn_info.cap.est_support ||
+	    priv->hw->tsn_info.cap.fpe_support) {
+		/* Update TSN MMC stats that are not refreshed in interrupt */
+		stmmac_update_tsn_mmc_stat(priv, priv->hw, dev);
+
 		for (i = 0; i < STMMAC_TSN_STAT_SIZE; i++) {
 			if (!stmmac_dump_tsn_mmc(priv,
 						 priv->hw, i,
@@ -553,7 +557,8 @@ static int stmmac_get_sset_count(struct net_device *netdev, int sset)
 
 			len += safety_len;
 		}
-		if (priv->hw->tsn_info.cap.est_support) {
+		if (priv->hw->tsn_info.cap.est_support ||
+		    priv->hw->tsn_info.cap.fpe_support) {
 			for (i = 0; i < STMMAC_TSN_STAT_SIZE; i++) {
 				if (!stmmac_dump_tsn_mmc(priv,
 							 priv->hw, i,
@@ -591,7 +596,8 @@ static void stmmac_get_strings(struct net_device *dev, u32 stringset, u8 *data)
 				}
 			}
 		}
-		if (priv->hw->tsn_info.cap.est_support) {
+		if (priv->hw->tsn_info.cap.est_support ||
+		    priv->hw->tsn_info.cap.fpe_support) {
 			for (i = 0; i < STMMAC_TSN_STAT_SIZE; i++) {
 				const char *desc;
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index 9b7ad371d4ba..5398b7afe025 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -1097,6 +1097,16 @@ void tsn_est_irq_status(struct mac_device_info *hw, struct net_device *dev)
 				      info->cap.txqcnt);
 }
 
+void tsn_mmc_stat_update(struct mac_device_info *hw, struct net_device *dev)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+		tsnif_fpe_update_mmc_stat(hw, ioaddr, &info->mmc_stat);
+	}
+}
+
 int tsn_mmc_dump(struct mac_device_info *hw,
 		 int index, unsigned long *count, const char **desc)
 {
@@ -1312,6 +1322,7 @@ void tsn_fpe_irq_status(struct mac_device_info *hw, struct net_device *dev)
 	lp_state = &info->fpe_cfg.lp_fpe_state;
 	enable = &info->fpe_cfg.enable;
 
+	tsnif_fpe_mmc_irq_status(hw, ioaddr, dev);
 	tsnif_fpe_irq_status(hw, ioaddr, dev, event);
 
 	if (*event == FPE_EVENT_UNKNOWN || !*enable)
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index e0770d6b6c7f..ea64d3b2bfc0 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -202,6 +202,7 @@ int tsn_est_gcrr_times_set(struct mac_device_info *hw,
 int tsn_est_gcc_get(struct mac_device_info *hw, struct net_device *dev,
 		    struct est_gc_config **gcc);
 void tsn_est_irq_status(struct mac_device_info *hw, struct net_device *dev);
+void tsn_mmc_stat_update(struct mac_device_info *hw, struct net_device *dev);
 int tsn_mmc_dump(struct mac_device_info *hw,
 		 int index, unsigned long *count, const char **desc);
 int tsn_cbs_recal_idleslope(struct mac_device_info *hw, struct net_device *dev,
-- 
2.17.1

