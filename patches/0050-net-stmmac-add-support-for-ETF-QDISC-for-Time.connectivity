From 789e36d0fc0b0e166995ca1a5a9082f1bf03802e Mon Sep 17 00:00:00 2001
From: Weifeng Voon <weifeng.voon@intel.com>
Date: Mon, 22 Oct 2018 15:36:14 +0800
Subject: [PATCH 050/104] net: stmmac: add support for ETF QDISC for Time-Based
 Scheduling

This adds support for ETF configuration using TC application and
the setting of LaunchTime (per-packet TxTime) through Enhanced
Tx Descriptor.

Please also take note that both TSO and TBS cannot coexist, so
we add a warning there.

Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  5 +++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 40 +++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_tc.c   | 21 ++++++++++
 include/linux/stmmac.h                        |  1 +
 4 files changed, 67 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index e3b4d4b60d77..e439f2b11766 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -582,6 +582,7 @@ struct stmmac_priv;
 struct tc_cls_u32_offload;
 struct tc_cbs_qopt_offload;
 struct tc_taprio_qopt_offload;
+struct tc_etf_qopt_offload;
 
 struct stmmac_tc_ops {
 	int (*init)(struct stmmac_priv *priv);
@@ -591,6 +592,8 @@ struct stmmac_tc_ops {
 			 struct tc_cbs_qopt_offload *qopt);
 	int (*setup_taprio)(struct stmmac_priv *priv,
 			    struct tc_taprio_qopt_offload *qopt);
+	int (*setup_etf)(struct stmmac_priv *priv,
+			 struct tc_etf_qopt_offload *qopt);
 };
 
 #define stmmac_tc_init(__priv, __args...) \
@@ -601,6 +604,8 @@ struct stmmac_tc_ops {
 	stmmac_do_callback(__priv, tc, setup_cbs, __args)
 #define stmmac_tc_setup_taprio(__priv, __args...) \
 	stmmac_do_callback(__priv, tc, setup_taprio, __args)
+#define stmmac_tc_setup_etf(__priv, __args...) \
+	stmmac_do_callback(__priv, tc, setup_etf, __args)
 
 struct stmmac_counters;
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 3e6bf1998b9d..b9168ae23f98 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -2400,6 +2400,25 @@ static void stmmac_configure_cbs(struct stmmac_priv *priv)
 	}
 }
 
+static int stmmac_set_tbs_launchtime(struct stmmac_priv *priv,
+				     struct dma_desc *desc,
+				     u64 tx_time)
+{
+	struct dma_enhanced_tx_desc *enhtxdesc;
+	u32 launchtime_ns;
+	u8 launchtime_s;
+
+	enhtxdesc = container_of(desc, struct dma_enhanced_tx_desc, basic);
+	launchtime_ns = do_div(tx_time, NSEC_PER_SEC);
+	launchtime_s = tx_time;
+
+	enhtxdesc->etdes4 = launchtime_s & ETDESC4_LT_SEC;
+	enhtxdesc->etdes5 = launchtime_ns & ETDESC5_LT_NANOSEC;
+	enhtxdesc->etdes4 |= ETDESC4_LTV;
+
+	return 0;
+}
+
 /**
  *  stmmac_rx_queue_dma_chan_map - Map RX queue to RX dma channel
  *  @priv: driver private structure
@@ -3417,6 +3436,20 @@ static netdev_tx_t stmmac_xmit(struct sk_buff *skb, struct net_device *dev)
 
 	first = desc;
 
+	/* Fill the Enhanced Tx Descriptor with launch time.
+	 * If skb is fragmented, only the 1st descriptor will be filled.
+	 * Drop the skb and show warning when launch time value
+	 * is invalid.
+	 */
+	if (priv->plat->tx_queues_cfg[queue].tbs_en && skb->tstamp &&
+	    priv->enhanced_tx_desc) {
+		if (stmmac_set_tbs_launchtime(priv, first,
+					      ktime_to_ns(skb->tstamp))) {
+			netdev_warn(priv->dev, "Launch time setting failed\n");
+			goto tbs_err;
+		}
+	}
+
 	enh_desc = priv->plat->enh_desc;
 	/* To program the descriptors according to the size of the frame */
 	if (enh_desc)
@@ -3586,6 +3619,11 @@ static netdev_tx_t stmmac_xmit(struct sk_buff *skb, struct net_device *dev)
 	dev_kfree_skb(skb);
 	priv->dev->stats.tx_dropped++;
 	return NETDEV_TX_OK;
+
+tbs_err:
+	dev_kfree_skb(skb);
+	priv->dev->stats.tx_dropped++;
+	return NETDEV_TX_OK;
 }
 
 static void stmmac_rx_vlan(struct net_device *dev, struct sk_buff *skb)
@@ -4295,6 +4333,8 @@ static int stmmac_setup_tc(struct net_device *ndev, enum tc_setup_type type,
 		return stmmac_tc_setup_cbs(priv, priv, type_data);
 	case TC_SETUP_QDISC_TAPRIO:
 		return stmmac_tc_setup_taprio(priv, priv, type_data);
+	case TC_SETUP_QDISC_ETF:
+		return stmmac_tc_setup_etf(priv, priv, type_data);
 	default:
 		return -EOPNOTSUPP;
 	}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index 56693fae731c..ed34775848ed 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -487,9 +487,30 @@ static int tc_setup_taprio(struct stmmac_priv *priv,
 	return ret;
 }
 
+static int tc_setup_etf(struct stmmac_priv *priv,
+			struct tc_etf_qopt_offload *qopt)
+{
+	if (!priv->enhanced_tx_desc)
+		return -EOPNOTSUPP;
+
+	if (priv->speed == SPEED_10)
+		return -EOPNOTSUPP;
+
+	if (priv->tso && qopt->enable) {
+		dev_warn(priv->device,
+			 "TSO is ON, please disable it to enable TBS\n");
+		return -EOPNOTSUPP;
+	}
+
+	priv->plat->tx_queues_cfg[qopt->queue].tbs_en = qopt->enable;
+
+	return 0;
+}
+
 const struct stmmac_tc_ops dwmac510_tc_ops = {
 	.init = tc_init,
 	.setup_cls_u32 = tc_setup_cls_u32,
 	.setup_cbs = tc_setup_cbs,
 	.setup_taprio = tc_setup_taprio,
+	.setup_etf = tc_setup_etf,
 };
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7b4c0a468b6d..c2c8fe8e3c00 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -125,6 +125,7 @@ struct stmmac_txq_cfg {
 	u32 low_credit;
 	bool use_prio;
 	u32 prio;
+	bool tbs_en;
 };
 
 struct plat_stmmacenet_data {
-- 
2.17.1

