From 855115ab7018e93e5d39aed6a53c302df02a4942 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Wed, 19 Feb 2025 14:13:44 +0800
Subject: [PATCH 61/76] virt: acrn: Introduce interfaces for PIO device

passthrough PIO device passthrough enables an OS in a virtual machine to
directly access a PIO device in the host. It promises almost the native
performance, which is required in performance-critical scenarios of ACRN.

HSM provides the following ioctls:
 - Assign - ACRN_IOCTL_ASSIGN_PIODEV
   Pass data struct acrn_piodev from userspace to the hypervisor, and
   inform the hypervisor to assign a PIO device to a User VM.

 - De-assign - ACRN_IOCTL_DEASSIGN_PIODEV
   Pass data struct acrn_piodev from userspace to the hypervisor, and
   inform the hypervisor to de-assign a PIO device from a User VM.

Signed-off-by: Tang, Yichong <yichong.tang@intel.com>
Signed-off-by: Junxiao Chang <junxiao.chang@intel.com>
---
 drivers/virt/acrn/hsm.c       | 25 +++++++++++++++++++++++++
 drivers/virt/acrn/hypercall.h | 26 ++++++++++++++++++++++++++
 include/uapi/linux/acrn.h     | 20 ++++++++++++++++++++
 3 files changed, 71 insertions(+)

diff --git a/drivers/virt/acrn/hsm.c b/drivers/virt/acrn/hsm.c
index e4e196abdaac9..d924f0911a924 100644
--- a/drivers/virt/acrn/hsm.c
+++ b/drivers/virt/acrn/hsm.c
@@ -115,6 +115,7 @@ static long acrn_dev_ioctl(struct file *filp, unsigned int cmd,
 	struct acrn_ioeventfd ioeventfd;
 	struct acrn_vm_memmap memmap;
 	struct acrn_mmiodev *mmiodev;
+	struct acrn_piodev *piodev;
 	struct acrn_msi_entry *msi;
 	struct acrn_pcidev *pcidev;
 	struct acrn_irqfd irqfd;
@@ -324,6 +325,30 @@ static long acrn_dev_ioctl(struct file *filp, unsigned int cmd,
 				"Failed to reset intr for ptdev!\n");
 		kfree(irq_info);
 		break;
+	case ACRN_IOCTL_ASSIGN_PIODEV:
+		piodev = memdup_user((void __user *)ioctl_param,
+				       sizeof(struct acrn_piodev));
+		if (IS_ERR(piodev))
+			return PTR_ERR(piodev);
+
+		ret = hcall_assign_piodev(vm->vmid, virt_to_phys(piodev));
+		if (ret < 0)
+			dev_dbg(acrn_dev.this_device,
+				"Failed to assign PIO resource!\n");
+		kfree(piodev);
+		break;
+	case ACRN_IOCTL_DEASSIGN_PIODEV:
+		piodev = memdup_user((void __user *)ioctl_param,
+				       sizeof(struct acrn_piodev));
+		if (IS_ERR(piodev))
+			return PTR_ERR(piodev);
+
+		ret = hcall_deassign_piodev(vm->vmid, virt_to_phys(piodev));
+		if (ret < 0)
+			dev_dbg(acrn_dev.this_device,
+				"Failed to deassign PIO resource!\n");
+		kfree(piodev);
+		break;
 	case ACRN_IOCTL_SET_IRQLINE:
 		ret = hcall_set_irqline(vm->vmid, ioctl_param);
 		if (ret < 0)
diff --git a/drivers/virt/acrn/hypercall.h b/drivers/virt/acrn/hypercall.h
index 71d300821a180..224eca7095062 100644
--- a/drivers/virt/acrn/hypercall.h
+++ b/drivers/virt/acrn/hypercall.h
@@ -45,6 +45,8 @@
 #define HC_DEASSIGN_MMIODEV		_HC_ID(HC_ID, HC_ID_PCI_BASE + 0x08)
 #define HC_CREATE_VDEV			_HC_ID(HC_ID, HC_ID_PCI_BASE + 0x09)
 #define HC_DESTROY_VDEV			_HC_ID(HC_ID, HC_ID_PCI_BASE + 0x0A)
+#define HC_ASSIGN_PIODEV		_HC_ID(HC_ID, HC_ID_PCI_BASE + 0x0B)
+#define HC_DEASSIGN_PIODEV		_HC_ID(HC_ID, HC_ID_PCI_BASE + 0x0C)
 
 #define HC_ID_PM_BASE			0x80UL
 #define HC_PM_GET_CPU_STATE		_HC_ID(HC_ID, HC_ID_PM_BASE + 0x00)
@@ -294,6 +296,30 @@ static inline long hcall_reset_ptdev_intr(u64 vmid, u64 irq)
 	return acrn_hypercall2(HC_RESET_PTDEV_INTR, vmid, irq);
 }
 
+/**
+ * hcall_assign_piodev() - Assign a PIO device to a User VM
+ * @vmid:	User VM ID
+ * @addr:	Service VM GPA of the &struct acrn_piodev
+ *
+ * Return: 0 on success, <0 on failure
+ */
+static inline long hcall_assign_piodev(u64 vmid, u64 addr)
+{
+	return acrn_hypercall2(HC_ASSIGN_PIODEV, vmid, addr);
+}
+
+/**
+ * hcall_deassign_piodev() - De-assign a PIO device from a User VM
+ * @vmid:	User VM ID
+ * @addr:	Service VM GPA of the &struct acrn_piodev
+ *
+ * Return: 0 on success, <0 on failure
+ */
+static inline long hcall_deassign_piodev(u64 vmid, u64 addr)
+{
+	return acrn_hypercall2(HC_DEASSIGN_PIODEV, vmid, addr);
+}
+
 /*
  * hcall_get_cpu_state() - Get P-states and C-states info from the hypervisor
  * @state:	Service VM GPA of buffer of P-states and C-states
diff --git a/include/uapi/linux/acrn.h b/include/uapi/linux/acrn.h
index 7b714c1902eb2..b1646fed657c5 100644
--- a/include/uapi/linux/acrn.h
+++ b/include/uapi/linux/acrn.h
@@ -440,6 +440,22 @@ struct acrn_mmiodev {
 	} res[ACRN_MMIODEV_RES_NUM];
 };
 
+/**
+ * struct acrn_piodev - Info for assigning or de-assigning a PIO device
+ * @name:			Name of the PIO device.
+ * @res[].port_address:		Physical address of PIO device region.
+ * @res[].size:	Size of the PIO region for the PIO device.
+ *
+ * This structure will be passed to hypervisor directly.
+ */
+struct acrn_piodev {
+	__u8	name[8];
+	struct {
+		__u16 port_address;
+		__u16 size;
+	} res;
+};
+
 /**
  * struct acrn_vdev - Info for creating or destroying a virtual device
  * @id:				Union of identifier of the virtual device
@@ -637,6 +653,10 @@ struct acrn_irqfd {
 	_IOW(ACRN_IOCTL_TYPE, 0x59, struct acrn_vdev)
 #define ACRN_IOCTL_DESTROY_VDEV	\
 	_IOW(ACRN_IOCTL_TYPE, 0x5A, struct acrn_vdev)
+#define ACRN_IOCTL_ASSIGN_PIODEV	\
+	_IOW(ACRN_IOCTL_TYPE, 0x5B, struct acrn_piodev)
+#define ACRN_IOCTL_DEASSIGN_PIODEV	\
+	_IOW(ACRN_IOCTL_TYPE, 0x5C, struct acrn_piodev)
 
 #define ACRN_IOCTL_PM_GET_CPU_STATE	\
 	_IOWR(ACRN_IOCTL_TYPE, 0x60, __u64)
-- 
2.43.0

