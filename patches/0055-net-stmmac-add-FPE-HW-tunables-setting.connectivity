From 19896c02f8f7621bad686c8634f159e7d950c5e3 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Sat, 10 Aug 2019 07:40:18 +0800
Subject: [PATCH 055/104] net: stmmac: add FPE HW tunables setting

AFSZ is meant to change the non-final fragment size of preempted
frame. A smaller value here means express frame will be transmitted by
express MAC as soon as preempted MAC (pMAC) has collected the configured
fragment size, default to 64-byte fragment.

HADV is meant to specify the time (in nano-seconds) for pMAC to
switch from release to hold state in advance.

RADV is meant to specify the time (in nano-seconds) for pMAC to
switch from hold to release state in advance.

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  | 10 +++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  | 41 +++++++++++-
 drivers/net/ethernet/stmicro/stmmac/hwif.h    | 12 +++-
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  3 +
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  | 66 ++++++++++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  6 ++
 include/linux/stmmac.h                        |  3 +
 7 files changed, 137 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index f3dbb98027c9..013ebd6af865 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -180,9 +180,19 @@
 #define MTL_FPE_CTRL_STS_HRS_SHIFT	28
 #define MTL_FPE_CTRL_STS_PEC		GENMASK(15, 8)	/* FPE Classification */
 #define MTL_FPE_CTRL_STS_PEC_SHIFT	8
+#define MTL_FPE_CTRL_STS_AFSZ		GENMASK(1, 0)	/* Extra Frag Size */
+
+/* MTL FPE Advance */
+#define MTL_FPE_ADVANCE			0x00000c94
+#define MTL_FPE_ADVANCE_RADV		GENMASK(31, 16)	/* Release Advance */
+#define MTL_FPE_ADVANCE_RADV_SHIFT	16
+#define MTL_FPE_ADVANCE_HADV		GENMASK(15, 0)	/* Hold Advance */
 
 /* FPE Global defines */
 #define FPE_PMAC_BIT			BIT(0)	/* TxQ0 is always preemptible */
+#define FPE_AFSZ_MAX			0x3	/* Max AFSZ */
+#define FPE_RADV_MAX			0xFFFF	/* Max Release advance */
+#define FPE_HADV_MAX			0xFFFF	/* Max Hold advance */
 
 /* DMA Tx Channel X Control register TBS bits defines */
 #define DMA_CONTROL_EDSE		BIT(28)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 826e623350bf..a8156138a0a1 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -419,9 +419,13 @@ int dwmac5_est_irq_status(void __iomem *ioaddr, struct net_device *dev,
 	return status;
 }
 
-static void dwmac5_fpe_get_info(u32 *pmac_bit)
+static void dwmac5_fpe_get_info(u32 *pmac_bit, u32 *afsz_max,
+				u32 *hadv_max, u32 *radv_max)
 {
 	*pmac_bit = FPE_PMAC_BIT;
+	*afsz_max = FPE_AFSZ_MAX;
+	*hadv_max = FPE_HADV_MAX;
+	*radv_max = FPE_RADV_MAX;
 }
 
 static void dwmac5_fpe_set_txqpec(void *ioaddr, u32 txqpec, u32 txqmask)
@@ -468,6 +472,38 @@ void dwmac5_fpe_get_pmac_sts(void *ioaddr, u32 *hrs)
 	*hrs = (value & MTL_FPE_CTRL_STS_HRS) >> MTL_FPE_CTRL_STS_HRS_SHIFT;
 }
 
+static void dwmac5_fpe_set_afsz(void *ioaddr, const u32 afsz)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_FPE_CTRL_STS);
+	value &= ~MTL_FPE_CTRL_STS_AFSZ;
+	value |= afsz;
+	writel(value, ioaddr + MTL_FPE_CTRL_STS);
+}
+
+static void dwmac5_fpe_set_hadv(void *ioaddr, const u32 hadv)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_FPE_ADVANCE);
+	value &= ~MTL_FPE_ADVANCE_HADV;
+	value |= hadv;
+	writel(value, ioaddr + MTL_FPE_ADVANCE);
+}
+
+static void dwmac5_fpe_set_radv(void *ioaddr, const u32 radv)
+{
+	u32 value;
+
+	value = readl(ioaddr + MTL_FPE_ADVANCE);
+	value &= ~MTL_FPE_ADVANCE_RADV;
+	value |= MTL_FPE_ADVANCE_RADV &
+		 (radv << MTL_FPE_ADVANCE_RADV_SHIFT);
+	value |= radv;
+	writel(value, ioaddr + MTL_FPE_ADVANCE);
+}
+
 static void dwmac5_tbs_get_max(u32 *leos_max,
 			       u32 *legos_max,
 			       u32 *ftos_max,
@@ -604,6 +640,9 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.fpe_set_enable = dwmac5_fpe_set_enable,
 	.fpe_get_config = dwmac5_fpe_get_config,
 	.fpe_get_pmac_sts = dwmac5_fpe_get_pmac_sts,
+	.fpe_set_afsz = dwmac5_fpe_set_afsz,
+	.fpe_set_hadv = dwmac5_fpe_set_hadv,
+	.fpe_set_radv = dwmac5_fpe_set_radv,
 	.tbs_get_max = dwmac5_tbs_get_max,
 	.tbs_set_estm = dwmac5_tbs_set_estm,
 	.tbs_set_leos = dwmac5_tbs_set_leos,
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 68c9c58da425..593a657bd18b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -724,11 +724,15 @@ struct tsnif_ops {
 			      struct tsn_mmc_stat *mmc_stat,
 			      unsigned int txqcnt);
 	/* Frame Preemption (FPE) */
-	void (*fpe_get_info)(u32 *pmac_bit);
+	void (*fpe_get_info)(u32 *pmac_bit, u32 *afsz_max,
+			     u32 *hadv_max, u32 *radv_max);
 	void (*fpe_set_txqpec)(void *ioaddr, u32 txqpec, u32 txqmask);
 	void (*fpe_set_enable)(void *ioaddr, bool enable);
 	void (*fpe_get_config)(void *ioaddr, u32 *txqpec, bool *enable);
 	void (*fpe_get_pmac_sts)(void *ioaddr, u32 *hrs);
+	void (*fpe_set_afsz)(void *ioaddr, const u32 afsz);
+	void (*fpe_set_hadv)(void *ioaddr, const u32 hadv);
+	void (*fpe_set_radv)(void *ioaddr, const u32 radv);
 	/* Time-Based Scheduling (TBS) */
 	void (*tbs_get_max)(u32 *leos_max, u32 *legos_max,
 			    u32 *ftos_max, u32 *fgos_max);
@@ -791,6 +795,12 @@ struct tsnif_ops {
 	tsnif_do_void_callback(__hw, fpe_get_config, __args)
 #define tsnif_fpe_get_pmac_sts(__hw, __args...) \
 	tsnif_do_void_callback(__hw, fpe_get_pmac_sts, __args)
+#define tsnif_fpe_set_afsz(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_set_afsz, __args)
+#define tsnif_fpe_set_hadv(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_set_hadv, __args)
+#define tsnif_fpe_set_radv(__hw, __args...) \
+	tsnif_do_void_callback(__hw, fpe_set_radv, __args)
 #define tsnif_tbs_get_max(__hw, __args...) \
 	tsnif_do_void_callback(__hw, tbs_get_max, __args)
 #define tsnif_tbs_set_estm(__hw, __args...) \
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index 9e5f881d6213..af5865eb9d2e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -165,6 +165,9 @@ static int intel_mgbe_common_data(struct pci_dev *pdev,
 	plat->tsn_tbs_en = 1;
 	/* FPE HW Tunable */
 	plat->fprq = 1;
+	plat->afsz = 0;  /* Adjustable Fragment Size */
+	plat->hadv = 0;  /* Hold Advance */
+	plat->radv = 0;  /* Release Advance*/
 	/* TBS HW Tunable */
 	plat->estm = 0;  /* Absolute Mode */
 	plat->leos = 0;  /* Launch Expiry Offset */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index 799face82466..6a82ac5f00b8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -152,11 +152,15 @@ int tsn_init(struct mac_device_info *hw, struct net_device *dev)
 		goto check_tbs;
 	}
 
-	tsnif_fpe_get_info(hw, &cap->pmac_bit);
+	tsnif_fpe_get_info(hw, &cap->pmac_bit, &cap->afsz_max,
+			   &cap->hadv_max, &cap->radv_max);
 	cap->rxqcnt = tsnif_est_get_rxqcnt(hw, ioaddr);
 	cap->fpe_support = 1;
 
-	dev_info(pdev, "FPE: pMAC Bit=0x%x\n", cap->pmac_bit);
+	dev_info(pdev, "FPE: pMAC Bit=0x%x\n afsz_max=%d", cap->pmac_bit,
+		 cap->afsz_max);
+	dev_info(pdev, "FPE: hadv_max=%d radv_max=%d", cap->hadv_max,
+		 cap->radv_max);
 
 check_tbs:
 	if (!tsnif_has_tsn_cap(hw, ioaddr, TSN_FEAT_ID_TBS)) {
@@ -254,6 +258,14 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 			return -ENOTSUPP;
 		}
 		break;
+	case TSN_HWTUNA_TX_FPE_AFSZ:
+	case TSN_HWTUNA_TX_FPE_HADV:
+	case TSN_HWTUNA_TX_FPE_RADV:
+		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+			netdev_info(dev, "FPE: feature unsupported\n");
+			return -ENOTSUPP;
+		}
+		break;
 	case TSN_HWTUNA_TX_TBS_ESTM:
 	case TSN_HWTUNA_TX_TBS_LEOS:
 	case TSN_HWTUNA_TX_TBS_LEGOS:
@@ -311,6 +323,48 @@ int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 			netdev_info(dev, "EST: Set CTOV = %u\n", data);
 		}
 		break;
+	case TSN_HWTUNA_TX_FPE_AFSZ:
+		if (data > cap->afsz_max) {
+			netdev_warn(dev,
+				    "EST: invalid AFSZ(%u), max=%u\n",
+				    data, cap->afsz_max);
+
+			return -EINVAL;
+		}
+		if (data != info->hwtunable[TSN_HWTUNA_TX_FPE_AFSZ]) {
+			tsnif_fpe_set_afsz(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_FPE_AFSZ] = data;
+			netdev_info(dev, "FPE: Set AFSZ = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_FPE_HADV:
+		if (data > cap->hadv_max) {
+			netdev_warn(dev,
+				    "EST: invalid HADV(%u), max=%u\n",
+				    data, cap->hadv_max);
+
+			return -EINVAL;
+		}
+		if (data != info->hwtunable[TSN_HWTUNA_TX_FPE_HADV]) {
+			tsnif_fpe_set_hadv(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_FPE_HADV] = data;
+			netdev_info(dev, "FPE: Set HADV = %u\n", data);
+		}
+		break;
+	case TSN_HWTUNA_TX_FPE_RADV:
+		if (data > cap->radv_max) {
+			netdev_warn(dev,
+				    "EST: invalid RADV(%u), max=%u\n",
+				    data, cap->radv_max);
+
+			return -EINVAL;
+		}
+		if (data != info->hwtunable[TSN_HWTUNA_TX_FPE_RADV]) {
+			tsnif_fpe_set_radv(hw, ioaddr, data);
+			info->hwtunable[TSN_HWTUNA_TX_FPE_RADV] = data;
+			netdev_info(dev, "FPE: Set RADV = %u\n", data);
+		}
+		break;
 	case TSN_HWTUNA_TX_TBS_ESTM:
 		if (!data && data != 1) {
 			netdev_warn(dev,
@@ -467,6 +521,14 @@ int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
 			return -ENOTSUPP;
 		}
 		break;
+	case TSN_HWTUNA_TX_FPE_AFSZ:
+	case TSN_HWTUNA_TX_FPE_HADV:
+	case TSN_HWTUNA_TX_FPE_RADV:
+		if (!tsn_has_feat(hw, dev, TSN_FEAT_ID_FPE)) {
+			netdev_info(dev, "FPE: feature unsupported\n");
+			return -ENOTSUPP;
+		}
+		break;
 	case TSN_HWTUNA_TX_TBS_ESTM:
 	case TSN_HWTUNA_TX_TBS_LEOS:
 	case TSN_HWTUNA_TX_TBS_LEGOS:
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index 5651633e20ed..ac4cfe6c7569 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -16,6 +16,9 @@ enum tsn_hwtunable_id {
 	TSN_HWTUNA_TX_EST_TILS = 0,
 	TSN_HWTUNA_TX_EST_PTOV,
 	TSN_HWTUNA_TX_EST_CTOV,
+	TSN_HWTUNA_TX_FPE_AFSZ,
+	TSN_HWTUNA_TX_FPE_HADV,
+	TSN_HWTUNA_TX_FPE_RADV,
 	TSN_HWTUNA_TX_TBS_ESTM,	 /* TBS Absolute or EST mode */
 	TSN_HWTUNA_TX_TBS_LEOS,
 	TSN_HWTUNA_TX_TBS_LEGOS,
@@ -64,6 +67,9 @@ struct tsn_hw_cap {
 	u32 idleslope_max;	/* Max idle slope */
 	/* FPE */
 	u32 pmac_bit;		/* Preemptible MAC bit */
+	u32 afsz_max;		/* Adj Frag Size */
+	u32 hadv_max;		/* Max Hold Advance */
+	u32 radv_max;		/* Max Release Advance */
 	u32 leos_max;		/* Launch Expiry Offset */
 	u32 legos_max;		/* Launch Expiry GSN Offset */
 	u32 ftos_max;		/* Max Fetch Time Offset */
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 24dc56ade269..2b7edcac384d 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -206,6 +206,9 @@ struct plat_stmmacenet_data {
 	u32 tils;
 	/*FPE */
 	u32 fprq;
+	u32 afsz;
+	u32 hadv;
+	u32 radv;
 	/* TBS */
 	u32 estm;
 	u32 leos;
-- 
2.17.1

