From 9e23b468ed316f051a4db20ee619303f4e60723b Mon Sep 17 00:00:00 2001
From: "Bandi,Kushal" <kushal.bandi@intel.com>
Date: Fri, 1 Jun 2018 11:41:40 -0700
Subject: [PATCH 2044/2345] media: intel-ipu4: [VIRT] Virtio implementation of
 PUT_BUF & modify get buf list

Enabling UOS to SOS calls for put_buffer Creating local get buf list for UOS
Added support for get buf operation to native and virtio bbackend driver
Fixed stream poll issue and removed buf_stream_cancel

Change-Id: I9cc10e6ae2c45114e9cfc7d6a6d00020ec21c0a3
Signed-off-by: Yu, Ong Hock <ong.hock.yu@intel.com>
Signed-off-by: Bandi, Kushal <kushal.bandi@intel.com>
---
 drivers/media/pci/intel/ici/ici-isys-frame-buf.c   | 138 +++++++++++++++++
 drivers/media/pci/intel/ici/ici-isys-frame-buf.h   |   6 +
 .../media/pci/intel/ici/ici-isys-stream-device.h   |   2 +
 drivers/media/pci/intel/ici/ici-isys-stream.c      |  23 +++
 .../pci/intel/virtio/intel-ipu4-para-virt-drv.c    | 163 +++++++--------------
 .../pci/intel/virtio/intel-ipu4-virtio-be-bridge.c |  64 ++------
 .../pci/intel/virtio/intel-ipu4-virtio-be-stream.c | 124 +++++++++++++++-
 .../pci/intel/virtio/intel-ipu4-virtio-be-stream.h |   2 +
 .../intel/virtio/intel-ipu4-virtio-fe-payload.c    |   5 +-
 .../intel/virtio/intel-ipu4-virtio-fe-pipeline.c   |   2 +-
 10 files changed, 362 insertions(+), 167 deletions(-)

diff --git a/drivers/media/pci/intel/ici/ici-isys-frame-buf.c b/drivers/media/pci/intel/ici/ici-isys-frame-buf.c
index 3e83707..de8eb9c 100644
--- a/drivers/media/pci/intel/ici/ici-isys-frame-buf.c
+++ b/drivers/media/pci/intel/ici/ici-isys-frame-buf.c
@@ -308,6 +308,78 @@ static int ici_get_userpages(struct device *dev,
 	goto error_free_page_list;
 }
 
+static int ici_get_userpages_virt(struct device *dev,
+					 struct ici_frame_plane
+					 *frame_plane,
+					 struct ici_kframe_plane
+					 *kframe_plane,
+					 struct page **pages)
+{
+	unsigned long addr;
+	int npages;
+	int ret = 0;
+	struct sg_table *sgt;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+    DEFINE_DMA_ATTRS(attrs);
+#else
+    unsigned long attrs;
+#endif
+
+	addr = (unsigned long)frame_plane->mem.userptr;
+	npages = kframe_plane->npages;
+
+	if (!npages)
+		return -EINVAL;
+
+	sgt = kzalloc(sizeof(*sgt), GFP_KERNEL);
+	if (!sgt)
+		return -ENOMEM;
+
+    ret = sg_alloc_table_from_pages(sgt, pages, npages,
+					addr & ~PAGE_MASK, frame_plane->length,
+					GFP_KERNEL);
+	if (ret) {
+		dev_err(dev, "Failed to init sgt\n");
+		goto error_free_pages;
+	}
+
+
+	kframe_plane->dev = dev;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+    dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
+	sgt->nents = dma_map_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
+					DMA_FROM_DEVICE, &attrs);
+#else
+    attrs = DMA_ATTR_SKIP_CPU_SYNC;
+    sgt->nents = dma_map_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
+				DMA_FROM_DEVICE, attrs);
+#endif
+
+	if (sgt->nents <= 0) {
+		dev_err(dev, "Failed to init dma_map\n");
+		ret = -EIO;
+		goto error_dma_map;
+	}
+	kframe_plane->dma_addr = sg_dma_address(sgt->sgl);
+	kframe_plane->sgt = sgt;
+
+error_free_page_list:
+	return ret;
+
+error_dma_map:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
+    dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
+			DMA_FROM_DEVICE, &attrs);
+#else
+    dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
+			DMA_FROM_DEVICE, attrs);
+#endif
+
+error_free_pages:
+	kfree(sgt);
+	goto error_free_page_list;
+}
+
 int ici_isys_get_buf(struct ici_isys_stream *as,
 				struct ici_frame_info *frame_info)
 {
@@ -394,6 +466,72 @@ int ici_isys_get_buf(struct ici_isys_stream *as,
 	return res;
 }
 
+int ici_isys_get_buf_virt(struct ici_isys_stream *as,
+				struct ici_frame_buf_wrapper *frame_buf,
+				struct page **pages)
+{
+	int res;
+	unsigned i;
+	struct ici_frame_buf_wrapper *buf;
+
+	struct ici_kframe_plane *kframe_plane;
+	struct ici_isys_frame_buf_list *buf_list = &as->buf_list;
+	int mem_type = frame_buf->frame_info.mem_type;
+
+	if (mem_type != ICI_MEM_USERPTR &&
+		mem_type != ICI_MEM_DMABUF) {
+		dev_err(&as->isys->adev->dev, "Memory type not supproted\n");
+		return -EINVAL;
+	}
+
+	if (!frame_buf->frame_info.frame_planes[0].length) {
+		dev_err(&as->isys->adev->dev, "User length not set\n");
+		return -EINVAL;
+	}
+	buf = ici_frame_buf_lookup(buf_list, &frame_buf->frame_info);
+
+	if (buf) {
+		buf->state = ICI_BUF_PREPARED;
+		return 0;
+	}
+
+
+	buf = frame_buf;
+
+	buf->buf_list = buf_list;
+
+	switch (mem_type) {
+	case ICI_MEM_USERPTR:
+		if (!frame_buf->frame_info.frame_planes[0].mem.userptr) {
+			dev_err(&as->isys->adev->dev,
+				"User pointer not define\n");
+			return -EINVAL;
+		}
+		for (i = 0; i < frame_buf->frame_info.num_planes; i++) {
+			kframe_plane = &buf->kframe_info.planes[i];
+			kframe_plane->mem_type =
+			ICI_MEM_USERPTR;
+			res =
+				ici_get_userpages_virt(
+					&as->isys->adev->dev,
+						&frame_buf->frame_info.frame_planes[i],
+						kframe_plane,
+						pages);
+			if (res)
+				return res;
+		}
+		break;
+	case ICI_MEM_DMABUF:
+		break;
+	}
+
+	mutex_lock(&buf_list->mutex);
+	buf->state = ICI_BUF_PREPARED;
+	list_add_tail(&buf->node, &buf_list->getbuf_list);
+	mutex_unlock(&buf_list->mutex);
+	return 0;
+}
+
 int ici_isys_put_buf(struct ici_isys_stream *as,
 				struct ici_frame_info *frame_info,
 				unsigned int f_flags)
diff --git a/drivers/media/pci/intel/ici/ici-isys-frame-buf.h b/drivers/media/pci/intel/ici/ici-isys-frame-buf.h
index bd05172..771967c 100644
--- a/drivers/media/pci/intel/ici/ici-isys-frame-buf.h
+++ b/drivers/media/pci/intel/ici/ici-isys-frame-buf.h
@@ -57,6 +57,8 @@ struct ici_frame_buf_wrapper {
 	struct ici_frame_info frame_info;
 	struct list_head node;
 	struct ici_isys_frame_buf_list *buf_list;
+	struct list_head uos_node;
+	struct ici_isys_frame_buf_list *uos_buf_list;
 	uint32_t buf_id;
 	frame_buf_state state;
 };
@@ -96,6 +98,10 @@ int ici_isys_get_buf(struct ici_isys_stream *as,
 				 struct ici_frame_info
 				 *user_frame_info);
 
+int ici_isys_get_buf_virt(struct ici_isys_stream *as,
+				struct ici_frame_buf_wrapper *frame_buf,
+				struct page **pages);
+
 int ici_isys_put_buf(struct ici_isys_stream *as,
 				 struct ici_frame_info
 				 *user_frame_info, unsigned int f_flags);
diff --git a/drivers/media/pci/intel/ici/ici-isys-stream-device.h b/drivers/media/pci/intel/ici/ici-isys-stream-device.h
index 2b44fa4..5aec894 100644
--- a/drivers/media/pci/intel/ici/ici-isys-stream-device.h
+++ b/drivers/media/pci/intel/ici/ici-isys-stream-device.h
@@ -42,6 +42,8 @@ struct ici_ioctl_ops {
 	int (*ici_stream_off) (struct file *file, void *fh);
 	int (*ici_get_buf) (struct file *file, void *fh,
 		struct ici_frame_info *fram);
+	int (*ici_get_buf_virt) (struct file *file, void *fh,
+		struct ici_frame_buf_wrapper *fram, struct page **pages);
 	int (*ici_put_buf) (struct file *file, void *fh,
 		struct ici_frame_info *fram);
 };
diff --git a/drivers/media/pci/intel/ici/ici-isys-stream.c b/drivers/media/pci/intel/ici/ici-isys-stream.c
index c2af34d8..1d45a76 100644
--- a/drivers/media/pci/intel/ici/ici-isys-stream.c
+++ b/drivers/media/pci/intel/ici/ici-isys-stream.c
@@ -1343,6 +1343,28 @@ static int ici_isys_getbuf(struct file *file, void *fh,
 	return 0;
 }
 
+static int ici_isys_getbuf_virt(struct file *file, void *fh,
+	struct ici_frame_buf_wrapper *user_frame_buf, struct page **pages)
+{
+	int rval = 0;
+	struct ici_isys_stream *as = dev_to_stream(
+		file->private_data);
+	struct ici_isys *isys = as->isys;
+
+	rval = ici_isys_get_buf_virt(as, user_frame_buf, pages);
+	if (rval) {
+		dev_err(&isys->adev->dev, "failed to get buffer %d\n", rval);
+		return rval;
+	}
+
+	mutex_lock(&as->isys->stream_mutex);
+	if (as->ip.streaming) {
+		stream_buffers(as);
+	}
+	mutex_unlock(&as->isys->stream_mutex);
+	return 0;
+}
+
 static int ici_isys_putbuf(struct file *file, void *fh,
 	struct ici_frame_info *user_frame_info)
 {
@@ -1378,6 +1400,7 @@ static const struct ici_ioctl_ops ioctl_ops_mplane_ici = {
 	.ici_stream_on = ici_isys_stream_on,
 	.ici_stream_off = ici_isys_stream_off,
 	.ici_get_buf = ici_isys_getbuf,
+	.ici_get_buf_virt = ici_isys_getbuf_virt,
 	.ici_put_buf = ici_isys_putbuf,
 };
 
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
index b01a9e8..0b0cf86 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-para-virt-drv.c
@@ -48,13 +48,6 @@ static int get_userpages(struct device *dev,
 	unsigned int i;
 	u64 page_table_ref;
 	u64 *page_table;
-#if 0
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-    DEFINE_DMA_ATTRS(attrs);
-#else
-    unsigned long attrs;
-#endif
-#endif
 	addr = (unsigned long)frame_plane->mem.userptr;
 	start = addr & PAGE_MASK;
 	end = PAGE_ALIGN(addr + frame_plane->length);
@@ -97,61 +90,13 @@ static int get_userpages(struct device *dev,
 	for (i = 0; i < npages; i++)
 		page_table[i] = page_to_phys(pages[i]);
 
-	printk("UOS phy page add %lld\n", page_table[0]);
+	printk("UOS phy page add %lld offset:%ld\n", page_table[0], addr & ~PAGE_MASK);
 	page_table_ref = virt_to_phys(page_table);
 	kframe_plane->page_table_ref = page_table_ref;
 	kframe_plane->npages = npages;
 	up_read(&current->mm->mmap_sem);
 	return ret;
-#if 0
-printk("%s:%d\n", __func__, __LINE__);
-    ret = sg_alloc_table_from_pages(sgt, pages, npages,
-					addr & ~PAGE_MASK, frame_plane->length,
-					GFP_KERNEL);
-	if (ret) {
-		printk(KERN_ERR "Failed to init sgt\n");
-		goto error_free_pages;
-	}
-	printk("%s:%d\n", __func__, __LINE__);
-	kframe_plane->dev = dev;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
-	sgt->nents = dma_map_sg_attrs(dev, sgt->sgl,
-				sgt->orig_nents, DMA_FROM_DEVICE, &attrs);
-#else
-	attrs = DMA_ATTR_SKIP_CPU_SYNC;
-	sgt->nents = dma_map_sg_attrs(dev, sgt->sgl,
-				sgt->orig_nents, DMA_FROM_DEVICE, attrs);
-#endif
-	printk("%s:%d\n", __func__, __LINE__);
-	if (sgt->nents <= 0) {
-		printk(KERN_ERR "Failed to init dma_map\n");
-		ret = -EIO;
-		goto error_dma_map;
-	}
-	kframe_plane->dma_addr = sg_dma_address(sgt->sgl);
-	kframe_plane->sgt = sgt;
-	printk("%s:%d\n", __func__, __LINE__);
-error_free_page_list:
-	printk("%s:%d\n", __func__, __LINE__);
-	if (pages) {
-		if (array_size <= PAGE_SIZE)
-			kfree(pages);
-		else
-			vfree(pages);
-	}
-	up_read(&current->mm->mmap_sem);
-	return ret;
 
-error_dma_map:
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-    dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
-			DMA_FROM_DEVICE, &attrs);
-#else
-    dma_unmap_sg_attrs(dev, sgt->sgl, sgt->orig_nents,
-			DMA_FROM_DEVICE, attrs);
-#endif
-#endif
 error_free_pages:
 	if (pages) {
 		for (i = 0; i < nr; i++)
@@ -159,7 +104,6 @@ printk("%s:%d\n", __func__, __LINE__);
 	}
 	kfree(sgt);
 	return -1;
-	//goto error_free_page_list;
 }
 
 static struct ici_frame_buf_wrapper *frame_buf_lookup(struct ici_isys_frame_buf_list *buf_list, struct ici_frame_info *user_frame_info)
@@ -197,11 +141,6 @@ static void put_userpages(struct ici_kframe_plane *kframe_plane)
 	struct sg_table *sgt = kframe_plane->sgt;
 	struct scatterlist *sgl;
 	unsigned int i;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-    DEFINE_DMA_ATTRS(attrs);
-#else
-    unsigned long attrs;
-#endif
 
 	struct mm_struct *mm = current->active_mm;
 	if (!mm) {
@@ -210,17 +149,6 @@ static void put_userpages(struct ici_kframe_plane *kframe_plane)
 	}
 
 	down_read(&mm->mmap_sem);
-
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
-	dma_set_attr(DMA_ATTR_SKIP_CPU_SYNC, &attrs);
-	dma_unmap_sg_attrs(kframe_plane->dev, sgt->sgl, sgt->orig_nents,
-				DMA_FROM_DEVICE, &attrs);
-#else
-    attrs = DMA_ATTR_SKIP_CPU_SYNC;
-	dma_unmap_sg_attrs(kframe_plane->dev, sgt->sgl, sgt->orig_nents,
-				DMA_FROM_DEVICE, attrs);
-#endif
-
 	for_each_sg(sgt->sgl, sgl, sgt->orig_nents, i) {
 		struct page *page = sg_page(sgl);
 
@@ -342,12 +270,11 @@ static void unmap_buf(struct ici_frame_buf_wrapper *buf)
 		}
 	}
 }
-int get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info,
-		struct ici_frame_buf_wrapper *buf)
+struct ici_frame_buf_wrapper *get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info)
 {
 	int res;
 	unsigned i;
-	struct ici_frame_buf_wrapper *frame;
+	struct ici_frame_buf_wrapper *buf;
 
 	struct ici_kframe_plane *kframe_plane;
 	struct ici_isys_frame_buf_list *buf_list = &vstream->buf_list;
@@ -355,30 +282,33 @@ int get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info,
 
 	if (mem_type != ICI_MEM_USERPTR && mem_type != ICI_MEM_DMABUF) {
 		printk(KERN_ERR "Memory type not supproted\n");
-		return -EINVAL;
+		return NULL;
 	}
 
 	if (!frame_info->frame_planes[0].length) {
 		printk(KERN_ERR "User length not set\n");
-		return -EINVAL;
+		return NULL;
 	}
 
-	frame = frame_buf_lookup(buf_list, frame_info);
-	if (frame) {
+	buf = frame_buf_lookup(buf_list, frame_info);
+	if (buf) {
 		printk(KERN_INFO "Frame buffer found in the list\n");
-		frame->state = ICI_BUF_PREPARED;
-		return 0;
+		buf->state = ICI_BUF_PREPARED;
+		return buf;
 	}
+	buf = kzalloc(sizeof(*buf), GFP_KERNEL);
+	if (!buf)
+		return NULL;
 
 	buf->buf_id = frame_info->frame_buf_id;
-	buf->buf_list = buf_list;
+	buf->uos_buf_list = buf_list;
 	memcpy(&buf->frame_info, frame_info, sizeof(buf->frame_info));
 
 	switch (mem_type) {
 	case ICI_MEM_USERPTR:
 		if (!frame_info->frame_planes[0].mem.userptr) {
 			printk(KERN_ERR "User pointer not define\n");
-			return -EINVAL;
+			return NULL;
 		}
 		for (i = 0; i < frame_info->num_planes; i++) {
 			kframe_plane = &buf->kframe_info.planes[i];
@@ -387,7 +317,7 @@ int get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info,
 								kframe_plane);
 			printk("%s:%d\n", __func__, __LINE__);
 			if (res)
-				return res;
+				return NULL;
 			printk("%s:%d\n", __func__, __LINE__);
 		}
 		break;
@@ -398,7 +328,7 @@ int get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info,
 			res = map_dma(&vstream->strm_dev.dev, &frame_info->frame_planes[i],
 						  kframe_plane);
 			if (res)
-				return res;
+				return NULL;
 		}
 
 		break;
@@ -406,13 +336,12 @@ int get_buf(struct virtual_stream *vstream, struct ici_frame_info *frame_info,
 	printk("%s:%d\n", __func__, __LINE__);
 	mutex_lock(&buf_list->mutex);
 	buf->state = ICI_BUF_PREPARED;
-	list_add_tail(&buf->node, &buf_list->getbuf_list);
+	list_add_tail(&buf->uos_node, &buf_list->getbuf_list);
 	mutex_unlock(&buf_list->mutex);
 	printk("%s:%d\n", __func__, __LINE__);
-	//shared_buf = buf;
-	return 0;
+	return buf;
 }
-
+#if 0
 int put_buf(struct virtual_stream *vstream,
 				struct ici_frame_info *frame_info,
 				unsigned int f_flags)
@@ -453,7 +382,7 @@ int put_buf(struct virtual_stream *vstream,
 
 	return 0;
 }
-
+#endif
 //Call from Stream-OFF and if Stream-ON fails
 void buf_stream_cancel(struct virtual_stream *vstream)
 {
@@ -469,10 +398,6 @@ void buf_stream_cancel(struct virtual_stream *vstream)
 		list_del(&buf->node);
 		unmap_buf(buf);
 	}
-	list_for_each_entry_safe(buf, next_buf, &buf_list->interlacebuf_list, node) {
-		list_del(&buf->node);
-		unmap_buf(buf);
-	}
 }
 
 static int virt_isys_set_format(struct file *file, void *fh,
@@ -491,7 +416,7 @@ static int virt_isys_set_format(struct file *file, void *fh,
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req)
 		return -ENOMEM;
-	op[0] = 0;
+	op[0] = vstream->virt_dev_id;
 	op[1] = 0;
 
 	req->payload = virt_to_phys(sf);
@@ -566,9 +491,7 @@ static int virt_isys_stream_off(struct file *file, void *fh)
 	}
 	kfree(req);
 
-	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
-	if (!req && !fe_ctx)
-		return -ENOMEM;
+//	buf_stream_cancel(vstream);
 
 	return rval;
 }
@@ -584,16 +507,11 @@ static int virt_isys_getbuf(struct file *file, void *fh,
 	int rval = 0;
 	int op[3];
 
-	buf = kzalloc(sizeof(*buf), GFP_KERNEL);
-	if (!buf)
-		return -ENOMEM;
-
-	rval = get_buf(vstream, user_frame_info, buf);
-	if (rval) {
+	buf = get_buf(vstream, user_frame_info);
+	if (!buf) {
 		printk(KERN_ERR "Failed to map buffer: %d\n", rval);
 		return -ENOMEM;
 	}
-	printk(KERN_INFO "Buffer_id:%d mapped\n", buf->buf_id);
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req)
@@ -625,6 +543,31 @@ static int virt_isys_putbuf(struct file *file, void *fh,
 	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
 	struct ipu4_virtio_req *req;
 	int rval = 0;
+	int op[2];
+
+	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
+	if (!req)
+		return -ENOMEM;
+
+	op[0] = vstream->virt_dev_id;
+	op[1] = 0;
+	req->payload = virt_to_phys(user_frame_info);
+
+	/*rval = put_buf(vstream,user_frame_info,file->f_flags);
+	if(rval){
+			printk(KERN_ERR "Failed to Get buffer: %d\n",rval);
+			return -ENOMEM;
+	}*/
+
+	intel_ipu4_virtio_create_req(req, IPU4_CMD_PUT_BUF, &op[0]);
+
+	rval = fe_ctx->bknd_ops->send_req(fe_ctx->domid, req, true);
+	if (rval) {
+		printk(KERN_ERR "Failed to Get Buffer\n");
+		kfree(req);
+		return rval;
+	}
+	kfree(req);
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req && !fe_ctx)
@@ -640,16 +583,16 @@ static unsigned int stream_fop_poll(struct file *file, struct ici_stream_device
 	struct ipu4_virtio_ctx *fe_ctx = vstream->ctx;
 	int rval = 0;
 	int op[2];
-	printk(KERN_INFO "virt stream open\n");
+	printk(KERN_INFO "stream_fop_poll %d\n", vstream->virt_dev_id);
 	get_device(&dev->dev);
 
-	file->private_data = dev;
+//	file->private_data = dev;
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req)
 		return -ENOMEM;
 
-	op[0] = dev->virt_dev_id;
+	op[0] = vstream->virt_dev_id;
 	op[1] = 0;
 
 	intel_ipu4_virtio_create_req(req, IPU4_CMD_POLL, &op[0]);
@@ -714,7 +657,7 @@ static int virt_stream_fop_release(struct inode *inode, struct file *file)
 	printk(KERN_INFO "virt stream close\n");
 	put_device(&strm_dev->dev);
 
-	file->private_data = strm_dev;
+	//file->private_data = strm_dev;
 
 	req = kcalloc(1, sizeof(*req), GFP_KERNEL);
 	if (!req)
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
index 21a5b50..8540d66616 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-bridge.c
@@ -10,7 +10,6 @@
 #include <linux/miscdevice.h>
 #include <linux/fs.h>
 #include <linux/syscalls.h>
-#include <linux/pagemap.h>
 
 #include "intel-ipu4-virtio-be-bridge.h"
 #include "./ici/ici-isys-frame-buf.h"
@@ -20,12 +19,6 @@
 int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 {
 	int ret = 0;
-	struct ici_frame_buf_wrapper *shared_buf;
-	int k, i = 0;
-	void *pageaddr;
-	u64 *page_table = NULL;
-	struct page **data_pages = NULL;
-	int *pixel_data;
 	if (!req) {
 			printk(KERN_ERR "request is NULL\n");
 			return -EINVAL;
@@ -108,54 +101,12 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op4 - Buffer ID
 			 * op5 - Length of Buffer
 			 */
-			 printk("GET_BUF: Mapping buffer\n");
-			 shared_buf = (struct ici_frame_buf_wrapper *)map_guest_phys(domid, req->payload, PAGE_SIZE);
-			 if (!shared_buf) {
-				 printk(KERN_ERR "SOS Failed to map Buffer from UserOS\n");
-				 req->stat = IPU4_REQ_ERROR;
-			 }
-			 data_pages = kcalloc(shared_buf->kframe_info.planes[0].npages, sizeof(struct page *), GFP_KERNEL);
-			 if (data_pages == NULL) {
-				 printk(KERN_ERR "SOS Failed alloc data page set\n");
-				 req->stat = IPU4_REQ_ERROR;
-			 }
-			 printk("Total number of pages:%d\n", shared_buf->kframe_info.planes[0].npages);
-
-			 page_table = (u64 *)map_guest_phys(domid, shared_buf->kframe_info.planes[0].page_table_ref, PAGE_SIZE);
-
-			 if (page_table == NULL) {
-				 printk(KERN_ERR "SOS Failed to map page table\n");
-				 req->stat = IPU4_REQ_ERROR;
-				 break;
-			 }
-
-			 else {
-				 printk("SOS first page %lld\n", page_table[0]);
-				 k = 0;
-				 for (i = 0; i < shared_buf->kframe_info.planes[0].npages; i++) {
-					 pageaddr = map_guest_phys(domid, page_table[i], PAGE_SIZE);
-					 if (pageaddr == NULL) {
-						 printk(KERN_ERR "Cannot map pages from UOS\n");
-						 req->stat = IPU4_REQ_ERROR;
-						 break;
-					 }
-
-					 data_pages[k] = virt_to_page(pageaddr);
-
-					 pixel_data = (int *)kmap(data_pages[k]);
-					 if (k == 0) {
-						printk("Pixel data after 0x%x\n", pixel_data[0]);
-							pixel_data[0] = 0xffffffff;
-						printk("Pixel data after after memset0x%x\n", pixel_data[0]);
-					 }
-					 k++;
-
-
-				 }
-			 }
-
-			 req->stat = IPU4_REQ_PROCESSED;
 
+			ret = process_get_buf(domid, req);
+			if (ret)
+				req->stat = IPU4_REQ_ERROR;
+			else
+				req->stat = IPU4_REQ_PROCESSED;
 			break;
 	case IPU4_CMD_PUT_BUF:
 			/* Set Format of a given video node
@@ -163,6 +114,11 @@ int intel_ipu4_virtio_msg_parse(int domid, struct ipu4_virtio_req *req)
 			 * op1 - Actual device fd. By default set to 0
 			 * op2 - Memory Type 1: USER_PTR 2: DMA_PTR
 			 */
+			ret = process_put_buf(domid, req);
+			if (ret)
+				req->stat = IPU4_REQ_ERROR;
+			else
+				req->stat = IPU4_REQ_PROCESSED;
 			break;
 	case IPU4_CMD_SET_FORMAT:
 			ret = process_set_format(domid, req);
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
index 6373546..8c22f16 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.c
@@ -10,6 +10,7 @@
 #include <linux/poll.h>
 
 #include <linux/hashtable.h>
+#include <linux/pagemap.h>
 #include <media/ici.h>
 #include <linux/vhm/acrn_vhm_mm.h>
 #include "./ici/ici-isys-stream-device.h"
@@ -130,7 +131,7 @@ int process_poll(int domid, struct ipu4_virtio_req *req)
 	struct ici_isys_stream *as;
 	struct ici_isys_frame_buf_list *buf_list;
 	int ret;
-	printk(KERN_INFO "process_poll: %d", hash_initialised);
+	printk(KERN_INFO "process_poll: %d %d", hash_initialised, req->op[0]);
 
 	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
 		if (sn != NULL) {
@@ -158,6 +159,127 @@ int process_poll(int domid, struct ipu4_virtio_req *req)
 	return 0;
 }
 
+int process_put_buf(int domid, struct ipu4_virtio_req *req)
+{
+	struct stream_node *sn = NULL;
+	struct ici_stream_device *strm_dev;
+	struct ici_frame_info *host_virt;
+	int err;
+
+	printk(KERN_INFO "process_put_buf: %d %d", hash_initialised, req->op[0]);
+
+	if (!hash_initialised)
+		return -1;
+
+	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
+		printk(KERN_INFO "process_put_buf: sn %d %p", req->op[0], sn);
+		if (sn != NULL) {
+			printk(KERN_INFO "process_put_buf: node %d %p", req->op[0], sn);
+			break;
+		}
+	}
+	if (sn == NULL) {
+		printk(KERN_ERR "process_put_buf: NULL sn\n");
+		return 0;
+	}
+
+	if (sn->f == NULL) {
+		printk(KERN_ERR "process_put_buf: NULL sn->f\n");
+		return 0;
+	}
+	strm_dev = sn->f->private_data;
+	host_virt = (struct ici_frame_info *)map_guest_phys(domid, req->payload, PAGE_SIZE);
+	if (host_virt == NULL) {
+		printk(KERN_ERR "process_put_buf: NULL host_virt");
+		return 0;
+	}
+	err = strm_dev->ipu_ioctl_ops->ici_put_buf(sn->f, strm_dev, host_virt);
+
+	if (err)
+		printk(KERN_ERR "process_put_buf: ici_put_buf failed\n");
+
+	return 0;
+}
+
+int process_get_buf(int domid, struct ipu4_virtio_req *req)
+{
+	struct stream_node *sn = NULL;
+	struct ici_frame_buf_wrapper *shared_buf;
+	int k, i = 0;
+	void *pageaddr;
+	u64 *page_table = NULL;
+	struct page **data_pages = NULL;
+	struct ici_stream_device *strm_dev;
+	int err;
+
+	printk(KERN_INFO "process_get_buf: %d %d", hash_initialised, req->op[0]);
+
+	if (!hash_initialised)
+		return -1;
+
+	hash_for_each_possible(STREAM_NODE_HASH, sn, node, req->op[0]) {
+		printk(KERN_INFO "process_get_buf: sn %d %p", req->op[0], sn);
+		if (sn != NULL) {
+			printk(KERN_INFO "process_get_buf: node %d %p", req->op[0], sn);
+			break;
+		}
+	}
+	if (sn == NULL) {
+		printk(KERN_ERR "process_get_buf: NULL sn\n");
+		return 0;
+	}
+
+	if (sn->f == NULL) {
+		printk(KERN_ERR "process_get_buf: NULL sn->f\n");
+		return 0;
+	}
+
+	printk("GET_BUF: Mapping buffer\n");
+	shared_buf = (struct ici_frame_buf_wrapper *)map_guest_phys(domid, req->payload, PAGE_SIZE);
+	if (!shared_buf) {
+		printk(KERN_ERR "SOS Failed to map Buffer from UserOS\n");
+		req->stat = IPU4_REQ_ERROR;
+	}
+	data_pages = kcalloc(shared_buf->kframe_info.planes[0].npages, sizeof(struct page *), GFP_KERNEL);
+	if (data_pages == NULL) {
+		printk(KERN_ERR "SOS Failed alloc data page set\n");
+		req->stat = IPU4_REQ_ERROR;
+	}
+	printk("Total number of pages:%d\n", shared_buf->kframe_info.planes[0].npages);
+
+	page_table = (u64 *)map_guest_phys(domid, shared_buf->kframe_info.planes[0].page_table_ref, PAGE_SIZE);
+
+	if (page_table == NULL) {
+		printk(KERN_ERR "SOS Failed to map page table\n");
+		req->stat = IPU4_REQ_ERROR;
+		return 0;
+	}
+
+	else {
+		 printk("SOS first page %lld\n", page_table[0]);
+		 k = 0;
+		 for (i = 0; i < shared_buf->kframe_info.planes[0].npages; i++) {
+			 pageaddr = map_guest_phys(domid, page_table[i], PAGE_SIZE);
+			 if (pageaddr == NULL) {
+				 printk(KERN_ERR "Cannot map pages from UOS\n");
+				 req->stat = IPU4_REQ_ERROR;
+				 break;
+			 }
+
+			 data_pages[k] = virt_to_page(pageaddr);
+			 k++;
+		 }
+	 }
+
+	strm_dev = sn->f->private_data;
+	err = strm_dev->ipu_ioctl_ops->ici_get_buf_virt(sn->f, strm_dev, shared_buf, data_pages);
+
+	if (err)
+		printk(KERN_ERR "process_get_buf: ici_get_buf_virt failed\n");
+
+	return 0;
+}
+
 int process_stream_on(int domid, struct ipu4_virtio_req *req)
 {
 	struct stream_node *sn = NULL;
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.h b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.h
index 4915ab0..0d85b35 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.h
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-be-stream.h
@@ -15,8 +15,10 @@ int process_set_format(int domid, struct ipu4_virtio_req *req);
 int process_device_open(int domid, struct ipu4_virtio_req *req);
 int process_device_close(int domid, struct ipu4_virtio_req *req);
 int process_poll(int domid, struct ipu4_virtio_req *req);
+int process_put_buf(int domid, struct ipu4_virtio_req *req);
 int process_stream_on(int domid, struct ipu4_virtio_req *req);
 int process_stream_off(int domid, struct ipu4_virtio_req *req);
+int process_get_buf(int domid, struct ipu4_virtio_req *req);
 
 
 #endif
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-payload.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-payload.c
index d878224..44edf74 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-payload.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-payload.c
@@ -28,7 +28,6 @@ void intel_ipu4_virtio_create_req(struct ipu4_virtio_req *req,
 	case IPU4_CMD_DEVICE_CLOSE:
 	case IPU4_CMD_STREAM_ON:
 	case IPU4_CMD_STREAM_OFF:
-	case IPU4_CMD_GET_BUF:
 	case IPU4_CMD_PUT_BUF:
 	case IPU4_CMD_SET_FORMAT:
 	case IPU4_CMD_ENUM_NODES:
@@ -46,6 +45,10 @@ void intel_ipu4_virtio_create_req(struct ipu4_virtio_req *req,
 		for (i = 0; i < 2; i++)
 			req->op[i] = op[i];
 		break;
+	case IPU4_CMD_GET_BUF:
+		for (i = 0; i < 3; i++)
+			req->op[i] = op[i];
+		break;
 	default:
 		return;
 	}
diff --git a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c
index 0706c18..740808d 100644
--- a/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c
+++ b/drivers/media/pci/intel/virtio/intel-ipu4-virtio-fe-pipeline.c
@@ -34,7 +34,7 @@ int process_pipeline(struct file *file,
 
 	rval = fe_priv->bknd_ops->send_req(fe_priv->domid, req, true);
 	if (rval) {
-		printk(KERN_ERR "Failed to send request to BE\n");
+		pr_err("Failed to send request to BE\n");
 		kfree(req);
 		return rval;
 	}
-- 
2.7.4

