From a8fdb6cb35cae0f72c3746b3fecb43025fa13820 Mon Sep 17 00:00:00 2001
From: Weifeng Voon <weifeng.voon@intel.com>
Date: Tue, 10 Jul 2018 09:00:02 +0800
Subject: [PATCH 31/58] REVERTME: net: stmmac: ethtool supports reporting gcl
 errors

This patch is kept here for IP validation purpose. It will be dropped
once Linux mainline traffic-control TSN framework has matured.

Stmmac GCL errors are shown to user through ethtool get-est-info command.

Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_ethtool.c    | 15 +++++++++++++++
 include/uapi/linux/ethtool.h                        | 21 +++++++++++++++++++++
 2 files changed, 36 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
index 3cc94dd..efe39b6a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
@@ -1352,6 +1352,7 @@ static int stmmac_ethtool_get_est_info(struct net_device *dev,
 {
 	struct est_gc_config *gcc;
 	struct est_gcrr *egcrr;
+	struct tsn_err_stat *erstat;
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int bank, ret;
 
@@ -1375,6 +1376,20 @@ static int stmmac_ethtool_get_est_info(struct net_device *dev,
 	esti->extension_s = 0;
 	esti->extension_ns = egcrr->ter_nsec;
 
+	ret = stmmac_get_est_err_stat(priv, &erstat);
+	if (ret) {
+		dev_err(priv->device, "fail to get EST error status.\n");
+
+		return ret;
+	}
+
+	esti->cgce_n = erstat->cgce_n;
+	esti->hlbs_q = erstat->hlbs_q;
+	esti->btre_n = erstat->btre_n;
+	esti->btre_max_n = esti->btre_max_n;
+	esti->btrl = esti->btrl;
+	memcpy(esti->hlbf_sz, erstat->hlbf_sz, sizeof(esti->hlbf_sz));
+
 	return 0;
 }
 
diff --git a/include/uapi/linux/ethtool.h b/include/uapi/linux/ethtool.h
index 16d0d53..8d441e3 100644
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@ -1401,6 +1401,21 @@ struct ethtool_lgcl {
  * @extension_ns: Denominator of cycle time extension in nano-seconds.
  * @base_s: Numerator of base time in seconds.
  * @base_ns: Denominator of base time in nano-seconds.
+ * @cgce_n: Number of time where constant gate control error is triggered.
+ * @hlbs_q: Queue number that experience the head-of-line blocking due to
+ *          scheduling. Example: hlbs_q = 0x5 (0000_0101b) means queue 0
+ *          and queue 2 is having hlbs error.
+ * @hlbf_sz: Frame size that causes the head-of-line blocking for each
+ *           queue.
+ * @btre_n: Count for condition when (base time) < (current time) and
+ *          manage to update to new base time within 8 iteration of
+ *          cycle time.
+ * @btre_max_n: Count for condition when (base time) < (current time)
+ *              and did not manage to update to new base time within 8
+ *              iteration of cycle time.
+ * @btrl: Minimum count (N) for which the equation
+ *        Current Time =< New BTR + (N * New Cycle Time)
+ *        becomes true.
  */
 struct ethtool_est_info {
 	__u32	cmd;
@@ -1411,6 +1426,12 @@ struct ethtool_est_info {
 	__u32	extension_ns;
 	__u32	base_s;
 	__u32	base_ns;
+	__u32	cgce_n;
+	__u32	hlbs_q;
+	__u32	hlbf_sz[8];
+	__u32	btre_n;
+	__u32	btre_max_n;
+	__u32	btrl;
 };
 
 /* CMDs currently supported */
-- 
2.7.4

