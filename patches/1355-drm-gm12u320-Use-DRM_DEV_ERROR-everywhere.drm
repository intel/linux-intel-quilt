From f594aabe2bc5a874672fd2df14b9fc7212aef064 Mon Sep 17 00:00:00 2001
From: Hans de Goede <hdegoede@redhat.com>
Date: Tue, 30 Jul 2019 15:38:57 +0200
Subject: [PATCH 1355/1606] drm: gm12u320: Use DRM_DEV_ERROR everywhere

Previously the driver was using a mix of DRM_ERROR and dev_err, be
consisent and use DRM_DEV_ERROR everywhere instead.

Cc: Sam Ravnborg <sam@ravnborg.org>
Suggested-by: Sam Ravnborg <sam@ravnborg.org>
Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
Signed-off-by: Hans de Goede <hdegoede@redhat.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190730133857.30778-2-hdegoede@redhat.com
---
 drivers/gpu/drm/tiny/gm12u320.c | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/drivers/gpu/drm/tiny/gm12u320.c b/drivers/gpu/drm/tiny/gm12u320.c
index eba064623acf..1fd6db52af92 100644
--- a/drivers/gpu/drm/tiny/gm12u320.c
+++ b/drivers/gpu/drm/tiny/gm12u320.c
@@ -44,6 +44,9 @@ MODULE_PARM_DESC(eco_mode, "Turn on Eco mode (less bright, more silent)");
 
 #define GM12U320_BLOCK_COUNT		20
 
+#define GM12U320_ERR(fmt, ...) \
+	DRM_DEV_ERROR(&gm12u320->udev->dev, fmt, ##__VA_ARGS__)
+
 #define MISC_RCV_EPT			1
 #define DATA_RCV_EPT			2
 #define DATA_SND_EPT			3
@@ -219,7 +222,7 @@ static int gm12u320_misc_request(struct gm12u320_device *gm12u320,
 			   usb_sndbulkpipe(gm12u320->udev, MISC_SND_EPT),
 			   gm12u320->cmd_buf, CMD_SIZE, &len, CMD_TIMEOUT);
 	if (ret || len != CMD_SIZE) {
-		dev_err(&gm12u320->udev->dev, "Misc. req. error %d\n", ret);
+		GM12U320_ERR("Misc. req. error %d\n", ret);
 		return -EIO;
 	}
 
@@ -229,7 +232,7 @@ static int gm12u320_misc_request(struct gm12u320_device *gm12u320,
 			   gm12u320->cmd_buf, MISC_VALUE_SIZE, &len,
 			   DATA_TIMEOUT);
 	if (ret || len != MISC_VALUE_SIZE) {
-		dev_err(&gm12u320->udev->dev, "Misc. value error %d\n", ret);
+		GM12U320_ERR("Misc. value error %d\n", ret);
 		return -EIO;
 	}
 	/* cmd_buf[0] now contains the read value, which we don't use */
@@ -240,7 +243,7 @@ static int gm12u320_misc_request(struct gm12u320_device *gm12u320,
 			   gm12u320->cmd_buf, READ_STATUS_SIZE, &len,
 			   CMD_TIMEOUT);
 	if (ret || len != READ_STATUS_SIZE) {
-		dev_err(&gm12u320->udev->dev, "Misc. status error %d\n", ret);
+		GM12U320_ERR("Misc. status error %d\n", ret);
 		return -EIO;
 	}
 
@@ -277,7 +280,7 @@ static void gm12u320_copy_fb_to_blocks(struct gm12u320_device *gm12u320)
 
 	vaddr = drm_gem_shmem_vmap(fb->obj[0]);
 	if (IS_ERR(vaddr)) {
-		DRM_ERROR("failed to vmap fb: %ld\n", PTR_ERR(vaddr));
+		GM12U320_ERR("failed to vmap fb: %ld\n", PTR_ERR(vaddr));
 		goto put_fb;
 	}
 
@@ -285,7 +288,7 @@ static void gm12u320_copy_fb_to_blocks(struct gm12u320_device *gm12u320)
 		ret = dma_buf_begin_cpu_access(
 			fb->obj[0]->import_attach->dmabuf, DMA_FROM_DEVICE);
 		if (ret) {
-			DRM_ERROR("dma_buf_begin_cpu_access err: %d\n", ret);
+			GM12U320_ERR("dma_buf_begin_cpu_access err: %d\n", ret);
 			goto vunmap;
 		}
 	}
@@ -328,7 +331,7 @@ static void gm12u320_copy_fb_to_blocks(struct gm12u320_device *gm12u320)
 		ret = dma_buf_end_cpu_access(fb->obj[0]->import_attach->dmabuf,
 					     DMA_FROM_DEVICE);
 		if (ret)
-			DRM_ERROR("dma_buf_end_cpu_access err: %d\n", ret);
+			GM12U320_ERR("dma_buf_end_cpu_access err: %d\n", ret);
 	}
 vunmap:
 	drm_gem_shmem_vunmap(fb->obj[0], vaddr);
@@ -430,7 +433,7 @@ static void gm12u320_fb_update_work(struct work_struct *work)
 err:
 	/* Do not log errors caused by module unload or device unplug */
 	if (ret != -ECONNRESET && ret != -ESHUTDOWN)
-		dev_err(&gm12u320->udev->dev, "Frame update error: %d\n", ret);
+		GM12U320_ERR("Frame update error: %d\n", ret);
 }
 
 static void gm12u320_fb_mark_dirty(struct drm_framebuffer *fb,
-- 
2.17.1

