From 2632c9aab20d2f595e8fa54705fd1c278c285396 Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Mon, 5 Aug 2019 22:43:09 +0800
Subject: [PATCH 042/104] net: stmmac: gcl errors reporting and its interrupt
 handling

Enabled interrupt for Constant Gate Control Error (CGCE), Head-of-Line
Blocking due to scheduling error (HLBS) and Head-of-Line Blocking due to
frame size error (HLBF).

CGCE should not happen as the driver has already implemented a check
before applying the settings. CGCE handling is added as a safety
check so that we can catch it if there is such error being fired. For
HLBS, the user will get the info of all the queues that shows this
error. For HLBF, the user will get the info of all the queue with the
latest frame size which causes the error. Frame size 0 indicates no
error.

The ISR handling takes place when EST feature is enabled by user.

This patch is also co-authored by Ong Boon Leong for the hook into
stmmac_ethtool.c to support EST error statistic showing.

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |   3 +
 drivers/net/ethernet/stmicro/stmmac/dwmac5.h  |  21 +++
 .../net/ethernet/stmicro/stmmac/dwmac5_tsn.c  | 138 ++++++++++++++++++
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  22 +++
 .../ethernet/stmicro/stmmac/stmmac_ethtool.c  |  33 ++++-
 .../net/ethernet/stmicro/stmmac/stmmac_main.c |   5 +
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.c  |  42 ++++++
 .../net/ethernet/stmicro/stmmac/stmmac_tsn.h  |  17 +++
 8 files changed, 279 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index dfda0bef2be5..8ad770dfb237 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1104,6 +1104,7 @@ const struct stmmac_ops dwmac510_ops = {
 	.restore_hw_vlan_rx_fltr = dwmac4_restore_hw_vlan_rx_fltr,
 	.tsnif_setup = dwmac510_tsnif_setup,
 	.init_tsn = tsn_init,
+	.setup_tsn_hw = tsn_hw_setup,
 	.set_tsn_feat = tsn_feat_set,
 	.has_tsn_feat = tsn_has_feat,
 	.set_tsn_hwtunable = tsn_hwtunable_set,
@@ -1115,6 +1116,8 @@ const struct stmmac_ops dwmac510_ops = {
 	.set_est_gcl_len = tsn_est_gcl_len_set,
 	.set_est_gcrr_times = tsn_est_gcrr_times_set,
 	.get_est_gcc = tsn_est_gcc_get,
+	.est_irq_status = tsn_est_irq_status,
+	.dump_tsn_mmc = tsn_mmc_dump,
 };
 
 static u32 dwmac4_get_num_vlan(void __iomem *ioaddr)
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 40ba7f86b521..98ab4013d0d9 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -111,9 +111,30 @@
 #define MTL_EST_STATUS_BTRL_MAX		(0xF << 8)
 #define MTL_EST_STATUS_SWOL		BIT(7)	/* SW owned list */
 #define MTL_EST_STATUS_SWOL_SHIFT	7
+#define MTL_EST_STATUS_CGCE		BIT(4)	/* Constant gate ctrl err */
+#define MTL_EST_STATUS_HLBS		BIT(3)	/* HLB due to scheduling */
+#define MTL_EST_STATUS_HLBF		BIT(2)	/* HLB due to frame size */
 #define MTL_EST_STATUS_BTRE		BIT(1)	/* BTR Error */
 #define MTL_EST_STATUS_SWLC		BIT(0)	/* Switch to SWOL complete */
 
+/* MTL EST Scheduling error */
+#define MTL_EST_SCH_ERR			0x00000c60
+#define MTL_EST_FRM_SZ_ERR		0x00000c64
+#define MTL_EST_FRM_SZ_CAP		0x00000c68
+#define MTL_EST_FRM_SZ_CAP_HBFS_MASK	GENMASK(14, 0)
+#define MTL_EST_FRM_SZ_CAP_HBFQ_SHIFT	16
+#define MTL_EST_FRM_SZ_CAP_HBFQ_MASK(x)	((x) > 4 ? GENMASK(18, 16) : \
+					 (x) > 2 ? GENMASK(17, 16) : \
+					 BIT(16))
+
+/* MTL EST interrupt enable */
+#define MTL_EST_INT_EN			0x00000c70
+#define MTL_EST_INT_EN_CGCE		BIT(4)
+#define MTL_EST_INT_EN_IEHS		BIT(3)
+#define MTL_EST_INT_EN_IEHF		BIT(2)
+#define MTL_EST_INT_EN_IEBE		BIT(1)
+#define MTL_EST_INT_EN_IECC		BIT(0)
+
 /* MTL EST GCL control register */
 #define MTL_EST_GCL_CTRL		0x00000c80
 #define MTL_EST_GCL_CTRL_ADDR(dep)	GENMASK(8 + (dep) - 1, 8) /* GCL Addr */
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
index 85fc7c638d17..41e67df455c9 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5_tsn.c
@@ -8,6 +8,33 @@
 #include "hwif.h"
 #include "stmmac_tsn.h"
 
+enum tsn_mmc_idx {
+	EST_MMC_BTRE = 0,
+	EST_MMC_BTRLM = 1,
+	EST_MMC_HLBF = 2,
+	EST_MMC_HLBS = 3,
+	EST_MMC_CGCE = 4,
+};
+
+const struct tsn_mmc_desc dwmac5_tsn_mmc_desc[STMMAC_TSN_STAT_SIZE] = {
+	{ true, "BTRE" },  /* BTR Error */
+	{ true, "BTRLM" }, /* BTR Maximum Loop Count Error */
+	{ true, "HLBF" },  /* Head-of-Line Blocking due to Frame Size */
+	{ true, "HLBS" },  /* Head-of-Line Blocking due to Scheduling */
+	{ true, "CGCE" },  /* Constant Gate Control Error */
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+	{ false, "RESV" },
+};
+
 static int est_set_gcl_addr(void __iomem *ioaddr, u32 addr,
 			    bool is_gcrr, u32 rwops, u32 dep,
 			    u32 dbgb, bool is_dbgm)
@@ -56,6 +83,23 @@ static bool dwmac5_has_tsn_cap(void __iomem *ioaddr, enum tsn_feat_id featid)
 	};
 }
 
+static void dwmac5_hw_setup(void __iomem *ioaddr, enum tsn_feat_id featid)
+{
+	u32 value;
+
+	switch (featid) {
+	case TSN_FEAT_ID_EST:
+		/* Enable EST interrupts */
+		value = (MTL_EST_INT_EN_CGCE | MTL_EST_INT_EN_IEHS |
+			 MTL_EST_INT_EN_IEHF | MTL_EST_INT_EN_IEBE |
+			 MTL_EST_INT_EN_IECC);
+		writel(value, ioaddr + MTL_EST_INT_EN);
+		break;
+	default:
+		return;
+	};
+}
+
 static u32 dwmac5_est_get_gcl_depth(void __iomem *ioaddr)
 {
 	u32 hw_cap3;
@@ -264,9 +308,101 @@ static void dwmac5_est_switch_swol(void __iomem *ioaddr)
 	writel(value, ioaddr + MTL_EST_CTRL);
 }
 
+int dwmac5_est_irq_status(void __iomem *ioaddr, struct net_device *dev,
+			  struct tsn_mmc_stat *mmc_stat,
+			  u32 txqcnt)
+{
+	u32 txqcnt_mask;
+	u32 status;
+	u32 value;
+	u32 feqn;
+	u32 hbfq;
+	u32 hbfs;
+	u32 btrl;
+
+	txqcnt_mask = (1 << txqcnt) - 1;
+	status = readl(ioaddr + MTL_EST_STATUS);
+
+	value = (MTL_EST_STATUS_CGCE | MTL_EST_STATUS_HLBS |
+		 MTL_EST_STATUS_HLBF | MTL_EST_STATUS_BTRE |
+		 MTL_EST_STATUS_SWLC);
+
+	/* Return if there is no error */
+	if (!(status & value))
+		return 0;
+
+	if (status & MTL_EST_STATUS_CGCE) {
+		/* Clear Interrupt */
+		writel(MTL_EST_STATUS_CGCE, ioaddr + MTL_EST_STATUS);
+
+		mmc_stat->count[EST_MMC_CGCE]++;
+	}
+
+	if (status & MTL_EST_STATUS_HLBS) {
+		value = readl(ioaddr + MTL_EST_SCH_ERR);
+		value &= txqcnt_mask;
+
+		mmc_stat->count[EST_MMC_HLBS]++;
+
+		/* Clear Interrupt */
+		writel(value, ioaddr + MTL_EST_SCH_ERR);
+
+		/* Collecting info to shows all the queues that has HLBS
+		 * issue. The only way to clear this is to clear the
+		 * statistic
+		 */
+		if (net_ratelimit())
+			netdev_err(dev, "EST: HLB(sched) Queue %u\n", value);
+	}
+
+	if (status & MTL_EST_STATUS_HLBF) {
+		value = readl(ioaddr + MTL_EST_FRM_SZ_ERR);
+		feqn = value & txqcnt_mask;
+
+		value = readl(ioaddr + MTL_EST_FRM_SZ_CAP);
+		hbfq = (value & MTL_EST_FRM_SZ_CAP_HBFQ_MASK(txqcnt)) >>
+		       MTL_EST_FRM_SZ_CAP_HBFQ_SHIFT;
+		hbfs = value & MTL_EST_FRM_SZ_CAP_HBFS_MASK;
+
+		mmc_stat->count[EST_MMC_HLBF]++;
+
+		/* Clear Interrupt */
+		writel(feqn, ioaddr + MTL_EST_FRM_SZ_ERR);
+
+		if (net_ratelimit())
+			netdev_err(dev, "EST: HLB(size) Queue %u Size %u\n",
+				   hbfq, hbfs);
+	}
+
+	if (status & MTL_EST_STATUS_BTRE) {
+		if ((status & MTL_EST_STATUS_BTRL) ==
+		    MTL_EST_STATUS_BTRL_MAX)
+			mmc_stat->count[EST_MMC_BTRLM]++;
+		else
+			mmc_stat->count[EST_MMC_BTRE]++;
+
+		btrl = (status & MTL_EST_STATUS_BTRL) >>
+			MTL_EST_STATUS_BTRL_SHIFT;
+
+		if (net_ratelimit())
+			netdev_info(dev, "EST: BTR Error Loop Count %u\n",
+				    btrl);
+
+		writel(MTL_EST_STATUS_BTRE, ioaddr + MTL_EST_STATUS);
+	}
+
+	if (status & MTL_EST_STATUS_SWLC) {
+		writel(MTL_EST_STATUS_SWLC, ioaddr + MTL_EST_STATUS);
+		netdev_info(dev, "SWOL has been switched\n");
+	}
+
+	return status;
+}
+
 const struct tsnif_ops dwmac510_tsnif_ops = {
 	.read_hwid = dwmac5_read_hwid,
 	.has_tsn_cap = dwmac5_has_tsn_cap,
+	.hw_setup = dwmac5_hw_setup,
 	.est_get_gcl_depth = dwmac5_est_get_gcl_depth,
 	.est_get_ti_width = dwmac5_est_get_ti_width,
 	.est_get_txqcnt = dwmac5_est_get_txqcnt,
@@ -281,9 +417,11 @@ const struct tsnif_ops dwmac510_tsnif_ops = {
 	.est_get_enable = dwmac5_est_get_enable,
 	.est_get_bank = dwmac5_est_get_bank,
 	.est_switch_swol = dwmac5_est_switch_swol,
+	.est_irq_status = dwmac5_est_irq_status,
 };
 
 void dwmac510_tsnif_setup(struct mac_device_info *mac)
 {
 	mac->tsnif = &dwmac510_tsnif_ops;
+	mac->tsn_info.mmc_desc = &dwmac5_tsn_mmc_desc[0];
 }
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 635d1d1c99f2..58cbb82cc1cb 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -361,6 +361,8 @@ struct stmmac_ops {
 			    enum tsn_feat_id featid, bool enable);
 	bool (*has_tsn_feat)(struct mac_device_info *hw, struct net_device *dev,
 			     enum tsn_feat_id featid);
+	void (*setup_tsn_hw)(struct mac_device_info *hw,
+			     struct net_device *dev);
 	int (*set_tsn_hwtunable)(struct mac_device_info *hw,
 				 struct net_device *dev,
 				 enum tsn_hwtunable_id id,
@@ -387,6 +389,10 @@ struct stmmac_ops {
 				  u32 dbgb, bool is_dbgm);
 	int (*get_est_gcc)(struct mac_device_info *hw, struct net_device *dev,
 			   struct est_gc_config **gcc);
+	void (*est_irq_status)(struct mac_device_info *hw,
+			       struct net_device *dev);
+	int (*dump_tsn_mmc)(struct mac_device_info *hw, int index,
+			    unsigned long *count, const char **desc);
 };
 
 #define stmmac_core_init(__priv, __args...) \
@@ -475,6 +481,8 @@ struct stmmac_ops {
 	stmmac_do_void_callback(__priv, mac, set_tsn_feat, __args)
 #define stmmac_has_tsn_feat(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, has_tsn_feat, __args)
+#define stmmac_tsn_hw_setup(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, setup_tsn_hw, __args)
 #define stmmac_set_tsn_hwtunable(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, set_tsn_hwtunable, __args)
 #define stmmac_get_tsn_hwtunable(__priv, __args...) \
@@ -493,6 +501,10 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, set_est_gcrr_times, __args)
 #define stmmac_get_est_gcc(__priv, __args...) \
 	stmmac_do_callback(__priv, mac, get_est_gcc, __args)
+#define stmmac_est_irq_status(__priv, __args...) \
+	stmmac_do_void_callback(__priv, mac, est_irq_status, __args)
+#define stmmac_dump_tsn_mmc(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, dump_tsn_mmc, __args)
 
 /* Helpers for serdes */
 struct stmmac_serdes_ops {
@@ -648,9 +660,12 @@ int stmmac_hwif_init(struct stmmac_priv *priv);
 	__result; \
 })
 
+struct tsn_mmc_stat;
+
 struct tsnif_ops {
 	u32 (*read_hwid)(void __iomem *ioaddr);
 	bool (*has_tsn_cap)(void __iomem *ioaddr, enum tsn_feat_id featid);
+	void (*hw_setup)(void __iomem *ioaddr, enum tsn_feat_id featid);
 	/* IEEE 802.1Qbv Enhanced Scheduled Traffics (EST) */
 	u32 (*est_get_gcl_depth)(void __iomem *ioaddr);
 	u32 (*est_get_ti_width)(void __iomem *ioaddr);
@@ -673,12 +688,17 @@ struct tsnif_ops {
 	bool (*est_get_enable)(void __iomem *ioaddr);
 	u32 (*est_get_bank)(void __iomem *ioaddr, bool is_own);
 	void (*est_switch_swol)(void __iomem *ioaddr);
+	int (*est_irq_status)(void *ioaddr, struct net_device *dev,
+			      struct tsn_mmc_stat *mmc_stat,
+			      unsigned int txqcnt);
 };
 
 #define tsnif_read_hwid(__hw, __args...) \
 	tsnif_do_callback(__hw, read_hwid, __args)
 #define tsnif_has_tsn_cap(__hw, __args...) \
 	tsnif_do_callback(__hw, has_tsn_cap, __args)
+#define tsnif_hw_setup(__hw, __args...) \
+	tsnif_do_void_callback(__hw, hw_setup, __args)
 #define tsnif_est_get_gcl_depth(__hw, __args...) \
 	tsnif_do_callback(__hw, est_get_gcl_depth, __args)
 #define tsnif_est_get_ti_width(__hw, __args...) \
@@ -707,5 +727,7 @@ struct tsnif_ops {
 	tsnif_do_callback(__hw, est_get_bank, __args)
 #define tsnif_est_switch_swol(__hw, __args...) \
 	tsnif_do_void_callback(__hw, est_switch_swol, __args)
+#define tsnif_est_irq_status(__hw, __args...) \
+	tsnif_do_callback(__hw, est_irq_status, __args)
 
 #endif /* __STMMAC_HWIF_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
index 6efb66820d4c..555af832c47c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
@@ -473,7 +473,14 @@ static void stmmac_get_ethtool_stats(struct net_device *dev,
 				data[j++] = count;
 		}
 	}
-
+	if (priv->hw->tsn_info.cap.est_support) {
+		for (i = 0; i < STMMAC_TSN_STAT_SIZE; i++) {
+			if (!stmmac_dump_tsn_mmc(priv,
+						 priv->hw, i,
+						 &count, NULL))
+				data[j++] = count;
+		}
+	}
 	/* Update the DMA HW counters for dwmac10/100 */
 	ret = stmmac_dma_diagnostic_fr(priv, &dev->stats, (void *) &priv->xstats,
 			priv->ioaddr);
@@ -512,7 +519,7 @@ static void stmmac_get_ethtool_stats(struct net_device *dev,
 static int stmmac_get_sset_count(struct net_device *netdev, int sset)
 {
 	struct stmmac_priv *priv = netdev_priv(netdev);
-	int i, len, safety_len = 0;
+	int i, len, safety_len = 0, tsn_len = 0;
 
 	switch (sset) {
 	case ETH_SS_STATS:
@@ -530,6 +537,16 @@ static int stmmac_get_sset_count(struct net_device *netdev, int sset)
 
 			len += safety_len;
 		}
+		if (priv->hw->tsn_info.cap.est_support) {
+			for (i = 0; i < STMMAC_TSN_STAT_SIZE; i++) {
+				if (!stmmac_dump_tsn_mmc(priv,
+							 priv->hw, i,
+							 NULL, NULL))
+					tsn_len++;
+			}
+
+			len += tsn_len;
+		}
 
 		return len;
 	case ETH_SS_TEST:
@@ -558,6 +575,18 @@ static void stmmac_get_strings(struct net_device *dev, u32 stringset, u8 *data)
 				}
 			}
 		}
+		if (priv->hw->tsn_info.cap.est_support) {
+			for (i = 0; i < STMMAC_TSN_STAT_SIZE; i++) {
+				const char *desc;
+
+				if (!stmmac_dump_tsn_mmc(priv,
+							 priv->hw, i,
+							 NULL, &desc)) {
+					memcpy(p, desc, ETH_GSTRING_LEN);
+					p += ETH_GSTRING_LEN;
+				}
+			}
+		}
 		if (priv->dma_cap.rmon)
 			for (i = 0; i < STMMAC_MMC_STATS_LEN; i++) {
 				memcpy(p, stmmac_mmc[i].stat_string,
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 5040292dcd66..d55d5b16e967 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -2614,6 +2614,8 @@ static int stmmac_hw_setup(struct net_device *dev, bool init_ptp)
 	/* Set HW VLAN stripping mode */
 	stmmac_set_hw_vlan_mode(priv, priv->ioaddr, dev->features);
 
+	stmmac_tsn_hw_setup(priv, priv->hw, priv->dev);
+
 	return 0;
 }
 
@@ -3912,6 +3914,9 @@ static void stmmac_common_interrupt(struct stmmac_priv *priv)
 	if (priv->irq_wake)
 		pm_wakeup_hard_event(priv->device);
 
+	if (priv->hw->tsn_info.feat_en[TSN_FEAT_ID_EST])
+		stmmac_est_irq_status(priv, priv->hw, priv->dev);
+
 	/* To handle GMAC own interrupts */
 	if ((priv->plat->has_gmac) || xmac) {
 		int status = stmmac_host_irq_status(priv, priv->hw, &priv->xstats);
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
index d1f599138963..3288f1f54179 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.c
@@ -7,6 +7,7 @@
 #include <linux/time64.h>
 #include "stmmac_ptp.h"
 #include "common.h"
+#include "stmmac.h"
 
 static u32 est_get_gcl_total_intervals_nsec(struct est_gc_config *gcc,
 					    u32 bank, u32 gcl_len)
@@ -127,6 +128,18 @@ bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
 	return hw->tsn_info.feat_en[featid];
 }
 
+/* tsn_hw_setup is called within stmmac_hw_setup() after
+ * stmmac_init_dma_engine() which resets MAC controller.
+ * This is so-that MAC registers are not cleared.
+ */
+void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev)
+{
+	void __iomem *ioaddr = hw->pcsr;
+
+	if (tsn_has_feat(hw, dev, TSN_FEAT_ID_EST))
+		tsnif_hw_setup(hw, ioaddr, TSN_FEAT_ID_EST);
+}
+
 int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 		      enum tsn_hwtunable_id id,
 		      const u32 data)
@@ -674,3 +687,32 @@ int tsn_est_gcc_get(struct mac_device_info *hw, struct net_device *dev,
 
 	return 0;
 }
+
+void tsn_est_irq_status(struct mac_device_info *hw, struct net_device *dev)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	void __iomem *ioaddr = hw->pcsr;
+	unsigned int status;
+
+	status = tsnif_est_irq_status(hw, ioaddr, dev, &info->mmc_stat,
+				      info->cap.txqcnt);
+}
+
+int tsn_mmc_dump(struct mac_device_info *hw,
+		 int index, unsigned long *count, const char **desc)
+{
+	struct tsnif_info *info = &hw->tsn_info;
+	const struct tsn_mmc_desc *mmc_desc;
+	unsigned long *ptr;
+
+	ptr = (unsigned long *)&info->mmc_stat;
+	mmc_desc = info->mmc_desc;
+
+	if (!(mmc_desc + index)->valid)
+		return -EINVAL;
+	if (count)
+		*count = *(ptr + index);
+	if (desc)
+		*desc = (mmc_desc + index)->desc;
+	return 0;
+}
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
index b51c2008f5e4..b855b33526e3 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tsn.h
@@ -9,6 +9,7 @@
 #define MIN_TSN_CORE_VER	0x50
 #define EST_GCL_BANK_MAX		(2)
 #define EST_TIWID_TO_EXTMAX(ti_wid)	((1 << ((ti_wid) + 7)) - 1)
+#define STMMAC_TSN_STAT_SIZE		(16)
 
 /* Hardware Tunable Enum */
 enum tsn_hwtunable_id {
@@ -82,11 +83,23 @@ struct est_gc_config {
 	bool enable;			/* 1: enabled */
 };
 
+/* TSN MMC Statistics */
+struct tsn_mmc_desc {
+	bool valid;
+	const char *desc;
+};
+
+struct tsn_mmc_stat {
+	unsigned long count[STMMAC_TSN_STAT_SIZE];
+};
+
 struct tsnif_info {
 	struct tsn_hw_cap cap;
 	bool feat_en[TSN_FEAT_ID_MAX];
 	u32 hwtunable[TSN_HWTUNA_MAX];
 	struct est_gc_config est_gcc;
+	struct tsn_mmc_stat mmc_stat;
+	const struct tsn_mmc_desc *mmc_desc;
 };
 
 struct mac_device_info;
@@ -97,6 +110,7 @@ int tsn_feat_set(struct mac_device_info *hw, struct net_device *dev,
 		 enum tsn_feat_id featid, bool enable);
 bool tsn_has_feat(struct mac_device_info *hw, struct net_device *dev,
 		  enum tsn_feat_id featid);
+void tsn_hw_setup(struct mac_device_info *hw, struct net_device *dev);
 int tsn_hwtunable_set(struct mac_device_info *hw, struct net_device *dev,
 		      enum tsn_hwtunable_id id, const u32 data);
 int tsn_hwtunable_get(struct mac_device_info *hw, struct net_device *dev,
@@ -118,5 +132,8 @@ int tsn_est_gcrr_times_set(struct mac_device_info *hw,
 			   u32 dbgb, bool is_dbgm);
 int tsn_est_gcc_get(struct mac_device_info *hw, struct net_device *dev,
 		    struct est_gc_config **gcc);
+void tsn_est_irq_status(struct mac_device_info *hw, struct net_device *dev);
+int tsn_mmc_dump(struct mac_device_info *hw,
+		 int index, unsigned long *count, const char **desc);
 
 #endif /* __STMMAC_TSN_H__ */
-- 
2.17.1

