From 80d6c1176383129f1b4a2e31485a2a5de261caa3 Mon Sep 17 00:00:00 2001
From: "Randy G. Duran" <randy.g.duran@intel.com>
Date: Tue, 2 Apr 2019 13:09:35 -0700
Subject: [PATCH 290/292] clean up for
 sandbox/fyang16/mainline-tracking-base-5.0-ww10.3 part 2

---
 drivers/misc/mei/hbm.c  |   4 +-
 include/linux/tee_drv.h | 114 ++++++++++++++++++++--------------------
 2 files changed, 59 insertions(+), 59 deletions(-)

diff --git a/drivers/misc/mei/hbm.c b/drivers/misc/mei/hbm.c
index c361fe721d40..84bcdb0bc239 100644
--- a/drivers/misc/mei/hbm.c
+++ b/drivers/misc/mei/hbm.c
@@ -1270,8 +1270,8 @@ int mei_hbm_dispatch(struct mei_device *dev, struct mei_msg_hdr *hdr)
 
 		if (dma_setup_res->status) {
 			dev_info(dev->dev, "hbm: dma setup response: failure = %d %s\n",
-				dma_setup_res->status,
-				mei_hbm_status_str(dma_setup_res->status));
+				 dma_setup_res->status,
+				 mei_hbm_status_str(dma_setup_res->status));
 			dev->hbm_f_dr_supported = 0;
 			mei_dmam_ring_free(dev);
 		}
diff --git a/include/linux/tee_drv.h b/include/linux/tee_drv.h
index 91653d9b0f62..e0e80a8ed4e4 100644
--- a/include/linux/tee_drv.h
+++ b/include/linux/tee_drv.h
@@ -551,77 +551,77 @@ static inline bool tee_param_is_memref(struct tee_param *param)
 }
 
 /**
-    * tee_client_open_context() - Open a TEE context
-    * @start:	if not NULL, continue search after this context
-    * @match:	function to check TEE device
-    * @data:	data for match function
-    * @vers:	if not NULL, version data of TEE device of the context returned
-    *
-    * This function does an operation similar to open("/dev/teeX") in user space.
-    * A returned context must be released with tee_client_close_context().
-    *
-    * Returns a TEE context of the first TEE device matched by the match()
-    * callback or an ERR_PTR.
-    */
+ * tee_client_open_context() - Open a TEE context
+ * @start:	if not NULL, continue search after this context
+ * @match:	function to check TEE device
+ * @data:	data for match function
+ * @vers:	if not NULL, version data of TEE device of the context returned
+ *
+ * This function does an operation similar to open("/dev/teeX") in user space.
+ * A returned context must be released with tee_client_close_context().
+ *
+ * Returns a TEE context of the first TEE device matched by the match()
+ * callback or an ERR_PTR.
+ */
 struct tee_context *
 tee_client_open_context(struct tee_context *start,
-					int (*match)(struct tee_ioctl_version_data *,
-							     const void *),
-					const void *data, struct tee_ioctl_version_data *vers);
+			int (*match)(struct tee_ioctl_version_data *,
+				     const void *),
+			const void *data, struct tee_ioctl_version_data *vers);
 
 /**
-    * tee_client_close_context() - Close a TEE context
-    * @ctx:	TEE context to close
-    *
-    * Note that all sessions previously opened with this context will be
-    * closed when this function is called.
-    */
+ * tee_client_close_context() - Close a TEE context
+ * @ctx:	TEE context to close
+ *
+ * Note that all sessions previously opened with this context will be
+ * closed when this function is called.
+ */
 void tee_client_close_context(struct tee_context *ctx);
 
 /**
-    * tee_client_get_version() - Query version of TEE
-    * @ctx:	TEE context to TEE to query
-    * @vers:	Pointer to version data
-    */
+ * tee_client_get_version() - Query version of TEE
+ * @ctx:	TEE context to TEE to query
+ * @vers:	Pointer to version data
+ */
 void tee_client_get_version(struct tee_context *ctx,
-		+			    struct tee_ioctl_version_data *vers);
-
-/**
-    * tee_client_open_session() - Open a session to a Trusted Application
-    * @ctx:	TEE context
-    * @arg:	Open session arguments, see description of
-    *		struct tee_ioctl_open_session_arg
-    * @param:	Parameters passed to the Trusted Application
-    *
-    * Returns < 0 on error else see @arg->ret for result. If @arg->ret
-    * is TEEC_SUCCESS the session identifier is available in @arg->session.
-    */
+			   struct tee_ioctl_version_data *vers);
+
+/**
+ * tee_client_open_session() - Open a session to a Trusted Application
+ * @ctx:	TEE context
+ * @arg:	Open session arguments, see description of
+ *		struct tee_ioctl_open_session_arg
+ * @param:	Parameters passed to the Trusted Application
+ *
+ * Returns < 0 on error else see @arg->ret for result. If @arg->ret
+ * is TEEC_SUCCESS the session identifier is available in @arg->session.
+ */
 int tee_client_open_session(struct tee_context *ctx,
-		+			    struct tee_ioctl_open_session_arg *arg,
-		+			    struct tee_param *param);
+			   struct tee_ioctl_open_session_arg *arg,
+			   struct tee_param *param);
 
 /**
-    * tee_client_close_session() - Close a session to a Trusted Application
-    * @ctx:	TEE Context
-    * @session:	Session id
-    *
-    * Return < 0 on error else 0, regardless the session will not be
-    * valid after this function has returned.
-    */
+ * tee_client_close_session() - Close a session to a Trusted Application
+ * @ctx:	TEE Context
+ * @session:	Session id
+ *
+ * Return < 0 on error else 0, regardless the session will not be
+ * valid after this function has returned.
+ */
 +int tee_client_close_session(struct tee_context *ctx, u32 session);
 
 /**
-    * tee_client_invoke_func() - Invoke a function in a Trusted Application
-    * @ctx:	TEE Context
-    * @arg:	Invoke arguments, see description of
-    *		struct tee_ioctl_invoke_arg
-    * @param:	Parameters passed to the Trusted Application
-    *
-    * Returns < 0 on error else see @arg->ret for result.
-    */
+ * tee_client_invoke_func() - Invoke a function in a Trusted Application
+ * @ctx:	TEE Context
+ * @arg:	Invoke arguments, see description of
+ *		struct tee_ioctl_invoke_arg
+ * @param:	Parameters passed to the Trusted Application
+ *
+ * Returns < 0 on error else see @arg->ret for result.
+ */
 int tee_client_invoke_func(struct tee_context *ctx,
-		+			   struct tee_ioctl_invoke_arg *arg,
-		+			   struct tee_param *param);
+			  struct tee_ioctl_invoke_arg *arg,
+			  struct tee_param *param);
 
 
- #endif /*__TEE_DRV_H*/
+#endif /*__TEE_DRV_H*/
-- 
2.21.0

