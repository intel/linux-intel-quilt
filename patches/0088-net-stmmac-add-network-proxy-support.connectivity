From ecda6070211ea826e66ca25df401633a9ea9a4c9 Mon Sep 17 00:00:00 2001
From: "Lay, Kuan Loon" <kuan.loon.lay@intel.com>
Date: Mon, 12 Nov 2018 10:01:20 +0800
Subject: [PATCH 088/104] net: stmmac: add network proxy support

This enables stmmac driver to support network proxy mode entry and exit
for ECMA-393 proxZzy technology.

Signed-off-by: Ong, Boon Leong <boon.leong.ong@intel.com>
Signed-off-by: Lay, Kuan Loon <kuan.loon.lay@intel.com>
Signed-off-by: Song, Yoong Siang <yoong.siang.song@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/Kconfig   |  19 ++
 drivers/net/ethernet/stmicro/stmmac/Makefile  |   4 +
 drivers/net/ethernet/stmicro/stmmac/common.h  |   3 +
 .../ethernet/stmicro/stmmac/dwmac1000_core.c  |  67 +++--
 .../ethernet/stmicro/stmmac/dwmac100_core.c   |  23 +-
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |  81 ++++--
 .../ethernet/stmicro/stmmac/dwxgmac2_core.c   |  75 ++---
 drivers/net/ethernet/stmicro/stmmac/hwif.c    |   6 +
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  20 ++
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  13 +
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 235 +++++++++++++++-
 .../ethernet/stmicro/stmmac/stmmac_netproxy.c | 256 ++++++++++++++++++
 .../ethernet/stmicro/stmmac/stmmac_netproxy.h |  38 +++
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  16 ++
 include/linux/stmmac.h                        |   3 +
 15 files changed, 756 insertions(+), 103 deletions(-)
 create mode 100644 drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
 create mode 100644 drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.h

diff --git a/drivers/net/ethernet/stmicro/stmmac/Kconfig b/drivers/net/ethernet/stmicro/stmmac/Kconfig
index 7adf9afb01b6..96c095f5e595 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Kconfig
+++ b/drivers/net/ethernet/stmicro/stmmac/Kconfig
@@ -209,6 +209,25 @@ config STMMAC_PCI
 	  If you have a controller with this interface, say Y or M here.
 
 	  If unsure, say N.
+
+config STMMAC_NETWORK_PROXY
+	bool "STMMAC Network Proxy support"
+	depends on STMMAC_ETH && STMMAC_PCI && NETWORK_PROXY
+	help
+	  This selects the Network Proxy support for the stmmac driver.
+
+	  This enables stmmac driver to has the capable of supporting
+	  network proxy mode entry and exit for the ECMA-393 proxZzy
+	  technology.
+
+config STMMAC_NETWORK_PROXY_PORT
+	int "STMMAC Network Proxy support in Port"
+	depends on STMMAC_NETWORK_PROXY
+	range 0 1
+	default 0
+	help
+	  Default enable port 0 for Network Proxy.
+
 endif
 
 config STMMAC_HWTS
diff --git a/drivers/net/ethernet/stmicro/stmmac/Makefile b/drivers/net/ethernet/stmicro/stmmac/Makefile
index d50c29afe70e..cd663017ea20 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Makefile
+++ b/drivers/net/ethernet/stmicro/stmmac/Makefile
@@ -10,6 +10,10 @@ stmmac-objs:= stmmac_main.o stmmac_ethtool.o stmmac_mdio.o ring_mode.o	\
 
 stmmac-$(CONFIG_STMMAC_SELFTESTS) += stmmac_selftests.o
 
+ifeq ($(CONFIG_STMMAC_NETWORK_PROXY),y)
+stmmac-objs += stmmac_netproxy.o
+endif
+
 # Ordering matters. Generic driver must be last.
 obj-$(CONFIG_STMMAC_PLATFORM)	+= stmmac-platform.o
 obj-$(CONFIG_DWMAC_ANARION)	+= dwmac-anarion.o
diff --git a/drivers/net/ethernet/stmicro/stmmac/common.h b/drivers/net/ethernet/stmicro/stmmac/common.h
index 9a3a3cebf355..0568c2b4e281 100644
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@ -486,6 +486,9 @@ struct mac_device_info {
 	const struct stmmac_mode_ops *mode;
 	const struct stmmac_hwtimestamp *ptp;
 	const struct stmmac_tc_ops *tc;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	const struct stmmac_pm_ops *pm;
+#endif
 	const struct stmmac_mmc_ops *mmc;
 	struct mii_regs mii;	/* MII register Addresses */
 	struct mac_link link;
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c
index 3d69da112625..81a530a92f2a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac1000_core.c
@@ -27,40 +27,47 @@ static void dwmac1000_core_init(struct mac_device_info *hw,
 	void __iomem *ioaddr = hw->pcsr;
 	u32 value = readl(ioaddr + GMAC_CONTROL);
 	int mtu = dev->mtu;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	struct stmmac_priv *priv = netdev_priv(dev);
 
-	/* Configure GMAC core */
-	value |= GMAC_CORE_INIT;
+	if (!priv->networkproxy_exit) {
+#endif
+		/* Configure GMAC core */
+		value |= GMAC_CORE_INIT;
 
-	/* Clear ACS bit because Ethernet switch tagging formats such as
-	 * Broadcom tags can look like invalid LLC/SNAP packets and cause the
-	 * hardware to truncate packets on reception.
-	 */
-	if (netdev_uses_dsa(dev))
-		value &= ~GMAC_CONTROL_ACS;
-
-	if (mtu > 1500)
-		value |= GMAC_CONTROL_2K;
-	if (mtu > 2000)
-		value |= GMAC_CONTROL_JE;
-
-	if (hw->ps) {
-		value |= GMAC_CONTROL_TE;
-
-		value &= ~hw->link.speed_mask;
-		switch (hw->ps) {
-		case SPEED_1000:
-			value |= hw->link.speed1000;
-			break;
-		case SPEED_100:
-			value |= hw->link.speed100;
-			break;
-		case SPEED_10:
-			value |= hw->link.speed10;
-			break;
+		/* Clear ACS bit because Ethernet switch tagging formats such as
+		 * Broadcom tags can look like invalid LLC/SNAP packets and
+		 * cause the hardware to truncate packets on reception.
+		 */
+		if (netdev_uses_dsa(dev))
+			value &= ~GMAC_CONTROL_ACS;
+
+		if (mtu > 1500)
+			value |= GMAC_CONTROL_2K;
+		if (mtu > 2000)
+			value |= GMAC_CONTROL_JE;
+
+		if (hw->ps) {
+			value |= GMAC_CONTROL_TE;
+
+			value &= ~hw->link.speed_mask;
+			switch (hw->ps) {
+			case SPEED_1000:
+				value |= hw->link.speed1000;
+				break;
+			case SPEED_100:
+				value |= hw->link.speed100;
+				break;
+			case SPEED_10:
+				value |= hw->link.speed10;
+				break;
+			}
 		}
-	}
 
-	writel(value, ioaddr + GMAC_CONTROL);
+		writel(value, ioaddr + GMAC_CONTROL);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	}
+#endif
 
 	/* Mask GMAC interrupts */
 	value = GMAC_INT_DEFAULT_MASK;
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c
index ebcad8dd99db..e75a6b82d3e5 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac100_core.c
@@ -25,17 +25,24 @@ static void dwmac100_core_init(struct mac_device_info *hw,
 {
 	void __iomem *ioaddr = hw->pcsr;
 	u32 value = readl(ioaddr + MAC_CONTROL);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	struct stmmac_priv *priv = netdev_priv(dev);
 
-	value |= MAC_CORE_INIT;
+	if (!priv->networkproxy_exit) {
+#endif
+		value |= MAC_CORE_INIT;
 
-	/* Clear ASTP bit because Ethernet switch tagging formats such as
-	 * Broadcom tags can look like invalid LLC/SNAP packets and cause the
-	 * hardware to truncate packets on reception.
-	 */
-	if (netdev_uses_dsa(dev))
-		value &= ~MAC_CONTROL_ASTP;
+		/* Clear ASTP bit because Ethernet switch tagging formats such
+		 * as Broadcom tags can look like invalid LLC/SNAP packets and
+		 * cause the hardware to truncate packets on reception.
+		 */
+		if (netdev_uses_dsa(dev))
+			value &= ~MAC_CONTROL_ASTP;
 
-	writel(value, ioaddr + MAC_CONTROL);
+		writel(value, ioaddr + MAC_CONTROL);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	}
+#endif
 
 #ifdef STMMAC_VLAN_TAG_USED
 	writel(ETH_P_8021Q, ioaddr + MAC_VLAN1);
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index dd29cbcf55fa..15e458407910 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -28,32 +28,39 @@ static void dwmac4_core_init(struct mac_device_info *hw,
 	void __iomem *ioaddr = hw->pcsr;
 	u32 value = readl(ioaddr + GMAC_CONFIG);
 	int mtu = dev->mtu;
-
-	value |= GMAC_CORE_INIT;
-
-	if (mtu > 1500)
-		value |= GMAC_CONFIG_2K;
-	if (mtu > 2000)
-		value |= GMAC_CONFIG_JE;
-
-	if (hw->ps) {
-		value |= GMAC_CONFIG_TE;
-
-		value &= hw->link.speed_mask;
-		switch (hw->ps) {
-		case SPEED_1000:
-			value |= hw->link.speed1000;
-			break;
-		case SPEED_100:
-			value |= hw->link.speed100;
-			break;
-		case SPEED_10:
-			value |= hw->link.speed10;
-			break;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	struct stmmac_priv *priv = netdev_priv(dev);
+
+	if (!priv->networkproxy_exit) {
+#endif
+		value |= GMAC_CORE_INIT;
+
+		if (mtu > 1500)
+			value |= GMAC_CONFIG_2K;
+		if (mtu > 2000)
+			value |= GMAC_CONFIG_JE;
+
+		if (hw->ps) {
+			value |= GMAC_CONFIG_TE;
+
+			value &= hw->link.speed_mask;
+			switch (hw->ps) {
+			case SPEED_1000:
+				value |= hw->link.speed1000;
+				break;
+			case SPEED_100:
+				value |= hw->link.speed100;
+				break;
+			case SPEED_10:
+				value |= hw->link.speed10;
+				break;
+			}
 		}
-	}
 
-	writel(value, ioaddr + GMAC_CONFIG);
+		writel(value, ioaddr + GMAC_CONFIG);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	}
+#endif
 
 	/* Enable GMAC interrupts */
 	value = GMAC_INT_DEFAULT_ENABLE;
@@ -1027,6 +1034,29 @@ static void dwmac4_set_hw_vlan_mode(void __iomem *ioaddr,
 	writel(val, ioaddr + GMAC_VLAN_TAG_CTRL);
 }
 
+static int dwmac4_mtl_tx_completed(void __iomem *ioaddr, u32 tx_queues)
+{
+	u32 value;
+	u32 queue;
+
+	for (queue = 0; queue < tx_queues; queue++) {
+		value = readl(ioaddr + MTL_CHAN_TX_DEBUG(queue));
+
+		/* if Tx Queue not empty */
+		if (value & MTL_DEBUG_TXFSTS)
+			return 1;
+
+		/* check frame transmissions is complete */
+		if (value & MTL_DEBUG_TRCSTS_MASK) {
+			u32 trcsts = (value & MTL_DEBUG_TRCSTS_MASK)
+				     >> MTL_DEBUG_TRCSTS_SHIFT;
+			if (trcsts != MTL_DEBUG_TRCSTS_IDLE)
+				return 1;
+		}
+	}
+	return 0;
+}
+
 const struct stmmac_ops dwmac4_ops = {
 	.core_init = dwmac4_core_init,
 	.set_mac = stmmac_set_mac,
@@ -1066,6 +1096,7 @@ const struct stmmac_ops dwmac4_ops = {
 	.add_hw_vlan_rx_fltr = dwmac4_add_hw_vlan_rx_fltr,
 	.del_hw_vlan_rx_fltr = dwmac4_del_hw_vlan_rx_fltr,
 	.restore_hw_vlan_rx_fltr = dwmac4_restore_hw_vlan_rx_fltr,
+	.mtl_tx_completed = dwmac4_mtl_tx_completed,
 };
 
 const struct stmmac_ops dwmac410_ops = {
@@ -1107,6 +1138,7 @@ const struct stmmac_ops dwmac410_ops = {
 	.add_hw_vlan_rx_fltr = dwmac4_add_hw_vlan_rx_fltr,
 	.del_hw_vlan_rx_fltr = dwmac4_del_hw_vlan_rx_fltr,
 	.restore_hw_vlan_rx_fltr = dwmac4_restore_hw_vlan_rx_fltr,
+	.mtl_tx_completed = dwmac4_mtl_tx_completed,
 };
 
 const struct stmmac_ops dwmac510_ops = {
@@ -1153,6 +1185,7 @@ const struct stmmac_ops dwmac510_ops = {
 	.add_hw_vlan_rx_fltr = dwmac4_add_hw_vlan_rx_fltr,
 	.del_hw_vlan_rx_fltr = dwmac4_del_hw_vlan_rx_fltr,
 	.restore_hw_vlan_rx_fltr = dwmac4_restore_hw_vlan_rx_fltr,
+	.mtl_tx_completed = dwmac4_mtl_tx_completed,
 	.tsnif_setup = dwmac510_tsnif_setup,
 	.init_tsn = tsn_init,
 	.setup_tsn_hw = tsn_hw_setup,
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c b/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c
index a28aa7b775c0..e97c3352f935 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c
@@ -15,43 +15,50 @@ static void dwxgmac2_core_init(struct mac_device_info *hw,
 	void __iomem *ioaddr = hw->pcsr;
 	int mtu = dev->mtu;
 	u32 tx, rx;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	struct stmmac_priv *priv = netdev_priv(dev);
+
+	if (!priv->networkproxy_exit) {
+#endif
+		tx = readl(ioaddr + XGMAC_TX_CONFIG);
+		rx = readl(ioaddr + XGMAC_RX_CONFIG);
+
+		tx |= XGMAC_CORE_INIT_TX;
+		rx |= XGMAC_CORE_INIT_RX;
+
+		if (mtu >= 9000) {
+			rx |= XGMAC_CONFIG_GPSLCE;
+			rx |= XGMAC_JUMBO_LEN << XGMAC_CONFIG_GPSL_SHIFT;
+			rx |= XGMAC_CONFIG_WD;
+		} else if (mtu > 2000) {
+			rx |= XGMAC_CONFIG_JE;
+		} else if (mtu > 1500) {
+			rx |= XGMAC_CONFIG_S2KP;
+		}
 
-	tx = readl(ioaddr + XGMAC_TX_CONFIG);
-	rx = readl(ioaddr + XGMAC_RX_CONFIG);
-
-	tx |= XGMAC_CORE_INIT_TX;
-	rx |= XGMAC_CORE_INIT_RX;
-
-	if (mtu >= 9000) {
-		rx |= XGMAC_CONFIG_GPSLCE;
-		rx |= XGMAC_JUMBO_LEN << XGMAC_CONFIG_GPSL_SHIFT;
-		rx |= XGMAC_CONFIG_WD;
-	} else if (mtu > 2000) {
-		rx |= XGMAC_CONFIG_JE;
-	} else if (mtu > 1500) {
-		rx |= XGMAC_CONFIG_S2KP;
-	}
-
-	if (hw->ps) {
-		tx |= XGMAC_CONFIG_TE;
-		tx &= ~hw->link.speed_mask;
-
-		switch (hw->ps) {
-		case SPEED_10000:
-			tx |= hw->link.xgmii.speed10000;
-			break;
-		case SPEED_2500:
-			tx |= hw->link.speed2500;
-			break;
-		case SPEED_1000:
-		default:
-			tx |= hw->link.speed1000;
-			break;
+		if (hw->ps) {
+			tx |= XGMAC_CONFIG_TE;
+			tx &= ~hw->link.speed_mask;
+
+			switch (hw->ps) {
+			case SPEED_10000:
+				tx |= hw->link.xgmii.speed10000;
+				break;
+			case SPEED_2500:
+				tx |= hw->link.speed2500;
+				break;
+			case SPEED_1000:
+			default:
+				tx |= hw->link.speed1000;
+				break;
+			}
 		}
-	}
 
-	writel(tx, ioaddr + XGMAC_TX_CONFIG);
-	writel(rx, ioaddr + XGMAC_RX_CONFIG);
+		writel(tx, ioaddr + XGMAC_TX_CONFIG);
+		writel(rx, ioaddr + XGMAC_RX_CONFIG);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	}
+#endif
 	writel(XGMAC_INT_DEFAULT_EN, ioaddr + XGMAC_INT_EN);
 }
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.c b/drivers/net/ethernet/stmicro/stmmac/hwif.c
index a7e45d3dd156..bf67eb87ac15 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.c
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.c
@@ -383,6 +383,12 @@ int stmmac_hwif_init(struct stmmac_priv *priv)
 		if (mac->mdio_intr_en)
 			init_waitqueue_head(&mac->mdio_busy_wait);
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+		if (priv->plat->has_netproxy)
+			mac->pm = &dwmac_netprox_pm_ops;
+		else
+			mac->pm = &dwmac_pm_ops;
+#endif
 		priv->hw = mac;
 		priv->ptpaddr = priv->ioaddr + entry->regs.ptp_off;
 		priv->mmcaddr = priv->ioaddr + entry->regs.mmc_off;
diff --git a/drivers/net/ethernet/stmicro/stmmac/hwif.h b/drivers/net/ethernet/stmicro/stmmac/hwif.h
index 5143dc592d42..2396d5b4b7c1 100644
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -359,6 +359,8 @@ struct stmmac_ops {
 				   __be16 proto, u16 vid);
 	void (*restore_hw_vlan_rx_fltr)(struct net_device *dev,
 					struct mac_device_info *hw);
+	/* Check frame transmission is completed */
+	int (*mtl_tx_completed)(void __iomem *ioaddr, u32 tx_queues);
 	/* TSN APIs */
 	void (*tsnif_setup)(struct mac_device_info *mac);
 	int (*init_tsn)(struct mac_device_info *hw, struct net_device *dev);
@@ -510,6 +512,8 @@ struct stmmac_ops {
 	stmmac_do_callback(__priv, mac, del_hw_vlan_rx_fltr, __args)
 #define stmmac_restore_hw_vlan_rx_fltr(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mac, restore_hw_vlan_rx_fltr, __args)
+#define stmmac_mtl_tx_completed(__priv, __args...) \
+	stmmac_do_callback(__priv, mac, mtl_tx_completed, __args)
 #define stmmac_tsnif_setup(__priv, __args...) \
 	stmmac_do_void_callback(__priv, mac, tsnif_setup, __args)
 #define stmmac_tsn_init(__priv, __args...) \
@@ -691,6 +695,18 @@ struct stmmac_regs_off {
 	u32 mmc_off;
 };
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+struct stmmac_pm_ops {
+	int (*suspend)(struct stmmac_priv *priv, struct net_device *ndev);
+	int (*resume)(struct stmmac_priv *priv, struct net_device *ndev);
+};
+
+#define stmmac_pm_suspend(__priv, __args...) \
+	stmmac_do_callback(__priv, pm, suspend, __args)
+#define stmmac_pm_resume(__priv, __args...) \
+	stmmac_do_callback(__priv, pm, resume, __args)
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
+
 extern const struct stmmac_ops dwmac100_ops;
 extern const struct stmmac_serdes_ops intel_serdes_ops;
 extern const struct stmmac_dma_ops dwmac100_dma_ops;
@@ -707,6 +723,10 @@ extern const struct stmmac_ops dwxgmac210_ops;
 extern const struct stmmac_dma_ops dwxgmac210_dma_ops;
 extern const struct stmmac_desc_ops dwxgmac210_desc_ops;
 extern const struct stmmac_mmc_ops dwmac_mmc_ops;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+extern const struct stmmac_pm_ops dwmac_pm_ops;
+extern const struct stmmac_pm_ops dwmac_netprox_pm_ops;
+#endif
 
 #define GMAC_VERSION		0x00000020	/* GMAC CORE Version */
 #define GMAC4_VERSION		0x00000110	/* GMAC4+ CORE Version */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 7b29f8f8d610..4fb69ef48f05 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -217,6 +217,12 @@ struct stmmac_priv {
 	unsigned long state;
 	struct workqueue_struct *wq;
 	struct work_struct service_task;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	/* Network Proxy A2H Worker */
+	struct workqueue_struct *netprox_wq;
+	struct work_struct netprox_task;
+	bool networkproxy_exit;
+#endif
 
 	/* TC Handling */
 	unsigned int tc_entries_max;
@@ -251,6 +257,13 @@ void stmmac_disable_eee_mode(struct stmmac_priv *priv);
 bool stmmac_eee_init(struct stmmac_priv *priv);
 int stmmac_reinit_queues(struct net_device *dev, u32 rx_cnt, u32 tx_cnt);
 int stmmac_reinit_ringparam(struct net_device *dev, u32 rx_size, u32 tx_size);
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+int stmmac_config_dma_channel(struct stmmac_priv *priv);
+int stmmac_suspend_common(struct stmmac_priv *priv, struct net_device *ndev);
+int stmmac_resume_common(struct stmmac_priv *priv, struct net_device *ndev);
+int stmmac_suspend_main(struct stmmac_priv *priv, struct net_device *ndev);
+int stmmac_resume_main(struct stmmac_priv *priv, struct net_device *ndev);
+#endif
 
 #if IS_ENABLED(CONFIG_STMMAC_SELFTESTS)
 void stmmac_selftest_run(struct net_device *dev,
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 48975ee7bb97..29206492afc1 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -46,6 +46,9 @@
 #include "hwif.h"
 #include "intel_serdes.h"
 #include "stmmac_tsn.h"
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+#include "stmmac_netproxy.h"
+#endif
 
 #define	STMMAC_ALIGN(x)		__ALIGN_KERNEL(x, SMP_CACHE_BYTES)
 #define	TSO_MAX_BUFF_SIZE	(SZ_16K - 1)
@@ -2278,8 +2281,10 @@ static int stmmac_init_dma_engine(struct stmmac_priv *priv)
 	u32 rx_channels_count = priv->plat->rx_queues_to_use;
 	u32 tx_channels_count = priv->plat->tx_queues_to_use;
 	u32 dma_csr_ch = max(rx_channels_count, tx_channels_count);
+#ifndef CONFIG_STMMAC_NETWORK_PROXY
 	struct stmmac_rx_queue *rx_q;
 	struct stmmac_tx_queue *tx_q;
+#endif
 	u32 chan = 0;
 	int atds = 0;
 	int ret = 0;
@@ -2292,11 +2297,17 @@ static int stmmac_init_dma_engine(struct stmmac_priv *priv)
 	if (priv->extend_desc && (priv->mode == STMMAC_RING_MODE))
 		atds = 1;
 
-	ret = stmmac_reset(priv, priv->ioaddr);
-	if (ret) {
-		dev_err(priv->device, "Failed to reset the dma\n");
-		return ret;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	if (!priv->networkproxy_exit) {
+#endif
+		ret = stmmac_reset(priv, priv->ioaddr);
+		if (ret) {
+			dev_err(priv->device, "Failed to reset the dma\n");
+			return ret;
+		}
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
 	}
+#endif
 
 	/* DMA Configuration */
 	stmmac_dma_init(priv, priv->ioaddr, priv->plat->dma_cfg, atds);
@@ -2307,7 +2318,9 @@ static int stmmac_init_dma_engine(struct stmmac_priv *priv)
 	/* DMA CSR Channel configuration */
 	for (chan = 0; chan < dma_csr_ch; chan++)
 		stmmac_init_chan(priv, priv->ioaddr, priv->plat->dma_cfg, chan);
-
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	stmmac_config_dma_channel(priv);
+#else
 	/* DMA RX Channel Configuration */
 	for (chan = 0; chan < rx_channels_count; chan++) {
 		rx_q = &priv->rx_queue[chan];
@@ -2333,6 +2346,7 @@ static int stmmac_init_dma_engine(struct stmmac_priv *priv)
 		stmmac_set_tx_tail_ptr(priv, priv->ioaddr,
 				       tx_q->tx_tail_addr, chan);
 	}
+#endif /* ndef CONFIG_STMMAC_NETWORK_PROXY */
 
 	return ret;
 }
@@ -3093,6 +3107,11 @@ static int stmmac_open(struct net_device *dev)
 	stmmac_enable_all_queues(priv);
 	stmmac_start_all_queues(priv);
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	if (priv->plat->has_netproxy)
+		stmmac_netproxy_register(dev);
+#endif
+
 	return 0;
 
 phy_conv_error:
@@ -3170,6 +3189,11 @@ static int stmmac_release(struct net_device *dev)
 
 	stmmac_tsn_hw_unsetup(priv, priv->hw, dev);
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	if (priv->plat->has_netproxy)
+		stmmac_netproxy_deregister(dev);
+#endif
+
 	return 0;
 }
 
@@ -5258,6 +5282,70 @@ int stmmac_dvr_remove(struct device *dev)
 }
 EXPORT_SYMBOL_GPL(stmmac_dvr_remove);
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+/**
+ * stmmac_suspend_common - suspend common callback
+ * @priv: driver private structure
+ * @ndev: net device structure
+ * Description: this is the function to suspend the device and it is called
+ * by the platform driver to stop the network queue, release the resources,
+ * clean and release driver resources.
+ */
+int stmmac_suspend_common(struct stmmac_priv *priv, struct net_device *ndev)
+{
+	if (!ndev || !netif_running(ndev))
+		return 0;
+
+	if (ndev->phydev)
+		phy_disable_interrupts(ndev->phydev);
+
+	mutex_lock(&priv->lock);
+
+	netif_device_detach(ndev);
+	stmmac_stop_all_queues(priv);
+
+	stmmac_disable_all_queues(priv);
+
+	/* Stop TX/RX DMA */
+	stmmac_stop_all_dma(priv);
+	stmmac_stop_mac_tx(priv, priv->ioaddr);
+
+	mutex_unlock(&priv->lock);
+
+	priv->speed = SPEED_UNKNOWN;
+	return 0;
+}
+EXPORT_SYMBOL_GPL(stmmac_suspend_common);
+
+/**
+ * stmmac_suspend_main - suspend main callback
+ * @priv: driver private structure
+ * @ndev: net device structure
+ * Description: suspend and program the PMT register (for WoL).
+ */
+int stmmac_suspend_main(struct stmmac_priv *priv, struct net_device *ndev)
+{
+	stmmac_suspend_common(priv, ndev);
+
+	/* Enable Power down mode by programming the PMT regs */
+	mutex_lock(&priv->lock);
+	if (device_may_wakeup(priv->device)) {
+		stmmac_pmt(priv, priv->hw, priv->wolopts);
+		priv->irq_wake = 1;
+	} else {
+		stmmac_mac_set(priv, priv->ioaddr, false);
+		pinctrl_pm_select_sleep_state(priv->device);
+		/* Disable clock in case of PWM is off */
+		clk_disable(priv->plat->pclk);
+		clk_disable(priv->plat->stmmac_clk);
+	}
+	mutex_unlock(&priv->lock);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(stmmac_suspend_main);
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
+
 /**
  * stmmac_suspend - suspend callback
  * @dev: device pointer
@@ -5269,7 +5357,9 @@ int stmmac_suspend(struct device *dev)
 {
 	struct net_device *ndev = dev_get_drvdata(dev);
 	struct stmmac_priv *priv = netdev_priv(ndev);
-
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	stmmac_pm_suspend(priv, priv, ndev);
+#else
 	if (!ndev || !netif_running(ndev))
 		return 0;
 
@@ -5310,6 +5400,8 @@ int stmmac_suspend(struct device *dev)
 	mutex_unlock(&priv->lock);
 
 	priv->speed = SPEED_UNKNOWN;
+#endif /* ndef CONFIG_STMMAC_NETWORK_PROXY */
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(stmmac_suspend);
@@ -5340,6 +5432,125 @@ static void stmmac_reset_queues_param(struct stmmac_priv *priv)
 	}
 }
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+/**
+ * stmmac_resume_common - common resume callback
+ * @priv: driver private structure
+ * @ndev: net device structure
+ * Description: when resume this function is invoked to setup the DMA and CORE
+ * in a usable state.
+ */
+int stmmac_resume_common(struct stmmac_priv *priv, struct net_device *ndev)
+{
+	mutex_lock(&priv->lock);
+
+	stmmac_reset_queues_param(priv);
+
+	stmmac_clear_descriptors(priv);
+
+	stmmac_hw_setup(ndev, false);
+	stmmac_init_coalesce(priv);
+	stmmac_set_rx_mode(ndev);
+
+	stmmac_restore_hw_vlan_rx_fltr(priv, ndev, priv->hw);
+
+	stmmac_enable_all_queues(priv);
+
+	stmmac_start_all_queues(priv);
+
+	mutex_unlock(&priv->lock);
+
+	if (ndev->phydev)
+		phy_enable_interrupts(ndev->phydev);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(stmmac_resume_common);
+
+/**
+ * stmmac_resume_main - main resume callback
+ * @priv: driver private structure
+ * @ndev: net device structure
+ * Description: program the PMT register (for WoL) and resume
+ */
+int stmmac_resume_main(struct stmmac_priv *priv, struct net_device *ndev)
+{
+	/* Power Down bit, into the PM register, is cleared
+	 * automatically as soon as a magic packet or a Wake-up frame
+	 * is received. Anyway, it's better to manually clear
+	 * this bit because it can generate problems while resuming
+	 * from another devices (e.g. serial console).
+	 */
+	if (device_may_wakeup(priv->device)) {
+		mutex_lock(&priv->lock);
+		stmmac_pmt(priv, priv->hw, 0);
+		mutex_unlock(&priv->lock);
+		priv->irq_wake = 0;
+	} else {
+		pinctrl_pm_select_default_state(priv->device);
+		/* enable the clk previously disabled */
+		clk_enable(priv->plat->stmmac_clk);
+		clk_enable(priv->plat->pclk);
+		/* reset the phy so that it's ready */
+		if (priv->mii)
+			stmmac_mdio_reset(priv->mii);
+	}
+
+	if (!netif_running(ndev))
+		return 0;
+
+	netif_device_attach(ndev);
+
+	stmmac_resume_common(priv, ndev);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(stmmac_resume_main);
+
+int stmmac_config_dma_channel(struct stmmac_priv *priv)
+{
+	u32 rx_channels_count = priv->plat->rx_queues_to_use;
+	u32 tx_channels_count = priv->plat->tx_queues_to_use;
+	struct stmmac_rx_queue *rx_q;
+	struct stmmac_tx_queue *tx_q;
+	u32 chan = 0;
+	int ret = 0;
+
+	if (!priv->plat->dma_cfg || !priv->plat->dma_cfg->pbl) {
+		dev_err(priv->device, "Invalid DMA configuration\n");
+		return -EINVAL;
+	}
+
+	/* DMA RX Channel Configuration */
+	for (chan = 0; chan < rx_channels_count; chan++) {
+		rx_q = &priv->rx_queue[chan];
+
+		stmmac_init_rx_chan(priv, priv->ioaddr, priv->plat->dma_cfg,
+				    rx_q->dma_rx_phy, chan);
+
+		rx_q->rx_tail_addr = rx_q->dma_rx_phy +
+				     (priv->dma_rx_size *
+				      sizeof(struct dma_desc));
+		stmmac_set_rx_tail_ptr(priv, priv->ioaddr,
+				       rx_q->rx_tail_addr, chan);
+	}
+
+	/* DMA TX Channel Configuration */
+	for (chan = 0; chan < tx_channels_count; chan++) {
+		tx_q = &priv->tx_queue[chan];
+
+		stmmac_init_tx_chan(priv, priv->ioaddr, priv->plat->dma_cfg,
+				    tx_q->dma_tx_phy, chan);
+
+		tx_q->tx_tail_addr = tx_q->dma_tx_phy;
+		stmmac_set_tx_tail_ptr(priv, priv->ioaddr,
+				       tx_q->tx_tail_addr, chan);
+	}
+
+	return ret;
+}
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
+
 /**
  * stmmac_resume - resume callback
  * @dev: device pointer
@@ -5350,7 +5561,9 @@ int stmmac_resume(struct device *dev)
 {
 	struct net_device *ndev = dev_get_drvdata(dev);
 	struct stmmac_priv *priv = netdev_priv(ndev);
-
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	stmmac_pm_resume(priv, priv, ndev);
+#else
 	if (!netif_running(ndev))
 		return 0;
 
@@ -5396,6 +5609,7 @@ int stmmac_resume(struct device *dev)
 	mutex_unlock(&priv->lock);
 
 	phylink_start(priv->phylink);
+#endif /* ndef CONFIG_STMMAC_NETWORK_PROXY */
 
 	return 0;
 }
@@ -5474,6 +5688,13 @@ static void __exit stmmac_exit(void)
 #endif
 }
 
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+const struct stmmac_pm_ops dwmac_pm_ops = {
+	.suspend = stmmac_suspend_main,
+	.resume = stmmac_resume_main,
+};
+#endif
+
 module_init(stmmac_init)
 module_exit(stmmac_exit)
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
new file mode 100644
index 000000000000..9e4f408e8bea
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.c
@@ -0,0 +1,256 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2018, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License, version 2,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Author: Lay, Kuan Loon <kuan.loon.lay@intel.com>
+ * Author: Ong, Boon Leong <boon.leong.ong@intel.com>
+ */
+#include <linux/workqueue.h>
+#include <linux/semaphore.h>
+#include <linux/netdevice.h>
+#include <linux/stmmac.h>
+#include <linux/network_proxy.h>
+#include "stmmac.h"
+#include "stmmac_platform.h"
+#include "stmmac_netproxy.h"
+
+/* network device context attached to network proxy framework */
+static struct np_netdev np_netdev = { 0 };
+static struct np_shm np_shm = { NULL };
+
+/**
+ * netprox_submit_a2h_task - stmmac network proxy submit a2h task
+ * @work: work item to retrieve stmmac_priv
+ * Description: Add task to continue processing packets sent from
+ * Network Proxy Agent to Host.
+ */
+static void netprox_submit_a2h_task(struct work_struct *work)
+{
+	struct stmmac_priv *priv = container_of(work, struct stmmac_priv,
+						netprox_task);
+	struct sk_buff *skb;
+	struct np_a2h_pool_header a2h_hdr;
+	struct np_a2h_packet_header a2h_pkt_hdr;
+	void __iomem *pkt_content;
+	int i;
+
+	struct net_device *ndev = priv->dev;
+	struct stmmac_channel *ch = &priv->channel[0];
+	int a2h_hdr_len = sizeof(struct np_a2h_pool_header);
+	int a2h_pkt_hdr_len = sizeof(struct np_a2h_packet_header);
+	void __iomem *a2h_mem_ptr = priv->ioaddr + NETWORK_PROXY_SHMEM_OFFSET;
+
+	if (!netif_running(ndev)) {
+		netdev_err(priv->dev,
+			   "Netprox exit failed: netdev is not running\n");
+		return;
+	}
+
+	netif_device_attach(ndev);
+
+	/* Get A2H memory pool header */
+	memcpy_fromio((void *)&a2h_hdr, a2h_mem_ptr, a2h_hdr_len);
+	a2h_mem_ptr += a2h_hdr_len;
+
+	/* TODO: Create workqueue and mutex for each packet */
+	/* Attach A2H Rx buffer to sk_buff then use napi_gro_receive() */
+	for (i = 0; i < a2h_hdr.total_packets; i++) {
+		/* Get A2H packet header */
+		memcpy_fromio((void *)&a2h_pkt_hdr, a2h_mem_ptr,
+			      a2h_pkt_hdr_len);
+		pkt_content = a2h_mem_ptr + a2h_pkt_hdr_len;
+
+		/* Once the length of A2H packet is found to be equal to zero,
+		 * all the remaining A2H packets will be ignored.
+		 */
+		if (!a2h_pkt_hdr.pkt_len) {
+			netdev_err(priv->dev,
+				   "Netprox failed to submit a2h packets.\n");
+			goto err_skb;
+		}
+
+		skb = __netdev_alloc_skb_ip_align(priv->dev,
+						  a2h_pkt_hdr.pkt_len,
+						  GFP_KERNEL);
+		if (!skb) {
+			netdev_err(priv->dev,
+				   "Netprox failed to submit a2h packets.\n");
+			goto err_skb;
+		}
+
+		/* Get A2H packet content */
+		skb_copy_to_linear_data(skb, pkt_content, a2h_pkt_hdr.pkt_len);
+
+		skb_put(skb, a2h_pkt_hdr.pkt_len);
+		skb->protocol = eth_type_trans(skb, priv->dev);
+		skb->ip_summed = CHECKSUM_UNNECESSARY;
+
+		/* Submit skbuf to queue 0 */
+		napi_gro_receive(&ch->rx_napi, skb);
+
+		/* Move the pointer the next A2H packet header */
+		a2h_mem_ptr += NP_A2H_PKT_MAX + a2h_pkt_hdr_len;
+	}
+
+err_skb:
+	priv->networkproxy_exit = 1;
+	stmmac_resume_common(priv, ndev);
+	priv->networkproxy_exit = 0;
+}
+
+/*  netproxy_irq - Network Proxy interrupt handling
+ *  @irq: interrupt number.
+ *  @dev_id: to pass the net device pointer.
+ *  Description: ISR to service Network Proxy interrupt.
+ */
+irqreturn_t netproxy_irq(int irq, void *dev_id)
+{
+	struct net_device *ndev = (struct net_device *)dev_id;
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	u32 value;
+
+	value = readl(priv->ioaddr + GBE_PROXYMODE_EXIT_STS_REG);
+	writel(value, priv->ioaddr + GBE_PROXYMODE_EXIT_STS_REG);
+
+	queue_work(priv->netprox_wq, &priv->netprox_task);
+
+	return IRQ_HANDLED;
+}
+
+/**
+ * stmmac_netprox_suspend - stmmac suspend function for
+ * ECMA-393 Network Proxy technology
+ * @priv: driver private structure
+ * @ndev: net device structure
+ * Description: The common function entry to trigger stmmac driver to
+ * enter Network Proxy mode. This function can be called from below:-
+ * a) Linux PM :- echo mem > /sys/power/state
+ * b) User-space Network Proxy library
+ */
+static int stmmac_netprox_suspend(struct stmmac_priv *priv,
+				  struct net_device *ndev)
+{
+	int result = 1;
+	int retry = 5;
+
+	/* do generic suspend if Network Proxy Agent is not ready */
+	if (!netprox_agent_is_ready()) {
+		netdev_err(priv->dev, "Netprox is not ready\n");
+		return stmmac_suspend_main(priv, ndev);
+	}
+
+	/* Check MAC is not WIP in frame transmission from MTL Tx */
+	do {
+		result = stmmac_mtl_tx_completed(priv, priv->ioaddr,
+						 priv->plat->tx_queues_to_use);
+		usleep_range(1000, 2000);
+	} while (retry-- > 0 && result);
+
+	/* Message Network Proxy Agent to enter proxy mode */
+	netprox_host_proxy_enter();
+
+	stmmac_suspend_common(priv, ndev);
+
+	/* Change the destination of MAC controller interrupt and DMA transfer
+	 * from Network Proxy Host to Agent.
+	 */
+	writel(GBE_PROXYMODE_ENTER, priv->ioaddr + GBE_PROXYMODE_REG);
+
+	return 0;
+}
+
+/**
+ * stmmac_netprox_resume - stmmac resume function for
+ * ECMA-393 Network Proxy technology
+ * @priv: driver private structure
+ * @ndev: net device structure
+ * Description: The common function entry to trigger stmmac driver to
+ * exit Network Proxy mode. This function can be called from below:-
+ * a) Network Proxy Host message Agent to exit proxy mode
+ *
+ */
+static int stmmac_netprox_resume(struct stmmac_priv *priv,
+				 struct net_device *ndev)
+{
+	/* do generic resume if Network Proxy Agent is not ready */
+	if (!netprox_agent_is_ready()) {
+		netdev_err(priv->dev, "Netprox is not ready\n");
+		return stmmac_resume_main(priv, ndev);
+	}
+
+	/* Message Network Proxy Agent to exit Proxy mode */
+	netprox_host_proxy_exit();
+
+	return 0;
+}
+
+/**
+ * stmmac_netproxy_enter - stmmac network proxy enter function
+ * @ndev: net device structure
+ * Description: call from network proxy framework
+ */
+static int stmmac_netproxy_enter(struct net_device *ndev)
+{
+	struct stmmac_priv *priv = netdev_priv(ndev);
+
+	return stmmac_netprox_suspend(priv, ndev);
+}
+
+/**
+ * stmmac_netproxy_register - register to network proxy framework
+ * @ndev: net device structure
+ * Description: register to network proxy framework after stmmac_open() success
+ */
+int stmmac_netproxy_register(struct net_device *ndev)
+{
+	struct stmmac_priv *priv = netdev_priv(ndev);
+
+	/* Allocate workqueue */
+	priv->netprox_wq = create_singlethread_workqueue("netprox_wq");
+	if (!priv->netprox_wq) {
+		dev_err(priv->device, "failed to create netprox workqueue\n");
+		return -1;
+	}
+
+	INIT_WORK(&priv->netprox_task, netprox_submit_a2h_task);
+
+	np_netdev.netdev = ndev;
+	np_netdev.proxy_enter = &stmmac_netproxy_enter;
+
+	/* TODO: check registration is success */
+	netprox_register_netdev(&np_netdev, NULL, 0);
+
+	np_shm.shm_ptr = (char *)priv->ioaddr + NETWORK_PROXY_SHMEM_OFFSET;
+	np_shm.shm_max_len = NETWORK_PROXY_SHMEM_LEN;
+	netprox_register_shm(&np_shm);
+
+	return 0;
+}
+EXPORT_SYMBOL(stmmac_netproxy_register);
+
+int stmmac_netproxy_deregister(struct net_device *ndev)
+{
+	struct stmmac_priv *priv = netdev_priv(ndev);
+
+	if (priv->netprox_wq)
+		destroy_workqueue(priv->netprox_wq);
+
+	return 0;
+}
+EXPORT_SYMBOL(stmmac_netproxy_deregister);
+
+const struct stmmac_pm_ops dwmac_netprox_pm_ops = {
+	.suspend = stmmac_netprox_suspend,
+	.resume = stmmac_netprox_resume,
+};
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.h
new file mode 100644
index 000000000000..413b02354adc
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_netproxy.h
@@ -0,0 +1,38 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2018, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License, version 2,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Author: Lay, Kuan Loon <kuan.loon.lay@intel.com>
+ */
+
+#ifndef __STMMAC_NETWORK_PROXY_H__
+#define __STMMAC_NETWORK_PROXY_H__
+
+/* Proxy mode register in GBE MISC for enter Proxy Mode */
+#define GBE_PROXYMODE_REG		0x10600
+#define GBE_PROXYMODE_ENTER		BIT(0)
+
+/* Proxy mode exit interrupt register. */
+#define GBE_PROXYMODE_EXIT_STS_REG	0x10604
+#define GBE_PROXYMODE_EXIT_STS_TRUE	BIT(0)
+
+/* Shared memory for A2H Packets */
+#define NETWORK_PROXY_SHMEM_OFFSET	(128 * 1024)
+#define NETWORK_PROXY_SHMEM_LEN		(128 * 1024)
+
+int stmmac_netproxy_register(struct net_device *netdev);
+int stmmac_netproxy_deregister(struct net_device *netdev);
+irqreturn_t netproxy_irq(int irq, void *dev_id);
+
+#endif /* __STMMAC_NETWORK_PROXY_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index a1c5d2a5d493..051a0cb57084 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -349,6 +349,14 @@ static int ehl_pse0_common_data(struct pci_dev *pdev,
 	plat->bus_id = 2;
 	plat->phy_addr = 1;
 	ehl_pse_work_around(pdev, plat);
+
+	/* store A2H packets in L2 SRAM, access through BAR0 + 128KB */
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+#if (CONFIG_STMMAC_NETWORK_PROXY_PORT == 0)
+	plat->has_netproxy = 1;
+#endif /* CONFIG_STMMAC_NETWORK_PROXY_PORT */
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
+
 	return ehl_common_data(pdev, plat);
 }
 
@@ -380,6 +388,14 @@ static int ehl_pse1_common_data(struct pci_dev *pdev,
 	plat->bus_id = 3;
 	plat->phy_addr = 1;
 	ehl_pse_work_around(pdev, plat);
+
+	/* store A2H packets in L2 SRAM, access through BAR0 + 128KB */
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+#if (CONFIG_STMMAC_NETWORK_PROXY_PORT == 1)
+	plat->has_netproxy = 1;
+#endif /* CONFIG_STMMAC_NETWORK_PROXY_PORT */
+#endif /* CONFIG_STMMAC_NETWORK_PROXY */
+
 	return ehl_common_data(pdev, plat);
 }
 
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index f7c0914fb3b3..cd6a4c081da6 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -189,6 +189,9 @@ struct plat_stmmacenet_data {
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
 	int has_xgmac;
+#ifdef CONFIG_STMMAC_NETWORK_PROXY
+	int has_netproxy;
+#endif
 	bool multi_msi_en;
 	int msi_mac_vec;
 	int msi_wol_vec;
-- 
2.17.1

