From 11ca857c01baabf943ae0fe2f08dbecb8f317cc0 Mon Sep 17 00:00:00 2001
From: Wei Liu <weix.w.liu@intel.com>
Date: Fri, 30 Aug 2019 15:31:31 +0800
Subject: [PATCH 146/150] acrn/vhm: use refcount_t type and it's APIs instead
 of atomic_t's in vhm

linux kernel improvement atomic_t and it's api to refcount_t, this patch will use
the refcount to replace the atomic

Reported-by: kbuild test robot <lkp@intel.com>
Reported-by: Julia Lawall <julia.lawall@lip6.fr>
Reported-by: Elena Reshetova <elena.reshetova@intel.com>
Signed-off-by: Wei Liu <weix.w.liu@intel.com>
---
 drivers/acrn/acrn_trace.c       |  8 ++++----
 drivers/char/vhm/vhm_dev.c      |  4 ++--
 drivers/vhm/vhm_ioreq.c         | 10 +++++-----
 drivers/vhm/vhm_vm_mngt.c       |  6 +++---
 include/linux/vhm/vhm_vm_mngt.h |  5 +++--
 5 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/drivers/acrn/acrn_trace.c b/drivers/acrn/acrn_trace.c
index 16c690da67cb..890d2ab889b3 100644
--- a/drivers/acrn/acrn_trace.c
+++ b/drivers/acrn/acrn_trace.c
@@ -87,7 +87,7 @@ struct acrn_trace {
 	struct miscdevice miscdev;
 	char name[24];
 	shared_buf_t *sbuf;
-	atomic_t open_cnt;
+	refcount_t open_cnt;
 	uint16_t pcpu_id;
 };
 
@@ -110,10 +110,10 @@ static int acrn_trace_open(struct inode *inode, struct file *filep)
 	pr_debug("%s, cpu %d\n", __func__, dev->pcpu_id);
 
 	/* More than one reader at the same time could get data messed up */
-	if (atomic_read(&dev->open_cnt))
+	if (refcount_read(&dev->open_cnt))
 		return -EBUSY;
 
-	atomic_inc(&dev->open_cnt);
+	refcount_inc(&dev->open_cnt);
 
 	return 0;
 }
@@ -130,7 +130,7 @@ static int acrn_trace_release(struct inode *inode, struct file *filep)
 
 	pr_debug("%s, cpu %d\n", __func__, dev->pcpu_id);
 
-	atomic_dec(&dev->open_cnt);
+	refcount_dec(&dev->open_cnt);
 
 	return 0;
 }
diff --git a/drivers/char/vhm/vhm_dev.c b/drivers/char/vhm/vhm_dev.c
index 54aaa6662945..3c8b542e455c 100644
--- a/drivers/char/vhm/vhm_dev.c
+++ b/drivers/char/vhm/vhm_dev.c
@@ -118,7 +118,7 @@ static int vhm_dev_open(struct inode *inodep, struct file *filep)
 	INIT_LIST_HEAD(&vm->ioreq_client_list);
 	spin_lock_init(&vm->ioreq_client_lock);
 
-	atomic_set(&vm->refcnt, 1);
+	refcount_set(&vm->refcnt, 1);
 	write_lock_bh(&vhm_vm_list_lock);
 	vm_list_add(&vm->list);
 	write_unlock_bh(&vhm_vm_list_lock);
@@ -291,7 +291,7 @@ static long vhm_dev_ioctl(struct file *filep,
 			acrn_mempool_free(cv);
 			return -EFAULT;
 		}
-		atomic_inc(&vm->vcpu_num);
+		refcount_inc(&vm->vcpu_num);
 		acrn_mempool_free(cv);
 
 		return ret;
diff --git a/drivers/vhm/vhm_ioreq.c b/drivers/vhm/vhm_ioreq.c
index 63daa57bb582..b6763b0d69ab 100644
--- a/drivers/vhm/vhm_ioreq.c
+++ b/drivers/vhm/vhm_ioreq.c
@@ -133,7 +133,7 @@ struct ioreq_client {
 	int pci_bus;
 	int pci_dev;
 	int pci_func;
-	atomic_t refcnt;
+	refcount_t refcnt;
 	/* Add the vhm_vm that contains the ioreq_client */
 	struct vhm_vm *ref_vm;
 };
@@ -162,7 +162,7 @@ static int alloc_client(void)
 	client = kzalloc(sizeof(struct ioreq_client), GFP_KERNEL);
 	if (!client)
 		return -ENOMEM;
-	atomic_set(&client->refcnt, 1);
+	refcount_set(&client->refcnt, 1);
 
 	spin_lock_bh(&client_lock);
 	ret = idr_alloc_cyclic(&idr_client, client, 1, MAX_CLIENT, GFP_NOWAIT);
@@ -186,7 +186,7 @@ static struct ioreq_client *acrn_ioreq_get_client(int client_id)
 	spin_lock_bh(&client_lock);
 	obj = idr_find(&idr_client, client_id);
 	if (obj)
-		atomic_inc(&obj->refcnt);
+		refcount_inc(&obj->refcnt);
 	spin_unlock_bh(&client_lock);
 
 	return obj;
@@ -195,7 +195,7 @@ static struct ioreq_client *acrn_ioreq_get_client(int client_id)
 
 static void acrn_ioreq_put_client(struct ioreq_client *client)
 {
-	if (atomic_dec_and_test(&client->refcnt)) {
+	if (refcount_dec_and_test(&client->refcnt)) {
 		struct vhm_vm *ref_vm = client->ref_vm;
 		/* The client should be released when refcnt = 0 */
 		/* TBD: Do we need to free the other resources? */
@@ -951,7 +951,7 @@ int acrn_ioreq_distribute_request(struct vhm_vm *vm)
 	struct ioreq_client *client;
 	int i, vcpu_num;
 
-	vcpu_num = atomic_read(&vm->vcpu_num);
+	vcpu_num = refcount_read(&vm->vcpu_num);
 	for (i = 0; i < vcpu_num; i++) {
 		req = vm->req_buf->req_queue + i;
 
diff --git a/drivers/vhm/vhm_vm_mngt.c b/drivers/vhm/vhm_vm_mngt.c
index f75692719924..ebb9536ff87a 100644
--- a/drivers/vhm/vhm_vm_mngt.c
+++ b/drivers/vhm/vhm_vm_mngt.c
@@ -73,7 +73,7 @@ struct vhm_vm *find_get_vm(unsigned long vmid)
 	read_lock_bh(&vhm_vm_list_lock);
 	list_for_each_entry(vm, &vhm_vm_list, list) {
 		if (vm->vmid == vmid) {
-			atomic_inc(&vm->refcnt);
+			refcount_inc(&vm->refcnt);
 			read_unlock_bh(&vhm_vm_list_lock);
 			return vm;
 		}
@@ -85,7 +85,7 @@ EXPORT_SYMBOL_GPL(find_get_vm);
 
 void put_vm(struct vhm_vm *vm)
 {
-	if (atomic_dec_and_test(&vm->refcnt)) {
+	if (refcount_dec_and_test(&vm->refcnt)) {
 		free_guest_mem(vm);
 
 		if (vm->req_buf && vm->pg) {
@@ -102,7 +102,7 @@ EXPORT_SYMBOL_GPL(put_vm);
 
 void get_vm(struct vhm_vm *vm)
 {
-	atomic_inc(&vm->refcnt);
+	refcount_inc(&vm->refcnt);
 }
 EXPORT_SYMBOL_GPL(get_vm);
 
diff --git a/include/linux/vhm/vhm_vm_mngt.h b/include/linux/vhm/vhm_vm_mngt.h
index d55538be423b..5cfaf2b23f35 100644
--- a/include/linux/vhm/vhm_vm_mngt.h
+++ b/include/linux/vhm/vhm_vm_mngt.h
@@ -64,6 +64,7 @@
 #include <linux/mutex.h>
 #include <linux/spinlock_types.h>
 #include <linux/rwlock_types.h>
+#include <linux/refcount.h>
 
 extern struct list_head vhm_vm_list;
 extern rwlock_t vhm_vm_list_lock;
@@ -104,10 +105,10 @@ struct vhm_vm {
 	struct list_head list;
 	unsigned long vmid;
 	int ioreq_fallback_client;
-	atomic_t refcnt;
+	refcount_t refcnt;
 	struct mutex hugepage_lock;
 	struct hlist_head hugepage_hlist[HUGEPAGE_HLIST_ARRAY_SIZE];
-	atomic_t vcpu_num;
+	refcount_t vcpu_num;
 	int max_gfn;
 	spinlock_t ioreq_client_lock;
 	struct list_head ioreq_client_list;
-- 
2.17.1

