From c29d7e1364283487d0b9d470c52000e25287abfe Mon Sep 17 00:00:00 2001
From: Zhipeng Gong <zhipeng.gong@intel.com>
Date: Mon, 22 Oct 2018 16:53:59 +0800
Subject: [PATCH 071/100] drm/i915/gvt: Support vgpu workload priority config

Add support to configure vgpu workload priority, make the param
writable to facilitate performance issue debug.

Signed-off-by: Zhipeng Gong <zhipeng.gong@intel.com>
Signed-off-by: Min He <min.he@intel.com>

V2: rebased to 4.19
Tracked-On: projectacrn/acrn-hypervisor#1552
Signed-off-by: Xinyun Liu <xinyun.liu@intel.com>
Reviewed-by: Min He <min.he@intel.com>
---
 drivers/gpu/drm/i915/gvt/scheduler.c | 12 ++++++++++++
 drivers/gpu/drm/i915/i915_params.c   |  4 ++++
 drivers/gpu/drm/i915/i915_params.h   |  4 +++-
 3 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/gvt/scheduler.c b/drivers/gpu/drm/i915/gvt/scheduler.c
index 92eb7aa08cbe..9700bce16c01 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.c
+++ b/drivers/gpu/drm/i915/gvt/scheduler.c
@@ -444,6 +444,15 @@ int intel_gvt_scan_and_shadow_workload(struct intel_vgpu_workload *workload)
 	return ret;
 }
 
+static int sanitize_priority(int priority)
+{
+	if (priority > I915_CONTEXT_MAX_USER_PRIORITY)
+		return I915_CONTEXT_MAX_USER_PRIORITY;
+	else if (priority < I915_CONTEXT_MIN_USER_PRIORITY)
+		return I915_CONTEXT_MIN_USER_PRIORITY;
+	return priority;
+}
+
 static void release_shadow_batch_buffer(struct intel_vgpu_workload *workload);
 
 static int prepare_shadow_batch_buffer(struct intel_vgpu_workload *workload)
@@ -690,6 +699,7 @@ static int dispatch_workload(struct intel_vgpu_workload *workload)
 	struct i915_request *rq;
 	int ring_id = workload->ring_id;
 	int ret;
+	struct intel_vgpu_submission *s = &vgpu->submission;
 
 	gvt_dbg_sched("ring id %d prepare to dispatch workload %p\n",
 		ring_id, workload);
@@ -725,6 +735,8 @@ static int dispatch_workload(struct intel_vgpu_workload *workload)
 	if (!IS_ERR_OR_NULL(workload->req)) {
 		gvt_dbg_sched("ring id %d submit workload to i915 %p\n",
 				ring_id, workload->req);
+		i915_modparams.gvt_workload_priority = sanitize_priority(i915_modparams.gvt_workload_priority);
+		s->shadow[workload->ring_id]->gem_context->sched.priority = i915_modparams.gvt_workload_priority;
 		i915_request_add(workload->req);
 		workload->dispatched = true;
 	}
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index fe4ab6f6aeac..5429a44f7370 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -209,6 +209,10 @@ i915_param_named(enable_pvmmio, uint, 0400,
 	"Enable pv mmio feature and set pvmmio level, default 1."
 	"This parameter could only set from host, guest value is set through vgt_if");
 
+i915_param_named(gvt_workload_priority, int, 0600,
+		"Set GVT-g workload priority, (range: (-1023, 1023), default: 0, "
+		"more positive value means higher priority).");
+
 static __always_inline void _print_param(struct drm_printer *p,
 					 const char *name,
 					 const char *type,
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index d27101d72a6d..548c3bcf4a0b 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -81,7 +81,9 @@ struct drm_printer;
 	param(int, domain_scaler_owner, 0x11100) \
 	param(unsigned int, enable_pvmmio, \
 			PVMMIO_ELSP_SUBMIT | PVMMIO_PPGTT_UPDATE) \
-	param(bool, enable_gvt, false)
+	param(bool, enable_gvt, false) \
+	param(int, gvt_workload_priority, 0)
+
 
 #define MEMBER(T, member, ...) T member;
 struct i915_params {
-- 
2.17.1

