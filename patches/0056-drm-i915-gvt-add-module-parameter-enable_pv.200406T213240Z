From f31725ecd37dbf04fac0dbc9e95ba75125310af9 Mon Sep 17 00:00:00 2001
From: Pei Zhang <pei.zhang@intel.com>
Date: Fri, 14 Sep 2018 16:10:19 +0800
Subject: [PATCH 056/100] drm/i915/gvt: add module parameter enable_pvmmio

This uint type module parameter is used to control the pvmmio
features for MMIO emulation in GVT. This parameter is default 0.
Its permission type is 0400 which means user could only change its
value through the cmdline, this is to prevent the dynamic modification
during runtime which would break the pvmmio internal logic.

Notice: this patch is required to be applied to guest kernel.

Signed-off-by: Pei Zhang <pei.zhang@intel.com>
Signed-off-by: Jiang, Fei <fei.jiang@intel.com>
Acknowledged-by: Singh, Satyeshwar <satyeshwar.singh@intel.com>
Reviewed-by: He, Min <min.he@intel.com>
Reviewed-by: Jiang, Fei <fei.jiang@intel.com>
Reviewed-by: Dong, Eddie <eddie.dong@intel.com>
Tested-by: Dong, Eddie <eddie.dong@intel.com>
Signed-off-by: Liu Xinyun <xinyun.liu@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.c    | 18 ++++++++++++++++++
 drivers/gpu/drm/i915/i915_drv.h    |  2 ++
 drivers/gpu/drm/i915/i915_params.c |  4 ++++
 drivers/gpu/drm/i915/i915_params.h |  1 +
 drivers/gpu/drm/i915/i915_pvinfo.h | 13 ++++++++++++-
 drivers/gpu/drm/i915/i915_vgpu.c   |  7 +++++++
 6 files changed, 44 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 1fe24bc61c7e..cc4583f7d6d1 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -596,6 +596,21 @@ static int i915_driver_mmio_probe(struct drm_i915_private *dev_priv)
 
 	intel_uc_init_mmio(&dev_priv->gt.uc);
 
+	if (intel_vgpu_active(dev_priv) && i915_modparams.enable_pvmmio) {
+		u32 bar = 0;
+		u32 mmio_size = 2 * 1024 * 1024;
+
+		/* Map a share page from the end of 2M mmio region in bar0. */
+		dev_priv->shared_page = (struct gvt_shared_page *)
+			pci_iomap_range(dev_priv->drm.pdev, bar,
+			mmio_size, PAGE_SIZE);
+		if (dev_priv->shared_page == NULL) {
+			ret = -EIO;
+			DRM_ERROR("I915: failed to map share page.\n");
+			goto err_uncore;
+		}
+	}
+
 	ret = intel_engines_init_mmio(&dev_priv->gt);
 	if (ret)
 		goto err_uncore;
@@ -603,6 +618,9 @@ static int i915_driver_mmio_probe(struct drm_i915_private *dev_priv)
 	return 0;
 
 err_uncore:
+	if (intel_vgpu_active(dev_priv) && dev_priv->shared_page)
+		pci_iounmap(dev_priv->drm.pdev, dev_priv->shared_page);
+
 	intel_teardown_mchbar(dev_priv);
 	intel_uncore_fini_mmio(&dev_priv->uncore);
 err_bridge:
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 6093a6c09b97..539dca10c598 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -934,6 +934,8 @@ struct drm_i915_private {
 	 */
 	resource_size_t stolen_usable_size;	/* Total size minus reserved ranges */
 
+	struct gvt_shared_page *shared_page;
+
 	struct intel_uncore uncore;
 	struct intel_uncore_mmio_debug mmio_debug;
 
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 72a026796a09..fe4ab6f6aeac 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -205,6 +205,10 @@ i915_param_named_unsafe(fake_lmem_start, ulong, 0600,
 i915_param_named(domain_scaler_owner, int, 0400,
 	"scaler owners for each domain and for each pipe ids can be from 0-F");
 
+i915_param_named(enable_pvmmio, uint, 0400,
+	"Enable pv mmio feature and set pvmmio level, default 1."
+	"This parameter could only set from host, guest value is set through vgt_if");
+
 static __always_inline void _print_param(struct drm_printer *p,
 					 const char *name,
 					 const char *type,
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index 3b359ce59a29..026f9a66c834 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -79,6 +79,7 @@ struct drm_printer;
 	param(bool, nuclear_pageflip, false) \
 	param(bool, enable_dp_mst, true) \
 	param(int, domain_scaler_owner, 0x11100) \
+	param(unsigned int, enable_pvmmio, 0) \
 	param(bool, enable_gvt, false)
 
 #define MEMBER(T, member, ...) T member;
diff --git a/drivers/gpu/drm/i915/i915_pvinfo.h b/drivers/gpu/drm/i915/i915_pvinfo.h
index e1247fe60021..8bfab0972846 100644
--- a/drivers/gpu/drm/i915/i915_pvinfo.h
+++ b/drivers/gpu/drm/i915/i915_pvinfo.h
@@ -51,6 +51,15 @@ enum vgt_g2v_type {
 	VGT_G2V_MAX,
 };
 
+#define VGPU_PVMMIO(vgpu) vgpu_vreg_t(vgpu, vgtif_reg(enable_pvmmio))
+
+/*
+ * define different levels of PVMMIO optimization
+ */
+enum pvmmio_levels {
+	PVMMIO_ELSP_SUBMIT = 0x1,
+};
+
 /*
  * VGT capabilities type
  */
@@ -108,9 +117,11 @@ struct vgt_if {
 
 	u32 execlist_context_descriptor_lo;
 	u32 execlist_context_descriptor_hi;
+	u32 enable_pvmmio;
+	u32 pv_mmio;
 	u32 scaler_owned;
 
-	u32  rsv7[0x200 - 25];    /* pad to one page */
+	u32  rsv7[0x200 - 27];    /* pad to one page */
 } __packed;
 
 #define vgtif_offset(x) (offsetof(struct vgt_if, x))
diff --git a/drivers/gpu/drm/i915/i915_vgpu.c b/drivers/gpu/drm/i915/i915_vgpu.c
index f663fdea7600..c446dbf54132 100644
--- a/drivers/gpu/drm/i915/i915_vgpu.c
+++ b/drivers/gpu/drm/i915/i915_vgpu.c
@@ -94,6 +94,13 @@ void i915_detect_vgpu(struct drm_i915_private *dev_priv)
 	dev_priv->vgpu.caps = readl(shared_area + vgtif_offset(vgt_caps));
 	dev_priv->vgpu.scaler_owned = readl(shared_area + vgtif_offset(scaler_owned));
 
+	/* If guest wants to enable pvmmio, it needs to enable it explicitly
+	 * through vgt_if interface, and then read back the enable state from
+	 * gvt layer.
+	 */
+	writel(i915_modparams.enable_pvmmio, shared_area + vgtif_offset(enable_pvmmio));
+	i915_modparams.enable_pvmmio = readl(shared_area + vgtif_offset(enable_pvmmio));
+
 	dev_priv->vgpu.active = true;
 	mutex_init(&dev_priv->vgpu.lock);
 	DRM_INFO("Virtual GPU for Intel GVT-g detected.\n");
-- 
2.17.1

