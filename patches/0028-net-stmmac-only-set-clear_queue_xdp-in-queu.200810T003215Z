From c5f1cf0a1588457c2c50b2bf7cccef51bb2b8da3 Mon Sep 17 00:00:00 2001
From: Ong Boon Leong <boon.leong.ong@intel.com>
Date: Wed, 27 May 2020 09:57:40 +0800
Subject: [PATCH 28/78] net: stmmac: only set|clear_queue_xdp() in
 queue_pair_enable()

The design and operation of XDP and SKB mode and the use of
set|clear_queue_xdp() are explained below:-

A) SKB mode --> XDP mode :-
   (1)  stmmac_queue_pair_disable():
        - perform tear-down for NAPI, IRQ, DMA and TX & RX descriptors.
   (2) old_prog = xchg(&priv->xdp_prog, prog):
        - add driver's XDP program
        - After this, stmmac_enabled_xdp() returns TRUE.
   (3) stmmac_queue_pair_enable():
        - Since stmmac_enabled_xdp() returns TRUE, we set_queue_xdp(qid).
          After this point, any call to get_tx_queue(qid) will return
          address to xdp_queue[qid - num_queue_pairs]
        - perform spin-up for TX & RX descriptors, DMA, IRQ and NAPI.

B) XDP mode --> SKB mode:-
   (1)  stmmac_queue_pair_disable():
        - HERE, get_tx_queue(qid) will still return to xdp_queue[qid]
          because we don't call clear_queue_xdp() here.
        - perform tear-down for NAPI, IRQ, DMA and TX & RX descriptors.
   (2) old_prog = xchg(&priv->xdp_prog, prog):
        - remove driver's XDP program
        - After this, stmmac_enabled_xdp() returns FALSE.
   (3) stmmac_queue_pair_enable():
        - Since stmmac_enabled_xdp() returns FALSE, and we do
          clear_queue_xdp(qid). After this point, any call to
          get_tx_queue(qid) will return address to tx_queue[qid].
        - perform spin-up for TX & RX descriptors, DMA, IRQ and NAPI.

Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 22 ++++++++++---------
 1 file changed, 12 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index daa62a7ee005..361f482b0275 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -5642,11 +5642,6 @@ static void stmmac_txrx_desc_control(struct stmmac_priv *priv, u16 qid, bool en)
 	u16 qp_num = priv->plat->num_queue_pairs;
 
 	if (en) {
-		if (stmmac_enabled_xdp(priv)) {
-			clear_queue_xdp(priv, qid);
-			set_queue_xdp(priv, qid + qp_num);
-		}
-
 		alloc_dma_rx_desc_resources_q(priv, qid);
 		alloc_dma_tx_desc_resources_q(priv, qid);
 		alloc_dma_tx_desc_resources_q(priv, qid + qp_num);
@@ -5658,11 +5653,6 @@ static void stmmac_txrx_desc_control(struct stmmac_priv *priv, u16 qid, bool en)
 		free_dma_rx_desc_resources_q(priv, qid);
 		free_dma_tx_desc_resources_q(priv, qid);
 		free_dma_tx_desc_resources_q(priv, qid + qp_num);
-
-		if (!stmmac_enabled_xdp(priv)) {
-			clear_queue_xdp(priv, qid);
-			clear_queue_xdp(priv, qid + qp_num);
-		}
 	}
 }
 
@@ -5726,6 +5716,18 @@ int stmmac_queue_pair_enable(struct stmmac_priv *priv, u16 qid)
 		return -EINVAL;
 	}
 
+	/* XDP BPF must be loaded before TX & XDP TX queue pair are enabled and
+	 * the Tx XDP queue is assigned with higher TxQ starting from
+	 * num_queue_pairs. For example, for controller with 8 HW DMA channels
+	 * and num_queue_pairs=4, then:
+	 * Tx DMA channels     = 0, 1, 2, 3
+	 * Tx XDP DMA channels = 4, 5, 6, 7
+	 */
+	if (stmmac_enabled_xdp(priv))
+		set_queue_xdp(priv, qid + qp_num);
+	else
+		clear_queue_xdp(priv, qid + qp_num);
+
 	stmmac_txrx_desc_control(priv, qid, true);
 	stmmac_txrx_ch_init(priv, qid);
 	stmmac_txrx_dma_control(priv, qid, true);
-- 
2.17.1

