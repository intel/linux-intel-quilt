From 0067848f3f0a679b31920823953942cdf6288b9e Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Sun, 4 Aug 2019 07:05:17 +0800
Subject: [PATCH 032/113] net: stmmac: enable 2.5Gbps link speed

The MAC support 2.5G mode when the PCS is in 1000BASE-T mode. The
2.5G mode of operation is functionally same as 1000BASE-T mode,
except that the clock rate is 2.5 times the original rate.
In this mode, the serdes/PHY operates at a serial baud rate of
3.125 Gbps and the PCS data path and GMII interface of the MAC
operate at 312.5 MH instead of 125 MHz.

The MAC running in 10/100/1G mode or 2.5G mode is depends on
the link speed mode in the serdes.

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac4_core.c |  1 +
 drivers/net/ethernet/stmicro/stmmac/hwif.h    |  3 ++
 .../ethernet/stmicro/stmmac/intel_serdes.c    | 38 +++++++++++++++++++
 .../ethernet/stmicro/stmmac/intel_serdes.h    | 13 +++++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 25 +++++++++++-
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  3 +-
 include/linux/stmmac.h                        |  3 +-
 7 files changed, 83 insertions(+), 3 deletions(-)

Index: b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@ -1252,6 +1252,7 @@ int dwmac4_setup(struct stmmac_priv *pri
 	mac->link.speed10 = GMAC_CONFIG_PS;
 	mac->link.speed100 = GMAC_CONFIG_FES | GMAC_CONFIG_PS;
 	mac->link.speed1000 = 0;
+	mac->link.speed2500 = GMAC_CONFIG_FES;
 	mac->link.speed_mask = GMAC_CONFIG_FES | GMAC_CONFIG_PS;
 	mac->mii.addr = GMAC_MDIO_ADDR;
 	mac->mii.data = GMAC_MDIO_DATA;
Index: b/drivers/net/ethernet/stmicro/stmmac/hwif.h
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/hwif.h
+++ b/drivers/net/ethernet/stmicro/stmmac/hwif.h
@@ -492,12 +492,15 @@ struct stmmac_ops {
 struct stmmac_serdes_ops {
 	int (*serdes_powerup)(struct net_device *ndev);
 	int (*serdes_powerdown)(struct net_device *ndev);
+	int (*speed_mode_2500)(struct net_device *ndev);
 };
 
 #define stmmac_serdes_powerup(__priv, __args...) \
 	stmmac_do_callback(__priv, serdes, serdes_powerup, __args)
 #define stmmac_serdes_powerdown(__priv, __args...) \
 	stmmac_do_callback(__priv, serdes, serdes_powerdown, __args)
+#define stmmac_speed_mode_2500(__priv, __args...) \
+	stmmac_do_callback(__priv, serdes, speed_mode_2500, __args)
 
 /* PTP and HW Timer helpers */
 struct stmmac_hwtimestamp {
Index: b/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c
+++ b/drivers/net/ethernet/stmicro/stmmac/intel_serdes.c
@@ -36,6 +36,22 @@ static int intel_serdes_powerup(struct n
 
 	serdes_phy_addr = priv->plat->intel_adhoc_addr;
 
+	/* Set the serdes rate and the PCLK rate */
+	data = mdiobus_read(priv->mii, serdes_phy_addr,
+			    SERDES_GCR0);
+
+	data &= ~SERDES_RATE_MASK;
+	data &= ~SERDES_PCLK_MASK;
+
+	if (priv->plat->speed_2500_en)
+		data |= SERDES_RATE_PCIE_GEN2 << SERDES_RATE_PCIE_SHIFT |
+			SERDES_PCLK_37p5MHZ << SERDES_PCLK_SHIFT;
+	else
+		data |= SERDES_RATE_PCIE_GEN1 << SERDES_RATE_PCIE_SHIFT |
+			SERDES_PCLK_70MHZ << SERDES_PCLK_SHIFT;
+
+	mdiobus_write(priv->mii, serdes_phy_addr, SERDES_GCR0, data);
+
 	/* assert clk_req */
 	data = mdiobus_read(priv->mii, serdes_phy_addr,
 			    SERDES_GCR0);
@@ -175,7 +191,29 @@ static int intel_serdes_powerdown(struct
 	return 0;
 }
 
+static int intel_speed_mode_2500(struct net_device *ndev)
+{
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	int serdes_phy_addr = 0;
+	u32 data = 0;
+
+	serdes_phy_addr = priv->plat->intel_adhoc_addr;
+
+	/* Determine the link speed mode: 2.5Gbps/1Gbps */
+	data = mdiobus_read(priv->mii, serdes_phy_addr,
+			    SERDES_GCR);
+
+	if (((data & SERDES_LINK_MODE_MASK) >> SERDES_LINK_MODE_SHIFT) ==
+	    SERDES_LINK_MODE_2G5) {
+		dev_info(priv->device, "Link Speed Mode: 2.5Gbps\n");
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
 const struct stmmac_serdes_ops intel_serdes_ops = {
 	.serdes_powerup = intel_serdes_powerup,
 	.serdes_powerdown = intel_serdes_powerdown,
+	.speed_mode_2500 = intel_speed_mode_2500,
 };
Index: b/drivers/net/ethernet/stmicro/stmmac/intel_serdes.h
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/intel_serdes.h
+++ b/drivers/net/ethernet/stmicro/stmmac/intel_serdes.h
@@ -9,6 +9,7 @@
 #define POLL_DELAY_US 8
 
 /* SERDES Register */
+#define SERDES_GCR	0x0	/* Global Conguration */
 #define SERDES_GSR0	0x5	/* Global Status Reg0 */
 #define SERDES_GCR0	0xb	/* Global Configuration Reg0 */
 
@@ -16,8 +17,20 @@
 #define SERDES_PLL_CLK		BIT(0)		/* PLL clk valid signal */
 #define SERDES_RST		BIT(2)		/* Serdes Reset */
 #define SERDES_PWR_ST_MASK	GENMASK(6, 4)	/* Serdes Power state*/
+#define SERDES_RATE_MASK	GENMASK(9, 8)
+#define SERDES_PCLK_MASK	GENMASK(14, 12)	/* PCLK rate to PHY */
+#define SERDES_LINK_MODE_MASK	GENMASK(2, 1)
+#define SERDES_LINK_MODE_SHIFT	1
 #define SERDES_PWR_ST_SHIFT	4
 #define SERDES_PWR_ST_P0	0x0
 #define SERDES_PWR_ST_P3	0x3
+#define SERDES_LINK_MODE_2G5	0x3
+#define SERSED_LINK_MODE_1G	0x2
+#define SERDES_PCLK_37p5MHZ	0x0
+#define SERDES_PCLK_70MHZ	0x1
+#define SERDES_RATE_PCIE_GEN1	0x0
+#define SERDES_RATE_PCIE_GEN2	0x1
+#define SERDES_RATE_PCIE_SHIFT	8
+#define SERDES_PCLK_SHIFT	12
 
 #endif /* __INTEL_SERDES_H__ */
Index: b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -809,6 +809,25 @@ static void stmmac_validate(struct phyli
 	phylink_set(mac_supported, Asym_Pause);
 	phylink_set_port_modes(mac_supported);
 
+	if (priv->plat->has_gmac ||
+	    priv->plat->has_gmac4 ||
+	    priv->plat->has_xgmac) {
+		phylink_set(mac_supported, 1000baseT_Half);
+		phylink_set(mac_supported, 1000baseT_Full);
+		phylink_set(mac_supported, 1000baseKX_Full);
+	}
+
+	/* 2.5G mode only support 2500baseT full duplex only */
+	if (priv->plat->has_gmac4 && priv->plat->speed_2500_en) {
+		phylink_set(mac_supported, 2500baseT_Full);
+		phylink_set(mask, 10baseT_Half);
+		phylink_set(mask, 10baseT_Full);
+		phylink_set(mask, 100baseT_Half);
+		phylink_set(mask, 100baseT_Full);
+		phylink_set(mask, 1000baseT_Half);
+		phylink_set(mask, 1000baseT_Full);
+	}
+
 	/* Cut down 1G if asked to */
 	if ((max_speed > 0) && (max_speed < 1000)) {
 		phylink_set(mask, 1000baseT_Full);
@@ -2948,7 +2967,8 @@ static int stmmac_open(struct net_device
 	/* Start phy converter after MDIO bus IRQ handling is up */
 	if (priv->plat->setup_phy_conv) {
 		ret = priv->plat->setup_phy_conv(priv->mii, priv->phy_conv_irq,
-						 priv->plat->phy_addr);
+						 priv->plat->phy_addr,
+						 priv->plat->speed_2500_en);
 
 		if (ret < 0) {
 			netdev_err(priv->dev,
@@ -5053,6 +5073,9 @@ int stmmac_dvr_probe(struct device *devi
 		}
 	}
 
+	if (priv->plat->has_serdes)
+		priv->plat->speed_2500_en = stmmac_speed_mode_2500(priv, ndev);
+
 	ret = stmmac_phy_setup(priv);
 	if (ret) {
 		netdev_err(ndev, "failed to setup phy (%d)\n", ret);
Index: b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -122,12 +122,13 @@ static struct mdio_board_info intel_mgbe
 };
 
 static int setup_intel_mgbe_phy_conv(struct mii_bus *bus, int irq,
-				     int phy_addr)
+				     int phy_addr, bool speed_2500_en)
 {
 	struct dwxpcs_platform_data *pdata = &intel_mgbe_pdata;
 
 	pdata->irq = irq;
 	pdata->ext_phy_addr = phy_addr;
+	pdata->speed_2500_en = speed_2500_en;
 
 	return mdiobus_create_device(bus, &intel_mgbe_bdinfo);
 }
Index: b/include/linux/stmmac.h
===================================================================
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -167,7 +167,7 @@ struct plat_stmmacenet_data {
 	void (*exit)(struct platform_device *pdev, void *priv);
 	struct mac_device_info *(*setup)(void *priv);
 	int (*setup_phy_conv)(struct mii_bus *bus, int irq,
-	     int phy_addr);
+	     int phy_addr, bool speed_2500_en);
 	int (*remove_phy_conv)(struct mii_bus *bus);
 	void *bsp_priv;
 	struct clk *stmmac_clk;
@@ -197,6 +197,7 @@ struct plat_stmmacenet_data {
 	int msi_tx_base_vec;
 	bool vlan_fail_q_en;
 	u8 vlan_fail_q;
+	bool speed_2500_en;
 	bool sph_disable;
 };
 #endif
