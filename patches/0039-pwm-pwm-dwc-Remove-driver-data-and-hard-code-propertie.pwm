From 38efb45ca31fda60994987e91a8c3d4e852b1fa2 Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Fri, 8 May 2020 14:31:46 +0300
Subject: [PATCH 39/55] pwm: pwm-dwc: Remove driver data and hard code
 properties
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Since now driver supports only one device the PWM maintainer asked to
hard code Elkhard Lake timer properties.

Review comment from Uwe Kleine-KÃ¶nig <u.kleine-koenig@pengutronix.de>:
	"If there is only a single device type, you could better hard code
	(with cpp symbols) the values contained in ehl_driver_data."

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/pwm/pwm-dwc.c | 19 ++++---------------
 1 file changed, 4 insertions(+), 15 deletions(-)

diff --git a/drivers/pwm/pwm-dwc.c b/drivers/pwm/pwm-dwc.c
index e7ef34fd00c9..1f64420084d0 100644
--- a/drivers/pwm/pwm-dwc.c
+++ b/drivers/pwm/pwm-dwc.c
@@ -30,6 +30,7 @@
 #define DWC_TIMERS_COMP_VERSION	0xac
 
 #define DWC_TIMERS_TOTAL	8
+#define DWC_CLK_PERIOD_NS	10
 
 /* Timer Control Register */
 #define DWC_TIM_CTRL_EN		BIT(0)
@@ -39,11 +40,6 @@
 #define DWC_TIM_CTRL_INT_MASK	BIT(2)
 #define DWC_TIM_CTRL_PWM	BIT(3)
 
-struct dwc_pwm_driver_data {
-	unsigned long clk_period_ns;
-	int npwm;
-};
-
 struct dwc_pwm_ctx {
 	u32 cnt;
 	u32 cnt2;
@@ -173,12 +169,10 @@ static const struct pwm_ops dwc_pwm_ops = {
 
 static int dwc_pwm_probe(struct pci_dev *pci, const struct pci_device_id *id)
 {
-	struct dwc_pwm_driver_data *data;
 	struct dwc_pwm *dwc;
 	struct device *dev;
 	int ret;
 
-	data = (struct dwc_pwm_driver_data *) id->driver_data;
 	dev = &pci->dev;
 
 	dwc = devm_kzalloc(&pci->dev, sizeof(*dwc), GFP_KERNEL);
@@ -186,7 +180,7 @@ static int dwc_pwm_probe(struct pci_dev *pci, const struct pci_device_id *id)
 		return -ENOMEM;
 
 	dwc->dev = dev;
-	dwc->clk_period_ns = data->clk_period_ns;
+	dwc->clk_period_ns = DWC_CLK_PERIOD_NS;
 
 	ret = pcim_enable_device(pci);
 	if (ret) {
@@ -212,7 +206,7 @@ static int dwc_pwm_probe(struct pci_dev *pci, const struct pci_device_id *id)
 
 	dwc->chip.dev = dev;
 	dwc->chip.ops = &dwc_pwm_ops;
-	dwc->chip.npwm = data->npwm;
+	dwc->chip.npwm = DWC_TIMERS_TOTAL;
 	dwc->chip.base = -1;
 
 	ret = pwmchip_add(&dwc->chip);
@@ -280,13 +274,8 @@ static int dwc_pwm_resume(struct device *dev)
 
 static SIMPLE_DEV_PM_OPS(dwc_pwm_pm_ops, dwc_pwm_suspend, dwc_pwm_resume);
 
-static const struct dwc_pwm_driver_data ehl_driver_data = {
-	.npwm = 8,
-	.clk_period_ns = 10,
-};
-
 static const struct pci_device_id dwc_pwm_id_table[] = {
-	{ PCI_VDEVICE(INTEL, 0x4bb7), (kernel_ulong_t) &ehl_driver_data },
+	{ PCI_VDEVICE(INTEL, 0x4bb7) }, /* Elkhart Lake */
 	{  }	/* Terminating Entry */
 };
 MODULE_DEVICE_TABLE(pci, dwc_pwm_id_table);
-- 
2.27.0

