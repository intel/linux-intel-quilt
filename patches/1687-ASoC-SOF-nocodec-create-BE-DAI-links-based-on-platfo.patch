From 0c4cfe37c773edb93177b5a895cdb54343e8a5c9 Mon Sep 17 00:00:00 2001
From: Keyon Jie <yang.jie@linux.intel.com>
Date: Fri, 22 Jun 2018 21:24:05 +0800
Subject: [PATCH 1687/2302] ASoC: SOF: nocodec: create BE DAI links based on
 platform dai drivers

This patch create nocodec BE DAI links based on platform dai drivers,
with it, we can support multiple SSP/BEs for nocodec mode.

Signed-off-by: Keyon Jie <yang.jie@linux.intel.com>
---
 include/sound/sof.h          |  7 ++++-
 sound/soc/sof/Makefile       |  2 +-
 sound/soc/sof/nocodec.c      | 67 +++++++++++++++-----------------------------
 sound/soc/sof/sof-acpi-dev.c |  4 +--
 sound/soc/sof/sof-pci-dev.c  |  4 +--
 sound/soc/sof/utils.c        | 55 ++++++++++++++++++++++++++++++++++++
 6 files changed, 88 insertions(+), 51 deletions(-)
 create mode 100644 sound/soc/sof/utils.c

diff --git a/include/sound/sof.h b/include/sound/sof.h
index f605624..e522e13 100644
--- a/include/sound/sof.h
+++ b/include/sound/sof.h
@@ -17,6 +17,7 @@
 #include <linux/device.h>
 #include <linux/platform_device.h>
 #include <linux/pci.h>
+#include <sound/soc.h>
 #include <sound/soc-acpi.h>
 #include <uapi/sound/sof-ipc.h>
 
@@ -76,6 +77,10 @@ struct sof_dev_desc {
 int sof_nocodec_setup(struct device *dev,
 		      struct snd_sof_pdata *sof_pdata,
 		      struct snd_soc_acpi_mach *mach,
-		      const struct sof_dev_desc *desc);
+		      const struct sof_dev_desc *desc,
+		      struct snd_sof_dsp_ops *ops);
 
+int sof_bes_setup(struct device *dev, struct snd_sof_dsp_ops *ops,
+		  struct snd_soc_dai_link *links, int link_num,
+		  struct snd_soc_card *card);
 #endif
diff --git a/sound/soc/sof/Makefile b/sound/soc/sof/Makefile
index e081723..b3ba39d 100644
--- a/sound/soc/sof/Makefile
+++ b/sound/soc/sof/Makefile
@@ -3,7 +3,7 @@
 ccflags-y += -DDEBUG
 
 snd-sof-objs := core.o ops.o loader.o ipc.o pcm.o pm.o debug.o topology.o\
-		control.o trace.o compressed.o
+		control.o trace.o compressed.o utils.o
 snd-sof-spi-objs := hw-spi.o
 
 snd-sof-pci-objs := sof-pci-dev.o
diff --git a/sound/soc/sof/nocodec.c b/sound/soc/sof/nocodec.c
index dab4e2e..0e1e271 100644
--- a/sound/soc/sof/nocodec.c
+++ b/sound/soc/sof/nocodec.c
@@ -20,12 +20,21 @@
 #include <sound/soc.h>
 #include <sound/jack.h>
 #include <sound/sof.h>
+#include "sof-priv.h"
+
+static struct snd_soc_card sof_nocodec_card = {
+	.name = "sof-nocodec",
+};
 
 int sof_nocodec_setup(struct device *dev,
 		      struct snd_sof_pdata *sof_pdata,
 		      struct snd_soc_acpi_mach *mach,
-		      const struct sof_dev_desc *desc)
+		      const struct sof_dev_desc *desc,
+		      struct snd_sof_dsp_ops *ops)
 {
+	struct snd_soc_dai_link *links;
+	int ret;
+
 	if (!mach)
 		return -EINVAL;
 
@@ -35,54 +44,22 @@ int sof_nocodec_setup(struct device *dev,
 	mach->sof_fw_filename = desc->nocodec_fw_filename;
 	mach->sof_tplg_filename = desc->nocodec_tplg_filename;
 
-	return 0;
-}
-EXPORT_SYMBOL(sof_nocodec_setup);
-
-static int sof_nocodec_codec_fixup(struct snd_soc_pcm_runtime *rtd,
-				   struct snd_pcm_hw_params *params)
-{
-	// TODO: read this from topology
-	return 0;
-}
-
-static struct snd_soc_ops sof_nocodec_ops = {};
+	/* create dummy BE dai_links */
+	links = devm_kzalloc(dev, sizeof(struct snd_soc_dai_link) *
+			     ops->dai_drv->num_drv, GFP_KERNEL);
+	if (!links)
+		return -ENOMEM;
 
-static int nocodec_rtd_init(struct snd_soc_pcm_runtime *rtd)
-{
-	snd_soc_set_dmi_name(rtd->card, NULL);
+	ret = sof_bes_setup(dev, ops, links, ops->dai_drv->num_drv,
+			    &sof_nocodec_card);
+	if (ret) {
+		kfree(links);
+		return ret;
+	}
 
 	return 0;
 }
-
-/* we just set some BEs - FE provided by topology */
-static struct snd_soc_dai_link sof_nocodec_dais[] = {
-	/* Back End DAI links */
-	{
-		/* SSP0 - Codec */
-		.name = "NoCodec",
-		.id = 0,
-		.init = nocodec_rtd_init,
-		.cpu_dai_name = "sof-nocodec-dai",
-		.platform_name = "sof-audio",
-		.no_pcm = 1,
-		.codec_dai_name = "snd-soc-dummy-dai",
-		.codec_name = "snd-soc-dummy",
-		.ops = &sof_nocodec_ops,
-		.dai_fmt = SND_SOC_DAIFMT_DSP_B | SND_SOC_DAIFMT_NB_NF |
-			SND_SOC_DAIFMT_CBS_CFS,
-		.ignore_suspend = 1,
-		.be_hw_params_fixup = sof_nocodec_codec_fixup,
-		.dpcm_playback = 1,
-		.dpcm_capture = 1,
-	},
-};
-
-static struct snd_soc_card sof_nocodec_card = {
-	.name = "sof-nocodec",
-	.dai_link = sof_nocodec_dais,
-	.num_links = ARRAY_SIZE(sof_nocodec_dais),
-};
+EXPORT_SYMBOL(sof_nocodec_setup);
 
 static int sof_nocodec_probe(struct platform_device *pdev)
 {
diff --git a/sound/soc/sof/sof-acpi-dev.c b/sound/soc/sof/sof-acpi-dev.c
index dd71297..fec3b01 100644
--- a/sound/soc/sof/sof-acpi-dev.c
+++ b/sound/soc/sof/sof-acpi-dev.c
@@ -246,7 +246,7 @@ static int sof_acpi_probe(struct platform_device *pdev)
 	/* force nocodec mode */
 	dev_warn(dev, "Force to use nocodec mode\n");
 	mach = devm_kzalloc(dev, sizeof(*mach), GFP_KERNEL);
-	ret = sof_nocodec_setup(dev, sof_pdata, mach, desc);
+	ret = sof_nocodec_setup(dev, sof_pdata, mach, desc, ops);
 	if (ret < 0)
 		return ret;
 #else
@@ -257,7 +257,7 @@ static int sof_acpi_probe(struct platform_device *pdev)
 		/* fallback to nocodec mode */
 		dev_warn(dev, "No matching ASoC machine driver found - using nocodec\n");
 		mach = devm_kzalloc(dev, sizeof(*mach), GFP_KERNEL);
-		ret = sof_nocodec_setup(dev, sof_pdata, mach, desc);
+		ret = sof_nocodec_setup(dev, sof_pdata, mach, desc, ops);
 		if (ret < 0)
 			return ret;
 #else
diff --git a/sound/soc/sof/sof-pci-dev.c b/sound/soc/sof/sof-pci-dev.c
index 7a2d48e..83c71ac 100644
--- a/sound/soc/sof/sof-pci-dev.c
+++ b/sound/soc/sof/sof-pci-dev.c
@@ -226,7 +226,7 @@ static int sof_pci_probe(struct pci_dev *pci,
 	/* force nocodec mode */
 	dev_warn(dev, "Force to use nocodec mode\n");
 	mach = devm_kzalloc(dev, sizeof(*mach), GFP_KERNEL);
-	ret = sof_nocodec_setup(dev, sof_pdata, mach, desc);
+	ret = sof_nocodec_setup(dev, sof_pdata, mach, desc, ops);
 	if (ret < 0)
 		return ret;
 #else
@@ -237,7 +237,7 @@ static int sof_pci_probe(struct pci_dev *pci,
 		/* fallback to nocodec mode */
 		dev_warn(dev, "No matching ASoC machine driver found - using nocodec\n");
 		mach = devm_kzalloc(dev, sizeof(*mach), GFP_KERNEL);
-		ret = sof_nocodec_setup(dev, sof_pdata, mach, desc);
+		ret = sof_nocodec_setup(dev, sof_pdata, mach, desc, ops);
 		if (ret < 0)
 			return ret;
 #else
diff --git a/sound/soc/sof/utils.c b/sound/soc/sof/utils.c
new file mode 100644
index 0000000..8f2116a
--- /dev/null
+++ b/sound/soc/sof/utils.c
@@ -0,0 +1,55 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2018 Intel Corporation. All rights reserved.
+ *
+ * Author: Keyon Jie <yang.jie@linux.intel.com>
+ */
+
+#include <linux/device.h>
+#include <sound/soc.h>
+#include <sound/sof.h>
+#include "sof-priv.h"
+
+int sof_bes_setup(struct device *dev, struct snd_sof_dsp_ops *ops,
+		  struct snd_soc_dai_link *links, int link_num,
+		  struct snd_soc_card *card)
+{
+	char name[32];
+	int i;
+
+	if (!ops || !links || !card)
+		return -EINVAL;
+
+	/* set up BE dai_links */
+	for (i = 0; i < link_num; i++) {
+		snprintf(name, 32, "NoCodec-%d", i);
+		links[i].name = kmemdup(name, sizeof(name), GFP_KERNEL);
+		if (!links[i].name)
+			goto no_mem;
+
+		links[i].id = i;
+		links[i].no_pcm = 1;
+		links[i].cpu_dai_name = ops->dai_drv->drv[i].name;
+		links[i].platform_name = "sof-audio";
+		links[i].codec_dai_name = "snd-soc-dummy-dai";
+		links[i].codec_name = "snd-soc-dummy";
+		links[i].dpcm_playback = 1;
+		links[i].dpcm_capture = 1;
+	}
+
+	card->dai_link = links;
+	card->num_links = link_num;
+
+	return 0;
+no_mem:
+	/* free allocated memories and return error */
+	for (; i > 0; i--)
+		kfree(links[i - 1].name);
+
+	return -ENOMEM;
+}
+EXPORT_SYMBOL(sof_bes_setup);
+
-- 
2.7.4

