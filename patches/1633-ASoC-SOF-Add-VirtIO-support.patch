From 7164ca8df7196ba26c888bcdb911d7c86d7d9f08 Mon Sep 17 00:00:00 2001
From: Liam Girdwood <liam.r.girdwood@linux.intel.com>
Date: Mon, 8 Jan 2018 20:35:47 +0000
Subject: [PATCH 1633/2313] ASoC: SOF: Add VirtIO support

Add support for running SOF on multiple VMs within the same HW.

Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
---
 sound/soc/sof/virtio-be.c | 126 ++++++++++++++++++++++++++++++++++++++++++++
 sound/soc/sof/virtio-fe.c | 130 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 256 insertions(+)
 create mode 100644 sound/soc/sof/virtio-be.c
 create mode 100644 sound/soc/sof/virtio-fe.c

diff --git a/sound/soc/sof/virtio-be.c b/sound/soc/sof/virtio-be.c
new file mode 100644
index 0000000..4c07cae
--- /dev/null
+++ b/sound/soc/sof/virtio-be.c
@@ -0,0 +1,126 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2017 Intel Corporation. All rights reserved.
+ *
+ * Author: Luo Xionghu <xionghu.luo@intel.com>
+ *         Liam Girdwood <liam.r.girdwood@linux.intel.com>
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
+#include <linux/firmware.h>
+#include <virtio.h>
+#include <uapi/sound/sof-fw.h>
+#include "sof-priv.h"
+#include "ops.h"
+
+/* BE driver
+ *
+ * This driver will create IO Queues for communition from FE drivers.
+ * The FE driver will send real IPC structures over the queue and then
+ * the BE driver will send the structures directlt to the DSP. The BE will
+ * get the IPC reply from the DSP and send it back to the FE over the queue.
+ *
+ * The virt IO message Q handlers in this file will :-
+ *
+ * 1) Check that the message is valid and not for any componenets that don't
+ *    belong to the guest.
+ *
+ * 2) Call snd_sof_dsp_tx_msg(struct snd_sof_dev *sdev,
+ *	struct snd_sof_ipc_msg *msg) to send the message to the DSP.
+ *
+ * Replies will be sent back using a similar method.
+ */
+
+static int sof_virtio_validate(struct virtio_device *dev)
+{
+	/* do we need this func ?? */
+	return 0;
+}
+
+static int sof_virtio_probe(struct virtio_device *dev)
+{
+	/* register fe device with sof core */
+	//snd_sof_virtio_register_fe(dev);
+
+	/* create our virtqueues */s
+
+	/* send topology data to fe via virtq */
+
+	return 0;
+}
+
+static void sof_virtio_remove(struct virtio_device *dev)
+{
+	/* remove topology from fe via virtqueue */
+
+	/* destroy virtqueue */
+}
+
+#ifdef CONFIG_PM
+static int sof_virtio_freeze(struct virtio_device *dev)
+{
+	/* pause and suspend any streams for this FE */
+	return 0;
+}
+
+static int sof_virtio_restore(struct virtio_device *dev)
+{
+	/* restore and unpause any streams for this FE */
+	return 0;
+}
+#endif
+
+/* IDs of FEs */
+static const struct virtio_device_id *fe_id_table[] + {
+};
+
+static struct virtio_driver sof_be_virtio_driver = {
+	.driver = {
+		.name = "sof-virtio-be",
+		.owner = THIS_MODULE,
+	},
+
+	.id_table = fe_id_table,
+
+	//const unsigned int *feature_table;
+	//unsigned int feature_table_size;
+	//const unsigned int *feature_table_legacy;
+	//unsigned int feature_table_size_legacy;
+
+	validate = sof_virtio_validate,
+	probe = sof_virtio_probe,
+	remove = sof_virtio_remove,
+
+#ifdef CONFIG_PM
+	freeze = sof_virtio_freeze,
+	restore = sof_virtio_restore,
+#endif
+};
+
+/* this will be called by sof core when core is ready */
+int sof_virtio_register(struct snd_sof_dev *sdev)
+{
+	int ret;
+
+	ret = register_virtio_driver(&sof_be_virtio_driver);
+	/* do we need to do anythig else here */
+	return ret;
+}
+
+/* called by sof core when driver is removed */
+void sof_virtio_unregister(struct snd_sof_dev *sdev)
+{
+	unregister_virtio_driver(&sof_be_virtio_driver);
+	/* do we need to do anythig else here */
+}
diff --git a/sound/soc/sof/virtio-fe.c b/sound/soc/sof/virtio-fe.c
new file mode 100644
index 0000000..1019e65
--- /dev/null
+++ b/sound/soc/sof/virtio-fe.c
@@ -0,0 +1,130 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2017 Intel Corporation. All rights reserved.
+ *
+ * Author: Luo Xionghu <xionghu.luo@intel.com>
+ *         Liam Girdwood <liam.r.girdwood@linux.intel.com>
+ */
+
+/*
+ * virt IO FE driver
+ *
+ * The SOF driver thinks this driver is another audio DSP, however the calls
+ * made by the SOF driver core do not directly go to HW, but over a virtIO
+ * message Q to the virtIO BE driver.
+ *
+ * The virtIO message Q will use the *exact* same IPC structures as we currently
+ * use in the mailbox.
+ *
+ * Guest OS SOF core -> SOF FE -> virtIO Q -> SOF BE ->
+ * System OS SOF core -> DSP
+ *
+ * The mailbox IO and TX/RX msg functions below will do IO on the virt IO Q.
+ */
+
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/dma-mapping.h>
+#include <linux/firmware.h>
+#include <linux/device.h>
+#include <linux/virtio.h>
+#include <sound/sof.h>
+#include <uapi/sound/sof-fw.h>
+
+#include "sof-priv.h"
+#include "ops.h"
+#include "intel.h"
+
+/*
+ * IPC Firmware ready.
+ */
+static int virtio_fe_fw_ready(struct snd_sof_dev *sdev, u32 msg_id)
+{
+	/* not needed for FE ? */
+	return 0;
+}
+
+/*
+ * IPC Mailbox IO
+ */
+
+static void virtio_fe_mailbox_write(struct snd_sof_dev *sdev, u32 offset,
+				    void *message, size_t bytes)
+{
+	/* write data to message Q buffer before sending message */
+}
+
+static void virtio_fe_mailbox_read(struct snd_sof_dev *sdev, u32 offset,
+				   void *message, size_t bytes)
+{
+	/* read data from message Q buffer after receiving message */
+}
+
+static int virtio_fe_tx_busy(struct snd_sof_dev *sdev)
+{
+	/* return 1 if tx message Q is busy */
+}
+
+static int virtio_fe_tx_msg(struct snd_sof_dev *sdev,
+			    struct snd_sof_ipc_msg *msg)
+{
+	/* write msg to the virtio queue message for BE */
+
+	return 0;
+}
+
+static int virtio_fe_rx_msg(struct snd_sof_dev *sdev,
+			    struct snd_sof_ipc_msg *msg)
+{
+	/* read the virtio queue message from BE and copy to msg */
+	return 0;
+}
+
+/*
+ * Probe and remove.
+ */
+
+static int virtio_fe_probe(struct snd_sof_dev *sdev)
+{
+	/* register virtio device */
+
+	/* conenct virt queues to BE */
+}
+
+static int virtio_fe_remove(struct snd_sof_dev *sdev)
+{
+	/* free virtio resurces and unregister device */
+}
+
+/* baytrail ops */
+struct snd_sof_dsp_ops snd_sof_virtio_fe_ops = {
+	/* device init */
+	.probe		= virtio_fe_probe,
+	.remove		= virtio_fe_remove,
+
+	/* mailbox */
+	.mailbox_read	= virtio_fe_mailbox_read,
+	.mailbox_write	= virtio_fe_mailbox_write,
+
+	/* ipc */
+	.tx_msg		= virtio_fe_tx_msg,
+	.rx_msg		= virtio_fe_rx_msg,
+	.fw_ready	= virtio_fe_fw_ready,
+	.tx_busy	= virtio_fe_tx_busy,
+
+	/* module loading */
+//	.load_module	= snd_sof_parse_module_memcpy,
+
+	/*Firmware loading */
+	.load_firmware	= snd_sof_load_firmware_memcpy,
+};
+EXPORT_SYMBOL(snd_sof_virtio_fe_ops);
+
+MODULE_LICENSE("Dual BSD/GPL");
-- 
2.7.4

